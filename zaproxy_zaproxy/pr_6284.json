{"pr_number": 6284, "pr_title": "Address exceptions related to parameter parsing", "pr_author": "thc202", "pr_createdAt": "2020-11-09T09:57:59Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6284", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0ODQyNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6284#discussion_r519748426", "body": "```suggestion\r\n    void shouldHaveEmptyNamesForMissingNamesWhenRawParsing() {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {\n          \n          \n            \n                void shouldHaveEmptyNamesForMissingNamesWhenRawParsing() {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldHaveEmptyNamesForMissinNamesWhenRawParsing</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">shouldHaveEmptyNamesForMissingNamesWhenRawParsing</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ricekot", "createdAt": "2020-11-09T11:46:37Z", "path": "zap/src/test/java/org/zaproxy/zap/model/StandardParameterParserUnitTest.java", "diffHunk": "@@ -78,6 +80,114 @@ public void defaultParser() {\n         assertEquals(res2.get(3).getValue(), \"g\");\n     }\n \n+    @Test\n+    void shouldReturnEmptyListWhenParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameValuePairWhenParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalNameIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"%x=1&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldKeepOriginalValueIfMalformedWhenParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a=%x&b=2\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"2\")));\n+    }\n+\n+    @Test\n+    void shouldParseParametersKeepingEmptyValueWhenAbsent() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseParameters(\"a&b\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"a\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"\")));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyListWhenRawParsingNullString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(null);\n+        // Then\n+        assertThat(parameters, is(empty()));\n+    }\n+\n+    @Test\n+    void shouldReturnEmptyNameAndNullValueWhenRawParsingEmptyString() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"\");\n+        // Then\n+        assertThat(parameters, hasSize(1));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"\")));\n+        assertThat(parameters.get(0).getValue(), is(nullValue()));\n+    }\n+\n+    @Test\n+    void shouldNotDecodeNameNorValueWhenRawParsing() {\n+        // Given / When\n+        List<NameValuePair> parameters = spp.parseRawParameters(\"%x=1&b%25=%20\");\n+        // Then\n+        assertThat(parameters, hasSize(2));\n+        assertThat(parameters.get(0).getName(), is(equalTo(\"%x\")));\n+        assertThat(parameters.get(0).getValue(), is(equalTo(\"1\")));\n+        assertThat(parameters.get(1).getName(), is(equalTo(\"b%25\")));\n+        assertThat(parameters.get(1).getValue(), is(equalTo(\"%20\")));\n+    }\n+\n+    @Test\n+    void shouldHaveEmptyNamesForMissinNamesWhenRawParsing() {", "originalCommit": "0887cd7f5d4cfdec1f20eaabd75c25060572ef91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f", "url": "https://github.com/zaproxy/zaproxy/commit/0dd97068ae94d7447627ae2721ad34681e060d2f", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>", "committedDate": "2020-11-09T12:42:10Z", "type": "commit"}, {"oid": "0dd97068ae94d7447627ae2721ad34681e060d2f", "url": "https://github.com/zaproxy/zaproxy/commit/0dd97068ae94d7447627ae2721ad34681e060d2f", "message": "Address exceptions related to parameter parsing\n\nDo not allow null values as the older method didn't allow them, which\nwas causing exceptions in scan rules, also, catch exception thrown when\ndecoding name/value, for same reason.\nProvide a method that does not decode and allows null values.\n\nSigned-off-by: thc202 <thc202@gmail.com>", "committedDate": "2020-11-09T12:42:10Z", "type": "forcePushed"}]}