{"pr_number": 6057, "pr_title": "Fix bug that makes zap test same request twice", "pr_author": "DiogoMRSilva", "pr_createdAt": "2020-06-30T22:29:28Z", "pr_url": "https://github.com/zaproxy/zaproxy/pull/6057", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNjY5MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r448016690", "body": "Instead of importing and using you can simply reference it statically.\r\n```suggestion\r\n                && node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_TEMPORARY;\r\n```", "bodyText": "Instead of importing and using you can simply reference it statically.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            && node.getHistoryReference().getHistoryType() == TYPE_TEMPORARY;\n          \n          \n            \n                            && node.getHistoryReference().getHistoryType() == HistoryReference.TYPE_TEMPORARY;", "bodyHTML": "<p dir=\"auto\">Instead of importing and using you can simply reference it statically.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">&amp;&amp;</span> node<span class=\"pl-k\">.</span>getHistoryReference()<span class=\"pl-k\">.</span>getHistoryType() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">TYPE_TEMPORARY</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">&amp;&amp;</span> node<span class=\"pl-k\">.</span>getHistoryReference()<span class=\"pl-k\">.</span>getHistoryType() <span class=\"pl-k\">==</span> <span class=\"pl-smi x x-first\">HistoryReference</span><span class=\"pl-c1\"><span class=\"pl-k x x-last\">.</span>TYPE_TEMPORARY</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kingthorin", "createdAt": "2020-06-30T22:34:24Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +367,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {\n+        return node.getMethod().equals(HttpRequestHeader.GET)\n+                && node.getHistoryReference().getHistoryType() == TYPE_TEMPORARY;", "originalCommit": "5df2419cb049eff567bacc8363954cf254ec714f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MjI4Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r448442286", "bodyText": "thx, I  know but I was using it more than once and lines were getting to big to fit in one line.", "author": "DiogoMRSilva", "createdAt": "2020-07-01T15:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNjY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451624531", "body": "This check will not work properly for all cases, not all nodes are included by default (e.g. out of scope, filters, not recurse) so we can't discard the temporary node beforehand. Taking the example in the issue, no nodes are scanned if you select the node \"3\" and disable recurse.\r\n\r\nIt might be safer to de-duplicate once we have all of them.", "bodyText": "This check will not work properly for all cases, not all nodes are included by default (e.g. out of scope, filters, not recurse) so we can't discard the temporary node beforehand. Taking the example in the issue, no nodes are scanned if you select the node \"3\" and disable recurse.\nIt might be safer to de-duplicate once we have all of them.", "bodyHTML": "<p dir=\"auto\">This check will not work properly for all cases, not all nodes are included by default (e.g. out of scope, filters, not recurse) so we can't discard the temporary node beforehand. Taking the example in the issue, no nodes are scanned if you select the node \"3\" and disable recurse.</p>\n<p dir=\"auto\">It might be safer to de-duplicate once we have all of them.</p>", "author": "thc202", "createdAt": "2020-07-08T15:16:15Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -317,7 +319,7 @@ public void run() {\n                         startNode,\n                         true,\n                         node -> {\n-                            if (canScanNode(node)) {\n+                            if (canScanNode(node) && bestNodeForUrl(node)) {", "originalCommit": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTE2NQ==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451681165", "bodyText": "I forgot that case. I believe it can be solved by adding the check canScanNode to the sibling\n...\n            if (!sibling.isSameAs(node)\n+                   && canScanNode(sibling)\n                    && sibling.getMethod().equals(nodeMethod)\n...\nWhat do you think?", "author": "DiogoMRSilva", "createdAt": "2020-07-08T16:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY5MDExNg==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451690116", "bodyText": "That would address most part of it (e.g. out of scope, filters) but still not the above recurse case, the canScanNode does not tell if a node is included in the nodes to be scanned, that's done while traversing (to not check more nodes than really needed).", "author": "thc202", "createdAt": "2020-07-08T16:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNDc5Nw==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451714797", "bodyText": "True, I will do it after collecting all history nodes as you suggested.", "author": "DiogoMRSilva", "createdAt": "2020-07-08T17:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE4NDY0MA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r452184640", "bodyText": "It can also be de-duplicated as they are added, use a set and resolve the duplication immediately (might be simpler).", "author": "thc202", "createdAt": "2020-07-09T12:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MzgxMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r453173810", "bodyText": "Yes, it's simpler :), I used a dict to keep track of the locations where the requests were stored.", "author": "DiogoMRSilva", "createdAt": "2020-07-11T08:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDgxMA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451624810", "body": "`isTemporary`", "bodyText": "isTemporary", "bodyHTML": "<p dir=\"auto\"><code>isTemporary</code></p>", "author": "thc202", "createdAt": "2020-07-08T15:16:40Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +365,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {", "originalCommit": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyNDg1OA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r451624858", "body": "The type check would be enough, temporary tree nodes are all GET.", "bodyText": "The type check would be enough, temporary tree nodes are all GET.", "bodyHTML": "<p dir=\"auto\">The type check would be enough, temporary tree nodes are all GET.</p>", "author": "thc202", "createdAt": "2020-07-08T15:16:45Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -363,6 +365,45 @@ public void run() {\n         }\n     }\n \n+    private boolean bestNodeForUrl(StructuralNode node) {\n+\n+        if (!hasSamePropertiesAsRequestCreatedToFillSiteMap(node)) {\n+            return true;\n+        }\n+\n+        StructuralNode parentNode;\n+        try {\n+            parentNode = node.getParent();\n+        } catch (DatabaseException e) {\n+            return true;\n+        }\n+\n+        if (parentNode == null) {\n+            return true;\n+        }\n+\n+        String nodeURI = node.getURI().getEscapedURI();\n+        String nodeMethod = node.getMethod();\n+        Iterator<StructuralNode> siblingsIt = parentNode.getChildIterator();\n+        while (siblingsIt.hasNext()) {\n+            StructuralNode sibling = siblingsIt.next();\n+            String childURI = sibling.getURI().getEscapedURI();\n+            if (!sibling.isSameAs(node)\n+                    && sibling.getMethod().equals(nodeMethod)\n+                    && childURI.equals(nodeURI)\n+                    && sibling.isLeaf()\n+                    && !hasSamePropertiesAsRequestCreatedToFillSiteMap(sibling)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasSamePropertiesAsRequestCreatedToFillSiteMap(StructuralNode node) {\n+        return node.getMethod().equals(HttpRequestHeader.GET)", "originalCommit": "6cc2172c8cbe4abc4a083c035dc06958b3c8ab23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDg5NA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r453854894", "body": "The checks can be reorder instead, e.g.:\r\n```Java\r\nif (index == null) {\r\n    if (isTemporary(node)) {\r\n        indexOfTemporary.put(nodeHash(node), messagesIdsToAppScan.size());\r\n    }\r\n    messagesIdsToAppScan.add(nodeHistoryId);\r\n} else if (!isTemporary(node)) {\r\n    messagesIdsToAppScan.set(index, nodeHistoryId);\r\n}\r\n```", "bodyText": "The checks can be reorder instead, e.g.:\nif (index == null) {\n    if (isTemporary(node)) {\n        indexOfTemporary.put(nodeHash(node), messagesIdsToAppScan.size());\n    }\n    messagesIdsToAppScan.add(nodeHistoryId);\n} else if (!isTemporary(node)) {\n    messagesIdsToAppScan.set(index, nodeHistoryId);\n}", "bodyHTML": "<p dir=\"auto\">The checks can be reorder instead, e.g.:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (index == null) {\n    if (isTemporary(node)) {\n        indexOfTemporary.put(nodeHash(node), messagesIdsToAppScan.size());\n    }\n    messagesIdsToAppScan.add(nodeHistoryId);\n} else if (!isTemporary(node)) {\n    messagesIdsToAppScan.set(index, nodeHistoryId);\n}\"><pre><span class=\"pl-k\">if</span> (index <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {\n    <span class=\"pl-k\">if</span> (isTemporary(node)) {\n        indexOfTemporary<span class=\"pl-k\">.</span>put(nodeHash(node), messagesIdsToAppScan<span class=\"pl-k\">.</span>size());\n    }\n    messagesIdsToAppScan<span class=\"pl-k\">.</span>add(nodeHistoryId);\n} <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>isTemporary(node)) {\n    messagesIdsToAppScan<span class=\"pl-k\">.</span>set(index, nodeHistoryId);\n}</pre></div>", "author": "thc202", "createdAt": "2020-07-13T18:41:47Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -313,12 +314,23 @@ public void run() {\n             }\n \n             for (StructuralNode startNode : startNodes) {\n+                Map<String, Integer> indexOfTemporary = new HashMap<>();\n                 traverse(\n                         startNode,\n                         true,\n                         node -> {\n                             if (canScanNode(node)) {\n-                                messagesIdsToAppScan.add(node.getHistoryReference().getHistoryId());\n+                                Integer index = indexOfTemporary.get(nodeHash(node));\n+                                int nodeHistoryId = node.getHistoryReference().getHistoryId();\n+                                if (isTemporary(node) && index == null) {\n+                                    indexOfTemporary.put(\n+                                            nodeHash(node), messagesIdsToAppScan.size());\n+                                    messagesIdsToAppScan.add(nodeHistoryId);\n+                                } else if (!isTemporary(node) && index == null) {\n+                                    messagesIdsToAppScan.add(nodeHistoryId);\n+                                } else if (!isTemporary(node) && index != null) {\n+                                    messagesIdsToAppScan.set(index, nodeHistoryId);\n+                                }", "originalCommit": "0a07784394e6a23ee32c8de300b5cc304df9a095", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NDcxMw==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r457594713", "bodyText": "yes, that looks better.", "author": "DiogoMRSilva", "createdAt": "2020-07-20T18:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODI5Ng==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r508338296", "body": "This is not working correctly when the temp node is after the non-temp node, it still scans both of them.", "bodyText": "This is not working correctly when the temp node is after the non-temp node, it still scans both of them.", "bodyHTML": "<p dir=\"auto\">This is not working correctly when the temp node is after the non-temp node, it still scans both of them.</p>", "author": "thc202", "createdAt": "2020-10-20T09:12:09Z", "path": "zap/src/main/java/org/parosproxy/paros/core/scanner/HostProcess.java", "diffHunk": "@@ -313,12 +314,23 @@ public void run() {\n             }\n \n             for (StructuralNode startNode : startNodes) {\n+                Map<String, Integer> indexOfTemporary = new HashMap<>();\n                 traverse(\n                         startNode,\n                         true,\n                         node -> {\n                             if (canScanNode(node)) {\n-                                messagesIdsToAppScan.add(node.getHistoryReference().getHistoryId());\n+                                Integer index = indexOfTemporary.get(nodeHash(node));\n+                                int nodeHistoryId = node.getHistoryReference().getHistoryId();\n+                                if (index == null) {", "originalCommit": "ae537ddaf65b14330d8aae4eeeec4db3d5a21292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5OTMwNA==", "url": "https://github.com/zaproxy/zaproxy/pull/6057#discussion_r522899304", "bodyText": "I incorrectly assumed they always came first. Thx for the catch", "author": "DiogoMRSilva", "createdAt": "2020-11-13T11:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzODI5Ng=="}], "type": "inlineReview"}, {"oid": "86d695e8c92b264bec0e03b988526a863d10c5df", "url": "https://github.com/zaproxy/zaproxy/commit/86d695e8c92b264bec0e03b988526a863d10c5df", "message": "Refactor\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-11-12T21:17:01Z", "type": "forcePushed"}, {"oid": "c1b6fe69b1b048c09e6caec48a5c7ff29c1a5dc5", "url": "https://github.com/zaproxy/zaproxy/commit/c1b6fe69b1b048c09e6caec48a5c7ff29c1a5dc5", "message": "Fix bug that makes zap test same request twice\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-11-13T08:32:43Z", "type": "forcePushed"}, {"oid": "a794438d2947aa8f67ccce2d2f116e62c5fd6171", "url": "https://github.com/zaproxy/zaproxy/commit/a794438d2947aa8f67ccce2d2f116e62c5fd6171", "message": "Fix bug that makes zap test same request twice\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-11-13T11:27:56Z", "type": "forcePushed"}, {"oid": "0cef4321a6b0a3266df0e1f0f607db39e14a42ca", "url": "https://github.com/zaproxy/zaproxy/commit/0cef4321a6b0a3266df0e1f0f607db39e14a42ca", "message": "Fix bug that makes zap test same request twice\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-11-13T14:12:58Z", "type": "commit"}, {"oid": "0cef4321a6b0a3266df0e1f0f607db39e14a42ca", "url": "https://github.com/zaproxy/zaproxy/commit/0cef4321a6b0a3266df0e1f0f607db39e14a42ca", "message": "Fix bug that makes zap test same request twice\n\nSigned-off-by: Diogo Silva <diogo.m.r.silva@tecnico.ulisboa.pt>", "committedDate": "2020-11-13T14:12:58Z", "type": "forcePushed"}]}