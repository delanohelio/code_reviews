{"pr_number": 4644, "pr_title": "Standard behavior for ConstraintViolationException", "pr_author": "rafaelrenanpacheco", "pr_createdAt": "2020-12-01T14:36:35Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/4644", "timeline": [{"oid": "91ec87e2a227d3d71ef0291ee4809edb2e266d69", "url": "https://github.com/micronaut-projects/micronaut-core/commit/91ec87e2a227d3d71ef0291ee4809edb2e266d69", "message": "Standard behavior for ConstraintViolationException", "committedDate": "2020-12-01T14:12:26Z", "type": "commit"}, {"oid": "e0cc6d3451423b3dd92426cacd0e8a81b6db90a1", "url": "https://github.com/micronaut-projects/micronaut-core/commit/e0cc6d3451423b3dd92426cacd0e8a81b6db90a1", "message": "configuration for embedded errors serialization", "committedDate": "2020-12-02T00:25:16Z", "type": "commit"}, {"oid": "5a48cd6102e92f1ac4b70f82d63c90455ff062c4", "url": "https://github.com/micronaut-projects/micronaut-core/commit/5a48cd6102e92f1ac4b70f82d63c90455ff062c4", "message": "use configuration to handle embedded errors", "committedDate": "2020-12-02T00:59:39Z", "type": "commit"}, {"oid": "4c687201e5a637160e9c533130fcb5c3dc99bbb9", "url": "https://github.com/micronaut-projects/micronaut-core/commit/4c687201e5a637160e9c533130fcb5c3dc99bbb9", "message": "remove commented code", "committedDate": "2020-12-02T01:02:19Z", "type": "commit"}, {"oid": "c519d4fe6b720df577fed73fd91127ff8266ccf1", "url": "https://github.com/micronaut-projects/micronaut-core/commit/c519d4fe6b720df577fed73fd91127ff8266ccf1", "message": "remove unused import", "committedDate": "2020-12-02T01:40:45Z", "type": "commit"}, {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558", "url": "https://github.com/micronaut-projects/micronaut-core/commit/e2b1614980be6702bf4aa295edffa3dd59154558", "message": "fix checkstyle", "committedDate": "2020-12-02T02:19:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzQyNA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933424", "body": "To avoid a breaking API change please restore the no argument constructor and annotate this one with `@Inject`", "bodyText": "To avoid a breaking API change please restore the no argument constructor and annotate this one with @Inject", "bodyHTML": "<p dir=\"auto\">To avoid a breaking API change please restore the no argument constructor and annotate this one with <code>@Inject</code></p>", "author": "graemerocher", "createdAt": "2020-12-02T06:51:27Z", "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +47,20 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }", "originalCommit": "e2b1614980be6702bf4aa295edffa3dd59154558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzQ1OQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933459", "body": "To avoid a breaking API change please restore the no argument constructor and annotate this one with `@Inject`", "bodyText": "To avoid a breaking API change please restore the no argument constructor and annotate this one with @Inject", "bodyHTML": "<p dir=\"auto\">To avoid a breaking API change please restore the no argument constructor and annotate this one with <code>@Inject</code></p>", "author": "graemerocher", "createdAt": "2020-12-02T06:51:34Z", "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -35,6 +37,12 @@\n @Singleton\n public class OptionalValuesSerializer extends JsonSerializer<OptionalValues<?>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }", "originalCommit": "e2b1614980be6702bf4aa295edffa3dd59154558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzYzMQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933631", "body": "Please assign `jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()` to a final local field to avoid repeated method calls", "bodyText": "Please assign jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList() to a final local field to avoid repeated method calls", "bodyHTML": "<p dir=\"auto\">Please assign <code>jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()</code> to a final local field to avoid repeated method calls</p>", "author": "graemerocher", "createdAt": "2020-12-02T06:52:02Z", "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -64,4 +73,8 @@ public void serialize(OptionalValues<?> value, JsonGenerator gen, SerializerProv\n         }\n         gen.writeEndObject();\n     }\n+\n+    private boolean canSerializeElementAsObject(Class<?> type) {\n+        return type != JsonError.class || !jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList();", "originalCommit": "e2b1614980be6702bf4aa295edffa3dd59154558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzc5NQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933795", "body": "Please assign `jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()` to a final local field to avoid repeated method calls", "bodyText": "Please assign jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList() to a final local field to avoid repeated method calls", "bodyHTML": "<p dir=\"auto\">Please assign <code>jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()</code> to a final local field to avoid repeated method calls</p>", "author": "graemerocher", "createdAt": "2020-12-02T06:52:26Z", "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +47,20 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }\n+\n     @Override\n     public HttpResponse<JsonError> handle(HttpRequest request, ConstraintViolationException exception) {\n         Set<ConstraintViolation<?>> constraintViolations = exception.getConstraintViolations();\n         if (constraintViolations == null || constraintViolations.isEmpty()) {\n             JsonError error = new JsonError(exception.getMessage() == null ? HttpStatus.BAD_REQUEST.getReason() : exception.getMessage());\n             error.link(Link.SELF, Link.of(request.getUri()));\n             return HttpResponse.badRequest(error);\n-        } else if (constraintViolations.size() == 1) {\n+        } else if (constraintViolations.size() == 1 && !jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()) {", "originalCommit": "e2b1614980be6702bf4aa295edffa3dd59154558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDA1Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533934057", "body": "I don't think we need a whole new nested config props just for this. Adding the field at the top level is fine", "bodyText": "I don't think we need a whole new nested config props just for this. Adding the field at the top level is fine", "bodyHTML": "<p dir=\"auto\">I don't think we need a whole new nested config props just for this. Adding the field at the top level is fine</p>", "author": "graemerocher", "createdAt": "2020-12-02T06:53:12Z", "path": "runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java", "diffHunk": "@@ -357,4 +379,22 @@ public void setPropertyNamingStrategy(PropertyNamingStrategy propertyNamingStrat\n         }\n         return javaTypes.toArray(new JavaType[0]);\n     }\n+\n+    @ConfigurationProperties(\"hateoas\")\n+    @Requires(\"jackson.hateoas\")\n+    public static final class Hateoas {\n+        /**\n+         * If true _embedded.errors will always be an array. When set to false, _embedded.errors will be serialized\n+         * as an object for 1 error or serialized as an array for 2 or more errors.\n+         */\n+        private boolean alwaysSerializeErrorsAsList = false;\n+\n+        public boolean isAlwaysSerializeErrorsAsList() {\n+            return alwaysSerializeErrorsAsList;\n+        }\n+\n+        public void setAlwaysSerializeErrorsAsList(boolean alwaysSerializeErrorsAsList) {\n+            this.alwaysSerializeErrorsAsList = alwaysSerializeErrorsAsList;\n+        }\n+    }", "originalCommit": "e2b1614980be6702bf4aa295edffa3dd59154558", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d0153c6d08c1ff02571cf39cd2bc37e8a238f8f6", "url": "https://github.com/micronaut-projects/micronaut-core/commit/d0153c6d08c1ff02571cf39cd2bc37e8a238f8f6", "message": "simplify property name", "committedDate": "2020-12-03T00:26:37Z", "type": "commit"}, {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a", "url": "https://github.com/micronaut-projects/micronaut-core/commit/1ef08864371091e4b65c2b4ffbaf357e61e1932a", "message": "optimize imports", "committedDate": "2020-12-03T00:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MDgzNA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r534840834", "body": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\r\n\r\n```java\r\nprivate final boolean alwaysSerializeErrorsAsList;\r\n\r\n@Inject\r\npublic ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\r\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\r\n}\r\n\r\npublic ConstraintExceptionHandler() {\r\n      this.alwaysSerializeErrorsAsList = true\r\n}\r\n```", "bodyText": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\nprivate final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic ConstraintExceptionHandler() {\n      this.alwaysSerializeErrorsAsList = true\n}", "bodyHTML": "<p dir=\"auto\">private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic ConstraintExceptionHandler() {\n      this.alwaysSerializeErrorsAsList = true\n}\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> alwaysSerializeErrorsAsList;\n\n<span class=\"pl-k\">@Inject</span>\n<span class=\"pl-k\">public</span> ConstraintExceptionHandler(<span class=\"pl-smi\">JacksonConfiguration</span> jacksonConfiguration) {\n       <span class=\"pl-c1\">this</span>. alwaysSerializeErrorsAsList <span class=\"pl-k\">=</span> jacksonConfiguration<span class=\"pl-k\">.</span>isAlwaysSerializeErrorsAsList();\n}\n\n<span class=\"pl-k\">public</span> ConstraintExceptionHandler() {\n      <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>alwaysSerializeErrorsAsList <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n}</pre></div>", "author": "graemerocher", "createdAt": "2020-12-03T07:49:11Z", "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +48,19 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    @Inject\n+    private JacksonConfiguration jacksonConfiguration;", "originalCommit": "1ef08864371091e4b65c2b4ffbaf357e61e1932a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MTY1NQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r534841655", "body": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\r\n\r\n```java\r\nprivate final boolean alwaysSerializeErrorsAsList;\r\n\r\n@Inject\r\npublic OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\r\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\r\n}\r\n\r\npublic OptionalValuesSerializer() {\r\n      this.alwaysSerializeErrorsAsList = true\r\n}\r\n```", "bodyText": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\nprivate final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic OptionalValuesSerializer() {\n      this.alwaysSerializeErrorsAsList = true\n}", "bodyHTML": "<p dir=\"auto\">private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic OptionalValuesSerializer() {\n      this.alwaysSerializeErrorsAsList = true\n}\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> alwaysSerializeErrorsAsList;\n\n<span class=\"pl-k\">@Inject</span>\n<span class=\"pl-k\">public</span> OptionalValuesSerializer(<span class=\"pl-smi\">JacksonConfiguration</span> jacksonConfiguration) {\n       <span class=\"pl-c1\">this</span>. alwaysSerializeErrorsAsList <span class=\"pl-k\">=</span> jacksonConfiguration<span class=\"pl-k\">.</span>isAlwaysSerializeErrorsAsList();\n}\n\n<span class=\"pl-k\">public</span> OptionalValuesSerializer() {\n      <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>alwaysSerializeErrorsAsList <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n}</pre></div>", "author": "graemerocher", "createdAt": "2020-12-03T07:49:37Z", "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -35,13 +38,18 @@\n @Singleton\n public class OptionalValuesSerializer extends JsonSerializer<OptionalValues<?>> {\n \n+    @Inject\n+    private JacksonConfiguration jacksonConfiguration;", "originalCommit": "1ef08864371091e4b65c2b4ffbaf357e61e1932a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2fa45263233f695c1b067955fef160b99e561e96", "url": "https://github.com/micronaut-projects/micronaut-core/commit/2fa45263233f695c1b067955fef160b99e561e96", "message": "adds no args constructor", "committedDate": "2020-12-03T16:07:09Z", "type": "commit"}]}