{"pr_number": 2365, "pr_title": "Use specific name prefix in preemptive timeout threads", "pr_author": "zabetak", "pr_createdAt": "2020-07-29T16:45:49Z", "pr_url": "https://github.com/junit-team/junit5/pull/2365", "merge_commit": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462489943", "body": "There's no need to do this, `Thread` already does this if no group is specified explicitly.", "bodyText": "There's no need to do this, Thread already does this if no group is specified explicitly.", "bodyHTML": "<p dir=\"auto\">There's no need to do this, <code>Thread</code> already does this if no group is specified explicitly.</p>", "author": "marcphilipp", "createdAt": "2020-07-29T18:07:56Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();", "originalCommit": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5NDM3Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462594377", "bodyText": "I think it makes sense if the factory is about to create many threads but given that at the moment we have a factory per thread it can be removed.", "author": "zabetak", "createdAt": "2020-07-29T21:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4bc15ee47c7190e7efc76f168f1503a35f668002", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..8660bc95a1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,26 +185,13 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n", "next_change": {"commit": "7e877d64b34b848ea7a4efe41079fd092c93e779", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 8660bc95a1..72f9fb8505 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,13 +185,26 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n+\t\t\treturn t;\n \t\t}\n \t}\n \n", "next_change": {"commit": "d271cb30dcc09327bf35555bd9f7cd468dbf9636", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..91f7c5cc50 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -191,20 +191,9 @@ class AssertTimeout {\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n", "next_change": {"commit": "e4b01d959f705f711b27f3a6954078b37775cd0a", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 91f7c5cc50..e51d23655b 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,16 +185,14 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n-\t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t}\n+    public Thread newThread(Runnable r) {\n+      return new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n+    }\n \t}\n \n }\n", "next_change": {"commit": "3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex e51d23655b..b8f6a029be 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -190,9 +190,9 @@ class AssertTimeout {\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n-    public Thread newThread(Runnable r) {\n-      return new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n-    }\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n+\t\t}\n \t}\n \n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..b8f6a029be 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,26 +185,13 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n \t\t}\n \t}\n \n", "next_change": {"commit": "687db889e3e2068411524eb402562faaf4ec30a9", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex b8f6a029be..c0c8f018a0 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -195,4 +217,57 @@ class AssertTimeout {\n \t\t}\n \t}\n \n+\tprivate abstract static class FutureResolverWithExceptionHandling<T> {\n+\t\tT resolveFutureAndHandleException(Future<T> future, long timeoutInMillis) {\n+\t\t\ttry {\n+\t\t\t\treturn future.get(timeoutInMillis, TimeUnit.MILLISECONDS);\n+\t\t\t}\n+\t\t\tcatch (TimeoutException ex) {\n+\t\t\t\thandleTimeoutAndThrow(ex, timeoutInMillis);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcatch (ExecutionException ex) {\n+\t\t\t\tthrow throwAsUncheckedException(ex.getCause());\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected abstract void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis);\n+\t}\n+\n+\tprivate static class AssertiveFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\n+\t\tprivate final AtomicReference<Thread> threadReference;\n+\t\tprivate final Object messageOrSupplier;\n+\n+\t\tprivate AssertiveFutureResolver(AtomicReference<Thread> threadReference, Object messageOrSupplier) {\n+\t\t\tthis.threadReference = threadReference;\n+\t\t\tthis.messageOrSupplier = messageOrSupplier;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\t\tAssertionFailureBuilder failure = assertionFailure() //\n+\t\t\t\t\t.message(messageOrSupplier) //\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n+\n+\t\t\tThread thread = threadReference.get();\n+\t\t\tif (thread != null) {\n+\t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n+\t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n+\t\t\t\texception.setStackTrace(thread.getStackTrace());\n+\t\t\t\tfailure.cause(exception);\n+\t\t\t}\n+\t\t\tthrow failure.build();\n+\t\t}\n+\t}\n+\n+\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\t\t@Override\n+\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "d19cc1b8e6d284d20ca86e03bb504ac92e9f2919", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex c0c8f018a0..2ba3338a50 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -264,7 +258,7 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling {\n \t\t@Override\n \t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n \t\t\tthrow throwAsUncheckedException(ex);\n", "next_change": {"commit": "1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 2ba3338a50..3162d9d0ce 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -258,9 +259,9 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling {\n+\tprivate static class TimeoutPropagatingFutureResolver implements FutureResolverWithExceptionHandling {\n \t\t@Override\n-\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n \t\t\tthrow throwAsUncheckedException(ex);\n \t\t}\n \t}\n", "next_change": {"commit": "254bb5e20c4f4fed129dd1fd972d5a6c5a180353", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 3162d9d0ce..5e39f2cb98 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -228,41 +227,34 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate interface FutureResolverWithExceptionHandling {\n-\t\tvoid handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis);\n+\tprivate interface TimeoutFailureFactory<T extends Throwable> {\n+\t\tT handleTimeout(TimeoutException ex, long timeoutInMillis);\n \t}\n \n-\tprivate static class AssertiveFutureResolver implements FutureResolverWithExceptionHandling {\n+\tprivate static class AssertiveFutureResolver implements TimeoutFailureFactory<AssertionFailedError> {\n \n-\t\tprivate final AtomicReference<Thread> threadReference;\n+\t\tprivate final Supplier<Thread> threadSupplier;\n \t\tprivate final Object messageOrSupplier;\n \n-\t\tprivate AssertiveFutureResolver(AtomicReference<Thread> threadReference, Object messageOrSupplier) {\n-\t\t\tthis.threadReference = threadReference;\n+\t\tprivate AssertiveFutureResolver(Supplier<Thread> threadSupplier, Object messageOrSupplier) {\n+\t\t\tthis.threadSupplier = threadSupplier;\n \t\t\tthis.messageOrSupplier = messageOrSupplier;\n \t\t}\n \n \t\t@Override\n-\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException ex, long timeoutInMillis) {\n \t\t\tAssertionFailureBuilder failure = assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n \n-\t\t\tThread thread = threadReference.get();\n+\t\t\tThread thread = threadSupplier.get();\n \t\t\tif (thread != null) {\n \t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n \t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n \t\t\t\texception.setStackTrace(thread.getStackTrace());\n \t\t\t\tfailure.cause(exception);\n \t\t\t}\n-\t\t\tthrow failure.build();\n-\t\t}\n-\t}\n-\n-\tprivate static class TimeoutPropagatingFutureResolver implements FutureResolverWithExceptionHandling {\n-\t\t@Override\n-\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n-\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t\treturn failure.build();\n \t\t}\n \t}\n }\n", "next_change": {"commit": "ba962a4fca521766acf18442b3bcfc98f42ffe10", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 5e39f2cb98..4dd754524e 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -228,33 +215,19 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException ex, long timeoutInMillis);\n+\t\tT handleTimeout(TimeoutException exception, long timeoutInMillis, Object messageOrSupplier, Throwable cause);\n \t}\n \n-\tprivate static class AssertiveFutureResolver implements TimeoutFailureFactory<AssertionFailedError> {\n-\n-\t\tprivate final Supplier<Thread> threadSupplier;\n-\t\tprivate final Object messageOrSupplier;\n-\n-\t\tprivate AssertiveFutureResolver(Supplier<Thread> threadSupplier, Object messageOrSupplier) {\n-\t\t\tthis.threadSupplier = threadSupplier;\n-\t\t\tthis.messageOrSupplier = messageOrSupplier;\n-\t\t}\n+\tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException ex, long timeoutInMillis) {\n-\t\t\tAssertionFailureBuilder failure = assertionFailure() //\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, long timeoutInMillis,\n+\t\t\t\tObject messageOrSupplier, Throwable cause) {\n+\t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n-\n-\t\t\tThread thread = threadSupplier.get();\n-\t\t\tif (thread != null) {\n-\t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n-\t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n-\t\t\t\texception.setStackTrace(thread.getStackTrace());\n-\t\t\t\tfailure.cause(exception);\n-\t\t\t}\n-\t\t\treturn failure.build();\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\") //\n+\t\t\t\t\t.cause(cause) //\n+\t\t\t\t\t.build();\n \t\t}\n \t}\n }\n", "next_change": {"commit": "ab93ecefe90c8f8753ab9093c5a116c31755adeb", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 4dd754524e..7c1314ac71 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -215,17 +214,17 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, long timeoutInMillis, Object messageOrSupplier, Throwable cause);\n+\t\tT handleTimeout(TimeoutException exception, Duration timeout, Object messageOrSupplier, Throwable cause);\n \t}\n \n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, long timeoutInMillis,\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n \t\t\t\tObject messageOrSupplier, Throwable cause) {\n \t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\") //\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n \t\t\t\t\t.cause(cause) //\n \t\t\t\t\t.build();\n \t\t}\n", "next_change": {"commit": "f7696e4bfacc89d971aa80e5b8a55ef899ace029", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 7c1314ac71..d24a6ef552 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,16 +215,17 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, Duration timeout, Object messageOrSupplier, Throwable cause);\n+\t\tT handleTimeout(TimeoutException exception, Duration timeout, Supplier<String> messageSupplier,\n+\t\t\t\tThrowable cause);\n \t}\n \n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n \t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n-\t\t\t\tObject messageOrSupplier, Throwable cause) {\n+\t\t\t\tSupplier<String> messageSupplier, Throwable cause) {\n \t\t\treturn assertionFailure() //\n-\t\t\t\t\t.message(messageOrSupplier) //\n+\t\t\t\t\t.message(messageSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n \t\t\t\t\t.cause(cause) //\n \t\t\t\t\t.build();\n", "next_change": {"commit": "7f422a561ebdce7f94c03fffe345e20d11466553", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex d24a6ef552..ff12f010f1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,16 +215,11 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, Duration timeout, Supplier<String> messageSupplier,\n-\t\t\t\tThrowable cause);\n-\t}\n-\n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n-\t\t\t\tSupplier<String> messageSupplier, Throwable cause) {\n+\t\tpublic AssertionFailedError createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier,\n+\t\t\t\tThrowable cause) {\n \t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n", "next_change": {"commit": "c05cb99dd64f5fc882b4abd3f8090197156c3d30", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex ff12f010f1..f02648bf65 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,17 +208,4 @@ class AssertTimeout {\n \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n \t\t}\n \t}\n-\n-\tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n-\n-\t\t@Override\n-\t\tpublic AssertionFailedError createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier,\n-\t\t\t\tThrowable cause) {\n-\t\t\treturn assertionFailure() //\n-\t\t\t\t\t.message(messageSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n-\t\t\t\t\t.cause(cause) //\n-\t\t\t\t\t.build();\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "11f8f765da25ce848be14c0d7313ae33db8b72f8", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex f02648bf65..93c7c11f8a 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -95,117 +83,4 @@ class AssertTimeout {\n \t\treturn result;\n \t}\n \n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable) {\n-\t\tassertTimeoutPreemptively(timeout, executable, (String) null);\n-\t}\n-\n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable, String message) {\n-\t\tassertTimeoutPreemptively(timeout, () -> {\n-\t\t\texecutable.execute();\n-\t\t\treturn null;\n-\t\t}, message);\n-\t}\n-\n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable, Supplier<String> messageSupplier) {\n-\t\tassertTimeoutPreemptively(timeout, () -> {\n-\t\t\texecutable.execute();\n-\t\t\treturn null;\n-\t\t}, messageSupplier);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, null, AssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier, String message) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, message == null ? null : () -> message,\n-\t\t\tAssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier,\n-\t\t\tSupplier<String> messageSupplier) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, messageSupplier, AssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T, E extends Throwable> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier,\n-\t\t\tSupplier<String> messageSupplier, TimeoutFailureFactory<E> failureFactory) throws E {\n-\t\tAtomicReference<Thread> threadReference = new AtomicReference<>();\n-\t\tExecutorService executorService = Executors.newSingleThreadExecutor(new TimeoutThreadFactory());\n-\n-\t\ttry {\n-\t\t\tFuture<T> future = submitTask(supplier, threadReference, executorService);\n-\t\t\treturn resolveFutureAndHandleException(future, timeout, messageSupplier, threadReference::get,\n-\t\t\t\tfailureFactory);\n-\t\t}\n-\t\tfinally {\n-\t\t\texecutorService.shutdownNow();\n-\t\t}\n-\t}\n-\n-\tprivate static <T> Future<T> submitTask(ThrowingSupplier<T> supplier, AtomicReference<Thread> threadReference,\n-\t\t\tExecutorService executorService) {\n-\t\treturn executorService.submit(() -> {\n-\t\t\ttry {\n-\t\t\t\tthreadReference.set(Thread.currentThread());\n-\t\t\t\treturn supplier.get();\n-\t\t\t}\n-\t\t\tcatch (Throwable throwable) {\n-\t\t\t\tthrow throwAsUncheckedException(throwable);\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tprivate static <T, E extends Throwable> T resolveFutureAndHandleException(Future<T> future, Duration timeout,\n-\t\t\tSupplier<String> messageSupplier, Supplier<Thread> threadSupplier, TimeoutFailureFactory<E> failureFactory)\n-\t\t\tthrows E {\n-\t\ttry {\n-\t\t\treturn future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n-\t\t}\n-\t\tcatch (TimeoutException ex) {\n-\t\t\tThread thread = threadSupplier.get();\n-\t\t\tExecutionTimeoutException cause = null;\n-\t\t\tif (thread != null) {\n-\t\t\t\tcause = new ExecutionTimeoutException(\"Execution timed out in thread \" + thread.getName());\n-\t\t\t\tcause.setStackTrace(thread.getStackTrace());\n-\t\t\t}\n-\t\t\tthrow failureFactory.createTimeoutFailure(timeout, messageSupplier, cause);\n-\t\t}\n-\t\tcatch (ExecutionException ex) {\n-\t\t\tthrow throwAsUncheckedException(ex.getCause());\n-\t\t}\n-\t\tcatch (Throwable ex) {\n-\t\t\tthrow throwAsUncheckedException(ex);\n-\t\t}\n-\t}\n-\n-\tprivate static AssertionFailedError createAssertionFailure(Duration timeout, Supplier<String> messageSupplier,\n-\t\t\tThrowable cause) {\n-\t\treturn assertionFailure() //\n-\t\t\t\t.message(messageSupplier) //\n-\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n-\t\t\t\t.cause(cause) //\n-\t\t\t\t.build();\n-\t}\n-\n-\tprivate static class ExecutionTimeoutException extends JUnitException {\n-\n-\t\tprivate static final long serialVersionUID = 1L;\n-\n-\t\tExecutionTimeoutException(String message) {\n-\t\t\tsuper(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * The thread factory used for preemptive timeout.\n-\t * <p>\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n-\t */\n-\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n-\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\n-\t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n-\t\t}\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "message": "Merge commit", "committedDate": null}, {"oid": "17d3b440f3b6c3ba4616fc927e7782e74582ea86", "committedDate": "2021-01-17 14:25:04 +0100", "message": "Update copyright"}, {"oid": "e69243ae0f3c68f07d075ac3901c98c375d040f0", "committedDate": "2022-01-06 10:00:09 +0100", "message": "Update copyright"}, {"oid": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2", "committedDate": "2022-07-17 18:27:51 +0200", "message": "Introduce AssertionFailureBuilder (#2972)"}, {"oid": "687db889e3e2068411524eb402562faaf4ec30a9", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Fix incorrect timeout failure when assertion fails in separate thread"}, {"oid": "d02f97590df04025235924824984cc782d1648d7", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Use constants for PreemptiveTimeoutAssertionExecutor instances"}, {"oid": "d19cc1b8e6d284d20ca86e03bb504ac92e9f2919", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Move generics to method"}, {"oid": "1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Simplify interface"}, {"oid": "36550401836858a1e6987b06d4c15f3ed95c19d0", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Use Supplier"}, {"oid": "254bb5e20c4f4fed129dd1fd972d5a6c5a180353", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Simplify to TimeoutFailureFactory"}, {"oid": "7f5a974fc8804ecf75f8b48a29b6c8fc227537e4", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Make TimeoutFailureFactory implementations stateless"}, {"oid": "f1809ddb4e1d6a33c31e11610b704070cf8abbf5", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Delete Throwing enum"}, {"oid": "b080a16875acfb0b54da716574331277066298cc", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Declare and handle TimeoutException directly"}, {"oid": "ba962a4fca521766acf18442b3bcfc98f42ffe10", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Pass cause to TimeoutFailureFactory"}, {"oid": "ab93ecefe90c8f8753ab9093c5a116c31755adeb", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Pass duration to TimeoutFailureFactory"}, {"oid": "f7696e4bfacc89d971aa80e5b8a55ef899ace029", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Pass supplier to TimeoutFailureFactory"}, {"oid": "ea17fa254363e69a12cc00bbc2cbaaea8c9714a9", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Allow specifying a TimeoutFailureFactory directly"}, {"oid": "7f422a561ebdce7f94c03fffe345e20d11466553", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Remove unused parameter from TimeoutFailureFactory"}, {"oid": "c05cb99dd64f5fc882b4abd3f8090197156c3d30", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Avoid extra instance creation"}, {"oid": "11f8f765da25ce848be14c0d7313ae33db8b72f8", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Extract AssertTimeoutPreemptively from AssertTimeout"}, {"oid": "3daa2c5c69c81ab1f807b39dc1077c885351538e", "committedDate": "2023-01-06 19:25:19 +0100", "message": "Update copyright"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462490135", "body": "I don't think we need these two `if`s as we shut down the executor afterwards.", "bodyText": "I don't think we need these two ifs as we shut down the executor afterwards.", "bodyHTML": "<p dir=\"auto\">I don't think we need these two <code>if</code>s as we shut down the executor afterwards.</p>", "author": "marcphilipp", "createdAt": "2020-07-29T18:08:22Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "originalCommit": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNTg2Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462615867", "bodyText": "I don't think it matters if we shutdown the executor or not. Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\nMoreover, in a setting where there many threads competing for CPU if these ones have low/high priority it might have an impact.", "author": "zabetak", "createdAt": "2020-07-29T22:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjQ4Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462796487", "bodyText": "Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\n\nDo you mean we should make it a daemon thread to avoid it from preventing the VM to shut down?", "author": "marcphilipp", "createdAt": "2020-07-30T07:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjY3Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r463716677", "bodyText": "Basically, I am saying that we should decide if we want daemon or non daemon threads. If we don't specify it then we rely on the status of the parent thread. In this case, I could prefer non-daemon threads.", "author": "zabetak", "createdAt": "2020-07-31T16:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4bc15ee47c7190e7efc76f168f1503a35f668002", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..8660bc95a1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,26 +185,13 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n", "next_change": {"commit": "7e877d64b34b848ea7a4efe41079fd092c93e779", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 8660bc95a1..72f9fb8505 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,13 +185,26 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n+\t\t\treturn t;\n \t\t}\n \t}\n \n", "next_change": {"commit": "d271cb30dcc09327bf35555bd9f7cd468dbf9636", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..91f7c5cc50 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -191,20 +191,9 @@ class AssertTimeout {\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n", "next_change": {"commit": "e4b01d959f705f711b27f3a6954078b37775cd0a", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 91f7c5cc50..e51d23655b 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,16 +185,14 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n-\t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t}\n+    public Thread newThread(Runnable r) {\n+      return new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n+    }\n \t}\n \n }\n", "next_change": {"commit": "3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex e51d23655b..b8f6a029be 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -190,9 +190,9 @@ class AssertTimeout {\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n-    public Thread newThread(Runnable r) {\n-      return new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n-    }\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n+\t\t}\n \t}\n \n }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..b8f6a029be 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,26 +185,13 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n \t\t}\n \t}\n \n", "next_change": {"commit": "687db889e3e2068411524eb402562faaf4ec30a9", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex b8f6a029be..c0c8f018a0 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -195,4 +217,57 @@ class AssertTimeout {\n \t\t}\n \t}\n \n+\tprivate abstract static class FutureResolverWithExceptionHandling<T> {\n+\t\tT resolveFutureAndHandleException(Future<T> future, long timeoutInMillis) {\n+\t\t\ttry {\n+\t\t\t\treturn future.get(timeoutInMillis, TimeUnit.MILLISECONDS);\n+\t\t\t}\n+\t\t\tcatch (TimeoutException ex) {\n+\t\t\t\thandleTimeoutAndThrow(ex, timeoutInMillis);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcatch (ExecutionException ex) {\n+\t\t\t\tthrow throwAsUncheckedException(ex.getCause());\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected abstract void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis);\n+\t}\n+\n+\tprivate static class AssertiveFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\n+\t\tprivate final AtomicReference<Thread> threadReference;\n+\t\tprivate final Object messageOrSupplier;\n+\n+\t\tprivate AssertiveFutureResolver(AtomicReference<Thread> threadReference, Object messageOrSupplier) {\n+\t\t\tthis.threadReference = threadReference;\n+\t\t\tthis.messageOrSupplier = messageOrSupplier;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\t\tAssertionFailureBuilder failure = assertionFailure() //\n+\t\t\t\t\t.message(messageOrSupplier) //\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n+\n+\t\t\tThread thread = threadReference.get();\n+\t\t\tif (thread != null) {\n+\t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n+\t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n+\t\t\t\texception.setStackTrace(thread.getStackTrace());\n+\t\t\t\tfailure.cause(exception);\n+\t\t\t}\n+\t\t\tthrow failure.build();\n+\t\t}\n+\t}\n+\n+\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\t\t@Override\n+\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "d19cc1b8e6d284d20ca86e03bb504ac92e9f2919", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex c0c8f018a0..2ba3338a50 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -264,7 +258,7 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling {\n \t\t@Override\n \t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n \t\t\tthrow throwAsUncheckedException(ex);\n", "next_change": {"commit": "1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 2ba3338a50..3162d9d0ce 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -258,9 +259,9 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling {\n+\tprivate static class TimeoutPropagatingFutureResolver implements FutureResolverWithExceptionHandling {\n \t\t@Override\n-\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n \t\t\tthrow throwAsUncheckedException(ex);\n \t\t}\n \t}\n", "next_change": {"commit": "254bb5e20c4f4fed129dd1fd972d5a6c5a180353", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 3162d9d0ce..5e39f2cb98 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -228,41 +227,34 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate interface FutureResolverWithExceptionHandling {\n-\t\tvoid handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis);\n+\tprivate interface TimeoutFailureFactory<T extends Throwable> {\n+\t\tT handleTimeout(TimeoutException ex, long timeoutInMillis);\n \t}\n \n-\tprivate static class AssertiveFutureResolver implements FutureResolverWithExceptionHandling {\n+\tprivate static class AssertiveFutureResolver implements TimeoutFailureFactory<AssertionFailedError> {\n \n-\t\tprivate final AtomicReference<Thread> threadReference;\n+\t\tprivate final Supplier<Thread> threadSupplier;\n \t\tprivate final Object messageOrSupplier;\n \n-\t\tprivate AssertiveFutureResolver(AtomicReference<Thread> threadReference, Object messageOrSupplier) {\n-\t\t\tthis.threadReference = threadReference;\n+\t\tprivate AssertiveFutureResolver(Supplier<Thread> threadSupplier, Object messageOrSupplier) {\n+\t\t\tthis.threadSupplier = threadSupplier;\n \t\t\tthis.messageOrSupplier = messageOrSupplier;\n \t\t}\n \n \t\t@Override\n-\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException ex, long timeoutInMillis) {\n \t\t\tAssertionFailureBuilder failure = assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n \n-\t\t\tThread thread = threadReference.get();\n+\t\t\tThread thread = threadSupplier.get();\n \t\t\tif (thread != null) {\n \t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n \t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n \t\t\t\texception.setStackTrace(thread.getStackTrace());\n \t\t\t\tfailure.cause(exception);\n \t\t\t}\n-\t\t\tthrow failure.build();\n-\t\t}\n-\t}\n-\n-\tprivate static class TimeoutPropagatingFutureResolver implements FutureResolverWithExceptionHandling {\n-\t\t@Override\n-\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n-\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t\treturn failure.build();\n \t\t}\n \t}\n }\n", "next_change": {"commit": "ba962a4fca521766acf18442b3bcfc98f42ffe10", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 5e39f2cb98..4dd754524e 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -228,33 +215,19 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException ex, long timeoutInMillis);\n+\t\tT handleTimeout(TimeoutException exception, long timeoutInMillis, Object messageOrSupplier, Throwable cause);\n \t}\n \n-\tprivate static class AssertiveFutureResolver implements TimeoutFailureFactory<AssertionFailedError> {\n-\n-\t\tprivate final Supplier<Thread> threadSupplier;\n-\t\tprivate final Object messageOrSupplier;\n-\n-\t\tprivate AssertiveFutureResolver(Supplier<Thread> threadSupplier, Object messageOrSupplier) {\n-\t\t\tthis.threadSupplier = threadSupplier;\n-\t\t\tthis.messageOrSupplier = messageOrSupplier;\n-\t\t}\n+\tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException ex, long timeoutInMillis) {\n-\t\t\tAssertionFailureBuilder failure = assertionFailure() //\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, long timeoutInMillis,\n+\t\t\t\tObject messageOrSupplier, Throwable cause) {\n+\t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n-\n-\t\t\tThread thread = threadSupplier.get();\n-\t\t\tif (thread != null) {\n-\t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n-\t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n-\t\t\t\texception.setStackTrace(thread.getStackTrace());\n-\t\t\t\tfailure.cause(exception);\n-\t\t\t}\n-\t\t\treturn failure.build();\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\") //\n+\t\t\t\t\t.cause(cause) //\n+\t\t\t\t\t.build();\n \t\t}\n \t}\n }\n", "next_change": {"commit": "ab93ecefe90c8f8753ab9093c5a116c31755adeb", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 4dd754524e..7c1314ac71 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -215,17 +214,17 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, long timeoutInMillis, Object messageOrSupplier, Throwable cause);\n+\t\tT handleTimeout(TimeoutException exception, Duration timeout, Object messageOrSupplier, Throwable cause);\n \t}\n \n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, long timeoutInMillis,\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n \t\t\t\tObject messageOrSupplier, Throwable cause) {\n \t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\") //\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n \t\t\t\t\t.cause(cause) //\n \t\t\t\t\t.build();\n \t\t}\n", "next_change": {"commit": "f7696e4bfacc89d971aa80e5b8a55ef899ace029", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 7c1314ac71..d24a6ef552 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,16 +215,17 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, Duration timeout, Object messageOrSupplier, Throwable cause);\n+\t\tT handleTimeout(TimeoutException exception, Duration timeout, Supplier<String> messageSupplier,\n+\t\t\t\tThrowable cause);\n \t}\n \n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n \t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n-\t\t\t\tObject messageOrSupplier, Throwable cause) {\n+\t\t\t\tSupplier<String> messageSupplier, Throwable cause) {\n \t\t\treturn assertionFailure() //\n-\t\t\t\t\t.message(messageOrSupplier) //\n+\t\t\t\t\t.message(messageSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n \t\t\t\t\t.cause(cause) //\n \t\t\t\t\t.build();\n", "next_change": {"commit": "7f422a561ebdce7f94c03fffe345e20d11466553", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex d24a6ef552..ff12f010f1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,16 +215,11 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, Duration timeout, Supplier<String> messageSupplier,\n-\t\t\t\tThrowable cause);\n-\t}\n-\n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n-\t\t\t\tSupplier<String> messageSupplier, Throwable cause) {\n+\t\tpublic AssertionFailedError createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier,\n+\t\t\t\tThrowable cause) {\n \t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n", "next_change": {"commit": "c05cb99dd64f5fc882b4abd3f8090197156c3d30", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex ff12f010f1..f02648bf65 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,17 +208,4 @@ class AssertTimeout {\n \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n \t\t}\n \t}\n-\n-\tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n-\n-\t\t@Override\n-\t\tpublic AssertionFailedError createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier,\n-\t\t\t\tThrowable cause) {\n-\t\t\treturn assertionFailure() //\n-\t\t\t\t\t.message(messageSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n-\t\t\t\t\t.cause(cause) //\n-\t\t\t\t\t.build();\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "11f8f765da25ce848be14c0d7313ae33db8b72f8", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex f02648bf65..93c7c11f8a 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -95,117 +83,4 @@ class AssertTimeout {\n \t\treturn result;\n \t}\n \n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable) {\n-\t\tassertTimeoutPreemptively(timeout, executable, (String) null);\n-\t}\n-\n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable, String message) {\n-\t\tassertTimeoutPreemptively(timeout, () -> {\n-\t\t\texecutable.execute();\n-\t\t\treturn null;\n-\t\t}, message);\n-\t}\n-\n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable, Supplier<String> messageSupplier) {\n-\t\tassertTimeoutPreemptively(timeout, () -> {\n-\t\t\texecutable.execute();\n-\t\t\treturn null;\n-\t\t}, messageSupplier);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, null, AssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier, String message) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, message == null ? null : () -> message,\n-\t\t\tAssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier,\n-\t\t\tSupplier<String> messageSupplier) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, messageSupplier, AssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T, E extends Throwable> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier,\n-\t\t\tSupplier<String> messageSupplier, TimeoutFailureFactory<E> failureFactory) throws E {\n-\t\tAtomicReference<Thread> threadReference = new AtomicReference<>();\n-\t\tExecutorService executorService = Executors.newSingleThreadExecutor(new TimeoutThreadFactory());\n-\n-\t\ttry {\n-\t\t\tFuture<T> future = submitTask(supplier, threadReference, executorService);\n-\t\t\treturn resolveFutureAndHandleException(future, timeout, messageSupplier, threadReference::get,\n-\t\t\t\tfailureFactory);\n-\t\t}\n-\t\tfinally {\n-\t\t\texecutorService.shutdownNow();\n-\t\t}\n-\t}\n-\n-\tprivate static <T> Future<T> submitTask(ThrowingSupplier<T> supplier, AtomicReference<Thread> threadReference,\n-\t\t\tExecutorService executorService) {\n-\t\treturn executorService.submit(() -> {\n-\t\t\ttry {\n-\t\t\t\tthreadReference.set(Thread.currentThread());\n-\t\t\t\treturn supplier.get();\n-\t\t\t}\n-\t\t\tcatch (Throwable throwable) {\n-\t\t\t\tthrow throwAsUncheckedException(throwable);\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tprivate static <T, E extends Throwable> T resolveFutureAndHandleException(Future<T> future, Duration timeout,\n-\t\t\tSupplier<String> messageSupplier, Supplier<Thread> threadSupplier, TimeoutFailureFactory<E> failureFactory)\n-\t\t\tthrows E {\n-\t\ttry {\n-\t\t\treturn future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n-\t\t}\n-\t\tcatch (TimeoutException ex) {\n-\t\t\tThread thread = threadSupplier.get();\n-\t\t\tExecutionTimeoutException cause = null;\n-\t\t\tif (thread != null) {\n-\t\t\t\tcause = new ExecutionTimeoutException(\"Execution timed out in thread \" + thread.getName());\n-\t\t\t\tcause.setStackTrace(thread.getStackTrace());\n-\t\t\t}\n-\t\t\tthrow failureFactory.createTimeoutFailure(timeout, messageSupplier, cause);\n-\t\t}\n-\t\tcatch (ExecutionException ex) {\n-\t\t\tthrow throwAsUncheckedException(ex.getCause());\n-\t\t}\n-\t\tcatch (Throwable ex) {\n-\t\t\tthrow throwAsUncheckedException(ex);\n-\t\t}\n-\t}\n-\n-\tprivate static AssertionFailedError createAssertionFailure(Duration timeout, Supplier<String> messageSupplier,\n-\t\t\tThrowable cause) {\n-\t\treturn assertionFailure() //\n-\t\t\t\t.message(messageSupplier) //\n-\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n-\t\t\t\t.cause(cause) //\n-\t\t\t\t.build();\n-\t}\n-\n-\tprivate static class ExecutionTimeoutException extends JUnitException {\n-\n-\t\tprivate static final long serialVersionUID = 1L;\n-\n-\t\tExecutionTimeoutException(String message) {\n-\t\t\tsuper(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * The thread factory used for preemptive timeout.\n-\t * <p>\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n-\t */\n-\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n-\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\n-\t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n-\t\t}\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "message": "Merge commit", "committedDate": null}, {"oid": "17d3b440f3b6c3ba4616fc927e7782e74582ea86", "committedDate": "2021-01-17 14:25:04 +0100", "message": "Update copyright"}, {"oid": "e69243ae0f3c68f07d075ac3901c98c375d040f0", "committedDate": "2022-01-06 10:00:09 +0100", "message": "Update copyright"}, {"oid": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2", "committedDate": "2022-07-17 18:27:51 +0200", "message": "Introduce AssertionFailureBuilder (#2972)"}, {"oid": "687db889e3e2068411524eb402562faaf4ec30a9", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Fix incorrect timeout failure when assertion fails in separate thread"}, {"oid": "d02f97590df04025235924824984cc782d1648d7", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Use constants for PreemptiveTimeoutAssertionExecutor instances"}, {"oid": "d19cc1b8e6d284d20ca86e03bb504ac92e9f2919", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Move generics to method"}, {"oid": "1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Simplify interface"}, {"oid": "36550401836858a1e6987b06d4c15f3ed95c19d0", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Use Supplier"}, {"oid": "254bb5e20c4f4fed129dd1fd972d5a6c5a180353", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Simplify to TimeoutFailureFactory"}, {"oid": "7f5a974fc8804ecf75f8b48a29b6c8fc227537e4", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Make TimeoutFailureFactory implementations stateless"}, {"oid": "f1809ddb4e1d6a33c31e11610b704070cf8abbf5", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Delete Throwing enum"}, {"oid": "b080a16875acfb0b54da716574331277066298cc", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Declare and handle TimeoutException directly"}, {"oid": "ba962a4fca521766acf18442b3bcfc98f42ffe10", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Pass cause to TimeoutFailureFactory"}, {"oid": "ab93ecefe90c8f8753ab9093c5a116c31755adeb", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Pass duration to TimeoutFailureFactory"}, {"oid": "f7696e4bfacc89d971aa80e5b8a55ef899ace029", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Pass supplier to TimeoutFailureFactory"}, {"oid": "ea17fa254363e69a12cc00bbc2cbaaea8c9714a9", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Allow specifying a TimeoutFailureFactory directly"}, {"oid": "7f422a561ebdce7f94c03fffe345e20d11466553", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Remove unused parameter from TimeoutFailureFactory"}, {"oid": "c05cb99dd64f5fc882b4abd3f8090197156c3d30", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Avoid extra instance creation"}, {"oid": "11f8f765da25ce848be14c0d7313ae33db8b72f8", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Extract AssertTimeoutPreemptively from AssertTimeout"}, {"oid": "3daa2c5c69c81ab1f807b39dc1077c885351538e", "committedDate": "2023-01-06 19:25:19 +0100", "message": "Update copyright"}]}, {"oid": "4bc15ee47c7190e7efc76f168f1503a35f668002", "url": "https://github.com/junit-team/junit5/commit/4bc15ee47c7190e7efc76f168f1503a35f668002", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-07-29T21:55:24Z", "type": "forcePushed"}, {"oid": "87920a39547d9a662d6e941883f139c46206f8ec", "url": "https://github.com/junit-team/junit5/commit/87920a39547d9a662d6e941883f139c46206f8ec", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-07-29T22:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NDcwOA==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462794708", "body": "```suggestion\r\n\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n          \n          \n            \n            \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thread</span>(<span class=\"pl-c1 x x-first\">null</span><span class=\"x x-last\">, </span>r, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>junit-timeout-thread-<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> threadNumber<span class=\"pl-k\">.</span>getAndIncrement()<span class=\"x x-first\">, </span><span class=\"pl-c1 x x-last\">0</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thread</span>(r, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>junit-timeout-thread-<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> threadNumber<span class=\"pl-k\">.</span>getAndIncrement());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcphilipp", "createdAt": "2020-07-30T07:13:35Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,17 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);", "originalCommit": "87920a39547d9a662d6e941883f139c46206f8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e877d64b34b848ea7a4efe41079fd092c93e779", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 8660bc95a1..72f9fb8505 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,13 +185,26 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n+\t\t\treturn t;\n \t\t}\n \t}\n \n", "next_change": {"commit": "d271cb30dcc09327bf35555bd9f7cd468dbf9636", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 72f9fb8505..91f7c5cc50 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -191,20 +191,9 @@ class AssertTimeout {\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\t\tprivate final ThreadGroup group;\n-\n-\t\tTimeoutThreadFactory() {\n-\t\t\tSecurityManager s = System.getSecurityManager();\n-\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n-\t\t}\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t\tif (t.isDaemon())\n-\t\t\t\tt.setDaemon(false);\n-\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n-\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);\n-\t\t\treturn t;\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n \t\t}\n \t}\n \n", "next_change": {"commit": "e4b01d959f705f711b27f3a6954078b37775cd0a", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 91f7c5cc50..e51d23655b 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -185,16 +185,14 @@ class AssertTimeout {\n \t/**\n \t * The thread factory used for preemptive timeout.\n \t *\n-\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n-\t * helpful for debugging purposes.\n-\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n \t */\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n-\t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n-\t\t}\n+    public Thread newThread(Runnable r) {\n+      return new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n+    }\n \t}\n \n }\n", "next_change": {"commit": "3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex e51d23655b..b8f6a029be 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -190,9 +190,9 @@ class AssertTimeout {\n \tprivate static class TimeoutThreadFactory implements ThreadFactory {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n-    public Thread newThread(Runnable r) {\n-      return new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n-    }\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n+\t\t}\n \t}\n \n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 8660bc95a1..b8f6a029be 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -191,7 +191,7 @@ class AssertTimeout {\n \t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n \n \t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n \t\t}\n \t}\n \n", "next_change": {"commit": "687db889e3e2068411524eb402562faaf4ec30a9", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex b8f6a029be..c0c8f018a0 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -195,4 +217,57 @@ class AssertTimeout {\n \t\t}\n \t}\n \n+\tprivate abstract static class FutureResolverWithExceptionHandling<T> {\n+\t\tT resolveFutureAndHandleException(Future<T> future, long timeoutInMillis) {\n+\t\t\ttry {\n+\t\t\t\treturn future.get(timeoutInMillis, TimeUnit.MILLISECONDS);\n+\t\t\t}\n+\t\t\tcatch (TimeoutException ex) {\n+\t\t\t\thandleTimeoutAndThrow(ex, timeoutInMillis);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcatch (ExecutionException ex) {\n+\t\t\t\tthrow throwAsUncheckedException(ex.getCause());\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected abstract void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis);\n+\t}\n+\n+\tprivate static class AssertiveFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\n+\t\tprivate final AtomicReference<Thread> threadReference;\n+\t\tprivate final Object messageOrSupplier;\n+\n+\t\tprivate AssertiveFutureResolver(AtomicReference<Thread> threadReference, Object messageOrSupplier) {\n+\t\t\tthis.threadReference = threadReference;\n+\t\t\tthis.messageOrSupplier = messageOrSupplier;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\t\tAssertionFailureBuilder failure = assertionFailure() //\n+\t\t\t\t\t.message(messageOrSupplier) //\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n+\n+\t\t\tThread thread = threadReference.get();\n+\t\t\tif (thread != null) {\n+\t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n+\t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n+\t\t\t\texception.setStackTrace(thread.getStackTrace());\n+\t\t\t\tfailure.cause(exception);\n+\t\t\t}\n+\t\t\tthrow failure.build();\n+\t\t}\n+\t}\n+\n+\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\t\t@Override\n+\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t}\n+\t}\n }\n", "next_change": {"commit": "d19cc1b8e6d284d20ca86e03bb504ac92e9f2919", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex c0c8f018a0..2ba3338a50 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -264,7 +258,7 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling<T> {\n+\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling {\n \t\t@Override\n \t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n \t\t\tthrow throwAsUncheckedException(ex);\n", "next_change": {"commit": "1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 2ba3338a50..3162d9d0ce 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -258,9 +259,9 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate static class TimeoutPropagatingFutureResolver<T> extends FutureResolverWithExceptionHandling {\n+\tprivate static class TimeoutPropagatingFutureResolver implements FutureResolverWithExceptionHandling {\n \t\t@Override\n-\t\tprotected void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n \t\t\tthrow throwAsUncheckedException(ex);\n \t\t}\n \t}\n", "next_change": {"commit": "254bb5e20c4f4fed129dd1fd972d5a6c5a180353", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 3162d9d0ce..5e39f2cb98 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -228,41 +227,34 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate interface FutureResolverWithExceptionHandling {\n-\t\tvoid handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis);\n+\tprivate interface TimeoutFailureFactory<T extends Throwable> {\n+\t\tT handleTimeout(TimeoutException ex, long timeoutInMillis);\n \t}\n \n-\tprivate static class AssertiveFutureResolver implements FutureResolverWithExceptionHandling {\n+\tprivate static class AssertiveFutureResolver implements TimeoutFailureFactory<AssertionFailedError> {\n \n-\t\tprivate final AtomicReference<Thread> threadReference;\n+\t\tprivate final Supplier<Thread> threadSupplier;\n \t\tprivate final Object messageOrSupplier;\n \n-\t\tprivate AssertiveFutureResolver(AtomicReference<Thread> threadReference, Object messageOrSupplier) {\n-\t\t\tthis.threadReference = threadReference;\n+\t\tprivate AssertiveFutureResolver(Supplier<Thread> threadSupplier, Object messageOrSupplier) {\n+\t\t\tthis.threadSupplier = threadSupplier;\n \t\t\tthis.messageOrSupplier = messageOrSupplier;\n \t\t}\n \n \t\t@Override\n-\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException ex, long timeoutInMillis) {\n \t\t\tAssertionFailureBuilder failure = assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n \n-\t\t\tThread thread = threadReference.get();\n+\t\t\tThread thread = threadSupplier.get();\n \t\t\tif (thread != null) {\n \t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n \t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n \t\t\t\texception.setStackTrace(thread.getStackTrace());\n \t\t\t\tfailure.cause(exception);\n \t\t\t}\n-\t\t\tthrow failure.build();\n-\t\t}\n-\t}\n-\n-\tprivate static class TimeoutPropagatingFutureResolver implements FutureResolverWithExceptionHandling {\n-\t\t@Override\n-\t\tpublic void handleTimeoutAndThrow(TimeoutException ex, long timeoutInMillis) {\n-\t\t\tthrow throwAsUncheckedException(ex);\n+\t\t\treturn failure.build();\n \t\t}\n \t}\n }\n", "next_change": {"commit": "ba962a4fca521766acf18442b3bcfc98f42ffe10", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 5e39f2cb98..4dd754524e 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -228,33 +215,19 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException ex, long timeoutInMillis);\n+\t\tT handleTimeout(TimeoutException exception, long timeoutInMillis, Object messageOrSupplier, Throwable cause);\n \t}\n \n-\tprivate static class AssertiveFutureResolver implements TimeoutFailureFactory<AssertionFailedError> {\n-\n-\t\tprivate final Supplier<Thread> threadSupplier;\n-\t\tprivate final Object messageOrSupplier;\n-\n-\t\tprivate AssertiveFutureResolver(Supplier<Thread> threadSupplier, Object messageOrSupplier) {\n-\t\t\tthis.threadSupplier = threadSupplier;\n-\t\t\tthis.messageOrSupplier = messageOrSupplier;\n-\t\t}\n+\tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException ex, long timeoutInMillis) {\n-\t\t\tAssertionFailureBuilder failure = assertionFailure() //\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, long timeoutInMillis,\n+\t\t\t\tObject messageOrSupplier, Throwable cause) {\n+\t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\");\n-\n-\t\t\tThread thread = threadSupplier.get();\n-\t\t\tif (thread != null) {\n-\t\t\t\tExecutionTimeoutException exception = new ExecutionTimeoutException(\n-\t\t\t\t\t\"Execution timed out in thread \" + thread.getName());\n-\t\t\t\texception.setStackTrace(thread.getStackTrace());\n-\t\t\t\tfailure.cause(exception);\n-\t\t\t}\n-\t\t\treturn failure.build();\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\") //\n+\t\t\t\t\t.cause(cause) //\n+\t\t\t\t\t.build();\n \t\t}\n \t}\n }\n", "next_change": {"commit": "ab93ecefe90c8f8753ab9093c5a116c31755adeb", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 4dd754524e..7c1314ac71 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -215,17 +214,17 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, long timeoutInMillis, Object messageOrSupplier, Throwable cause);\n+\t\tT handleTimeout(TimeoutException exception, Duration timeout, Object messageOrSupplier, Throwable cause);\n \t}\n \n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, long timeoutInMillis,\n+\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n \t\t\t\tObject messageOrSupplier, Throwable cause) {\n \t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageOrSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeoutInMillis + \" ms\") //\n+\t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n \t\t\t\t\t.cause(cause) //\n \t\t\t\t\t.build();\n \t\t}\n", "next_change": {"commit": "f7696e4bfacc89d971aa80e5b8a55ef899ace029", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex 7c1314ac71..d24a6ef552 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,16 +215,17 @@ class AssertTimeout {\n \t}\n \n \tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, Duration timeout, Object messageOrSupplier, Throwable cause);\n+\t\tT handleTimeout(TimeoutException exception, Duration timeout, Supplier<String> messageSupplier,\n+\t\t\t\tThrowable cause);\n \t}\n \n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n \t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n-\t\t\t\tObject messageOrSupplier, Throwable cause) {\n+\t\t\t\tSupplier<String> messageSupplier, Throwable cause) {\n \t\t\treturn assertionFailure() //\n-\t\t\t\t\t.message(messageOrSupplier) //\n+\t\t\t\t\t.message(messageSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n \t\t\t\t\t.cause(cause) //\n \t\t\t\t\t.build();\n", "next_change": {"commit": "7f422a561ebdce7f94c03fffe345e20d11466553", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex d24a6ef552..ff12f010f1 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,16 +215,11 @@ class AssertTimeout {\n \t\t}\n \t}\n \n-\tprivate interface TimeoutFailureFactory<T extends Throwable> {\n-\t\tT handleTimeout(TimeoutException exception, Duration timeout, Supplier<String> messageSupplier,\n-\t\t\t\tThrowable cause);\n-\t}\n-\n \tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n \n \t\t@Override\n-\t\tpublic AssertionFailedError handleTimeout(TimeoutException exception, Duration timeout,\n-\t\t\t\tSupplier<String> messageSupplier, Throwable cause) {\n+\t\tpublic AssertionFailedError createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier,\n+\t\t\t\tThrowable cause) {\n \t\t\treturn assertionFailure() //\n \t\t\t\t\t.message(messageSupplier) //\n \t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n", "next_change": {"commit": "c05cb99dd64f5fc882b4abd3f8090197156c3d30", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex ff12f010f1..f02648bf65 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -214,17 +208,4 @@ class AssertTimeout {\n \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n \t\t}\n \t}\n-\n-\tprivate static class AssertionTimeoutFailureFactory implements TimeoutFailureFactory<AssertionFailedError> {\n-\n-\t\t@Override\n-\t\tpublic AssertionFailedError createTimeoutFailure(Duration timeout, Supplier<String> messageSupplier,\n-\t\t\t\tThrowable cause) {\n-\t\t\treturn assertionFailure() //\n-\t\t\t\t\t.message(messageSupplier) //\n-\t\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n-\t\t\t\t\t.cause(cause) //\n-\t\t\t\t\t.build();\n-\t\t}\n-\t}\n }\n", "next_change": {"commit": "11f8f765da25ce848be14c0d7313ae33db8b72f8", "changed_code": [{"header": "diff --git a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\nindex f02648bf65..93c7c11f8a 100644\n--- a/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n+++ b/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java\n", "chunk": "@@ -95,117 +83,4 @@ class AssertTimeout {\n \t\treturn result;\n \t}\n \n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable) {\n-\t\tassertTimeoutPreemptively(timeout, executable, (String) null);\n-\t}\n-\n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable, String message) {\n-\t\tassertTimeoutPreemptively(timeout, () -> {\n-\t\t\texecutable.execute();\n-\t\t\treturn null;\n-\t\t}, message);\n-\t}\n-\n-\tstatic void assertTimeoutPreemptively(Duration timeout, Executable executable, Supplier<String> messageSupplier) {\n-\t\tassertTimeoutPreemptively(timeout, () -> {\n-\t\t\texecutable.execute();\n-\t\t\treturn null;\n-\t\t}, messageSupplier);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, null, AssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier, String message) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, message == null ? null : () -> message,\n-\t\t\tAssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier,\n-\t\t\tSupplier<String> messageSupplier) {\n-\t\treturn assertTimeoutPreemptively(timeout, supplier, messageSupplier, AssertTimeout::createAssertionFailure);\n-\t}\n-\n-\tstatic <T, E extends Throwable> T assertTimeoutPreemptively(Duration timeout, ThrowingSupplier<T> supplier,\n-\t\t\tSupplier<String> messageSupplier, TimeoutFailureFactory<E> failureFactory) throws E {\n-\t\tAtomicReference<Thread> threadReference = new AtomicReference<>();\n-\t\tExecutorService executorService = Executors.newSingleThreadExecutor(new TimeoutThreadFactory());\n-\n-\t\ttry {\n-\t\t\tFuture<T> future = submitTask(supplier, threadReference, executorService);\n-\t\t\treturn resolveFutureAndHandleException(future, timeout, messageSupplier, threadReference::get,\n-\t\t\t\tfailureFactory);\n-\t\t}\n-\t\tfinally {\n-\t\t\texecutorService.shutdownNow();\n-\t\t}\n-\t}\n-\n-\tprivate static <T> Future<T> submitTask(ThrowingSupplier<T> supplier, AtomicReference<Thread> threadReference,\n-\t\t\tExecutorService executorService) {\n-\t\treturn executorService.submit(() -> {\n-\t\t\ttry {\n-\t\t\t\tthreadReference.set(Thread.currentThread());\n-\t\t\t\treturn supplier.get();\n-\t\t\t}\n-\t\t\tcatch (Throwable throwable) {\n-\t\t\t\tthrow throwAsUncheckedException(throwable);\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tprivate static <T, E extends Throwable> T resolveFutureAndHandleException(Future<T> future, Duration timeout,\n-\t\t\tSupplier<String> messageSupplier, Supplier<Thread> threadSupplier, TimeoutFailureFactory<E> failureFactory)\n-\t\t\tthrows E {\n-\t\ttry {\n-\t\t\treturn future.get(timeout.toMillis(), TimeUnit.MILLISECONDS);\n-\t\t}\n-\t\tcatch (TimeoutException ex) {\n-\t\t\tThread thread = threadSupplier.get();\n-\t\t\tExecutionTimeoutException cause = null;\n-\t\t\tif (thread != null) {\n-\t\t\t\tcause = new ExecutionTimeoutException(\"Execution timed out in thread \" + thread.getName());\n-\t\t\t\tcause.setStackTrace(thread.getStackTrace());\n-\t\t\t}\n-\t\t\tthrow failureFactory.createTimeoutFailure(timeout, messageSupplier, cause);\n-\t\t}\n-\t\tcatch (ExecutionException ex) {\n-\t\t\tthrow throwAsUncheckedException(ex.getCause());\n-\t\t}\n-\t\tcatch (Throwable ex) {\n-\t\t\tthrow throwAsUncheckedException(ex);\n-\t\t}\n-\t}\n-\n-\tprivate static AssertionFailedError createAssertionFailure(Duration timeout, Supplier<String> messageSupplier,\n-\t\t\tThrowable cause) {\n-\t\treturn assertionFailure() //\n-\t\t\t\t.message(messageSupplier) //\n-\t\t\t\t.reason(\"execution timed out after \" + timeout.toMillis() + \" ms\") //\n-\t\t\t\t.cause(cause) //\n-\t\t\t\t.build();\n-\t}\n-\n-\tprivate static class ExecutionTimeoutException extends JUnitException {\n-\n-\t\tprivate static final long serialVersionUID = 1L;\n-\n-\t\tExecutionTimeoutException(String message) {\n-\t\t\tsuper(message);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * The thread factory used for preemptive timeout.\n-\t * <p>\n-\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n-\t */\n-\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n-\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n-\n-\t\tpublic Thread newThread(Runnable r) {\n-\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\n-\t\t}\n-\t}\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6b1a5766c3e5b8f3594b1aec84676035fde5b14", "message": "Merge commit", "committedDate": null}, {"oid": "17d3b440f3b6c3ba4616fc927e7782e74582ea86", "committedDate": "2021-01-17 14:25:04 +0100", "message": "Update copyright"}, {"oid": "e69243ae0f3c68f07d075ac3901c98c375d040f0", "committedDate": "2022-01-06 10:00:09 +0100", "message": "Update copyright"}, {"oid": "e91e5dc26b86d0fc0a92f747f0b5dcdc9e5fbec2", "committedDate": "2022-07-17 18:27:51 +0200", "message": "Introduce AssertionFailureBuilder (#2972)"}, {"oid": "687db889e3e2068411524eb402562faaf4ec30a9", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Fix incorrect timeout failure when assertion fails in separate thread"}, {"oid": "d02f97590df04025235924824984cc782d1648d7", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Use constants for PreemptiveTimeoutAssertionExecutor instances"}, {"oid": "d19cc1b8e6d284d20ca86e03bb504ac92e9f2919", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Move generics to method"}, {"oid": "1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3", "committedDate": "2022-09-11 17:26:01 +0200", "message": "Simplify interface"}, {"oid": "36550401836858a1e6987b06d4c15f3ed95c19d0", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Use Supplier"}, {"oid": "254bb5e20c4f4fed129dd1fd972d5a6c5a180353", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Simplify to TimeoutFailureFactory"}, {"oid": "7f5a974fc8804ecf75f8b48a29b6c8fc227537e4", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Make TimeoutFailureFactory implementations stateless"}, {"oid": "f1809ddb4e1d6a33c31e11610b704070cf8abbf5", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Delete Throwing enum"}, {"oid": "b080a16875acfb0b54da716574331277066298cc", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Declare and handle TimeoutException directly"}, {"oid": "ba962a4fca521766acf18442b3bcfc98f42ffe10", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Pass cause to TimeoutFailureFactory"}, {"oid": "ab93ecefe90c8f8753ab9093c5a116c31755adeb", "committedDate": "2022-09-11 17:26:02 +0200", "message": "Pass duration to TimeoutFailureFactory"}, {"oid": "f7696e4bfacc89d971aa80e5b8a55ef899ace029", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Pass supplier to TimeoutFailureFactory"}, {"oid": "ea17fa254363e69a12cc00bbc2cbaaea8c9714a9", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Allow specifying a TimeoutFailureFactory directly"}, {"oid": "7f422a561ebdce7f94c03fffe345e20d11466553", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Remove unused parameter from TimeoutFailureFactory"}, {"oid": "c05cb99dd64f5fc882b4abd3f8090197156c3d30", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Avoid extra instance creation"}, {"oid": "11f8f765da25ce848be14c0d7313ae33db8b72f8", "committedDate": "2022-09-11 17:26:03 +0200", "message": "Extract AssertTimeoutPreemptively from AssertTimeout"}, {"oid": "3daa2c5c69c81ab1f807b39dc1077c885351538e", "committedDate": "2023-01-06 19:25:19 +0100", "message": "Update copyright"}]}, {"oid": "7e877d64b34b848ea7a4efe41079fd092c93e779", "url": "https://github.com/junit-team/junit5/commit/7e877d64b34b848ea7a4efe41079fd092c93e779", "message": "Use specific name prefix in preemptive timeout threads\n\nHaving a specific name prefix is useful when debugging stack traces to\nquickly identify which threads are created by the junit framework and\nfrom where exactly.", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "9e547690c655fb7588c05226e037e8ba915f5b2e", "url": "https://github.com/junit-team/junit5/commit/9e547690c655fb7588c05226e037e8ba915f5b2e", "message": "Remove ThreadGroup resolution from the constructor of the thread factory\n\nThe same resolution takes place inside the constructor of Thread class\nif group is null.", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "d271cb30dcc09327bf35555bd9f7cd468dbf9636", "url": "https://github.com/junit-team/junit5/commit/d271cb30dcc09327bf35555bd9f7cd468dbf9636", "message": "Let timeout thread inherit daemon status and priority from parent", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "1e72c284d4be3e6d4a56ee5835ee9c0588313785", "url": "https://github.com/junit-team/junit5/commit/1e72c284d4be3e6d4a56ee5835ee9c0588313785", "message": "Update TimeoutThreadFactory javadoc", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "f8d44a585ee9b82d1f4d208755d941385862656a", "url": "https://github.com/junit-team/junit5/commit/f8d44a585ee9b82d1f4d208755d941385862656a", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "e4b01d959f705f711b27f3a6954078b37775cd0a", "url": "https://github.com/junit-team/junit5/commit/e4b01d959f705f711b27f3a6954078b37775cd0a", "message": "Remove explicit group and stacksize from the Thread constructor", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "url": "https://github.com/junit-team/junit5/commit/3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "message": "Fix checkstyle violations", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "url": "https://github.com/junit-team/junit5/commit/37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "message": "Update release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-03T21:37:32Z", "type": "commit"}, {"oid": "37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "url": "https://github.com/junit-team/junit5/commit/37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "message": "Update release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-03T21:37:32Z", "type": "forcePushed"}]}