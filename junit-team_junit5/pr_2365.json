{"pr_number": 2365, "pr_title": "Use specific name prefix in preemptive timeout threads", "pr_author": "zabetak", "pr_createdAt": "2020-07-29T16:45:49Z", "pr_url": "https://github.com/junit-team/junit5/pull/2365", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462489943", "body": "There's no need to do this, `Thread` already does this if no group is specified explicitly.", "bodyText": "There's no need to do this, Thread already does this if no group is specified explicitly.", "bodyHTML": "<p dir=\"auto\">There's no need to do this, <code>Thread</code> already does this if no group is specified explicitly.</p>", "author": "marcphilipp", "createdAt": "2020-07-29T18:07:56Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();", "originalCommit": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5NDM3Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462594377", "bodyText": "I think it makes sense if the factory is about to create many threads but given that at the moment we have a factory per thread it can be removed.", "author": "zabetak", "createdAt": "2020-07-29T21:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462490135", "body": "I don't think we need these two `if`s as we shut down the executor afterwards.", "bodyText": "I don't think we need these two ifs as we shut down the executor afterwards.", "bodyHTML": "<p dir=\"auto\">I don't think we need these two <code>if</code>s as we shut down the executor afterwards.</p>", "author": "marcphilipp", "createdAt": "2020-07-29T18:08:22Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "originalCommit": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNTg2Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462615867", "bodyText": "I don't think it matters if we shutdown the executor or not. Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\nMoreover, in a setting where there many threads competing for CPU if these ones have low/high priority it might have an impact.", "author": "zabetak", "createdAt": "2020-07-29T22:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjQ4Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462796487", "bodyText": "Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\n\nDo you mean we should make it a daemon thread to avoid it from preventing the VM to shut down?", "author": "marcphilipp", "createdAt": "2020-07-30T07:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjY3Nw==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r463716677", "bodyText": "Basically, I am saying that we should decide if we want daemon or non daemon threads. If we don't specify it then we rely on the status of the parent thread. In this case, I could prefer non-daemon threads.", "author": "zabetak", "createdAt": "2020-07-31T16:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}], "type": "inlineReview"}, {"oid": "4bc15ee47c7190e7efc76f168f1503a35f668002", "url": "https://github.com/junit-team/junit5/commit/4bc15ee47c7190e7efc76f168f1503a35f668002", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-07-29T21:55:24Z", "type": "forcePushed"}, {"oid": "87920a39547d9a662d6e941883f139c46206f8ec", "url": "https://github.com/junit-team/junit5/commit/87920a39547d9a662d6e941883f139c46206f8ec", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-07-29T22:00:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NDcwOA==", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462794708", "body": "```suggestion\r\n\t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n          \n          \n            \n            \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thread</span>(<span class=\"pl-c1 x x-first\">null</span><span class=\"x x-last\">, </span>r, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>junit-timeout-thread-<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> threadNumber<span class=\"pl-k\">.</span>getAndIncrement()<span class=\"x x-first\">, </span><span class=\"pl-c1 x x-last\">0</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thread</span>(r, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>junit-timeout-thread-<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> threadNumber<span class=\"pl-k\">.</span>getAndIncrement());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcphilipp", "createdAt": "2020-07-30T07:13:35Z", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,17 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);", "originalCommit": "87920a39547d9a662d6e941883f139c46206f8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e877d64b34b848ea7a4efe41079fd092c93e779", "url": "https://github.com/junit-team/junit5/commit/7e877d64b34b848ea7a4efe41079fd092c93e779", "message": "Use specific name prefix in preemptive timeout threads\n\nHaving a specific name prefix is useful when debugging stack traces to\nquickly identify which threads are created by the junit framework and\nfrom where exactly.", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "9e547690c655fb7588c05226e037e8ba915f5b2e", "url": "https://github.com/junit-team/junit5/commit/9e547690c655fb7588c05226e037e8ba915f5b2e", "message": "Remove ThreadGroup resolution from the constructor of the thread factory\n\nThe same resolution takes place inside the constructor of Thread class\nif group is null.", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "d271cb30dcc09327bf35555bd9f7cd468dbf9636", "url": "https://github.com/junit-team/junit5/commit/d271cb30dcc09327bf35555bd9f7cd468dbf9636", "message": "Let timeout thread inherit daemon status and priority from parent", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "1e72c284d4be3e6d4a56ee5835ee9c0588313785", "url": "https://github.com/junit-team/junit5/commit/1e72c284d4be3e6d4a56ee5835ee9c0588313785", "message": "Update TimeoutThreadFactory javadoc", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "f8d44a585ee9b82d1f4d208755d941385862656a", "url": "https://github.com/junit-team/junit5/commit/f8d44a585ee9b82d1f4d208755d941385862656a", "message": "Increase timeout in test to avoid flakiness in slow machines", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "e4b01d959f705f711b27f3a6954078b37775cd0a", "url": "https://github.com/junit-team/junit5/commit/e4b01d959f705f711b27f3a6954078b37775cd0a", "message": "Remove explicit group and stacksize from the Thread constructor", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "url": "https://github.com/junit-team/junit5/commit/3a3f116bc160a0cc09da8fbb86c88bf1c0e85df9", "message": "Fix checkstyle violations", "committedDate": "2020-08-03T21:36:51Z", "type": "commit"}, {"oid": "37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "url": "https://github.com/junit-team/junit5/commit/37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "message": "Update release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-03T21:37:32Z", "type": "commit"}, {"oid": "37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "url": "https://github.com/junit-team/junit5/commit/37b6a25c23c7098fd7a46aabd6dfe3bd11d4e752", "message": "Update release-notes-5.7.0-M2.adoc", "committedDate": "2020-08-03T21:37:32Z", "type": "forcePushed"}]}