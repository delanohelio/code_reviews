{"pr_number": 2238, "pr_title": "Allow using DynamicTestExecutor with custom listener", "pr_author": "marcphilipp", "pr_createdAt": "2020-04-04T16:35:46Z", "pr_url": "https://github.com/junit-team/junit5/pull/2238", "timeline": [{"oid": "1b04262ce24889e329845b97b52e0338bd8b14e2", "url": "https://github.com/junit-team/junit5/commit/1b04262ce24889e329845b97b52e0338bd8b14e2", "message": "Allow using DynamicTestExecutor with custom listener\n\n- Add `Node.DynamicTestExecutor#execute(TestDescriptor,\n  EngineExecutionListener)` for engines that wish to pass a custom\n  `EngineExecutionListener` and cancel or wait for the execution of a\n  submitted test via the returned `Future`.\n- Add `EngineExecutionListener.NOOP` and change all declared methods to\n  have empty default implementations.\n\nResolves #2188.", "committedDate": "2020-04-04T16:34:22Z", "type": "commit"}, {"oid": "01c3b14db7c13aaf21ebbe61c416dec60a1081aa", "url": "https://github.com/junit-team/junit5/commit/01c3b14db7c13aaf21ebbe61c416dec60a1081aa", "message": "Document and check preconditions", "committedDate": "2020-04-04T16:40:56Z", "type": "commit"}, {"oid": "6abce4f10f549c7e6d2ba03d8d80efa866475936", "url": "https://github.com/junit-team/junit5/commit/6abce4f10f549c7e6d2ba03d8d80efa866475936", "message": "Fix flakiness", "committedDate": "2020-04-04T16:45:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTQ0Mg==", "url": "https://github.com/junit-team/junit5/pull/2238#discussion_r403659442", "body": "```suggestion\r\n\t\tassertTrue(interrupted.get(), \"dynamic node was interrupted\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertTrue(interrupted.get(), \"child was interrupted\");\n          \n          \n            \n            \t\tassertTrue(interrupted.get(), \"dynamic node was interrupted\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertTrue(interrupted<span class=\"pl-k\">.</span>get(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">child</span> was interrupted<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertTrue(interrupted<span class=\"pl-k\">.</span>get(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">dynamic node</span> was interrupted<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "marcphilipp", "createdAt": "2020-04-05T07:04:09Z", "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java", "diffHunk": "@@ -516,10 +529,78 @@ void executesDynamicTestDescriptorsUsingContainerAndTestType() throws Exception\n \t\t\tFAILED, SUCCESSFUL, SUCCESSFUL);\n \t}\n \n-\tprivate Answer<Object> registerAndExecute(TestDescriptor dynamicChild) {\n+\t@Test\n+\tvoid executesDynamicTestDescriptorsWithCustomListener() {\n+\n+\t\tUniqueId leafUniqueId = UniqueId.root(\"leaf\", \"child leaf\");\n+\t\tMyLeaf child = spy(new MyLeaf(leafUniqueId));\n+\t\tMyLeaf dynamicTestDescriptor = spy(new MyLeaf(leafUniqueId.append(\"dynamic\", \"child\")));\n+\t\troot.addChild(child);\n+\n+\t\tEngineExecutionListener anotherListener = mock(EngineExecutionListener.class);\n+\t\twhen(child.execute(any(), any())).thenAnswer(\n+\t\t\tuseDynamicTestExecutor(executor -> executor.execute(dynamicTestDescriptor, anotherListener)));\n+\n+\t\texecutor.execute();\n+\n+\t\tInOrder inOrder = inOrder(listener, anotherListener, root, child, dynamicTestDescriptor);\n+\t\tinOrder.verify(anotherListener).dynamicTestRegistered(dynamicTestDescriptor);\n+\t\tinOrder.verify(anotherListener).executionStarted(dynamicTestDescriptor);\n+\t\tinOrder.verify(dynamicTestDescriptor).execute(eq(rootContext), any());\n+\t\tinOrder.verify(dynamicTestDescriptor).nodeFinished(rootContext, dynamicTestDescriptor, successful());\n+\t\tinOrder.verify(anotherListener).executionFinished(dynamicTestDescriptor, successful());\n+\t}\n+\n+\t@Test\n+\tvoid canAbortExecutionOfDynamicChild() throws Exception {\n+\n+\t\tUniqueId leafUniqueId = UniqueId.root(\"leaf\", \"child leaf\");\n+\t\tMyLeaf child = spy(new MyLeaf(leafUniqueId));\n+\t\tMyLeaf dynamicTestDescriptor = spy(new MyLeaf(leafUniqueId.append(\"dynamic\", \"child\")));\n+\t\troot.addChild(child);\n+\n+\t\tvar startedLatch = new CountDownLatch(1);\n+\t\tvar interrupted = new CompletableFuture<Boolean>();\n+\n+\t\twhen(child.execute(any(), any())).thenAnswer(useDynamicTestExecutor(executor -> {\n+\t\t\tFuture<?> future = executor.execute(dynamicTestDescriptor, EngineExecutionListener.NOOP);\n+\t\t\tstartedLatch.await();\n+\t\t\tfuture.cancel(true);\n+\t\t\texecutor.awaitFinished();\n+\t\t}));\n+\t\twhen(dynamicTestDescriptor.execute(any(), any())).thenAnswer(invocation -> {\n+\t\t\tstartedLatch.countDown();\n+\t\t\ttry {\n+\t\t\t\tnew CountDownLatch(1).await(); // block until interrupted\n+\t\t\t\tinterrupted.complete(false);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcatch (InterruptedException e) {\n+\t\t\t\tinterrupted.complete(true);\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t});\n+\n+\t\tConfigurationParameters parameters = ConfigurationParametersFactoryForTests.create(Map.of(//\n+\t\t\tDefaultParallelExecutionConfigurationStrategy.CONFIG_STRATEGY_PROPERTY_NAME, \"fixed\", //\n+\t\t\tDefaultParallelExecutionConfigurationStrategy.CONFIG_FIXED_PARALLELISM_PROPERTY_NAME, \"2\"));\n+\n+\t\ttry (var executorService = new ForkJoinPoolHierarchicalTestExecutorService(parameters)) {\n+\t\t\tcreateExecutor(executorService).execute().get();\n+\t\t}\n+\n+\t\tverify(listener).executionFinished(child, successful());\n+\t\tassertTrue(interrupted.get(), \"child was interrupted\");", "originalCommit": "6abce4f10f549c7e6d2ba03d8d80efa866475936", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3aa7648de1cc38703db1e49dab5738ab17371c8", "url": "https://github.com/junit-team/junit5/commit/c3aa7648de1cc38703db1e49dab5738ab17371c8", "message": "Clarify assertion message", "committedDate": "2020-04-05T07:04:20Z", "type": "commit"}]}