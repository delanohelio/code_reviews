{"pr_number": 1985, "pr_title": "[ISSUE #1976]System topic should add permission checking globally", "pr_author": "coder-zzzz", "pr_createdAt": "2020-05-12T08:21:41Z", "pr_url": "https://github.com/apache/rocketmq/pull/1985", "merge_commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "timeline": [{"oid": "d48ff116a4a12e2fb87a8b37c7675065ed04a715", "url": "https://github.com/apache/rocketmq/commit/d48ff116a4a12e2fb87a8b37c7675065ed04a715", "message": "fix #1976\nSystem Topic like SCHEDULE_TOPIC_XXXX should not be create or delete by user", "committedDate": "2020-05-12T08:18:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0Nzc2Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r424547763", "body": "You can combine two code into one and use placeholder like `log.warn(\"xxxxxxx { } xxxx\", topic)`", "bodyText": "You can combine two code into one and use placeholder like log.warn(\"xxxxxxx { } xxxx\", topic)", "bodyHTML": "<p dir=\"auto\">You can combine two code into one and use placeholder like <code>log.warn(\"xxxxxxx { } xxxx\", topic)</code></p>", "author": "RongtongJin", "createdAt": "2020-05-13T15:53:25Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -285,7 +273,19 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n \n         this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-        return null;\n+        response.setCode(ResponseCode.SUCCESS);\n+        return response;\n+    }\n+\n+    private boolean isSystemTopic(RemotingCommand response, String topic) {\n+        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n+            String errorMsg = \"the topic[\" + topic + \"] is conflict with system reserved words.\";\n+            log.warn(errorMsg);", "originalCommit": "d48ff116a4a12e2fb87a8b37c7675065ed04a715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MzEyNw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r424843127", "bodyText": "errorMsg used in log and response's remark, so it is better to use a local var to store it", "author": "coder-zzzz", "createdAt": "2020-05-14T02:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0Nzc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NDM3Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r425084373", "bodyText": "errorMsg used in log and response's remark, so it is better to use a local var to store it\n\nYou are right", "author": "RongtongJin", "createdAt": "2020-05-14T12:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0Nzc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6d97a44ab..0c44654da 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -279,7 +279,7 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n \n     private boolean isSystemTopic(RemotingCommand response, String topic) {\n         if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"the topic[\" + topic + \"] is conflict with system reserved words.\";\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\n             log.warn(errorMsg);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(errorMsg);\n", "next_change": {"commit": "d964e87c2ad364292e9323f321703cd08a0946f4", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0c44654da..0297916eb 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -279,7 +279,7 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n \n     private boolean isSystemTopic(RemotingCommand response, String topic) {\n         if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system topic.\";\n             log.warn(errorMsg);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(errorMsg);\n", "next_change": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0297916eb..c282786ae 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,17 +274,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private boolean isSystemTopic(RemotingCommand response, String topic) {\n-        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system topic.\";\n-            log.warn(errorMsg);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(errorMsg);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6d97a44ab..dcdb70163 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,17 +277,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private boolean isSystemTopic(RemotingCommand response, String topic) {\n-        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"the topic[\" + topic + \"] is conflict with system reserved words.\";\n-            log.warn(errorMsg);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(errorMsg);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "b6ff649291453d3dc2d702fbba1548d991b610ac", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dcdb70163..2891bafe9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,6 +301,51 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n+\n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 2891bafe9..9d188ab52 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -301,51 +276,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n-                                                              RemotingCommand request) throws RemotingCommandException {\n-        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        final CreateTopicRequestHeader requestHeader =\n-                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n-        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n-\n-        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n-\n-        String topic = requestHeader.getTopic();\n-\n-        if (!TopicValidator.validateTopic(topic, response)) {\n-            return response;\n-        }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n-            return response;\n-        }\n-        boolean force = false;\n-        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n-            force = true;\n-        }\n-\n-        TopicConfig topicConfig = new TopicConfig(topic);\n-        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n-        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n-        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n-        topicConfig.setPerm(requestHeader.getPerm());\n-        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n-\n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n-\n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n-\n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n-        return response;\n-    }\n-\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 9d188ab52..d79ae4a96 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -267,15 +295,66 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+        String attributesModification = requestHeader.getAttributes();\n+        topicConfig.setAttributes(AttributeParser.parseToMap(attributesModification));\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        }  catch (Exception e) {\n+            log.error(\"Update / create topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        response.setCode(ResponseCode.SUCCESS);\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "cad0cfcecef88958b103059aea7b98395850226a", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d79ae4a96..a283228f9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -347,21 +443,21 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n             this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n             response.setCode(ResponseCode.SUCCESS);\n         } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(e.getMessage());\n         }\n         return response;\n     }\n \n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex a283228f9..f4ada3684 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -435,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex f4ada3684..0917858f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +437,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "53baee7803608894c80eab7122ab9eec5502a46f", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0917858f7..d7a087b1b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -437,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d7a087b1b..3aaf4b935 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +441,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 3aaf4b935..0a70b5546 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -441,29 +276,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0a70b5546..7f8b2a437 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -276,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "fcfe26e4443dd24b1055899266d1bd81060ee118", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 7f8b2a437..dba97200c 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +278,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dba97200c..fa316ba97 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -278,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex fa316ba97..ca99605f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +277,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ca99605f7..ed94e6771 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -294,7 +471,8 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor {\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ed94e6771..60cc9c7ea 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -475,10 +501,15 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n-        if (!TopicValidator.validateTopic(topic, response)) {\n+        TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(topic);\n+        if (!result.isValid()) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n+        if (TopicValidator.isSystemTopic(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return response;\n         }\n \n", "next_change": {"commit": "62a959691ced2165c496b5a543b5d0955dad7fd1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 60cc9c7ea..dfbd886f2 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -507,10 +511,12 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic)) {\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return response;\n+        if (brokerController.getBrokerConfig().isValidateSystemTopicWhenUpdateTopic()) {\n+            if (TopicValidator.isSystemTopic(topic)) {\n+                response.setCode(ResponseCode.SYSTEM_ERROR);\n+                response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+                return response;\n+            }\n         }\n \n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n", "next_change": {"commit": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dfbd886f2..ad86ab34a 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -522,6 +522,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n+        this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore()\n             .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n", "next_change": {"commit": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ad86ab34a..1723923d3 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -523,8 +525,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n-        this.brokerController.getMessageStore()\n-            .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n+        this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n             this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n         }\n", "next_change": {"commit": "b6e0bf318080eee8b38f690a56829108f457eb28", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 1723923d3..78f50c92b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -526,10 +527,6 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n-        if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n-            this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n-        }\n-\n         response.setCode(ResponseCode.SUCCESS);\n         response.setRemark(null);\n         return response;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "46459426801d582b5ef71c8a3e38267ccd6caad9", "committedDate": "2021-03-24 11:39:12 +0800", "message": "[ISSUE #2748] Fix deleteSubscriptionGroup not remove consumer offset"}, {"oid": "9a5ec9082f6611629fc6c7459e32ac606a893c4d", "committedDate": "2021-07-01 15:00:27 +0800", "message": "[ISSUE  #3109]Return a no-support value when not match any request code"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "d067bfc21410c11dc3c99bb2b67403aa4b344286", "committedDate": "2021-07-30 21:56:32 +0800", "message": "[ISSUE #3192] Make free disk value more accurate"}, {"oid": "147d23e3ed0a817f8ebb427168f35ba9fe946026", "committedDate": "2021-09-14 15:33:38 +0800", "message": "[ISSUE #3281 ][acl] fix fail to delete topic perm list and global white address(#3128) (#3280)"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "14b63ee5503671cdd394694f55509aba3ce8241a", "committedDate": "2022-01-13 19:15:42 +0800", "message": "[RIP-28] light message queue(LMQ)  (#3694)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "18010a4d30e43a76e633a01fe0476f44de763c83", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3679] Support topic attributes (#3698)"}, {"oid": "b3f9fbd3a72b2bdf54fed315b71f8361b300e107", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Convert the consumer offset too"}, {"oid": "a767cc142423b62fc50fc21fb50c1b741203af2e", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Fix test for consumer offset"}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "committedDate": "2022-02-19 09:52:31 +0800", "message": "[ISSUE #2986] Support for multiple ACL files in a fixed directory (#3761)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "87d9614d34f18d1e8c212c9914b5a2a5f8cae85f", "committedDate": "2022-03-04 16:38:04 +0800", "message": "Resolve all conflicts and pass all UTs"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "committedDate": "2022-04-19 10:24:04 +0800", "message": "[ISSUE #4175] Prevent update topic on slave (#4176)"}, {"oid": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "committedDate": "2022-04-22 13:52:34 +0800", "message": "sync message request mode from master (#4101)"}, {"oid": "53baee7803608894c80eab7122ab9eec5502a46f", "committedDate": "2022-05-24 22:42:58 +0800", "message": "Add option p to the updateGlobalWhiteAddr command to indicate the full path of the ACL configuration file to be modified.If the option is null, updateGlobalWhiteAddr command will update the default acl configuration file."}, {"oid": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "committedDate": "2022-06-01 11:05:48 +0800", "message": "[Summer of code] Add admin tools for controller mode (#4388)"}, {"oid": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "committedDate": "2022-06-04 22:35:24 +0800", "message": "[iSSUE-4396] Support get all producer on one broker (#4395)"}, {"oid": "aacaf91539a90b18de21a988a204b5e842497352", "committedDate": "2022-06-07 12:52:51 +0800", "message": "Merge pull request #4152 from sunxi92/feature_update_global_white_addr"}, {"oid": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "committedDate": "2022-06-07 16:51:14 +0800", "message": "[Summer of code] Let controller inform broker that role changed. (#4424)"}, {"oid": "fcfe26e4443dd24b1055899266d1bd81060ee118", "committedDate": "2022-06-14 17:18:14 +0800", "message": "[ISSUE #4037] Add DeleteExpiredCommitLogSubCommand (#4038)"}, {"oid": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "committedDate": "2022-06-16 17:16:53 +0800", "message": "Update hacontroller directory name to controller"}, {"oid": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "committedDate": "2022-06-27 10:52:59 +0800", "message": "Remove redundant implements"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "a55a6215946a86253d1faf59d0d36ac78e267015", "committedDate": "2022-07-08 15:35:41 +0800", "message": "Merge branch 'develop-merge-5.0.0' into 5.0.0-beta-dledger-controller"}, {"oid": "ab4f7ddbcc15ee6addb18645d087150b62da5fab", "committedDate": "2022-07-08 17:55:11 +0800", "message": "Pass the CI after merge develop"}, {"oid": "e976cdbfc12b0088d95139c7136fee203647cedf", "committedDate": "2022-08-01 10:15:20 +0800", "message": "[ISSUE #4739] Add TimerMessageStore runtime info in ClusterListSubCommand (#4740)"}, {"oid": "61b14c3f4eb9ec015be2bced3187042a1267b3d8", "committedDate": "2022-08-08 09:28:41 +0800", "message": "[ISSUE #4785] Enable misspell check GitHub Action (#4786)"}, {"oid": "f23fdbe016ab4b60c2dd9786016c5f4756b3db54", "committedDate": "2022-08-30 17:45:56 +0800", "message": "Replace findbugs by spotbugs (#4931)"}, {"oid": "f1e95cd266ad82d68158235ca7316722213e3baf", "committedDate": "2022-09-08 09:21:05 +0800", "message": "[ISSUE#5015] Fix typo of getAllCongestNum in TimerMessageStore"}, {"oid": "d407ec679ac8a4e2e4b63d4033c10d0caba5f7bb", "committedDate": "2022-09-14 13:52:28 +0800", "message": "[ISSUE #5061] Fix the slave broker cannot synchronize timer metrics (#5065)"}, {"oid": "c185c60b0fdfb3be2136a704c9014c1ec35ca0da", "committedDate": "2022-09-18 11:17:36 +0800", "message": "[ISSUE #5108] Bump checkstyle to 3.2.0 (#5109)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "d663bcf6aa9e171f079e9bd85d65b1d907f4383b", "committedDate": "2022-10-14 14:02:08 +0800", "message": "[ISSUE #5292] [RIP-48] Support reset offset in server-side to improve the success rate (#5293)"}, {"oid": "a7c1d49454ce405fc651f95d036571d91bd8c9e0", "committedDate": "2022-10-26 15:41:41 +0800", "message": "[ISSUE #5356] [RIP 48] Introduces the concept of ready and inflight messages (#5357)"}, {"oid": "0ae1bd2af69f475aba03ab7a27df0bd7cda15359", "committedDate": "2022-11-09 19:44:41 +0800", "message": "[ISSUE #5449] [RIP-46] implement remoting stats metrics (#5487)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "1cdcce1988e927e4f705f67c8c9683888c0606cf", "committedDate": "2022-11-22 20:54:31 +0800", "message": "[ISSUE #5560] Method parameters are passed in the wrong order (#5561)"}, {"oid": "62a959691ced2165c496b5a543b5d0955dad7fd1", "committedDate": "2022-11-30 17:10:25 +0800", "message": "[ISSUE #5595] Add validateSystemTopicWhenUpdateTopic (#5596)"}, {"oid": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "committedDate": "2022-12-07 17:21:42 +0800", "message": "[ISSUE #5654] support calculate inflight messages for pop (#5655)"}, {"oid": "7cab0a1aadc6336e95e2152fab8d188d33a43b78", "committedDate": "2022-12-07 17:26:00 +0800", "message": "[ISSUSE #5589] record subscription from request (#5590)"}, {"oid": "e1dfc0db5347059edf31237c0e62889644c0dff9", "committedDate": "2023-01-01 13:02:53 +0800", "message": "[ISSUE #5714] Fix the issue that broker can't work normally when transientStorePool=true in controller mode (#5722)"}, {"oid": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "committedDate": "2023-01-05 15:28:46 +0800", "message": "[ISSUE #5823] Add delete topic in message store interface (#5824)"}, {"oid": "62686059eafa303be68b1fcc188f67ff4ad5e24c", "committedDate": "2023-02-03 14:39:53 +0800", "message": "[ISSUE #5860] Set the value of order when create or update topic (#5861)"}, {"oid": "b6e0bf318080eee8b38f690a56829108f457eb28", "committedDate": "2023-02-06 10:16:05 +0800", "message": "[ISSUE #5969] Remvoe duplicate deleteUnusedStats in admin processor (#5973)"}, {"oid": "9a55592409fc7105c482bf36bb261e8cfb216c5a", "committedDate": "2023-02-08 15:03:08 +0800", "message": "[ISSUE #5994] [RIP-46] add pop and timer metrics (#5995)"}, {"oid": "20dc5c96eacaa831b81e9cb038a6e5e33f81ec19", "committedDate": "2023-03-13 11:16:35 +0800", "message": "[ISSUE #6316] Nameserver should choose a master with a larger epoch when there are two masters in controller mode (#6317)"}, {"oid": "c9bf9d78992e53cb33ff06131bab661984e7e1a5", "committedDate": "2023-03-14 09:40:15 +0800", "message": "feat(broker): perfect logic test in broker"}, {"oid": "94db42ade7b4001860f5c7eefd026629bf5859fd", "committedDate": "2023-03-15 15:41:01 +0800", "message": "[ISSUE #6292] fix typos (#6293)"}, {"oid": "63a014b810387d11c9eaddd66fdbd80d158076ab", "committedDate": "2023-03-16 11:48:04 +0800", "message": "[ISSUE#6342] Local SyncStatSet sync to remote value when changeToMaster (#6352)"}, {"oid": "9d411cf04a695e7a3f41036e8377b0aa544d754d", "committedDate": "2023-05-11 18:01:29 +0800", "message": "Make configPath unable to update at runtime (#6733)"}, {"oid": "f1b411cecc3a9c441fdec2caf5867601419f3fc0", "committedDate": "2023-05-15 14:04:01 +0800", "message": "Remove filter server module (#6749)"}, {"oid": "bee5077bcb77411f103aafb2220184f59db2c95e", "committedDate": "2023-06-05 17:09:31 +0800", "message": "[ISSUE #6336] [RIP-62] Cold Read Control  (#6507)"}]}, {"oid": "8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "url": "https://github.com/apache/rocketmq/commit/8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "message": "User can not send message to system topic SCHEDULE_TOPIC_XXXX", "committedDate": "2020-05-15T07:32:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3Njk0MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429876940", "body": "the -> The", "bodyText": "the -> The", "bodyHTML": "<p dir=\"auto\">the -&gt; The</p>", "author": "duhenglucky", "createdAt": "2020-05-25T11:09:11Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -252,29 +253,16 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n             (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n         log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        if (requestHeader.getTopic().equals(this.brokerController.getBrokerConfig().getBrokerClusterName())) {\n-            String errorMsg = \"the topic[\" + requestHeader.getTopic() + \"] is conflict with system reserved words.\";", "originalCommit": "8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxOTI4MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429919280", "bodyText": "ok", "author": "coder-zzzz", "createdAt": "2020-05-25T12:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3Njk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6d97a44ab..c282786ae 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -254,9 +254,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n-        if (isSystemTopic(response, topic)) {\n-            return response;\n-        }\n \n         if (!TopicValidator.validateTopic(topic, response)) {\n             return response;\n", "next_change": {"commit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex c282786ae..6f9bc044c 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -258,6 +258,9 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         if (!TopicValidator.validateTopic(topic, response)) {\n             return response;\n         }\n+        if (!TopicValidator.validateSystemTopic(topic, response)) {\n+            return response;\n+        }\n \n         TopicConfig topicConfig = new TopicConfig(topic);\n         topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n", "next_change": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6f9bc044c..46d647304 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -258,7 +258,7 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         if (!TopicValidator.validateTopic(topic, response)) {\n             return response;\n         }\n-        if (!TopicValidator.validateSystemTopic(topic, response)) {\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n             return response;\n         }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6d97a44ab..dcdb70163 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -254,13 +254,13 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n-        if (isSystemTopic(response, topic)) {\n-            return response;\n-        }\n \n         if (!TopicValidator.validateTopic(topic, response)) {\n             return response;\n         }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n \n         TopicConfig topicConfig = new TopicConfig(topic);\n         topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n", "next_change": {"commit": "18010a4d30e43a76e633a01fe0476f44de763c83", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dcdb70163..6505263b8 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -268,15 +296,66 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+        String attributesModification = requestHeader.getAttributes();\n+        topicConfig.setAttributes(AttributeParser.parseToMap(attributesModification));\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        }  catch (Exception e) {\n+            log.error(\"Update / create topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n+\n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6505263b8..9d188ab52 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -340,22 +268,14 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 9d188ab52..d79ae4a96 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -267,15 +295,66 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+        String attributesModification = requestHeader.getAttributes();\n+        topicConfig.setAttributes(AttributeParser.parseToMap(attributesModification));\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        }  catch (Exception e) {\n+            log.error(\"Update / create topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        response.setCode(ResponseCode.SUCCESS);\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "cad0cfcecef88958b103059aea7b98395850226a", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d79ae4a96..a283228f9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -347,21 +443,21 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n             this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n             response.setCode(ResponseCode.SUCCESS);\n         } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(e.getMessage());\n         }\n         return response;\n     }\n \n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex a283228f9..f4ada3684 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -435,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex f4ada3684..0917858f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +437,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "53baee7803608894c80eab7122ab9eec5502a46f", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0917858f7..d7a087b1b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -437,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d7a087b1b..3aaf4b935 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +441,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 3aaf4b935..0a70b5546 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -441,29 +276,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0a70b5546..7f8b2a437 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -276,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "fcfe26e4443dd24b1055899266d1bd81060ee118", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 7f8b2a437..dba97200c 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +278,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dba97200c..fa316ba97 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -278,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex fa316ba97..ca99605f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +277,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ca99605f7..ed94e6771 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -294,7 +471,8 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor {\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ed94e6771..60cc9c7ea 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -475,10 +501,15 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n-        if (!TopicValidator.validateTopic(topic, response)) {\n+        TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(topic);\n+        if (!result.isValid()) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n+        if (TopicValidator.isSystemTopic(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return response;\n         }\n \n", "next_change": {"commit": "62a959691ced2165c496b5a543b5d0955dad7fd1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 60cc9c7ea..dfbd886f2 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -507,10 +511,12 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic)) {\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return response;\n+        if (brokerController.getBrokerConfig().isValidateSystemTopicWhenUpdateTopic()) {\n+            if (TopicValidator.isSystemTopic(topic)) {\n+                response.setCode(ResponseCode.SYSTEM_ERROR);\n+                response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+                return response;\n+            }\n         }\n \n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n", "next_change": {"commit": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dfbd886f2..ad86ab34a 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -522,6 +522,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n+        this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore()\n             .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n", "next_change": {"commit": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ad86ab34a..1723923d3 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -523,8 +525,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n-        this.brokerController.getMessageStore()\n-            .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n+        this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n             this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n         }\n", "next_change": {"commit": "b6e0bf318080eee8b38f690a56829108f457eb28", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 1723923d3..78f50c92b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -526,10 +527,6 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n-        if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n-            this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n-        }\n-\n         response.setCode(ResponseCode.SUCCESS);\n         response.setRemark(null);\n         return response;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "46459426801d582b5ef71c8a3e38267ccd6caad9", "committedDate": "2021-03-24 11:39:12 +0800", "message": "[ISSUE #2748] Fix deleteSubscriptionGroup not remove consumer offset"}, {"oid": "9a5ec9082f6611629fc6c7459e32ac606a893c4d", "committedDate": "2021-07-01 15:00:27 +0800", "message": "[ISSUE  #3109]Return a no-support value when not match any request code"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "d067bfc21410c11dc3c99bb2b67403aa4b344286", "committedDate": "2021-07-30 21:56:32 +0800", "message": "[ISSUE #3192] Make free disk value more accurate"}, {"oid": "147d23e3ed0a817f8ebb427168f35ba9fe946026", "committedDate": "2021-09-14 15:33:38 +0800", "message": "[ISSUE #3281 ][acl] fix fail to delete topic perm list and global white address(#3128) (#3280)"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "14b63ee5503671cdd394694f55509aba3ce8241a", "committedDate": "2022-01-13 19:15:42 +0800", "message": "[RIP-28] light message queue(LMQ)  (#3694)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "18010a4d30e43a76e633a01fe0476f44de763c83", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3679] Support topic attributes (#3698)"}, {"oid": "b3f9fbd3a72b2bdf54fed315b71f8361b300e107", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Convert the consumer offset too"}, {"oid": "a767cc142423b62fc50fc21fb50c1b741203af2e", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Fix test for consumer offset"}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "committedDate": "2022-02-19 09:52:31 +0800", "message": "[ISSUE #2986] Support for multiple ACL files in a fixed directory (#3761)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "87d9614d34f18d1e8c212c9914b5a2a5f8cae85f", "committedDate": "2022-03-04 16:38:04 +0800", "message": "Resolve all conflicts and pass all UTs"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "committedDate": "2022-04-19 10:24:04 +0800", "message": "[ISSUE #4175] Prevent update topic on slave (#4176)"}, {"oid": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "committedDate": "2022-04-22 13:52:34 +0800", "message": "sync message request mode from master (#4101)"}, {"oid": "53baee7803608894c80eab7122ab9eec5502a46f", "committedDate": "2022-05-24 22:42:58 +0800", "message": "Add option p to the updateGlobalWhiteAddr command to indicate the full path of the ACL configuration file to be modified.If the option is null, updateGlobalWhiteAddr command will update the default acl configuration file."}, {"oid": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "committedDate": "2022-06-01 11:05:48 +0800", "message": "[Summer of code] Add admin tools for controller mode (#4388)"}, {"oid": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "committedDate": "2022-06-04 22:35:24 +0800", "message": "[iSSUE-4396] Support get all producer on one broker (#4395)"}, {"oid": "aacaf91539a90b18de21a988a204b5e842497352", "committedDate": "2022-06-07 12:52:51 +0800", "message": "Merge pull request #4152 from sunxi92/feature_update_global_white_addr"}, {"oid": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "committedDate": "2022-06-07 16:51:14 +0800", "message": "[Summer of code] Let controller inform broker that role changed. (#4424)"}, {"oid": "fcfe26e4443dd24b1055899266d1bd81060ee118", "committedDate": "2022-06-14 17:18:14 +0800", "message": "[ISSUE #4037] Add DeleteExpiredCommitLogSubCommand (#4038)"}, {"oid": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "committedDate": "2022-06-16 17:16:53 +0800", "message": "Update hacontroller directory name to controller"}, {"oid": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "committedDate": "2022-06-27 10:52:59 +0800", "message": "Remove redundant implements"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "a55a6215946a86253d1faf59d0d36ac78e267015", "committedDate": "2022-07-08 15:35:41 +0800", "message": "Merge branch 'develop-merge-5.0.0' into 5.0.0-beta-dledger-controller"}, {"oid": "ab4f7ddbcc15ee6addb18645d087150b62da5fab", "committedDate": "2022-07-08 17:55:11 +0800", "message": "Pass the CI after merge develop"}, {"oid": "e976cdbfc12b0088d95139c7136fee203647cedf", "committedDate": "2022-08-01 10:15:20 +0800", "message": "[ISSUE #4739] Add TimerMessageStore runtime info in ClusterListSubCommand (#4740)"}, {"oid": "61b14c3f4eb9ec015be2bced3187042a1267b3d8", "committedDate": "2022-08-08 09:28:41 +0800", "message": "[ISSUE #4785] Enable misspell check GitHub Action (#4786)"}, {"oid": "f23fdbe016ab4b60c2dd9786016c5f4756b3db54", "committedDate": "2022-08-30 17:45:56 +0800", "message": "Replace findbugs by spotbugs (#4931)"}, {"oid": "f1e95cd266ad82d68158235ca7316722213e3baf", "committedDate": "2022-09-08 09:21:05 +0800", "message": "[ISSUE#5015] Fix typo of getAllCongestNum in TimerMessageStore"}, {"oid": "d407ec679ac8a4e2e4b63d4033c10d0caba5f7bb", "committedDate": "2022-09-14 13:52:28 +0800", "message": "[ISSUE #5061] Fix the slave broker cannot synchronize timer metrics (#5065)"}, {"oid": "c185c60b0fdfb3be2136a704c9014c1ec35ca0da", "committedDate": "2022-09-18 11:17:36 +0800", "message": "[ISSUE #5108] Bump checkstyle to 3.2.0 (#5109)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "d663bcf6aa9e171f079e9bd85d65b1d907f4383b", "committedDate": "2022-10-14 14:02:08 +0800", "message": "[ISSUE #5292] [RIP-48] Support reset offset in server-side to improve the success rate (#5293)"}, {"oid": "a7c1d49454ce405fc651f95d036571d91bd8c9e0", "committedDate": "2022-10-26 15:41:41 +0800", "message": "[ISSUE #5356] [RIP 48] Introduces the concept of ready and inflight messages (#5357)"}, {"oid": "0ae1bd2af69f475aba03ab7a27df0bd7cda15359", "committedDate": "2022-11-09 19:44:41 +0800", "message": "[ISSUE #5449] [RIP-46] implement remoting stats metrics (#5487)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "1cdcce1988e927e4f705f67c8c9683888c0606cf", "committedDate": "2022-11-22 20:54:31 +0800", "message": "[ISSUE #5560] Method parameters are passed in the wrong order (#5561)"}, {"oid": "62a959691ced2165c496b5a543b5d0955dad7fd1", "committedDate": "2022-11-30 17:10:25 +0800", "message": "[ISSUE #5595] Add validateSystemTopicWhenUpdateTopic (#5596)"}, {"oid": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "committedDate": "2022-12-07 17:21:42 +0800", "message": "[ISSUE #5654] support calculate inflight messages for pop (#5655)"}, {"oid": "7cab0a1aadc6336e95e2152fab8d188d33a43b78", "committedDate": "2022-12-07 17:26:00 +0800", "message": "[ISSUSE #5589] record subscription from request (#5590)"}, {"oid": "e1dfc0db5347059edf31237c0e62889644c0dff9", "committedDate": "2023-01-01 13:02:53 +0800", "message": "[ISSUE #5714] Fix the issue that broker can't work normally when transientStorePool=true in controller mode (#5722)"}, {"oid": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "committedDate": "2023-01-05 15:28:46 +0800", "message": "[ISSUE #5823] Add delete topic in message store interface (#5824)"}, {"oid": "62686059eafa303be68b1fcc188f67ff4ad5e24c", "committedDate": "2023-02-03 14:39:53 +0800", "message": "[ISSUE #5860] Set the value of order when create or update topic (#5861)"}, {"oid": "b6e0bf318080eee8b38f690a56829108f457eb28", "committedDate": "2023-02-06 10:16:05 +0800", "message": "[ISSUE #5969] Remvoe duplicate deleteUnusedStats in admin processor (#5973)"}, {"oid": "9a55592409fc7105c482bf36bb261e8cfb216c5a", "committedDate": "2023-02-08 15:03:08 +0800", "message": "[ISSUE #5994] [RIP-46] add pop and timer metrics (#5995)"}, {"oid": "20dc5c96eacaa831b81e9cb038a6e5e33f81ec19", "committedDate": "2023-03-13 11:16:35 +0800", "message": "[ISSUE #6316] Nameserver should choose a master with a larger epoch when there are two masters in controller mode (#6317)"}, {"oid": "c9bf9d78992e53cb33ff06131bab661984e7e1a5", "committedDate": "2023-03-14 09:40:15 +0800", "message": "feat(broker): perfect logic test in broker"}, {"oid": "94db42ade7b4001860f5c7eefd026629bf5859fd", "committedDate": "2023-03-15 15:41:01 +0800", "message": "[ISSUE #6292] fix typos (#6293)"}, {"oid": "63a014b810387d11c9eaddd66fdbd80d158076ab", "committedDate": "2023-03-16 11:48:04 +0800", "message": "[ISSUE#6342] Local SyncStatSet sync to remote value when changeToMaster (#6352)"}, {"oid": "9d411cf04a695e7a3f41036e8377b0aa544d754d", "committedDate": "2023-05-11 18:01:29 +0800", "message": "Make configPath unable to update at runtime (#6733)"}, {"oid": "f1b411cecc3a9c441fdec2caf5867601419f3fc0", "committedDate": "2023-05-15 14:04:01 +0800", "message": "Remove filter server module (#6749)"}, {"oid": "bee5077bcb77411f103aafb2220184f59db2c95e", "committedDate": "2023-06-05 17:09:31 +0800", "message": "[ISSUE #6336] [RIP-62] Cold Read Control  (#6507)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTg5NA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429879894", "body": "It would be better to integrate these two methods: org.apache.rocketmq.common.MixAll#isSystemTopic ", "bodyText": "It would be better to integrate these two methods: org.apache.rocketmq.common.MixAll#isSystemTopic", "bodyHTML": "<p dir=\"auto\">It would be better to integrate these two methods: org.apache.rocketmq.common.MixAll#isSystemTopic</p>", "author": "duhenglucky", "createdAt": "2020-05-25T11:17:10Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -285,7 +273,19 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n \n         this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-        return null;\n+        response.setCode(ResponseCode.SUCCESS);\n+        return response;\n+    }\n+\n+    private boolean isSystemTopic(RemotingCommand response, String topic) {\n+        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {", "originalCommit": "8c9b7fb8a8fda42e7692e3565bf2af7b885d0c3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjI4Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r429922283", "bodyText": "The MixAll#isSystemTopic is used in NamespaceUtil, but NamespaceUtil is use in both broker and client. Some topic can be mixed like AUTO_CREATE_TOPIC_KEY_TOPIC, but some can't, such as the topic of broker' clusterName.\nI try to use a new method in nameserver which offer the ability to judge if the topic will be created is system topic before this pr.But I found there always will be mistake when some broker register itself to nameserver after the judge request.\nSo I just promise broker itself will not create topics which it thought is system topic.\nDo u have any ideas to fix it?", "author": "coder-zzzz", "createdAt": "2020-05-25T13:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6d97a44ab..0c44654da 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -279,7 +279,7 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n \n     private boolean isSystemTopic(RemotingCommand response, String topic) {\n         if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"the topic[\" + topic + \"] is conflict with system reserved words.\";\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\n             log.warn(errorMsg);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(errorMsg);\n", "next_change": {"commit": "d964e87c2ad364292e9323f321703cd08a0946f4", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0c44654da..0297916eb 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -279,7 +279,7 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n \n     private boolean isSystemTopic(RemotingCommand response, String topic) {\n         if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system topic.\";\n             log.warn(errorMsg);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(errorMsg);\n", "next_change": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0297916eb..c282786ae 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,17 +274,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private boolean isSystemTopic(RemotingCommand response, String topic) {\n-        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system topic.\";\n-            log.warn(errorMsg);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(errorMsg);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 6d97a44ab..dcdb70163 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,17 +277,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private boolean isSystemTopic(RemotingCommand response, String topic) {\n-        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"the topic[\" + topic + \"] is conflict with system reserved words.\";\n-            log.warn(errorMsg);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(errorMsg);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "b6ff649291453d3dc2d702fbba1548d991b610ac", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dcdb70163..2891bafe9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,6 +301,51 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n+\n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 2891bafe9..9d188ab52 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -301,51 +276,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n-                                                              RemotingCommand request) throws RemotingCommandException {\n-        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        final CreateTopicRequestHeader requestHeader =\n-                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n-        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n-\n-        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n-\n-        String topic = requestHeader.getTopic();\n-\n-        if (!TopicValidator.validateTopic(topic, response)) {\n-            return response;\n-        }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n-            return response;\n-        }\n-        boolean force = false;\n-        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n-            force = true;\n-        }\n-\n-        TopicConfig topicConfig = new TopicConfig(topic);\n-        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n-        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n-        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n-        topicConfig.setPerm(requestHeader.getPerm());\n-        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n-\n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n-\n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n-\n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n-        return response;\n-    }\n-\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 9d188ab52..d79ae4a96 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -267,15 +295,66 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+        String attributesModification = requestHeader.getAttributes();\n+        topicConfig.setAttributes(AttributeParser.parseToMap(attributesModification));\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        }  catch (Exception e) {\n+            log.error(\"Update / create topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        response.setCode(ResponseCode.SUCCESS);\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "cad0cfcecef88958b103059aea7b98395850226a", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d79ae4a96..a283228f9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -347,21 +443,21 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n             this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n             response.setCode(ResponseCode.SUCCESS);\n         } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(e.getMessage());\n         }\n         return response;\n     }\n \n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex a283228f9..f4ada3684 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -435,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex f4ada3684..0917858f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +437,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "53baee7803608894c80eab7122ab9eec5502a46f", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0917858f7..d7a087b1b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -437,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d7a087b1b..3aaf4b935 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +441,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 3aaf4b935..0a70b5546 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -441,29 +276,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0a70b5546..7f8b2a437 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -276,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "fcfe26e4443dd24b1055899266d1bd81060ee118", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 7f8b2a437..dba97200c 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +278,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dba97200c..fa316ba97 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -278,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex fa316ba97..ca99605f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +277,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ca99605f7..ed94e6771 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -294,7 +471,8 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor {\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ed94e6771..60cc9c7ea 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -475,10 +501,15 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n-        if (!TopicValidator.validateTopic(topic, response)) {\n+        TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(topic);\n+        if (!result.isValid()) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n+        if (TopicValidator.isSystemTopic(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return response;\n         }\n \n", "next_change": {"commit": "62a959691ced2165c496b5a543b5d0955dad7fd1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 60cc9c7ea..dfbd886f2 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -507,10 +511,12 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic)) {\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return response;\n+        if (brokerController.getBrokerConfig().isValidateSystemTopicWhenUpdateTopic()) {\n+            if (TopicValidator.isSystemTopic(topic)) {\n+                response.setCode(ResponseCode.SYSTEM_ERROR);\n+                response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+                return response;\n+            }\n         }\n \n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n", "next_change": {"commit": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dfbd886f2..ad86ab34a 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -522,6 +522,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n+        this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore()\n             .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n", "next_change": {"commit": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ad86ab34a..1723923d3 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -523,8 +525,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n-        this.brokerController.getMessageStore()\n-            .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n+        this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n             this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n         }\n", "next_change": {"commit": "b6e0bf318080eee8b38f690a56829108f457eb28", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 1723923d3..78f50c92b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -526,10 +527,6 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n-        if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n-            this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n-        }\n-\n         response.setCode(ResponseCode.SUCCESS);\n         response.setRemark(null);\n         return response;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "46459426801d582b5ef71c8a3e38267ccd6caad9", "committedDate": "2021-03-24 11:39:12 +0800", "message": "[ISSUE #2748] Fix deleteSubscriptionGroup not remove consumer offset"}, {"oid": "9a5ec9082f6611629fc6c7459e32ac606a893c4d", "committedDate": "2021-07-01 15:00:27 +0800", "message": "[ISSUE  #3109]Return a no-support value when not match any request code"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "d067bfc21410c11dc3c99bb2b67403aa4b344286", "committedDate": "2021-07-30 21:56:32 +0800", "message": "[ISSUE #3192] Make free disk value more accurate"}, {"oid": "147d23e3ed0a817f8ebb427168f35ba9fe946026", "committedDate": "2021-09-14 15:33:38 +0800", "message": "[ISSUE #3281 ][acl] fix fail to delete topic perm list and global white address(#3128) (#3280)"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "14b63ee5503671cdd394694f55509aba3ce8241a", "committedDate": "2022-01-13 19:15:42 +0800", "message": "[RIP-28] light message queue(LMQ)  (#3694)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "18010a4d30e43a76e633a01fe0476f44de763c83", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3679] Support topic attributes (#3698)"}, {"oid": "b3f9fbd3a72b2bdf54fed315b71f8361b300e107", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Convert the consumer offset too"}, {"oid": "a767cc142423b62fc50fc21fb50c1b741203af2e", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Fix test for consumer offset"}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "committedDate": "2022-02-19 09:52:31 +0800", "message": "[ISSUE #2986] Support for multiple ACL files in a fixed directory (#3761)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "87d9614d34f18d1e8c212c9914b5a2a5f8cae85f", "committedDate": "2022-03-04 16:38:04 +0800", "message": "Resolve all conflicts and pass all UTs"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "committedDate": "2022-04-19 10:24:04 +0800", "message": "[ISSUE #4175] Prevent update topic on slave (#4176)"}, {"oid": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "committedDate": "2022-04-22 13:52:34 +0800", "message": "sync message request mode from master (#4101)"}, {"oid": "53baee7803608894c80eab7122ab9eec5502a46f", "committedDate": "2022-05-24 22:42:58 +0800", "message": "Add option p to the updateGlobalWhiteAddr command to indicate the full path of the ACL configuration file to be modified.If the option is null, updateGlobalWhiteAddr command will update the default acl configuration file."}, {"oid": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "committedDate": "2022-06-01 11:05:48 +0800", "message": "[Summer of code] Add admin tools for controller mode (#4388)"}, {"oid": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "committedDate": "2022-06-04 22:35:24 +0800", "message": "[iSSUE-4396] Support get all producer on one broker (#4395)"}, {"oid": "aacaf91539a90b18de21a988a204b5e842497352", "committedDate": "2022-06-07 12:52:51 +0800", "message": "Merge pull request #4152 from sunxi92/feature_update_global_white_addr"}, {"oid": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "committedDate": "2022-06-07 16:51:14 +0800", "message": "[Summer of code] Let controller inform broker that role changed. (#4424)"}, {"oid": "fcfe26e4443dd24b1055899266d1bd81060ee118", "committedDate": "2022-06-14 17:18:14 +0800", "message": "[ISSUE #4037] Add DeleteExpiredCommitLogSubCommand (#4038)"}, {"oid": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "committedDate": "2022-06-16 17:16:53 +0800", "message": "Update hacontroller directory name to controller"}, {"oid": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "committedDate": "2022-06-27 10:52:59 +0800", "message": "Remove redundant implements"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "a55a6215946a86253d1faf59d0d36ac78e267015", "committedDate": "2022-07-08 15:35:41 +0800", "message": "Merge branch 'develop-merge-5.0.0' into 5.0.0-beta-dledger-controller"}, {"oid": "ab4f7ddbcc15ee6addb18645d087150b62da5fab", "committedDate": "2022-07-08 17:55:11 +0800", "message": "Pass the CI after merge develop"}, {"oid": "e976cdbfc12b0088d95139c7136fee203647cedf", "committedDate": "2022-08-01 10:15:20 +0800", "message": "[ISSUE #4739] Add TimerMessageStore runtime info in ClusterListSubCommand (#4740)"}, {"oid": "61b14c3f4eb9ec015be2bced3187042a1267b3d8", "committedDate": "2022-08-08 09:28:41 +0800", "message": "[ISSUE #4785] Enable misspell check GitHub Action (#4786)"}, {"oid": "f23fdbe016ab4b60c2dd9786016c5f4756b3db54", "committedDate": "2022-08-30 17:45:56 +0800", "message": "Replace findbugs by spotbugs (#4931)"}, {"oid": "f1e95cd266ad82d68158235ca7316722213e3baf", "committedDate": "2022-09-08 09:21:05 +0800", "message": "[ISSUE#5015] Fix typo of getAllCongestNum in TimerMessageStore"}, {"oid": "d407ec679ac8a4e2e4b63d4033c10d0caba5f7bb", "committedDate": "2022-09-14 13:52:28 +0800", "message": "[ISSUE #5061] Fix the slave broker cannot synchronize timer metrics (#5065)"}, {"oid": "c185c60b0fdfb3be2136a704c9014c1ec35ca0da", "committedDate": "2022-09-18 11:17:36 +0800", "message": "[ISSUE #5108] Bump checkstyle to 3.2.0 (#5109)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "d663bcf6aa9e171f079e9bd85d65b1d907f4383b", "committedDate": "2022-10-14 14:02:08 +0800", "message": "[ISSUE #5292] [RIP-48] Support reset offset in server-side to improve the success rate (#5293)"}, {"oid": "a7c1d49454ce405fc651f95d036571d91bd8c9e0", "committedDate": "2022-10-26 15:41:41 +0800", "message": "[ISSUE #5356] [RIP 48] Introduces the concept of ready and inflight messages (#5357)"}, {"oid": "0ae1bd2af69f475aba03ab7a27df0bd7cda15359", "committedDate": "2022-11-09 19:44:41 +0800", "message": "[ISSUE #5449] [RIP-46] implement remoting stats metrics (#5487)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "1cdcce1988e927e4f705f67c8c9683888c0606cf", "committedDate": "2022-11-22 20:54:31 +0800", "message": "[ISSUE #5560] Method parameters are passed in the wrong order (#5561)"}, {"oid": "62a959691ced2165c496b5a543b5d0955dad7fd1", "committedDate": "2022-11-30 17:10:25 +0800", "message": "[ISSUE #5595] Add validateSystemTopicWhenUpdateTopic (#5596)"}, {"oid": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "committedDate": "2022-12-07 17:21:42 +0800", "message": "[ISSUE #5654] support calculate inflight messages for pop (#5655)"}, {"oid": "7cab0a1aadc6336e95e2152fab8d188d33a43b78", "committedDate": "2022-12-07 17:26:00 +0800", "message": "[ISSUSE #5589] record subscription from request (#5590)"}, {"oid": "e1dfc0db5347059edf31237c0e62889644c0dff9", "committedDate": "2023-01-01 13:02:53 +0800", "message": "[ISSUE #5714] Fix the issue that broker can't work normally when transientStorePool=true in controller mode (#5722)"}, {"oid": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "committedDate": "2023-01-05 15:28:46 +0800", "message": "[ISSUE #5823] Add delete topic in message store interface (#5824)"}, {"oid": "62686059eafa303be68b1fcc188f67ff4ad5e24c", "committedDate": "2023-02-03 14:39:53 +0800", "message": "[ISSUE #5860] Set the value of order when create or update topic (#5861)"}, {"oid": "b6e0bf318080eee8b38f690a56829108f457eb28", "committedDate": "2023-02-06 10:16:05 +0800", "message": "[ISSUE #5969] Remvoe duplicate deleteUnusedStats in admin processor (#5973)"}, {"oid": "9a55592409fc7105c482bf36bb261e8cfb216c5a", "committedDate": "2023-02-08 15:03:08 +0800", "message": "[ISSUE #5994] [RIP-46] add pop and timer metrics (#5995)"}, {"oid": "20dc5c96eacaa831b81e9cb038a6e5e33f81ec19", "committedDate": "2023-03-13 11:16:35 +0800", "message": "[ISSUE #6316] Nameserver should choose a master with a larger epoch when there are two masters in controller mode (#6317)"}, {"oid": "c9bf9d78992e53cb33ff06131bab661984e7e1a5", "committedDate": "2023-03-14 09:40:15 +0800", "message": "feat(broker): perfect logic test in broker"}, {"oid": "94db42ade7b4001860f5c7eefd026629bf5859fd", "committedDate": "2023-03-15 15:41:01 +0800", "message": "[ISSUE #6292] fix typos (#6293)"}, {"oid": "63a014b810387d11c9eaddd66fdbd80d158076ab", "committedDate": "2023-03-16 11:48:04 +0800", "message": "[ISSUE#6342] Local SyncStatSet sync to remote value when changeToMaster (#6352)"}, {"oid": "9d411cf04a695e7a3f41036e8377b0aa544d754d", "committedDate": "2023-05-11 18:01:29 +0800", "message": "Make configPath unable to update at runtime (#6733)"}, {"oid": "f1b411cecc3a9c441fdec2caf5867601419f3fc0", "committedDate": "2023-05-15 14:04:01 +0800", "message": "Remove filter server module (#6749)"}, {"oid": "bee5077bcb77411f103aafb2220184f59db2c95e", "committedDate": "2023-06-05 17:09:31 +0800", "message": "[ISSUE #6336] [RIP-62] Cold Read Control  (#6507)"}]}, {"oid": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "url": "https://github.com/apache/rocketmq/commit/3c86a3fcc12fd37d3fa44f65601858aed7224863", "message": "the-->The", "committedDate": "2020-05-25T13:03:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODg4NA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430128884", "body": "String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\r\n\r\nThe reminder info(reserved words should update system topic )is not uniform with your modification. ", "bodyText": "String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\nThe reminder info(reserved words should update system topic )is not uniform with your modification.", "bodyHTML": "<p dir=\"auto\">String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";</p>\n<p dir=\"auto\">The reminder info(reserved words should update system topic )is not uniform with your modification.</p>", "author": "vongosling", "createdAt": "2020-05-26T02:41:58Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java", "diffHunk": "@@ -285,7 +273,19 @@ private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext\n \n         this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-        return null;\n+        response.setCode(ResponseCode.SUCCESS);\n+        return response;\n+    }\n+\n+    private boolean isSystemTopic(RemotingCommand response, String topic) {\n+        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzODcxNg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430138716", "bodyText": "ok", "author": "coder-zzzz", "createdAt": "2020-05-26T03:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyODg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d964e87c2ad364292e9323f321703cd08a0946f4", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0c44654da..0297916eb 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -279,7 +279,7 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n \n     private boolean isSystemTopic(RemotingCommand response, String topic) {\n         if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\n+            String errorMsg = \"The topic[\" + topic + \"] is conflict with system topic.\";\n             log.warn(errorMsg);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(errorMsg);\n", "next_change": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0297916eb..c282786ae 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,17 +274,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private boolean isSystemTopic(RemotingCommand response, String topic) {\n-        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system topic.\";\n-            log.warn(errorMsg);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(errorMsg);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0c44654da..dcdb70163 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,17 +277,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private boolean isSystemTopic(RemotingCommand response, String topic) {\n-        if (this.brokerController.getTopicConfigManager().isSystemTopic(topic)) {\n-            String errorMsg = \"The topic[\" + topic + \"] is conflict with system reserved words.\";\n-            log.warn(errorMsg);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(errorMsg);\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "b6ff649291453d3dc2d702fbba1548d991b610ac", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dcdb70163..2891bafe9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -277,6 +301,51 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n+\n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 2891bafe9..9d188ab52 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -301,51 +276,6 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         return response;\n     }\n \n-    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n-                                                              RemotingCommand request) throws RemotingCommandException {\n-        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        final CreateTopicRequestHeader requestHeader =\n-                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n-        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n-\n-        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n-\n-        String topic = requestHeader.getTopic();\n-\n-        if (!TopicValidator.validateTopic(topic, response)) {\n-            return response;\n-        }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n-            return response;\n-        }\n-        boolean force = false;\n-        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n-            force = true;\n-        }\n-\n-        TopicConfig topicConfig = new TopicConfig(topic);\n-        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n-        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n-        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n-        topicConfig.setPerm(requestHeader.getPerm());\n-        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n-\n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n-\n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n-\n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n-        return response;\n-    }\n-\n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 9d188ab52..d79ae4a96 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -267,15 +295,66 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+        String attributesModification = requestHeader.getAttributes();\n+        topicConfig.setAttributes(AttributeParser.parseToMap(attributesModification));\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        }  catch (Exception e) {\n+            log.error(\"Update / create topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n+        return response;\n+    }\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+    private synchronized RemotingCommand updateAndCreateStaticTopic(ChannelHandlerContext ctx,\n+                                                              RemotingCommand request) throws RemotingCommandException {\n+        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        final CreateTopicRequestHeader requestHeader =\n+                (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n+        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n-        response.setCode(ResponseCode.SUCCESS);\n+        final TopicQueueMappingDetail topicQueueMappingDetail = RemotingSerializable.decode(request.getBody(), TopicQueueMappingDetail.class);\n+\n+        String topic = requestHeader.getTopic();\n+\n+        if (!TopicValidator.validateTopic(topic, response)) {\n+            return response;\n+        }\n+        if (TopicValidator.isSystemTopic(topic, response)) {\n+            return response;\n+        }\n+        boolean force = false;\n+        if (requestHeader.getForce() != null && requestHeader.getForce()) {\n+            force = true;\n+        }\n+\n+        TopicConfig topicConfig = new TopicConfig(topic);\n+        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n+        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n+        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n+        topicConfig.setPerm(requestHeader.getPerm());\n+        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n+\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            log.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n+\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "next_change": {"commit": "cad0cfcecef88958b103059aea7b98395850226a", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d79ae4a96..a283228f9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -347,21 +443,21 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n             this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n             response.setCode(ResponseCode.SUCCESS);\n         } catch (Exception e) {\n-            log.error(\"Update static topic failed for [{}]\", request, e);\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(e.getMessage());\n         }\n         return response;\n     }\n \n-\n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex a283228f9..f4ada3684 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -435,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex f4ada3684..0917858f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +437,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "53baee7803608894c80eab7122ab9eec5502a46f", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0917858f7..d7a087b1b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -437,29 +272,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex d7a087b1b..3aaf4b935 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -272,24 +441,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 3aaf4b935..0a70b5546 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -441,29 +276,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 0a70b5546..7f8b2a437 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -276,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "fcfe26e4443dd24b1055899266d1bd81060ee118", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 7f8b2a437..dba97200c 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +278,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dba97200c..fa316ba97 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -278,24 +444,29 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        try {\n+            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n \n-        response.setCode(ResponseCode.SUCCESS);\n+            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n+            response.setCode(ResponseCode.SUCCESS);\n+        } catch (Exception e) {\n+            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(e.getMessage());\n+        }\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n-        if (validateSlave(response)) {\n-            return response;\n-        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex fa316ba97..ca99605f7 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -444,29 +277,24 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         topicConfig.setPerm(requestHeader.getPerm());\n         topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n \n-        try {\n-            this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n+        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n \n-            this.brokerController.getTopicQueueMappingManager().updateTopicQueueMapping(topicQueueMappingDetail, force, false, true);\n+        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n \n-            this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n-            response.setCode(ResponseCode.SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Update static topic failed for [{}]\", request, e);\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(e.getMessage());\n-        }\n+        response.setCode(ResponseCode.SUCCESS);\n         return response;\n     }\n \n     private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n         RemotingCommand request) throws RemotingCommandException {\n         final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n+        if (validateSlave(response)) {\n+            return response;\n+        }\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n-            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ca99605f7..ed94e6771 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -294,7 +471,8 @@ public class AdminBrokerProcessor extends AsyncNettyRequestProcessor {\n         DeleteTopicRequestHeader requestHeader =\n             (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n \n-        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n+        LOGGER.info(\"AdminBrokerProcessor#deleteTopic: broker receive request to delete topic={}, caller={}\",\n+            requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n         if (!TopicValidator.validateTopic(topic, response)) {\n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ed94e6771..60cc9c7ea 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -475,10 +501,15 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n \n         String topic = requestHeader.getTopic();\n-        if (!TopicValidator.validateTopic(topic, response)) {\n+        TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(topic);\n+        if (!result.isValid()) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic, response)) {\n+        if (TopicValidator.isSystemTopic(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return response;\n         }\n \n", "next_change": {"commit": "62a959691ced2165c496b5a543b5d0955dad7fd1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 60cc9c7ea..dfbd886f2 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -507,10 +511,12 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n             response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isSystemTopic(topic)) {\n-            response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return response;\n+        if (brokerController.getBrokerConfig().isValidateSystemTopicWhenUpdateTopic()) {\n+            if (TopicValidator.isSystemTopic(topic)) {\n+                response.setCode(ResponseCode.SYSTEM_ERROR);\n+                response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+                return response;\n+            }\n         }\n \n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n", "next_change": {"commit": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex dfbd886f2..ad86ab34a 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -522,6 +522,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicConfigManager().deleteTopicConfig(requestHeader.getTopic());\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n+        this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore()\n             .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n", "next_change": {"commit": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex ad86ab34a..1723923d3 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -523,8 +525,7 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getTopicQueueMappingManager().delete(requestHeader.getTopic());\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n-        this.brokerController.getMessageStore()\n-            .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n+        this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n         if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n             this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n         }\n", "next_change": {"commit": "b6e0bf318080eee8b38f690a56829108f457eb28", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\nindex 1723923d3..78f50c92b 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java\n", "chunk": "@@ -526,10 +527,6 @@ public class AdminBrokerProcessor implements NettyRequestProcessor {\n         this.brokerController.getConsumerOffsetManager().cleanOffsetByTopic(requestHeader.getTopic());\n         this.brokerController.getPopInflightMessageCounter().clearInFlightMessageNumByTopicName(requestHeader.getTopic());\n         this.brokerController.getMessageStore().deleteTopics(Sets.newHashSet(requestHeader.getTopic()));\n-        if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n-            this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n-        }\n-\n         response.setCode(ResponseCode.SUCCESS);\n         response.setRemark(null);\n         return response;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "46459426801d582b5ef71c8a3e38267ccd6caad9", "committedDate": "2021-03-24 11:39:12 +0800", "message": "[ISSUE #2748] Fix deleteSubscriptionGroup not remove consumer offset"}, {"oid": "9a5ec9082f6611629fc6c7459e32ac606a893c4d", "committedDate": "2021-07-01 15:00:27 +0800", "message": "[ISSUE  #3109]Return a no-support value when not match any request code"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "d067bfc21410c11dc3c99bb2b67403aa4b344286", "committedDate": "2021-07-30 21:56:32 +0800", "message": "[ISSUE #3192] Make free disk value more accurate"}, {"oid": "147d23e3ed0a817f8ebb427168f35ba9fe946026", "committedDate": "2021-09-14 15:33:38 +0800", "message": "[ISSUE #3281 ][acl] fix fail to delete topic perm list and global white address(#3128) (#3280)"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "14b63ee5503671cdd394694f55509aba3ce8241a", "committedDate": "2022-01-13 19:15:42 +0800", "message": "[RIP-28] light message queue(LMQ)  (#3694)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "18010a4d30e43a76e633a01fe0476f44de763c83", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3679] Support topic attributes (#3698)"}, {"oid": "b3f9fbd3a72b2bdf54fed315b71f8361b300e107", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Convert the consumer offset too"}, {"oid": "a767cc142423b62fc50fc21fb50c1b741203af2e", "committedDate": "2022-02-08 10:38:41 +0800", "message": "Fix test for consumer offset"}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "c1bb6aa27b10e1d55995ee9cef22b1905f5ee843", "committedDate": "2022-02-19 09:52:31 +0800", "message": "[ISSUE #2986] Support for multiple ACL files in a fixed directory (#3761)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "87d9614d34f18d1e8c212c9914b5a2a5f8cae85f", "committedDate": "2022-03-04 16:38:04 +0800", "message": "Resolve all conflicts and pass all UTs"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "9f7142bdd1ebf351a39c394d5fd995413ebc6bfd", "committedDate": "2022-04-19 10:24:04 +0800", "message": "[ISSUE #4175] Prevent update topic on slave (#4176)"}, {"oid": "531cdb0bed16b2f418dcf1aeaf474916f23adaec", "committedDate": "2022-04-22 13:52:34 +0800", "message": "sync message request mode from master (#4101)"}, {"oid": "53baee7803608894c80eab7122ab9eec5502a46f", "committedDate": "2022-05-24 22:42:58 +0800", "message": "Add option p to the updateGlobalWhiteAddr command to indicate the full path of the ACL configuration file to be modified.If the option is null, updateGlobalWhiteAddr command will update the default acl configuration file."}, {"oid": "e0121ca1da93f8ad77ff86db6b0dd261b32fd7fa", "committedDate": "2022-06-01 11:05:48 +0800", "message": "[Summer of code] Add admin tools for controller mode (#4388)"}, {"oid": "d5ca4d05c97c203751b53a134030ad9a2691c09c", "committedDate": "2022-06-04 22:35:24 +0800", "message": "[iSSUE-4396] Support get all producer on one broker (#4395)"}, {"oid": "aacaf91539a90b18de21a988a204b5e842497352", "committedDate": "2022-06-07 12:52:51 +0800", "message": "Merge pull request #4152 from sunxi92/feature_update_global_white_addr"}, {"oid": "98a283f5ae2968f9d501155f9702e51a3e9bc214", "committedDate": "2022-06-07 16:51:14 +0800", "message": "[Summer of code] Let controller inform broker that role changed. (#4424)"}, {"oid": "fcfe26e4443dd24b1055899266d1bd81060ee118", "committedDate": "2022-06-14 17:18:14 +0800", "message": "[ISSUE #4037] Add DeleteExpiredCommitLogSubCommand (#4038)"}, {"oid": "d6e922290f342d05cbeaac35a23445ac93f2df4b", "committedDate": "2022-06-16 17:16:53 +0800", "message": "Update hacontroller directory name to controller"}, {"oid": "946ffeaefaeed7afc99c90e07a93e62f3c6ae5fd", "committedDate": "2022-06-27 10:52:59 +0800", "message": "Remove redundant implements"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "a55a6215946a86253d1faf59d0d36ac78e267015", "committedDate": "2022-07-08 15:35:41 +0800", "message": "Merge branch 'develop-merge-5.0.0' into 5.0.0-beta-dledger-controller"}, {"oid": "ab4f7ddbcc15ee6addb18645d087150b62da5fab", "committedDate": "2022-07-08 17:55:11 +0800", "message": "Pass the CI after merge develop"}, {"oid": "e976cdbfc12b0088d95139c7136fee203647cedf", "committedDate": "2022-08-01 10:15:20 +0800", "message": "[ISSUE #4739] Add TimerMessageStore runtime info in ClusterListSubCommand (#4740)"}, {"oid": "61b14c3f4eb9ec015be2bced3187042a1267b3d8", "committedDate": "2022-08-08 09:28:41 +0800", "message": "[ISSUE #4785] Enable misspell check GitHub Action (#4786)"}, {"oid": "f23fdbe016ab4b60c2dd9786016c5f4756b3db54", "committedDate": "2022-08-30 17:45:56 +0800", "message": "Replace findbugs by spotbugs (#4931)"}, {"oid": "f1e95cd266ad82d68158235ca7316722213e3baf", "committedDate": "2022-09-08 09:21:05 +0800", "message": "[ISSUE#5015] Fix typo of getAllCongestNum in TimerMessageStore"}, {"oid": "d407ec679ac8a4e2e4b63d4033c10d0caba5f7bb", "committedDate": "2022-09-14 13:52:28 +0800", "message": "[ISSUE #5061] Fix the slave broker cannot synchronize timer metrics (#5065)"}, {"oid": "c185c60b0fdfb3be2136a704c9014c1ec35ca0da", "committedDate": "2022-09-18 11:17:36 +0800", "message": "[ISSUE #5108] Bump checkstyle to 3.2.0 (#5109)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "d663bcf6aa9e171f079e9bd85d65b1d907f4383b", "committedDate": "2022-10-14 14:02:08 +0800", "message": "[ISSUE #5292] [RIP-48] Support reset offset in server-side to improve the success rate (#5293)"}, {"oid": "a7c1d49454ce405fc651f95d036571d91bd8c9e0", "committedDate": "2022-10-26 15:41:41 +0800", "message": "[ISSUE #5356] [RIP 48] Introduces the concept of ready and inflight messages (#5357)"}, {"oid": "0ae1bd2af69f475aba03ab7a27df0bd7cda15359", "committedDate": "2022-11-09 19:44:41 +0800", "message": "[ISSUE #5449] [RIP-46] implement remoting stats metrics (#5487)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "1cdcce1988e927e4f705f67c8c9683888c0606cf", "committedDate": "2022-11-22 20:54:31 +0800", "message": "[ISSUE #5560] Method parameters are passed in the wrong order (#5561)"}, {"oid": "62a959691ced2165c496b5a543b5d0955dad7fd1", "committedDate": "2022-11-30 17:10:25 +0800", "message": "[ISSUE #5595] Add validateSystemTopicWhenUpdateTopic (#5596)"}, {"oid": "4c7f0eccecff258c4f6df2a66198e14bc5dad727", "committedDate": "2022-12-07 17:21:42 +0800", "message": "[ISSUE #5654] support calculate inflight messages for pop (#5655)"}, {"oid": "7cab0a1aadc6336e95e2152fab8d188d33a43b78", "committedDate": "2022-12-07 17:26:00 +0800", "message": "[ISSUSE #5589] record subscription from request (#5590)"}, {"oid": "e1dfc0db5347059edf31237c0e62889644c0dff9", "committedDate": "2023-01-01 13:02:53 +0800", "message": "[ISSUE #5714] Fix the issue that broker can't work normally when transientStorePool=true in controller mode (#5722)"}, {"oid": "83c47dddc98f7a74b3ef956a85e0343fc8ab6725", "committedDate": "2023-01-05 15:28:46 +0800", "message": "[ISSUE #5823] Add delete topic in message store interface (#5824)"}, {"oid": "62686059eafa303be68b1fcc188f67ff4ad5e24c", "committedDate": "2023-02-03 14:39:53 +0800", "message": "[ISSUE #5860] Set the value of order when create or update topic (#5861)"}, {"oid": "b6e0bf318080eee8b38f690a56829108f457eb28", "committedDate": "2023-02-06 10:16:05 +0800", "message": "[ISSUE #5969] Remvoe duplicate deleteUnusedStats in admin processor (#5973)"}, {"oid": "9a55592409fc7105c482bf36bb261e8cfb216c5a", "committedDate": "2023-02-08 15:03:08 +0800", "message": "[ISSUE #5994] [RIP-46] add pop and timer metrics (#5995)"}, {"oid": "20dc5c96eacaa831b81e9cb038a6e5e33f81ec19", "committedDate": "2023-03-13 11:16:35 +0800", "message": "[ISSUE #6316] Nameserver should choose a master with a larger epoch when there are two masters in controller mode (#6317)"}, {"oid": "c9bf9d78992e53cb33ff06131bab661984e7e1a5", "committedDate": "2023-03-14 09:40:15 +0800", "message": "feat(broker): perfect logic test in broker"}, {"oid": "94db42ade7b4001860f5c7eefd026629bf5859fd", "committedDate": "2023-03-15 15:41:01 +0800", "message": "[ISSUE #6292] fix typos (#6293)"}, {"oid": "63a014b810387d11c9eaddd66fdbd80d158076ab", "committedDate": "2023-03-16 11:48:04 +0800", "message": "[ISSUE#6342] Local SyncStatSet sync to remote value when changeToMaster (#6352)"}, {"oid": "9d411cf04a695e7a3f41036e8377b0aa544d754d", "committedDate": "2023-05-11 18:01:29 +0800", "message": "Make configPath unable to update at runtime (#6733)"}, {"oid": "f1b411cecc3a9c441fdec2caf5867601419f3fc0", "committedDate": "2023-05-15 14:04:01 +0800", "message": "Remove filter server module (#6749)"}, {"oid": "bee5077bcb77411f103aafb2220184f59db2c95e", "committedDate": "2023-06-05 17:09:31 +0800", "message": "[ISSUE #6336] [RIP-62] Cold Read Control  (#6507)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDMxMg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430130312", "body": "SCHEDULE_TOPIC is a special system topic? IMO, we should refactor this naming logic here.", "bodyText": "SCHEDULE_TOPIC is a special system topic? IMO, we should refactor this naming logic here.", "bodyHTML": "<p dir=\"auto\">SCHEDULE_TOPIC is a special system topic? IMO, we should refactor this naming logic here.</p>", "author": "vongosling", "createdAt": "2020-05-26T02:48:45Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java", "diffHunk": "@@ -124,6 +124,14 @@ public TopicConfigManager(BrokerController brokerController) {\n             topicConfig.setWriteQueueNums(1);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n+        {\n+            String topic = MixAll.SCHEDULE_TOPIC;\n+            TopicConfig topicConfig = new TopicConfig(topic);", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzOTk0MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430139940", "bodyText": "Yeah, it is a special system topic used in delay msg. When producer send a delay  msg, the msg will be send to SCHEDULE_TOPIC, then send to the real topic when the delay time comes.\nDo u meaning  add prefix to system topic , or remove system topics to a independent class?", "author": "coder-zzzz", "createdAt": "2020-05-26T03:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MjI5Mg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431062292", "bodyText": "system topic should be a List. Also, we could judge it from the naming, a prefix is a good way.", "author": "vongosling", "createdAt": "2020-05-27T11:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d964e87c2ad364292e9323f321703cd08a0946f4", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 85b9743f1..460fd0fc1 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -128,8 +130,8 @@ public class TopicConfigManager extends ConfigManager {\n             String topic = MixAll.SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n             this.systemTopicList.add(topic);\n-            topicConfig.setReadQueueNums(18);\n-            topicConfig.setWriteQueueNums(18);\n+            topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n+            topicConfig.setWriteQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n", "next_change": {"commit": "d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 460fd0fc1..995bab4c9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -127,7 +125,7 @@ public class TopicConfigManager extends ConfigManager {\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n-            String topic = MixAll.SCHEDULE_TOPIC;\n+            String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n             this.systemTopicList.add(topic);\n             topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n", "next_change": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 995bab4c9..931339b47 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -127,7 +125,7 @@ public class TopicConfigManager extends ConfigManager {\n         {\n             String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n-            this.systemTopicList.add(topic);\n+            TopicValidator.addSystemTopic(topic);\n             topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             topicConfig.setWriteQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 85b9743f1..86f606593 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -116,27 +114,26 @@ public class TopicConfigManager extends ConfigManager {\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n-            // MixAll.OFFSET_MOVED_EVENT\n-            String topic = MixAll.OFFSET_MOVED_EVENT;\n+            String topic = TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT;\n             TopicConfig topicConfig = new TopicConfig(topic);\n-            this.systemTopicList.add(topic);\n+            TopicValidator.addSystemTopic(topic);\n             topicConfig.setReadQueueNums(1);\n             topicConfig.setWriteQueueNums(1);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n-            String topic = MixAll.SCHEDULE_TOPIC;\n+            String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n-            this.systemTopicList.add(topic);\n-            topicConfig.setReadQueueNums(18);\n-            topicConfig.setWriteQueueNums(18);\n+            TopicValidator.addSystemTopic(topic);\n+            topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n+            topicConfig.setWriteQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n             if (this.brokerController.getBrokerConfig().isTraceTopicEnable()) {\n                 String topic = this.brokerController.getBrokerConfig().getMsgTraceTopicName();\n                 TopicConfig topicConfig = new TopicConfig(topic);\n-                this.systemTopicList.add(topic);\n+                TopicValidator.addSystemTopic(topic);\n                 topicConfig.setReadQueueNums(1);\n                 topicConfig.setWriteQueueNums(1);\n                 this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n", "next_change": null}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "e297221d5066bfeaeb0201f48f5beeb20b638b4b", "committedDate": "2021-02-01 17:32:02 +0800", "message": "[ISSUE #2622] Change variable name 'lockTreeMap' to 'treeMapLock' (#2624)"}, {"oid": "af8a9648c75d3dac5a7e7fcd0d8047d41456d96d", "committedDate": "2021-04-12 10:05:16 +0800", "message": "[ISSUE #2729] Replace with Math.min method call"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "fe72057abc21cbdc17b46548971a3101defd172c", "committedDate": "2021-11-04 14:07:11 +0800", "message": "fix(broker): can not clear topic unitSubFlag (#3429)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "18010a4d30e43a76e633a01fe0476f44de763c83", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3679] Support topic attributes (#3698)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "cf6ed4d5765d297283569e144c320382548cb692", "committedDate": "2022-09-29 16:56:21 +0800", "message": "bugfix: compatible rocketmq-mqtt save offset (#5208)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "aa7a442505ac012d1bc61b89bf10c41646a15005", "committedDate": "2022-12-14 19:48:00 +0800", "message": "[ISSUE #5695] Optimize broker startup (#5696)"}, {"oid": "20dc5c96eacaa831b81e9cb038a6e5e33f81ec19", "committedDate": "2023-03-13 11:16:35 +0800", "message": "[ISSUE #6316] Nameserver should choose a master with a larger epoch when there are two masters in controller mode (#6317)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDY1Nw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430130657", "body": "Should use static number while not a special number 18", "bodyText": "Should use static number while not a special number 18", "bodyHTML": "<p dir=\"auto\">Should use static number while not a special number 18</p>", "author": "vongosling", "createdAt": "2020-05-26T02:50:37Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java", "diffHunk": "@@ -124,6 +124,14 @@ public TopicConfigManager(BrokerController brokerController) {\n             topicConfig.setWriteQueueNums(1);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n+        {\n+            String topic = MixAll.SCHEDULE_TOPIC;\n+            TopicConfig topicConfig = new TopicConfig(topic);\n+            this.systemTopicList.add(topic);\n+            topicConfig.setReadQueueNums(18);\n+            topicConfig.setWriteQueueNums(18);", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MDA2NA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430140064", "bodyText": "I will do it.", "author": "coder-zzzz", "createdAt": "2020-05-26T03:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMDY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d964e87c2ad364292e9323f321703cd08a0946f4", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 85b9743f1..460fd0fc1 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -128,8 +130,8 @@ public class TopicConfigManager extends ConfigManager {\n             String topic = MixAll.SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n             this.systemTopicList.add(topic);\n-            topicConfig.setReadQueueNums(18);\n-            topicConfig.setWriteQueueNums(18);\n+            topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n+            topicConfig.setWriteQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n", "next_change": {"commit": "d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 460fd0fc1..995bab4c9 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -127,7 +125,7 @@ public class TopicConfigManager extends ConfigManager {\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n-            String topic = MixAll.SCHEDULE_TOPIC;\n+            String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n             this.systemTopicList.add(topic);\n             topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n", "next_change": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 995bab4c9..931339b47 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -127,7 +125,7 @@ public class TopicConfigManager extends ConfigManager {\n         {\n             String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n-            this.systemTopicList.add(topic);\n+            TopicValidator.addSystemTopic(topic);\n             topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             topicConfig.setWriteQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\nindex 85b9743f1..86f606593 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/topic/TopicConfigManager.java\n", "chunk": "@@ -116,27 +114,26 @@ public class TopicConfigManager extends ConfigManager {\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n-            // MixAll.OFFSET_MOVED_EVENT\n-            String topic = MixAll.OFFSET_MOVED_EVENT;\n+            String topic = TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT;\n             TopicConfig topicConfig = new TopicConfig(topic);\n-            this.systemTopicList.add(topic);\n+            TopicValidator.addSystemTopic(topic);\n             topicConfig.setReadQueueNums(1);\n             topicConfig.setWriteQueueNums(1);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n-            String topic = MixAll.SCHEDULE_TOPIC;\n+            String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n             TopicConfig topicConfig = new TopicConfig(topic);\n-            this.systemTopicList.add(topic);\n-            topicConfig.setReadQueueNums(18);\n-            topicConfig.setWriteQueueNums(18);\n+            TopicValidator.addSystemTopic(topic);\n+            topicConfig.setReadQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n+            topicConfig.setWriteQueueNums(SCHEDULE_TOPIC_QUEUE_NUM);\n             this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n         }\n         {\n             if (this.brokerController.getBrokerConfig().isTraceTopicEnable()) {\n                 String topic = this.brokerController.getBrokerConfig().getMsgTraceTopicName();\n                 TopicConfig topicConfig = new TopicConfig(topic);\n-                this.systemTopicList.add(topic);\n+                TopicValidator.addSystemTopic(topic);\n                 topicConfig.setReadQueueNums(1);\n                 topicConfig.setWriteQueueNums(1);\n                 this.topicConfigTable.put(topicConfig.getTopicName(), topicConfig);\n", "next_change": null}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "e297221d5066bfeaeb0201f48f5beeb20b638b4b", "committedDate": "2021-02-01 17:32:02 +0800", "message": "[ISSUE #2622] Change variable name 'lockTreeMap' to 'treeMapLock' (#2624)"}, {"oid": "af8a9648c75d3dac5a7e7fcd0d8047d41456d96d", "committedDate": "2021-04-12 10:05:16 +0800", "message": "[ISSUE #2729] Replace with Math.min method call"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "fe72057abc21cbdc17b46548971a3101defd172c", "committedDate": "2021-11-04 14:07:11 +0800", "message": "fix(broker): can not clear topic unitSubFlag (#3429)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "18010a4d30e43a76e633a01fe0476f44de763c83", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3679] Support topic attributes (#3698)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "cf6ed4d5765d297283569e144c320382548cb692", "committedDate": "2022-09-29 16:56:21 +0800", "message": "bugfix: compatible rocketmq-mqtt save offset (#5208)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "aa7a442505ac012d1bc61b89bf10c41646a15005", "committedDate": "2022-12-14 19:48:00 +0800", "message": "[ISSUE #5695] Optimize broker startup (#5696)"}, {"oid": "20dc5c96eacaa831b81e9cb038a6e5e33f81ec19", "committedDate": "2023-03-13 11:16:35 +0800", "message": "[ISSUE #6316] Nameserver should choose a master with a larger epoch when there are two masters in controller mode (#6317)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMTk3MA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430131970", "body": "MixAll class should not inflate continue. could you help to move the system topic related logic to a new class, such as TopicValidator or TopicChecker?", "bodyText": "MixAll class should not inflate continue. could you help to move the system topic related logic to a new class, such as TopicValidator or TopicChecker?", "bodyHTML": "<p dir=\"auto\">MixAll class should not inflate continue. could you help to move the system topic related logic to a new class, such as TopicValidator or TopicChecker?</p>", "author": "vongosling", "createdAt": "2020-05-26T02:56:47Z", "path": "common/src/main/java/org/apache/rocketmq/common/MixAll.java", "diffHunk": "@@ -56,6 +56,7 @@\n     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n     //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n     public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n+    public static final String SCHEDULE_TOPIC = \"SCHEDULE_TOPIC_XXXX\";", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0MDU5Mw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430140593", "bodyText": "It's a good way to make code cleaner.I'will try my best to do it", "author": "coder-zzzz", "createdAt": "2020-05-26T03:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\nindex 6952c8b52..e38e4d68d 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n", "chunk": "@@ -56,8 +56,6 @@ public class MixAll {\n     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n     //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n     public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n-    public static final String SCHEDULE_TOPIC = \"SCHEDULE_TOPIC_XXXX\";\n-    public static final String BENCHMARK_TOPIC = \"BenchmarkTest\";\n     public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n     public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";\n     public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";\n", "next_change": {"commit": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\nindex e38e4d68d..9d95ecb5e 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n", "chunk": "@@ -55,7 +55,6 @@ public class MixAll {\n     public static final String WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\");\n     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n     //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n-    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n     public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n     public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";\n     public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\nindex 6952c8b52..9d95ecb5e 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n", "chunk": "@@ -55,9 +55,6 @@ public class MixAll {\n     public static final String WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\");\n     //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n     //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n-    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n-    public static final String SCHEDULE_TOPIC = \"SCHEDULE_TOPIC_XXXX\";\n-    public static final String BENCHMARK_TOPIC = \"BenchmarkTest\";\n     public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n     public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";\n     public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";\n", "next_change": {"commit": "564ee290c7001c899e0eaeef8b6e8858c9b03c53", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\nindex 9d95ecb5e..ec1e1f024 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n", "chunk": "@@ -58,6 +58,7 @@ public class MixAll {\n     public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n     public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";\n     public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";\n+    public static final String SCHEDULE_CONSUMER_GROUP = \"SCHEDULE_CONSUMER\";\n     public static final String FILTERSRV_CONSUMER_GROUP = \"FILTERSRV_CONSUMER\";\n     public static final String MONITOR_CONSUMER_GROUP = \"__MONITOR_CONSUMER\";\n     public static final String CLIENT_INNER_PRODUCER_GROUP = \"CLIENT_INNER_PRODUCER\";\n", "next_change": {"commit": "aa330615f74203aaf72fc5f1e3a59610d26f09f8", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/MixAll.java b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\nindex ec1e1f024..d3a688888 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/MixAll.java\n", "chunk": "@@ -32,29 +38,29 @@ import java.net.NetworkInterface;\n import java.net.SocketException;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n import java.util.Properties;\n import java.util.concurrent.atomic.AtomicLong;\n-import org.apache.rocketmq.common.annotation.ImportantField;\n-import org.apache.rocketmq.common.constant.LoggerName;\n-import org.apache.rocketmq.common.help.FAQUrl;\n-import org.apache.rocketmq.logging.InternalLogger;\n-import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import java.util.function.Predicate;\n \n public class MixAll {\n     public static final String ROCKETMQ_HOME_ENV = \"ROCKETMQ_HOME\";\n     public static final String ROCKETMQ_HOME_PROPERTY = \"rocketmq.home.dir\";\n     public static final String NAMESRV_ADDR_ENV = \"NAMESRV_ADDR\";\n     public static final String NAMESRV_ADDR_PROPERTY = \"rocketmq.namesrv.addr\";\n+    public static final String MESSAGE_COMPRESS_TYPE = \"rocketmq.message.compressType\";\n     public static final String MESSAGE_COMPRESS_LEVEL = \"rocketmq.message.compressLevel\";\n     public static final String DEFAULT_NAMESRV_ADDR_LOOKUP = \"jmenv.tbsite.net\";\n     public static final String WS_DOMAIN_NAME = System.getProperty(\"rocketmq.namesrv.domain\", DEFAULT_NAMESRV_ADDR_LOOKUP);\n     public static final String WS_DOMAIN_SUBGROUP = System.getProperty(\"rocketmq.namesrv.domain.subgroup\", \"nsaddr\");\n-    //http://jmenv.tbsite.net:8080/rocketmq/nsaddr\n-    //public static final String WS_ADDR = \"http://\" + WS_DOMAIN_NAME + \":8080/rocketmq/\" + WS_DOMAIN_SUBGROUP;\n     public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER\";\n     public static final String DEFAULT_CONSUMER_GROUP = \"DEFAULT_CONSUMER\";\n     public static final String TOOLS_CONSUMER_GROUP = \"TOOLS_CONSUMER\";\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "b4c099cbed0dba1ce8bd42133d49703686132a8c", "committedDate": "2021-07-03 11:38:14 +0800", "message": "[RIP-21] submodule common & client & remoting"}, {"oid": "564ee290c7001c899e0eaeef8b6e8858c9b03c53", "committedDate": "2021-09-12 10:17:38 +0800", "message": "[ISSUE] Add get stats and single queue stats for schedule topic"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "14b63ee5503671cdd394694f55509aba3ce8241a", "committedDate": "2022-01-13 19:15:42 +0800", "message": "[RIP-28] light message queue(LMQ)  (#3694)"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "467b382777e1da8f9ecd54a2ee26aac474337708", "committedDate": "2022-03-14 14:49:53 +0800", "message": "feature(namesrv&common):[RIP-29]Optimize RocketMQ NameServer (#3974)"}, {"oid": "d100d3c9a53cd36f29f7f6b1fe1c7124d7cdfab5", "committedDate": "2022-04-17 23:02:07 +0800", "message": "[ISSUE #4167] Replace Charset.forName(\"UTF-8\") with StandardCharsets.UTF_8 (#4024)"}, {"oid": "5584a78977501a35dcf2e4ed6e0b53f600dafa5b", "committedDate": "2022-04-28 10:19:52 +0800", "message": "[ISSUE #4203] Support zstd/lz4 compression to improve send/receive performance"}, {"oid": "0c1e3df722f61cbf08c7596a57cfd3a94c819c56", "committedDate": "2022-05-24 10:04:38 +0800", "message": "Treat multiple file paths into one"}, {"oid": "040f2ffddcdd9fa7479e2a8d1642962a79c26b51", "committedDate": "2022-05-24 11:15:58 +0800", "message": "checkStyle check"}, {"oid": "c90f5f66b6f190863143822a9d91cacc45d5de8b", "committedDate": "2022-05-24 20:13:22 +0800", "message": "use java.nio.file.Path to change file path"}, {"oid": "6f66b5d2a9e169539e439e7355716c3c71df2fbd", "committedDate": "2022-06-01 10:58:55 +0800", "message": "optimize for printObjectProperties (#4392)"}, {"oid": "dd9c74fc0d3c1e6fad1aea55e70605ab0fa8a3de", "committedDate": "2022-06-06 14:02:14 +0800", "message": "Merge pull request #4366 from fulln/develop"}, {"oid": "3fbcad5f91fe08c51283d1b065c9b352821e2880", "committedDate": "2022-06-16 11:58:11 +0800", "message": "Remove allAckInSyncStateSet in GroupCommitRequest and use ackNums = -1 instead (#4467)"}, {"oid": "34eb2ce7d17caefea63132a4e30bc425594abddd", "committedDate": "2022-06-20 11:50:07 +0800", "message": "[ISSUE #3906] Mark stream-related request by RequestType"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "a55a6215946a86253d1faf59d0d36ac78e267015", "committedDate": "2022-07-08 15:35:41 +0800", "message": "Merge branch 'develop-merge-5.0.0' into 5.0.0-beta-dledger-controller"}, {"oid": "e8fd55bb0158df738d63854887fdc6b9e693a694", "committedDate": "2022-07-31 16:40:29 +0800", "message": "[ISSUE #4257] Verify that the value of the permission is valid when updating the topic/broker config (#4498)"}, {"oid": "0375027b70c54bd33afd1680dee68ebcb2d1001f", "committedDate": "2022-08-11 17:31:45 +0800", "message": "[ISSUE #4382]Namesrv nearby route (#4383)"}, {"oid": "ec8a93d2f70e75dd15d4e4c2ee17fed87a030055", "committedDate": "2022-08-23 13:11:53 +0800", "message": "Support build with Bazel (#4865)"}, {"oid": "bbbb96e129ce1dd4f2595f00fe5ff918c7b666c1", "committedDate": "2022-08-23 14:29:46 +0800", "message": "Revert \"Support build with Bazel (#4865)\""}, {"oid": "3da7ea9c1bcee83ec7eb84b58eae718f121bbdaa", "committedDate": "2022-08-24 20:53:30 +0800", "message": "[Infra Improvement] Build And Run Unit Tests in Parallel (#4878)"}, {"oid": "f23fdbe016ab4b60c2dd9786016c5f4756b3db54", "committedDate": "2022-08-30 17:45:56 +0800", "message": "Replace findbugs by spotbugs (#4931)"}, {"oid": "7361de78543304c608a2cfb142e4949bda8a309c", "committedDate": "2022-09-05 13:01:16 +0800", "message": "Sort the property when persist config. (#4970)"}, {"oid": "aa330615f74203aaf72fc5f1e3a59610d26f09f8", "committedDate": "2022-09-22 10:07:28 +0800", "message": "[ISSUE #4634] fix code style in namesrv module (#5159)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "61fa3b0c232ea21910de0979f0a0c0b8024efda7", "committedDate": "2022-11-03 11:15:55 +0800", "message": "[ISSUE #5344] Fix Windows and Mac CI pipelines (#5345)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "9f8e85bb7640a3264fb6d7f43ed3834546f73fcf", "committedDate": "2022-12-29 09:42:45 +0800", "message": "[ISSUE #5754] [RIP-57] Add asynchronous interfaces to MessageStore (#5755)"}, {"oid": "a961a9b37b0e9e4c6e30d7cc6ab1a9c796634e6f", "committedDate": "2023-01-20 13:11:30 +0800", "message": "[ISSUE #5905] fix config file disappear after vm crash"}, {"oid": "0c26369a0d187ebaf2887ce1218f332f413bd513", "committedDate": "2023-02-02 11:15:29 +0800", "message": "refactor: simplify getPID (#5962)"}, {"oid": "c494a43c522594d9ebf9b6956a537248ddffd9e1", "committedDate": "2023-03-14 09:40:15 +0800", "message": "refactor(controller): optimize some code suggested by reviewer"}, {"oid": "bee5077bcb77411f103aafb2220184f59db2c95e", "committedDate": "2023-06-05 17:09:31 +0800", "message": "[ISSUE #6336] [RIP-62] Cold Read Control  (#6507)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzMjI1OQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r430132259", "body": "I don't like to see many MixAll scatter in so many places:-)", "bodyText": "I don't like to see many MixAll scatter in so many places:-)", "bodyHTML": "<p dir=\"auto\">I don't like to see many MixAll scatter in so many places:-)</p>", "author": "vongosling", "createdAt": "2020-05-26T02:58:11Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -383,7 +384,7 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n                     msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                 }\n \n-                topic = ScheduleMessageService.SCHEDULE_TOPIC;\n+                topic = MixAll.SCHEDULE_TOPIC;", "originalCommit": "3c86a3fcc12fd37d3fa44f65601858aed7224863", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 810b30b47..3361b63f8 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -384,7 +384,7 @@ public class DLedgerCommitLog extends CommitLog {\n                     msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                 }\n \n-                topic = MixAll.SCHEDULE_TOPIC;\n+                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n                 queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n \n                 // Backup real topic, queueId\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 810b30b47..3361b63f8 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -384,7 +384,7 @@ public class DLedgerCommitLog extends CommitLog {\n                     msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                 }\n \n-                topic = MixAll.SCHEDULE_TOPIC;\n+                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n                 queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n \n                 // Backup real topic, queueId\n", "next_change": {"commit": "845c5fd61886aff99185a709ebf69d833a38b9c6", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 3361b63f8..24e0f69c4 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -384,8 +382,9 @@ public class DLedgerCommitLog extends CommitLog {\n                     msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                 }\n \n-                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-                queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n+\n+                String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+                int queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n \n                 // Backup real topic, queueId\n                 MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());\n", "next_change": {"commit": "5c350af174c864992d3611e8432075762c2d3bd4", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 24e0f69c4..42064a35a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -373,29 +368,6 @@ public class DLedgerCommitLog extends CommitLog {\n         // on the client)\n         msg.setBodyCRC(UtilAll.crc32(msg.getBody()));\n \n-        //should be consistent with the old version\n-        if (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE\n-            || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) {\n-            // Delay Delivery\n-            if (msg.getDelayTimeLevel() > 0) {\n-                if (msg.getDelayTimeLevel() > this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) {\n-                    msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n-                }\n-\n-\n-                String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-                int queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n-\n-                // Backup real topic, queueId\n-                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());\n-                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));\n-                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n-\n-                msg.setTopic(topic);\n-                msg.setQueueId(queueId);\n-            }\n-        }\n-\n         InetSocketAddress bornSocketAddress = (InetSocketAddress) msg.getBornHost();\n         if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n             msg.setBornHostV6Flag();\n", "next_change": {"commit": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 42064a35a..01266ede7 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -368,6 +386,29 @@ public class DLedgerCommitLog extends CommitLog {\n         // on the client)\n         msg.setBodyCRC(UtilAll.crc32(msg.getBody()));\n \n+        //should be consistent with the old version\n+        if (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE\n+            || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) {\n+            // Delay Delivery\n+            if (msg.getDelayTimeLevel() > 0) {\n+                if (msg.getDelayTimeLevel() > this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) {\n+                    msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n+                }\n+\n+\n+                String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+                int queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n+\n+                // Backup real topic, queueId\n+                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());\n+                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));\n+                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n+\n+                msg.setTopic(topic);\n+                msg.setQueueId(queueId);\n+            }\n+        }\n+\n         InetSocketAddress bornSocketAddress = (InetSocketAddress) msg.getBornHost();\n         if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n             msg.setBornHostV6Flag();\n", "next_change": {"commit": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 01266ede7..ac7d31fa3 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -386,29 +377,6 @@ public class DLedgerCommitLog extends CommitLog {\n         // on the client)\n         msg.setBodyCRC(UtilAll.crc32(msg.getBody()));\n \n-        //should be consistent with the old version\n-        if (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE\n-            || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) {\n-            // Delay Delivery\n-            if (msg.getDelayTimeLevel() > 0) {\n-                if (msg.getDelayTimeLevel() > this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) {\n-                    msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n-                }\n-\n-\n-                String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-                int queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n-\n-                // Backup real topic, queueId\n-                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());\n-                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));\n-                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n-\n-                msg.setTopic(topic);\n-                msg.setQueueId(queueId);\n-            }\n-        }\n-\n         InetSocketAddress bornSocketAddress = (InetSocketAddress) msg.getBornHost();\n         if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n             msg.setBornHostV6Flag();\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "f5b79588d58a1cc2842d364e06a469c0b67cdb39", "committedDate": "2020-07-31 17:22:22 +0800", "message": "[ISSUE #2217] Upgrade dledger version (#2218)"}, {"oid": "845c5fd61886aff99185a709ebf69d833a38b9c6", "committedDate": "2020-10-23 11:55:31 +0800", "message": "[ISSUE #1846] Dledger model change into pipeline manner to improve performance (#1847)"}, {"oid": "4730987c9cc046c6db980a48aaed9eacc13c630d", "committedDate": "2020-12-08 16:58:59 +0800", "message": "[ISSUE #690] Support batch msgs in dledger mode (#2406)"}, {"oid": "432236e983ede0d40b13b0dd0128932afd09df01", "committedDate": "2021-05-20 11:01:39 +0800", "message": "Revert 2912 & 2866  and merge to develop branch(#2915)"}, {"oid": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "committedDate": "2021-06-21 20:35:32 +0800", "message": "[ISSUE 3019] Fixed bug with batch-sent message statistics"}, {"oid": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "committedDate": "2021-07-05 16:03:45 +0800", "message": "[ISSUE #3118] Fix type conversion exception"}, {"oid": "3183122c01cc2d0dc005634d028ccbcb62495bf6", "committedDate": "2021-07-06 21:47:12 +0800", "message": "Eliminate array copy (#2886)"}, {"oid": "032577255ecd543908446aa272668c9f882bcce5", "committedDate": "2021-07-28 14:49:45 +0800", "message": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode.  (#2889)"}, {"oid": "d7a830cf8f1b5713af7ff643c4e9f847d5331c6c", "committedDate": "2021-09-06 20:16:11 +0800", "message": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)"}, {"oid": "a779d69862c69db0d84fc27b35cfe5d08dc96377", "committedDate": "2021-12-07 12:35:43 +0800", "message": "Unnecessary boxing of primitives (#3596)"}, {"oid": "f395fa68373c7552ad18fb522da69197bf151669", "committedDate": "2021-12-08 17:14:26 +0800", "message": "[ISSUE #3601] Fix dledger put batch msg stats bug (#3600)"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "5c350af174c864992d3611e8432075762c2d3bd4", "committedDate": "2022-03-14 14:51:30 +0800", "message": "feature(store):[RIP-34]Support quorum write and adaptive degradation in master slave architecture (#3979)"}, {"oid": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "committedDate": "2022-04-22 14:19:02 +0800", "message": "[ISSUE #3914] Support multi dirs storage in DLedger"}, {"oid": "df3f8de4c03a282de052b130ae368ab00faca039", "committedDate": "2022-04-29 10:12:51 +0800", "message": "[ISSUE #4211] Fix diskMaxUsedSpaceRatio does not take effect in dLedger"}, {"oid": "5d2bf3573c683eb08f028b3a6496d1cbfe1af33b", "committedDate": "2022-05-09 09:42:36 +0800", "message": "[ISSUE #4254] use function computeIfAbsent replace if  (#4255)"}, {"oid": "0bc3b991e17ea6473923b4c07ff594181a1ae6b9", "committedDate": "2022-06-01 13:51:07 +0800", "message": "[ISSUE #4226] Message length exceeds the maximum length when sendback (#4338)"}, {"oid": "6273782d663483e5c278f9ef2de15ca137fe7949", "committedDate": "2022-06-16 13:42:48 +0800", "message": "[ISSUE apache#4058] DLedgerCommitLog support LMQ (#4059)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "e38da5590f0677e7b3d092c295218bcafa19149b", "committedDate": "2022-10-24 16:21:39 +0800", "message": "[ISSUE #3799]main compaction process (#5351)"}, {"oid": "49fc6eded9cc1b37eb4983023d6f89ce1f00347f", "committedDate": "2022-12-07 10:26:50 +0800", "message": "[ISSUE #5568] Support long length group and topic for pop mode consumption (#5611)"}, {"oid": "cc8823cf62a7137784bbe01562cd68118f3eac89", "committedDate": "2023-03-06 09:20:41 +0800", "message": "[ISSUE #5883] DLedger commit log should override the getData (#5879)"}, {"oid": "e3b8178871158e1a981915ac40c11e3a5e451922", "committedDate": "2023-04-26 11:24:47 +0800", "message": "[ISSUE #6570] Fix the issue that expectLogicOffset is greater than currentLogicOffset in consumeQueue build when the message is illegal  (#6641)"}]}, {"oid": "d964e87c2ad364292e9323f321703cd08a0946f4", "url": "https://github.com/apache/rocketmq/commit/d964e87c2ad364292e9323f321703cd08a0946f4", "message": "fix magic number 18", "committedDate": "2020-05-26T10:14:46Z", "type": "commit"}, {"oid": "d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "url": "https://github.com/apache/rocketmq/commit/d37b692ccaa941c1f95f5f3825ddf7e3a718198b", "message": " move system topic to TopicValidator except TBW102", "committedDate": "2020-05-27T06:05:14Z", "type": "commit"}, {"oid": "2378dff3545520f97bbda2501f07926e1c1d6ea6", "url": "https://github.com/apache/rocketmq/commit/2378dff3545520f97bbda2501f07926e1c1d6ea6", "message": " move TBW102 and isSystemTopic to TopicValidator", "committedDate": "2020-05-27T08:45:57Z", "type": "commit"}, {"oid": "15048661a4cb09ded4dedd96e5a92212b9fd9da5", "url": "https://github.com/apache/rocketmq/commit/15048661a4cb09ded4dedd96e5a92212b9fd9da5", "message": "add test code", "committedDate": "2020-05-27T10:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4ODU1MQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431088551", "body": "Is this piece of code necessary? The following code will check system topic again.", "bodyText": "Is this piece of code necessary? The following code will check system topic again.", "bodyHTML": "<p dir=\"auto\">Is this piece of code necessary? The following code will check system topic again.</p>", "author": "RongtongJin", "createdAt": "2020-05-27T12:45:36Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java", "diffHunk": "@@ -173,6 +173,12 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,\n             return response;\n         }\n \n+        if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(requestHeader.getTopic())) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden\");\n+            return response;\n+        }\n+", "originalCommit": "15048661a4cb09ded4dedd96e5a92212b9fd9da5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex 785d93aae..cac8aa665 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -173,13 +173,10 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n             return response;\n         }\n \n-        if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(requestHeader.getTopic())) {\n-            response.setCode(ResponseCode.NO_PERMISSION);\n-            response.setRemark(\"sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden\");\n+        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-\n-        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n+        if (!TopicValidator.validateBlacklistTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n \n", "next_change": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex cac8aa665..ced7c2014 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -176,7 +176,7 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n         if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-        if (!TopicValidator.validateBlacklistTopic(requestHeader.getTopic(), response)) {\n+        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex 785d93aae..ced7c2014 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -173,13 +173,10 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n             return response;\n         }\n \n-        if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(requestHeader.getTopic())) {\n-            response.setCode(ResponseCode.NO_PERMISSION);\n-            response.setRemark(\"sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden\");\n+        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-\n-        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n+        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n \n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex ced7c2014..84d9ab785 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -173,10 +458,15 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n             return response;\n         }\n \n-        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n+        TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(requestHeader.getTopic());\n+        if (!result.isValid()) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic(), response)) {\n+        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic())) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"Sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden.\");\n             return response;\n         }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "b13a4c862fac5889318079e5fc81c3835d128676", "committedDate": "2021-07-07 22:28:29 +0800", "message": "[ISSUE 2883] [Part G] Optimise parse performance for SendMessageRequestHeaderV2"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "1b757b402262568cb2d8ac7d4073a2d8f7e7236c", "committedDate": "2021-07-30 15:00:48 +0800", "message": "[ISSUE #3196] Check if \"requestHeader\" is null before \"requestHeader.getTopic()\""}, {"oid": "a137e48a67f910da11d8d0478c523521c425e640", "committedDate": "2021-07-30 15:50:07 +0800", "message": "[ISSUE 2883] [Part G] Optimise parse performance for SendMessageRequestHeaderV2, unit test"}, {"oid": "3e014241383917b58e1e7dbfca6d7db3bbc09227", "committedDate": "2021-07-31 00:31:22 +0800", "message": "Merge pull request #3134 from areyouok/dev_speed_G"}, {"oid": "73db2970ff9fc5bfa018af3715b9cf641346cbe3", "committedDate": "2021-08-01 18:22:54 +0800", "message": "[#Issue3205]Fix the issue of code style in client and broker modules."}, {"oid": "bf343a31a94be1d2eb420a22c647d947f26c8e5d", "committedDate": "2021-09-13 13:59:37 +0800", "message": "[ISSUE #3225]change Random to ThreadLocalRandom in broker"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "dd09ba1ec869acb1538d2c73f98d44066bbbb00f", "committedDate": "2021-09-24 17:06:48 +0800", "message": "merger from develop branch and fix compile error"}, {"oid": "6b8a2b2fce91d6486b477adb2cb762a3e119c9f4", "committedDate": "2021-10-26 13:44:23 +0800", "message": "trivial cleanups (#3403)"}, {"oid": "f1b0318d1a6c1e8417a5a779f4219ffddd418001", "committedDate": "2021-11-01 12:46:26 +0800", "message": "Merge remote-tracking branch 'apache/develop' into 5.0.0-alpha"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "c121565c3eb59d536edc54512624e420136d30e5", "committedDate": "2022-03-28 10:15:43 +0800", "message": "[ISSUE #4040] Unnecessary  toString methods deleted (#4041)"}, {"oid": "3cbb3b8ea5dc602dc4bbfda235a2def46e346eb7", "committedDate": "2022-04-27 09:26:10 +0800", "message": "[ISSUE 3585] [Part B] Improve encode/decode performance (#3588)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "689c1f39299fa6bae8f4ee422c69f91121639124", "committedDate": "2022-07-13 11:30:52 +0800", "message": "[ISSUE #3949] Refector send process"}, {"oid": "9fbaced20f5aac042362aa4088accd677d86844c", "committedDate": "2022-07-14 14:15:30 +0800", "message": "Merge branch 'develop' into feature/grpc-develop-v2"}, {"oid": "ec8a93d2f70e75dd15d4e4c2ee17fed87a030055", "committedDate": "2022-08-23 13:11:53 +0800", "message": "Support build with Bazel (#4865)"}, {"oid": "bbbb96e129ce1dd4f2595f00fe5ff918c7b666c1", "committedDate": "2022-08-23 14:29:46 +0800", "message": "Revert \"Support build with Bazel (#4865)\""}, {"oid": "3da7ea9c1bcee83ec7eb84b58eae718f121bbdaa", "committedDate": "2022-08-24 20:53:30 +0800", "message": "[Infra Improvement] Build And Run Unit Tests in Parallel (#4878)"}, {"oid": "0ae1bd2af69f475aba03ab7a27df0bd7cda15359", "committedDate": "2022-11-09 19:44:41 +0800", "message": "[ISSUE #5449] [RIP-46] implement remoting stats metrics (#5487)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "f17112963cad4d7b489d136c3c9f6dae3567c0f5", "committedDate": "2022-11-24 09:54:54 +0800", "message": "Optimize the build of sendMessageContext and avoid unnecessary repeated request parsing (#5578)"}, {"oid": "6f49a1034d0698bea84ab0f358c5d184ab64efe8", "committedDate": "2022-11-25 20:35:20 +0800", "message": "Enable AbortProcessException to interrupt RPCHook (#5594)"}, {"oid": "81e3648e3fcb1995897db3960a4561d6047b696c", "committedDate": "2022-12-16 16:48:56 +0800", "message": "Introduce retry topic and lag estimation for lag calculation. (#5702)"}, {"oid": "7694a69d599c7b406a26fc35560e3ad01a6755a7", "committedDate": "2023-01-11 19:49:01 +0800", "message": "[ISSUE #5869] Remove unnecessary verification logic in consumerSendMsgBack method (#5868)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNzc5Nw==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431127797", "body": "[Important] There is a serious problem. msgCheck call this method and check all system topics, this will cause the client to fail to send messages to **all system topics**, but it is necessary for the client to send messages to certain system topics, such as BenchmarkTest, OFFSET_MOVED_EVENT.  IMO, We need a blacklist to prohibit sending to certain system topics, but not all system topics.", "bodyText": "[Important] There is a serious problem. msgCheck call this method and check all system topics, this will cause the client to fail to send messages to all system topics, but it is necessary for the client to send messages to certain system topics, such as BenchmarkTest, OFFSET_MOVED_EVENT.  IMO, We need a blacklist to prohibit sending to certain system topics, but not all system topics.", "bodyHTML": "<p dir=\"auto\">[Important] There is a serious problem. msgCheck call this method and check all system topics, this will cause the client to fail to send messages to <strong>all system topics</strong>, but it is necessary for the client to send messages to certain system topics, such as BenchmarkTest, OFFSET_MOVED_EVENT.  IMO, We need a blacklist to prohibit sending to certain system topics, but not all system topics.</p>", "author": "RongtongJin", "createdAt": "2020-05-27T13:24:38Z", "path": "common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java", "diffHunk": "@@ -57,13 +85,24 @@ public static boolean validateTopic(String topic, RemotingCommand response) {\n             return false;\n         }\n \n-        //whether the same with system reserved keyword\n-        if (topic.equals(MixAll.AUTO_CREATE_TOPIC_KEY_TOPIC)) {\n+        if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n-            response.setRemark(\"The specified topic is conflict with AUTO_CREATE_TOPIC_KEY_TOPIC.\");\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return false;\n         }", "originalCommit": "15048661a4cb09ded4dedd96e5a92212b9fd9da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODMyOQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r431148329", "bodyText": "This is really a deadly problem. Schedule Topic is the only one should prevent send by user,I\u2019ll check the method TopicValidator#validateTopic everywhere invoked.", "author": "coder-zzzz", "createdAt": "2020-05-27T13:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNzc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "82825b0824b4fbeb4d67d62ca5daf66326430b55", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex da7a0c5b7..480d8ed9a 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -85,12 +92,15 @@ public class TopicValidator {\n             return false;\n         }\n \n+        return true;\n+    }\n+\n+    public static boolean validateSystemTopic(String topic, RemotingCommand response) {\n         if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n             return false;\n         }\n-\n         return true;\n     }\n \n", "next_change": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex 480d8ed9a..7b0a8394a 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -95,30 +95,30 @@ public class TopicValidator {\n         return true;\n     }\n \n-    public static boolean validateSystemTopic(String topic, RemotingCommand response) {\n+    public static boolean isSystemTopic(String topic, RemotingCommand response) {\n         if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return false;\n+            return true;\n         }\n-        return true;\n+        return false;\n     }\n \n     public static boolean isSystemTopic(String topic) {\n         return SYSTEM_TOPIC_SET.contains(topic) || topic.startsWith(SYSTEM_TOPIC_PREFIX);\n     }\n \n-    public static boolean isBlacklistTopic(String topic) {\n-        return CLIENT_BLACKLIST_TOPIC_SET.contains(topic);\n+    public static boolean isNotAllowedSendTopic(String topic) {\n+        return NOT_ALLOWED_SEND_TOPIC_SET.contains(topic);\n     }\n \n-    public static boolean validateBlacklistTopic(String topic, RemotingCommand response) {\n-        if (isBlacklistTopic(topic)) {\n+    public static boolean isNotAllowedSendTopic(String topic, RemotingCommand response) {\n+        if (isNotAllowedSendTopic(topic)) {\n             response.setCode(ResponseCode.NO_PERMISSION);\n             response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-            return false;\n+            return true;\n         }\n-        return true;\n+        return false;\n     }\n \n     public static void addSystemTopic(String systemTopic) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex da7a0c5b7..7b0a8394a 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -85,19 +92,35 @@ public class TopicValidator {\n             return false;\n         }\n \n+        return true;\n+    }\n+\n+    public static boolean isSystemTopic(String topic, RemotingCommand response) {\n         if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return false;\n+            return true;\n         }\n-\n-        return true;\n+        return false;\n     }\n \n     public static boolean isSystemTopic(String topic) {\n         return SYSTEM_TOPIC_SET.contains(topic) || topic.startsWith(SYSTEM_TOPIC_PREFIX);\n     }\n \n+    public static boolean isNotAllowedSendTopic(String topic) {\n+        return NOT_ALLOWED_SEND_TOPIC_SET.contains(topic);\n+    }\n+\n+    public static boolean isNotAllowedSendTopic(String topic, RemotingCommand response) {\n+        if (isNotAllowedSendTopic(topic)) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     public static void addSystemTopic(String systemTopic) {\n         SYSTEM_TOPIC_SET.add(systemTopic);\n     }\n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex 7b0a8394a..61265c05d 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -112,15 +142,6 @@ public class TopicValidator {\n         return NOT_ALLOWED_SEND_TOPIC_SET.contains(topic);\n     }\n \n-    public static boolean isNotAllowedSendTopic(String topic, RemotingCommand response) {\n-        if (isNotAllowedSendTopic(topic)) {\n-            response.setCode(ResponseCode.NO_PERMISSION);\n-            response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     public static void addSystemTopic(String systemTopic) {\n         SYSTEM_TOPIC_SET.add(systemTopic);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "50d45f23a186051d177990fd00a89d152c5c4dae", "committedDate": "2021-12-09 10:50:52 +0800", "message": "[ISSUE 3585] [Part F] eliminate regex match in topic/group name check (#3594)"}, {"oid": "5ae4a106bdd83848ae12e870e8f0f587bd107500", "committedDate": "2022-03-03 11:17:39 +0800", "message": "[#3903] Add topic validation, forbid sending message to system topic  (#3904)"}, {"oid": "467b382777e1da8f9ecd54a2ee26aac474337708", "committedDate": "2022-03-14 14:49:53 +0800", "message": "feature(namesrv&common):[RIP-29]Optimize RocketMQ NameServer (#3974)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}]}, {"oid": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "url": "https://github.com/apache/rocketmq/commit/1bb880cfccb82c50f840cafe060efb4e2c6474da", "message": "validateTopic --> validatorSystemTopic, validatorBlacklistTopic", "committedDate": "2020-05-29T07:05:05Z", "type": "commit"}, {"oid": "82825b0824b4fbeb4d67d62ca5daf66326430b55", "url": "https://github.com/apache/rocketmq/commit/82825b0824b4fbeb4d67d62ca5daf66326430b55", "message": "validateTopic --> validatorSystemTopic, validatorBlacklistTopic", "committedDate": "2020-05-29T07:05:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxMzQ1Mg==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432413452", "body": "what is a blacklist? It's just not allowed to send a message to this topic. It would be better to name it notAllowedSending.", "bodyText": "what is a blacklist? It's just not allowed to send a message to this topic. It would be better to name it notAllowedSending.", "bodyHTML": "<p dir=\"auto\">what is a blacklist? It's just not allowed to send a message to this topic. It would be better to name it notAllowedSending.</p>", "author": "vongosling", "createdAt": "2020-05-29T11:07:10Z", "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java", "diffHunk": "@@ -173,13 +173,10 @@ protected RemotingCommand msgCheck(final ChannelHandlerContext ctx,\n             return response;\n         }\n \n-        if (TopicValidator.RMQ_SYS_SCHEDULE_TOPIC.equals(requestHeader.getTopic())) {\n-            response.setCode(ResponseCode.NO_PERMISSION);\n-            response.setRemark(\"sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden\");\n+        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-\n-        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n+        if (!TopicValidator.validateBlacklistTopic(requestHeader.getTopic(), response)) {", "originalCommit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwODYzNA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r433008634", "bodyText": "ok\uff0cI'll change it", "author": "coder-zzzz", "createdAt": "2020-06-01T01:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxMzQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex cac8aa665..ced7c2014 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -176,7 +176,7 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n         if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-        if (!TopicValidator.validateBlacklistTopic(requestHeader.getTopic(), response)) {\n+        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex cac8aa665..ced7c2014 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -176,7 +176,7 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n         if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n-        if (!TopicValidator.validateBlacklistTopic(requestHeader.getTopic(), response)) {\n+        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic(), response)) {\n             return response;\n         }\n \n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\nindex ced7c2014..84d9ab785 100644\n--- a/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n+++ b/broker/src/main/java/org/apache/rocketmq/broker/processor/AbstractSendMessageProcessor.java\n", "chunk": "@@ -173,10 +458,15 @@ public abstract class AbstractSendMessageProcessor extends AsyncNettyRequestProc\n             return response;\n         }\n \n-        if (!TopicValidator.validateTopic(requestHeader.getTopic(), response)) {\n+        TopicValidator.ValidateTopicResult result = TopicValidator.validateTopic(requestHeader.getTopic());\n+        if (!result.isValid()) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(result.getRemark());\n             return response;\n         }\n-        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic(), response)) {\n+        if (TopicValidator.isNotAllowedSendTopic(requestHeader.getTopic())) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"Sending message to topic[\" + requestHeader.getTopic() + \"] is forbidden.\");\n             return response;\n         }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "b13a4c862fac5889318079e5fc81c3835d128676", "committedDate": "2021-07-07 22:28:29 +0800", "message": "[ISSUE 2883] [Part G] Optimise parse performance for SendMessageRequestHeaderV2"}, {"oid": "238f9bccc2c3d7a4eec28b4f6c60f9bc5047aeaf", "committedDate": "2021-07-15 20:31:32 +0800", "message": "[RIP-21] submodule store & broker & srvutil"}, {"oid": "1b757b402262568cb2d8ac7d4073a2d8f7e7236c", "committedDate": "2021-07-30 15:00:48 +0800", "message": "[ISSUE #3196] Check if \"requestHeader\" is null before \"requestHeader.getTopic()\""}, {"oid": "a137e48a67f910da11d8d0478c523521c425e640", "committedDate": "2021-07-30 15:50:07 +0800", "message": "[ISSUE 2883] [Part G] Optimise parse performance for SendMessageRequestHeaderV2, unit test"}, {"oid": "3e014241383917b58e1e7dbfca6d7db3bbc09227", "committedDate": "2021-07-31 00:31:22 +0800", "message": "Merge pull request #3134 from areyouok/dev_speed_G"}, {"oid": "73db2970ff9fc5bfa018af3715b9cf641346cbe3", "committedDate": "2021-08-01 18:22:54 +0800", "message": "[#Issue3205]Fix the issue of code style in client and broker modules."}, {"oid": "bf343a31a94be1d2eb420a22c647d947f26c8e5d", "committedDate": "2021-09-13 13:59:37 +0800", "message": "[ISSUE #3225]change Random to ThreadLocalRandom in broker"}, {"oid": "2bf133be29c444f0aea648133123a2d9a61ffb07", "committedDate": "2021-09-24 15:35:46 +0800", "message": "Merge branch 'develop' into 5.0.0-preview"}, {"oid": "dd09ba1ec869acb1538d2c73f98d44066bbbb00f", "committedDate": "2021-09-24 17:06:48 +0800", "message": "merger from develop branch and fix compile error"}, {"oid": "6b8a2b2fce91d6486b477adb2cb762a3e119c9f4", "committedDate": "2021-10-26 13:44:23 +0800", "message": "trivial cleanups (#3403)"}, {"oid": "f1b0318d1a6c1e8417a5a779f4219ffddd418001", "committedDate": "2021-11-01 12:46:26 +0800", "message": "Merge remote-tracking branch 'apache/develop' into 5.0.0-alpha"}, {"oid": "b6ff649291453d3dc2d702fbba1548d991b610ac", "committedDate": "2022-02-08 10:38:41 +0800", "message": "feat(all):new feature for static topic"}, {"oid": "cad0cfcecef88958b103059aea7b98395850226a", "committedDate": "2022-03-14 14:51:10 +0800", "message": "feature(broker & acl & client):[RIP-32]Support Slave Acting Master mode (#3978)"}, {"oid": "c121565c3eb59d536edc54512624e420136d30e5", "committedDate": "2022-03-28 10:15:43 +0800", "message": "[ISSUE #4040] Unnecessary  toString methods deleted (#4041)"}, {"oid": "3cbb3b8ea5dc602dc4bbfda235a2def46e346eb7", "committedDate": "2022-04-27 09:26:10 +0800", "message": "[ISSUE 3585] [Part B] Improve encode/decode performance (#3588)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "689c1f39299fa6bae8f4ee422c69f91121639124", "committedDate": "2022-07-13 11:30:52 +0800", "message": "[ISSUE #3949] Refector send process"}, {"oid": "9fbaced20f5aac042362aa4088accd677d86844c", "committedDate": "2022-07-14 14:15:30 +0800", "message": "Merge branch 'develop' into feature/grpc-develop-v2"}, {"oid": "ec8a93d2f70e75dd15d4e4c2ee17fed87a030055", "committedDate": "2022-08-23 13:11:53 +0800", "message": "Support build with Bazel (#4865)"}, {"oid": "bbbb96e129ce1dd4f2595f00fe5ff918c7b666c1", "committedDate": "2022-08-23 14:29:46 +0800", "message": "Revert \"Support build with Bazel (#4865)\""}, {"oid": "3da7ea9c1bcee83ec7eb84b58eae718f121bbdaa", "committedDate": "2022-08-24 20:53:30 +0800", "message": "[Infra Improvement] Build And Run Unit Tests in Parallel (#4878)"}, {"oid": "0ae1bd2af69f475aba03ab7a27df0bd7cda15359", "committedDate": "2022-11-09 19:44:41 +0800", "message": "[ISSUE #5449] [RIP-46] implement remoting stats metrics (#5487)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}, {"oid": "809ff6b3e045d6ccd0899f756822b2d7dd65f6c0", "committedDate": "2022-11-17 00:38:28 +0800", "message": "[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)"}, {"oid": "506b563f55b79a9a4f82e230c6b04f9462e1e311", "committedDate": "2022-11-17 20:04:17 +0800", "message": "Revert \"[ISSUE #5484] Replace Logging Module with Shaded Logback (#5524)\" (#5537)"}, {"oid": "a68078fef8315a0deeae32af42a029ccd2fa76a4", "committedDate": "2022-11-21 16:30:15 +0800", "message": "[ISSUE #5484] Replace logging module with the shaded logback (#5540)"}, {"oid": "f17112963cad4d7b489d136c3c9f6dae3567c0f5", "committedDate": "2022-11-24 09:54:54 +0800", "message": "Optimize the build of sendMessageContext and avoid unnecessary repeated request parsing (#5578)"}, {"oid": "6f49a1034d0698bea84ab0f358c5d184ab64efe8", "committedDate": "2022-11-25 20:35:20 +0800", "message": "Enable AbortProcessException to interrupt RPCHook (#5594)"}, {"oid": "81e3648e3fcb1995897db3960a4561d6047b696c", "committedDate": "2022-12-16 16:48:56 +0800", "message": "Introduce retry topic and lag estimation for lag calculation. (#5702)"}, {"oid": "7694a69d599c7b406a26fc35560e3ad01a6755a7", "committedDate": "2023-01-11 19:49:01 +0800", "message": "[ISSUE #5869] Remove unnecessary verification logic in consumerSendMsgBack method (#5868)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTIyOA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432415228", "body": "it still needs to polish when you change your blacklist method in validator class.", "bodyText": "it still needs to polish when you change your blacklist method in validator class.", "bodyHTML": "<p dir=\"auto\">it still needs to polish when you change your blacklist method in validator class.</p>", "author": "vongosling", "createdAt": "2020-05-29T11:11:14Z", "path": "broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java", "diffHunk": "@@ -70,6 +64,62 @@ public void testAddSystemTopic() {\n         assertThat(TopicValidator.getSystemTopicSet()).contains(topic);\n     }\n \n+    @Test\n+    public void testValidateSystemTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isFalse();\n+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isTrue();\n+    }\n+\n+    @Test\n+    public void testValidateBlacklistTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);", "originalCommit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nsimilarity index 66%\nrename from broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\nrename to common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nindex 926a84a76..bb49417b0 100644\n--- a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\n+++ b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\n", "chunk": "@@ -65,58 +65,65 @@ public class TopicValidatorTest {\n     }\n \n     @Test\n-    public void testValidateSystemTopic() {\n-        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n-\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n-        assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n-        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+    public void testIsSystemTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.validateSystemTopic(topic, response);\n+        String topic = TopicValidator.SYSTEM_TOPIC_PREFIX + \"_test\";\n+        res = TopicValidator.isSystemTopic(topic);\n         assertThat(res).isTrue();\n+\n+        topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testValidateBlacklistTopic() {\n+    public void testIsSystemTopicWithResponse() {\n         RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+            assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+        }\n \n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);\n+        String topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic, response);\n         assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n-        assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-\n-        topic = \"test_topic\";\n-        res = TopicValidator.validateBlacklistTopic(topic, response);\n-        assertThat(res).isTrue();\n     }\n \n     @Test\n-    public void testIsSystemTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n-\n-        topic = \"rmq_sys_test\";\n-        res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic);\n         assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testIsBlacklistTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopicWithResponse() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n+            assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+        }\n+\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic, response);\n         assertThat(res).isFalse();\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nsimilarity index 66%\nrename from broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\nrename to common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nindex 926a84a76..bb49417b0 100644\n--- a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\n+++ b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\n", "chunk": "@@ -65,58 +65,65 @@ public class TopicValidatorTest {\n     }\n \n     @Test\n-    public void testValidateSystemTopic() {\n-        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n-\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n-        assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n-        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+    public void testIsSystemTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.validateSystemTopic(topic, response);\n+        String topic = TopicValidator.SYSTEM_TOPIC_PREFIX + \"_test\";\n+        res = TopicValidator.isSystemTopic(topic);\n         assertThat(res).isTrue();\n+\n+        topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testValidateBlacklistTopic() {\n+    public void testIsSystemTopicWithResponse() {\n         RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+            assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+        }\n \n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);\n+        String topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic, response);\n         assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n-        assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-\n-        topic = \"test_topic\";\n-        res = TopicValidator.validateBlacklistTopic(topic, response);\n-        assertThat(res).isTrue();\n     }\n \n     @Test\n-    public void testIsSystemTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n-\n-        topic = \"rmq_sys_test\";\n-        res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic);\n         assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testIsBlacklistTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopicWithResponse() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n+            assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+        }\n+\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic, response);\n         assertThat(res).isFalse();\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNTU1OA==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432415558", "body": "where is IsBlacklistTopic in here ", "bodyText": "where is IsBlacklistTopic in here", "bodyHTML": "<p dir=\"auto\">where is IsBlacklistTopic in here</p>", "author": "vongosling", "createdAt": "2020-05-29T11:12:02Z", "path": "broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java", "diffHunk": "@@ -70,6 +64,62 @@ public void testAddSystemTopic() {\n         assertThat(TopicValidator.getSystemTopicSet()).contains(topic);\n     }\n \n+    @Test\n+    public void testValidateSystemTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isFalse();\n+        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.validateSystemTopic(topic, response);\n+        assertThat(res).isTrue();\n+    }\n+\n+    @Test\n+    public void testValidateBlacklistTopic() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);\n+        assertThat(res).isFalse();\n+        assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n+        assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.validateBlacklistTopic(topic, response);\n+        assertThat(res).isTrue();\n+    }\n+\n+    @Test\n+    public void testIsSystemTopic() {\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n+        boolean res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isTrue();\n+\n+        topic = \"rmq_sys_test\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isTrue();\n+\n+        topic = \"test_topic\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isFalse();\n+    }\n+\n+    @Test\n+    public void testIsBlacklistTopic() {\n+        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;", "originalCommit": "1bb880cfccb82c50f840cafe060efb4e2c6474da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nsimilarity index 66%\nrename from broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\nrename to common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nindex 926a84a76..bb49417b0 100644\n--- a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\n+++ b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\n", "chunk": "@@ -65,58 +65,65 @@ public class TopicValidatorTest {\n     }\n \n     @Test\n-    public void testValidateSystemTopic() {\n-        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n-\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n-        assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n-        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+    public void testIsSystemTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.validateSystemTopic(topic, response);\n+        String topic = TopicValidator.SYSTEM_TOPIC_PREFIX + \"_test\";\n+        res = TopicValidator.isSystemTopic(topic);\n         assertThat(res).isTrue();\n+\n+        topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testValidateBlacklistTopic() {\n+    public void testIsSystemTopicWithResponse() {\n         RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+            assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+        }\n \n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);\n+        String topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic, response);\n         assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n-        assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-\n-        topic = \"test_topic\";\n-        res = TopicValidator.validateBlacklistTopic(topic, response);\n-        assertThat(res).isTrue();\n     }\n \n     @Test\n-    public void testIsSystemTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n-\n-        topic = \"rmq_sys_test\";\n-        res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic);\n         assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testIsBlacklistTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopicWithResponse() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n+            assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+        }\n+\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic, response);\n         assertThat(res).isFalse();\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nsimilarity index 66%\nrename from broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\nrename to common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\nindex 926a84a76..bb49417b0 100644\n--- a/broker/src/test/java/org/apache/rocketmq/broker/topic/TopicValidatorTest.java\n+++ b/common/src/test/java/org/apache/rocketmq/common/topic/TopicValidatorTest.java\n", "chunk": "@@ -65,58 +65,65 @@ public class TopicValidatorTest {\n     }\n \n     @Test\n-    public void testValidateSystemTopic() {\n-        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n-\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateSystemTopic(topic, response);\n-        assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n-        assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+    public void testIsSystemTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.validateSystemTopic(topic, response);\n+        String topic = TopicValidator.SYSTEM_TOPIC_PREFIX + \"_test\";\n+        res = TopicValidator.isSystemTopic(topic);\n         assertThat(res).isTrue();\n+\n+        topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic);\n+        assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testValidateBlacklistTopic() {\n+    public void testIsSystemTopicWithResponse() {\n         RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n+        boolean res;\n+        for (String topic : TopicValidator.getSystemTopicSet()) {\n+            res = TopicValidator.isSystemTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n+            assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+        }\n \n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        Boolean res = TopicValidator.validateBlacklistTopic(topic, response);\n+        String topic = \"test_not_system_topic\";\n+        res = TopicValidator.isSystemTopic(topic, response);\n         assertThat(res).isFalse();\n-        assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n-        assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-\n-        topic = \"test_topic\";\n-        res = TopicValidator.validateBlacklistTopic(topic, response);\n-        assertThat(res).isTrue();\n     }\n \n     @Test\n-    public void testIsSystemTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n-\n-        topic = \"rmq_sys_test\";\n-        res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopic() {\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic);\n+            assertThat(res).isTrue();\n+        }\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic);\n         assertThat(res).isFalse();\n     }\n \n     @Test\n-    public void testIsBlacklistTopic() {\n-        String topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n-        boolean res = TopicValidator.isSystemTopic(topic);\n-        assertThat(res).isTrue();\n+    public void testIsNotAllowedSendTopicWithResponse() {\n+        RemotingCommand response = RemotingCommand.createResponseCommand(-1, \"\");\n \n-        topic = \"test_topic\";\n-        res = TopicValidator.isSystemTopic(topic);\n+        boolean res;\n+        for (String topic : TopicValidator.getNotAllowedSendTopicSet()) {\n+            res = TopicValidator.isNotAllowedSendTopic(topic, response);\n+            assertThat(res).isTrue();\n+            assertThat(response.getCode()).isEqualTo(ResponseCode.NO_PERMISSION);\n+            assertThat(response.getRemark()).isEqualTo(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+        }\n+\n+        String topic = \"test_allowed_send_topic\";\n+        res = TopicValidator.isNotAllowedSendTopic(topic, response);\n         assertThat(res).isFalse();\n     }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMTM4MQ==", "url": "https://github.com/apache/rocketmq/pull/1985#discussion_r432421381", "body": "It would be better to reconsider the naming of these methods. The difference between `validateSystemTopic` and `isSystemTopic` are quite confusing, same for  `isBlacklistTopic` and `validateBlacklistTopic`. For example, when a topic is system topic, but validateSystemTopic return false.", "bodyText": "It would be better to reconsider the naming of these methods. The difference between validateSystemTopic and isSystemTopic are quite confusing, same for  isBlacklistTopic and validateBlacklistTopic. For example, when a topic is system topic, but validateSystemTopic return false.", "bodyHTML": "<p dir=\"auto\">It would be better to reconsider the naming of these methods. The difference between <code>validateSystemTopic</code> and <code>isSystemTopic</code> are quite confusing, same for  <code>isBlacklistTopic</code> and <code>validateBlacklistTopic</code>. For example, when a topic is system topic, but validateSystemTopic return false.</p>", "author": "RongtongJin", "createdAt": "2020-05-29T11:25:51Z", "path": "common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.topic;\n+\n+import org.apache.rocketmq.common.UtilAll;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class TopicValidator {\n+\n+    public static final String AUTO_CREATE_TOPIC_KEY_TOPIC = \"TBW102\"; // Will be created at broker when isAutoCreateTopicEnable\n+    public static final String RMQ_SYS_SCHEDULE_TOPIC = \"SCHEDULE_TOPIC_XXXX\";\n+    public static final String RMQ_SYS_BENCHMARK_TOPIC = \"BenchmarkTest\";\n+    public static final String RMQ_SYS_TRANS_HALF_TOPIC = \"RMQ_SYS_TRANS_HALF_TOPIC\";\n+    public static final String RMQ_SYS_TRACE_TOPIC = \"RMQ_SYS_TRACE_TOPIC\";\n+    public static final String RMQ_SYS_TRANS_OP_HALF_TOPIC = \"RMQ_SYS_TRANS_OP_HALF_TOPIC\";\n+    public static final String RMQ_SYS_TRANS_CHECK_MAX_TIME_TOPIC = \"TRANS_CHECK_MAX_TIME_TOPIC\";\n+    public static final String RMQ_SYS_SELF_TEST_TOPIC = \"SELF_TEST_TOPIC\";\n+    public static final String RMQ_SYS_OFFSET_MOVED_EVENT = \"OFFSET_MOVED_EVENT\";\n+\n+    public static final String SYSTEM_TOPIC_PREFIX = \"rmq_sys_\";\n+\n+    private static final String VALID_PATTERN_STR = \"^[%|a-zA-Z0-9_-]+$\";\n+    private static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);\n+    private static final int TOPIC_MAX_LENGTH = 127;\n+\n+    private static final Set<String> SYSTEM_TOPIC_SET = new HashSet<String>();\n+\n+    /**\n+     * Topics'set which client can not send msg!\n+     */\n+    private static final Set<String> CLIENT_BLACKLIST_TOPIC_SET = new HashSet<String>();\n+\n+    static {\n+        SYSTEM_TOPIC_SET.add(AUTO_CREATE_TOPIC_KEY_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_SCHEDULE_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_BENCHMARK_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_HALF_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRACE_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_OP_HALF_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_TRANS_CHECK_MAX_TIME_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_SELF_TEST_TOPIC);\n+        SYSTEM_TOPIC_SET.add(RMQ_SYS_OFFSET_MOVED_EVENT);\n+\n+        CLIENT_BLACKLIST_TOPIC_SET.add(RMQ_SYS_SCHEDULE_TOPIC);\n+    }\n+\n+    private static boolean regularExpressionMatcher(String origin, Pattern pattern) {\n+        if (pattern == null) {\n+            return true;\n+        }\n+        Matcher matcher = pattern.matcher(origin);\n+        return matcher.matches();\n+    }\n+\n+    public static boolean validateTopic(String topic, RemotingCommand response) {\n+\n+        if (UtilAll.isBlank(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The specified topic is blank.\");\n+            return false;\n+        }\n+\n+        if (!regularExpressionMatcher(topic, PATTERN)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The specified topic contains illegal characters, allowing only \" + VALID_PATTERN_STR);\n+            return false;\n+        }\n+\n+        if (topic.length() > TOPIC_MAX_LENGTH) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The specified topic is longer than topic max length.\");\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean validateSystemTopic(String topic, RemotingCommand response) {\n+        if (isSystemTopic(topic)) {\n+            response.setCode(ResponseCode.SYSTEM_ERROR);\n+            response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static boolean isSystemTopic(String topic) {\n+        return SYSTEM_TOPIC_SET.contains(topic) || topic.startsWith(SYSTEM_TOPIC_PREFIX);\n+    }\n+\n+    public static boolean isBlacklistTopic(String topic) {\n+        return CLIENT_BLACKLIST_TOPIC_SET.contains(topic);\n+    }\n+\n+    public static boolean validateBlacklistTopic(String topic, RemotingCommand response) {\n+        if (isBlacklistTopic(topic)) {\n+            response.setCode(ResponseCode.NO_PERMISSION);\n+            response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n+            return false;\n+        }\n+        return true;", "originalCommit": "82825b0824b4fbeb4d67d62ca5daf66326430b55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex 480d8ed9a..7b0a8394a 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -95,30 +95,30 @@ public class TopicValidator {\n         return true;\n     }\n \n-    public static boolean validateSystemTopic(String topic, RemotingCommand response) {\n+    public static boolean isSystemTopic(String topic, RemotingCommand response) {\n         if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return false;\n+            return true;\n         }\n-        return true;\n+        return false;\n     }\n \n     public static boolean isSystemTopic(String topic) {\n         return SYSTEM_TOPIC_SET.contains(topic) || topic.startsWith(SYSTEM_TOPIC_PREFIX);\n     }\n \n-    public static boolean isBlacklistTopic(String topic) {\n-        return CLIENT_BLACKLIST_TOPIC_SET.contains(topic);\n+    public static boolean isNotAllowedSendTopic(String topic) {\n+        return NOT_ALLOWED_SEND_TOPIC_SET.contains(topic);\n     }\n \n-    public static boolean validateBlacklistTopic(String topic, RemotingCommand response) {\n-        if (isBlacklistTopic(topic)) {\n+    public static boolean isNotAllowedSendTopic(String topic, RemotingCommand response) {\n+        if (isNotAllowedSendTopic(topic)) {\n             response.setCode(ResponseCode.NO_PERMISSION);\n             response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-            return false;\n+            return true;\n         }\n-        return true;\n+        return false;\n     }\n \n     public static void addSystemTopic(String systemTopic) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b6307dfce1c201877f7a27691cad74b842c0d971", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex 480d8ed9a..7b0a8394a 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -95,30 +95,30 @@ public class TopicValidator {\n         return true;\n     }\n \n-    public static boolean validateSystemTopic(String topic, RemotingCommand response) {\n+    public static boolean isSystemTopic(String topic, RemotingCommand response) {\n         if (isSystemTopic(topic)) {\n             response.setCode(ResponseCode.SYSTEM_ERROR);\n             response.setRemark(\"The topic[\" + topic + \"] is conflict with system topic.\");\n-            return false;\n+            return true;\n         }\n-        return true;\n+        return false;\n     }\n \n     public static boolean isSystemTopic(String topic) {\n         return SYSTEM_TOPIC_SET.contains(topic) || topic.startsWith(SYSTEM_TOPIC_PREFIX);\n     }\n \n-    public static boolean isBlacklistTopic(String topic) {\n-        return CLIENT_BLACKLIST_TOPIC_SET.contains(topic);\n+    public static boolean isNotAllowedSendTopic(String topic) {\n+        return NOT_ALLOWED_SEND_TOPIC_SET.contains(topic);\n     }\n \n-    public static boolean validateBlacklistTopic(String topic, RemotingCommand response) {\n-        if (isBlacklistTopic(topic)) {\n+    public static boolean isNotAllowedSendTopic(String topic, RemotingCommand response) {\n+        if (isNotAllowedSendTopic(topic)) {\n             response.setCode(ResponseCode.NO_PERMISSION);\n             response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-            return false;\n+            return true;\n         }\n-        return true;\n+        return false;\n     }\n \n     public static void addSystemTopic(String systemTopic) {\n", "next_change": {"commit": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "changed_code": [{"header": "diff --git a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\nindex 7b0a8394a..61265c05d 100644\n--- a/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n+++ b/common/src/main/java/org/apache/rocketmq/common/topic/TopicValidator.java\n", "chunk": "@@ -112,15 +142,6 @@ public class TopicValidator {\n         return NOT_ALLOWED_SEND_TOPIC_SET.contains(topic);\n     }\n \n-    public static boolean isNotAllowedSendTopic(String topic, RemotingCommand response) {\n-        if (isNotAllowedSendTopic(topic)) {\n-            response.setCode(ResponseCode.NO_PERMISSION);\n-            response.setRemark(\"Sending message to topic[\" + topic + \"] is forbidden.\");\n-            return true;\n-        }\n-        return false;\n-    }\n-\n     public static void addSystemTopic(String systemTopic) {\n         SYSTEM_TOPIC_SET.add(systemTopic);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b6307dfce1c201877f7a27691cad74b842c0d971", "message": "Merge commit", "committedDate": null}, {"oid": "50d45f23a186051d177990fd00a89d152c5c4dae", "committedDate": "2021-12-09 10:50:52 +0800", "message": "[ISSUE 3585] [Part F] eliminate regex match in topic/group name check (#3594)"}, {"oid": "5ae4a106bdd83848ae12e870e8f0f587bd107500", "committedDate": "2022-03-03 11:17:39 +0800", "message": "[#3903] Add topic validation, forbid sending message to system topic  (#3904)"}, {"oid": "467b382777e1da8f9ecd54a2ee26aac474337708", "committedDate": "2022-03-14 14:49:53 +0800", "message": "feature(namesrv&common):[RIP-29]Optimize RocketMQ NameServer (#3974)"}, {"oid": "db1f1839b9f8b9486e670b70cdc0c22ad2dcc708", "committedDate": "2022-10-14 11:44:21 +0800", "message": "[ISSUE #5298]Polish code style for jdk8+ (#5308)"}, {"oid": "ec5d3236f65786be7dde712dda5f5ee152d0dce6", "committedDate": "2022-11-11 13:34:31 +0800", "message": "invert dependency between remoting and common module (#5503)"}]}, {"oid": "cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "url": "https://github.com/apache/rocketmq/commit/cff29cd83f91c3db17a8055742db3e83f7a8c6b1", "message": "rename some methods", "committedDate": "2020-06-01T08:10:57Z", "type": "commit"}]}