{"pr_number": 2406, "pr_title": "[ISSUE #690] Support batch msgs in dledger mode", "pr_author": "TerrellChen", "pr_createdAt": "2020-11-08T10:39:03Z", "pr_url": "https://github.com/apache/rocketmq/pull/2406", "merge_commit": "4730987c9cc046c6db980a48aaed9eacc13c630d", "timeline": [{"oid": "d16878663ef56d05efc138c2d41d186e9118f033", "url": "https://github.com/apache/rocketmq/commit/d16878663ef56d05efc138c2d41d186e9118f033", "message": "implement issue-690", "committedDate": "2020-11-07T08:32:14Z", "type": "commit"}, {"oid": "a6d4affa0ff54997dfb6d0561320cd9c18490a17", "url": "https://github.com/apache/rocketmq/commit/a6d4affa0ff54997dfb6d0561320cd9c18490a17", "message": "implement issue 690", "committedDate": "2020-11-08T05:20:32Z", "type": "commit"}, {"oid": "9a7893bdb95761cb51ba02f9e8fffaefedbc2c4d", "url": "https://github.com/apache/rocketmq/commit/9a7893bdb95761cb51ba02f9e8fffaefedbc2c4d", "message": "add unit test", "committedDate": "2020-11-08T09:52:09Z", "type": "commit"}, {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6", "url": "https://github.com/apache/rocketmq/commit/d638e5ffdb94f0957da36253eb971990ded68ea6", "message": "fix version", "committedDate": "2020-11-08T10:38:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxOTYxMg==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r519519612", "body": "When sending batch messages, worteOffset is the offset of the first message, but this is the offset of the last message, so the unit test fails.", "bodyText": "When sending batch messages, worteOffset is the offset of the first message, but this is the offset of the last message, so the unit test fails.", "bodyHTML": "<p dir=\"auto\">When sending batch messages, worteOffset is the offset of the first message, but this is the offset of the last message, so the unit test fails.</p>", "author": "RongtongJin", "createdAt": "2020-11-09T02:19:18Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }\n+            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);", "originalCommit": "d638e5ffdb94f0957da36253eb971990ded68ea6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzODE3Mg==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520638172", "bodyText": "Good job!", "author": "TerrellChen", "createdAt": "2020-11-10T15:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxOTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "08c9b0110d0b6e32a3c7ce741d3296f337700430", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..585c05794 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -579,6 +583,7 @@ public class DLedgerCommitLog extends CommitLog {\n                 }\n                 msgNum++;\n             }\n+\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n             appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n", "next_change": {"commit": "37798914b2ca712844e49f3986626dcffbfb89b5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 585c05794..27d96578b 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -585,7 +587,7 @@ public class DLedgerCommitLog extends CommitLog {\n             }\n \n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4730987c9cc046c6db980a48aaed9eacc13c630d", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..9a6e7a78a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -579,8 +585,9 @@ public class DLedgerCommitLog extends CommitLog {\n                 }\n                 msgNum++;\n             }\n+\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": {"commit": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 9a6e7a78a..90fd6f3f1 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -589,6 +592,7 @@ public class DLedgerCommitLog extends CommitLog {\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n             appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            appendResult.setMsgNum(msgNum);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n             log.error(\"Put message error\", e);\n", "next_change": {"commit": "032577255ecd543908446aa272668c9f882bcce5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 90fd6f3f1..011cbe169 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -413,235 +412,6 @@ public class DLedgerCommitLog extends CommitLog {\n         }\n     }\n \n-    @Override\n-    public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n-        String topic = msg.getTopic();\n-        setMessageInfo(msg,tranType);\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        AppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(msg);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult.status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, false);\n-            AppendEntryRequest request = new AppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBody(encodeResult.getData());\n-            dledgerFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = dledgerFuture.getPos() + DLedgerEntry.BODY_OFFSET;\n-\n-            int msgIdLength = (msg.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            String msgId = MessageDecoder.createMessageId(buffer, msg.getStoreHostBytes(), wroteOffset);\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.getData().length, msgId, System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            switch (tranType) {\n-                case MessageSysFlag.TRANSACTION_PREPARED_TYPE:\n-                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:\n-                    break;\n-                case MessageSysFlag.TRANSACTION_NOT_TYPE:\n-                case MessageSysFlag.TRANSACTION_COMMIT_TYPE:\n-                    // The next update ConsumeQueue information\n-                    DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + 1);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(appendResult.getWroteBytes());\n-        }\n-        return putMessageResult;\n-    }\n-\n-    @Override\n-    public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n-\n-        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-        if (messageExtBatch.getDelayTimeLevel() > 0) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-\n-        // Set the storage time\n-        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-\n-        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n-        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setBornHostV6Flag();\n-        }\n-\n-        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n-        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setStoreHostAddressV6Flag();\n-        }\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(messageExtBatch);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                    .status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        int msgNum = 0;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, true);\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n-                }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n-                }\n-                msgNum++;\n-            }\n-\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n-                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            appendResult.setMsgNum(msgNum);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus\n-                    .UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(msgNum);\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(encodeResult.totalMsgLen);\n-        }\n-        return putMessageResult;\n-    }\n-\n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner msg) {\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "4730987c9cc046c6db980a48aaed9eacc13c630d", "message": "Merge commit", "committedDate": null}, {"oid": "432236e983ede0d40b13b0dd0128932afd09df01", "committedDate": "2021-05-20 11:01:39 +0800", "message": "Revert 2912 & 2866  and merge to develop branch(#2915)"}, {"oid": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "committedDate": "2021-06-21 20:35:32 +0800", "message": "[ISSUE 3019] Fixed bug with batch-sent message statistics"}, {"oid": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "committedDate": "2021-07-05 16:03:45 +0800", "message": "[ISSUE #3118] Fix type conversion exception"}, {"oid": "3183122c01cc2d0dc005634d028ccbcb62495bf6", "committedDate": "2021-07-06 21:47:12 +0800", "message": "Eliminate array copy (#2886)"}, {"oid": "032577255ecd543908446aa272668c9f882bcce5", "committedDate": "2021-07-28 14:49:45 +0800", "message": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode.  (#2889)"}, {"oid": "d7a830cf8f1b5713af7ff643c4e9f847d5331c6c", "committedDate": "2021-09-06 20:16:11 +0800", "message": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)"}, {"oid": "a779d69862c69db0d84fc27b35cfe5d08dc96377", "committedDate": "2021-12-07 12:35:43 +0800", "message": "Unnecessary boxing of primitives (#3596)"}, {"oid": "f395fa68373c7552ad18fb522da69197bf151669", "committedDate": "2021-12-08 17:14:26 +0800", "message": "[ISSUE #3601] Fix dledger put batch msg stats bug (#3600)"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "5c350af174c864992d3611e8432075762c2d3bd4", "committedDate": "2022-03-14 14:51:30 +0800", "message": "feature(store):[RIP-34]Support quorum write and adaptive degradation in master slave architecture (#3979)"}, {"oid": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "committedDate": "2022-04-22 14:19:02 +0800", "message": "[ISSUE #3914] Support multi dirs storage in DLedger"}, {"oid": "df3f8de4c03a282de052b130ae368ab00faca039", "committedDate": "2022-04-29 10:12:51 +0800", "message": "[ISSUE #4211] Fix diskMaxUsedSpaceRatio does not take effect in dLedger"}, {"oid": "5d2bf3573c683eb08f028b3a6496d1cbfe1af33b", "committedDate": "2022-05-09 09:42:36 +0800", "message": "[ISSUE #4254] use function computeIfAbsent replace if  (#4255)"}, {"oid": "0bc3b991e17ea6473923b4c07ff594181a1ae6b9", "committedDate": "2022-06-01 13:51:07 +0800", "message": "[ISSUE #4226] Message length exceeds the maximum length when sendback (#4338)"}, {"oid": "6273782d663483e5c278f9ef2de15ca137fe7949", "committedDate": "2022-06-16 13:42:48 +0800", "message": "[ISSUE apache#4058] DLedgerCommitLog support LMQ (#4059)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "e38da5590f0677e7b3d092c295218bcafa19149b", "committedDate": "2022-10-24 16:21:39 +0800", "message": "[ISSUE #3799]main compaction process (#5351)"}, {"oid": "49fc6eded9cc1b37eb4983023d6f89ce1f00347f", "committedDate": "2022-12-07 10:26:50 +0800", "message": "[ISSUE #5568] Support long length group and topic for pop mode consumption (#5611)"}, {"oid": "cc8823cf62a7137784bbe01562cd68118f3eac89", "committedDate": "2023-03-06 09:20:41 +0800", "message": "[ISSUE #5883] DLedger commit log should override the getData (#5879)"}, {"oid": "e3b8178871158e1a981915ac40c11e3a5e451922", "committedDate": "2023-04-26 11:24:47 +0800", "message": "[ISSUE #6570] Fix the issue that expectLogicOffset is greater than currentLogicOffset in consumeQueue build when the message is illegal  (#6641)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMDM3Mw==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r519520373", "body": "Write code as this:\r\n```java\r\nboolean isFirstOffset = true;\r\n            for (long pos : dledgerFuture.getPositions()) {\r\n                if(isFirstOffset) {\r\n                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\r\n                    isFirstOffset = false;\r\n                }\r\n                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\r\n                if (msgIdBuilder.length() > 0) {\r\n                    msgIdBuilder.append(',').append(msgId);\r\n                } else {\r\n                    msgIdBuilder.append(msgId);\r\n                }\r\n                msgNum++;\r\n            }\r\n```\r\nOr do you have a better solution\uff1f", "bodyText": "Write code as this:\nboolean isFirstOffset = true;\n            for (long pos : dledgerFuture.getPositions()) {\n                if(isFirstOffset) {\n                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n                    isFirstOffset = false;\n                }\n                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n                if (msgIdBuilder.length() > 0) {\n                    msgIdBuilder.append(',').append(msgId);\n                } else {\n                    msgIdBuilder.append(msgId);\n                }\n                msgNum++;\n            }\nOr do you have a better solution\uff1f", "bodyHTML": "<p dir=\"auto\">Write code as this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"boolean isFirstOffset = true;\n            for (long pos : dledgerFuture.getPositions()) {\n                if(isFirstOffset) {\n                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n                    isFirstOffset = false;\n                }\n                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n                if (msgIdBuilder.length() &gt; 0) {\n                    msgIdBuilder.append(',').append(msgId);\n                } else {\n                    msgIdBuilder.append(msgId);\n                }\n                msgNum++;\n            }\n\"><pre><span class=\"pl-k\">boolean</span> isFirstOffset <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n            <span class=\"pl-k\">for</span> (<span class=\"pl-k\">long</span> pos <span class=\"pl-k\">:</span> dledgerFuture<span class=\"pl-k\">.</span>getPositions()) {\n                <span class=\"pl-k\">if</span>(isFirstOffset) {\n                    wroteOffset <span class=\"pl-k\">=</span> pos <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DLedgerEntry</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>BODY_OFFSET</span>;\n                    isFirstOffset <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>;\n                }\n                <span class=\"pl-smi\">String</span> msgId <span class=\"pl-k\">=</span> <span class=\"pl-smi\">MessageDecoder</span><span class=\"pl-k\">.</span>createMessageId(buffer, messageExtBatch<span class=\"pl-k\">.</span>getStoreHostBytes(), wroteOffset);\n                <span class=\"pl-k\">if</span> (msgIdBuilder<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {\n                    msgIdBuilder<span class=\"pl-k\">.</span>append(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>,<span class=\"pl-pds\">'</span></span>)<span class=\"pl-k\">.</span>append(msgId);\n                } <span class=\"pl-k\">else</span> {\n                    msgIdBuilder<span class=\"pl-k\">.</span>append(msgId);\n                }\n                msgNum<span class=\"pl-k\">++</span>;\n            }</pre></div>\n<p dir=\"auto\">Or do you have a better solution\uff1f</p>", "author": "RongtongJin", "createdAt": "2020-11-09T02:22:42Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "originalCommit": "d638e5ffdb94f0957da36253eb971990ded68ea6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTMwNA==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520639304", "bodyText": "LGTM!", "author": "TerrellChen", "createdAt": "2020-11-10T15:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMDM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "08c9b0110d0b6e32a3c7ce741d3296f337700430", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..585c05794 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -569,8 +569,12 @@ public class DLedgerCommitLog extends CommitLog {\n             int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n             ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n \n+            boolean isFirstOffset = true;\n             for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                if(isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n                 String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n                 if (msgIdBuilder.length() > 0) {\n                     msgIdBuilder.append(',').append(msgId);\n", "next_change": {"commit": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 585c05794..4db7d8bce 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -571,7 +571,7 @@ public class DLedgerCommitLog extends CommitLog {\n \n             boolean isFirstOffset = true;\n             for (long pos : dledgerFuture.getPositions()) {\n-                if(isFirstOffset) {\n+                if (isFirstOffset) {\n                     wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n                     isFirstOffset = false;\n                 }\n", "next_change": {"commit": "37798914b2ca712844e49f3986626dcffbfb89b5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 4db7d8bce..27d96578b 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -570,9 +570,11 @@ public class DLedgerCommitLog extends CommitLog {\n             ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n \n             boolean isFirstOffset = true;\n+            long firstWroteOffset = 0;\n             for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n                 if (isFirstOffset) {\n-                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    firstWroteOffset = wroteOffset;\n                     isFirstOffset = false;\n                 }\n                 String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n", "next_change": null}]}}]}}, {"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..585c05794 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -579,6 +583,7 @@ public class DLedgerCommitLog extends CommitLog {\n                 }\n                 msgNum++;\n             }\n+\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n             appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n", "next_change": {"commit": "37798914b2ca712844e49f3986626dcffbfb89b5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 585c05794..27d96578b 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -585,7 +587,7 @@ public class DLedgerCommitLog extends CommitLog {\n             }\n \n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4730987c9cc046c6db980a48aaed9eacc13c630d", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..9a6e7a78a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -569,8 +569,14 @@ public class DLedgerCommitLog extends CommitLog {\n             int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n             ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n \n+            boolean isFirstOffset = true;\n+            long firstWroteOffset = 0;\n             for (long pos : dledgerFuture.getPositions()) {\n                 wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                if (isFirstOffset) {\n+                    firstWroteOffset = wroteOffset;\n+                    isFirstOffset = false;\n+                }\n                 String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n                 if (msgIdBuilder.length() > 0) {\n                     msgIdBuilder.append(',').append(msgId);\n", "next_change": {"commit": "032577255ecd543908446aa272668c9f882bcce5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 9a6e7a78a..011cbe169 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -413,231 +412,6 @@ public class DLedgerCommitLog extends CommitLog {\n         }\n     }\n \n-    @Override\n-    public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n-        String topic = msg.getTopic();\n-        setMessageInfo(msg,tranType);\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        AppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            encodeResult = this.messageSerializer.serialize(msg);\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset);\n-            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult.status));\n-            }\n-            AppendEntryRequest request = new AppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBody(encodeResult.getData());\n-            dledgerFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = dledgerFuture.getPos() + DLedgerEntry.BODY_OFFSET;\n-\n-            int msgIdLength = (msg.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            String msgId = MessageDecoder.createMessageId(buffer, msg.getStoreHostBytes(), wroteOffset);\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.getData().length, msgId, System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            switch (tranType) {\n-                case MessageSysFlag.TRANSACTION_PREPARED_TYPE:\n-                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:\n-                    break;\n-                case MessageSysFlag.TRANSACTION_NOT_TYPE:\n-                case MessageSysFlag.TRANSACTION_COMMIT_TYPE:\n-                    // The next update ConsumeQueue information\n-                    DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + 1);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(appendResult.getWroteBytes());\n-        }\n-        return putMessageResult;\n-    }\n-\n-    @Override\n-    public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n-\n-        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-        if (messageExtBatch.getDelayTimeLevel() > 0) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-\n-        // Set the storage time\n-        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-\n-        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n-        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setBornHostV6Flag();\n-        }\n-\n-        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n-        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setStoreHostAddressV6Flag();\n-        }\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        long msgNum = 0;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n-            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n-            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                        .status));\n-            }\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n-                }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n-                }\n-                msgNum++;\n-            }\n-\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n-                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus\n-                    .UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(msgNum);\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(encodeResult.totalMsgLen);\n-        }\n-        return putMessageResult;\n-    }\n-\n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner msg) {\n \n", "next_change": null}]}}, {"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..9a6e7a78a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -579,8 +585,9 @@ public class DLedgerCommitLog extends CommitLog {\n                 }\n                 msgNum++;\n             }\n+\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": {"commit": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 9a6e7a78a..90fd6f3f1 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -589,6 +592,7 @@ public class DLedgerCommitLog extends CommitLog {\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n             appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            appendResult.setMsgNum(msgNum);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n             log.error(\"Put message error\", e);\n", "next_change": {"commit": "032577255ecd543908446aa272668c9f882bcce5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 90fd6f3f1..011cbe169 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -413,235 +412,6 @@ public class DLedgerCommitLog extends CommitLog {\n         }\n     }\n \n-    @Override\n-    public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n-        String topic = msg.getTopic();\n-        setMessageInfo(msg,tranType);\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        AppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(msg);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult.status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, false);\n-            AppendEntryRequest request = new AppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBody(encodeResult.getData());\n-            dledgerFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = dledgerFuture.getPos() + DLedgerEntry.BODY_OFFSET;\n-\n-            int msgIdLength = (msg.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            String msgId = MessageDecoder.createMessageId(buffer, msg.getStoreHostBytes(), wroteOffset);\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.getData().length, msgId, System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            switch (tranType) {\n-                case MessageSysFlag.TRANSACTION_PREPARED_TYPE:\n-                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:\n-                    break;\n-                case MessageSysFlag.TRANSACTION_NOT_TYPE:\n-                case MessageSysFlag.TRANSACTION_COMMIT_TYPE:\n-                    // The next update ConsumeQueue information\n-                    DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + 1);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(appendResult.getWroteBytes());\n-        }\n-        return putMessageResult;\n-    }\n-\n-    @Override\n-    public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n-\n-        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-        if (messageExtBatch.getDelayTimeLevel() > 0) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-\n-        // Set the storage time\n-        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-\n-        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n-        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setBornHostV6Flag();\n-        }\n-\n-        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n-        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setStoreHostAddressV6Flag();\n-        }\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(messageExtBatch);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                    .status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        int msgNum = 0;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, true);\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n-                }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n-                }\n-                msgNum++;\n-            }\n-\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n-                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            appendResult.setMsgNum(msgNum);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus\n-                    .UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(msgNum);\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(encodeResult.totalMsgLen);\n-        }\n-        return putMessageResult;\n-    }\n-\n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner msg) {\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "4730987c9cc046c6db980a48aaed9eacc13c630d", "message": "Merge commit", "committedDate": null}, {"oid": "432236e983ede0d40b13b0dd0128932afd09df01", "committedDate": "2021-05-20 11:01:39 +0800", "message": "Revert 2912 & 2866  and merge to develop branch(#2915)"}, {"oid": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "committedDate": "2021-06-21 20:35:32 +0800", "message": "[ISSUE 3019] Fixed bug with batch-sent message statistics"}, {"oid": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "committedDate": "2021-07-05 16:03:45 +0800", "message": "[ISSUE #3118] Fix type conversion exception"}, {"oid": "3183122c01cc2d0dc005634d028ccbcb62495bf6", "committedDate": "2021-07-06 21:47:12 +0800", "message": "Eliminate array copy (#2886)"}, {"oid": "032577255ecd543908446aa272668c9f882bcce5", "committedDate": "2021-07-28 14:49:45 +0800", "message": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode.  (#2889)"}, {"oid": "d7a830cf8f1b5713af7ff643c4e9f847d5331c6c", "committedDate": "2021-09-06 20:16:11 +0800", "message": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)"}, {"oid": "a779d69862c69db0d84fc27b35cfe5d08dc96377", "committedDate": "2021-12-07 12:35:43 +0800", "message": "Unnecessary boxing of primitives (#3596)"}, {"oid": "f395fa68373c7552ad18fb522da69197bf151669", "committedDate": "2021-12-08 17:14:26 +0800", "message": "[ISSUE #3601] Fix dledger put batch msg stats bug (#3600)"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "5c350af174c864992d3611e8432075762c2d3bd4", "committedDate": "2022-03-14 14:51:30 +0800", "message": "feature(store):[RIP-34]Support quorum write and adaptive degradation in master slave architecture (#3979)"}, {"oid": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "committedDate": "2022-04-22 14:19:02 +0800", "message": "[ISSUE #3914] Support multi dirs storage in DLedger"}, {"oid": "df3f8de4c03a282de052b130ae368ab00faca039", "committedDate": "2022-04-29 10:12:51 +0800", "message": "[ISSUE #4211] Fix diskMaxUsedSpaceRatio does not take effect in dLedger"}, {"oid": "5d2bf3573c683eb08f028b3a6496d1cbfe1af33b", "committedDate": "2022-05-09 09:42:36 +0800", "message": "[ISSUE #4254] use function computeIfAbsent replace if  (#4255)"}, {"oid": "0bc3b991e17ea6473923b4c07ff594181a1ae6b9", "committedDate": "2022-06-01 13:51:07 +0800", "message": "[ISSUE #4226] Message length exceeds the maximum length when sendback (#4338)"}, {"oid": "6273782d663483e5c278f9ef2de15ca137fe7949", "committedDate": "2022-06-16 13:42:48 +0800", "message": "[ISSUE apache#4058] DLedgerCommitLog support LMQ (#4059)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "e38da5590f0677e7b3d092c295218bcafa19149b", "committedDate": "2022-10-24 16:21:39 +0800", "message": "[ISSUE #3799]main compaction process (#5351)"}, {"oid": "49fc6eded9cc1b37eb4983023d6f89ce1f00347f", "committedDate": "2022-12-07 10:26:50 +0800", "message": "[ISSUE #5568] Support long length group and topic for pop mode consumption (#5611)"}, {"oid": "cc8823cf62a7137784bbe01562cd68118f3eac89", "committedDate": "2023-03-06 09:20:41 +0800", "message": "[ISSUE #5883] DLedger commit log should override the getData (#5879)"}, {"oid": "e3b8178871158e1a981915ac40c11e3a5e451922", "committedDate": "2023-04-26 11:24:47 +0800", "message": "[ISSUE #6570] Fix the issue that expectLogicOffset is greater than currentLogicOffset in consumeQueue build when the message is illegal  (#6641)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMTU5OA==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r519521598", "body": "Removing `[DEBUG_CTR]` will be better.", "bodyText": "Removing [DEBUG_CTR] will be better.", "bodyHTML": "<p dir=\"auto\">Removing <code>[DEBUG_CTR]</code> will be better.</p>", "author": "RongtongJin", "createdAt": "2020-11-09T02:28:25Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());", "originalCommit": "d638e5ffdb94f0957da36253eb971990ded68ea6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTc2MQ==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520639761", "bodyText": "My fault!", "author": "TerrellChen", "createdAt": "2020-11-10T15:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMTU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "08c9b0110d0b6e32a3c7ce741d3296f337700430", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..585c05794 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -561,7 +561,7 @@ public class DLedgerCommitLog extends CommitLog {\n             request.setBatchMsgs(encodeResult.batchData);\n             dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n             if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n                 return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n             }\n             long wroteOffset = 0;\n", "next_change": {"commit": "37798914b2ca712844e49f3986626dcffbfb89b5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 585c05794..27d96578b 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -570,9 +570,11 @@ public class DLedgerCommitLog extends CommitLog {\n             ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n \n             boolean isFirstOffset = true;\n+            long firstWroteOffset = 0;\n             for (long pos : dledgerFuture.getPositions()) {\n-                if(isFirstOffset) {\n-                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                if (isFirstOffset) {\n+                    firstWroteOffset = wroteOffset;\n                     isFirstOffset = false;\n                 }\n                 String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "4730987c9cc046c6db980a48aaed9eacc13c630d", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex fd02e1660..9a6e7a78a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -561,7 +561,7 @@ public class DLedgerCommitLog extends CommitLog {\n             request.setBatchMsgs(encodeResult.batchData);\n             dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n             if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n                 return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n             }\n             long wroteOffset = 0;\n", "next_change": {"commit": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 9a6e7a78a..3b9876030 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -542,28 +543,32 @@ public class DLedgerCommitLog extends CommitLog {\n         BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n         EncodeResult encodeResult;\n \n+        encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                    .status));\n+        }\n+\n         putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n         msgIdBuilder.setLength(0);\n         long elapsedTimeInLock;\n         long queueOffset;\n-        long msgNum = 0;\n+        int msgNum = 0;\n         try {\n             beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n-            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n-            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                        .status));\n-            }\n+            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n+            encodeResult.setQueueOffsetKey(queueOffset, true);\n             BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n             request.setGroup(dLedgerConfig.getGroup());\n             request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n             request.setBatchMsgs(encodeResult.batchData);\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+            AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (appendFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n                 return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n             }\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n+\n             long wroteOffset = 0;\n \n             int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n", "next_change": {"commit": "032577255ecd543908446aa272668c9f882bcce5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 3b9876030..011cbe169 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -413,237 +412,6 @@ public class DLedgerCommitLog extends CommitLog {\n         }\n     }\n \n-    @Override\n-    public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n-        String topic = msg.getTopic();\n-        setMessageInfo(msg,tranType);\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        AppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(msg);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult.status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, false);\n-            AppendEntryRequest request = new AppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBody(encodeResult.getData());\n-            dledgerFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = dledgerFuture.getPos() + DLedgerEntry.BODY_OFFSET;\n-\n-            int msgIdLength = (msg.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            String msgId = MessageDecoder.createMessageId(buffer, msg.getStoreHostBytes(), wroteOffset);\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.getData().length, msgId, System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            switch (tranType) {\n-                case MessageSysFlag.TRANSACTION_PREPARED_TYPE:\n-                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:\n-                    break;\n-                case MessageSysFlag.TRANSACTION_NOT_TYPE:\n-                case MessageSysFlag.TRANSACTION_COMMIT_TYPE:\n-                    // The next update ConsumeQueue information\n-                    DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + 1);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(appendResult.getWroteBytes());\n-        }\n-        return putMessageResult;\n-    }\n-\n-    @Override\n-    public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n-\n-        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-        if (messageExtBatch.getDelayTimeLevel() > 0) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-\n-        // Set the storage time\n-        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-\n-        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n-        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setBornHostV6Flag();\n-        }\n-\n-        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n-        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setStoreHostAddressV6Flag();\n-        }\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(messageExtBatch);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                    .status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        int msgNum = 0;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, true);\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (appendFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n-\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n-                }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n-                }\n-                msgNum++;\n-            }\n-\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n-                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            appendResult.setMsgNum(msgNum);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus\n-                    .UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(msgNum);\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(encodeResult.totalMsgLen);\n-        }\n-        return putMessageResult;\n-    }\n-\n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner msg) {\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "4730987c9cc046c6db980a48aaed9eacc13c630d", "message": "Merge commit", "committedDate": null}, {"oid": "432236e983ede0d40b13b0dd0128932afd09df01", "committedDate": "2021-05-20 11:01:39 +0800", "message": "Revert 2912 & 2866  and merge to develop branch(#2915)"}, {"oid": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "committedDate": "2021-06-21 20:35:32 +0800", "message": "[ISSUE 3019] Fixed bug with batch-sent message statistics"}, {"oid": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "committedDate": "2021-07-05 16:03:45 +0800", "message": "[ISSUE #3118] Fix type conversion exception"}, {"oid": "3183122c01cc2d0dc005634d028ccbcb62495bf6", "committedDate": "2021-07-06 21:47:12 +0800", "message": "Eliminate array copy (#2886)"}, {"oid": "032577255ecd543908446aa272668c9f882bcce5", "committedDate": "2021-07-28 14:49:45 +0800", "message": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode.  (#2889)"}, {"oid": "d7a830cf8f1b5713af7ff643c4e9f847d5331c6c", "committedDate": "2021-09-06 20:16:11 +0800", "message": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)"}, {"oid": "a779d69862c69db0d84fc27b35cfe5d08dc96377", "committedDate": "2021-12-07 12:35:43 +0800", "message": "Unnecessary boxing of primitives (#3596)"}, {"oid": "f395fa68373c7552ad18fb522da69197bf151669", "committedDate": "2021-12-08 17:14:26 +0800", "message": "[ISSUE #3601] Fix dledger put batch msg stats bug (#3600)"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "5c350af174c864992d3611e8432075762c2d3bd4", "committedDate": "2022-03-14 14:51:30 +0800", "message": "feature(store):[RIP-34]Support quorum write and adaptive degradation in master slave architecture (#3979)"}, {"oid": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "committedDate": "2022-04-22 14:19:02 +0800", "message": "[ISSUE #3914] Support multi dirs storage in DLedger"}, {"oid": "df3f8de4c03a282de052b130ae368ab00faca039", "committedDate": "2022-04-29 10:12:51 +0800", "message": "[ISSUE #4211] Fix diskMaxUsedSpaceRatio does not take effect in dLedger"}, {"oid": "5d2bf3573c683eb08f028b3a6496d1cbfe1af33b", "committedDate": "2022-05-09 09:42:36 +0800", "message": "[ISSUE #4254] use function computeIfAbsent replace if  (#4255)"}, {"oid": "0bc3b991e17ea6473923b4c07ff594181a1ae6b9", "committedDate": "2022-06-01 13:51:07 +0800", "message": "[ISSUE #4226] Message length exceeds the maximum length when sendback (#4338)"}, {"oid": "6273782d663483e5c278f9ef2de15ca137fe7949", "committedDate": "2022-06-16 13:42:48 +0800", "message": "[ISSUE apache#4058] DLedgerCommitLog support LMQ (#4059)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "e38da5590f0677e7b3d092c295218bcafa19149b", "committedDate": "2022-10-24 16:21:39 +0800", "message": "[ISSUE #3799]main compaction process (#5351)"}, {"oid": "49fc6eded9cc1b37eb4983023d6f89ce1f00347f", "committedDate": "2022-12-07 10:26:50 +0800", "message": "[ISSUE #5568] Support long length group and topic for pop mode consumption (#5611)"}, {"oid": "cc8823cf62a7137784bbe01562cd68118f3eac89", "committedDate": "2023-03-06 09:20:41 +0800", "message": "[ISSUE #5883] DLedger commit log should override the getData (#5879)"}, {"oid": "e3b8178871158e1a981915ac40c11e3a5e451922", "committedDate": "2023-04-26 11:24:47 +0800", "message": "[ISSUE #6570] Fix the issue that expectLogicOffset is greater than currentLogicOffset in consumeQueue build when the message is illegal  (#6641)"}]}, {"oid": "08c9b0110d0b6e32a3c7ce741d3296f337700430", "url": "https://github.com/apache/rocketmq/commit/08c9b0110d0b6e32a3c7ce741d3296f337700430", "message": "fix wroteOffset;update version;polish", "committedDate": "2020-11-10T15:15:02Z", "type": "commit"}, {"oid": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61", "url": "https://github.com/apache/rocketmq/commit/6e7488353dc2c35b6fba097da1b5c28ced7d2a61", "message": "polish", "committedDate": "2020-11-10T15:43:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTczNg==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520945736", "body": "This is my fault. The code will cause the writeOffset of the following message not to be updated, so as to get the wrong msgId. We need to fix it and ensure that the writeOffset of the first message is returned to the user.", "bodyText": "This is my fault. The code will cause the writeOffset of the following message not to be updated, so as to get the wrong msgId. We need to fix it and ensure that the writeOffset of the first message is returned to the user.", "bodyHTML": "<p dir=\"auto\">This is my fault. The code will cause the writeOffset of the following message not to be updated, so as to get the wrong msgId. We need to fix it and ensure that the writeOffset of the first message is returned to the user.</p>", "author": "RongtongJin", "createdAt": "2020-11-10T23:45:09Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -609,7 +735,122 @@ public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n \n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessages(MessageExtBatch messageExtBatch) {\n-        return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status)));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                if (isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "originalCommit": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NDM4Mw==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r522194383", "bodyText": "fixed", "author": "TerrellChen", "createdAt": "2020-11-12T15:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTczNg=="}], "type": "inlineReview", "revised_code": {"commit": "37798914b2ca712844e49f3986626dcffbfb89b5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 4db7d8bce..27d96578b 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -807,7 +811,7 @@ public class DLedgerCommitLog extends CommitLog {\n             }\n \n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4730987c9cc046c6db980a48aaed9eacc13c630d", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 4db7d8bce..9a6e7a78a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -807,7 +812,7 @@ public class DLedgerCommitLog extends CommitLog {\n             }\n \n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": {"commit": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 9a6e7a78a..90fd6f3f1 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -814,6 +819,7 @@ public class DLedgerCommitLog extends CommitLog {\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n             appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            appendResult.setMsgNum(msgNum);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n             log.error(\"Put message error\", e);\n", "next_change": {"commit": "821b91f0a25839550fe2fbdd8183ddb389147e78", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 90fd6f3f1..50078c9fb 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -776,62 +542,71 @@ public class DLedgerCommitLog extends CommitLog {\n                     .status)));\n         }\n \n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        int msgNum = 0;\n+        int batchNum = encodeResult.batchData.size();\n+        topicQueueLock.lock(encodeResult.queueOffsetKey);\n         try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, true);\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n-                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n-            }\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n+            defaultMessageStore.assignOffset(encodeResult.queueOffsetKey, messageExtBatch, (short) batchNum);\n+\n+            putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+            msgIdBuilder.setLength(0);\n+            long elapsedTimeInLock;\n+            long queueOffset;\n+            int msgNum = 0;\n+            try {\n+                beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+                queueOffset = getQueueOffsetByKey(messageExtBatch, tranType);\n+                encodeResult.setQueueOffsetKey(queueOffset, true);\n+                BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+                request.setGroup(dLedgerConfig.getGroup());\n+                request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+                request.setBatchMsgs(encodeResult.batchData);\n+                AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+                if (appendFuture.getPos() == -1) {\n+                    log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n+                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n                 }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n+                dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n+\n+                long wroteOffset = 0;\n+\n+                int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+                ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+                boolean isFirstOffset = true;\n+                long firstWroteOffset = 0;\n+                for (long pos : dledgerFuture.getPositions()) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    if (isFirstOffset) {\n+                        firstWroteOffset = wroteOffset;\n+                        isFirstOffset = false;\n+                    }\n+                    String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                    if (msgIdBuilder.length() > 0) {\n+                        msgIdBuilder.append(',').append(msgId);\n+                    } else {\n+                        msgIdBuilder.append(msgId);\n+                    }\n+                    msgNum++;\n                 }\n-                msgNum++;\n+\n+                elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n+                appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n+                        msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+                appendResult.setMsgNum(msgNum);\n+            } catch (Exception e) {\n+                log.error(\"Put message error\", e);\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            } finally {\n+                beginTimeInDledgerLock = 0;\n+                putMessageLock.unlock();\n             }\n \n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n-                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            appendResult.setMsgNum(msgNum);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            if (elapsedTimeInLock > 500) {\n+                log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n+                        elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n+            }\n         } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n+            topicQueueLock.unlock(encodeResult.queueOffsetKey);\n         }\n \n         return dledgerFuture.thenApply(appendEntryResponse -> {\n", "next_change": {"commit": "5c350af174c864992d3611e8432075762c2d3bd4", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 50078c9fb..42064a35a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -603,7 +570,7 @@ public class DLedgerCommitLog extends CommitLog {\n \n             if (elapsedTimeInLock > 500) {\n                 log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                        elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n+                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n             }\n         } finally {\n             topicQueueLock.unlock(encodeResult.queueOffsetKey);\n", "next_change": {"commit": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 42064a35a..01266ede7 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -506,74 +551,67 @@ public class DLedgerCommitLog extends CommitLog {\n         encodeResult = this.messageSerializer.serialize(messageExtBatch);\n         if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n             return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                .status)));\n+                    .status)));\n         }\n \n-        int batchNum = encodeResult.batchData.size();\n-        topicQueueLock.lock(encodeResult.queueOffsetKey);\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        int msgNum = 0;\n         try {\n-            defaultMessageStore.assignOffset(messageExtBatch, (short) batchNum);\n-\n-            putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-            msgIdBuilder.setLength(0);\n-            long elapsedTimeInLock;\n-            long queueOffset;\n-            int msgNum = 0;\n-            try {\n-                beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-                queueOffset = getQueueOffsetByKey(messageExtBatch, tranType);\n-                encodeResult.setQueueOffsetKey(queueOffset, true);\n-                BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-                request.setGroup(dLedgerConfig.getGroup());\n-                request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-                request.setBatchMsgs(encodeResult.batchData);\n-                AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-                if (appendFuture.getPos() == -1) {\n-                    log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n-                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGE_CACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n+            encodeResult.setQueueOffsetKey(queueOffset, true);\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (appendFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            }\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n+\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            long firstWroteOffset = 0;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                if (isFirstOffset) {\n+                    firstWroteOffset = wroteOffset;\n+                    isFirstOffset = false;\n                 }\n-                dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n-\n-                long wroteOffset = 0;\n-\n-                int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-                ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-                boolean isFirstOffset = true;\n-                long firstWroteOffset = 0;\n-                for (long pos : dledgerFuture.getPositions()) {\n-                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                    if (isFirstOffset) {\n-                        firstWroteOffset = wroteOffset;\n-                        isFirstOffset = false;\n-                    }\n-                    String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                    if (msgIdBuilder.length() > 0) {\n-                        msgIdBuilder.append(',').append(msgId);\n-                    } else {\n-                        msgIdBuilder.append(msgId);\n-                    }\n-                    msgNum++;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n                 }\n+                msgNum++;\n+            }\n \n-                elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-                appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n+            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-                appendResult.setMsgNum(msgNum);\n-            } catch (Exception e) {\n-                log.error(\"Put message error\", e);\n-                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n-            } finally {\n-                beginTimeInDledgerLock = 0;\n-                putMessageLock.unlock();\n-            }\n+            appendResult.setMsgNum(msgNum);\n+            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n+        } catch (Exception e) {\n+            log.error(\"Put message error\", e);\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+        } finally {\n+            beginTimeInDledgerLock = 0;\n+            putMessageLock.unlock();\n+        }\n \n-            if (elapsedTimeInLock > 500) {\n-                log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n+        if (elapsedTimeInLock > 500) {\n+            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n                     elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n-            }\n-        } finally {\n-            topicQueueLock.unlock(encodeResult.queueOffsetKey);\n         }\n \n         return dledgerFuture.thenApply(appendEntryResponse -> {\n", "next_change": {"commit": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 01266ede7..ac7d31fa3 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -551,67 +515,74 @@ public class DLedgerCommitLog extends CommitLog {\n         encodeResult = this.messageSerializer.serialize(messageExtBatch);\n         if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n             return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                    .status)));\n+                .status)));\n         }\n \n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        int msgNum = 0;\n+        int batchNum = encodeResult.batchData.size();\n+        topicQueueLock.lock(encodeResult.queueOffsetKey);\n         try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, true);\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (appendFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n-                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n-            }\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n-\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n+            defaultMessageStore.assignOffset(messageExtBatch, (short) batchNum);\n+\n+            putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+            msgIdBuilder.setLength(0);\n+            long elapsedTimeInLock;\n+            long queueOffset;\n+            int msgNum = 0;\n+            try {\n+                beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+                queueOffset = getQueueOffsetByKey(messageExtBatch, tranType);\n+                encodeResult.setQueueOffsetKey(queueOffset, true);\n+                BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+                request.setGroup(dLedgerConfig.getGroup());\n+                request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+                request.setBatchMsgs(encodeResult.batchData);\n+                AppendFuture<AppendEntryResponse> appendFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+                if (appendFuture.getPos() == -1) {\n+                    log.warn(\"HandleAppend return false due to error code {}\", appendFuture.get().getCode());\n+                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGE_CACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n                 }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n+                dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) appendFuture;\n+\n+                long wroteOffset = 0;\n+\n+                int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+                ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+                boolean isFirstOffset = true;\n+                long firstWroteOffset = 0;\n+                for (long pos : dledgerFuture.getPositions()) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    if (isFirstOffset) {\n+                        firstWroteOffset = wroteOffset;\n+                        isFirstOffset = false;\n+                    }\n+                    String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                    if (msgIdBuilder.length() > 0) {\n+                        msgIdBuilder.append(',').append(msgId);\n+                    } else {\n+                        msgIdBuilder.append(msgId);\n+                    }\n+                    msgNum++;\n                 }\n-                msgNum++;\n-            }\n \n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n+                elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n+                appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            appendResult.setMsgNum(msgNum);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n+                appendResult.setMsgNum(msgNum);\n+            } catch (Exception e) {\n+                log.error(\"Put message error\", e);\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            } finally {\n+                beginTimeInDledgerLock = 0;\n+                putMessageLock.unlock();\n+            }\n \n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n+            if (elapsedTimeInLock > 500) {\n+                log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n                     elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n+            }\n+        } finally {\n+            topicQueueLock.unlock(encodeResult.queueOffsetKey);\n         }\n \n         return dledgerFuture.thenApply(appendEntryResponse -> {\n", "next_change": {"commit": "e3b8178871158e1a981915ac40c11e3a5e451922", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex ac7d31fa3..ec5e86d70 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -581,6 +618,9 @@ public class DLedgerCommitLog extends CommitLog {\n                 log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n                     elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n             }\n+\n+            defaultMessageStore.increaseOffset(messageExtBatch, (short) batchNum);\n+\n         } finally {\n             topicQueueLock.unlock(encodeResult.queueOffsetKey);\n         }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "4730987c9cc046c6db980a48aaed9eacc13c630d", "message": "Merge commit", "committedDate": null}, {"oid": "432236e983ede0d40b13b0dd0128932afd09df01", "committedDate": "2021-05-20 11:01:39 +0800", "message": "Revert 2912 & 2866  and merge to develop branch(#2915)"}, {"oid": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "committedDate": "2021-06-21 20:35:32 +0800", "message": "[ISSUE 3019] Fixed bug with batch-sent message statistics"}, {"oid": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "committedDate": "2021-07-05 16:03:45 +0800", "message": "[ISSUE #3118] Fix type conversion exception"}, {"oid": "3183122c01cc2d0dc005634d028ccbcb62495bf6", "committedDate": "2021-07-06 21:47:12 +0800", "message": "Eliminate array copy (#2886)"}, {"oid": "032577255ecd543908446aa272668c9f882bcce5", "committedDate": "2021-07-28 14:49:45 +0800", "message": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode.  (#2889)"}, {"oid": "d7a830cf8f1b5713af7ff643c4e9f847d5331c6c", "committedDate": "2021-09-06 20:16:11 +0800", "message": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)"}, {"oid": "a779d69862c69db0d84fc27b35cfe5d08dc96377", "committedDate": "2021-12-07 12:35:43 +0800", "message": "Unnecessary boxing of primitives (#3596)"}, {"oid": "f395fa68373c7552ad18fb522da69197bf151669", "committedDate": "2021-12-08 17:14:26 +0800", "message": "[ISSUE #3601] Fix dledger put batch msg stats bug (#3600)"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "5c350af174c864992d3611e8432075762c2d3bd4", "committedDate": "2022-03-14 14:51:30 +0800", "message": "feature(store):[RIP-34]Support quorum write and adaptive degradation in master slave architecture (#3979)"}, {"oid": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "committedDate": "2022-04-22 14:19:02 +0800", "message": "[ISSUE #3914] Support multi dirs storage in DLedger"}, {"oid": "df3f8de4c03a282de052b130ae368ab00faca039", "committedDate": "2022-04-29 10:12:51 +0800", "message": "[ISSUE #4211] Fix diskMaxUsedSpaceRatio does not take effect in dLedger"}, {"oid": "5d2bf3573c683eb08f028b3a6496d1cbfe1af33b", "committedDate": "2022-05-09 09:42:36 +0800", "message": "[ISSUE #4254] use function computeIfAbsent replace if  (#4255)"}, {"oid": "0bc3b991e17ea6473923b4c07ff594181a1ae6b9", "committedDate": "2022-06-01 13:51:07 +0800", "message": "[ISSUE #4226] Message length exceeds the maximum length when sendback (#4338)"}, {"oid": "6273782d663483e5c278f9ef2de15ca137fe7949", "committedDate": "2022-06-16 13:42:48 +0800", "message": "[ISSUE apache#4058] DLedgerCommitLog support LMQ (#4059)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "e38da5590f0677e7b3d092c295218bcafa19149b", "committedDate": "2022-10-24 16:21:39 +0800", "message": "[ISSUE #3799]main compaction process (#5351)"}, {"oid": "49fc6eded9cc1b37eb4983023d6f89ce1f00347f", "committedDate": "2022-12-07 10:26:50 +0800", "message": "[ISSUE #5568] Support long length group and topic for pop mode consumption (#5611)"}, {"oid": "cc8823cf62a7137784bbe01562cd68118f3eac89", "committedDate": "2023-03-06 09:20:41 +0800", "message": "[ISSUE #5883] DLedger commit log should override the getData (#5879)"}, {"oid": "e3b8178871158e1a981915ac40c11e3a5e451922", "committedDate": "2023-04-26 11:24:47 +0800", "message": "[ISSUE #6570] Fix the issue that expectLogicOffset is greater than currentLogicOffset in consumeQueue build when the message is illegal  (#6641)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTk5MQ==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520945991", "body": "Same as below", "bodyText": "Same as below", "bodyHTML": "<p dir=\"auto\">Same as below</p>", "author": "RongtongJin", "createdAt": "2020-11-10T23:45:51Z", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,127 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                if (isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "originalCommit": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NDQzMA==", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r522194430", "bodyText": "fixed", "author": "TerrellChen", "createdAt": "2020-11-12T15:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTk5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "37798914b2ca712844e49f3986626dcffbfb89b5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 4db7d8bce..27d96578b 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -585,7 +587,7 @@ public class DLedgerCommitLog extends CommitLog {\n             }\n \n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "4730987c9cc046c6db980a48aaed9eacc13c630d", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 4db7d8bce..9a6e7a78a 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -585,7 +587,7 @@ public class DLedgerCommitLog extends CommitLog {\n             }\n \n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n", "next_change": {"commit": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 9a6e7a78a..90fd6f3f1 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -589,6 +592,7 @@ public class DLedgerCommitLog extends CommitLog {\n             elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n             appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n                     msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            appendResult.setMsgNum(msgNum);\n             DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n         } catch (Exception e) {\n             log.error(\"Put message error\", e);\n", "next_change": {"commit": "032577255ecd543908446aa272668c9f882bcce5", "changed_code": [{"header": "diff --git a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\nindex 90fd6f3f1..011cbe169 100644\n--- a/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n+++ b/store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java\n", "chunk": "@@ -413,235 +412,6 @@ public class DLedgerCommitLog extends CommitLog {\n         }\n     }\n \n-    @Override\n-    public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n-        String topic = msg.getTopic();\n-        setMessageInfo(msg,tranType);\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        AppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(msg);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult.status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, false);\n-            AppendEntryRequest request = new AppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBody(encodeResult.getData());\n-            dledgerFuture = (AppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = dledgerFuture.getPos() + DLedgerEntry.BODY_OFFSET;\n-\n-            int msgIdLength = (msg.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            String msgId = MessageDecoder.createMessageId(buffer, msg.getStoreHostBytes(), wroteOffset);\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.getData().length, msgId, System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            switch (tranType) {\n-                case MessageSysFlag.TRANSACTION_PREPARED_TYPE:\n-                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:\n-                    break;\n-                case MessageSysFlag.TRANSACTION_NOT_TYPE:\n-                case MessageSysFlag.TRANSACTION_COMMIT_TYPE:\n-                    // The next update ConsumeQueue information\n-                    DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + 1);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).incrementAndGet();\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(topic).addAndGet(appendResult.getWroteBytes());\n-        }\n-        return putMessageResult;\n-    }\n-\n-    @Override\n-    public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n-\n-        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-        if (messageExtBatch.getDelayTimeLevel() > 0) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n-        }\n-\n-        // Set the storage time\n-        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n-\n-        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n-\n-        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n-        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setBornHostV6Flag();\n-        }\n-\n-        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n-        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n-            messageExtBatch.setStoreHostAddressV6Flag();\n-        }\n-\n-        // Back to Results\n-        AppendMessageResult appendResult;\n-        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n-        EncodeResult encodeResult;\n-\n-        encodeResult = this.messageSerializer.serialize(messageExtBatch);\n-        if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n-            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n-                    .status));\n-        }\n-\n-        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n-        msgIdBuilder.setLength(0);\n-        long elapsedTimeInLock;\n-        long queueOffset;\n-        int msgNum = 0;\n-        try {\n-            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n-            queueOffset = getQueueOffsetByKey(encodeResult.queueOffsetKey, tranType);\n-            encodeResult.setQueueOffsetKey(queueOffset, true);\n-            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n-            request.setGroup(dLedgerConfig.getGroup());\n-            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n-            request.setBatchMsgs(encodeResult.batchData);\n-            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n-            if (dledgerFuture.getPos() == -1) {\n-                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n-                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n-            }\n-            long wroteOffset = 0;\n-\n-            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n-            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n-\n-            boolean isFirstOffset = true;\n-            long firstWroteOffset = 0;\n-            for (long pos : dledgerFuture.getPositions()) {\n-                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n-                if (isFirstOffset) {\n-                    firstWroteOffset = wroteOffset;\n-                    isFirstOffset = false;\n-                }\n-                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n-                if (msgIdBuilder.length() > 0) {\n-                    msgIdBuilder.append(',').append(msgId);\n-                } else {\n-                    msgIdBuilder.append(msgId);\n-                }\n-                msgNum++;\n-            }\n-\n-            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n-            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, firstWroteOffset, encodeResult.totalMsgLen,\n-                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n-            appendResult.setMsgNum(msgNum);\n-            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);\n-        } catch (Exception e) {\n-            log.error(\"Put message error\", e);\n-            return new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus\n-                    .UNKNOWN_ERROR));\n-        } finally {\n-            beginTimeInDledgerLock = 0;\n-            putMessageLock.unlock();\n-        }\n-\n-        if (elapsedTimeInLock > 500) {\n-            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\",\n-                    elapsedTimeInLock, messageExtBatch.getBody().length, appendResult);\n-        }\n-\n-        PutMessageStatus putMessageStatus = PutMessageStatus.UNKNOWN_ERROR;\n-        try {\n-            AppendEntryResponse appendEntryResponse = dledgerFuture.get(3, TimeUnit.SECONDS);\n-            switch (DLedgerResponseCode.valueOf(appendEntryResponse.getCode())) {\n-                case SUCCESS:\n-                    putMessageStatus = PutMessageStatus.PUT_OK;\n-                    break;\n-                case INCONSISTENT_LEADER:\n-                case NOT_LEADER:\n-                case LEADER_NOT_READY:\n-                case DISK_FULL:\n-                    putMessageStatus = PutMessageStatus.SERVICE_NOT_AVAILABLE;\n-                    break;\n-                case WAIT_QUORUM_ACK_TIMEOUT:\n-                    //Do not return flush_slave_timeout to the client, for the ons client will ignore it.\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-                case LEADER_PENDING_FULL:\n-                    putMessageStatus = PutMessageStatus.OS_PAGECACHE_BUSY;\n-                    break;\n-            }\n-        } catch (Throwable t) {\n-            log.error(\"Failed to get dledger append result\", t);\n-        }\n-\n-        PutMessageResult putMessageResult = new PutMessageResult(putMessageStatus, appendResult);\n-        if (putMessageStatus == PutMessageStatus.PUT_OK) {\n-            // Statistics\n-            storeStatsService.getSinglePutMessageTopicTimesTotal(messageExtBatch.getTopic()).addAndGet(msgNum);\n-            storeStatsService.getSinglePutMessageTopicSizeTotal(messageExtBatch.getTopic()).addAndGet(encodeResult.totalMsgLen);\n-        }\n-        return putMessageResult;\n-    }\n-\n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessage(MessageExtBrokerInner msg) {\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "4730987c9cc046c6db980a48aaed9eacc13c630d", "message": "Merge commit", "committedDate": null}, {"oid": "432236e983ede0d40b13b0dd0128932afd09df01", "committedDate": "2021-05-20 11:01:39 +0800", "message": "Revert 2912 & 2866  and merge to develop branch(#2915)"}, {"oid": "2b236c3cd8ce2883c0188c759ccaa644fea8e00c", "committedDate": "2021-06-21 20:35:32 +0800", "message": "[ISSUE 3019] Fixed bug with batch-sent message statistics"}, {"oid": "65915891828ef5314209dd8b6df41b2f4da7e2c7", "committedDate": "2021-07-05 16:03:45 +0800", "message": "[ISSUE #3118] Fix type conversion exception"}, {"oid": "3183122c01cc2d0dc005634d028ccbcb62495bf6", "committedDate": "2021-07-06 21:47:12 +0800", "message": "Eliminate array copy (#2886)"}, {"oid": "032577255ecd543908446aa272668c9f882bcce5", "committedDate": "2021-07-28 14:49:45 +0800", "message": "[ISSUE #2883] [Part E] Improve produce performance in M/S mode.  (#2889)"}, {"oid": "d7a830cf8f1b5713af7ff643c4e9f847d5331c6c", "committedDate": "2021-09-06 20:16:11 +0800", "message": "[ISSUE 3194] [PART A] Use LongAdder instead of AtomicLong in BrokerStatsService to improve performance. (#3195)"}, {"oid": "a779d69862c69db0d84fc27b35cfe5d08dc96377", "committedDate": "2021-12-07 12:35:43 +0800", "message": "Unnecessary boxing of primitives (#3596)"}, {"oid": "f395fa68373c7552ad18fb522da69197bf151669", "committedDate": "2021-12-08 17:14:26 +0800", "message": "[ISSUE #3601] Fix dledger put batch msg stats bug (#3600)"}, {"oid": "821b91f0a25839550fe2fbdd8183ddb389147e78", "committedDate": "2022-02-08 10:38:41 +0800", "message": "support batch consume-queue."}, {"oid": "e8cf1338743a3f778145c7d4b4449769c1e5b18a", "committedDate": "2022-02-08 10:38:41 +0800", "message": "[ISSUE #3708] Both CQ and BCQ need to be supported in DefaultMessageStore. (#3712)"}, {"oid": "0d15e6c2d5b436081c91fa6d8e86e2e2b6be18e9", "committedDate": "2022-02-25 17:43:06 +0800", "message": "Merge 5.0.0-alpha-merge with develop branch"}, {"oid": "5c350af174c864992d3611e8432075762c2d3bd4", "committedDate": "2022-03-14 14:51:30 +0800", "message": "feature(store):[RIP-34]Support quorum write and adaptive degradation in master slave architecture (#3979)"}, {"oid": "2bd9059016448ebcb0bb1cf64ed944eba98bb38e", "committedDate": "2022-04-22 14:19:02 +0800", "message": "[ISSUE #3914] Support multi dirs storage in DLedger"}, {"oid": "df3f8de4c03a282de052b130ae368ab00faca039", "committedDate": "2022-04-29 10:12:51 +0800", "message": "[ISSUE #4211] Fix diskMaxUsedSpaceRatio does not take effect in dLedger"}, {"oid": "5d2bf3573c683eb08f028b3a6496d1cbfe1af33b", "committedDate": "2022-05-09 09:42:36 +0800", "message": "[ISSUE #4254] use function computeIfAbsent replace if  (#4255)"}, {"oid": "0bc3b991e17ea6473923b4c07ff594181a1ae6b9", "committedDate": "2022-06-01 13:51:07 +0800", "message": "[ISSUE #4226] Message length exceeds the maximum length when sendback (#4338)"}, {"oid": "6273782d663483e5c278f9ef2de15ca137fe7949", "committedDate": "2022-06-16 13:42:48 +0800", "message": "[ISSUE apache#4058] DLedgerCommitLog support LMQ (#4059)"}, {"oid": "3fadc8f30c898f9ddd6730ba4ac428894a1c1077", "committedDate": "2022-07-08 15:03:54 +0800", "message": "Merge branch '5.0.0-beta' into develop"}, {"oid": "e38da5590f0677e7b3d092c295218bcafa19149b", "committedDate": "2022-10-24 16:21:39 +0800", "message": "[ISSUE #3799]main compaction process (#5351)"}, {"oid": "49fc6eded9cc1b37eb4983023d6f89ce1f00347f", "committedDate": "2022-12-07 10:26:50 +0800", "message": "[ISSUE #5568] Support long length group and topic for pop mode consumption (#5611)"}, {"oid": "cc8823cf62a7137784bbe01562cd68118f3eac89", "committedDate": "2023-03-06 09:20:41 +0800", "message": "[ISSUE #5883] DLedger commit log should override the getData (#5879)"}, {"oid": "e3b8178871158e1a981915ac40c11e3a5e451922", "committedDate": "2023-04-26 11:24:47 +0800", "message": "[ISSUE #6570] Fix the issue that expectLogicOffset is greater than currentLogicOffset in consumeQueue build when the message is illegal  (#6641)"}]}, {"oid": "1adcb5c00e9c759ce029438ac183f19e5b241854", "url": "https://github.com/apache/rocketmq/commit/1adcb5c00e9c759ce029438ac183f19e5b241854", "message": "Merge branch 'develop' of github.com:apache/rocketmq into issue_690", "committedDate": "2020-11-12T14:35:14Z", "type": "commit"}, {"oid": "37798914b2ca712844e49f3986626dcffbfb89b5", "url": "https://github.com/apache/rocketmq/commit/37798914b2ca712844e49f3986626dcffbfb89b5", "message": "fix wrong wroteOffset of AppendMessageResult", "committedDate": "2020-11-12T15:26:47Z", "type": "commit"}, {"oid": "4dbf7d6c9f8a05763d5202f8151b5ffa5bb32661", "url": "https://github.com/apache/rocketmq/commit/4dbf7d6c9f8a05763d5202f8151b5ffa5bb32661", "message": "move serialization out of lock in async method", "committedDate": "2020-11-12T15:29:36Z", "type": "commit"}]}