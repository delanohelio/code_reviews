{"pr_number": 2810, "pr_title": "Extend Wikidata extension to support arbitrary Wikibase instances", "pr_author": "afkbrb", "pr_createdAt": "2020-06-25T07:05:48Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2810", "merge_commit": "7d4e182c7551ba828febe6b26d4aa0c0fd4fb578", "timeline": [{"oid": "a3fab26cca508ea92f013cfba327d82b95de2c5c", "url": "https://github.com/OpenRefine/OpenRefine/commit/a3fab26cca508ea92f013cfba327d82b95de2c5c", "message": "Fix the text format guesser so it doesn't inappropriately guess WikiText (#2924)\n\n* Fix text guesser so it doesn't guess wikitext\r\n\r\nFixes #2850\r\n- Add simple magic detector for zip & gzip files to keep\r\n  it from attempting to guess binary files\r\n- Add a counter for C0 controls for the same reason\r\n- Tighten wikitable counters to require marker at\r\n  beginning of the line, per the specification\r\n- Refactor to use Apache Commons instead of private\r\n  counting methods\r\n- Add tests for most TextGuesser formats\r\n\r\n* Remove misplaced duplicate test data file\r\n\r\n* Fix LGTM warning + minor cleanups\r\n\r\n* Use BoundedInputStream to prevent runaway lines", "committedDate": "2020-07-15T06:56:00Z", "type": "forcePushed"}, {"oid": "b579193f51503813103ca9819a1b4631b73ff98d", "url": "https://github.com/OpenRefine/OpenRefine/commit/b579193f51503813103ca9819a1b4631b73ff98d", "message": "setup the manifest framework", "committedDate": "2020-07-15T11:14:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0Mjc0Nw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456942747", "body": "Do we want/need to support multiple simultaneous logins? It seems like the user may want to be authenticated to multiple Wikibases and then choose which one to use for a given operation.", "bodyText": "Do we want/need to support multiple simultaneous logins? It seems like the user may want to be authenticated to multiple Wikibases and then choose which one to use for a given operation.", "bodyHTML": "<p dir=\"auto\">Do we want/need to support multiple simultaneous logins? It seems like the user may want to be authenticated to multiple Wikibases and then choose which one to use for a given operation.</p>", "author": "tfmorris", "createdAt": "2020-07-19T18:59:03Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java", "diffHunk": "@@ -145,26 +151,28 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             }\n         }\n \n-        if (isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(username, password) && remember) {\n+            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n                 for (HttpCookie cookie : cookies) {\n                     setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n                 }\n \n+                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, WIKIBASE_USERNAME_COOKIE_KEY, connection.getCurrentUser());\n+                setCookie(response, USERNAME, connection.getCurrentUser());", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..04ef78ba8 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -151,28 +145,26 @@ public class LoginCommand extends Command {\n             }\n         }\n \n-        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n+            if (manager.login(username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n                 for (HttpCookie cookie : cookies) {\n                     setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n                 }\n \n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, USERNAME, connection.getCurrentUser());\n+                setCookie(response, WIKIBASE_USERNAME_COOKIE_KEY, connection.getCurrentUser());\n             } else {\n                 removeUsernamePasswordCookies(request, response);\n             }\n             removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n+        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n                 setCookie(response, CONSUMER_TOKEN, consumerToken);\n                 setCookie(response, CONSUMER_SECRET, consumerSecret);\n                 setCookie(response, ACCESS_TOKEN, accessToken);\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex 04ef78ba8..fbf100048 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -145,26 +151,28 @@ public class LoginCommand extends Command {\n             }\n         }\n \n-        if (isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(username, password) && remember) {\n+            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n                 for (HttpCookie cookie : cookies) {\n                     setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n                 }\n \n+                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, WIKIBASE_USERNAME_COOKIE_KEY, connection.getCurrentUser());\n+                setCookie(response, USERNAME, connection.getCurrentUser());\n             } else {\n                 removeUsernamePasswordCookies(request, response);\n             }\n             removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 setCookie(response, CONSUMER_TOKEN, consumerToken);\n                 setCookie(response, CONSUMER_SECRET, consumerSecret);\n                 setCookie(response, ACCESS_TOKEN, accessToken);\n", "next_change": {"commit": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..1324acc01 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -96,91 +103,69 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+        if (isBlank(username) && isBlank(password) && isBlank(consumerToken)\n                 && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n-            // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n+            // In this case, we use cookies to login, and we will always remember the credentials in cookies.\n             remember = true;\n-            Cookie[] cookies = request.getCookies();\n-\n-            for (Cookie cookie : cookies) {\n-                String value = getCookieValue(cookie);\n-                switch (cookie.getName()) {\n-                    case API_ENDPOINT:\n-                        wikibaseApiEndpoint = value;\n-                        break;\n-                    case USERNAME:\n-                        username = value;\n-                        break;\n-                    case CONSUMER_TOKEN:\n-                        consumerToken = value;\n-                        break;\n-                    case CONSUMER_SECRET:\n-                        consumerSecret = value;\n-                        break;\n-                    case ACCESS_TOKEN:\n-                        accessToken = value;\n-                        break;\n-                    case ACCESS_SECRET:\n-                        accessSecret = value;\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n+            Map<String, String> cookieMap = processCookiesWithPrefix(mediawikiApiEndpointPrefix, request.getCookies());\n+            username = cookieMap.get(USERNAME);\n+            consumerToken = cookieMap.get(CONSUMER_TOKEN);\n+            consumerSecret = cookieMap.get(CONSUMER_SECRET);\n+            accessToken = cookieMap.get(ACCESS_TOKEN);\n+            accessSecret = cookieMap.get(ACCESS_SECRET);\n \n             if (isBlank(consumerToken) && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n                 // Try logging in with the cookies of a password-based connection.\n                 List<Cookie> cookieList = new ArrayList<>();\n-                for (Cookie cookie : cookies) {\n-                    if (cookie.getName().startsWith(WIKIDATA_COOKIE_PREFIX)) {\n-                        String cookieName = cookie.getName().substring(WIKIDATA_COOKIE_PREFIX.length());\n-                        Cookie newCookie = new Cookie(cookieName, getCookieValue(cookie));\n+                for (Map.Entry<String, String> entry : cookieMap.entrySet()) {\n+                    if (entry.getKey().startsWith(WIKIBASE_COOKIE_PREFIX)) {\n+                        String name = entry.getKey().substring(WIKIBASE_COOKIE_PREFIX.length());\n+                        Cookie newCookie = new Cookie(name, entry.getValue());\n                         cookieList.add(newCookie);\n                     }\n                 }\n \n-                if (cookieList.size() > 0 && isNotBlank(username) && isNotBlank(wikibaseApiEndpoint)) {\n-                    removeOwnerOnlyConsumerCookies(request, response);\n-                    if (manager.login(wikibaseApiEndpoint, username, cookieList)) {\n+                if (cookieList.size() > 0 && isNotBlank(username)) {\n+                    removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+                    if (manager.login(mediawikiApiEndpoint, username, cookieList)) {\n                         respond(request, response);\n                         return;\n                     } else {\n-                        removeUsernamePasswordCookies(request, response);\n+                        removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n                     }\n                 }\n             }\n         }\n \n-        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n+            if (manager.login(mediawikiApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n+                String prefix = mediawikiApiEndpointPrefix + WIKIBASE_COOKIE_PREFIX;\n                 for (HttpCookie cookie : cookies) {\n-                    setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n+                    setCookie(response, prefix + cookie.getName(), cookie.getValue());\n                 }\n \n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, USERNAME, connection.getCurrentUser());\n+                setCookie(response, mediawikiApiEndpointPrefix + USERNAME, connection.getCurrentUser());\n             } else {\n-                removeUsernamePasswordCookies(request, response);\n+                removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n-                setCookie(response, CONSUMER_TOKEN, consumerToken);\n-                setCookie(response, CONSUMER_SECRET, consumerSecret);\n-                setCookie(response, ACCESS_TOKEN, accessToken);\n-                setCookie(response, ACCESS_SECRET, accessSecret);\n+            removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(mediawikiApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_TOKEN, consumerToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_SECRET, consumerSecret);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_TOKEN, accessToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_SECRET, accessSecret);\n             } else {\n-                removeOwnerOnlyConsumerCookies(request, response);\n+                removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeUsernamePasswordCookies(request, response);\n+            removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n         }\n \n         respond(request, response);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456943047", "body": "Do we want to continue to support password based logins at all? I'd much prefer that we don't have access to the users' passwords unless we absolutely have to.", "bodyText": "Do we want to continue to support password based logins at all? I'd much prefer that we don't have access to the users' passwords unless we absolutely have to.", "bodyHTML": "<p dir=\"auto\">Do we want to continue to support password based logins at all? I'd much prefer that we don't have access to the users' passwords unless we absolutely have to.</p>", "author": "tfmorris", "createdAt": "2020-07-19T19:01:42Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java", "diffHunk": "@@ -79,29 +80,37 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             manager.logout();\n             removeUsernamePasswordCookies(request, response);\n             removeOwnerOnlyConsumerCookies(request, response);\n+            removeCookie(response, API_ENDPOINT);\n             respond(request, response);\n             return; // return directly\n         }\n \n         boolean remember = \"on\".equals(request.getParameter(\"remember-credentials\"));\n \n         // Credentials from parameters have higher priority than those from cookies.\n+        String wikibaseApiEndpoint = request.getParameter(API_ENDPOINT);\n         String username = request.getParameter(USERNAME);\n         String password = request.getParameter(PASSWORD);\n         String consumerToken = request.getParameter(CONSUMER_TOKEN);\n         String consumerSecret = request.getParameter(CONSUMER_SECRET);\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(username) && isBlank(password) && isBlank(consumerToken) &&\n-                isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n+        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTM3OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456981378", "bodyText": "A Wikibase instance may don't have the OAuth extension installed, so password based logins should be supported.", "author": "afkbrb", "createdAt": "2020-07-20T01:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzU0Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r457163543", "bodyText": "By the way, MediaWiki makes it possible to create \"bot passwords\", which are alternative passwords for the account that also come with restricted permissions. We should encourage users to create bot passwords to use them from OpenRefine: https://addshore.com/2020/07/using-openrefine-with-wikidata-for-the-first-time/", "author": "wetneb", "createdAt": "2020-07-20T08:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2ODc2Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r457168763", "bodyText": "To handle \"bot passwords\", do we need to change the current code?", "author": "afkbrb", "createdAt": "2020-07-20T08:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5NzMyOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r457197328", "bodyText": "No, it is the same API - we could just consider tweaking the UI to encourage users to create such passwords. Arguably that is a different issue, independent from this PR.", "author": "wetneb", "createdAt": "2020-07-20T09:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzOTYzNw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r458339637", "bodyText": "Yes, we should definitely strongly encourage this. It looks like \"bot\" usernames can be identified by the @ sign that they contain, so we can issue strong warning if we don't see it (and also encourage them to use OAuth if available).\nI'm fine with that being a separate PR, as long as we don't lose track of it.", "author": "tfmorris", "createdAt": "2020-07-21T19:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5OTk5OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475099998", "bodyText": "I've created #3108 to track this.", "author": "tfmorris", "createdAt": "2020-08-22T15:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..04ef78ba8 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -88,7 +86,6 @@ public class LoginCommand extends Command {\n         boolean remember = \"on\".equals(request.getParameter(\"remember-credentials\"));\n \n         // Credentials from parameters have higher priority than those from cookies.\n-        String wikibaseApiEndpoint = request.getParameter(API_ENDPOINT);\n         String username = request.getParameter(USERNAME);\n         String password = request.getParameter(PASSWORD);\n         String consumerToken = request.getParameter(CONSUMER_TOKEN);\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex 04ef78ba8..fbf100048 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -86,6 +88,7 @@ public class LoginCommand extends Command {\n         boolean remember = \"on\".equals(request.getParameter(\"remember-credentials\"));\n \n         // Credentials from parameters have higher priority than those from cookies.\n+        String wikibaseApiEndpoint = request.getParameter(API_ENDPOINT);\n         String username = request.getParameter(USERNAME);\n         String password = request.getParameter(PASSWORD);\n         String consumerToken = request.getParameter(CONSUMER_TOKEN);\n", "next_change": {"commit": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..1324acc01 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -88,7 +96,6 @@ public class LoginCommand extends Command {\n         boolean remember = \"on\".equals(request.getParameter(\"remember-credentials\"));\n \n         // Credentials from parameters have higher priority than those from cookies.\n-        String wikibaseApiEndpoint = request.getParameter(API_ENDPOINT);\n         String username = request.getParameter(USERNAME);\n         String password = request.getParameter(PASSWORD);\n         String consumerToken = request.getParameter(CONSUMER_TOKEN);\n", "next_change": null}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..1324acc01 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -96,91 +103,69 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+        if (isBlank(username) && isBlank(password) && isBlank(consumerToken)\n                 && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n-            // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n+            // In this case, we use cookies to login, and we will always remember the credentials in cookies.\n             remember = true;\n-            Cookie[] cookies = request.getCookies();\n-\n-            for (Cookie cookie : cookies) {\n-                String value = getCookieValue(cookie);\n-                switch (cookie.getName()) {\n-                    case API_ENDPOINT:\n-                        wikibaseApiEndpoint = value;\n-                        break;\n-                    case USERNAME:\n-                        username = value;\n-                        break;\n-                    case CONSUMER_TOKEN:\n-                        consumerToken = value;\n-                        break;\n-                    case CONSUMER_SECRET:\n-                        consumerSecret = value;\n-                        break;\n-                    case ACCESS_TOKEN:\n-                        accessToken = value;\n-                        break;\n-                    case ACCESS_SECRET:\n-                        accessSecret = value;\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n+            Map<String, String> cookieMap = processCookiesWithPrefix(mediawikiApiEndpointPrefix, request.getCookies());\n+            username = cookieMap.get(USERNAME);\n+            consumerToken = cookieMap.get(CONSUMER_TOKEN);\n+            consumerSecret = cookieMap.get(CONSUMER_SECRET);\n+            accessToken = cookieMap.get(ACCESS_TOKEN);\n+            accessSecret = cookieMap.get(ACCESS_SECRET);\n \n             if (isBlank(consumerToken) && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n                 // Try logging in with the cookies of a password-based connection.\n                 List<Cookie> cookieList = new ArrayList<>();\n-                for (Cookie cookie : cookies) {\n-                    if (cookie.getName().startsWith(WIKIDATA_COOKIE_PREFIX)) {\n-                        String cookieName = cookie.getName().substring(WIKIDATA_COOKIE_PREFIX.length());\n-                        Cookie newCookie = new Cookie(cookieName, getCookieValue(cookie));\n+                for (Map.Entry<String, String> entry : cookieMap.entrySet()) {\n+                    if (entry.getKey().startsWith(WIKIBASE_COOKIE_PREFIX)) {\n+                        String name = entry.getKey().substring(WIKIBASE_COOKIE_PREFIX.length());\n+                        Cookie newCookie = new Cookie(name, entry.getValue());\n                         cookieList.add(newCookie);\n                     }\n                 }\n \n-                if (cookieList.size() > 0 && isNotBlank(username) && isNotBlank(wikibaseApiEndpoint)) {\n-                    removeOwnerOnlyConsumerCookies(request, response);\n-                    if (manager.login(wikibaseApiEndpoint, username, cookieList)) {\n+                if (cookieList.size() > 0 && isNotBlank(username)) {\n+                    removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+                    if (manager.login(mediawikiApiEndpoint, username, cookieList)) {\n                         respond(request, response);\n                         return;\n                     } else {\n-                        removeUsernamePasswordCookies(request, response);\n+                        removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n                     }\n                 }\n             }\n         }\n \n-        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n+            if (manager.login(mediawikiApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n+                String prefix = mediawikiApiEndpointPrefix + WIKIBASE_COOKIE_PREFIX;\n                 for (HttpCookie cookie : cookies) {\n-                    setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n+                    setCookie(response, prefix + cookie.getName(), cookie.getValue());\n                 }\n \n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, USERNAME, connection.getCurrentUser());\n+                setCookie(response, mediawikiApiEndpointPrefix + USERNAME, connection.getCurrentUser());\n             } else {\n-                removeUsernamePasswordCookies(request, response);\n+                removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n-                setCookie(response, CONSUMER_TOKEN, consumerToken);\n-                setCookie(response, CONSUMER_SECRET, consumerSecret);\n-                setCookie(response, ACCESS_TOKEN, accessToken);\n-                setCookie(response, ACCESS_SECRET, accessSecret);\n+            removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(mediawikiApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_TOKEN, consumerToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_SECRET, consumerSecret);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_TOKEN, accessToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_SECRET, accessSecret);\n             } else {\n-                removeOwnerOnlyConsumerCookies(request, response);\n+                removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeUsernamePasswordCookies(request, response);\n+            removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n         }\n \n         respond(request, response);\n", "next_change": null}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex 04ef78ba8..fbf100048 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -93,8 +96,8 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(username) && isBlank(password) && isBlank(consumerToken) &&\n-                isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n+        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+                && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n             // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n             remember = true;\n             Cookie[] cookies = request.getCookies();\n", "next_change": {"commit": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..1324acc01 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -96,91 +103,69 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+        if (isBlank(username) && isBlank(password) && isBlank(consumerToken)\n                 && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n-            // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n+            // In this case, we use cookies to login, and we will always remember the credentials in cookies.\n             remember = true;\n-            Cookie[] cookies = request.getCookies();\n-\n-            for (Cookie cookie : cookies) {\n-                String value = getCookieValue(cookie);\n-                switch (cookie.getName()) {\n-                    case API_ENDPOINT:\n-                        wikibaseApiEndpoint = value;\n-                        break;\n-                    case USERNAME:\n-                        username = value;\n-                        break;\n-                    case CONSUMER_TOKEN:\n-                        consumerToken = value;\n-                        break;\n-                    case CONSUMER_SECRET:\n-                        consumerSecret = value;\n-                        break;\n-                    case ACCESS_TOKEN:\n-                        accessToken = value;\n-                        break;\n-                    case ACCESS_SECRET:\n-                        accessSecret = value;\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n+            Map<String, String> cookieMap = processCookiesWithPrefix(mediawikiApiEndpointPrefix, request.getCookies());\n+            username = cookieMap.get(USERNAME);\n+            consumerToken = cookieMap.get(CONSUMER_TOKEN);\n+            consumerSecret = cookieMap.get(CONSUMER_SECRET);\n+            accessToken = cookieMap.get(ACCESS_TOKEN);\n+            accessSecret = cookieMap.get(ACCESS_SECRET);\n \n             if (isBlank(consumerToken) && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n                 // Try logging in with the cookies of a password-based connection.\n                 List<Cookie> cookieList = new ArrayList<>();\n-                for (Cookie cookie : cookies) {\n-                    if (cookie.getName().startsWith(WIKIDATA_COOKIE_PREFIX)) {\n-                        String cookieName = cookie.getName().substring(WIKIDATA_COOKIE_PREFIX.length());\n-                        Cookie newCookie = new Cookie(cookieName, getCookieValue(cookie));\n+                for (Map.Entry<String, String> entry : cookieMap.entrySet()) {\n+                    if (entry.getKey().startsWith(WIKIBASE_COOKIE_PREFIX)) {\n+                        String name = entry.getKey().substring(WIKIBASE_COOKIE_PREFIX.length());\n+                        Cookie newCookie = new Cookie(name, entry.getValue());\n                         cookieList.add(newCookie);\n                     }\n                 }\n \n-                if (cookieList.size() > 0 && isNotBlank(username) && isNotBlank(wikibaseApiEndpoint)) {\n-                    removeOwnerOnlyConsumerCookies(request, response);\n-                    if (manager.login(wikibaseApiEndpoint, username, cookieList)) {\n+                if (cookieList.size() > 0 && isNotBlank(username)) {\n+                    removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+                    if (manager.login(mediawikiApiEndpoint, username, cookieList)) {\n                         respond(request, response);\n                         return;\n                     } else {\n-                        removeUsernamePasswordCookies(request, response);\n+                        removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n                     }\n                 }\n             }\n         }\n \n-        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n+            if (manager.login(mediawikiApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n+                String prefix = mediawikiApiEndpointPrefix + WIKIBASE_COOKIE_PREFIX;\n                 for (HttpCookie cookie : cookies) {\n-                    setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n+                    setCookie(response, prefix + cookie.getName(), cookie.getValue());\n                 }\n \n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, USERNAME, connection.getCurrentUser());\n+                setCookie(response, mediawikiApiEndpointPrefix + USERNAME, connection.getCurrentUser());\n             } else {\n-                removeUsernamePasswordCookies(request, response);\n+                removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n-                setCookie(response, CONSUMER_TOKEN, consumerToken);\n-                setCookie(response, CONSUMER_SECRET, consumerSecret);\n-                setCookie(response, ACCESS_TOKEN, accessToken);\n-                setCookie(response, ACCESS_SECRET, accessSecret);\n+            removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(mediawikiApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_TOKEN, consumerToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_SECRET, consumerSecret);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_TOKEN, accessToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_SECRET, accessSecret);\n             } else {\n-                removeOwnerOnlyConsumerCookies(request, response);\n+                removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeUsernamePasswordCookies(request, response);\n+            removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n         }\n \n         respond(request, response);\n", "next_change": null}]}}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..04ef78ba8 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -96,8 +93,8 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n-                && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n+        if (isBlank(username) && isBlank(password) && isBlank(consumerToken) &&\n+                isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n             // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n             remember = true;\n             Cookie[] cookies = request.getCookies();\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex 04ef78ba8..fbf100048 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -93,8 +96,8 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(username) && isBlank(password) && isBlank(consumerToken) &&\n-                isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n+        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+                && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n             // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n             remember = true;\n             Cookie[] cookies = request.getCookies();\n", "next_change": {"commit": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..1324acc01 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -96,91 +103,69 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+        if (isBlank(username) && isBlank(password) && isBlank(consumerToken)\n                 && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n-            // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n+            // In this case, we use cookies to login, and we will always remember the credentials in cookies.\n             remember = true;\n-            Cookie[] cookies = request.getCookies();\n-\n-            for (Cookie cookie : cookies) {\n-                String value = getCookieValue(cookie);\n-                switch (cookie.getName()) {\n-                    case API_ENDPOINT:\n-                        wikibaseApiEndpoint = value;\n-                        break;\n-                    case USERNAME:\n-                        username = value;\n-                        break;\n-                    case CONSUMER_TOKEN:\n-                        consumerToken = value;\n-                        break;\n-                    case CONSUMER_SECRET:\n-                        consumerSecret = value;\n-                        break;\n-                    case ACCESS_TOKEN:\n-                        accessToken = value;\n-                        break;\n-                    case ACCESS_SECRET:\n-                        accessSecret = value;\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n+            Map<String, String> cookieMap = processCookiesWithPrefix(mediawikiApiEndpointPrefix, request.getCookies());\n+            username = cookieMap.get(USERNAME);\n+            consumerToken = cookieMap.get(CONSUMER_TOKEN);\n+            consumerSecret = cookieMap.get(CONSUMER_SECRET);\n+            accessToken = cookieMap.get(ACCESS_TOKEN);\n+            accessSecret = cookieMap.get(ACCESS_SECRET);\n \n             if (isBlank(consumerToken) && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n                 // Try logging in with the cookies of a password-based connection.\n                 List<Cookie> cookieList = new ArrayList<>();\n-                for (Cookie cookie : cookies) {\n-                    if (cookie.getName().startsWith(WIKIDATA_COOKIE_PREFIX)) {\n-                        String cookieName = cookie.getName().substring(WIKIDATA_COOKIE_PREFIX.length());\n-                        Cookie newCookie = new Cookie(cookieName, getCookieValue(cookie));\n+                for (Map.Entry<String, String> entry : cookieMap.entrySet()) {\n+                    if (entry.getKey().startsWith(WIKIBASE_COOKIE_PREFIX)) {\n+                        String name = entry.getKey().substring(WIKIBASE_COOKIE_PREFIX.length());\n+                        Cookie newCookie = new Cookie(name, entry.getValue());\n                         cookieList.add(newCookie);\n                     }\n                 }\n \n-                if (cookieList.size() > 0 && isNotBlank(username) && isNotBlank(wikibaseApiEndpoint)) {\n-                    removeOwnerOnlyConsumerCookies(request, response);\n-                    if (manager.login(wikibaseApiEndpoint, username, cookieList)) {\n+                if (cookieList.size() > 0 && isNotBlank(username)) {\n+                    removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+                    if (manager.login(mediawikiApiEndpoint, username, cookieList)) {\n                         respond(request, response);\n                         return;\n                     } else {\n-                        removeUsernamePasswordCookies(request, response);\n+                        removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n                     }\n                 }\n             }\n         }\n \n-        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n+            if (manager.login(mediawikiApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n+                String prefix = mediawikiApiEndpointPrefix + WIKIBASE_COOKIE_PREFIX;\n                 for (HttpCookie cookie : cookies) {\n-                    setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n+                    setCookie(response, prefix + cookie.getName(), cookie.getValue());\n                 }\n \n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, USERNAME, connection.getCurrentUser());\n+                setCookie(response, mediawikiApiEndpointPrefix + USERNAME, connection.getCurrentUser());\n             } else {\n-                removeUsernamePasswordCookies(request, response);\n+                removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n-                setCookie(response, CONSUMER_TOKEN, consumerToken);\n-                setCookie(response, CONSUMER_SECRET, consumerSecret);\n-                setCookie(response, ACCESS_TOKEN, accessToken);\n-                setCookie(response, ACCESS_SECRET, accessSecret);\n+            removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(mediawikiApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_TOKEN, consumerToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_SECRET, consumerSecret);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_TOKEN, accessToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_SECRET, accessSecret);\n             } else {\n-                removeOwnerOnlyConsumerCookies(request, response);\n+                removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeUsernamePasswordCookies(request, response);\n+            removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n         }\n \n         respond(request, response);\n", "next_change": null}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex 04ef78ba8..fbf100048 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -102,6 +105,12 @@ public class LoginCommand extends Command {\n             for (Cookie cookie : cookies) {\n                 String value = getCookieValue(cookie);\n                 switch (cookie.getName()) {\n+                    case API_ENDPOINT:\n+                        wikibaseApiEndpoint = value;\n+                        break;\n+                    case USERNAME:\n+                        username = value;\n+                        break;\n                     case CONSUMER_TOKEN:\n                         consumerToken = value;\n                         break;\n", "next_change": {"commit": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\nindex fbf100048..1324acc01 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/LoginCommand.java\n", "chunk": "@@ -96,91 +103,69 @@ public class LoginCommand extends Command {\n         String accessToken = request.getParameter(ACCESS_TOKEN);\n         String accessSecret = request.getParameter(ACCESS_SECRET);\n \n-        if (isBlank(wikibaseApiEndpoint) && isBlank(username) && isBlank(password) && isBlank(consumerToken)\n+        if (isBlank(username) && isBlank(password) && isBlank(consumerToken)\n                 && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n-            // In this case, we use cookie to login, and we will always remember the credentials in cookies.\n+            // In this case, we use cookies to login, and we will always remember the credentials in cookies.\n             remember = true;\n-            Cookie[] cookies = request.getCookies();\n-\n-            for (Cookie cookie : cookies) {\n-                String value = getCookieValue(cookie);\n-                switch (cookie.getName()) {\n-                    case API_ENDPOINT:\n-                        wikibaseApiEndpoint = value;\n-                        break;\n-                    case USERNAME:\n-                        username = value;\n-                        break;\n-                    case CONSUMER_TOKEN:\n-                        consumerToken = value;\n-                        break;\n-                    case CONSUMER_SECRET:\n-                        consumerSecret = value;\n-                        break;\n-                    case ACCESS_TOKEN:\n-                        accessToken = value;\n-                        break;\n-                    case ACCESS_SECRET:\n-                        accessSecret = value;\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            }\n+            Map<String, String> cookieMap = processCookiesWithPrefix(mediawikiApiEndpointPrefix, request.getCookies());\n+            username = cookieMap.get(USERNAME);\n+            consumerToken = cookieMap.get(CONSUMER_TOKEN);\n+            consumerSecret = cookieMap.get(CONSUMER_SECRET);\n+            accessToken = cookieMap.get(ACCESS_TOKEN);\n+            accessSecret = cookieMap.get(ACCESS_SECRET);\n \n             if (isBlank(consumerToken) && isBlank(consumerSecret) && isBlank(accessToken) && isBlank(accessSecret)) {\n                 // Try logging in with the cookies of a password-based connection.\n                 List<Cookie> cookieList = new ArrayList<>();\n-                for (Cookie cookie : cookies) {\n-                    if (cookie.getName().startsWith(WIKIDATA_COOKIE_PREFIX)) {\n-                        String cookieName = cookie.getName().substring(WIKIDATA_COOKIE_PREFIX.length());\n-                        Cookie newCookie = new Cookie(cookieName, getCookieValue(cookie));\n+                for (Map.Entry<String, String> entry : cookieMap.entrySet()) {\n+                    if (entry.getKey().startsWith(WIKIBASE_COOKIE_PREFIX)) {\n+                        String name = entry.getKey().substring(WIKIBASE_COOKIE_PREFIX.length());\n+                        Cookie newCookie = new Cookie(name, entry.getValue());\n                         cookieList.add(newCookie);\n                     }\n                 }\n \n-                if (cookieList.size() > 0 && isNotBlank(username) && isNotBlank(wikibaseApiEndpoint)) {\n-                    removeOwnerOnlyConsumerCookies(request, response);\n-                    if (manager.login(wikibaseApiEndpoint, username, cookieList)) {\n+                if (cookieList.size() > 0 && isNotBlank(username)) {\n+                    removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+                    if (manager.login(mediawikiApiEndpoint, username, cookieList)) {\n                         respond(request, response);\n                         return;\n                     } else {\n-                        removeUsernamePasswordCookies(request, response);\n+                        removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n                     }\n                 }\n             }\n         }\n \n-        if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(username) && isNotBlank(password)) {\n+        if (isNotBlank(username) && isNotBlank(password)) {\n             // Once logged in with new credentials,\n             // the old credentials in cookies should be cleared.\n-            if (manager.login(wikibaseApiEndpoint, username, password) && remember) {\n+            if (manager.login(mediawikiApiEndpoint, username, password) && remember) {\n                 ApiConnection connection = manager.getConnection();\n                 List<HttpCookie> cookies = ((BasicApiConnection) connection).getCookies();\n+                String prefix = mediawikiApiEndpointPrefix + WIKIBASE_COOKIE_PREFIX;\n                 for (HttpCookie cookie : cookies) {\n-                    setCookie(response, WIKIDATA_COOKIE_PREFIX + cookie.getName(), cookie.getValue());\n+                    setCookie(response, prefix + cookie.getName(), cookie.getValue());\n                 }\n \n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n                 // Though the cookies from the connection contain some cookies of username,\n                 // we cannot make sure that all Wikibase instances use the same cookie key\n                 // to retrieve the username. So we choose to set the username cookie with our own cookie key.\n-                setCookie(response, USERNAME, connection.getCurrentUser());\n+                setCookie(response, mediawikiApiEndpointPrefix + USERNAME, connection.getCurrentUser());\n             } else {\n-                removeUsernamePasswordCookies(request, response);\n+                removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeOwnerOnlyConsumerCookies(request, response);\n-        } else if (isNotBlank(wikibaseApiEndpoint) && isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n-            if (manager.login(wikibaseApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n-                setCookie(response, API_ENDPOINT, wikibaseApiEndpoint);\n-                setCookie(response, CONSUMER_TOKEN, consumerToken);\n-                setCookie(response, CONSUMER_SECRET, consumerSecret);\n-                setCookie(response, ACCESS_TOKEN, accessToken);\n-                setCookie(response, ACCESS_SECRET, accessSecret);\n+            removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n+        } else if (isNotBlank(consumerToken) && isNotBlank(consumerSecret) && isNotBlank(accessToken) && isNotBlank(accessSecret)) {\n+            if (manager.login(mediawikiApiEndpoint, consumerToken, consumerSecret, accessToken, accessSecret) && remember) {\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_TOKEN, consumerToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + CONSUMER_SECRET, consumerSecret);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_TOKEN, accessToken);\n+                setCookie(response, mediawikiApiEndpointPrefix + ACCESS_SECRET, accessSecret);\n             } else {\n-                removeOwnerOnlyConsumerCookies(request, response);\n+                removeOwnerOnlyConsumerCookies(mediawikiApiEndpointPrefix, request, response);\n             }\n-            removeUsernamePasswordCookies(request, response);\n+            removeUsernamePasswordCookies(mediawikiApiEndpointPrefix, request, response);\n         }\n \n         respond(request, response);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzE5Ng==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456943196", "body": "Does the exception include any more information about the parse error which would be useful to pass back to the user? e.g. column, character, error message, etc.", "bodyText": "Does the exception include any more information about the parse error which would be useful to pass back to the user? e.g. column, character, error message, etc.", "bodyHTML": "<p dir=\"auto\">Does the exception include any more information about the parse error which would be useful to pass back to the user? e.g. column, character, error message, etc.</p>", "author": "tfmorris", "createdAt": "2020-07-19T19:03:35Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java", "diffHunk": "@@ -81,14 +84,29 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n                 return;\n             }\n \n+            Manifest manifest = null;\n+            String manifestJson = request.getParameter(\"manifest\");\n+            if (manifestJson != null) {\n+                try {\n+                    manifest = ManifestParser.parse(manifestJson);\n+                } catch (ManifestException e) {\n+                    respondError(response, \"Wikibase manifest could not be parsed.\");", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MzkwMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456983901", "bodyText": "Maybe I should append e.getMessage() to the message.", "author": "afkbrb", "createdAt": "2020-07-20T01:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MTQ3OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r458341479", "bodyText": "Yes, that would be good. There's also org.apache.commons.lang.exception.ExceptionUtils.getFullStackTrace(e), but hopefully the stacktrace won't be necessary because the range of errors here is limited.", "author": "tfmorris", "createdAt": "2020-07-21T19:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 8633c1c18..1ebdfb1dd 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -84,21 +81,6 @@ public class PreviewWikibaseSchemaCommand extends Command {\n                 return;\n             }\n \n-            Manifest manifest = null;\n-            String manifestJson = request.getParameter(\"manifest\");\n-            if (manifestJson != null) {\n-                try {\n-                    manifest = ManifestParser.parse(manifestJson);\n-                } catch (ManifestException e) {\n-                    respondError(response, \"Wikibase manifest could not be parsed.\");\n-                    return;\n-                }\n-            }\n-            if (manifest == null) {\n-                respondError(response, \"No Wikibase manifest provided.\");\n-                return;\n-            }\n-\n             QAWarningStore warningStore = new QAWarningStore();\n \n             // Evaluate project\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 1ebdfb1dd..8633c1c18 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -81,6 +84,21 @@ public class PreviewWikibaseSchemaCommand extends Command {\n                 return;\n             }\n \n+            Manifest manifest = null;\n+            String manifestJson = request.getParameter(\"manifest\");\n+            if (manifestJson != null) {\n+                try {\n+                    manifest = ManifestParser.parse(manifestJson);\n+                } catch (ManifestException e) {\n+                    respondError(response, \"Wikibase manifest could not be parsed.\");\n+                    return;\n+                }\n+            }\n+            if (manifest == null) {\n+                respondError(response, \"No Wikibase manifest provided.\");\n+                return;\n+            }\n+\n             QAWarningStore warningStore = new QAWarningStore();\n \n             // Evaluate project\n", "next_change": {"commit": "d555c90f64fbb121c5e30a51783e81079fbea3d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 8633c1c18..8a3b79a7b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -105,10 +105,12 @@ public class PreviewWikibaseSchemaCommand extends Command {\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            // Inspect the edits and generate warnings\n-            EditInspector inspector = new EditInspector(warningStore, manifest);\n-            inspector.inspect(editBatch);\n-            \n+            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {\n+                // Inspect the edits and generate warnings\n+                EditInspector inspector = new EditInspector(warningStore, manifest);\n+                inspector.inspect(editBatch);\n+            }\n+\n             // Dump the first 10 edits, scheduled with the default scheduler\n             WikibaseAPIUpdateScheduler scheduler = new WikibaseAPIUpdateScheduler();\n             List<ItemUpdate> nonNullEdits = scheduler.schedule(editBatch).stream()\n", "next_change": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 8a3b79a7b..ef806551b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -105,11 +105,9 @@ public class PreviewWikibaseSchemaCommand extends Command {\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {\n-                // Inspect the edits and generate warnings\n-                EditInspector inspector = new EditInspector(warningStore, manifest);\n-                inspector.inspect(editBatch);\n-            }\n+            // Inspect the edits and generate warnings\n+            EditInspector inspector = new EditInspector(warningStore, manifest);\n+            inspector.inspect(editBatch);\n \n             // Dump the first 10 edits, scheduled with the default scheduler\n             WikibaseAPIUpdateScheduler scheduler = new WikibaseAPIUpdateScheduler();\n", "next_change": null}]}}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 1ebdfb1dd..8633c1c18 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -88,7 +106,7 @@ public class PreviewWikibaseSchemaCommand extends Command {\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n             // Inspect the edits and generate warnings\n-            EditInspector inspector = new EditInspector(warningStore);\n+            EditInspector inspector = new EditInspector(warningStore, manifest);\n             inspector.inspect(editBatch);\n             \n             // Dump the first 10 edits, scheduled with the default scheduler\n", "next_change": {"commit": "d555c90f64fbb121c5e30a51783e81079fbea3d8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 8633c1c18..8a3b79a7b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -105,10 +105,12 @@ public class PreviewWikibaseSchemaCommand extends Command {\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            // Inspect the edits and generate warnings\n-            EditInspector inspector = new EditInspector(warningStore, manifest);\n-            inspector.inspect(editBatch);\n-            \n+            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {\n+                // Inspect the edits and generate warnings\n+                EditInspector inspector = new EditInspector(warningStore, manifest);\n+                inspector.inspect(editBatch);\n+            }\n+\n             // Dump the first 10 edits, scheduled with the default scheduler\n             WikibaseAPIUpdateScheduler scheduler = new WikibaseAPIUpdateScheduler();\n             List<ItemUpdate> nonNullEdits = scheduler.schedule(editBatch).stream()\n", "next_change": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 8a3b79a7b..ef806551b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -105,11 +105,9 @@ public class PreviewWikibaseSchemaCommand extends Command {\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {\n-                // Inspect the edits and generate warnings\n-                EditInspector inspector = new EditInspector(warningStore, manifest);\n-                inspector.inspect(editBatch);\n-            }\n+            // Inspect the edits and generate warnings\n+            EditInspector inspector = new EditInspector(warningStore, manifest);\n+            inspector.inspect(editBatch);\n \n             // Dump the first 10 edits, scheduled with the default scheduler\n             WikibaseAPIUpdateScheduler scheduler = new WikibaseAPIUpdateScheduler();\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzU3MQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456943571", "body": "What are the semantics of our versioning? Can we deal with any 1.x here or only exactly 1.0?", "bodyText": "What are the semantics of our versioning? Can we deal with any 1.x here or only exactly 1.0?", "bodyHTML": "<p dir=\"auto\">What are the semantics of our versioning? Can we deal with any 1.x here or only exactly 1.0?</p>", "author": "tfmorris", "createdAt": "2020-07-19T19:06:55Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openrefine.wikidata.manifests.v1_0.ManifestV1_0;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ManifestParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Manifest parse(String manifestJson) throws ManifestException {\n+        JsonNode root;\n+        try {\n+            root = mapper.readTree(manifestJson);\n+        } catch (JsonProcessingException e) {\n+            throw new ManifestException(\"invalid manifest format\");\n+        }\n+\n+        String version = root.path(\"version\").textValue();\n+        if (StringUtils.isBlank(version)) {\n+            version = \"1.0\";\n+            logger.warn(\"version is missing in the manifest, assumed to be \\\"1.0\\\"\");\n+        }\n+\n+        if (\"1.0\".equals(version)) {", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4NDQ5OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456984499", "bodyText": "I didn't deal with versioning well in this prototype, and I'm not sure if it's necessary to have the manifest versioned. I'll add a comment below to talk about my thinking on the versioning.", "author": "afkbrb", "createdAt": "2020-07-20T01:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestManager.java\nsimilarity index 50%\nrename from extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java\nrename to extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestManager.java\nindex 6259bb97d..2056a9084 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestManager.java\n", "chunk": "@@ -5,33 +5,40 @@ import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n import org.openrefine.wikidata.manifests.v1_0.ManifestV1_0;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n-public final class ManifestParser {\n+public final class ManifestManager {\n \n-    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+    private Manifest manifest;\n \n-    private static final ObjectMapper mapper = new ObjectMapper();\n+    private final ObjectMapper mapper = new ObjectMapper();\n \n-    public static Manifest parse(String manifestJson) throws ManifestException {\n+    private static final ManifestManager instance = new ManifestManager();\n+\n+    public static ManifestManager getInstance() {\n+        return instance;\n+    }\n+\n+    private ManifestManager() {}\n+\n+    public void updateManifest(String manifestJson) throws ManifestException {\n         JsonNode root;\n         try {\n             root = mapper.readTree(manifestJson);\n         } catch (JsonProcessingException e) {\n-            throw new ManifestException(\"invalid manifest format\");\n+            throw new ManifestException(\"invalid json format\");\n         }\n \n         String version = root.path(\"version\").textValue();\n-        if (StringUtils.isBlank(version)) {\n-            version = \"1.0\";\n-            logger.warn(\"version is missing in the manifest, assumed to be \\\"1.0\\\"\");\n-        }\n+        if (StringUtils.isBlank(version)) throw new ManifestException(\"\");\n \n         if (\"1.0\".equals(version)) {\n-            return new ManifestV1_0(root);\n+            manifest = new ManifestV1_0(root);\n         } else {\n             throw new ManifestException(\"unsupported manifest version: \" + version);\n         }\n     }\n+\n+    public Manifest getManifest() {\n+        return manifest;\n+    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDI1OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456944258", "body": "Are these Jackson annotations required? It looks like your naming scheme matches the default expected by Jackson so perhaps you don't need them. @wetneb has more experience with Jackson than I, so perhaps he can confirm.", "bodyText": "Are these Jackson annotations required? It looks like your naming scheme matches the default expected by Jackson so perhaps you don't need them. @wetneb has more experience with Jackson than I, so perhaps he can confirm.", "bodyHTML": "<p dir=\"auto\">Are these Jackson annotations required? It looks like your naming scheme matches the default expected by Jackson so perhaps you don't need them. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/wetneb/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wetneb\">@wetneb</a> has more experience with Jackson than I, so perhaps he can confirm.</p>", "author": "tfmorris", "createdAt": "2020-07-19T19:14:09Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.openrefine.wikidata.manifests.constraints;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class AllowedEntityTypesConstraint implements Constraint {\n+\n+    private String qid;\n+    private String itemOfPropertyConstraint;\n+    private String wikibaseItem;\n+    private String wikibaseProperty;\n+    private String lexeme;\n+    private String form;\n+    private String sense;\n+    private String wikibaseMediainfo;\n+\n+    @JsonCreator\n+    public AllowedEntityTypesConstraint(@JsonProperty(\"qid\") String qid,", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NDk0MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r457164940", "bodyText": "In constructors, @JsonProperty annotations are required for all arguments. I think it is also a good practice to also annotate all getters with @JsonProperty or @JsonIgnore to make the JSON mapping explicit and make sure we are not changing it by mistake when renaming an attribute, but that's a personal taste.", "author": "wetneb", "createdAt": "2020-07-20T08:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MjEzNg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r458342136", "bodyText": "OK", "author": "tfmorris", "createdAt": "2020-07-21T19:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\nindex cc2c8bf58..5fc650753 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\n", "chunk": "@@ -14,25 +11,6 @@ public class AllowedEntityTypesConstraint implements Constraint {\n     private String sense;\n     private String wikibaseMediainfo;\n \n-    @JsonCreator\n-    public AllowedEntityTypesConstraint(@JsonProperty(\"qid\") String qid,\n-                                        @JsonProperty(\"item_of_property_constraint\") String itemOfPropertyConstraint,\n-                                        @JsonProperty(\"wikibase_item\") String wikibaseItem,\n-                                        @JsonProperty(\"wikibase_property\") String wikibaseProperty,\n-                                        @JsonProperty(\"lexeme\") String lexeme,\n-                                        @JsonProperty(\"form\") String form,\n-                                        @JsonProperty(\"sense\") String sense,\n-                                        @JsonProperty(\"wikibase_mediainfo\") String wikibaseMediainfo) {\n-        this.qid = qid;\n-        this.itemOfPropertyConstraint = itemOfPropertyConstraint;\n-        this.wikibaseItem = wikibaseItem;\n-        this.wikibaseProperty = wikibaseProperty;\n-        this.lexeme = lexeme;\n-        this.form = form;\n-        this.sense = sense;\n-        this.wikibaseMediainfo = wikibaseMediainfo;\n-    }\n-\n     public String getQid() {\n         return qid;\n     }\n", "next_change": {"commit": "7e6677c520879d4add5cf51ae7600a41b5f8ca70", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\nindex 5fc650753..cc2c8bf58 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\n", "chunk": "@@ -11,6 +14,25 @@ public class AllowedEntityTypesConstraint implements Constraint {\n     private String sense;\n     private String wikibaseMediainfo;\n \n+    @JsonCreator\n+    public AllowedEntityTypesConstraint(@JsonProperty(\"qid\") String qid,\n+                                        @JsonProperty(\"item_of_property_constraint\") String itemOfPropertyConstraint,\n+                                        @JsonProperty(\"wikibase_item\") String wikibaseItem,\n+                                        @JsonProperty(\"wikibase_property\") String wikibaseProperty,\n+                                        @JsonProperty(\"lexeme\") String lexeme,\n+                                        @JsonProperty(\"form\") String form,\n+                                        @JsonProperty(\"sense\") String sense,\n+                                        @JsonProperty(\"wikibase_mediainfo\") String wikibaseMediainfo) {\n+        this.qid = qid;\n+        this.itemOfPropertyConstraint = itemOfPropertyConstraint;\n+        this.wikibaseItem = wikibaseItem;\n+        this.wikibaseProperty = wikibaseProperty;\n+        this.lexeme = lexeme;\n+        this.form = form;\n+        this.sense = sense;\n+        this.wikibaseMediainfo = wikibaseMediainfo;\n+    }\n+\n     public String getQid() {\n         return qid;\n     }\n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\ndeleted file mode 100644\nindex cc2c8bf58..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/AllowedEntityTypesConstraint.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-package org.openrefine.wikidata.manifests.constraints;\n-\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-public class AllowedEntityTypesConstraint implements Constraint {\n-\n-    private String qid;\n-    private String itemOfPropertyConstraint;\n-    private String wikibaseItem;\n-    private String wikibaseProperty;\n-    private String lexeme;\n-    private String form;\n-    private String sense;\n-    private String wikibaseMediainfo;\n-\n-    @JsonCreator\n-    public AllowedEntityTypesConstraint(@JsonProperty(\"qid\") String qid,\n-                                        @JsonProperty(\"item_of_property_constraint\") String itemOfPropertyConstraint,\n-                                        @JsonProperty(\"wikibase_item\") String wikibaseItem,\n-                                        @JsonProperty(\"wikibase_property\") String wikibaseProperty,\n-                                        @JsonProperty(\"lexeme\") String lexeme,\n-                                        @JsonProperty(\"form\") String form,\n-                                        @JsonProperty(\"sense\") String sense,\n-                                        @JsonProperty(\"wikibase_mediainfo\") String wikibaseMediainfo) {\n-        this.qid = qid;\n-        this.itemOfPropertyConstraint = itemOfPropertyConstraint;\n-        this.wikibaseItem = wikibaseItem;\n-        this.wikibaseProperty = wikibaseProperty;\n-        this.lexeme = lexeme;\n-        this.form = form;\n-        this.sense = sense;\n-        this.wikibaseMediainfo = wikibaseMediainfo;\n-    }\n-\n-    public String getQid() {\n-        return qid;\n-    }\n-\n-    public String getItemOfPropertyConstraint() {\n-        return itemOfPropertyConstraint;\n-    }\n-\n-    public String getWikibaseItem() {\n-        return wikibaseItem;\n-    }\n-\n-    public String getWikibaseProperty() {\n-        return wikibaseProperty;\n-    }\n-\n-    public String getLexeme() {\n-        return lexeme;\n-    }\n-\n-    public String getForm() {\n-        return form;\n-    }\n-\n-    public String getSense() {\n-        return sense;\n-    }\n-\n-    public String getWikibaseMediainfo() {\n-        return wikibaseMediainfo;\n-    }\n-}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NTc4Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456945783", "body": "This field name doesn't match it's serialization. It'd probably be easier if they matched.", "bodyText": "This field name doesn't match it's serialization. It'd probably be easier if they matched.", "bodyHTML": "<p dir=\"auto\">This field name doesn't match it's serialization. It'd probably be easier if they matched.</p>", "author": "tfmorris", "createdAt": "2020-07-19T19:28:46Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.openrefine.wikidata.manifests.constraints;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class ValueTypeConstraint implements Constraint {\n+\n+    private String qid;\n+    private String relation;\n+    private String instanceOf;\n+    private String subclassOf;\n+    private String instanceOrSubclassOf;\n+    private String klass;\n+\n+    @JsonCreator\n+    public ValueTypeConstraint(@JsonProperty(\"qid\") String qid,\n+                          @JsonProperty(\"relation\") String relation,\n+                          @JsonProperty(\"instance_of\") String instanceOf,\n+                          @JsonProperty(\"subclass_of\") String subclassOf,\n+                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOrSubclassOf,\n+                          @JsonProperty(\"class\") String klass) {\n+        this.qid = qid;\n+        this.relation = relation;\n+        this.instanceOf = instanceOf;\n+        this.subclassOf = subclassOf;\n+        this.instanceOrSubclassOf = instanceOrSubclassOf;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4NTM4OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456985388", "bodyText": "I'll fix this.", "author": "afkbrb", "createdAt": "2020-07-20T01:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NTc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\nindex f02b88e67..47e59a8b6 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n", "chunk": "@@ -10,22 +9,8 @@ public class ValueTypeConstraint implements Constraint {\n     private String instanceOf;\n     private String subclassOf;\n     private String instanceOrSubclassOf;\n-    private String klass;\n-\n-    @JsonCreator\n-    public ValueTypeConstraint(@JsonProperty(\"qid\") String qid,\n-                          @JsonProperty(\"relation\") String relation,\n-                          @JsonProperty(\"instance_of\") String instanceOf,\n-                          @JsonProperty(\"subclass_of\") String subclassOf,\n-                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOrSubclassOf,\n-                          @JsonProperty(\"class\") String klass) {\n-        this.qid = qid;\n-        this.relation = relation;\n-        this.instanceOf = instanceOf;\n-        this.subclassOf = subclassOf;\n-        this.instanceOrSubclassOf = instanceOrSubclassOf;\n-        this.klass = klass;\n-    }\n+    @JsonProperty(\"class\")\n+    private String klass; // i.e. class\n \n     public String getQid() {\n         return qid;\n", "next_change": {"commit": "7e6677c520879d4add5cf51ae7600a41b5f8ca70", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\nindex 47e59a8b6..f02b88e67 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n", "chunk": "@@ -9,8 +10,22 @@ public class ValueTypeConstraint implements Constraint {\n     private String instanceOf;\n     private String subclassOf;\n     private String instanceOrSubclassOf;\n-    @JsonProperty(\"class\")\n-    private String klass; // i.e. class\n+    private String klass;\n+\n+    @JsonCreator\n+    public ValueTypeConstraint(@JsonProperty(\"qid\") String qid,\n+                          @JsonProperty(\"relation\") String relation,\n+                          @JsonProperty(\"instance_of\") String instanceOf,\n+                          @JsonProperty(\"subclass_of\") String subclassOf,\n+                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOrSubclassOf,\n+                          @JsonProperty(\"class\") String klass) {\n+        this.qid = qid;\n+        this.relation = relation;\n+        this.instanceOf = instanceOf;\n+        this.subclassOf = subclassOf;\n+        this.instanceOrSubclassOf = instanceOrSubclassOf;\n+        this.klass = klass;\n+    }\n \n     public String getQid() {\n         return qid;\n", "next_change": {"commit": "b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\nindex f02b88e67..1c6746844 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n", "chunk": "@@ -17,13 +17,13 @@ public class ValueTypeConstraint implements Constraint {\n                           @JsonProperty(\"relation\") String relation,\n                           @JsonProperty(\"instance_of\") String instanceOf,\n                           @JsonProperty(\"subclass_of\") String subclassOf,\n-                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOrSubclassOf,\n+                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOfOrSubclassOf,\n                           @JsonProperty(\"class\") String klass) {\n         this.qid = qid;\n         this.relation = relation;\n         this.instanceOf = instanceOf;\n         this.subclassOf = subclassOf;\n-        this.instanceOrSubclassOf = instanceOrSubclassOf;\n+        this.instanceOfOrSubclassOf = instanceOfOrSubclassOf;\n         this.klass = klass;\n     }\n \n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\ndeleted file mode 100644\nindex 1c6746844..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/constraints/ValueTypeConstraint.java\n+++ /dev/null\n", "chunk": "@@ -1,54 +0,0 @@\n-package org.openrefine.wikidata.manifests.constraints;\n-\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-public class ValueTypeConstraint implements Constraint {\n-\n-    private String qid;\n-    private String relation;\n-    private String instanceOf;\n-    private String subclassOf;\n-    private String instanceOfOrSubclassOf;\n-    private String klass;\n-\n-    @JsonCreator\n-    public ValueTypeConstraint(@JsonProperty(\"qid\") String qid,\n-                          @JsonProperty(\"relation\") String relation,\n-                          @JsonProperty(\"instance_of\") String instanceOf,\n-                          @JsonProperty(\"subclass_of\") String subclassOf,\n-                          @JsonProperty(\"instance_of_or_subclass_of\") String instanceOfOrSubclassOf,\n-                          @JsonProperty(\"class\") String klass) {\n-        this.qid = qid;\n-        this.relation = relation;\n-        this.instanceOf = instanceOf;\n-        this.subclassOf = subclassOf;\n-        this.instanceOfOrSubclassOf = instanceOfOrSubclassOf;\n-        this.klass = klass;\n-    }\n-\n-    public String getQid() {\n-        return qid;\n-    }\n-\n-    public String getRelation() {\n-        return relation;\n-    }\n-\n-    public String getInstanceOf() {\n-        return instanceOf;\n-    }\n-\n-    public String getSubclassOf() {\n-        return subclassOf;\n-    }\n-\n-    public String getInstanceOfOrSubclassOf() {\n-        return instanceOfOrSubclassOf;\n-    }\n-\n-    public String getKlass() {\n-        return klass;\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NjcxNA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456946714", "body": "Could you compute this transform algorithmically to reduce the verbosity? Perhaps by using the same code that Jackson uses in `SnakeCaseStrategy.translate()` on an array of `Class` objects.", "bodyText": "Could you compute this transform algorithmically to reduce the verbosity? Perhaps by using the same code that Jackson uses in SnakeCaseStrategy.translate() on an array of Class objects.", "bodyHTML": "<p dir=\"auto\">Could you compute this transform algorithmically to reduce the verbosity? Perhaps by using the same code that Jackson uses in <code>SnakeCaseStrategy.translate()</code> on an array of <code>Class</code> objects.</p>", "author": "tfmorris", "createdAt": "2020-07-19T19:37:50Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4NjU2MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456986560", "bodyText": "I'll give it a try.", "author": "afkbrb", "createdAt": "2020-07-20T01:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NjcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "fb5af6380f9567a07dad17e05a0251076998f2ff", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\ndeleted file mode 100644\nindex 6df612ef5..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\n+++ /dev/null\n", "chunk": "@@ -1,190 +0,0 @@\n-package org.openrefine.wikidata.manifests.v1_0;\n-\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n-import org.openrefine.wikidata.manifests.Constraints;\n-import org.openrefine.wikidata.manifests.constraints.*;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n-public class ConstraintsV1_0 implements Constraints {\n-\n-\n-    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n-    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n-\n-    static {\n-        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n-        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n-        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n-        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n-        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n-        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n-        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n-        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n-        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n-        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n-        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n-        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n-        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n-        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n-        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n-        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n-        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n-        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n-        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n-        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n-        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n-        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n-        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n-    }\n-\n-    public ConstraintsV1_0(JsonNode node) {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-        // underscore style -> camel style\n-        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n-\n-        ArrayNode constraints = (ArrayNode) node;\n-        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n-            JsonNode constraint = it.next();\n-            String constraintName = constraint.path(\"name\").textValue();\n-            if (nameToConstraintClass.containsKey(constraintName)) {\n-                Constraint constraintObject = mapper.convertValue(constraint, nameToConstraintClass.get(constraintName));\n-                nameToConstraint.put(constraintName, constraintObject);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public AllowedEntityTypesConstraint getAllowedEntityTypesConstraint() {\n-        return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedQualifiersConstraint getAllowedQualifiersConstraint() {\n-        return (AllowedQualifiersConstraint) nameToConstraint.get(\"allowed_qualifiers_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedUnitsConstraint getAllowedUnitsConstraint() {\n-        return (AllowedUnitsConstraint) nameToConstraint.get(\"allowed_units_constraint\");\n-    }\n-\n-    @Override\n-    public CitationNeededConstraint getCitationNeededConstraint() {\n-        return (CitationNeededConstraint) nameToConstraint.get(\"citation_needed_constraint\");\n-    }\n-\n-    @Override\n-    public ConflictsWithConstraint getConflictsWithConstraint() {\n-        return (ConflictsWithConstraint) nameToConstraint.get(\"conflicts_with_constraint\");\n-    }\n-\n-    @Override\n-    public ContemporaryConstraint getContemporaryConstraint() {\n-        return (ContemporaryConstraint) nameToConstraint.get(\"contemporary_constraint\");\n-    }\n-\n-    @Override\n-    public DifferenceWithinRangeConstraint getDifferenceWithinRangeConstraint() {\n-        return (DifferenceWithinRangeConstraint) nameToConstraint.get(\"difference_within_range_constraint\");\n-    }\n-\n-    @Override\n-    public DistinctValuesConstraint getDistinctValuesConstraint() {\n-        return (DistinctValuesConstraint) nameToConstraint.get(\"distinct_values_constraint\");\n-    }\n-\n-    @Override\n-    public FormatConstraint getFormatConstraint() {\n-        return (FormatConstraint) nameToConstraint.get(\"format_constraint\");\n-    }\n-\n-    @Override\n-    public IntegerConstraint getIntegerConstraint() {\n-        return (IntegerConstraint) nameToConstraint.get(\"integer_constraint\");\n-    }\n-\n-    @Override\n-    public InverseConstraint getInverseConstraint() {\n-        return (InverseConstraint) nameToConstraint.get(\"inverse_constraint\");\n-    }\n-\n-    @Override\n-    public ItemRequiresStatementConstraint getItemRequiresStatementConstraint() {\n-        return (ItemRequiresStatementConstraint) nameToConstraint.get(\"item_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public MandatoryQualifierConstraint getMandatoryQualifierConstraint() {\n-        return (MandatoryQualifierConstraint) nameToConstraint.get(\"mandatory_qualifier_constraint\");\n-    }\n-\n-    @Override\n-    public MultiValueConstraint getMultiValueConstraint() {\n-        return (MultiValueConstraint) nameToConstraint.get(\"multi_value_constraint\");\n-    }\n-\n-    @Override\n-    public NoBoundsConstraint getNoBoundsConstraint() {\n-        return (NoBoundsConstraint) nameToConstraint.get(\"no_bounds_constraint\");\n-    }\n-\n-    @Override\n-    public NoneOfConstraint getNoneOfConstraint() {\n-        return (NoneOfConstraint) nameToConstraint.get(\"none_of_constraint\");\n-    }\n-\n-    @Override\n-    public OneOfConstraint getOneOfConstraint() {\n-        return (OneOfConstraint) nameToConstraint.get(\"one_of_constraint\");\n-    }\n-\n-    @Override\n-    public PropertyScopeConstraint getPropertyScopeConstraint() {\n-        return (PropertyScopeConstraint) nameToConstraint.get(\"property_scope_constraint\");\n-    }\n-\n-    @Override\n-    public RangeConstraint getRangeConstraint() {\n-        return (RangeConstraint) nameToConstraint.get(\"range_constraint\");\n-    }\n-\n-    @Override\n-    public SingleBestValueConstraint getSingleBestValueConstraint() {\n-        return (SingleBestValueConstraint) nameToConstraint.get(\"single_best_value_constraint\");\n-    }\n-\n-    @Override\n-    public SingleValueConstraint getSingleValueConstraint() {\n-        return (SingleValueConstraint) nameToConstraint.get(\"single_value_constraint\");\n-    }\n-\n-    @Override\n-    public SymmetricConstraint getSymmetricConstraint() {\n-        return (SymmetricConstraint) nameToConstraint.get(\"symmetric_constraint\");\n-    }\n-\n-    @Override\n-    public TypeConstraint getTypeConstraint() {\n-        return (TypeConstraint) nameToConstraint.get(\"type_constraint\");\n-    }\n-\n-    @Override\n-    public ValueRequiresStatementConstraint getValueRequiresStatementConstraint() {\n-        return (ValueRequiresStatementConstraint) nameToConstraint.get(\"value_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public ValueTypeConstraint getValueTypeConstraint() {\n-        return (ValueTypeConstraint) nameToConstraint.get(\"value_type_constraint\");\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODQ2Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456948462", "body": "The cast below will fail at runtime if we don't get what we need, so let's make that explicit here\r\n```suggestion\r\n    public ConstraintsV1_0(ArrayNode constraints) {\r\n```", "bodyText": "The cast below will fail at runtime if we don't get what we need, so let's make that explicit here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ConstraintsV1_0(JsonNode node) {\n          \n          \n            \n                public ConstraintsV1_0(ArrayNode constraints) {", "bodyHTML": "<p dir=\"auto\">The cast below will fail at runtime if we don't get what we need, so let's make that explicit here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> ConstraintsV1_0(<span class=\"pl-smi x x-first\">JsonNode</span><span class=\"x x-last\"> node</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> ConstraintsV1_0(<span class=\"pl-smi x x-first\">ArrayNode</span><span class=\"x x-last\"> constraints</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tfmorris", "createdAt": "2020-07-19T19:54:46Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n+        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n+        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n+        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n+        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n+        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n+        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n+        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n+        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n+        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n+        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n+        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n+        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n+        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n+        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n+        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n+        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n+        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n+        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n+        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n+        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n+        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n+        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n+    }\n+\n+    public ConstraintsV1_0(JsonNode node) {", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb5af6380f9567a07dad17e05a0251076998f2ff", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\ndeleted file mode 100644\nindex 6df612ef5..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\n+++ /dev/null\n", "chunk": "@@ -1,190 +0,0 @@\n-package org.openrefine.wikidata.manifests.v1_0;\n-\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n-import org.openrefine.wikidata.manifests.Constraints;\n-import org.openrefine.wikidata.manifests.constraints.*;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n-public class ConstraintsV1_0 implements Constraints {\n-\n-\n-    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n-    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n-\n-    static {\n-        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n-        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n-        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n-        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n-        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n-        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n-        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n-        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n-        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n-        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n-        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n-        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n-        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n-        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n-        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n-        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n-        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n-        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n-        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n-        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n-        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n-        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n-        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n-    }\n-\n-    public ConstraintsV1_0(JsonNode node) {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-        // underscore style -> camel style\n-        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n-\n-        ArrayNode constraints = (ArrayNode) node;\n-        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n-            JsonNode constraint = it.next();\n-            String constraintName = constraint.path(\"name\").textValue();\n-            if (nameToConstraintClass.containsKey(constraintName)) {\n-                Constraint constraintObject = mapper.convertValue(constraint, nameToConstraintClass.get(constraintName));\n-                nameToConstraint.put(constraintName, constraintObject);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public AllowedEntityTypesConstraint getAllowedEntityTypesConstraint() {\n-        return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedQualifiersConstraint getAllowedQualifiersConstraint() {\n-        return (AllowedQualifiersConstraint) nameToConstraint.get(\"allowed_qualifiers_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedUnitsConstraint getAllowedUnitsConstraint() {\n-        return (AllowedUnitsConstraint) nameToConstraint.get(\"allowed_units_constraint\");\n-    }\n-\n-    @Override\n-    public CitationNeededConstraint getCitationNeededConstraint() {\n-        return (CitationNeededConstraint) nameToConstraint.get(\"citation_needed_constraint\");\n-    }\n-\n-    @Override\n-    public ConflictsWithConstraint getConflictsWithConstraint() {\n-        return (ConflictsWithConstraint) nameToConstraint.get(\"conflicts_with_constraint\");\n-    }\n-\n-    @Override\n-    public ContemporaryConstraint getContemporaryConstraint() {\n-        return (ContemporaryConstraint) nameToConstraint.get(\"contemporary_constraint\");\n-    }\n-\n-    @Override\n-    public DifferenceWithinRangeConstraint getDifferenceWithinRangeConstraint() {\n-        return (DifferenceWithinRangeConstraint) nameToConstraint.get(\"difference_within_range_constraint\");\n-    }\n-\n-    @Override\n-    public DistinctValuesConstraint getDistinctValuesConstraint() {\n-        return (DistinctValuesConstraint) nameToConstraint.get(\"distinct_values_constraint\");\n-    }\n-\n-    @Override\n-    public FormatConstraint getFormatConstraint() {\n-        return (FormatConstraint) nameToConstraint.get(\"format_constraint\");\n-    }\n-\n-    @Override\n-    public IntegerConstraint getIntegerConstraint() {\n-        return (IntegerConstraint) nameToConstraint.get(\"integer_constraint\");\n-    }\n-\n-    @Override\n-    public InverseConstraint getInverseConstraint() {\n-        return (InverseConstraint) nameToConstraint.get(\"inverse_constraint\");\n-    }\n-\n-    @Override\n-    public ItemRequiresStatementConstraint getItemRequiresStatementConstraint() {\n-        return (ItemRequiresStatementConstraint) nameToConstraint.get(\"item_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public MandatoryQualifierConstraint getMandatoryQualifierConstraint() {\n-        return (MandatoryQualifierConstraint) nameToConstraint.get(\"mandatory_qualifier_constraint\");\n-    }\n-\n-    @Override\n-    public MultiValueConstraint getMultiValueConstraint() {\n-        return (MultiValueConstraint) nameToConstraint.get(\"multi_value_constraint\");\n-    }\n-\n-    @Override\n-    public NoBoundsConstraint getNoBoundsConstraint() {\n-        return (NoBoundsConstraint) nameToConstraint.get(\"no_bounds_constraint\");\n-    }\n-\n-    @Override\n-    public NoneOfConstraint getNoneOfConstraint() {\n-        return (NoneOfConstraint) nameToConstraint.get(\"none_of_constraint\");\n-    }\n-\n-    @Override\n-    public OneOfConstraint getOneOfConstraint() {\n-        return (OneOfConstraint) nameToConstraint.get(\"one_of_constraint\");\n-    }\n-\n-    @Override\n-    public PropertyScopeConstraint getPropertyScopeConstraint() {\n-        return (PropertyScopeConstraint) nameToConstraint.get(\"property_scope_constraint\");\n-    }\n-\n-    @Override\n-    public RangeConstraint getRangeConstraint() {\n-        return (RangeConstraint) nameToConstraint.get(\"range_constraint\");\n-    }\n-\n-    @Override\n-    public SingleBestValueConstraint getSingleBestValueConstraint() {\n-        return (SingleBestValueConstraint) nameToConstraint.get(\"single_best_value_constraint\");\n-    }\n-\n-    @Override\n-    public SingleValueConstraint getSingleValueConstraint() {\n-        return (SingleValueConstraint) nameToConstraint.get(\"single_value_constraint\");\n-    }\n-\n-    @Override\n-    public SymmetricConstraint getSymmetricConstraint() {\n-        return (SymmetricConstraint) nameToConstraint.get(\"symmetric_constraint\");\n-    }\n-\n-    @Override\n-    public TypeConstraint getTypeConstraint() {\n-        return (TypeConstraint) nameToConstraint.get(\"type_constraint\");\n-    }\n-\n-    @Override\n-    public ValueRequiresStatementConstraint getValueRequiresStatementConstraint() {\n-        return (ValueRequiresStatementConstraint) nameToConstraint.get(\"value_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public ValueTypeConstraint getValueTypeConstraint() {\n-        return (ValueTypeConstraint) nameToConstraint.get(\"value_type_constraint\");\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODcxNQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456948715", "body": "`ArrayNode` implements `Iterable<JsonNode>`, so we can use a for each loop here to make things more compact and easier to read\r\n```suggestion\r\n        for (JsonNode constraint : constraints) {\r\n```\r\n\r\n", "bodyText": "ArrayNode implements Iterable<JsonNode>, so we can use a for each loop here to make things more compact and easier to read\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ArrayNode constraints = (ArrayNode) node;\n          \n          \n            \n                    for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n          \n          \n            \n                        JsonNode constraint = it.next();\n          \n          \n            \n                    for (JsonNode constraint : constraints) {", "bodyHTML": "<p dir=\"auto\"><code>ArrayNode</code> implements <code>Iterable&lt;JsonNode&gt;</code>, so we can use a for each loop here to make things more compact and easier to read</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">ArrayNode</span> constraints <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">ArrayNode</span>) node;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">Iterator&lt;<span class=\"pl-smi\">JsonNode</span>&gt;</span> it <span class=\"pl-k\">=</span> constraints<span class=\"pl-k\">.</span>elements(); it<span class=\"pl-k\">.</span>hasNext(); ) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">JsonNode</span> constraint <span class=\"pl-k\">=</span> it<span class=\"pl-k\">.</span>next();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">JsonNode</span> constraint <span class=\"pl-k\">:</span> constraints) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tfmorris", "createdAt": "2020-07-19T19:57:23Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n+        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n+        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n+        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n+        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n+        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n+        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n+        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n+        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n+        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n+        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n+        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n+        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n+        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n+        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n+        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n+        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n+        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n+        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n+        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n+        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n+        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n+        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n+    }\n+\n+    public ConstraintsV1_0(JsonNode node) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        // underscore style -> camel style\n+        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n+\n+        ArrayNode constraints = (ArrayNode) node;\n+        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n+            JsonNode constraint = it.next();", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4NjE0Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456986142", "bodyText": "fixed", "author": "afkbrb", "createdAt": "2020-07-20T01:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0ODcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb5af6380f9567a07dad17e05a0251076998f2ff", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\ndeleted file mode 100644\nindex 6df612ef5..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\n+++ /dev/null\n", "chunk": "@@ -1,190 +0,0 @@\n-package org.openrefine.wikidata.manifests.v1_0;\n-\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n-import org.openrefine.wikidata.manifests.Constraints;\n-import org.openrefine.wikidata.manifests.constraints.*;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n-public class ConstraintsV1_0 implements Constraints {\n-\n-\n-    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n-    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n-\n-    static {\n-        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n-        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n-        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n-        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n-        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n-        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n-        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n-        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n-        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n-        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n-        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n-        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n-        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n-        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n-        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n-        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n-        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n-        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n-        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n-        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n-        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n-        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n-        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n-    }\n-\n-    public ConstraintsV1_0(JsonNode node) {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-        // underscore style -> camel style\n-        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n-\n-        ArrayNode constraints = (ArrayNode) node;\n-        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n-            JsonNode constraint = it.next();\n-            String constraintName = constraint.path(\"name\").textValue();\n-            if (nameToConstraintClass.containsKey(constraintName)) {\n-                Constraint constraintObject = mapper.convertValue(constraint, nameToConstraintClass.get(constraintName));\n-                nameToConstraint.put(constraintName, constraintObject);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public AllowedEntityTypesConstraint getAllowedEntityTypesConstraint() {\n-        return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedQualifiersConstraint getAllowedQualifiersConstraint() {\n-        return (AllowedQualifiersConstraint) nameToConstraint.get(\"allowed_qualifiers_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedUnitsConstraint getAllowedUnitsConstraint() {\n-        return (AllowedUnitsConstraint) nameToConstraint.get(\"allowed_units_constraint\");\n-    }\n-\n-    @Override\n-    public CitationNeededConstraint getCitationNeededConstraint() {\n-        return (CitationNeededConstraint) nameToConstraint.get(\"citation_needed_constraint\");\n-    }\n-\n-    @Override\n-    public ConflictsWithConstraint getConflictsWithConstraint() {\n-        return (ConflictsWithConstraint) nameToConstraint.get(\"conflicts_with_constraint\");\n-    }\n-\n-    @Override\n-    public ContemporaryConstraint getContemporaryConstraint() {\n-        return (ContemporaryConstraint) nameToConstraint.get(\"contemporary_constraint\");\n-    }\n-\n-    @Override\n-    public DifferenceWithinRangeConstraint getDifferenceWithinRangeConstraint() {\n-        return (DifferenceWithinRangeConstraint) nameToConstraint.get(\"difference_within_range_constraint\");\n-    }\n-\n-    @Override\n-    public DistinctValuesConstraint getDistinctValuesConstraint() {\n-        return (DistinctValuesConstraint) nameToConstraint.get(\"distinct_values_constraint\");\n-    }\n-\n-    @Override\n-    public FormatConstraint getFormatConstraint() {\n-        return (FormatConstraint) nameToConstraint.get(\"format_constraint\");\n-    }\n-\n-    @Override\n-    public IntegerConstraint getIntegerConstraint() {\n-        return (IntegerConstraint) nameToConstraint.get(\"integer_constraint\");\n-    }\n-\n-    @Override\n-    public InverseConstraint getInverseConstraint() {\n-        return (InverseConstraint) nameToConstraint.get(\"inverse_constraint\");\n-    }\n-\n-    @Override\n-    public ItemRequiresStatementConstraint getItemRequiresStatementConstraint() {\n-        return (ItemRequiresStatementConstraint) nameToConstraint.get(\"item_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public MandatoryQualifierConstraint getMandatoryQualifierConstraint() {\n-        return (MandatoryQualifierConstraint) nameToConstraint.get(\"mandatory_qualifier_constraint\");\n-    }\n-\n-    @Override\n-    public MultiValueConstraint getMultiValueConstraint() {\n-        return (MultiValueConstraint) nameToConstraint.get(\"multi_value_constraint\");\n-    }\n-\n-    @Override\n-    public NoBoundsConstraint getNoBoundsConstraint() {\n-        return (NoBoundsConstraint) nameToConstraint.get(\"no_bounds_constraint\");\n-    }\n-\n-    @Override\n-    public NoneOfConstraint getNoneOfConstraint() {\n-        return (NoneOfConstraint) nameToConstraint.get(\"none_of_constraint\");\n-    }\n-\n-    @Override\n-    public OneOfConstraint getOneOfConstraint() {\n-        return (OneOfConstraint) nameToConstraint.get(\"one_of_constraint\");\n-    }\n-\n-    @Override\n-    public PropertyScopeConstraint getPropertyScopeConstraint() {\n-        return (PropertyScopeConstraint) nameToConstraint.get(\"property_scope_constraint\");\n-    }\n-\n-    @Override\n-    public RangeConstraint getRangeConstraint() {\n-        return (RangeConstraint) nameToConstraint.get(\"range_constraint\");\n-    }\n-\n-    @Override\n-    public SingleBestValueConstraint getSingleBestValueConstraint() {\n-        return (SingleBestValueConstraint) nameToConstraint.get(\"single_best_value_constraint\");\n-    }\n-\n-    @Override\n-    public SingleValueConstraint getSingleValueConstraint() {\n-        return (SingleValueConstraint) nameToConstraint.get(\"single_value_constraint\");\n-    }\n-\n-    @Override\n-    public SymmetricConstraint getSymmetricConstraint() {\n-        return (SymmetricConstraint) nameToConstraint.get(\"symmetric_constraint\");\n-    }\n-\n-    @Override\n-    public TypeConstraint getTypeConstraint() {\n-        return (TypeConstraint) nameToConstraint.get(\"type_constraint\");\n-    }\n-\n-    @Override\n-    public ValueRequiresStatementConstraint getValueRequiresStatementConstraint() {\n-        return (ValueRequiresStatementConstraint) nameToConstraint.get(\"value_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public ValueTypeConstraint getValueTypeConstraint() {\n-        return (ValueTypeConstraint) nameToConstraint.get(\"value_type_constraint\");\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MTY5Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456951693", "body": "Consider using the same algorithmic name transformation here to avoid having to use strings and let the compiler help us with error checking.\r\n```suggestion\r\n        return (AllowedEntityTypesConstraint) nameToConstraint.get(strategy.translate(AllowedEntityTypesConstraint.class.getName());\r\n```", "bodyText": "Consider using the same algorithmic name transformation here to avoid having to use strings and let the compiler help us with error checking.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");\n          \n          \n            \n                    return (AllowedEntityTypesConstraint) nameToConstraint.get(strategy.translate(AllowedEntityTypesConstraint.class.getName());", "bodyHTML": "<p dir=\"auto\">Consider using the same algorithmic name transformation here to avoid having to use strings and let the compiler help us with error checking.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-smi\">AllowedEntityTypesConstraint</span>) nameToConstraint<span class=\"pl-k\">.</span>get(<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">allowed_entity_types_constraint</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-smi\">AllowedEntityTypesConstraint</span>) nameToConstraint<span class=\"pl-k\">.</span>get(<span class=\"x x-first\">strategy</span><span class=\"pl-k x\">.</span><span class=\"x\">translate(</span><span class=\"pl-smi x\">AllowedEntityTypesConstraint</span><span class=\"pl-k x\">.</span><span class=\"x\">class</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getName()</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tfmorris", "createdAt": "2020-07-19T20:26:03Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.openrefine.wikidata.manifests.v1_0;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import org.openrefine.wikidata.manifests.Constraints;\n+import org.openrefine.wikidata.manifests.constraints.*;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+public class ConstraintsV1_0 implements Constraints {\n+\n+\n+    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n+    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n+\n+    static {\n+        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n+        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n+        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n+        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n+        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n+        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n+        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n+        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n+        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n+        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n+        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n+        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n+        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n+        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n+        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n+        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n+        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n+        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n+        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n+        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n+        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n+        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n+        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n+        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n+    }\n+\n+    public ConstraintsV1_0(JsonNode node) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        // underscore style -> camel style\n+        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n+\n+        ArrayNode constraints = (ArrayNode) node;\n+        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n+            JsonNode constraint = it.next();\n+            String constraintName = constraint.path(\"name\").textValue();\n+            if (nameToConstraintClass.containsKey(constraintName)) {\n+                Constraint constraintObject = mapper.convertValue(constraint, nameToConstraintClass.get(constraintName));\n+                nameToConstraint.put(constraintName, constraintObject);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public AllowedEntityTypesConstraint getAllowedEntityTypesConstraint() {\n+        return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb5af6380f9567a07dad17e05a0251076998f2ff", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\ndeleted file mode 100644\nindex 6df612ef5..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/v1_0/ConstraintsV1_0.java\n+++ /dev/null\n", "chunk": "@@ -1,190 +0,0 @@\n-package org.openrefine.wikidata.manifests.v1_0;\n-\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n-import com.fasterxml.jackson.databind.node.ArrayNode;\n-import org.openrefine.wikidata.manifests.Constraints;\n-import org.openrefine.wikidata.manifests.constraints.*;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n-public class ConstraintsV1_0 implements Constraints {\n-\n-\n-    private static final Map<String, Class<? extends Constraint>> nameToConstraintClass = new HashMap<>();\n-    private Map<String, Constraint> nameToConstraint = new HashMap<>();\n-\n-    static {\n-        nameToConstraintClass.put(\"allowed_entity_types_constraint\", AllowedEntityTypesConstraint.class);\n-        nameToConstraintClass.put(\"allowed_qualifiers_constraint\", AllowedQualifiersConstraint.class);\n-        nameToConstraintClass.put(\"allowed_units_constraint\", AllowedUnitsConstraint.class);\n-        nameToConstraintClass.put(\"citation_needed_constraint\", CitationNeededConstraint.class);\n-        nameToConstraintClass.put(\"conflicts_with_constraint\", ConflictsWithConstraint.class);\n-        nameToConstraintClass.put(\"contemporary_constraint\", ContemporaryConstraint.class);\n-        nameToConstraintClass.put(\"difference_within_range_constraint\", DifferenceWithinRangeConstraint.class);\n-        nameToConstraintClass.put(\"distinct_values_constraint\", DistinctValuesConstraint.class);\n-        nameToConstraintClass.put(\"format_constraint\", FormatConstraint.class);\n-        nameToConstraintClass.put(\"integer_constraint\", IntegerConstraint.class);\n-        nameToConstraintClass.put(\"inverse_constraint\", InverseConstraint.class);\n-        nameToConstraintClass.put(\"item_requires_statement_constraint\", ItemRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"mandatory_qualifier_constraint\", MandatoryQualifierConstraint.class);\n-        nameToConstraintClass.put(\"multi_value_constraint\", MultiValueConstraint.class);\n-        nameToConstraintClass.put(\"no_bounds_constraint\", NoBoundsConstraint.class);\n-        nameToConstraintClass.put(\"none_of_constraint\", NoneOfConstraint.class);\n-        nameToConstraintClass.put(\"one_of_constraint\", OneOfConstraint.class);\n-        nameToConstraintClass.put(\"property_scope_constraint\", PropertyScopeConstraint.class);\n-        nameToConstraintClass.put(\"range_constraint\", RangeConstraint.class);\n-        nameToConstraintClass.put(\"single_best_value_constraint\", SingleBestValueConstraint.class);\n-        nameToConstraintClass.put(\"single_value_constraint\", SingleValueConstraint.class);\n-        nameToConstraintClass.put(\"symmetric_constraint\", SymmetricConstraint.class);\n-        nameToConstraintClass.put(\"type_constraint\", TypeConstraint.class);\n-        nameToConstraintClass.put(\"value_requires_statement_constraint\", ValueRequiresStatementConstraint.class);\n-        nameToConstraintClass.put(\"value_type_constraint\", ValueTypeConstraint.class);\n-    }\n-\n-    public ConstraintsV1_0(JsonNode node) {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-        // underscore style -> camel style\n-        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n-\n-        ArrayNode constraints = (ArrayNode) node;\n-        for (Iterator<JsonNode> it = constraints.elements(); it.hasNext(); ) {\n-            JsonNode constraint = it.next();\n-            String constraintName = constraint.path(\"name\").textValue();\n-            if (nameToConstraintClass.containsKey(constraintName)) {\n-                Constraint constraintObject = mapper.convertValue(constraint, nameToConstraintClass.get(constraintName));\n-                nameToConstraint.put(constraintName, constraintObject);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public AllowedEntityTypesConstraint getAllowedEntityTypesConstraint() {\n-        return (AllowedEntityTypesConstraint) nameToConstraint.get(\"allowed_entity_types_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedQualifiersConstraint getAllowedQualifiersConstraint() {\n-        return (AllowedQualifiersConstraint) nameToConstraint.get(\"allowed_qualifiers_constraint\");\n-    }\n-\n-    @Override\n-    public AllowedUnitsConstraint getAllowedUnitsConstraint() {\n-        return (AllowedUnitsConstraint) nameToConstraint.get(\"allowed_units_constraint\");\n-    }\n-\n-    @Override\n-    public CitationNeededConstraint getCitationNeededConstraint() {\n-        return (CitationNeededConstraint) nameToConstraint.get(\"citation_needed_constraint\");\n-    }\n-\n-    @Override\n-    public ConflictsWithConstraint getConflictsWithConstraint() {\n-        return (ConflictsWithConstraint) nameToConstraint.get(\"conflicts_with_constraint\");\n-    }\n-\n-    @Override\n-    public ContemporaryConstraint getContemporaryConstraint() {\n-        return (ContemporaryConstraint) nameToConstraint.get(\"contemporary_constraint\");\n-    }\n-\n-    @Override\n-    public DifferenceWithinRangeConstraint getDifferenceWithinRangeConstraint() {\n-        return (DifferenceWithinRangeConstraint) nameToConstraint.get(\"difference_within_range_constraint\");\n-    }\n-\n-    @Override\n-    public DistinctValuesConstraint getDistinctValuesConstraint() {\n-        return (DistinctValuesConstraint) nameToConstraint.get(\"distinct_values_constraint\");\n-    }\n-\n-    @Override\n-    public FormatConstraint getFormatConstraint() {\n-        return (FormatConstraint) nameToConstraint.get(\"format_constraint\");\n-    }\n-\n-    @Override\n-    public IntegerConstraint getIntegerConstraint() {\n-        return (IntegerConstraint) nameToConstraint.get(\"integer_constraint\");\n-    }\n-\n-    @Override\n-    public InverseConstraint getInverseConstraint() {\n-        return (InverseConstraint) nameToConstraint.get(\"inverse_constraint\");\n-    }\n-\n-    @Override\n-    public ItemRequiresStatementConstraint getItemRequiresStatementConstraint() {\n-        return (ItemRequiresStatementConstraint) nameToConstraint.get(\"item_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public MandatoryQualifierConstraint getMandatoryQualifierConstraint() {\n-        return (MandatoryQualifierConstraint) nameToConstraint.get(\"mandatory_qualifier_constraint\");\n-    }\n-\n-    @Override\n-    public MultiValueConstraint getMultiValueConstraint() {\n-        return (MultiValueConstraint) nameToConstraint.get(\"multi_value_constraint\");\n-    }\n-\n-    @Override\n-    public NoBoundsConstraint getNoBoundsConstraint() {\n-        return (NoBoundsConstraint) nameToConstraint.get(\"no_bounds_constraint\");\n-    }\n-\n-    @Override\n-    public NoneOfConstraint getNoneOfConstraint() {\n-        return (NoneOfConstraint) nameToConstraint.get(\"none_of_constraint\");\n-    }\n-\n-    @Override\n-    public OneOfConstraint getOneOfConstraint() {\n-        return (OneOfConstraint) nameToConstraint.get(\"one_of_constraint\");\n-    }\n-\n-    @Override\n-    public PropertyScopeConstraint getPropertyScopeConstraint() {\n-        return (PropertyScopeConstraint) nameToConstraint.get(\"property_scope_constraint\");\n-    }\n-\n-    @Override\n-    public RangeConstraint getRangeConstraint() {\n-        return (RangeConstraint) nameToConstraint.get(\"range_constraint\");\n-    }\n-\n-    @Override\n-    public SingleBestValueConstraint getSingleBestValueConstraint() {\n-        return (SingleBestValueConstraint) nameToConstraint.get(\"single_best_value_constraint\");\n-    }\n-\n-    @Override\n-    public SingleValueConstraint getSingleValueConstraint() {\n-        return (SingleValueConstraint) nameToConstraint.get(\"single_value_constraint\");\n-    }\n-\n-    @Override\n-    public SymmetricConstraint getSymmetricConstraint() {\n-        return (SymmetricConstraint) nameToConstraint.get(\"symmetric_constraint\");\n-    }\n-\n-    @Override\n-    public TypeConstraint getTypeConstraint() {\n-        return (TypeConstraint) nameToConstraint.get(\"type_constraint\");\n-    }\n-\n-    @Override\n-    public ValueRequiresStatementConstraint getValueRequiresStatementConstraint() {\n-        return (ValueRequiresStatementConstraint) nameToConstraint.get(\"value_requires_statement_constraint\");\n-    }\n-\n-    @Override\n-    public ValueTypeConstraint getValueTypeConstraint() {\n-        return (ValueTypeConstraint) nameToConstraint.get(\"value_type_constraint\");\n-    }\n-}\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MjIwNQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456952205", "body": "```suggestion\r\n            return Collections.emptyList();\r\n```\r\nUse the `Collections` method to make it clear what's going on here.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return new ArrayList<>();\n          \n          \n            \n                        return Collections.emptyList();\n          \n      \n    \n    \n  \n\nUse the Collections method to make it clear what's going on here.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">return</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-k x x-last\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-smi x x-first\">Collections</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">emptyList</span>();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Use the <code>Collections</code> method to make it clear what's going on here.</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:31:14Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java", "diffHunk": "@@ -45,6 +64,30 @@\n      *            the type of the constraints\n      * @return the list of matching constraint statements\n      */\n-    List<Statement> getConstraintsByType(PropertyIdValue pid, String qid);\n+    public List<Statement> getConstraintsByType(PropertyIdValue pid, String qid) {\n+        Stream<Statement> allConstraints = getConstraintStatements(pid).stream()\n+                .filter(s -> s.getValue() != null && ((EntityIdValue) s.getValue()).getId().equals(qid))\n+                .filter(s -> !StatementRank.DEPRECATED.equals(s.getRank()));\n+        return allConstraints.collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Gets all the constraint statements for a given property\n+     * \n+     * @param pid\n+     *             the id of the property to retrieve the constraints for\n+     * @return the list of constraint statements\n+     */\n+    private List<Statement> getConstraintStatements(PropertyIdValue pid) {\n+        PropertyDocument doc = (PropertyDocument) entityCache.get(pid);\n+        StatementGroup group = doc.findStatementGroup(wikibaseConstraintPid);\n+        if (group != null) {\n+            return group.getStatements().stream()\n+                    .filter(s -> s.getValue() != null && s.getValue() instanceof EntityIdValue)\n+                    .collect(Collectors.toList());\n+        } else {\n+            return new ArrayList<>();", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\nindex 502959309..99c157296 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\n", "chunk": "@@ -64,30 +45,6 @@ public class ConstraintFetcher {\n      *            the type of the constraints\n      * @return the list of matching constraint statements\n      */\n-    public List<Statement> getConstraintsByType(PropertyIdValue pid, String qid) {\n-        Stream<Statement> allConstraints = getConstraintStatements(pid).stream()\n-                .filter(s -> s.getValue() != null && ((EntityIdValue) s.getValue()).getId().equals(qid))\n-                .filter(s -> !StatementRank.DEPRECATED.equals(s.getRank()));\n-        return allConstraints.collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Gets all the constraint statements for a given property\n-     * \n-     * @param pid\n-     *             the id of the property to retrieve the constraints for\n-     * @return the list of constraint statements\n-     */\n-    private List<Statement> getConstraintStatements(PropertyIdValue pid) {\n-        PropertyDocument doc = (PropertyDocument) entityCache.get(pid);\n-        StatementGroup group = doc.findStatementGroup(wikibaseConstraintPid);\n-        if (group != null) {\n-            return group.getStatements().stream()\n-                    .filter(s -> s.getValue() != null && s.getValue() instanceof EntityIdValue)\n-                    .collect(Collectors.toList());\n-        } else {\n-            return new ArrayList<>();\n-        }\n-    }\n+    List<Statement> getConstraintsByType(PropertyIdValue pid, String qid);\n \n }\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\nindex 99c157296..502959309 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\n", "chunk": "@@ -45,6 +64,30 @@ public interface ConstraintFetcher {\n      *            the type of the constraints\n      * @return the list of matching constraint statements\n      */\n-    List<Statement> getConstraintsByType(PropertyIdValue pid, String qid);\n+    public List<Statement> getConstraintsByType(PropertyIdValue pid, String qid) {\n+        Stream<Statement> allConstraints = getConstraintStatements(pid).stream()\n+                .filter(s -> s.getValue() != null && ((EntityIdValue) s.getValue()).getId().equals(qid))\n+                .filter(s -> !StatementRank.DEPRECATED.equals(s.getRank()));\n+        return allConstraints.collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Gets all the constraint statements for a given property\n+     * \n+     * @param pid\n+     *             the id of the property to retrieve the constraints for\n+     * @return the list of constraint statements\n+     */\n+    private List<Statement> getConstraintStatements(PropertyIdValue pid) {\n+        PropertyDocument doc = (PropertyDocument) entityCache.get(pid);\n+        StatementGroup group = doc.findStatementGroup(wikibaseConstraintPid);\n+        if (group != null) {\n+            return group.getStatements().stream()\n+                    .filter(s -> s.getValue() != null && s.getValue() instanceof EntityIdValue)\n+                    .collect(Collectors.toList());\n+        } else {\n+            return new ArrayList<>();\n+        }\n+    }\n \n }\n", "next_change": {"commit": "b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\nindex 502959309..8099220f3 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/ConstraintFetcher.java\n", "chunk": "@@ -86,7 +85,7 @@ public class ConstraintFetcher {\n                     .filter(s -> s.getValue() != null && s.getValue() instanceof EntityIdValue)\n                     .collect(Collectors.toList());\n         } else {\n-            return new ArrayList<>();\n+            return Collections.emptyList();\n         }\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzI3NQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953275", "body": "I'm not sure I fully understand the lifecycle here, but could this be rolled into `batchIsBeginning()`? Because it's a new abstract method, it's a breaking change that all subclasses are going to need adapt to, so it's no worse to change the contract of `batchIsBeginning` to be `abstract boolean`, making it mandatory and returning the success indication that you need.\r\n\r\nAfter more review, I'm seeing a lot of boilerplate where subclasses just `return true`. Should that be the default, overridable implementation here to cut down on the boilerplate or is it something that we want subclasses to explicitly think about and handle?\r\n\r\nUnder what circumstances `prepareDependencies` fail? What should the user do about it?", "bodyText": "I'm not sure I fully understand the lifecycle here, but could this be rolled into batchIsBeginning()? Because it's a new abstract method, it's a breaking change that all subclasses are going to need adapt to, so it's no worse to change the contract of batchIsBeginning to be abstract boolean, making it mandatory and returning the success indication that you need.\nAfter more review, I'm seeing a lot of boilerplate where subclasses just return true. Should that be the default, overridable implementation here to cut down on the boilerplate or is it something that we want subclasses to explicitly think about and handle?\nUnder what circumstances prepareDependencies fail? What should the user do about it?", "bodyHTML": "<p dir=\"auto\">I'm not sure I fully understand the lifecycle here, but could this be rolled into <code>batchIsBeginning()</code>? Because it's a new abstract method, it's a breaking change that all subclasses are going to need adapt to, so it's no worse to change the contract of <code>batchIsBeginning</code> to be <code>abstract boolean</code>, making it mandatory and returning the success indication that you need.</p>\n<p dir=\"auto\">After more review, I'm seeing a lot of boilerplate where subclasses just <code>return true</code>. Should that be the default, overridable implementation here to cut down on the boilerplate or is it something that we want subclasses to explicitly think about and handle?</p>\n<p dir=\"auto\">Under what circumstances <code>prepareDependencies</code> fail? What should the user do about it?</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:41:59Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java", "diffHunk": "@@ -57,6 +54,19 @@ public void setStore(QAWarningStore store) {\n     public void setFetcher(ConstraintFetcher fetcher) {\n         _fetcher = fetcher;\n     }\n+\n+    public void setConstraints(Constraints constraints) {\n+        this.constraints = constraints;\n+    }\n+\n+    /**\n+     * Prepare the dependencies(i.e. constraint-related pids and qids) needed by the scrutinizer.\n+     *\n+     * Called before {@link EditScrutinizer#batchIsBeginning()}.\n+     *\n+     * @return false if any necessary dependency is missing, true otherwise.\n+     */\n+    public abstract boolean prepareDependencies();", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MDgwMw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456990803", "bodyText": "I'm not sure I fully understand the lifecycle here, but could this be rolled into batchIsBeginning()?\n\nI don't think so. batchIsBeginning(), scrutinize() and batchIsFinished() are all parts of the scrutinization actually, see NoEditsMadeScrutinizer. My thought is that if prepareDependencies fails, the scrutinizer should not be registered at all, see my code from EditInspector below:\n    public void register(EditScrutinizer scrutinizer) {\n        scrutinizer.setStore(warningStore);\n        scrutinizer.setFetcher(fetcher);\n        scrutinizer.setConstraints(constraints);\n        if (scrutinizer.prepareDependencies()) {\n            String key = scrutinizer.getClass().getName();\n            scrutinizers.put(key, scrutinizer);\n        }\n    }\n\nis it something that we want subclasses to explicitly think about and handle?\n\nYes.\n\nUnder what circumstances prepareDependencies fail? What should the user do about it?\n\nprepareDependencies  fails if any dependency needed is missing (and this is expected). In this case, the scrutinizer is skipped since it can't work properly without dependencies. The user is not involved here.", "author": "afkbrb", "createdAt": "2020-07-20T02:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java\nindex a291b9333..fdf3534ce 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java\n", "chunk": "@@ -54,19 +57,6 @@ public abstract class EditScrutinizer {\n     public void setFetcher(ConstraintFetcher fetcher) {\n         _fetcher = fetcher;\n     }\n-\n-    public void setConstraints(Constraints constraints) {\n-        this.constraints = constraints;\n-    }\n-\n-    /**\n-     * Prepare the dependencies(i.e. constraint-related pids and qids) needed by the scrutinizer.\n-     *\n-     * Called before {@link EditScrutinizer#batchIsBeginning()}.\n-     *\n-     * @return false if any necessary dependency is missing, true otherwise.\n-     */\n-    public abstract boolean prepareDependencies();\n     \n     /**\n      * Called before an edit batch is scrutinized.\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java\nindex fdf3534ce..f37549669 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/EditScrutinizer.java\n", "chunk": "@@ -57,6 +63,22 @@ public abstract class EditScrutinizer {\n     public void setFetcher(ConstraintFetcher fetcher) {\n         _fetcher = fetcher;\n     }\n+\n+    /**\n+     * Checks if any dependency is missing.\n+     */\n+    public final boolean missingDependencies() {\n+        return missingDependencies;\n+    }\n+\n+    /**\n+     * Prepare the dependencies(i.e. constraint-related pids and qids) needed by the scrutinizer.\n+     *\n+     * Called before {@link EditScrutinizer#batchIsBeginning()}.\n+     *\n+     * @return false if any necessary dependency is missing, true otherwise.\n+     */\n+    public abstract boolean prepareDependencies();\n     \n     /**\n      * Called before an edit batch is scrutinized.\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzQ4OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953488", "body": "Always use braces please. They avoid subtle and hard to find indentation bugs", "bodyText": "Always use braces please. They avoid subtle and hard to find indentation bugs", "bodyHTML": "<p dir=\"auto\">Always use braces please. They avoid subtle and hard to find indentation bugs</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:44:26Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java", "diffHunk": "@@ -44,6 +44,16 @@\n         }\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getConflictsWithConstraint() == null) return false;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MDk1MQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456990951", "bodyText": "Got it!", "author": "afkbrb", "createdAt": "2020-07-20T02:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\nindex 8d47553c0..07e79359b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n", "chunk": "@@ -44,16 +44,6 @@ public class ConflictsWithScrutinizer extends EditScrutinizer {\n         }\n     }\n \n-    @Override\n-    public boolean prepareDependencies() {\n-        if (constraints.getConflictsWithConstraint() == null) return false;\n-        conflictsWithConstraintQid = constraints.getConflictsWithConstraint().getQid();\n-        conflictsWithPropertyPid = constraints.getConflictsWithConstraint().getProperty();\n-        itemOfPropertyConstraintPid = constraints.getConflictsWithConstraint().getItemOfPropertyConstraint();\n-\n-        return conflictsWithConstraintQid != null && conflictsWithPropertyPid != null && itemOfPropertyConstraintPid != null;\n-    }\n-\n     @Override\n     public void scrutinize(ItemUpdate update) {\n         Map<PropertyIdValue, Set<Value>> propertyIdValueValueMap = new HashMap<>();\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\nindex 07e79359b..8d47553c0 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n", "chunk": "@@ -44,6 +44,16 @@ public class ConflictsWithScrutinizer extends EditScrutinizer {\n         }\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getConflictsWithConstraint() == null) return false;\n+        conflictsWithConstraintQid = constraints.getConflictsWithConstraint().getQid();\n+        conflictsWithPropertyPid = constraints.getConflictsWithConstraint().getProperty();\n+        itemOfPropertyConstraintPid = constraints.getConflictsWithConstraint().getItemOfPropertyConstraint();\n+\n+        return conflictsWithConstraintQid != null && conflictsWithPropertyPid != null && itemOfPropertyConstraintPid != null;\n+    }\n+\n     @Override\n     public void scrutinize(ItemUpdate update) {\n         Map<PropertyIdValue, Set<Value>> propertyIdValueValueMap = new HashMap<>();\n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\nindex 8d47553c0..14bd7a5d0 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n", "chunk": "@@ -46,10 +46,9 @@ public class ConflictsWithScrutinizer extends EditScrutinizer {\n \n     @Override\n     public boolean prepareDependencies() {\n-        if (constraints.getConflictsWithConstraint() == null) return false;\n-        conflictsWithConstraintQid = constraints.getConflictsWithConstraint().getQid();\n-        conflictsWithPropertyPid = constraints.getConflictsWithConstraint().getProperty();\n-        itemOfPropertyConstraintPid = constraints.getConflictsWithConstraint().getItemOfPropertyConstraint();\n+        conflictsWithConstraintQid = getConstraintsRelatedId(\"conflicts_with_constraint_qid\");\n+        conflictsWithPropertyPid = getConstraintsRelatedId(\"property_pid\");\n+        itemOfPropertyConstraintPid = getConstraintsRelatedId(\"item_of_property_constraint\");\n \n         return conflictsWithConstraintQid != null && conflictsWithPropertyPid != null && itemOfPropertyConstraintPid != null;\n     }\n", "next_change": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\nindex 14bd7a5d0..562a6c555 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizer.java\n", "chunk": "@@ -48,9 +48,10 @@ public class ConflictsWithScrutinizer extends EditScrutinizer {\n     public boolean prepareDependencies() {\n         conflictsWithConstraintQid = getConstraintsRelatedId(\"conflicts_with_constraint_qid\");\n         conflictsWithPropertyPid = getConstraintsRelatedId(\"property_pid\");\n-        itemOfPropertyConstraintPid = getConstraintsRelatedId(\"item_of_property_constraint\");\n+        itemOfPropertyConstraintPid = getConstraintsRelatedId(\"item_of_property_constraint_pid\");\n \n-        return conflictsWithConstraintQid != null && conflictsWithPropertyPid != null && itemOfPropertyConstraintPid != null;\n+        return _fetcher != null && conflictsWithConstraintQid != null\n+                && conflictsWithPropertyPid != null && itemOfPropertyConstraintPid != null;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY1NA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953654", "body": "The names don't match here. Are they correct? Does one of them need to be adjusted?", "bodyText": "The names don't match here. Are they correct? Does one of them need to be adjusted?", "bodyHTML": "<p dir=\"auto\">The names don't match here. Are they correct? Does one of them need to be adjusted?</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:45:48Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -23,9 +23,9 @@\n         DifferenceWithinRangeConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> lowerValueProperty = findValues(specs, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_PID);\n-                List<Value> minValue = findValues(specs, MINIMUM_VALUE_PID);\n-                List<Value> maxValue = findValues(specs, MAXIMUM_VALUE_PID);\n+                List<Value> lowerValueProperty = findValues(specs, differenceWithinRangeConstraintPid);", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MjI2NA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456992264", "bodyText": "Sorry I don't get what you mean here.", "author": "afkbrb", "createdAt": "2020-07-20T02:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3MTcyMg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474871722", "bodyText": "I was wondering why lowerValueProperty wasn't the same as or aligned with differenceWithinRangeConstraintPid but I guess it's just due to the complexity of the Wikidata constraint system.", "author": "tfmorris", "createdAt": "2020-08-21T18:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex a5499ff47..065166fc2 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -23,9 +23,9 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n         DifferenceWithinRangeConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> lowerValueProperty = findValues(specs, differenceWithinRangeConstraintPid);\n-                List<Value> minValue = findValues(specs, minimumValuePid);\n-                List<Value> maxValue = findValues(specs, maximumValuePid);\n+                List<Value> lowerValueProperty = findValues(specs, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_PID);\n+                List<Value> minValue = findValues(specs, MINIMUM_VALUE_PID);\n+                List<Value> maxValue = findValues(specs, MAXIMUM_VALUE_PID);\n                 if (!lowerValueProperty.isEmpty()) {\n                     lowerPropertyIdValue = (PropertyIdValue) lowerValueProperty.get(0);\n                 }\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex 065166fc2..a5499ff47 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -23,9 +23,9 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n         DifferenceWithinRangeConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> lowerValueProperty = findValues(specs, DIFFERENCE_WITHIN_RANGE_CONSTRAINT_PID);\n-                List<Value> minValue = findValues(specs, MINIMUM_VALUE_PID);\n-                List<Value> maxValue = findValues(specs, MAXIMUM_VALUE_PID);\n+                List<Value> lowerValueProperty = findValues(specs, differenceWithinRangeConstraintPid);\n+                List<Value> minValue = findValues(specs, minimumValuePid);\n+                List<Value> maxValue = findValues(specs, maximumValuePid);\n                 if (!lowerValueProperty.isEmpty()) {\n                     lowerPropertyIdValue = (PropertyIdValue) lowerValueProperty.get(0);\n                 }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY3Nw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953677", "body": "Please wrap long lines. Although style guides don't require 80 columns any more, most suggest no more than 100. We've been negligent in formalizing our style guide, so not your fault for not knowing.", "bodyText": "Please wrap long lines. Although style guides don't require 80 columns any more, most suggest no more than 100. We've been negligent in formalizing our style guide, so not your fault for not knowing.", "bodyHTML": "<p dir=\"auto\">Please wrap long lines. Although style guides don't require 80 columns any more, most suggest no more than 100. We've been negligent in formalizing our style guide, so not your fault for not knowing.</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:46:11Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java", "diffHunk": "@@ -39,6 +39,16 @@\n         }\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getDifferenceWithinRangeConstraint() == null) return false;\n+        differenceWithinRangeConstraintQid = constraints.getDifferenceWithinRangeConstraint().getQid();\n+        differenceWithinRangeConstraintPid = constraints.getDifferenceWithinRangeConstraint().getProperty();\n+        minimumValuePid = constraints.getDifferenceWithinRangeConstraint().getMinimumValue();\n+        maximumValuePid = constraints.getDifferenceWithinRangeConstraint().getMaximumValue();\n+        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null && minimumValuePid != null && maximumValuePid != null;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MjU1Nw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456992557", "bodyText": "Got it.", "author": "afkbrb", "createdAt": "2020-07-20T02:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex a5499ff47..065166fc2 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -39,16 +39,6 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n         }\n     }\n \n-    @Override\n-    public boolean prepareDependencies() {\n-        if (constraints.getDifferenceWithinRangeConstraint() == null) return false;\n-        differenceWithinRangeConstraintQid = constraints.getDifferenceWithinRangeConstraint().getQid();\n-        differenceWithinRangeConstraintPid = constraints.getDifferenceWithinRangeConstraint().getProperty();\n-        minimumValuePid = constraints.getDifferenceWithinRangeConstraint().getMinimumValue();\n-        maximumValuePid = constraints.getDifferenceWithinRangeConstraint().getMaximumValue();\n-        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null && minimumValuePid != null && maximumValuePid != null;\n-    }\n-\n     @Override\n     public void scrutinize(ItemUpdate update) {\n         Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex 065166fc2..a5499ff47 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -39,6 +39,16 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n         }\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getDifferenceWithinRangeConstraint() == null) return false;\n+        differenceWithinRangeConstraintQid = constraints.getDifferenceWithinRangeConstraint().getQid();\n+        differenceWithinRangeConstraintPid = constraints.getDifferenceWithinRangeConstraint().getProperty();\n+        minimumValuePid = constraints.getDifferenceWithinRangeConstraint().getMinimumValue();\n+        maximumValuePid = constraints.getDifferenceWithinRangeConstraint().getMaximumValue();\n+        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null && minimumValuePid != null && maximumValuePid != null;\n+    }\n+\n     @Override\n     public void scrutinize(ItemUpdate update) {\n         Map<PropertyIdValue, Value> propertyIdValueValueMap = new HashMap<>();\n", "next_change": {"commit": "4b8059ae554235622cc8803263f7dd2e1e7f3642", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex a5499ff47..aae551bc4 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -41,12 +41,15 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n \n     @Override\n     public boolean prepareDependencies() {\n-        if (constraints.getDifferenceWithinRangeConstraint() == null) return false;\n+        if (constraints.getDifferenceWithinRangeConstraint() == null) {\n+            return false;\n+        }\n         differenceWithinRangeConstraintQid = constraints.getDifferenceWithinRangeConstraint().getQid();\n         differenceWithinRangeConstraintPid = constraints.getDifferenceWithinRangeConstraint().getProperty();\n         minimumValuePid = constraints.getDifferenceWithinRangeConstraint().getMinimumValue();\n         maximumValuePid = constraints.getDifferenceWithinRangeConstraint().getMaximumValue();\n-        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null && minimumValuePid != null && maximumValuePid != null;\n+        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null\n+                && minimumValuePid != null && maximumValuePid != null;\n     }\n \n     @Override\n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex aae551bc4..275827f28 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -41,13 +41,10 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n \n     @Override\n     public boolean prepareDependencies() {\n-        if (constraints.getDifferenceWithinRangeConstraint() == null) {\n-            return false;\n-        }\n-        differenceWithinRangeConstraintQid = constraints.getDifferenceWithinRangeConstraint().getQid();\n-        differenceWithinRangeConstraintPid = constraints.getDifferenceWithinRangeConstraint().getProperty();\n-        minimumValuePid = constraints.getDifferenceWithinRangeConstraint().getMinimumValue();\n-        maximumValuePid = constraints.getDifferenceWithinRangeConstraint().getMaximumValue();\n+        differenceWithinRangeConstraintQid = getConstraintsRelatedId(\"difference_within_range_constraint_qid\");\n+        differenceWithinRangeConstraintPid = getConstraintsRelatedId(\"property_pid\");\n+        minimumValuePid = getConstraintsRelatedId(\"minimum_value_pid\");\n+        maximumValuePid = getConstraintsRelatedId(\"maximum_value_pid\");\n         return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null\n                 && minimumValuePid != null && maximumValuePid != null;\n     }\n", "next_change": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\nindex 275827f28..e51043317 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DifferenceWithinRangeScrutinizer.java\n", "chunk": "@@ -45,7 +45,7 @@ public class DifferenceWithinRangeScrutinizer extends EditScrutinizer {\n         differenceWithinRangeConstraintPid = getConstraintsRelatedId(\"property_pid\");\n         minimumValuePid = getConstraintsRelatedId(\"minimum_value_pid\");\n         maximumValuePid = getConstraintsRelatedId(\"maximum_value_pid\");\n-        return differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null\n+        return _fetcher != null && differenceWithinRangeConstraintQid != null && differenceWithinRangeConstraintPid != null\n                 && minimumValuePid != null && maximumValuePid != null;\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MzgzNA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456953834", "body": "Braces", "bodyText": "Braces", "bodyHTML": "<p dir=\"auto\">Braces</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:47:55Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java", "diffHunk": "@@ -43,18 +44,26 @@\n public class DistinctValuesScrutinizer extends StatementScrutinizer {\n \n     public final static String type = \"identical-values-for-distinct-valued-property\";\n-    public static String DISTINCT_VALUES_CONSTRAINT_QID = \"Q21502410\";\n+    public String distinctValuesConstraintQid;\n \n     private Map<PropertyIdValue, Map<Value, EntityIdValue>> _seenValues;\n \n     public DistinctValuesScrutinizer() {\n         _seenValues = new HashMap<>();\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        DistinctValuesConstraint distinctValuesConstraint = constraints.getDistinctValuesConstraint();\n+        if (distinctValuesConstraint == null) return false;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java\nindex 94a3a0a45..1e0e2c344 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java\n", "chunk": "@@ -52,18 +51,10 @@ public class DistinctValuesScrutinizer extends StatementScrutinizer {\n         _seenValues = new HashMap<>();\n     }\n \n-    @Override\n-    public boolean prepareDependencies() {\n-        DistinctValuesConstraint distinctValuesConstraint = constraints.getDistinctValuesConstraint();\n-        if (distinctValuesConstraint == null) return false;\n-        distinctValuesConstraintQid = distinctValuesConstraint.getQid();\n-        return distinctValuesConstraintQid != null;\n-    }\n-\n     @Override\n     public void scrutinize(Statement statement, EntityIdValue entityId, boolean added) {\n         PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n-        List<Statement> statementList = _fetcher.getConstraintsByType(pid, distinctValuesConstraintQid);\n+        List<Statement> statementList = _fetcher.getConstraintsByType(pid, DISTINCT_VALUES_CONSTRAINT_QID);\n         if (!statementList.isEmpty()) {\n             Value mainSnakValue = statement.getClaim().getMainSnak().getValue();\n             Map<Value, EntityIdValue> seen = _seenValues.get(pid);\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java\nindex 1e0e2c344..94a3a0a45 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/DistinctValuesScrutinizer.java\n", "chunk": "@@ -51,10 +52,18 @@ public class DistinctValuesScrutinizer extends StatementScrutinizer {\n         _seenValues = new HashMap<>();\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        DistinctValuesConstraint distinctValuesConstraint = constraints.getDistinctValuesConstraint();\n+        if (distinctValuesConstraint == null) return false;\n+        distinctValuesConstraintQid = distinctValuesConstraint.getQid();\n+        return distinctValuesConstraintQid != null;\n+    }\n+\n     @Override\n     public void scrutinize(Statement statement, EntityIdValue entityId, boolean added) {\n         PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n-        List<Statement> statementList = _fetcher.getConstraintsByType(pid, DISTINCT_VALUES_CONSTRAINT_QID);\n+        List<Statement> statementList = _fetcher.getConstraintsByType(pid, distinctValuesConstraintQid);\n         if (!statementList.isEmpty()) {\n             Value mainSnakValue = statement.getClaim().getMainSnak().getValue();\n             Map<Value, EntityIdValue> seen = _seenValues.get(pid);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDc3Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456954773", "body": "Should failures be logged or cause an error here?", "bodyText": "Should failures be logged or cause an error here?", "bodyHTML": "<p dir=\"auto\">Should failures be logged or cause an error here?</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:57:24Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java", "diffHunk": "@@ -76,15 +80,20 @@ public EditInspector(QAWarningStore warningStore) {\n     }\n \n     /**\n-     * Adds a new scrutinizer to the inspector\n+     * Adds a new scrutinizer to the inspector.\n+     *\n+     * If any necessary dependency is missing, the scrutinizer will not be added.\n      * \n      * @param scrutinizer\n      */\n     public void register(EditScrutinizer scrutinizer) {\n-        String key = scrutinizer.getClass().getName();\n-        scrutinizers.put(key, scrutinizer);\n         scrutinizer.setStore(warningStore);\n         scrutinizer.setFetcher(fetcher);\n+        scrutinizer.setConstraints(constraints);\n+        if (scrutinizer.prepareDependencies()) {", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MjkwOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456992908", "bodyText": "I think we should log the failures here. Causing an error is no proper since missing dependencies is expected.", "author": "afkbrb", "createdAt": "2020-07-20T02:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\nindex 2100e19f2..119e7b90b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n", "chunk": "@@ -77,23 +73,19 @@ public class EditInspector {\n         register(new DifferenceWithinRangeScrutinizer());\n         register(new ConflictsWithScrutinizer());\n         register(new ItemRequiresScrutinizer());\n+        register(new UseAsQualifierScrutinizer());\n     }\n \n     /**\n-     * Adds a new scrutinizer to the inspector.\n-     *\n-     * If any necessary dependency is missing, the scrutinizer will not be added.\n+     * Adds a new scrutinizer to the inspector\n      * \n      * @param scrutinizer\n      */\n     public void register(EditScrutinizer scrutinizer) {\n+        String key = scrutinizer.getClass().getName();\n+        scrutinizers.put(key, scrutinizer);\n         scrutinizer.setStore(warningStore);\n         scrutinizer.setFetcher(fetcher);\n-        scrutinizer.setConstraints(constraints);\n-        if (scrutinizer.prepareDependencies()) {\n-            String key = scrutinizer.getClass().getName();\n-            scrutinizers.put(key, scrutinizer);\n-        }\n     }\n \n     /**\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\nindex 119e7b90b..7a8543583 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n", "chunk": "@@ -77,15 +77,19 @@ public class EditInspector {\n     }\n \n     /**\n-     * Adds a new scrutinizer to the inspector\n+     * Adds a new scrutinizer to the inspector.\n+     *\n+     * If any necessary dependency is missing, the scrutinizer will not be added.\n      * \n      * @param scrutinizer\n      */\n     public void register(EditScrutinizer scrutinizer) {\n-        String key = scrutinizer.getClass().getName();\n-        scrutinizers.put(key, scrutinizer);\n-        scrutinizer.setStore(warningStore);\n-        scrutinizer.setFetcher(fetcher);\n+        if (!scrutinizer.missingDependencies()) {\n+            String key = scrutinizer.getClass().getName();\n+            scrutinizers.put(key, scrutinizer);\n+            scrutinizer.setStore(warningStore);\n+            scrutinizer.setFetcher(fetcher);\n+        }\n     }\n \n     /**\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\nindex 7a8543583..8a95bb23d 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n", "chunk": "@@ -89,6 +93,7 @@ public class EditInspector {\n             scrutinizers.put(key, scrutinizer);\n             scrutinizer.setStore(warningStore);\n             scrutinizer.setFetcher(fetcher);\n+            scrutinizer.setConstraints(constraints);\n         }\n     }\n \n", "next_change": {"commit": "4aba889be100074d8b0cbefddc65d6339eda8d2c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\nindex 8a95bb23d..f50687786 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n", "chunk": "@@ -88,12 +88,12 @@ public class EditInspector {\n      * @param scrutinizer\n      */\n     public void register(EditScrutinizer scrutinizer) {\n-        if (!scrutinizer.missingDependencies()) {\n+        scrutinizer.setStore(warningStore);\n+        scrutinizer.setFetcher(fetcher);\n+        scrutinizer.setConstraints(constraints);\n+        if (scrutinizer.prepareDependencies()) {\n             String key = scrutinizer.getClass().getName();\n             scrutinizers.put(key, scrutinizer);\n-            scrutinizer.setStore(warningStore);\n-            scrutinizer.setFetcher(fetcher);\n-            scrutinizer.setConstraints(constraints);\n         }\n     }\n \n", "next_change": {"commit": "62336661b5fbaaa9cc6e5ab2b24a114f5e3af152", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\nindex f50687786..6a8b47e27 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/EditInspector.java\n", "chunk": "@@ -94,6 +98,9 @@ public class EditInspector {\n         if (scrutinizer.prepareDependencies()) {\n             String key = scrutinizer.getClass().getName();\n             scrutinizers.put(key, scrutinizer);\n+        } else {\n+            logger.info(\"scrutinizer [\" + scrutinizer.getClass().getSimpleName() + \"] is skipped \" +\n+                    \"due to missing of necessary constraint configurations in the Wikibase manifest\");\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDk3OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456954978", "body": "wrap", "bodyText": "wrap", "bodyHTML": "<p dir=\"auto\">wrap</p>", "author": "tfmorris", "createdAt": "2020-07-19T20:59:12Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java", "diffHunk": "@@ -92,12 +93,23 @@ public QualifierCompatibilityScrutinizer() {\n         _mandatoryQualifiers = new HashMap<>();\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getAllowedQualifiersConstraint() == null) return false;\n+        if (constraints.getMandatoryQualifierConstraint() == null) return false;\n+        allowedQualifiersConstraintQid = constraints.getAllowedQualifiersConstraint().getQid();\n+        allowedQualifiersConstraintPid = constraints.getAllowedQualifiersConstraint().getProperty();\n+        mandatoryQualifiersConstraintQid = constraints.getMandatoryQualifierConstraint().getQid();\n+        mandatoryQualifiersConstraintPid = constraints.getMandatoryQualifierConstraint().getProperty();\n+        return allowedQualifiersConstraintQid != null && allowedQualifiersConstraintPid != null && mandatoryQualifiersConstraintQid != null && mandatoryQualifiersConstraintPid != null;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java\nindex 958935ead..330acb9bd 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java\n", "chunk": "@@ -93,23 +92,12 @@ public class QualifierCompatibilityScrutinizer extends StatementScrutinizer {\n         _mandatoryQualifiers = new HashMap<>();\n     }\n \n-    @Override\n-    public boolean prepareDependencies() {\n-        if (constraints.getAllowedQualifiersConstraint() == null) return false;\n-        if (constraints.getMandatoryQualifierConstraint() == null) return false;\n-        allowedQualifiersConstraintQid = constraints.getAllowedQualifiersConstraint().getQid();\n-        allowedQualifiersConstraintPid = constraints.getAllowedQualifiersConstraint().getProperty();\n-        mandatoryQualifiersConstraintQid = constraints.getMandatoryQualifierConstraint().getQid();\n-        mandatoryQualifiersConstraintPid = constraints.getMandatoryQualifierConstraint().getProperty();\n-        return allowedQualifiersConstraintQid != null && allowedQualifiersConstraintPid != null && mandatoryQualifiersConstraintQid != null && mandatoryQualifiersConstraintPid != null;\n-    }\n-\n     protected boolean qualifierIsAllowed(PropertyIdValue statementProperty, PropertyIdValue qualifierProperty) {\n         Set<PropertyIdValue> allowed = null;\n         if (_allowedQualifiers.containsKey(statementProperty)) {\n             allowed = _allowedQualifiers.get(statementProperty);\n         } else {\n-            List<Statement> statementList = _fetcher.getConstraintsByType(statementProperty, allowedQualifiersConstraintQid);\n+            List<Statement> statementList = _fetcher.getConstraintsByType(statementProperty, ALLOWED_QUALIFIERS_CONSTRAINT_QID);\n             if (!statementList.isEmpty()){\n                 AllowedQualifierConstraint allowedQualifierConstraint = new AllowedQualifierConstraint(statementList.get(0));\n                 allowed = allowedQualifierConstraint.allowedProperties;\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java\nindex 330acb9bd..958935ead 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/QualifierCompatibilityScrutinizer.java\n", "chunk": "@@ -92,12 +93,23 @@ public class QualifierCompatibilityScrutinizer extends StatementScrutinizer {\n         _mandatoryQualifiers = new HashMap<>();\n     }\n \n+    @Override\n+    public boolean prepareDependencies() {\n+        if (constraints.getAllowedQualifiersConstraint() == null) return false;\n+        if (constraints.getMandatoryQualifierConstraint() == null) return false;\n+        allowedQualifiersConstraintQid = constraints.getAllowedQualifiersConstraint().getQid();\n+        allowedQualifiersConstraintPid = constraints.getAllowedQualifiersConstraint().getProperty();\n+        mandatoryQualifiersConstraintQid = constraints.getMandatoryQualifierConstraint().getQid();\n+        mandatoryQualifiersConstraintPid = constraints.getMandatoryQualifierConstraint().getProperty();\n+        return allowedQualifiersConstraintQid != null && allowedQualifiersConstraintPid != null && mandatoryQualifiersConstraintQid != null && mandatoryQualifiersConstraintPid != null;\n+    }\n+\n     protected boolean qualifierIsAllowed(PropertyIdValue statementProperty, PropertyIdValue qualifierProperty) {\n         Set<PropertyIdValue> allowed = null;\n         if (_allowedQualifiers.containsKey(statementProperty)) {\n             allowed = _allowedQualifiers.get(statementProperty);\n         } else {\n-            List<Statement> statementList = _fetcher.getConstraintsByType(statementProperty, ALLOWED_QUALIFIERS_CONSTRAINT_QID);\n+            List<Statement> statementList = _fetcher.getConstraintsByType(statementProperty, allowedQualifiersConstraintQid);\n             if (!statementList.isEmpty()){\n                 AllowedQualifierConstraint allowedQualifierConstraint = new AllowedQualifierConstraint(statementList.get(0));\n                 allowed = allowedQualifierConstraint.allowedProperties;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTE3Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955173", "body": "```suggestion\r\n        if (oneOfConstraint == null || noneOfConstraint == null) {\r\n            return false;\r\n        }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (oneOfConstraint == null) return false;\n          \n          \n            \n                    if (noneOfConstraint == null) return false;\n          \n          \n            \n                    if (oneOfConstraint == null || noneOfConstraint == null) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (oneOfConstraint <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (noneOfConstraint <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (oneOfConstraint <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> noneOfConstraint <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tfmorris", "createdAt": "2020-07-19T21:01:16Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java", "diffHunk": "@@ -15,19 +17,32 @@\n \n public class RestrictedValuesScrutinizer extends SnakScrutinizer {\n     \n-    public static String type = \"forbidden-value\";\n-    public static String ALLOWED_VALUES_CONSTRAINT_QID = \"Q21510859\";\n-    public static String ALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n+    public static final String type = \"forbidden-value\";\n+    public String allowedValuesConstraintQid;\n+    public String allowedValuesConstraintPid;\n \n-    public static String DISALLOWED_VALUES_CONSTRAINT_QID = \"Q52558054\";\n-    public static String DISALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n+    public String disallowedValuesConstraintQid;\n+    public String disallowedValuesConstraintPid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        OneOfConstraint oneOfConstraint = constraints.getOneOfConstraint();\n+        NoneOfConstraint noneOfConstraint = constraints.getNoneOfConstraint();\n+        if (oneOfConstraint == null) return false;\n+        if (noneOfConstraint == null) return false;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java\nindex 5ebfc6f02..a0c346444 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java\n", "chunk": "@@ -17,32 +15,19 @@ import java.util.stream.Collectors;\n \n public class RestrictedValuesScrutinizer extends SnakScrutinizer {\n     \n-    public static final String type = \"forbidden-value\";\n-    public String allowedValuesConstraintQid;\n-    public String allowedValuesConstraintPid;\n+    public static String type = \"forbidden-value\";\n+    public static String ALLOWED_VALUES_CONSTRAINT_QID = \"Q21510859\";\n+    public static String ALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n \n-    public String disallowedValuesConstraintQid;\n-    public String disallowedValuesConstraintPid;\n-\n-    @Override\n-    public boolean prepareDependencies() {\n-        OneOfConstraint oneOfConstraint = constraints.getOneOfConstraint();\n-        NoneOfConstraint noneOfConstraint = constraints.getNoneOfConstraint();\n-        if (oneOfConstraint == null) return false;\n-        if (noneOfConstraint == null) return false;\n-        allowedValuesConstraintQid = oneOfConstraint.getQid();\n-        allowedValuesConstraintPid = oneOfConstraint.getItemOfPropertyConstraint();\n-        disallowedValuesConstraintQid = noneOfConstraint.getQid();\n-        disallowedValuesConstraintPid = noneOfConstraint.getItemOfPropertyConstraint();\n-        return allowedValuesConstraintQid != null && allowedValuesConstraintPid != null && disallowedValuesConstraintQid != null && disallowedValuesConstraintPid != null;\n-    }\n+    public static String DISALLOWED_VALUES_CONSTRAINT_QID = \"Q52558054\";\n+    public static String DISALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n \n     class AllowedValueConstraint {\n         Set<Value> allowedValues;\n         AllowedValueConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> properties = findValues(specs, allowedValuesConstraintPid);\n+                List<Value> properties = findValues(specs, ALLOWED_VALUES_CONSTRAINT_PID);\n                 allowedValues = properties.stream().collect(Collectors.toSet());\n             }\n         }\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java\nindex a0c346444..5ebfc6f02 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/RestrictedValuesScrutinizer.java\n", "chunk": "@@ -15,19 +17,32 @@ import java.util.stream.Collectors;\n \n public class RestrictedValuesScrutinizer extends SnakScrutinizer {\n     \n-    public static String type = \"forbidden-value\";\n-    public static String ALLOWED_VALUES_CONSTRAINT_QID = \"Q21510859\";\n-    public static String ALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n+    public static final String type = \"forbidden-value\";\n+    public String allowedValuesConstraintQid;\n+    public String allowedValuesConstraintPid;\n \n-    public static String DISALLOWED_VALUES_CONSTRAINT_QID = \"Q52558054\";\n-    public static String DISALLOWED_VALUES_CONSTRAINT_PID = \"P2305\";\n+    public String disallowedValuesConstraintQid;\n+    public String disallowedValuesConstraintPid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        OneOfConstraint oneOfConstraint = constraints.getOneOfConstraint();\n+        NoneOfConstraint noneOfConstraint = constraints.getNoneOfConstraint();\n+        if (oneOfConstraint == null) return false;\n+        if (noneOfConstraint == null) return false;\n+        allowedValuesConstraintQid = oneOfConstraint.getQid();\n+        allowedValuesConstraintPid = oneOfConstraint.getItemOfPropertyConstraint();\n+        disallowedValuesConstraintQid = noneOfConstraint.getQid();\n+        disallowedValuesConstraintPid = noneOfConstraint.getItemOfPropertyConstraint();\n+        return allowedValuesConstraintQid != null && allowedValuesConstraintPid != null && disallowedValuesConstraintQid != null && disallowedValuesConstraintPid != null;\n+    }\n \n     class AllowedValueConstraint {\n         Set<Value> allowedValues;\n         AllowedValueConstraint(Statement statement) {\n             List<SnakGroup> specs = statement.getClaim().getQualifiers();\n             if (specs != null) {\n-                List<Value> properties = findValues(specs, ALLOWED_VALUES_CONSTRAINT_PID);\n+                List<Value> properties = findValues(specs, allowedValuesConstraintPid);\n                 allowedValues = properties.stream().collect(Collectors.toSet());\n             }\n         }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTIzMA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955230", "body": "combine as above", "bodyText": "combine as above", "bodyHTML": "<p dir=\"auto\">combine as above</p>", "author": "tfmorris", "createdAt": "2020-07-19T21:01:48Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java", "diffHunk": "@@ -45,17 +47,28 @@\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n-    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n+    public String singleValueConstraintQid;\n+    public String singleBestValueConstraintQid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n+        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n+        if (singleValueConstraint == null) return false;\n+        if (singleBestValueConstraint == null) return false;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 6f03eb97e..44525b678 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -47,19 +45,8 @@ import java.util.Set;\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public String singleValueConstraintQid;\n-    public String singleBestValueConstraintQid;\n-\n-    @Override\n-    public boolean prepareDependencies() {\n-        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n-        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n-        if (singleValueConstraint == null) return false;\n-        if (singleBestValueConstraint == null) return false;\n-        singleValueConstraintQid = singleValueConstraint.getQid();\n-        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n-        return false;\n-    }\n+    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n+    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n \n     @Override\n     public void scrutinize(ItemUpdate update) {\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 44525b678..6f03eb97e 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -45,8 +47,19 @@ import java.util.Set;\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n-    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n+    public String singleValueConstraintQid;\n+    public String singleBestValueConstraintQid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n+        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n+        if (singleValueConstraint == null) return false;\n+        if (singleBestValueConstraint == null) return false;\n+        singleValueConstraintQid = singleValueConstraint.getQid();\n+        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n+        return false;\n+    }\n \n     @Override\n     public void scrutinize(ItemUpdate update) {\n", "next_change": {"commit": "4b8059ae554235622cc8803263f7dd2e1e7f3642", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 6f03eb97e..dcae96546 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -54,11 +54,12 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n     public boolean prepareDependencies() {\n         SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n         SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n-        if (singleValueConstraint == null) return false;\n-        if (singleBestValueConstraint == null) return false;\n+        if (singleValueConstraint == null || singleBestValueConstraint == null) {\n+            return false;\n+        }\n         singleValueConstraintQid = singleValueConstraint.getQid();\n         singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n-        return false;\n+        return singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n     }\n \n     @Override\n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex dcae96546..5603833af 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -52,13 +50,8 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n \n     @Override\n     public boolean prepareDependencies() {\n-        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n-        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n-        if (singleValueConstraint == null || singleBestValueConstraint == null) {\n-            return false;\n-        }\n-        singleValueConstraintQid = singleValueConstraint.getQid();\n-        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n+        singleValueConstraintQid = getConstraintsRelatedId(\"single_value_constraint_qid\");\n+        singleBestValueConstraintQid = getConstraintsRelatedId(\"single_best_value_constraint_qid\");\n         return singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n     }\n \n", "next_change": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 5603833af..8bb080b87 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -52,7 +52,7 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n     public boolean prepareDependencies() {\n         singleValueConstraintQid = getConstraintsRelatedId(\"single_value_constraint_qid\");\n         singleBestValueConstraintQid = getConstraintsRelatedId(\"single_best_value_constraint_qid\");\n-        return singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n+        return _fetcher != null && singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 44525b678..6f03eb97e 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -54,8 +67,8 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n \n         for (Statement statement : update.getAddedStatements()) {\n             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n-            List<Statement> constraintStatementList1 = _fetcher.getConstraintsByType(pid, SINGLE_VALUE_CONSTRAINT_QID);\n-            List<Statement> constraintStatementList2 = _fetcher.getConstraintsByType(pid, SINGLE_BEST_VALUE_CONSTRAINT_QID);\n+            List<Statement> constraintStatementList1 = _fetcher.getConstraintsByType(pid, singleValueConstraintQid);\n+            List<Statement> constraintStatementList2 = _fetcher.getConstraintsByType(pid, singleBestValueConstraintQid);\n             if (seenSingleProperties.contains(pid)) {\n                 QAWarning issue = new QAWarning(type, pid.getId(), QAWarning.Severity.WARNING, 1);\n                 issue.setProperty(\"property_entity\", pid);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTMyNg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955326", "body": "Doesn't this mean that this will never get used?", "bodyText": "Doesn't this mean that this will never get used?", "bodyHTML": "<p dir=\"auto\">Doesn't this mean that this will never get used?</p>", "author": "tfmorris", "createdAt": "2020-07-19T21:02:49Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java", "diffHunk": "@@ -45,17 +47,28 @@\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n-    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n+    public String singleValueConstraintQid;\n+    public String singleBestValueConstraintQid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n+        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n+        if (singleValueConstraint == null) return false;\n+        if (singleBestValueConstraint == null) return false;\n+        singleValueConstraintQid = singleValueConstraint.getQid();\n+        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n+        return false;", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MDY5NQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456980695", "bodyText": "This is obviously a mistake :)", "author": "afkbrb", "createdAt": "2020-07-20T01:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 6f03eb97e..44525b678 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -47,19 +45,8 @@ import java.util.Set;\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public String singleValueConstraintQid;\n-    public String singleBestValueConstraintQid;\n-\n-    @Override\n-    public boolean prepareDependencies() {\n-        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n-        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n-        if (singleValueConstraint == null) return false;\n-        if (singleBestValueConstraint == null) return false;\n-        singleValueConstraintQid = singleValueConstraint.getQid();\n-        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n-        return false;\n-    }\n+    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n+    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n \n     @Override\n     public void scrutinize(ItemUpdate update) {\n", "next_change": {"commit": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 44525b678..6f03eb97e 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -45,8 +47,19 @@ import java.util.Set;\n public class SingleValueScrutinizer extends EditScrutinizer {\n \n     public static final String type = \"single-valued-property-added-more-than-once\";\n-    public static String SINGLE_VALUE_CONSTRAINT_QID = \"Q19474404\";\n-    public static String SINGLE_BEST_VALUE_CONSTRAINT_QID = \"Q52060874\";\n+    public String singleValueConstraintQid;\n+    public String singleBestValueConstraintQid;\n+\n+    @Override\n+    public boolean prepareDependencies() {\n+        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n+        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n+        if (singleValueConstraint == null) return false;\n+        if (singleBestValueConstraint == null) return false;\n+        singleValueConstraintQid = singleValueConstraint.getQid();\n+        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n+        return false;\n+    }\n \n     @Override\n     public void scrutinize(ItemUpdate update) {\n", "next_change": {"commit": "4b8059ae554235622cc8803263f7dd2e1e7f3642", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 6f03eb97e..dcae96546 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -54,11 +54,12 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n     public boolean prepareDependencies() {\n         SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n         SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n-        if (singleValueConstraint == null) return false;\n-        if (singleBestValueConstraint == null) return false;\n+        if (singleValueConstraint == null || singleBestValueConstraint == null) {\n+            return false;\n+        }\n         singleValueConstraintQid = singleValueConstraint.getQid();\n         singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n-        return false;\n+        return singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n     }\n \n     @Override\n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex dcae96546..5603833af 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -52,13 +50,8 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n \n     @Override\n     public boolean prepareDependencies() {\n-        SingleValueConstraint singleValueConstraint = constraints.getSingleValueConstraint();\n-        SingleBestValueConstraint singleBestValueConstraint = constraints.getSingleBestValueConstraint();\n-        if (singleValueConstraint == null || singleBestValueConstraint == null) {\n-            return false;\n-        }\n-        singleValueConstraintQid = singleValueConstraint.getQid();\n-        singleBestValueConstraintQid = singleBestValueConstraint.getQid();\n+        singleValueConstraintQid = getConstraintsRelatedId(\"single_value_constraint_qid\");\n+        singleBestValueConstraintQid = getConstraintsRelatedId(\"single_best_value_constraint_qid\");\n         return singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n     }\n \n", "next_change": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 5603833af..8bb080b87 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -52,7 +52,7 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n     public boolean prepareDependencies() {\n         singleValueConstraintQid = getConstraintsRelatedId(\"single_value_constraint_qid\");\n         singleBestValueConstraintQid = getConstraintsRelatedId(\"single_best_value_constraint_qid\");\n-        return singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n+        return _fetcher != null && singleValueConstraintQid != null && singleBestValueConstraintQid != null;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\nindex 44525b678..6f03eb97e 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/qa/scrutinizers/SingleValueScrutinizer.java\n", "chunk": "@@ -54,8 +67,8 @@ public class SingleValueScrutinizer extends EditScrutinizer {\n \n         for (Statement statement : update.getAddedStatements()) {\n             PropertyIdValue pid = statement.getClaim().getMainSnak().getPropertyId();\n-            List<Statement> constraintStatementList1 = _fetcher.getConstraintsByType(pid, SINGLE_VALUE_CONSTRAINT_QID);\n-            List<Statement> constraintStatementList2 = _fetcher.getConstraintsByType(pid, SINGLE_BEST_VALUE_CONSTRAINT_QID);\n+            List<Statement> constraintStatementList1 = _fetcher.getConstraintsByType(pid, singleValueConstraintQid);\n+            List<Statement> constraintStatementList2 = _fetcher.getConstraintsByType(pid, singleBestValueConstraintQid);\n             if (seenSingleProperties.contains(pid)) {\n                 QAWarning issue = new QAWarning(type, pid.getId(), QAWarning.Severity.WARNING, 1);\n                 issue.setProperty(\"property_entity\", pid);\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTk1Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456955953", "body": "Is it too late to sync up these names? ", "bodyText": "Is it too late to sync up these names?", "bodyHTML": "<p dir=\"auto\">Is it too late to sync up these names?</p>", "author": "tfmorris", "createdAt": "2020-07-19T21:09:41Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java", "diffHunk": "@@ -57,38 +57,39 @@\n \n     final static Logger logger = LoggerFactory.getLogger(\"RdfSchema\");\n \n-    @JsonProperty(\"itemDocuments\")\n-    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<WbItemDocumentExpr>();\n+    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<>();\n \n-    protected String baseIri = \"http://www.wikidata.org/entity/\";\n+    protected String baseIri;\n \n     /**\n      * Constructor.\n      */\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"entityPrefix\") String baseIri) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"entityPrefix\")", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NTU1Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r457165553", "bodyText": "It is worth making the code and the JSON format consistent but I would advocate to keep the @JsonProperty annotations anyway.", "author": "wetneb", "createdAt": "2020-07-20T08:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NTk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex 06dd94d03..413a7dc6b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -67,21 +68,19 @@ public class WikibaseSchema implements OverlayModel {\n     public WikibaseSchema() {\n \n     }\n-\n+    \n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n-                          @JsonProperty(\"entityPrefix\") String baseIri) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n         this.itemDocumentExprs = exprs;\n-        this.baseIri = baseIri;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonProperty(\"entityPrefix\")\n+    @JsonIgnore\n     public String getBaseIri() {\n         return baseIri;\n     }\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex 413a7dc6b..06dd94d03 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -68,19 +67,21 @@ public class WikibaseSchema implements OverlayModel {\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"entityPrefix\") String baseIri) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"entityPrefix\")\n     public String getBaseIri() {\n         return baseIri;\n     }\n", "next_change": {"commit": "b9307dd214784c92221e114e2fcf5124f4fc1b80", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex 06dd94d03..897ff1130 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -81,7 +81,7 @@ public class WikibaseSchema implements OverlayModel {\n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonProperty(\"entityPrefix\")\n+    @JsonProperty(\"wikibasePrefix\")\n     public String getBaseIri() {\n         return baseIri;\n     }\n", "next_change": {"commit": "432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex 897ff1130..82f0bc734 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -73,17 +82,21 @@ public class WikibaseSchema implements OverlayModel {\n      */\n     @JsonCreator\n     public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n-                          @JsonProperty(\"wikibasePrefix\") String baseIri) {\n+                          @JsonProperty(\"siteIri\") String siteIri,\n+                          @JsonProperty(\"mediaWikiApiEndpoint\") String mediaWikiApiEndpoint,\n+                          @JsonProperty(\"editGroupsURLSchema\") String editGroupsURLSchema) {\n         this.itemDocumentExprs = exprs;\n-        this.baseIri = baseIri;\n+        this.siteIri = siteIri;\n+        this.mediaWikiApiEndpoint = mediaWikiApiEndpoint;\n+        this.editGroupsURLSchema = editGroupsURLSchema;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonProperty(\"wikibasePrefix\")\n-    public String getBaseIri() {\n-        return baseIri;\n+    @JsonProperty(\"siteIri\")\n+    public String getSiteIri() {\n+        return siteIri;\n     }\n \n     /**\n", "next_change": null}]}}]}}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex 413a7dc6b..06dd94d03 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -88,7 +89,7 @@ public class WikibaseSchema implements OverlayModel {\n     /**\n      * @return the list of document expressions for this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"itemDocuments\")\n     public List<WbItemDocumentExpr> getItemDocumentExpressions() {\n         return itemDocumentExprs;\n     }\n", "next_change": {"commit": "ebee3693d2089f92f8de8cc5351fb9bf799c24c8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex 06dd94d03..a417c2658 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -93,9 +100,10 @@ public class WikibaseSchema implements OverlayModel {\n     public List<WbItemDocumentExpr> getItemDocumentExpressions() {\n         return itemDocumentExprs;\n     }\n-    \n-    public void setItemDocumentExpressions(List<WbItemDocumentExpr> exprs) {\n-        this.itemDocumentExprs = exprs;\n+\n+    @JsonProperty(\"mediaWikiApiEndpoint\")\n+    public String getMediaWikiApiEndpoint() {\n+        return mediaWikiApiEndpoint;\n     }\n \n     /**\n", "next_change": {"commit": "f5d1fd5e8f9cb8be731c1a337d7e43d7321ee4aa", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex a417c2658..ee8239ae1 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -106,6 +112,11 @@ public class WikibaseSchema implements OverlayModel {\n         return mediaWikiApiEndpoint;\n     }\n \n+    @JsonIgnore\n+    public String getEditGroupsURLSchema() {\n+        return editGroupsURLSchema;\n+    }\n+\n     /**\n      * Evaluates all item documents in a particular expression context. This\n      * specifies, among others, a row where the values of the variables will be\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NjI2Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456956263", "body": "This is a very wide `throws` statement. Can it be narrowed at all to a smaller subset of `Exception`s?", "bodyText": "This is a very wide throws statement. Can it be narrowed at all to a smaller subset of Exceptions?", "bodyHTML": "<p dir=\"auto\">This is a very wide <code>throws</code> statement. Can it be narrowed at all to a smaller subset of <code>Exception</code>s?</p>", "author": "tfmorris", "createdAt": "2020-07-19T21:12:59Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java", "diffHunk": "@@ -39,24 +39,23 @@\n \n public class EntityCache {\n \n-    private static EntityCache _entityCache = new EntityCache(BasicApiConnection.getWikidataApiConnection());\n+    private static Map<String, EntityCache> entityCacheMap = new HashMap<>();\n \n-    private LoadingCache<String, EntityDocument> _cache = null;\n-    private WikibaseDataFetcher _fetcher;\n+    private LoadingCache<String, EntityDocument> cache;\n+    private WikibaseDataFetcher fetcher;\n \n-    protected EntityCache(ApiConnection connection) {\n-        this(new WikibaseDataFetcher(connection, Datamodel.SITE_WIKIDATA));\n+    protected EntityCache(String entityPrefix, String mediaWikiApiEndpoint) {\n+        this(new WikibaseDataFetcher(new BasicApiConnection(mediaWikiApiEndpoint), entityPrefix));\n     }\n     \n     protected EntityCache(WikibaseDataFetcher fetcher) {\n-        _fetcher = fetcher;\n+        this.fetcher = fetcher;\n \n-        _cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n+        cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n                 .build(new CacheLoader<String, EntityDocument>() {\n \n-                    public EntityDocument load(String entityId)\n-                            throws Exception {\n-                        EntityDocument doc = _fetcher.getEntityDocument(entityId);\n+                    public EntityDocument load(String entityId) throws Exception {", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\nindex 9bec19909..9c93a10b1 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n", "chunk": "@@ -39,23 +39,24 @@ import com.google.common.cache.LoadingCache;\n \n public class EntityCache {\n \n-    private static Map<String, EntityCache> entityCacheMap = new HashMap<>();\n+    private static EntityCache _entityCache = new EntityCache(BasicApiConnection.getWikidataApiConnection());\n \n-    private LoadingCache<String, EntityDocument> cache;\n-    private WikibaseDataFetcher fetcher;\n+    private LoadingCache<String, EntityDocument> _cache = null;\n+    private WikibaseDataFetcher _fetcher;\n \n-    protected EntityCache(String entityPrefix, String mediaWikiApiEndpoint) {\n-        this(new WikibaseDataFetcher(new BasicApiConnection(mediaWikiApiEndpoint), entityPrefix));\n+    protected EntityCache(ApiConnection connection) {\n+        this(new WikibaseDataFetcher(connection, Datamodel.SITE_WIKIDATA));\n     }\n     \n     protected EntityCache(WikibaseDataFetcher fetcher) {\n-        this.fetcher = fetcher;\n+        _fetcher = fetcher;\n \n-        cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n+        _cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n                 .build(new CacheLoader<String, EntityDocument>() {\n \n-                    public EntityDocument load(String entityId) throws Exception {\n-                        EntityDocument doc = EntityCache.this.fetcher.getEntityDocument(entityId);\n+                    public EntityDocument load(String entityId)\n+                            throws Exception {\n+                        EntityDocument doc = _fetcher.getEntityDocument(entityId);\n                         if (doc != null) {\n                             return doc;\n                         } else {\n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\nindex 9c93a10b1..9bec19909 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n", "chunk": "@@ -39,24 +39,23 @@ import com.google.common.cache.LoadingCache;\n \n public class EntityCache {\n \n-    private static EntityCache _entityCache = new EntityCache(BasicApiConnection.getWikidataApiConnection());\n+    private static Map<String, EntityCache> entityCacheMap = new HashMap<>();\n \n-    private LoadingCache<String, EntityDocument> _cache = null;\n-    private WikibaseDataFetcher _fetcher;\n+    private LoadingCache<String, EntityDocument> cache;\n+    private WikibaseDataFetcher fetcher;\n \n-    protected EntityCache(ApiConnection connection) {\n-        this(new WikibaseDataFetcher(connection, Datamodel.SITE_WIKIDATA));\n+    protected EntityCache(String entityPrefix, String mediaWikiApiEndpoint) {\n+        this(new WikibaseDataFetcher(new BasicApiConnection(mediaWikiApiEndpoint), entityPrefix));\n     }\n     \n     protected EntityCache(WikibaseDataFetcher fetcher) {\n-        _fetcher = fetcher;\n+        this.fetcher = fetcher;\n \n-        _cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n+        cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n                 .build(new CacheLoader<String, EntityDocument>() {\n \n-                    public EntityDocument load(String entityId)\n-                            throws Exception {\n-                        EntityDocument doc = _fetcher.getEntityDocument(entityId);\n+                    public EntityDocument load(String entityId) throws Exception {\n+                        EntityDocument doc = EntityCache.this.fetcher.getEntityDocument(entityId);\n                         if (doc != null) {\n                             return doc;\n                         } else {\n", "next_change": {"commit": "b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\nindex 9bec19909..82c3daca2 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n", "chunk": "@@ -54,7 +55,7 @@ public class EntityCache {\n         cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n                 .build(new CacheLoader<String, EntityDocument>() {\n \n-                    public EntityDocument load(String entityId) throws Exception {\n+                    public EntityDocument load(String entityId) throws MediaWikiApiErrorException, IOException {\n                         EntityDocument doc = EntityCache.this.fetcher.getEntityDocument(entityId);\n                         if (doc != null) {\n                             return doc;\n", "next_change": {"commit": "1c03940fe3149e7bb36c2c4e80b3aebb79372766", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\nindex 82c3daca2..1f6a74dd9 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n", "chunk": "@@ -23,46 +23,61 @@\n  ******************************************************************************/\n package org.openrefine.wikidata.utils;\n \n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n import org.wikidata.wdtk.datamodel.interfaces.EntityDocument;\n import org.wikidata.wdtk.datamodel.interfaces.EntityIdValue;\n import org.wikidata.wdtk.wikibaseapi.BasicApiConnection;\n import org.wikidata.wdtk.wikibaseapi.WikibaseDataFetcher;\n import org.wikidata.wdtk.wikibaseapi.apierrors.MediaWikiApiErrorException;\n \n-import com.google.common.cache.CacheBuilder;\n-import com.google.common.cache.CacheLoader;\n-import com.google.common.cache.LoadingCache;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n \n public class EntityCache {\n \n     private static Map<String, EntityCache> entityCacheMap = new HashMap<>();\n \n     private LoadingCache<String, EntityDocument> cache;\n-    private WikibaseDataFetcher fetcher;\n \n     protected EntityCache(String entityPrefix, String mediaWikiApiEndpoint) {\n         this(new WikibaseDataFetcher(new BasicApiConnection(mediaWikiApiEndpoint), entityPrefix));\n     }\n-    \n-    protected EntityCache(WikibaseDataFetcher fetcher) {\n-        this.fetcher = fetcher;\n \n+    protected EntityCache(WikibaseDataFetcher fetcher) {\n         cache = CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(1, TimeUnit.HOURS)\n                 .build(new CacheLoader<String, EntityDocument>() {\n \n-                    public EntityDocument load(String entityId) throws MediaWikiApiErrorException, IOException {\n-                        EntityDocument doc = EntityCache.this.fetcher.getEntityDocument(entityId);\n+                    @Override\n+                    public EntityDocument load(String entityId)\n+                            throws Exception {\n+                        EntityDocument doc = fetcher.getEntityDocument(entityId);\n                         if (doc != null) {\n                             return doc;\n                         } else {\n                             throw new MediaWikiApiErrorException(\"400\", \"Unknown entity id \\\"\" + entityId + \"\\\"\");\n                         }\n                     }\n+\n+                    @Override\n+                    public Map<String, EntityDocument> loadAll(Iterable<? extends String> entityIds)\n+                            throws Exception {\n+                        Map<String, EntityDocument> entityDocumentMap = fetcher.getEntityDocuments(StreamSupport.stream(entityIds.spliterator(), false)\n+                                .collect(Collectors.toList()));\n+                        if (!entityDocumentMap.isEmpty()) {\n+                            return entityDocumentMap;\n+                        } else {\n+                            throw new MediaWikiApiErrorException(\"400\", \"Unknown entity ids in \\\"\" + entityIds.toString() + \"\\\"\");\n+                        }\n+                    }\n+\n                 });\n     }\n \n", "next_change": {"commit": "b7d84eb912ed0ef6e7f8fc0ae8c011822dbd1a20", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\nindex 1f6a74dd9..d61fbc939 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/utils/EntityCache.java\n", "chunk": "@@ -85,11 +85,11 @@ public class EntityCache {\n         return cache.apply(id.getId());\n     }\n \n-    public static EntityCache getEntityCache(String entityPrefix, String mediaWikiApiEndpoint) {\n-        EntityCache entityCache = entityCacheMap.get(entityPrefix);\n+    public static EntityCache getEntityCache(String siteIri, String mediaWikiApiEndpoint) {\n+        EntityCache entityCache = entityCacheMap.get(siteIri);\n         if (entityCache == null) {\n-            entityCache = new EntityCache(entityPrefix, mediaWikiApiEndpoint);\n-            entityCacheMap.put(entityPrefix, entityCache);\n+            entityCache = new EntityCache(siteIri, mediaWikiApiEndpoint);\n+            entityCacheMap.put(siteIri, entityCache);\n         }\n         return entityCache;\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1Njg1OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r456956859", "body": "In particular, we need tests for version (missing, different minor version, different major version), as well as malformed manifests.", "bodyText": "In particular, we need tests for version (missing, different minor version, different major version), as well as malformed manifests.", "bodyHTML": "<p dir=\"auto\">In particular, we need tests for version (missing, different minor version, different major version), as well as malformed manifests.</p>", "author": "tfmorris", "createdAt": "2020-07-19T21:18:26Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import org.openrefine.wikidata.manifests.constraints.AllowedEntityTypesConstraint;\n+import org.openrefine.wikidata.manifests.constraints.TypeConstraint;\n+import org.openrefine.wikidata.testing.TestingData;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+\n+public class ManifestTest {\n+\n+    @Test\n+    public void test() throws IOException, ManifestException {\n+        String json = TestingData.jsonFromFile(\"manifest/wikidata-manifest-v1.0.json\");\n+        Manifest manifest = ManifestParser.parse(json);\n+        assertEquals(\"1.0\", manifest.getVersion());\n+        assertEquals(\"Wikidata\", manifest.getName());\n+        assertEquals(\"https://www.wikidata.org/w/api.php\", manifest.getMediaWikiApiEndpoint());\n+        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getEntityPrefix());\n+        assertEquals(\"https://wdreconcile.toolforge.org/en/api\", manifest.getReconServiceEndpoint());\n+        assertEquals(\"P2302\", manifest.getPropertyConstraintPid());\n+\n+        Constraints constraints = manifest.getConstraints();\n+\n+        // TODO: more tests", "originalCommit": "997c121a700b65df10661dd4bd4e6b420c43a828", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\nindex ff28cce4b..4750cf2f9 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n", "chunk": "@@ -13,12 +13,14 @@ public class ManifestTest {\n \n     @Test\n     public void test() throws IOException, ManifestException {\n-        String json = TestingData.jsonFromFile(\"manifest/wikidata-manifest-v1.0.json\");\n-        Manifest manifest = ManifestParser.parse(json);\n+        String json = TestingData.jsonFromFile(\"manifest/manifest-v1.0.json\");\n+        ManifestManager manager = ManifestManager.getInstance();\n+        manager.updateManifest(json);\n+        Manifest manifest = manager.getManifest();\n         assertEquals(\"1.0\", manifest.getVersion());\n         assertEquals(\"Wikidata\", manifest.getName());\n         assertEquals(\"https://www.wikidata.org/w/api.php\", manifest.getMediaWikiApiEndpoint());\n-        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getEntityPrefix());\n+        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getIri());\n         assertEquals(\"https://wdreconcile.toolforge.org/en/api\", manifest.getReconServiceEndpoint());\n         assertEquals(\"P2302\", manifest.getPropertyConstraintPid());\n \n", "next_change": {"commit": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\nindex 4750cf2f9..ff28cce4b 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n", "chunk": "@@ -13,14 +13,12 @@ public class ManifestTest {\n \n     @Test\n     public void test() throws IOException, ManifestException {\n-        String json = TestingData.jsonFromFile(\"manifest/manifest-v1.0.json\");\n-        ManifestManager manager = ManifestManager.getInstance();\n-        manager.updateManifest(json);\n-        Manifest manifest = manager.getManifest();\n+        String json = TestingData.jsonFromFile(\"manifest/wikidata-manifest-v1.0.json\");\n+        Manifest manifest = ManifestParser.parse(json);\n         assertEquals(\"1.0\", manifest.getVersion());\n         assertEquals(\"Wikidata\", manifest.getName());\n         assertEquals(\"https://www.wikidata.org/w/api.php\", manifest.getMediaWikiApiEndpoint());\n-        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getIri());\n+        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getEntityPrefix());\n         assertEquals(\"https://wdreconcile.toolforge.org/en/api\", manifest.getReconServiceEndpoint());\n         assertEquals(\"P2302\", manifest.getPropertyConstraintPid());\n \n", "next_change": {"commit": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\nindex ff28cce4b..321e77f2a 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n", "chunk": "@@ -20,15 +18,6 @@ public class ManifestTest {\n         assertEquals(\"https://www.wikidata.org/w/api.php\", manifest.getMediaWikiApiEndpoint());\n         assertEquals(\"http://www.wikidata.org/entity/\", manifest.getEntityPrefix());\n         assertEquals(\"https://wdreconcile.toolforge.org/en/api\", manifest.getReconServiceEndpoint());\n-        assertEquals(\"P2302\", manifest.getPropertyConstraintPid());\n-\n-        Constraints constraints = manifest.getConstraints();\n-\n         // TODO: more tests\n-        AllowedEntityTypesConstraint allowedEntityTypesConstraint = constraints.getAllowedEntityTypesConstraint();\n-        assertEquals(\"Q52004125\", allowedEntityTypesConstraint.getQid());\n-\n-        TypeConstraint typeConstraint = constraints.getTypeConstraint();\n-        assertEquals(\"P2308\", typeConstraint.getKlass());\n     }\n }\n", "next_change": {"commit": "2a9c97bcca5bba7df6a2fdbc94a90f41eccc25c0", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\ndeleted file mode 100644\nindex 321e77f2a..000000000\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/manifests/ManifestTest.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-package org.openrefine.wikidata.manifests;\n-\n-import org.openrefine.wikidata.testing.TestingData;\n-import org.testng.annotations.Test;\n-\n-import java.io.IOException;\n-\n-import static org.testng.AssertJUnit.assertEquals;\n-\n-public class ManifestTest {\n-\n-    @Test\n-    public void test() throws IOException, ManifestException {\n-        String json = TestingData.jsonFromFile(\"manifest/wikidata-manifest-v1.0.json\");\n-        Manifest manifest = ManifestParser.parse(json);\n-        assertEquals(\"1.0\", manifest.getVersion());\n-        assertEquals(\"Wikidata\", manifest.getName());\n-        assertEquals(\"https://www.wikidata.org/w/api.php\", manifest.getMediaWikiApiEndpoint());\n-        assertEquals(\"http://www.wikidata.org/entity/\", manifest.getEntityPrefix());\n-        assertEquals(\"https://wdreconcile.toolforge.org/en/api\", manifest.getReconServiceEndpoint());\n-        // TODO: more tests\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNzI3MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r459817270", "body": "Probably don't need the extra level of package depth here (ie remove \".v1\")", "bodyText": "Probably don't need the extra level of package depth here (ie remove \".v1\")", "bodyHTML": "<p dir=\"auto\">Probably don't need the extra level of package depth here (ie remove \".v1\")</p>", "author": "tfmorris", "createdAt": "2020-07-24T01:51:50Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java", "diffHunk": "@@ -4,7 +4,7 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n-import org.openrefine.wikidata.manifests.v1_0.ManifestV1_0;\n+import org.openrefine.wikidata.manifests.v1.ManifestV1;", "originalCommit": "3db13647c036f8818c3388dd9d6d4c3c91010e12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cdd403dcfb86611b778f5ac432cf4082132a648", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java\ndeleted file mode 100644\nindex 447dd83df..000000000\n--- a/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java\n+++ /dev/null\n", "chunk": "@@ -1,41 +0,0 @@\n-package org.openrefine.wikidata.manifests;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import org.apache.commons.lang3.StringUtils;\n-import org.openrefine.wikidata.manifests.v1.ManifestV1;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public final class ManifestParser {\n-\n-    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n-\n-    private static final ObjectMapper mapper = new ObjectMapper();\n-\n-    public static Manifest parse(String manifestJson) throws ManifestException {\n-        JsonNode root;\n-        try {\n-            root = mapper.readTree(manifestJson);\n-        } catch (JsonProcessingException e) {\n-            throw new ManifestException(\"invalid manifest format\", e);\n-        }\n-\n-        String version = root.path(\"version\").textValue();\n-        if (StringUtils.isBlank(version)) {\n-            throw new ManifestException(\"invalid manifest format, version is missing\");\n-        }\n-        if (!version.matches(\"[0-9]+\\\\.[0-9]+\")) {\n-            throw new ManifestException(\"invalid version: \" + version);\n-        }\n-\n-        String majorVersion = version.split(\"\\\\.\")[0];\n-        // support only v1.x for now\n-        if (\"1\".equals(majorVersion)) {\n-            return new ManifestV1(root);\n-        } else {\n-            throw new ManifestException(\"unsupported manifest version: \" + version);\n-        }\n-    }\n-}\n", "next_change": {"commit": "54ccd7afd5c7db6a492f6e17afd6e3c97814bf6d", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java b/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java\nnew file mode 100644\nindex 000000000..aa7957dc8\n--- /dev/null\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java\n", "chunk": "@@ -0,0 +1,38 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openrefine.wikidata.manifests.v1.ManifestV1;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ManifestParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Manifest parse(String manifestJson) throws ManifestException {\n+        JsonNode root;\n+        try {\n+            root = mapper.readTree(manifestJson);\n+        } catch (JsonProcessingException e) {\n+            throw new ManifestException(\"invalid manifest format\", e);\n+        }\n+\n+        String version = root.path(\"version\").textValue();\n+        if (StringUtils.isBlank(version)) {\n+            throw new ManifestException(\"invalid manifest format, version is missing\");\n+        }\n+\n+        String majorVersion = version.split(\"\\\\.\")[0];\n+        // support only v1.x for now\n+        if (\"1\".equals(majorVersion)) {\n+            return new ManifestV1(root);\n+        } else {\n+            throw new ManifestException(\"unsupported manifest version: \" + version);\n+        }\n+    }\n+}\n", "next_change": null}]}}]}}, {"oid": "8cdd403dcfb86611b778f5ac432cf4082132a648", "url": "https://github.com/OpenRefine/OpenRefine/commit/8cdd403dcfb86611b778f5ac432cf4082132a648", "message": "setup the manifest framework", "committedDate": "2020-07-25T13:26:08Z", "type": "commit"}, {"oid": "e8c0bec8ede2a2c8194a37897fc8382463074af2", "url": "https://github.com/OpenRefine/OpenRefine/commit/e8c0bec8ede2a2c8194a37897fc8382463074af2", "message": "add dependency mechanism to scrutinizers & update tests", "committedDate": "2020-07-25T13:26:11Z", "type": "commit"}, {"oid": "7e6677c520879d4add5cf51ae7600a41b5f8ca70", "url": "https://github.com/OpenRefine/OpenRefine/commit/7e6677c520879d4add5cf51ae7600a41b5f8ca70", "message": "add json creators to constraint entities", "committedDate": "2020-07-25T13:26:12Z", "type": "commit"}, {"oid": "cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "url": "https://github.com/OpenRefine/OpenRefine/commit/cce87cf5b50e4887848a59a05c93c2cdedb7d96c", "message": "adapt the backend (units tests are to be updated)", "committedDate": "2020-07-25T13:52:13Z", "type": "commit"}, {"oid": "4aba889be100074d8b0cbefddc65d6339eda8d2c", "url": "https://github.com/OpenRefine/OpenRefine/commit/4aba889be100074d8b0cbefddc65d6339eda8d2c", "message": "remove the call to prepareDependencies() in the constructor", "committedDate": "2020-07-25T13:52:15Z", "type": "commit"}, {"oid": "4b8059ae554235622cc8803263f7dd2e1e7f3642", "url": "https://github.com/OpenRefine/OpenRefine/commit/4b8059ae554235622cc8803263f7dd2e1e7f3642", "message": "update code style", "committedDate": "2020-07-25T13:52:15Z", "type": "commit"}, {"oid": "b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "url": "https://github.com/OpenRefine/OpenRefine/commit/b6a6856bc6d7f43b15e0cf72c79fee62189cd8b9", "message": "update code according to review feedback", "committedDate": "2020-07-25T13:52:16Z", "type": "commit"}, {"oid": "2a0a2026861c84ee971e7de34fed598241e99d24", "url": "https://github.com/OpenRefine/OpenRefine/commit/2a0a2026861c84ee971e7de34fed598241e99d24", "message": "update scrutinizers tests", "committedDate": "2020-07-25T13:53:21Z", "type": "commit"}, {"oid": "fb5af6380f9567a07dad17e05a0251076998f2ff", "url": "https://github.com/OpenRefine/OpenRefine/commit/fb5af6380f9567a07dad17e05a0251076998f2ff", "message": "fix typo & update ConstraintsV1", "committedDate": "2020-07-25T13:53:22Z", "type": "commit"}, {"oid": "62336661b5fbaaa9cc6e5ab2b24a114f5e3af152", "url": "https://github.com/OpenRefine/OpenRefine/commit/62336661b5fbaaa9cc6e5ab2b24a114f5e3af152", "message": "log if a scrutinizer is skipped", "committedDate": "2020-07-25T13:53:23Z", "type": "commit"}, {"oid": "54ccd7afd5c7db6a492f6e17afd6e3c97814bf6d", "url": "https://github.com/OpenRefine/OpenRefine/commit/54ccd7afd5c7db6a492f6e17afd6e3c97814bf6d", "message": "update versioning handling in the backend", "committedDate": "2020-07-25T13:53:23Z", "type": "commit"}, {"oid": "47a5faa2684b424460e9d21d1c2fdfce1a01606e", "url": "https://github.com/OpenRefine/OpenRefine/commit/47a5faa2684b424460e9d21d1c2fdfce1a01606e", "message": "correct the order of \"actual\" and \"expected\" for assertEquals method", "committedDate": "2020-07-25T13:53:24Z", "type": "commit"}, {"oid": "852c8cf4dce8b100738acce2625452d849002762", "url": "https://github.com/OpenRefine/OpenRefine/commit/852c8cf4dce8b100738acce2625452d849002762", "message": "use regex to check manifest versions", "committedDate": "2020-07-25T13:53:24Z", "type": "commit"}, {"oid": "403d890a319a99bf3191fa22f00ec0cf643b50ce", "url": "https://github.com/OpenRefine/OpenRefine/commit/403d890a319a99bf3191fa22f00ec0cf643b50ce", "message": "1. add wikibase-manager.js, wikibase-dialog.js, etc.\n2. move dialog/schema-alignment-dialog.js -> schema-alignment.js\n3. remove unused schema-alignment-dialog.html\n4. change most mentions of \"Wikidata\" to \"Wikibase\"", "committedDate": "2020-07-25T14:25:59Z", "type": "commit"}, {"oid": "5372cc64bb2435fbc42b3bda954bd00612a4773d", "url": "https://github.com/OpenRefine/OpenRefine/commit/5372cc64bb2435fbc42b3bda954bd00612a4773d", "message": "add new line to end of file", "committedDate": "2020-07-25T14:26:01Z", "type": "commit"}, {"oid": "528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "url": "https://github.com/OpenRefine/OpenRefine/commit/528c5a0c4d6effefb1db8f6aed44f57892bce6d8", "message": "support saving cookies for different Wikibases & fix LoginCommandTest", "committedDate": "2020-07-25T14:26:01Z", "type": "commit"}, {"oid": "b9307dd214784c92221e114e2fcf5124f4fc1b80", "url": "https://github.com/OpenRefine/OpenRefine/commit/b9307dd214784c92221e114e2fcf5124f4fc1b80", "message": "fix schema related tests", "committedDate": "2020-07-25T14:26:02Z", "type": "commit"}, {"oid": "8571c2b7bc03fe06a2d7200f246ad60f46320cf1", "url": "https://github.com/OpenRefine/OpenRefine/commit/8571c2b7bc03fe06a2d7200f246ad60f46320cf1", "message": "removed unused WikibaseCredentials", "committedDate": "2020-07-25T14:26:02Z", "type": "commit"}, {"oid": "ebee3693d2089f92f8de8cc5351fb9bf799c24c8", "url": "https://github.com/OpenRefine/OpenRefine/commit/ebee3693d2089f92f8de8cc5351fb9bf799c24c8", "message": "include MediaWiki API endpoint in the schema", "committedDate": "2020-07-25T14:26:03Z", "type": "commit"}, {"oid": "836ee53e93a7caf8530661941c209fd756e48d74", "url": "https://github.com/OpenRefine/OpenRefine/commit/836ee53e93a7caf8530661941c209fd756e48d74", "message": "fetch language codes for different Wikibases", "committedDate": "2020-07-25T14:26:04Z", "type": "commit"}, {"oid": "836ee53e93a7caf8530661941c209fd756e48d74", "url": "https://github.com/OpenRefine/OpenRefine/commit/836ee53e93a7caf8530661941c209fd756e48d74", "message": "fetch language codes for different Wikibases", "committedDate": "2020-07-25T14:26:04Z", "type": "forcePushed"}, {"oid": "502f4b3c496d026f1a47520d4eaed71abf7ac73e", "url": "https://github.com/OpenRefine/OpenRefine/commit/502f4b3c496d026f1a47520d4eaed71abf7ac73e", "message": "fix lgtm-bot alerts", "committedDate": "2020-07-26T07:41:53Z", "type": "commit"}, {"oid": "dd134fb8151407d53f11e06aeb93205550892532", "url": "https://github.com/OpenRefine/OpenRefine/commit/dd134fb8151407d53f11e06aeb93205550892532", "message": "keep a connection map (MediaWiki API endpoint => Connection) in ConnectionManager", "committedDate": "2020-07-27T02:18:23Z", "type": "commit"}, {"oid": "61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "url": "https://github.com/OpenRefine/OpenRefine/commit/61f6d1b3b1b036077ceb9ee62eb0613d8de22b7c", "message": "simplify the constraint configurations of the manifest and remove lots of unnecessary code.", "committedDate": "2020-07-27T08:21:41Z", "type": "commit"}, {"oid": "b30db8a6ef7d9e20ee32ffd583eeed7d7693fba7", "url": "https://github.com/OpenRefine/OpenRefine/commit/b30db8a6ef7d9e20ee32ffd583eeed7d7693fba7", "message": "add slash to the end of mediawiki.root", "committedDate": "2020-07-27T08:25:47Z", "type": "commit"}, {"oid": "543bcf02645625a31c55384e4185fe6a1f080bcc", "url": "https://github.com/OpenRefine/OpenRefine/commit/543bcf02645625a31c55384e4185fe6a1f080bcc", "message": "add manifest schema and use ajv to validate the manifest", "committedDate": "2020-07-27T14:06:38Z", "type": "commit"}, {"oid": "35e3136a6220e1f1a58be5c83d7b91ed948d986e", "url": "https://github.com/OpenRefine/OpenRefine/commit/35e3136a6220e1f1a58be5c83d7b91ed948d986e", "message": "remove JSONP support (Wikibase manifest host should support CORS)", "committedDate": "2020-07-28T01:37:36Z", "type": "commit"}, {"oid": "a56ec663f027ae6bdcca4bb56b9c31ae3039e04e", "url": "https://github.com/OpenRefine/OpenRefine/commit/a56ec663f027ae6bdcca4bb56b9c31ae3039e04e", "message": "save manifests on manifest update", "committedDate": "2020-07-28T01:41:53Z", "type": "commit"}, {"oid": "2a9c97bcca5bba7df6a2fdbc94a90f41eccc25c0", "url": "https://github.com/OpenRefine/OpenRefine/commit/2a9c97bcca5bba7df6a2fdbc94a90f41eccc25c0", "message": "add unit tests for Manifest", "committedDate": "2020-07-28T02:21:11Z", "type": "commit"}, {"oid": "8472fc1fc7b70fbca8cbc26d1122c9dd69b05fd6", "url": "https://github.com/OpenRefine/OpenRefine/commit/8472fc1fc7b70fbca8cbc26d1122c9dd69b05fd6", "message": "include the exception in logger.error() method to make it easier to debug", "committedDate": "2020-07-28T02:22:48Z", "type": "commit"}, {"oid": "b7aafd2987285ddf2d79938af8175fdacdc2eb08", "url": "https://github.com/OpenRefine/OpenRefine/commit/b7aafd2987285ddf2d79938af8175fdacdc2eb08", "message": "typo", "committedDate": "2020-07-28T02:46:10Z", "type": "commit"}, {"oid": "fab35a146c6bc17693e8027c03150b58b991bad4", "url": "https://github.com/OpenRefine/OpenRefine/commit/fab35a146c6bc17693e8027c03150b58b991bad4", "message": "include the message of ManifestException when calling respondError", "committedDate": "2020-07-28T02:47:17Z", "type": "commit"}, {"oid": "f117b6ccf51cf308fcd8fd070a02cc23635213b1", "url": "https://github.com/OpenRefine/OpenRefine/commit/f117b6ccf51cf308fcd8fd070a02cc23635213b1", "message": "test multiple connections", "committedDate": "2020-07-28T03:05:30Z", "type": "commit"}, {"oid": "c1a7e35997185a0d9d61c8a3b9b7b1b46d6fc990", "url": "https://github.com/OpenRefine/OpenRefine/commit/c1a7e35997185a0d9d61c8a3b9b7b1b46d6fc990", "message": "test no manifest & test invalid manifest", "committedDate": "2020-07-28T03:32:54Z", "type": "commit"}, {"oid": "d7e51a61599c8a2e2de02de19ff18257ffb73937", "url": "https://github.com/OpenRefine/OpenRefine/commit/d7e51a61599c8a2e2de02de19ff18257ffb73937", "message": "adapt manage-account-dialog.js to support multiple Wikibase connections", "committedDate": "2020-07-28T07:22:23Z", "type": "commit"}, {"oid": "e78fc140358c7c6170cf48c312d7b9b10a695aa6", "url": "https://github.com/OpenRefine/OpenRefine/commit/e78fc140358c7c6170cf48c312d7b9b10a695aa6", "message": "remove unused variables", "committedDate": "2020-07-28T07:23:15Z", "type": "commit"}, {"oid": "d0db49a8d10cfa77c6ae6be6f6a245041898fce6", "url": "https://github.com/OpenRefine/OpenRefine/commit/d0db49a8d10cfa77c6ae6be6f6a245041898fce6", "message": "update translations", "committedDate": "2020-07-28T07:50:26Z", "type": "commit"}, {"oid": "e0bb9aa391e9347662be997b46d1049381c25726", "url": "https://github.com/OpenRefine/OpenRefine/commit/e0bb9aa391e9347662be997b46d1049381c25726", "message": "update instance/subclass of related translations", "committedDate": "2020-07-28T07:54:42Z", "type": "commit"}, {"oid": "f4bcbc4258015d8c8bd6e37df7e87b90c4eb8f93", "url": "https://github.com/OpenRefine/OpenRefine/commit/f4bcbc4258015d8c8bd6e37df7e87b90c4eb8f93", "message": "beautify import-schema-dialog.html", "committedDate": "2020-07-28T08:20:22Z", "type": "commit"}, {"oid": "c53f4b868f8a956e953a20ea23c92fc48e177906", "url": "https://github.com/OpenRefine/OpenRefine/commit/c53f4b868f8a956e953a20ea23c92fc48e177906", "message": "use \"${lang}\" variable in the reconciliation service endpoint of the manifest", "committedDate": "2020-07-28T13:00:56Z", "type": "commit"}, {"oid": "e8c83ce29911beff86bbecbee0234fbd36975e5e", "url": "https://github.com/OpenRefine/OpenRefine/commit/e8c83ce29911beff86bbecbee0234fbd36975e5e", "message": "adapt schema-alignment.js after introducing \"${lang}\" variable in the reconciliation service endpoint", "committedDate": "2020-07-29T02:20:57Z", "type": "commit"}, {"oid": "fa0422fce490d7f447566733ea89d999e6642f1d", "url": "https://github.com/OpenRefine/OpenRefine/commit/fa0422fce490d7f447566733ea89d999e6642f1d", "message": "use WikibaseManager.getSelectedWikibaseApi() in SchemaAlignment._getPropertyType", "committedDate": "2020-07-29T02:22:08Z", "type": "commit"}, {"oid": "3d84268ac66fd6e75fce92d198a617df4aa89541", "url": "https://github.com/OpenRefine/OpenRefine/commit/3d84268ac66fd6e75fce92d198a617df4aa89541", "message": "replace more mentions of \"Wikidata\" to \"Wikibase\"", "committedDate": "2020-07-29T02:27:47Z", "type": "commit"}, {"oid": "1c03940fe3149e7bb36c2c4e80b3aebb79372766", "url": "https://github.com/OpenRefine/OpenRefine/commit/1c03940fe3149e7bb36c2c4e80b3aebb79372766", "message": "Merge branch 'master' into wikibase-support", "committedDate": "2020-07-29T02:56:57Z", "type": "commit"}, {"oid": "ced355db54b8b2cd5b3f2ad5362a1baacf3c0d12", "url": "https://github.com/OpenRefine/OpenRefine/commit/ced355db54b8b2cd5b3f2ad5362a1baacf3c0d12", "message": "use WikibaseManager.getSelectedWikibaseApi() in previewrenderer.js", "committedDate": "2020-07-29T03:42:25Z", "type": "commit"}, {"oid": "a602e45d639ae1f21a2be4995d2be5beb7cdf643", "url": "https://github.com/OpenRefine/OpenRefine/commit/a602e45d639ae1f21a2be4995d2be5beb7cdf643", "message": "support fetching language codes of different Wikibases in the frontend", "committedDate": "2020-07-30T02:52:59Z", "type": "commit"}, {"oid": "d555c90f64fbb121c5e30a51783e81079fbea3d8", "url": "https://github.com/OpenRefine/OpenRefine/commit/d555c90f64fbb121c5e30a51783e81079fbea3d8", "message": "skip EditInspector if missing 'property_constraint_pid' in the manifest", "committedDate": "2020-07-30T07:28:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjM5OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r462816398", "body": "Not all scrutinizers rely on WikibaseQualityConstraints, so it is worth inspecting the batch even if no constraints are set up in the manifest.", "bodyText": "Not all scrutinizers rely on WikibaseQualityConstraints, so it is worth inspecting the batch even if no constraints are set up in the manifest.", "bodyHTML": "<p dir=\"auto\">Not all scrutinizers rely on WikibaseQualityConstraints, so it is worth inspecting the batch even if no constraints are set up in the manifest.</p>", "author": "wetneb", "createdAt": "2020-07-30T07:54:50Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java", "diffHunk": "@@ -105,10 +105,12 @@ public void doPost(HttpServletRequest request, HttpServletResponse response)\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            // Inspect the edits and generate warnings\n-            EditInspector inspector = new EditInspector(warningStore, manifest);\n-            inspector.inspect(editBatch);\n-            \n+            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {", "originalCommit": "d555c90f64fbb121c5e30a51783e81079fbea3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3MjY1NA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r462872654", "bodyText": "Fixed with commit 4d9cc4e below.", "author": "afkbrb", "createdAt": "2020-07-30T09:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxNjM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\nindex 8a3b79a7b..ef806551b 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/commands/PreviewWikibaseSchemaCommand.java\n", "chunk": "@@ -105,11 +105,9 @@ public class PreviewWikibaseSchemaCommand extends Command {\n             Engine engine = getEngine(request, project);\n             List<ItemUpdate> editBatch = schema.evaluate(project, engine, warningStore);\n \n-            if (manifest.getConstraintsRelatedId(\"property_constraint_pid\") != null) {\n-                // Inspect the edits and generate warnings\n-                EditInspector inspector = new EditInspector(warningStore, manifest);\n-                inspector.inspect(editBatch);\n-            }\n+            // Inspect the edits and generate warnings\n+            EditInspector inspector = new EditInspector(warningStore, manifest);\n+            inspector.inspect(editBatch);\n \n             // Dump the first 10 edits, scheduled with the default scheduler\n             WikibaseAPIUpdateScheduler scheduler = new WikibaseAPIUpdateScheduler();\n", "next_change": null}]}}, {"oid": "962cc2e79d571d1fff19db0b2b9442ff3ce15124", "url": "https://github.com/OpenRefine/OpenRefine/commit/962cc2e79d571d1fff19db0b2b9442ff3ce15124", "message": "improve unit tests for fetching lang codes", "committedDate": "2020-07-30T08:33:08Z", "type": "commit"}, {"oid": "4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "url": "https://github.com/OpenRefine/OpenRefine/commit/4d9cc4e331e7d77e95d5ed76984a1f04decefc77", "message": "skip scrutinizers depending on fetcher if 'property_constraint_pid' is missing in the manifest", "committedDate": "2020-07-30T09:31:03Z", "type": "commit"}, {"oid": "25faa2ad8d5faec77c0e2eb6ab611f84a17efdf2", "url": "https://github.com/OpenRefine/OpenRefine/commit/25faa2ad8d5faec77c0e2eb6ab611f84a17efdf2", "message": "make sure the schema alignment panel is set up before rendering", "committedDate": "2020-08-03T01:47:05Z", "type": "commit"}, {"oid": "974dee6539ff59e36343a21e22319179d8c2bb65", "url": "https://github.com/OpenRefine/OpenRefine/commit/974dee6539ff59e36343a21e22319179d8c2bb65", "message": "fix preview bug", "committedDate": "2020-08-03T02:52:43Z", "type": "commit"}, {"oid": "7b24c3e37bd712e3f2f32a391250382125bacc7b", "url": "https://github.com/OpenRefine/OpenRefine/commit/7b24c3e37bd712e3f2f32a391250382125bacc7b", "message": "add getters of \"instance of\" and \"subclass of\" to the Manifest interface and use them in NewItemScrutinizer", "committedDate": "2020-08-03T03:09:24Z", "type": "commit"}, {"oid": "23d4d881741396b5e277e0c539a76a73ff19e0d5", "url": "https://github.com/OpenRefine/OpenRefine/commit/23d4d881741396b5e277e0c539a76a73ff19e0d5", "message": "fix hardcode for Wikidata in WbItemVariable", "committedDate": "2020-08-03T03:10:39Z", "type": "commit"}, {"oid": "b7d84eb912ed0ef6e7f8fc0ae8c011822dbd1a20", "url": "https://github.com/OpenRefine/OpenRefine/commit/b7d84eb912ed0ef6e7f8fc0ae8c011822dbd1a20", "message": "rename 'entity_prefix' to 'site_iri' and move it from 'manifest.wikibase.properties' to 'manifest.wikibase'", "committedDate": "2020-08-03T09:59:12Z", "type": "commit"}, {"oid": "af735edf68efb57a14475d39b19c18e67153bb87", "url": "https://github.com/OpenRefine/OpenRefine/commit/af735edf68efb57a14475d39b19c18e67153bb87", "message": "include oauth configurations in the manifest & support logging in with owner-only consumer for Wikibases with the OAuth extension", "committedDate": "2020-08-05T13:33:43Z", "type": "commit"}, {"oid": "fc82ba490713160975aa36f038e1cd6eb3a24a19", "url": "https://github.com/OpenRefine/OpenRefine/commit/fc82ba490713160975aa36f038e1cd6eb3a24a19", "message": "correct schema fallback logic", "committedDate": "2020-08-06T14:02:50Z", "type": "commit"}, {"oid": "63433d7c83bb153f70439de8b4c9e9ee9631db0e", "url": "https://github.com/OpenRefine/OpenRefine/commit/63433d7c83bb153f70439de8b4c9e9ee9631db0e", "message": "select default wikibase according to the saved schema", "committedDate": "2020-08-06T14:52:15Z", "type": "commit"}, {"oid": "a47e9c17e2f30877ed7328648a27c4a6568484f4", "url": "https://github.com/OpenRefine/OpenRefine/commit/a47e9c17e2f30877ed7328648a27c4a6568484f4", "message": "Merge branch 'master' into wikibase-support", "committedDate": "2020-08-14T01:47:41Z", "type": "commit"}, {"oid": "328869f464fd4307be8ab731602d773bb62ffdbd", "url": "https://github.com/OpenRefine/OpenRefine/commit/328869f464fd4307be8ab731602d773bb62ffdbd", "message": "include maxlag in the manifest", "committedDate": "2020-08-15T08:40:17Z", "type": "commit"}, {"oid": "8f4b2daaba8484c7e4b3665d6408e94799eda890", "url": "https://github.com/OpenRefine/OpenRefine/commit/8f4b2daaba8484c7e4b3665d6408e94799eda890", "message": "[backend] move maxlag setting from preferences to request parameter", "committedDate": "2020-08-15T09:00:45Z", "type": "commit"}, {"oid": "5a0774bcffddefdd688160c8eec0596398c4c0bc", "url": "https://github.com/OpenRefine/OpenRefine/commit/5a0774bcffddefdd688160c8eec0596398c4c0bc", "message": "support setting maxlag when uploading edits", "committedDate": "2020-08-16T02:45:48Z", "type": "commit"}, {"oid": "bc45fda0d45b103b292830423b706b4a40c2c254", "url": "https://github.com/OpenRefine/OpenRefine/commit/bc45fda0d45b103b292830423b706b4a40c2c254", "message": "Merge branch 'master' into wikibase-support\n\n# Conflicts:\n#\textensions/wikidata/module/langs/translation-nb_NO.json", "committedDate": "2020-08-16T07:16:18Z", "type": "commit"}, {"oid": "8a001921c6a1d758b8a7ef2d9aa0eed3a119b60b", "url": "https://github.com/OpenRefine/OpenRefine/commit/8a001921c6a1d758b8a7ef2d9aa0eed3a119b60b", "message": "rename \"Manage Wikibase\" to \"Select Wikibase instance\" and localize it", "committedDate": "2020-08-17T01:28:50Z", "type": "commit"}, {"oid": "4d82d3be84530d2418b1f3dd5c0c21c81f528af0", "url": "https://github.com/OpenRefine/OpenRefine/commit/4d82d3be84530d2418b1f3dd5c0c21c81f528af0", "message": "fix manifest updating bug", "committedDate": "2020-08-17T02:52:22Z", "type": "commit"}, {"oid": "995026defd15b1e20384988eca515e05a7003944", "url": "https://github.com/OpenRefine/OpenRefine/commit/995026defd15b1e20384988eca515e05a7003944", "message": "remove unnecessary commas", "committedDate": "2020-08-18T11:13:39Z", "type": "commit"}, {"oid": "fe802513df58707fb5e48bf1b9ddd78a61d2b44f", "url": "https://github.com/OpenRefine/OpenRefine/commit/fe802513df58707fb5e48bf1b9ddd78a61d2b44f", "message": "update translation-en.json", "committedDate": "2020-08-18T11:15:29Z", "type": "commit"}, {"oid": "f5d1fd5e8f9cb8be731c1a337d7e43d7321ee4aa", "url": "https://github.com/OpenRefine/OpenRefine/commit/f5d1fd5e8f9cb8be731c1a337d7e43d7321ee4aa", "message": "include EditGroups in the manifest", "committedDate": "2020-08-19T04:58:20Z", "type": "commit"}, {"oid": "0ad8f88e423d9352452378ee3c6395710ed39e0a", "url": "https://github.com/OpenRefine/OpenRefine/commit/0ad8f88e423d9352452378ee3c6395710ed39e0a", "message": "add the reconciliation service from the manifest to standard services if it's not present yet when adding a new manifest", "committedDate": "2020-08-19T07:08:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI5NQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474866295", "body": "You probably want to check `isMissingNode()` before trying to get the `textValue()`. Do we have a test for a malformed manifest e.g. missing a version?", "bodyText": "You probably want to check isMissingNode() before trying to get the textValue(). Do we have a test for a malformed manifest e.g. missing a version?", "bodyHTML": "<p dir=\"auto\">You probably want to check <code>isMissingNode()</code> before trying to get the <code>textValue()</code>. Do we have a test for a malformed manifest e.g. missing a version?</p>", "author": "tfmorris", "createdAt": "2020-08-21T18:44:19Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/manifests/ManifestParser.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.openrefine.wikidata.manifests;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ManifestParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static Manifest parse(String manifestJson) throws ManifestException {\n+        JsonNode root;\n+        try {\n+            root = mapper.readTree(manifestJson);\n+        } catch (JsonProcessingException e) {\n+            throw new ManifestException(\"invalid manifest format\", e);\n+        }\n+\n+        String version = root.path(\"version\").textValue();", "originalCommit": "0ad8f88e423d9352452378ee3c6395710ed39e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NTk4Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475055982", "bodyText": "@wetneb @tfmorris The format check of a manifest is done in the frontend with the JSON schema.  Do we need to check it again in the backend?\nBy using the schema, manifests saved within OpenRefine are guaranteed to be valid, so it's not necessary to check the manifest format again in the backend. But if the user uses the API the backend exposed directly, then the check is necessary.\nIf we do need to check again in the backend, then we should also use the schema to validate the format. As long as the format is valid, isMissingNode() above will always return false.", "author": "afkbrb", "createdAt": "2020-08-22T06:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMTQzOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475101438", "bodyText": "I think it would be wise to validate on the backend rather than depending on the client to provide well-formed data. Generally speaking, I don't think that the backend should count on well-behaved clients.", "author": "tfmorris", "createdAt": "2020-08-22T15:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMjk5OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475102999", "bodyText": "I've created a separate issue for that (#3109), though, so we can merge this PR.", "author": "tfmorris", "createdAt": "2020-08-22T15:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MjQ1Mg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475152452", "bodyText": "Thanks Tom.", "author": "afkbrb", "createdAt": "2020-08-23T00:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NDg0Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474874843", "body": "Can the the JSON property and the getter names be aligned here?", "bodyText": "Can the the JSON property and the getter names be aligned here?", "bodyHTML": "<p dir=\"auto\">Can the the JSON property and the getter names be aligned here?</p>", "author": "tfmorris", "createdAt": "2020-08-21T19:03:40Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java", "diffHunk": "@@ -59,43 +59,62 @@\n     final static Logger logger = LoggerFactory.getLogger(\"RdfSchema\");\n \n     @JsonProperty(\"itemDocuments\")\n-    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<WbItemDocumentExpr>();\n+    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<>();\n+\n+    @JsonProperty(\"wikibasePrefix\")\n+    protected String baseIri;\n+\n+    @JsonProperty(\"mediaWikiApiEndpoint\")\n+    protected String mediaWikiApiEndpoint;\n \n-    protected String baseIri = \"http://www.wikidata.org/entity/\";\n+    @JsonIgnore\n+    protected String editGroupsURLSchema;\n \n     /**\n      * Constructor.\n      */\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"wikibasePrefix\") String baseIri,\n+                          @JsonProperty(\"mediaWikiApiEndpoint\") String mediaWikiApiEndpoint,\n+                          @JsonProperty(\"editGroupsURLSchema\") String editGroupsURLSchema) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n+        this.mediaWikiApiEndpoint = mediaWikiApiEndpoint;\n+        this.editGroupsURLSchema = editGroupsURLSchema;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"wikibasePrefix\")\n     public String getBaseIri() {\n         return baseIri;\n     }\n \n     /**\n      * @return the list of document expressions for this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"itemDocuments\")", "originalCommit": "0ad8f88e423d9352452378ee3c6395710ed39e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA4NDY3Nw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475084677", "bodyText": "For backward compatibility, the JSON property should be \"itemDocuments\". And since the type of the return value is Expression, naming the getter \"getItemDocumentExpressions\" makes more sense.", "author": "afkbrb", "createdAt": "2020-08-22T12:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NDg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5OTI0OA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475099248", "bodyText": "Sounds good.", "author": "tfmorris", "createdAt": "2020-08-22T15:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NDg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex ee8239ae1..82f0bc734 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -94,9 +94,9 @@ public class WikibaseSchema implements OverlayModel {\n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonProperty(\"wikibasePrefix\")\n-    public String getBaseIri() {\n-        return baseIri;\n+    @JsonProperty(\"siteIri\")\n+    public String getSiteIri() {\n+        return siteIri;\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NTAyNQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r474875025", "body": "Can the the JSON property and the getter names be aligned here?\r\n", "bodyText": "Can the the JSON property and the getter names be aligned here?", "bodyHTML": "<p dir=\"auto\">Can the the JSON property and the getter names be aligned here?</p>", "author": "tfmorris", "createdAt": "2020-08-21T19:04:01Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java", "diffHunk": "@@ -59,43 +59,62 @@\n     final static Logger logger = LoggerFactory.getLogger(\"RdfSchema\");\n \n     @JsonProperty(\"itemDocuments\")\n-    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<WbItemDocumentExpr>();\n+    protected List<WbItemDocumentExpr> itemDocumentExprs = new ArrayList<>();\n+\n+    @JsonProperty(\"wikibasePrefix\")\n+    protected String baseIri;\n+\n+    @JsonProperty(\"mediaWikiApiEndpoint\")\n+    protected String mediaWikiApiEndpoint;\n \n-    protected String baseIri = \"http://www.wikidata.org/entity/\";\n+    @JsonIgnore\n+    protected String editGroupsURLSchema;\n \n     /**\n      * Constructor.\n      */\n     public WikibaseSchema() {\n \n     }\n-    \n+\n     /**\n      * Constructor for deserialization via Jackson\n      */\n     @JsonCreator\n-    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs) {\n+    public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n+                          @JsonProperty(\"wikibasePrefix\") String baseIri,\n+                          @JsonProperty(\"mediaWikiApiEndpoint\") String mediaWikiApiEndpoint,\n+                          @JsonProperty(\"editGroupsURLSchema\") String editGroupsURLSchema) {\n         this.itemDocumentExprs = exprs;\n+        this.baseIri = baseIri;\n+        this.mediaWikiApiEndpoint = mediaWikiApiEndpoint;\n+        this.editGroupsURLSchema = editGroupsURLSchema;\n     }\n \n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonIgnore\n+    @JsonProperty(\"wikibasePrefix\")", "originalCommit": "0ad8f88e423d9352452378ee3c6395710ed39e0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA4NjU2MA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2810#discussion_r475086560", "bodyText": "Naming both to \"siteIri\" could be better.", "author": "afkbrb", "createdAt": "2020-08-22T12:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg3NTAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "changed_code": [{"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex ee8239ae1..82f0bc734 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -82,11 +82,11 @@ public class WikibaseSchema implements OverlayModel {\n      */\n     @JsonCreator\n     public WikibaseSchema(@JsonProperty(\"itemDocuments\") List<WbItemDocumentExpr> exprs,\n-                          @JsonProperty(\"wikibasePrefix\") String baseIri,\n+                          @JsonProperty(\"siteIri\") String siteIri,\n                           @JsonProperty(\"mediaWikiApiEndpoint\") String mediaWikiApiEndpoint,\n                           @JsonProperty(\"editGroupsURLSchema\") String editGroupsURLSchema) {\n         this.itemDocumentExprs = exprs;\n-        this.baseIri = baseIri;\n+        this.siteIri = siteIri;\n         this.mediaWikiApiEndpoint = mediaWikiApiEndpoint;\n         this.editGroupsURLSchema = editGroupsURLSchema;\n     }\n", "next_change": null}, {"header": "diff --git a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\nindex ee8239ae1..82f0bc734 100644\n--- a/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n+++ b/extensions/wikidata/src/org/openrefine/wikidata/schema/WikibaseSchema.java\n", "chunk": "@@ -94,9 +94,9 @@ public class WikibaseSchema implements OverlayModel {\n     /**\n      * @return the site IRI of the Wikibase instance referenced by this schema\n      */\n-    @JsonProperty(\"wikibasePrefix\")\n-    public String getBaseIri() {\n-        return baseIri;\n+    @JsonProperty(\"siteIri\")\n+    public String getSiteIri() {\n+        return siteIri;\n     }\n \n     /**\n", "next_change": null}]}}, {"oid": "fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e", "url": "https://github.com/OpenRefine/OpenRefine/commit/fce9d0ec1f7741f9a2bdcbad8313564cf3c0924e", "message": "Merge branch 'master' into wikibase-support\n\n# Conflicts:\n#\textensions/wikidata/module/scripts/schema-alignment.js", "committedDate": "2020-08-22T06:10:03Z", "type": "commit"}, {"oid": "1ffd8f1744476303be46ea7984b53ccc5e7692c3", "url": "https://github.com/OpenRefine/OpenRefine/commit/1ffd8f1744476303be46ea7984b53ccc5e7692c3", "message": "update according to review feedback\n\n1. use inherited color variable\n2. rename 'gridwroks' to 'openrefine'\n3. remove unnecessary 'async: true'\n4. add 'format: url' validation to urls to the schema", "committedDate": "2020-08-22T07:24:50Z", "type": "commit"}, {"oid": "cb3c638ed7265906e9ef5303d759545330577f72", "url": "https://github.com/OpenRefine/OpenRefine/commit/cb3c638ed7265906e9ef5303d759545330577f72", "message": "update translation-en.json", "committedDate": "2020-08-22T12:02:21Z", "type": "commit"}, {"oid": "432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "url": "https://github.com/OpenRefine/OpenRefine/commit/432ad4ab50d3c8e3c410f381324ac893cc6e16f8", "message": "rename 'wikibasePrefix' to 'siteIri'", "committedDate": "2020-08-22T14:27:16Z", "type": "commit"}]}