{"pr_number": 3070, "pr_title": "Changed List return type to ImmutableList in Wikidata schema package classes", "pr_author": "darecoder", "pr_createdAt": "2020-08-12T17:49:34Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/3070", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2OTgwOQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3070#discussion_r469469809", "body": "Any chance of convincing your IDE to not reorder imports? It makes for a very noisy diff.", "bodyText": "Any chance of convincing your IDE to not reorder imports? It makes for a very noisy diff.", "bodyHTML": "<p dir=\"auto\">Any chance of convincing your IDE to not reorder imports? It makes for a very noisy diff.</p>", "author": "tfmorris", "createdAt": "2020-08-12T18:49:50Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemDocumentExpr.java", "diffHunk": "@@ -23,20 +23,20 @@\n  ******************************************************************************/\n package org.openrefine.wikidata.schema;\n \n-import java.util.Collections;\n-import java.util.List;\n-\n+import com.fasterxml.jackson.annotation.JsonCreator;", "originalCommit": "d6ccaffda3500343f073b3c11495eedaeb6aa511", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MjQ2NQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3070#discussion_r469472465", "body": "`Collections.unmodifiableList()` is probably a simpler (and higher performance?) idiom here.\r\n```suggestion\r\n        return Collections.unmodifiableList(nameDescs);\r\n```", "bodyText": "Collections.unmodifiableList() is probably a simpler (and higher performance?) idiom here.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return nameDescs.stream().collect(ImmutableList.toImmutableList());\n          \n          \n            \n                    return Collections.unmodifiableList(nameDescs);", "bodyHTML": "<p dir=\"auto\"><code>Collections.unmodifiableList()</code> is probably a simpler (and higher performance?) idiom here.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"x x-first\">nameDescs</span><span class=\"pl-k x\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x\">.</span><span class=\"x\">collect(</span><span class=\"pl-smi x\">ImmutableList</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toImmutableList()</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi x x-first\">Collections</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">unmodifiableList(nameDescs</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "tfmorris", "createdAt": "2020-08-12T18:54:36Z", "path": "extensions/wikidata/src/org/openrefine/wikidata/schema/WbItemDocumentExpr.java", "diffHunk": "@@ -96,12 +96,12 @@ public ItemUpdate evaluate(ExpressionContext ctxt)\n \n     @JsonProperty(\"nameDescs\")\n     public List<WbNameDescExpr> getNameDescs() {\n-        return nameDescs;\n+        return nameDescs.stream().collect(ImmutableList.toImmutableList());", "originalCommit": "d6ccaffda3500343f073b3c11495eedaeb6aa511", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e4be067501625053845f7d0865082aab471008b", "url": "https://github.com/OpenRefine/OpenRefine/commit/5e4be067501625053845f7d0865082aab471008b", "message": "replaced ImmutableList to unmodifiableList", "committedDate": "2020-08-13T05:50:22Z", "type": "commit"}, {"oid": "a70f164053b0cd5e046e5685da6f2b911a15be8b", "url": "https://github.com/OpenRefine/OpenRefine/commit/a70f164053b0cd5e046e5685da6f2b911a15be8b", "message": "added test cases to check unmodifiable Lists", "committedDate": "2020-08-13T06:55:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc0MTIwOA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3070#discussion_r469741208", "body": "This way of testing immutability might be a bit brittle - the tests could fail if we use other implementations of unmodifiable lists which have a different name (typically, the immutable variant you first used). Perhaps a simpler way to test that would be to try to modify the list and check that it throws an exception?\r\nFor instance\r\n\r\n```\r\n@Test(expectedExceptions = UnsupportedOperationException.class)\r\npublic void testUnmodifiableList() {\r\n        expr.getSnaks().clear();\r\n}\r\n```", "bodyText": "This way of testing immutability might be a bit brittle - the tests could fail if we use other implementations of unmodifiable lists which have a different name (typically, the immutable variant you first used). Perhaps a simpler way to test that would be to try to modify the list and check that it throws an exception?\nFor instance\n@Test(expectedExceptions = UnsupportedOperationException.class)\npublic void testUnmodifiableList() {\n        expr.getSnaks().clear();\n}", "bodyHTML": "<p dir=\"auto\">This way of testing immutability might be a bit brittle - the tests could fail if we use other implementations of unmodifiable lists which have a different name (typically, the immutable variant you first used). Perhaps a simpler way to test that would be to try to modify the list and check that it throws an exception?<br>\nFor instance</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test(expectedExceptions = UnsupportedOperationException.class)\npublic void testUnmodifiableList() {\n        expr.getSnaks().clear();\n}\"><pre><code>@Test(expectedExceptions = UnsupportedOperationException.class)\npublic void testUnmodifiableList() {\n        expr.getSnaks().clear();\n}\n</code></pre></div>", "author": "wetneb", "createdAt": "2020-08-13T07:07:54Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbReferenceExprTest.java", "diffHunk": "@@ -77,4 +79,10 @@ public void testSerialize()\n             throws JsonProcessingException {\n         JacksonSerializationTest.canonicalSerialization(WbReferenceExpr.class, expr, jsonRepresentation);\n     }\n+\n+    @Test\n+    public void testUnmodifiableList() {\n+        List<WbSnakExpr> snakExprs = expr.getSnaks();\n+        Assert.assertTrue(snakExprs.getClass().getName().contains(\"Unmodifiable\"));", "originalCommit": "a70f164053b0cd5e046e5685da6f2b911a15be8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NDI5Mw==", "url": "https://github.com/OpenRefine/OpenRefine/pull/3070#discussion_r469754293", "body": "This will only test if `expr.getNameDescs()` is immutable, since that will already throw an exception. The second line will not be executed if the first line throws an exception. So you need to split that into two tests.", "bodyText": "This will only test if expr.getNameDescs() is immutable, since that will already throw an exception. The second line will not be executed if the first line throws an exception. So you need to split that into two tests.", "bodyHTML": "<p dir=\"auto\">This will only test if <code>expr.getNameDescs()</code> is immutable, since that will already throw an exception. The second line will not be executed if the first line throws an exception. So you need to split that into two tests.</p>", "author": "wetneb", "createdAt": "2020-08-13T07:34:46Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/schema/WbItemDocumentExprTest.java", "diffHunk": "@@ -92,11 +92,9 @@ public void testSerialize() {\n         JacksonSerializationTest.canonicalSerialization(WbItemDocumentExpr.class, expr, jsonRepresentation);\n     }\n \n-    @Test\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n     public void testUnmodifiableList() {\n-        List<WbNameDescExpr> nameDescExprs = expr.getNameDescs();\n-        Assert.assertTrue(nameDescExprs.getClass().getName().contains(\"Unmodifiable\"));\n-        List<WbStatementGroupExpr> statementGroupExprs = expr.getStatementGroups();\n-        Assert.assertTrue(statementGroupExprs.getClass().getName().contains(\"Unmodifiable\"));\n+        expr.getNameDescs().clear();\n+        expr.getStatementGroups().clear();", "originalCommit": "733443fb1a7d74089d7f38044d3c4c809b6426a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "465840e932cb6f8f96a52480cd3d47a092321d79", "url": "https://github.com/OpenRefine/OpenRefine/commit/465840e932cb6f8f96a52480cd3d47a092321d79", "message": "improved test cases", "committedDate": "2020-08-13T07:44:02Z", "type": "commit"}]}