{"pr_number": 897, "pr_title": "add create repo with template support", "pr_author": "bonnie-young", "pr_createdAt": "2020-07-19T15:12:40Z", "pr_url": "https://github.com/hub4j/github-api/pull/897", "timeline": [{"oid": "9830927020b74bf997044b873037ef12bc238ee9", "url": "https://github.com/hub4j/github-api/commit/9830927020b74bf997044b873037ef12bc238ee9", "message": "add create repo with template support\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-07-19T15:07:19Z", "type": "commit"}, {"oid": "b194a19b98c395a48f34875c11f3b53550d7953f", "url": "https://github.com/hub4j/github-api/commit/b194a19b98c395a48f34875c11f3b53550d7953f", "message": "Merge branch 'master' into add-create-repo-with-template-support", "committedDate": "2020-07-20T16:32:52Z", "type": "commit"}, {"oid": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "url": "https://github.com/hub4j/github-api/commit/ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "message": "Merge branch 'master' into add-create-repo-with-template-support", "committedDate": "2020-07-27T21:14:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTIxNg==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462819216", "body": "@bonnie-young  Could you tell me why we need two new constructors?  \r\n\r\nCould we add an `templateRepository(boolean)` method to the builder instead? ", "bodyText": "@bonnie-young  Could you tell me why we need two new constructors?\nCould we add an templateRepository(boolean) method to the builder instead?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bonnie-young/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bonnie-young\">@bonnie-young</a>  Could you tell me why we need two new constructors?</p>\n<p dir=\"auto\">Could we add an <code>templateRepository(boolean)</code> method to the builder instead?</p>", "author": "bitwiseman", "createdAt": "2020-07-30T07:59:42Z", "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "diffHunk": "@@ -20,6 +22,22 @@\n         this.builder.with(\"name\", name);\n     }\n \n+    GHCreateRepositoryBuilder(GitHub root, String apiUrlTail, String name, Boolean isTemplate) {", "originalCommit": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTc1OQ==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r466579759", "bodyText": "yes, you are right! sorry for my carelessness.", "author": "bonnie-young", "createdAt": "2020-08-06T17:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTIxNg=="}], "type": "inlineReview", "revised_code": {"commit": "eb33cd616218db93b8c7495e2f304432a99b6c5a", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\nindex 95b57e317..26d0983ae 100644\n--- a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n", "chunk": "@@ -22,22 +20,6 @@ public class GHCreateRepositoryBuilder {\n         this.builder.with(\"name\", name);\n     }\n \n-    GHCreateRepositoryBuilder(GitHub root, String apiUrlTail, String name, Boolean isTemplate) {\n-        this.root = root;\n-        this.apiUrlTail = apiUrlTail;\n-        this.builder = root.createRequest();\n-        this.builder.with(\"name\", name);\n-        this.builder.with(\"is_template\", isTemplate);\n-    }\n-\n-    GHCreateRepositoryBuilder(GitHub root, String apiUrlTail, String name, String owner) {\n-        this.root = root;\n-        this.apiUrlTail = apiUrlTail;\n-        this.builder = root.createRequest();\n-        this.builder.with(\"name\", name);\n-        this.builder.with(\"owner\", owner);\n-    }\n-\n     /**\n      * Description for repository\n      *\n", "next_change": {"commit": "a2bc5c6c7018a66327e196f065c4182381883d46", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\nindex 26d0983ae..b1250c043 100644\n--- a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n", "chunk": "@@ -24,7 +24,7 @@ public class GHCreateRepositoryBuilder {\n      * Description for repository\n      *\n      * @param description\n-     *            description of repository\n+     *              description of repository\n      * @return a builder to continue with building\n      */\n     public GHCreateRepositoryBuilder description(String description) {\n", "next_change": {"commit": "5e703be2bb25bbe83f30d9a37e6607f352cfe46f", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\nindex b1250c043..cf16ef2ab 100644\n--- a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n", "chunk": "@@ -24,7 +24,7 @@ public class GHCreateRepositoryBuilder {\n      * Description for repository\n      *\n      * @param description\n-     *              description of repository\n+     *            description of repository\n      * @return a builder to continue with building\n      */\n     public GHCreateRepositoryBuilder description(String description) {\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMTQ4MA==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462821480", "body": "Similar to my previous comment could we have a `fromTemplateRepository(String templateOwner, String templateRepo)` method?   I think the `create()` method could have `.withPreview(BAPTISE)` set in general without any negative effect, but I could be wrong.", "bodyText": "Similar to my previous comment could we have a fromTemplateRepository(String templateOwner, String templateRepo) method?   I think the create() method could have .withPreview(BAPTISE) set in general without any negative effect, but I could be wrong.", "bodyHTML": "<p dir=\"auto\">Similar to my previous comment could we have a <code>fromTemplateRepository(String templateOwner, String templateRepo)</code> method?   I think the <code>create()</code> method could have <code>.withPreview(BAPTISE)</code> set in general without any negative effect, but I could be wrong.</p>", "author": "bitwiseman", "createdAt": "2020-07-30T08:04:08Z", "path": "src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java", "diffHunk": "@@ -211,4 +229,15 @@ public GHRepository create() throws IOException {\n         return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n     }\n \n+    /**\n+     * Creates a repository with all the parameters, and with Preview BAPTISE for template repo.\n+     *\n+     * @return the gh repository\n+     * @throws IOException\n+     *             if repsitory cannot be created\n+     */\n+    public GHRepository createWithTemplate() throws IOException {", "originalCommit": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5NTEzNA==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r466595134", "bodyText": "According to the  official doc , I don't think we can add an fromTemplateRepository(String templateOwner, String templateRepo) to the builder, Because templateOwner and templateRepo are parts of the request url not parameters. anyway,  I will try it out, and find the result.\n\"create() method could have .withPreview(BAPTISE) set in general without any negative effect\" \u2014\u2014 I will try it later also, thanks for your idea.", "author": "bonnie-young", "createdAt": "2020-08-06T18:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "eb33cd616218db93b8c7495e2f304432a99b6c5a", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\nindex 95b57e317..26d0983ae 100644\n--- a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n", "chunk": "@@ -219,25 +201,83 @@ public class GHCreateRepositoryBuilder {\n     }\n \n     /**\n-     * Creates a repository with all the parameters.\n+     * Specifies whether the repository is a template.\n      *\n-     * @return the gh repository\n-     * @throws IOException\n-     *             if repsitory cannot be created\n+     * @param isTemplate\n+     *                 true or not\n+     * @return a builder to continue with building\n      */\n-    public GHRepository create() throws IOException {\n-        return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n+    public GHCreateRepositoryBuilder templateRepository(Boolean isTemplate) {\n+        if(isTemplate != null) {\n+            this.builder.with(\"is_template\", isTemplate);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Specifies the ownership of the repository.\n+     *\n+     * @param owner\n+     *            organization or personage\n+     * @return a builder to continue with building\n+     */\n+    public GHCreateRepositoryBuilder owner(String owner) {\n+        if (owner != null && owner.length() > 0) {\n+            this.builder.with(\"owner\", owner);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Create repository from template repository\n+     *\n+     * @see <a href=\"https://docs.github.com/en/rest/reference/repos#create-a-repository-using-a-template\">Create repository from template repository</a>\n+     *\n+     * @param templateOwner\n+     *                    template repository owner\n+     * @param templateRepo\n+     *                   template repository name\n+     * @return a builder to continue with building\n+     */\n+    @Preview\n+    @Deprecated\n+    public GHCreateRepositoryBuilder fromTemplateRepository(String templateOwner, String templateRepo) {\n+        if (templateOwner != null && templateOwner.length() > 0 && templateRepo != null && templateRepo.length() > 0) {\n+            this.apiUrlTail =\"/repos/\" + templateOwner + \"/\" + templateRepo + \"/generate\";\n+        }\n+\n+        return this;\n     }\n \n     /**\n-     * Creates a repository with all the parameters, and with Preview BAPTISE for template repo.\n+     * API previews let us try out new APIs and changes to existing API methods before they become part of the official GitHub API.\n+     *\n+     * @see <a href=\"https://developer.github.com/v3/previews/\">GitHub API Previews</a>\n+     *\n+     * @param name\n+     *            Custom media type name\n+     * @return a builder to continue with building\n+     */\n+    @Preview\n+    @Deprecated\n+    public GHCreateRepositoryBuilder withPreview(String name) {\n+        if (name != null && name.length() > 0) {\n+            this.builder.withPreview(name);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Creates a repository with all the parameters.\n      *\n      * @return the gh repository\n      * @throws IOException\n      *             if repsitory cannot be created\n      */\n-    public GHRepository createWithTemplate() throws IOException {\n-        return builder.method(\"POST\").withPreview(BAPTISE).withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n+    public GHRepository create() throws IOException {\n+        return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n     }\n \n }\n", "next_change": {"commit": "a2bc5c6c7018a66327e196f065c4182381883d46", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\nindex 26d0983ae..b1250c043 100644\n--- a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n", "chunk": "@@ -273,8 +271,7 @@ public class GHCreateRepositoryBuilder {\n      * Creates a repository with all the parameters.\n      *\n      * @return the gh repository\n-     * @throws IOException\n-     *             if repsitory cannot be created\n+     * @throws IOException if repsitory cannot be created\n      */\n     public GHRepository create() throws IOException {\n         return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n", "next_change": {"commit": "5e703be2bb25bbe83f30d9a37e6607f352cfe46f", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\nindex b1250c043..cf16ef2ab 100644\n--- a/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n+++ b/src/main/java/org/kohsuke/github/GHCreateRepositoryBuilder.java\n", "chunk": "@@ -271,7 +263,8 @@ public class GHCreateRepositoryBuilder {\n      * Creates a repository with all the parameters.\n      *\n      * @return the gh repository\n-     * @throws IOException if repsitory cannot be created\n+     * @throws IOException\n+     *             if repsitory cannot be created\n      */\n     public GHRepository create() throws IOException {\n         return builder.method(\"POST\").withUrlPath(apiUrlTail).fetch(GHRepository.class).wrap(root);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzU2MA==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462823560", "body": "Ah, I see.  The create from template repository has almost none of the parameters of general repository creation.  \r\nStill I think that limitation is something that could be explained in the javadoc for `fromTemplateRepository(String templateOwner, String templateRepo)` and include a link to the GitHub docs.  \r\n\r\nWhat you've done is good: guiding users to the a non-failure path.  However, in this case, I'd rather reduce the surface area and added code in this library.  \r\n\r\nAlso add `@Preview` and `@Deprecated` annotations to the methods that call GitHub Preview APIs. ", "bodyText": "Ah, I see.  The create from template repository has almost none of the parameters of general repository creation.\nStill I think that limitation is something that could be explained in the javadoc for fromTemplateRepository(String templateOwner, String templateRepo) and include a link to the GitHub docs.\nWhat you've done is good: guiding users to the a non-failure path.  However, in this case, I'd rather reduce the surface area and added code in this library.\nAlso add @Preview and @Deprecated annotations to the methods that call GitHub Preview APIs.", "bodyHTML": "<p dir=\"auto\">Ah, I see.  The create from template repository has almost none of the parameters of general repository creation.<br>\nStill I think that limitation is something that could be explained in the javadoc for <code>fromTemplateRepository(String templateOwner, String templateRepo)</code> and include a link to the GitHub docs.</p>\n<p dir=\"auto\">What you've done is good: guiding users to the a non-failure path.  However, in this case, I'd rather reduce the surface area and added code in this library.</p>\n<p dir=\"auto\">Also add <code>@Preview</code> and <code>@Deprecated</code> annotations to the methods that call GitHub Preview APIs.</p>", "author": "bitwiseman", "createdAt": "2020-07-30T08:07:52Z", "path": "src/main/java/org/kohsuke/github/GHOrganization.java", "diffHunk": "@@ -100,6 +100,50 @@ public GHCreateRepositoryBuilder createRepository(String name) {\n         return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name);\n     }\n \n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call {@link GHCreateRepositoryBuilder#create()} to\n+     * finally create a repository.\n+     *\n+     * @param name\n+     *            the name\n+     * @param isTemplate\n+     *            the is_template\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithParametersIsTemplate(String name, Boolean isTemplate) {\n+        return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name, isTemplate);\n+    }\n+\n+    /**\n+     * Starts a builder that creates a new repository.\n+     *\n+     * <p>\n+     * You use the returned builder to set various properties, then call\n+     * {@link GHCreateRepositoryBuilder#createWithTemplate()} to finally create a repository.\n+     *\n+     * @param templateOwner\n+     *            the owner of template repository\n+     * @param templateRepo\n+     *            the template repository\n+     * @param name\n+     *            the name of repository to be created\n+     * @param owner\n+     *            the organization of repository to be created\n+     * @return the gh create repository builder\n+     */\n+    public GHCreateRepositoryBuilder createRepositoryWithTemplate(String templateRepo,", "originalCommit": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMTMyMg==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r466601322", "bodyText": "\u201cAlso add @Preview and @deprecated annotations to the methods that call GitHub Preview APIs.\u201d \u2014\u2014 I see. Thank you for reminding me. But I don't know why need to add the @deprecated annotation.", "author": "bonnie-young", "createdAt": "2020-08-06T18:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5MjE2OQ==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r467592169", "bodyText": "\u201cAlso add @Preview and @deprecated annotations to the methods that call GitHub Preview APIs.\u201d \u2014\u2014 I see. Thank you for reminding me. But I don't know why need to add the @deprecated annotation.\n\nI found the answer from oracle official doc:\nWhen to Deprecate\nWhen you design an API, carefully consider whether it supersedes an old API. If it does, and you wish to encourage developers (users of the API) to migrate to the new API, then deprecate the old API. Valid reasons to deprecate an API include:\n\nIt is insecure, buggy, or highly inefficient (I got  this point)\nIt is going away in a future release\nIt encourages bad coding practices", "author": "bonnie-young", "createdAt": "2020-08-09T14:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "eb33cd616218db93b8c7495e2f304432a99b6c5a", "changed_code": [{"header": "diff --git a/src/main/java/org/kohsuke/github/GHOrganization.java b/src/main/java/org/kohsuke/github/GHOrganization.java\nindex dee08a4dc..fd9188b4b 100644\n--- a/src/main/java/org/kohsuke/github/GHOrganization.java\n+++ b/src/main/java/org/kohsuke/github/GHOrganization.java\n", "chunk": "@@ -100,50 +100,6 @@ public class GHOrganization extends GHPerson {\n         return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name);\n     }\n \n-    /**\n-     * Starts a builder that creates a new repository.\n-     *\n-     * <p>\n-     * You use the returned builder to set various properties, then call {@link GHCreateRepositoryBuilder#create()} to\n-     * finally create a repository.\n-     *\n-     * @param name\n-     *            the name\n-     * @param isTemplate\n-     *            the is_template\n-     * @return the gh create repository builder\n-     */\n-    public GHCreateRepositoryBuilder createRepositoryWithParametersIsTemplate(String name, Boolean isTemplate) {\n-        return new GHCreateRepositoryBuilder(root, \"/orgs/\" + login + \"/repos\", name, isTemplate);\n-    }\n-\n-    /**\n-     * Starts a builder that creates a new repository.\n-     *\n-     * <p>\n-     * You use the returned builder to set various properties, then call\n-     * {@link GHCreateRepositoryBuilder#createWithTemplate()} to finally create a repository.\n-     *\n-     * @param templateOwner\n-     *            the owner of template repository\n-     * @param templateRepo\n-     *            the template repository\n-     * @param name\n-     *            the name of repository to be created\n-     * @param owner\n-     *            the organization of repository to be created\n-     * @return the gh create repository builder\n-     */\n-    public GHCreateRepositoryBuilder createRepositoryWithTemplate(String templateRepo,\n-            String templateOwner,\n-            String name,\n-            String owner) {\n-        return new GHCreateRepositoryBuilder(root,\n-                \"/repos/\" + templateOwner + \"/\" + templateRepo + \"/generate\",\n-                name,\n-                owner);\n-    }\n-\n     /**\n      * Teams by their names.\n      *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTE5Mg==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462825192", "body": "```suggestion\r\n        GHRepository repository = org.createRepository(GITHUB_API_TEMPLATE_TEST)\r\n                .templateRepository(true)\r\n                .description(\"a test template repository used to test kohsuke's github-api\")\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n          \n          \n            \n                            .description(\"a test template repository used to test kohsuke's github-api\")\n          \n          \n            \n                    GHRepository repository = org.createRepository(GITHUB_API_TEMPLATE_TEST)\n          \n          \n            \n                            .templateRepository(true)\n          \n          \n            \n                            .description(\"a test template repository used to test kohsuke's github-api\")", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">GHRepository</span> repository <span class=\"pl-k\">=</span> org<span class=\"pl-k\">.</span>createRepositoryWithParametersIsTemplate(<span class=\"pl-c1\">GITHUB_API_TEMPLATE_TEST</span>, <span class=\"pl-c1\">true</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .description(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a test template repository used to test kohsuke's github-api<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">GHRepository</span> repository <span class=\"pl-k\">=</span> org<span class=\"pl-k\">.</span>createRepository(<span class=\"pl-c1\">GITHUB_API_TEMPLATE_TEST</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .templateRepository(<span class=\"pl-c1\">true</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"68\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .description(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a test template repository used to test kohsuke's github-api<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bitwiseman", "createdAt": "2020-07-30T08:10:46Z", "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "diffHunk": "@@ -56,6 +57,38 @@ public void testCreateRepositoryWithAutoInitialization() throws IOException {\n         Assert.assertNotNull(repository.getReadme());\n     }\n \n+    @Test\n+    public void testCreateRepositoryWithParametersIsTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEMPLATE_TEST);\n+\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+        GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n+                .description(\"a test template repository used to test kohsuke's github-api\")", "originalCommit": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb33cd616218db93b8c7495e2f304432a99b6c5a", "changed_code": [{"header": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex b836a9862..feee7804e 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n", "chunk": "@@ -58,17 +60,17 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n     }\n \n     @Test\n-    public void testCreateRepositoryWithParametersIsTemplate() throws IOException {\n-        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEMPLATE_TEST);\n+    public void testCreateRepositoryWithParameterIsTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEST);\n \n         GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n-        GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n+        GHRepository repository = org.createRepository(GITHUB_API_TEMPLATE_TEST)\n                 .description(\"a test template repository used to test kohsuke's github-api\")\n                 .homepage(\"http://github-api.kohsuke.org/\")\n                 .team(org.getTeamByName(\"Core Developers\"))\n                 .autoInit(true)\n+                .templateRepository(true)\n                 .create();\n-\n         Assert.assertNotNull(repository);\n         Assert.assertNotNull(repository.getReadme());\n     }\n", "next_change": {"commit": "5e703be2bb25bbe83f30d9a37e6607f352cfe46f", "changed_code": [{"header": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex feee7804e..2c3b3cbe9 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n", "chunk": "@@ -69,6 +69,7 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n                 .homepage(\"http://github-api.kohsuke.org/\")\n                 .team(org.getTeamByName(\"Core Developers\"))\n                 .autoInit(true)\n+                .withPreview(BAPTISE)\n                 .templateRepository(true)\n                 .create();\n         Assert.assertNotNull(repository);\n", "next_change": {"commit": "6afd248f866bd580fa96b2c8b06f06d4c6ae0788", "changed_code": [{"header": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex 2c3b3cbe9..18a7e30e7 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n", "chunk": "@@ -69,7 +67,6 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n                 .homepage(\"http://github-api.kohsuke.org/\")\n                 .team(org.getTeamByName(\"Core Developers\"))\n                 .autoInit(true)\n-                .withPreview(BAPTISE)\n                 .templateRepository(true)\n                 .create();\n         Assert.assertNotNull(repository);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNjk3MA==", "url": "https://github.com/hub4j/github-api/pull/897#discussion_r462826970", "body": "```suggestion\r\n        GHRepository repository = org.createRepository(GITHUB_API_TEST) \r\n                .owner(GITHUB_API_TEST_ORG)\r\n                .fromTemplateRepository(GITHUB_API_TEST_ORG, GITHUB_API_TEMPLATE_TEST)\r\n                .create();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GHRepository repository = org\n          \n          \n            \n                            .createRepositoryWithTemplate(GITHUB_API_TEMPLATE_TEST,\n          \n          \n            \n                                    GITHUB_API_TEST_ORG,\n          \n          \n            \n                                    GITHUB_API_TEST,\n          \n          \n            \n                                    GITHUB_API_TEST_ORG)\n          \n          \n            \n                            .createWithTemplate();\n          \n          \n            \n                    GHRepository repository = org.createRepository(GITHUB_API_TEST) \n          \n          \n            \n                            .owner(GITHUB_API_TEST_ORG)\n          \n          \n            \n                            .fromTemplateRepository(GITHUB_API_TEST_ORG, GITHUB_API_TEMPLATE_TEST)\n          \n          \n            \n                            .create();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">GHRepository</span> repository <span class=\"pl-k\">=</span> org</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .createRepositoryWithTemplate(<span class=\"pl-c1\">GITHUB_API_TEMPLATE_TEST</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-c1\">GITHUB_API_TEST_ORG</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-c1\">GITHUB_API_TEST</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        <span class=\"pl-c1\">GITHUB_API_TEST_ORG</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .createWithTemplate();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">GHRepository</span> repository <span class=\"pl-k\">=</span> org<span class=\"pl-k\">.</span>createRepository(<span class=\"pl-c1\">GITHUB_API_TEST</span>) </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .owner(<span class=\"pl-c1\">GITHUB_API_TEST_ORG</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .fromTemplateRepository(<span class=\"pl-c1\">GITHUB_API_TEST_ORG</span>, <span class=\"pl-c1\">GITHUB_API_TEMPLATE_TEST</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .create();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "bitwiseman", "createdAt": "2020-07-30T08:14:00Z", "path": "src/test/java/org/kohsuke/github/GHOrganizationTest.java", "diffHunk": "@@ -56,6 +57,38 @@ public void testCreateRepositoryWithAutoInitialization() throws IOException {\n         Assert.assertNotNull(repository.getReadme());\n     }\n \n+    @Test\n+    public void testCreateRepositoryWithParametersIsTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEMPLATE_TEST);\n+\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+        GHRepository repository = org.createRepositoryWithParametersIsTemplate(GITHUB_API_TEMPLATE_TEST, true)\n+                .description(\"a test template repository used to test kohsuke's github-api\")\n+                .homepage(\"http://github-api.kohsuke.org/\")\n+                .team(org.getTeamByName(\"Core Developers\"))\n+                .autoInit(true)\n+                .create();\n+\n+        Assert.assertNotNull(repository);\n+        Assert.assertNotNull(repository.getReadme());\n+    }\n+\n+    @Test\n+    public void testCreateRepositoryWithTemplate() throws IOException {\n+        cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEST);\n+\n+        GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n+        GHRepository repository = org\n+                .createRepositoryWithTemplate(GITHUB_API_TEMPLATE_TEST,\n+                        GITHUB_API_TEST_ORG,\n+                        GITHUB_API_TEST,\n+                        GITHUB_API_TEST_ORG)\n+                .createWithTemplate();", "originalCommit": "ac470dddb50695bfa9c85ec00d9100d2be4e6bd3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb33cd616218db93b8c7495e2f304432a99b6c5a", "changed_code": [{"header": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex b836a9862..feee7804e 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n", "chunk": "@@ -79,11 +81,11 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n \n         GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n         GHRepository repository = org\n-                .createRepositoryWithTemplate(GITHUB_API_TEMPLATE_TEST,\n-                        GITHUB_API_TEST_ORG,\n-                        GITHUB_API_TEST,\n-                        GITHUB_API_TEST_ORG)\n-                .createWithTemplate();\n+                .createRepository(GITHUB_API_TEST)\n+                .fromTemplateRepository(GITHUB_API_TEST_ORG, GITHUB_API_TEMPLATE_TEST)\n+                .owner(GITHUB_API_TEST_ORG)\n+                .withPreview(BAPTISE)\n+                .create();\n \n         Assert.assertNotNull(repository);\n         Assert.assertNotNull(repository.getReadme());\n", "next_change": {"commit": "5e703be2bb25bbe83f30d9a37e6607f352cfe46f", "changed_code": [{"header": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex feee7804e..2c3b3cbe9 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n", "chunk": "@@ -80,8 +81,7 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n         cleanupRepository(GITHUB_API_TEST_ORG + '/' + GITHUB_API_TEST);\n \n         GHOrganization org = gitHub.getOrganization(GITHUB_API_TEST_ORG);\n-        GHRepository repository = org\n-                .createRepository(GITHUB_API_TEST)\n+        GHRepository repository = org.createRepository(GITHUB_API_TEST)\n                 .fromTemplateRepository(GITHUB_API_TEST_ORG, GITHUB_API_TEMPLATE_TEST)\n                 .owner(GITHUB_API_TEST_ORG)\n                 .withPreview(BAPTISE)\n", "next_change": {"commit": "6afd248f866bd580fa96b2c8b06f06d4c6ae0788", "changed_code": [{"header": "diff --git a/src/test/java/org/kohsuke/github/GHOrganizationTest.java b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\nindex 2c3b3cbe9..18a7e30e7 100644\n--- a/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n+++ b/src/test/java/org/kohsuke/github/GHOrganizationTest.java\n", "chunk": "@@ -84,7 +81,6 @@ public class GHOrganizationTest extends AbstractGitHubWireMockTest {\n         GHRepository repository = org.createRepository(GITHUB_API_TEST)\n                 .fromTemplateRepository(GITHUB_API_TEST_ORG, GITHUB_API_TEMPLATE_TEST)\n                 .owner(GITHUB_API_TEST_ORG)\n-                .withPreview(BAPTISE)\n                 .create();\n \n         Assert.assertNotNull(repository);\n", "next_change": null}]}}]}}]}}, {"oid": "bb4d44138ab06d63faff3c86eb8d6ea190eb41a5", "url": "https://github.com/hub4j/github-api/commit/bb4d44138ab06d63faff3c86eb8d6ea190eb41a5", "message": "Merge branch 'master' into add-create-repo-with-template-support", "committedDate": "2020-08-04T23:05:02Z", "type": "commit"}, {"oid": "eb33cd616218db93b8c7495e2f304432a99b6c5a", "url": "https://github.com/hub4j/github-api/commit/eb33cd616218db93b8c7495e2f304432a99b6c5a", "message": "update code for create repository from template\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-08-09T09:37:46Z", "type": "forcePushed"}, {"oid": "a2bc5c6c7018a66327e196f065c4182381883d46", "url": "https://github.com/hub4j/github-api/commit/a2bc5c6c7018a66327e196f065c4182381883d46", "message": "update code for create repository from template\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-08-09T09:48:04Z", "type": "forcePushed"}, {"oid": "5e703be2bb25bbe83f30d9a37e6607f352cfe46f", "url": "https://github.com/hub4j/github-api/commit/5e703be2bb25bbe83f30d9a37e6607f352cfe46f", "message": "update code for create repository from template\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-08-10T03:47:20Z", "type": "forcePushed"}, {"oid": "6afd248f866bd580fa96b2c8b06f06d4c6ae0788", "url": "https://github.com/hub4j/github-api/commit/6afd248f866bd580fa96b2c8b06f06d4c6ae0788", "message": "update code for create repository from template\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-08-12T13:51:02Z", "type": "forcePushed"}, {"oid": "11bc669e1ded47b8cc1ddaf16be2a14f56ddf022", "url": "https://github.com/hub4j/github-api/commit/11bc669e1ded47b8cc1ddaf16be2a14f56ddf022", "message": "update code for create repository from template\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-08-12T14:08:31Z", "type": "commit"}, {"oid": "11bc669e1ded47b8cc1ddaf16be2a14f56ddf022", "url": "https://github.com/hub4j/github-api/commit/11bc669e1ded47b8cc1ddaf16be2a14f56ddf022", "message": "update code for create repository from template\n\nSigned-off-by: Yang Ting <bonnie.young@maxwit.com>", "committedDate": "2020-08-12T14:08:31Z", "type": "forcePushed"}]}