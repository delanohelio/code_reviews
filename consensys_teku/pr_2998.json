{"pr_number": 2998, "pr_title": "Implement Eth1 chain id validator (#2807)", "pr_author": "systemfreund", "pr_createdAt": "2020-10-16T13:03:53Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2998", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzNTA2OQ==", "url": "https://github.com/ConsenSys/teku/pull/2998#discussion_r507235069", "body": "To guarantee all unhandled exceptions are reported, this should be `.reportExceptions()`.  The `exceptionallyCompose` should handle all errors but if the `runAfterDelay` fails for some reason we want to make sure that's reported instead of silently ignored.", "bodyText": "To guarantee all unhandled exceptions are reported, this should be .reportExceptions().  The exceptionallyCompose should handle all errors but if the runAfterDelay fails for some reason we want to make sure that's reported instead of silently ignored.", "bodyHTML": "<p dir=\"auto\">To guarantee all unhandled exceptions are reported, this should be <code>.reportExceptions()</code>.  The <code>exceptionallyCompose</code> should handle all errors but if the <code>runAfterDelay</code> fails for some reason we want to make sure that's reported instead of silently ignored.</p>", "author": "ajsutton", "createdAt": "2020-10-18T22:48:17Z", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.powchain;\n+\n+import static tech.pegasys.teku.infrastructure.logging.StatusLogger.STATUS_LOG;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.pow.Eth1Provider;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class Eth1ChainIdValidator {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+\n+  private final AsyncRunner asyncRunner;\n+\n+  public Eth1ChainIdValidator(Eth1Provider eth1Provider, AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  public void validate() {\n+    eth1Provider\n+        .getChainId()\n+        .thenAccept(this::onChainIdDetermined)\n+        .exceptionallyCompose(\n+            error -> {\n+              LOG.error(\"Failed to get Eth1 chain id. Will retry.\", error);\n+              return asyncRunner.runAfterDelay(this::validate, 1, TimeUnit.SECONDS);\n+            })\n+        .always(() -> {});", "originalCommit": "d12f5a34857579208966b65f8545d8cd012b268c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5NTYzNg==", "url": "https://github.com/ConsenSys/teku/pull/2998#discussion_r507395636", "body": "This should be `!=` so we print the error if the chain ID does not match.\r\n```suggestion\r\n    if (chainId.intValueExact() != Constants.DEPOSIT_CHAIN_ID) {\r\n```", "bodyText": "This should be != so we print the error if the chain ID does not match.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (chainId.intValueExact() == Constants.DEPOSIT_CHAIN_ID) {\n          \n          \n            \n                if (chainId.intValueExact() != Constants.DEPOSIT_CHAIN_ID) {", "bodyHTML": "<p dir=\"auto\">This should be <code>!=</code> so we print the error if the chain ID does not match.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (chainId<span class=\"pl-k\">.</span>intValueExact() <span class=\"pl-k\"><span class=\"x x-first x-last\">=</span>=</span> <span class=\"pl-smi\">Constants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DEPOSIT_CHAIN_ID</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (chainId<span class=\"pl-k\">.</span>intValueExact() <span class=\"pl-k\"><span class=\"x x-first x-last\">!</span>=</span> <span class=\"pl-smi\">Constants</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DEPOSIT_CHAIN_ID</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-10-19T03:09:41Z", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.powchain;\n+\n+import static tech.pegasys.teku.infrastructure.logging.StatusLogger.STATUS_LOG;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.pow.Eth1Provider;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class Eth1ChainIdValidator {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+\n+  private final AsyncRunner asyncRunner;\n+\n+  public Eth1ChainIdValidator(Eth1Provider eth1Provider, AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  public void validate() {\n+    eth1Provider\n+        .getChainId()\n+        .thenAccept(this::onChainIdDetermined)\n+        .exceptionallyCompose(\n+            error -> {\n+              LOG.error(\"Failed to get Eth1 chain id. Will retry.\", error);\n+              return asyncRunner.runAfterDelay(this::validate, 1, TimeUnit.SECONDS);\n+            })\n+        .always(() -> {});\n+  }\n+\n+  private void onChainIdDetermined(BigInteger chainId) {\n+    if (chainId.intValueExact() == Constants.DEPOSIT_CHAIN_ID) {", "originalCommit": "d12f5a34857579208966b65f8545d8cd012b268c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5NzUxOA==", "url": "https://github.com/ConsenSys/teku/pull/2998#discussion_r507397518", "body": "We should log this at debug level to avoid spamming the logs when the ETH1 node is down.  The `ErrorTrackingEthProvider` will ensure a message is logged to the console periodically if the ETH1 is unavailable.", "bodyText": "We should log this at debug level to avoid spamming the logs when the ETH1 node is down.  The ErrorTrackingEthProvider will ensure a message is logged to the console periodically if the ETH1 is unavailable.", "bodyHTML": "<p dir=\"auto\">We should log this at debug level to avoid spamming the logs when the ETH1 node is down.  The <code>ErrorTrackingEthProvider</code> will ensure a message is logged to the console periodically if the ETH1 is unavailable.</p>", "author": "ajsutton", "createdAt": "2020-10-19T03:13:11Z", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.powchain;\n+\n+import static tech.pegasys.teku.infrastructure.logging.StatusLogger.STATUS_LOG;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.pow.Eth1Provider;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class Eth1ChainIdValidator {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+\n+  private final AsyncRunner asyncRunner;\n+\n+  public Eth1ChainIdValidator(Eth1Provider eth1Provider, AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  public void validate() {\n+    eth1Provider\n+        .getChainId()\n+        .thenAccept(this::onChainIdDetermined)\n+        .exceptionallyCompose(\n+            error -> {\n+              LOG.error(\"Failed to get Eth1 chain id. Will retry.\", error);", "originalCommit": "d12f5a34857579208966b65f8545d8cd012b268c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2451dd189642d46e5ef71658160bce6e96c35885", "url": "https://github.com/ConsenSys/teku/commit/2451dd189642d46e5ef71658160bce6e96c35885", "message": "Implement Eth1 chain id validator (#2807)", "committedDate": "2020-10-20T10:02:27Z", "type": "commit"}, {"oid": "2451dd189642d46e5ef71658160bce6e96c35885", "url": "https://github.com/ConsenSys/teku/commit/2451dd189642d46e5ef71658160bce6e96c35885", "message": "Implement Eth1 chain id validator (#2807)", "committedDate": "2020-10-20T10:02:27Z", "type": "forcePushed"}, {"oid": "1fbdddaca655b8b4a0da75ad3a1058d09ab61ca8", "url": "https://github.com/ConsenSys/teku/commit/1fbdddaca655b8b4a0da75ad3a1058d09ab61ca8", "message": "Merge branch 'master' into master", "committedDate": "2020-10-20T10:03:47Z", "type": "commit"}, {"oid": "2bd626594711054037587b3a1e7e22eee529a115", "url": "https://github.com/ConsenSys/teku/commit/2bd626594711054037587b3a1e7e22eee529a115", "message": "Merge branch 'master' into master", "committedDate": "2020-10-20T20:46:18Z", "type": "commit"}, {"oid": "41c7740f081b5cb3ef4e865a496eec48041f2355", "url": "https://github.com/ConsenSys/teku/commit/41c7740f081b5cb3ef4e865a496eec48041f2355", "message": "Merge branch 'master' into master", "committedDate": "2020-10-20T21:01:51Z", "type": "commit"}]}