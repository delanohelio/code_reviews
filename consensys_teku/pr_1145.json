{"pr_number": 1145, "pr_title": "Switch to Harmony's optimized Merkle Tree", "pr_author": "cemozerr", "pr_createdAt": "2020-02-10T22:18:12Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1145", "timeline": [{"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "url": "https://github.com/ConsenSys/teku/commit/6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "message": "Switch to Harmony's optimized Merkle Tree", "committedDate": "2020-02-10T22:15:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTIwNQ==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377351205", "body": "I probably wouldn't rename this - `depositMerkleTree`  includes the important information that this is for deposits, not just that it's a merkle trie (side note: should be `trie` everywhere not `tree` but that can be for another day)", "bodyText": "I probably wouldn't rename this - depositMerkleTree  includes the important information that this is for deposits, not just that it's a merkle trie (side note: should be trie everywhere not tree but that can be for another day)", "bodyHTML": "<p dir=\"auto\">I probably wouldn't rename this - <code>depositMerkleTree</code>  includes the important information that this is for deposits, not just that it's a merkle trie (side note: should be <code>trie</code> everywhere not <code>tree</code> but that can be for another day)</p>", "author": "ajsutton", "createdAt": "2020-02-10T22:19:51Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -44,8 +44,8 @@\n import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n \n public class GenesisGenerator {\n-  private final MerkleTree<Bytes32> depositMerkleTree =\n-      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final OptimizedMerkleTree merkleTree =", "originalCommit": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NDYyMQ==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377364621", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-02-10T22:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTY5OA==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377351698", "body": "nit: usually worth having the assertions first and we probably should be consistent in using `checkArgument` rather than the `assert` keyword.", "bodyText": "nit: usually worth having the assertions first and we probably should be consistent in using checkArgument rather than the assert keyword.", "bodyHTML": "<p dir=\"auto\">nit: usually worth having the assertions first and we probably should be consistent in using <code>checkArgument</code> rather than the <code>assert</code> keyword.</p>", "author": "ajsutton", "createdAt": "2020-02-10T22:20:52Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/MerkleTree.java", "diffHunk": "@@ -22,40 +22,34 @@\n import org.apache.tuweni.crypto.Hash;\n import tech.pegasys.artemis.util.SSZTypes.SSZVector;\n \n-public class MerkleTree<T> {\n-  private final List<List<Bytes32>> tree;\n-  private final List<Bytes32> zeroHashes;\n-  private final int height;\n-  private boolean dirty = true;\n+abstract class MerkleTree {\n+  protected final List<List<Bytes32>> tree;\n+  protected final List<Bytes32> zeroHashes;\n+  protected final int treeDepth;\n \n-  public MerkleTree(int height) {\n-    assert (height > 1);\n-    this.height = height;\n-    tree = new ArrayList<List<Bytes32>>();\n-    for (int i = 0; i <= height; i++) {\n-      tree.add(new ArrayList<Bytes32>());\n+  protected MerkleTree(int treeDepth) {\n+    this.treeDepth = treeDepth;\n+    assert (treeDepth > 1);", "originalCommit": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODUzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377368539", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-02-10T23:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MzkyNA==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377353924", "body": "Needs an `@Override` annotation.", "bodyText": "Needs an @Override annotation.", "bodyHTML": "<p dir=\"auto\">Needs an <code>@Override</code> annotation.</p>", "author": "ajsutton", "createdAt": "2020-02-10T22:25:45Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {", "originalCommit": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NjI3OA==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377366278", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-02-10T22:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MzkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDg2OA==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377354868", "body": "should use `.equals` instead of `==` when comparing hashes.  It will likely work both ways but only because of implementation details so better to not depend on object equality here.", "bodyText": "should use .equals instead of == when comparing hashes.  It will likely work both ways but only because of implementation details so better to not depend on object equality here.", "bodyHTML": "<p dir=\"auto\">should use <code>.equals</code> instead of <code>==</code> when comparing hashes.  It will likely work both ways but only because of implementation details so better to not depend on object equality here.</p>", "author": "ajsutton", "createdAt": "2020-02-10T22:27:52Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {\n+    if (!tree.get(0).isEmpty() && tree.get(0).get(tree.get(0).size() - 1) == zeroHashes.get(0)) {", "originalCommit": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NjIzMA==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377366230", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-02-10T22:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NjQ2MA==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377356460", "body": "```suggestion\r\npublic class OptimizedMerkleTreeTest {\r\n```\r\n\r\nEnding test classes with `Test` is a strong convention we should stick to (and often build tools actually search specifically for `*Test` classes to run.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OptimizedMerkleTreeTests {\n          \n          \n            \n            public class OptimizedMerkleTreeTest {\n          \n      \n    \n    \n  \n\nEnding test classes with Test is a strong convention we should stick to (and often build tools actually search specifically for *Test classes to run.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">OptimizedMerkleTreeTests</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en x x-first x-last\">OptimizedMerkleTreeTest</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Ending test classes with <code>Test</code> is a strong convention we should stick to (and often build tools actually search specifically for <code>*Test</code> classes to run.</p>", "author": "ajsutton", "createdAt": "2020-02-10T22:31:16Z", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {", "originalCommit": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTk4OQ==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377365989", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-02-10T22:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NjQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NzMyMw==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377357323", "body": "We should remove this or convert it to an actual jmh test in a benchmarks source tree.", "bodyText": "We should remove this or convert it to an actual jmh test in a benchmarks source tree.", "bodyHTML": "<p dir=\"auto\">We should remove this or convert it to an actual jmh test in a benchmarks source tree.</p>", "author": "ajsutton", "createdAt": "2020-02-10T22:33:09Z", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {\n+\n+  private int seed = 0;\n+\n+  private final int treeDepth = 32;\n+  private OptimizedMerkleTree optimizedMT;\n+  private SimpleMerkleTree simpleMT;\n+\n+  @BeforeEach\n+  void setUp() {\n+    optimizedMT = new OptimizedMerkleTree(treeDepth);\n+    simpleMT = new SimpleMerkleTree(treeDepth);\n+  }\n+\n+  @Test\n+  void test() {\n+    Bytes32 leaf = DataStructureUtil.randomBytes32(seed);\n+    optimizedMT.add(leaf);\n+    simpleMT.add(leaf);\n+    assertThat(optimizedMT.getProofTreeByValue(leaf)).isEqualTo(simpleMT.getProofTreeByValue(leaf));\n+  }\n+\n+  @Test\n+  void makeSureAllProofsMatch() {\n+\n+    List<Bytes32> leaves =\n+        IntStream.range(0, 10000)\n+            .mapToObj(\n+                i -> {\n+                  Bytes32 leaf = DataStructureUtil.randomBytes32(seed++);\n+                  optimizedMT.add(leaf);\n+                  simpleMT.add(leaf);\n+                  return leaf;\n+                })\n+            .collect(Collectors.toList());\n+\n+    leaves.forEach(\n+        (leaf) ->\n+            assertThat(optimizedMT.getProofTreeByValue(leaf))\n+                .isEqualTo(simpleMT.getProofTreeByValue(leaf)));\n+  }\n+\n+  @Test\n+  void checkSpeed() {", "originalCommit": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NzM2Mg==", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377367362", "bodyText": "Removed.", "author": "cemozerr", "createdAt": "2020-02-10T22:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NzMyMw=="}], "type": "inlineReview"}, {"oid": "44e5aed03d5fb5812254559137d86339581647f2", "url": "https://github.com/ConsenSys/teku/commit/44e5aed03d5fb5812254559137d86339581647f2", "message": "Fix assemble bug", "committedDate": "2020-02-10T22:34:40Z", "type": "commit"}, {"oid": "e6a030e393ca569a479ae3c5e64f99b3537bf495", "url": "https://github.com/ConsenSys/teku/commit/e6a030e393ca569a479ae3c5e64f99b3537bf495", "message": "Resolve comments", "committedDate": "2020-02-10T22:57:14Z", "type": "commit"}, {"oid": "2049a9be6fca57a571850185fffdc2e9c9aa68f5", "url": "https://github.com/ConsenSys/teku/commit/2049a9be6fca57a571850185fffdc2e9c9aa68f5", "message": "Resolve comment", "committedDate": "2020-02-10T23:00:54Z", "type": "commit"}]}