{"pr_number": 1335, "pr_title": "Multithreaded channels", "pr_author": "ajsutton", "pr_createdAt": "2020-03-10T00:06:13Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1335", "timeline": [{"oid": "1d5d34717e432825fe1adde507422809055d48cb", "url": "https://github.com/ConsenSys/teku/commit/1d5d34717e432825fe1adde507422809055d48cb", "message": "Add annotation based approach to setting threads.", "committedDate": "2020-03-09T23:57:15Z", "type": "commit"}, {"oid": "86e42d38bf392509bb46bbf4ea591b7d3e6b4464", "url": "https://github.com/ConsenSys/teku/commit/86e42d38bf392509bb46bbf4ea591b7d3e6b4464", "message": "Switch to specifying the number of threads per subscriber, instead of per channel.", "committedDate": "2020-03-09T23:57:15Z", "type": "commit"}, {"oid": "d30f84cbea44968e56b8e7941500918a580a51db", "url": "https://github.com/ConsenSys/teku/commit/d30f84cbea44968e56b8e7941500918a580a51db", "message": "Undo more changes.", "committedDate": "2020-03-10T00:05:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMzk3MA==", "url": "https://github.com/ConsenSys/teku/pull/1335#discussion_r390423970", "body": "(nit) Might be worth some javadoc that explains `numberOfThreads` will be used at the discretion of the specific implementation as the target degree of processing parallelism or something like that.  \r\n\r\nPossibly we could rename to something like:\r\n```suggestion\r\n  public void subscribe(final T listener, final int requestedParallelism) {\r\n```\r\nwhich is more generic, although maybe more obscure \ud83e\udd37\u200d\u2640 ", "bodyText": "(nit) Might be worth some javadoc that explains numberOfThreads will be used at the discretion of the specific implementation as the target degree of processing parallelism or something like that.\nPossibly we could rename to something like:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void subscribeMultithreaded(final T listener, final int numberOfThreads) {\n          \n          \n            \n              public void subscribe(final T listener, final int requestedParallelism) {\n          \n      \n    \n    \n  \n\nwhich is more generic, although maybe more obscure \ud83e\udd37\u200d\u2640", "bodyHTML": "<p dir=\"auto\">(nit) Might be worth some javadoc that explains <code>numberOfThreads</code> will be used at the discretion of the specific implementation as the target degree of processing parallelism or something like that.</p>\n<p dir=\"auto\">Possibly we could rename to something like:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">subscribeMultithreaded</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">T</span> listener, <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">numberOfThreads</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">subscribe</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">T</span> listener, <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">requestedParallelism</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">which is more generic, although maybe more obscure <g-emoji class=\"g-emoji\" alias=\"woman_shrugging\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f937-2640.png\">\ud83e\udd37\u200d\u2640</g-emoji></p>", "author": "mbaxter", "createdAt": "2020-03-10T15:58:21Z", "path": "events/src/main/java/tech/pegasys/artemis/events/EventChannel.java", "diffHunk": "@@ -134,11 +134,16 @@ public T getPublisher() {\n     return publisher;\n   }\n \n-  public void subscribe(T listener) {\n+  public void subscribe(final T listener) {\n+    subscribeMultithreaded(listener, 1);\n+  }\n+\n+  public void subscribeMultithreaded(final T listener, final int numberOfThreads) {", "originalCommit": "d30f84cbea44968e56b8e7941500918a580a51db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0OTc5NQ==", "url": "https://github.com/ConsenSys/teku/pull/1335#discussion_r390649795", "bodyText": "I've added some java doc.  I'm not too concerned about the fact that the number of threads is ignored for synchronous channels because we should only use those for testing anyway.\nI'm also more concerned that we'll accidentally make something multithreaded than that it will be single threaded.  So have stuck with subscribeMultithreaded as the name so it's really clear.", "author": "ajsutton", "createdAt": "2020-03-10T22:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMzk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyOTY0Nw==", "url": "https://github.com/ConsenSys/teku/pull/1335#discussion_r390429647", "body": "I think spying on started1 and saying `verify(started1).await()` would be more clear here,  because the constants and the time unit makes the reader go look for other constants.", "bodyText": "I think spying on started1 and saying verify(started1).await() would be more clear here,  because the constants and the time unit makes the reader go look for other constants.", "bodyHTML": "<p dir=\"auto\">I think spying on started1 and saying <code>verify(started1).await()</code> would be more clear here,  because the constants and the time unit makes the reader go look for other constants.</p>", "author": "cemozerr", "createdAt": "2020-03-10T16:06:02Z", "path": "events/src/test/java/tech/pegasys/artemis/events/EventChannelTest.java", "diffHunk": "@@ -183,6 +196,54 @@ public void shouldDeliverEventsAsync() throws Exception {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldDeliverAsyncEventsOnMultipleThreads() throws Exception {\n+    executor =\n+        Executors.newCachedThreadPool(\n+            new ThreadFactoryBuilder()\n+                .setDaemon(true)\n+                .setNameFormat(\"shoudlDeliverAsyncEventsOnMultipleThreads-%d\")\n+                .build());\n+    final EventChannel<WaitOnLatch> channel =\n+        EventChannel.createAsync(WaitOnLatch.class, executor, metricsSystem);\n+    final WaitOnLatch subscriber =\n+        (started, await, completed) -> {\n+          started.countDown();\n+          try {\n+            await.await();\n+            completed.countDown();\n+          } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+          }\n+        };\n+    channel.subscribeMultithreaded(subscriber, 2); // Two subscribing threads\n+\n+    final CountDownLatch started1 = new CountDownLatch(1);\n+    final CountDownLatch await1 = new CountDownLatch(1);\n+    final CountDownLatch completed1 = new CountDownLatch(1);\n+    final CountDownLatch started2 = new CountDownLatch(1);\n+    final CountDownLatch await2 = new CountDownLatch(1);\n+    final CountDownLatch completed2 = new CountDownLatch(1);\n+\n+    // Publish two events\n+    channel.getPublisher().waitFor(started1, await1, completed1);\n+    channel.getPublisher().waitFor(started2, await2, completed2);\n+\n+    // Both events should start being processed\n+    assertThat(started1.await(5, TimeUnit.SECONDS)).isTrue();", "originalCommit": "d30f84cbea44968e56b8e7941500918a580a51db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MDY2Mw==", "url": "https://github.com/ConsenSys/teku/pull/1335#discussion_r390650663", "bodyText": "You can't use a spy in this case because the test is multithreaded and mockito is generally not thread safe.  I've extracted a private method to make it more readable though.", "author": "ajsutton", "createdAt": "2020-03-10T22:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyOTY0Nw=="}], "type": "inlineReview"}, {"oid": "c044f5816ac71ae3b4283d492e05fc96f4be929a", "url": "https://github.com/ConsenSys/teku/commit/c044f5816ac71ae3b4283d492e05fc96f4be929a", "message": "Merge branch 'master' into multithreaded-channels", "committedDate": "2020-03-10T21:18:58Z", "type": "commit"}, {"oid": "729a87401e2795e8c9c0222be85cfd1de3997126", "url": "https://github.com/ConsenSys/teku/commit/729a87401e2795e8c9c0222be85cfd1de3997126", "message": "Add javadoc.", "committedDate": "2020-03-10T22:29:25Z", "type": "commit"}, {"oid": "8f57c90db987fd72242d3834805d2bb7e810f613", "url": "https://github.com/ConsenSys/teku/commit/8f57c90db987fd72242d3834805d2bb7e810f613", "message": "More javadoc.", "committedDate": "2020-03-10T22:30:33Z", "type": "commit"}, {"oid": "bf283db26c109d7fec61413820f02b5dc4e911c5", "url": "https://github.com/ConsenSys/teku/commit/bf283db26c109d7fec61413820f02b5dc4e911c5", "message": "Merge branch 'multithreaded-channels' of github.com:ajsutton/teku into multithreaded-channels", "committedDate": "2020-03-10T22:30:38Z", "type": "commit"}, {"oid": "5b2ddb440dbc812bdee7ab24e310d1a0b5b2b834", "url": "https://github.com/ConsenSys/teku/commit/5b2ddb440dbc812bdee7ab24e310d1a0b5b2b834", "message": "Extract private method for readability.", "committedDate": "2020-03-10T22:35:04Z", "type": "commit"}, {"oid": "068dfcd49f0e9113e5197eeaf2ee77d7a543d789", "url": "https://github.com/ConsenSys/teku/commit/068dfcd49f0e9113e5197eeaf2ee77d7a543d789", "message": "Merge branch 'master' into multithreaded-channels", "committedDate": "2020-03-10T22:36:57Z", "type": "commit"}]}