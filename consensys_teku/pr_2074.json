{"pr_number": 2074, "pr_title": "implement v1 rest api for version and identity.", "pr_author": "rolfyone", "pr_createdAt": "2020-06-08T01:47:06Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2074", "timeline": [{"oid": "e35c353c6f50fe69763b4f74b401817aa718599e", "url": "https://github.com/ConsenSys/teku/commit/e35c353c6f50fe69763b4f74b401817aa718599e", "message": "implement v1 rest api for version and identity.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T01:45:39Z", "type": "commit"}, {"oid": "d467bb4705fad9d1e4c4f9670ec7c87109ce7cfa", "url": "https://github.com/ConsenSys/teku/commit/d467bb4705fad9d1e4c4f9670ec7c87109ce7cfa", "message": "spotless\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T01:51:34Z", "type": "commit"}, {"oid": "943e097f789b8d198f6cea525386a029d8115d53", "url": "https://github.com/ConsenSys/teku/commit/943e097f789b8d198f6cea525386a029d8115d53", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T01:51:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428050", "body": "I just noticed these methods start with a capital ", "bodyText": "I just noticed these methods start with a capital", "bodyHTML": "<p dir=\"auto\">I just noticed these methods start with a capital</p>", "author": "macfarla", "createdAt": "2020-06-08T02:05:01Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -124,6 +125,16 @@ public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n+  @Test\n+  public void ShouldHaveV1VersionEndpoint() {", "originalCommit": "e35c353c6f50fe69763b4f74b401817aa718599e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODcwMg==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428702", "bodyText": "ah oops.", "author": "rolfyone", "createdAt": "2020-06-08T02:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyOTM0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436429347", "bodyText": "the whole file was like that, but i fixed it.", "author": "rolfyone", "createdAt": "2020-06-08T02:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "2510896dfe61690eff8084d6ac93db54d5a47eb2", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 8a2f3f37c7..53d42adae1 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -127,7 +127,10 @@ class BeaconRestApiTest {\n \n   @Test\n   public void ShouldHaveV1VersionEndpoint() {\n-    verify(app).get(eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE), any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n+    verify(app)\n+        .get(\n+            eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE),\n+            any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n   }\n \n   @Test\n", "next_change": {"commit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 53d42adae1..22accf089a 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -76,57 +76,57 @@ class BeaconRestApiTest {\n   }\n \n   @Test\n-  public void RestApiShouldHaveServerPortSet() {\n+  public void shouldHaveServerPortSet() {\n     verify(server).setServerPort(THE_PORT);\n   }\n \n   @Test\n-  public void RestApiShouldHaveGenesisTimeEndpoint() {\n+  public void shouldHaveGenesisTimeEndpoint() {\n     verify(app).get(eq(GetGenesisTime.ROUTE), any(GetGenesisTime.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveVersionEndpoint() {\n+  public void shouldHaveVersionEndpoint() {\n     verify(app).get(eq(GetVersion.ROUTE), any(GetVersion.class));\n   }\n \n   @Test\n-  public void RestApiShouldHavePeerIdEndpoint() {\n+  public void shouldHavePeerIdEndpoint() {\n     verify(app).get(eq(GetPeerId.ROUTE), any(GetPeerId.class));\n   }\n \n   @Test\n-  public void restApiShouldHaveBeaconHeadEndpoint() {\n+  public void shouldHaveBeaconHeadEndpoint() {\n     verify(app).get(eq(GetHead.ROUTE), any(GetHead.class));\n   }\n \n   @Test\n-  public void RestApiShouldHavePeersEndpoint() {\n+  public void shouldHavePeersEndpoint() {\n     verify(app).get(eq(GetPeers.ROUTE), any(GetPeers.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveChainHeadEndpoint() {\n+  public void shouldHaveChainHeadEndpoint() {\n     verify(app).get(eq(GetChainHead.ROUTE), any(GetChainHead.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconStateEndpoint() {\n+  public void shouldHaveBeaconStateEndpoint() {\n     verify(app).get(eq(GetState.ROUTE), any(GetState.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveSyncingEndpoint() {\n+  public void shouldHaveSyncingEndpoint() {\n     verify(app).get(eq(GetSyncing.ROUTE), any(GetSyncing.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n+  public void shouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n   @Test\n-  public void ShouldHaveV1VersionEndpoint() {\n+  public void shouldHaveV1VersionEndpoint() {\n     verify(app)\n         .get(\n             eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE),\n", "next_change": null}, {"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 53d42adae1..22accf089a 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -134,62 +134,62 @@ class BeaconRestApiTest {\n   }\n \n   @Test\n-  public void ShouldHaveV1IdentityEndpoint() {\n+  public void shouldHaveV1IdentityEndpoint() {\n     verify(app).get(eq(GetIdentity.ROUTE), any(GetIdentity.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconStateRootEndpoint() {\n+  public void shouldHaveBeaconStateRootEndpoint() {\n     verify(app).get(eq(GetStateRoot.ROUTE), any(GetStateRoot.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveForkEndpoint() {\n+  public void shouldHaveForkEndpoint() {\n     verify(app).get(eq(GetFork.ROUTE), any(GetFork.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkEnrEndpoint() {\n+  public void shouldHaveNetworkEnrEndpoint() {\n     verify(app).get(eq(GetEthereumNameRecord.ROUTE), any(GetEthereumNameRecord.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkListenAddressesEndpoint() {\n+  public void shouldHaveNetworkListenAddressesEndpoint() {\n     verify(app).get(eq(GetListenAddresses.ROUTE), any(GetListenAddresses.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkPeerCountEndpoint() {\n+  public void shouldHaveNetworkPeerCountEndpoint() {\n     verify(app).get(eq(GetPeerCount.ROUTE), any(GetPeerCount.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkListenPortEndpoint() {\n+  public void shouldHaveNetworkListenPortEndpoint() {\n     verify(app).get(eq(GetListenPort.ROUTE), any(GetListenPort.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconValidatorsPostEndpoint() {\n+  public void shouldHaveBeaconValidatorsPostEndpoint() {\n     verify(app).post(eq(PostValidators.ROUTE), any(PostValidators.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveValidatorBlockEndpoint() {\n+  public void shouldHaveValidatorBlockEndpoint() {\n     verify(app).post(eq(PostBlock.ROUTE), any(PostBlock.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveValidatorDutiesEndpoint() {\n+  public void shouldHaveValidatorDutiesEndpoint() {\n     verify(app).post(eq(PostDuties.ROUTE), any(PostDuties.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveCustomNotFoundError() {\n+  public void shouldHaveCustomNotFoundError() {\n     verify(app, never()).error(eq(SC_NOT_FOUND), any());\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeforeHandler() {\n+  public void shouldHaveBeforeHandler() {\n     verify(app).before(any());\n   }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODE1MQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428151", "body": "```suggestion\r\n            description = \"Network identity of the node.\"),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        description = \"An object network identity of the node.\"),\n          \n          \n            \n                        description = \"Network identity of the node.\"),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            description <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">An object network</span> identity of the node.<span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            description <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Network</span> identity of the node.<span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "macfarla", "createdAt": "2020-06-08T02:05:49Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.node;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_NODE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NetworkDataProvider;\n+import tech.pegasys.teku.api.response.v1.node.Identity;\n+import tech.pegasys.teku.api.response.v1.node.IdentityResponse;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetIdentity implements Handler {\n+  public static final String ROUTE = \"/v1/node/identity\";\n+  private final JsonProvider jsonProvider;\n+  private final NetworkDataProvider network;\n+\n+  public GetIdentity(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.network = provider.getNetworkDataProvider();\n+  }\n+\n+  GetIdentity(final NetworkDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.network = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Retrieves data about the node's network presence.\",\n+      tags = {TAG_V1_NODE},\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = IdentityResponse.class),\n+            description = \"An object network identity of the node.\"),", "originalCommit": "e35c353c6f50fe69763b4f74b401817aa718599e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\nindex 9adbb4731f..5a45ac4ce3 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n", "chunk": "@@ -52,13 +52,13 @@ public class GetIdentity implements Handler {\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Retrieves data about the node's network presence.\",\n+      summary = \"Retrieves data about the node's network identity.\",\n       tags = {TAG_V1_NODE},\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n             content = @OpenApiContent(from = IdentityResponse.class),\n-            description = \"An object network identity of the node.\"),\n+            description = \"The identifying information of the node.\"),\n         @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n         @OpenApiResponse(status = RES_INTERNAL_ERROR)\n       })\n", "next_change": null}]}}, {"oid": "2510896dfe61690eff8084d6ac93db54d5a47eb2", "url": "https://github.com/ConsenSys/teku/commit/2510896dfe61690eff8084d6ac93db54d5a47eb2", "message": " - added new endpoints to changelog\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T02:09:05Z", "type": "commit"}, {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "url": "https://github.com/ConsenSys/teku/commit/a7fc79eb0e2cbbdae01f1338ca687416880475ec", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T02:13:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzk3MQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436433971", "body": "You can't create a new instance of this as it won't actually pick up the right values.  Need to add a `getMetaData()` to `Eth2Network` (and the implementation will actually wind up having to delegate to `Eth2PeerManager`).  `NetworkDataProvider` can be given an `Eth2Network` instead of a `P2PNetwork` so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.", "bodyText": "You can't create a new instance of this as it won't actually pick up the right values.  Need to add a getMetaData() to Eth2Network (and the implementation will actually wind up having to delegate to Eth2PeerManager).  NetworkDataProvider can be given an Eth2Network instead of a P2PNetwork so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.", "bodyHTML": "<p dir=\"auto\">You can't create a new instance of this as it won't actually pick up the right values.  Need to add a <code>getMetaData()</code> to <code>Eth2Network</code> (and the implementation will actually wind up having to delegate to <code>Eth2PeerManager</code>).  <code>NetworkDataProvider</code> can be given an <code>Eth2Network</code> instead of a <code>P2PNetwork</code> so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.</p>", "author": "ajsutton", "createdAt": "2020-06-08T02:43:30Z", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -16,12 +16,15 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import tech.pegasys.teku.api.schema.Metadata;\n+import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n   private final P2PNetwork<?> p2pNetwork;\n+  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NjYwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436446601", "bodyText": "yep didnt think this bit was right, that's what i was stuck on - perfect.", "author": "rolfyone", "createdAt": "2020-06-08T04:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\nindex c2ba23cfdd..7d0d28df94 100644\n--- a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n", "chunk": "@@ -17,17 +17,15 @@ import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import tech.pegasys.teku.api.schema.Metadata;\n-import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n-import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n-  private final P2PNetwork<?> p2pNetwork;\n-  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();\n+  private final Eth2Network network;\n \n-  public NetworkDataProvider(final P2PNetwork<?> p2pNetwork) {\n-    this.p2pNetwork = p2pNetwork;\n+  public NetworkDataProvider(final Eth2Network network) {\n+    this.network = network;\n   }\n \n   /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNTAwMg==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436435002", "body": "The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.\r\n\r\nAlso `MultiaddrUtil` is currently designed just for TCP (hard codes `/tcp/` in the address) but discovery is UDP.", "bodyText": "The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.\nAlso MultiaddrUtil is currently designed just for TCP (hard codes /tcp/ in the address) but discovery is UDP.", "bodyHTML": "<p dir=\"auto\">The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.</p>\n<p dir=\"auto\">Also <code>MultiaddrUtil</code> is currently designed just for TCP (hard codes <code>/tcp/</code> in the address) but discovery is UDP.</p>", "author": "ajsutton", "createdAt": "2020-06-08T02:50:04Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -25,24 +28,29 @@\n import org.ethereum.beacon.discovery.schema.NodeStatus;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryPeer;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.teku.networking.p2p.libp2p.MultiaddrUtil;\n+import tech.pegasys.teku.networking.p2p.network.NetworkConfig;\n import tech.pegasys.teku.service.serviceutils.Service;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class DiscV5Service extends Service implements DiscoveryService {\n \n   private final DiscoverySystem discoverySystem;\n+  private final Multiaddr advertisedAddr;\n \n-  public DiscV5Service(final DiscoverySystem discoverySystem) {\n+  private DiscV5Service(final DiscoverySystem discoverySystem, NetworkConfig config) {\n     this.discoverySystem = discoverySystem;\n+    final byte[] nodeId = discoverySystem.getLocalNodeRecord().getNodeId().toArray();\n+    this.advertisedAddr = getAdvertisedAddr(config, nodeId);", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 28dcd1c61d..5a023278a5 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -36,12 +34,9 @@ import tech.pegasys.teku.util.async.SafeFuture;\n public class DiscV5Service extends Service implements DiscoveryService {\n \n   private final DiscoverySystem discoverySystem;\n-  private final Multiaddr advertisedAddr;\n \n-  private DiscV5Service(final DiscoverySystem discoverySystem, NetworkConfig config) {\n+  private DiscV5Service(final DiscoverySystem discoverySystem) {\n     this.discoverySystem = discoverySystem;\n-    final byte[] nodeId = discoverySystem.getLocalNodeRecord().getNodeId().toArray();\n-    this.advertisedAddr = getAdvertisedAddr(config, nodeId);\n   }\n \n   public static DiscoveryService create(NetworkConfig p2pConfig) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTUwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436439501", "body": "It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:\r\n```\r\nfinal NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\r\nif (nodeRecord.getUdpAddress().isEmpty() {\r\n  return Optional.empty();\r\n}\r\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\r\n\r\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/\r\n```", "bodyText": "It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:\nfinal NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/", "bodyHTML": "<p dir=\"auto\">It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/\"><pre><code>final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/\n</code></pre></div>", "author": "ajsutton", "createdAt": "2020-06-08T03:17:55Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -83,6 +91,21 @@ public static DiscoveryService create(\n     return Optional.of(discoverySystem.getLocalNodeRecord().asEnr());\n   }\n \n+  @Override\n+  public Optional<String> getDiscoveryAddress() {\n+    return Optional.of(advertisedAddr.toString());", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTg3Ng==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436439876", "bodyText": "You just can't use the resulting multiaddr for anything useful because you don't have the public key of the node record and this will actually wind up including a hash of the public key.", "author": "ajsutton", "createdAt": "2020-06-08T03:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 28dcd1c61d..5a023278a5 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -93,17 +88,17 @@ public class DiscV5Service extends Service implements DiscoveryService {\n \n   @Override\n   public Optional<String> getDiscoveryAddress() {\n-    return Optional.of(advertisedAddr.toString());\n-  }\n-\n-  private Multiaddr getAdvertisedAddr(NetworkConfig config, final byte[] nodeId) {\n-    try {\n-      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);\n-      return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n-    } catch (UnknownHostException err) {\n-      throw new RuntimeException(\n-          \"Unable to start discovery node due to failed attempt at obtaining host address\", err);\n+    final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\n+    if (nodeRecord.getUdpAddress().isEmpty()) {\n+      return Optional.empty();\n     }\n+    final DiscoveryPeer discoveryPeer =\n+        new DiscoveryPeer(\n+            (Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1),\n+            nodeRecord.getUdpAddress().get(),\n+            Optional.empty());\n+\n+    return Optional.of(MultiaddrUtil.fromDiscoveryPeerAsUdp(discoveryPeer).toString());\n   }\n \n   @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MTQ1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436441456", "body": "I'm not convinced this code belongs in `MultiaddrUtil` - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.", "bodyText": "I'm not convinced this code belongs in MultiaddrUtil - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.", "bodyHTML": "<p dir=\"auto\">I'm not convinced this code belongs in <code>MultiaddrUtil</code> - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.</p>", "author": "ajsutton", "createdAt": "2020-06-08T03:30:06Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -224,15 +223,7 @@ private Gossip createGossip() {\n \n   private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n     try {\n-      final InetSocketAddress advertisedAddress =\n-          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-      final InetSocketAddress resolvedAddress;\n-      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-        resolvedAddress =\n-            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-      } else {\n-        resolvedAddress = advertisedAddress;\n-      }\n+      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\nindex 67f70bd366..b5947e6a5d 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n", "chunk": "@@ -223,7 +224,15 @@ public class LibP2PNetwork implements P2PNetwork<Peer> {\n \n   private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n     try {\n-      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);\n+      final InetSocketAddress advertisedAddress =\n+          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n+      final InetSocketAddress resolvedAddress;\n+      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n+        resolvedAddress =\n+            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n+      } else {\n+        resolvedAddress = advertisedAddress;\n+      }\n       return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n     } catch (UnknownHostException err) {\n       throw new RuntimeException(\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MTgwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436441805", "body": "We should avoid using `byte[]` for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  `NodeId` is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.", "bodyText": "We should avoid using byte[] for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  NodeId is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.", "bodyHTML": "<p dir=\"auto\">We should avoid using <code>byte[]</code> for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  <code>NodeId</code> is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.</p>", "author": "ajsutton", "createdAt": "2020-06-08T03:31:57Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "diffHunk": "@@ -45,10 +48,33 @@ public static Multiaddr fromInetSocketAddress(\n     return addPeerId(fromInetSocketAddress(address), nodeId);\n   }\n \n+  public static InetSocketAddress getResolvedInetSocketAddress(NetworkConfig config)\n+      throws UnknownHostException {\n+    final InetSocketAddress advertisedAddress =\n+        new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n+    final InetSocketAddress resolvedAddress;\n+    if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n+      resolvedAddress =\n+          new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n+    } else {\n+      resolvedAddress = advertisedAddress;\n+    }\n+    return resolvedAddress;\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(\n+      final InetSocketAddress address, final byte[] nodeId) {", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 407df1e03c..0b17d6e1cb 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -33,48 +30,35 @@ public class MultiaddrUtil {\n     return fromInetSocketAddress(peer.getNodeAddress(), getNodeId(peer));\n   }\n \n+  public static Multiaddr fromDiscoveryPeerAsUdp(final DiscoveryPeer peer) {\n+    return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n+  }\n+\n   public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+    return fromInetSocketAddress(address, \"tcp\");\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(\n+      final InetSocketAddress address, final String protocol) {\n     final String addrString =\n         String.format(\n-            \"/%s/%s/tcp/%d\",\n+            \"/%s/%s/%s/%d\",\n             protocol(address.getAddress()),\n             address.getAddress().getHostAddress(),\n+            protocol,\n             address.getPort());\n     return Multiaddr.fromString(addrString);\n   }\n \n   public static Multiaddr fromInetSocketAddress(\n       final InetSocketAddress address, final NodeId nodeId) {\n-    return addPeerId(fromInetSocketAddress(address), nodeId);\n-  }\n-\n-  public static InetSocketAddress getResolvedInetSocketAddress(NetworkConfig config)\n-      throws UnknownHostException {\n-    final InetSocketAddress advertisedAddress =\n-        new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-    final InetSocketAddress resolvedAddress;\n-    if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-      resolvedAddress =\n-          new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-    } else {\n-      resolvedAddress = advertisedAddress;\n-    }\n-    return resolvedAddress;\n-  }\n-\n-  public static Multiaddr fromInetSocketAddress(\n-      final InetSocketAddress address, final byte[] nodeId) {\n-    return addPeerId(fromInetSocketAddress(address), nodeId);\n+    return addPeerId(fromInetSocketAddress(address, \"tcp\"), nodeId);\n   }\n \n   private static Multiaddr addPeerId(final Multiaddr addr, final NodeId nodeId) {\n     return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + nodeId.toBase58()));\n   }\n \n-  private static Multiaddr addPeerId(final Multiaddr addr, final byte[] nodeId) {\n-    return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + Base58.INSTANCE.encode(nodeId)));\n-  }\n-\n   private static LibP2PNodeId getNodeId(final DiscoveryPeer peer) {\n     final PubKey pubKey = unmarshalSecp256k1PublicKey(peer.getPublicKey().toArrayUnsafe());\n     return new LibP2PNodeId(PeerId.fromPubKey(pubKey));\n", "next_change": null}]}}, {"oid": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "url": "https://github.com/ConsenSys/teku/commit/2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T04:59:24Z", "type": "commit"}, {"oid": "5c011e135dfbf8c76657a777976016518f2a61df", "url": "https://github.com/ConsenSys/teku/commit/5c011e135dfbf8c76657a777976016518f2a61df", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T21:13:48Z", "type": "commit"}, {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "url": "https://github.com/ConsenSys/teku/commit/b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T21:50:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437029757", "body": "We should probably make this return `Optional` or this is going to create a lot of surprises when p2p is disabled.", "bodyText": "We should probably make this return Optional or this is going to create a lot of surprises when p2p is disabled.", "bodyHTML": "<p dir=\"auto\">We should probably make this return <code>Optional</code> or this is going to create a lot of surprises when p2p is disabled.</p>", "author": "ajsutton", "createdAt": "2020-06-08T22:11:26Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "diffHunk": "@@ -27,4 +28,9 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {}\n \n   @Override\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {}\n+\n+  @Override\n+  public MetadataMessage getMetadata() {\n+    return null;", "originalCommit": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTk0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437029947", "bodyText": "Alternatively this can probably just return sequence 1 and all zeros for the subscribed subnets which is probably better.", "author": "ajsutton", "createdAt": "2020-06-08T22:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTY5MA==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437041690", "bodyText": "ok, there's a MetadataMessage.createDefault() which creates sequence 0 and all 0's for subscribed, so i've called that here. hopefully sequence 0 is fine...", "author": "rolfyone", "createdAt": "2020-06-08T22:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0Mjk1Mw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437042953", "bodyText": "Yep, using that is a better idea. :)", "author": "ajsutton", "createdAt": "2020-06-08T22:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "changed_code": [{"header": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\nindex 75b4db4ebe..c3dbd1f155 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n", "chunk": "@@ -31,6 +31,6 @@ public class NoOpEth2Network extends MockP2PNetwork<Eth2Peer> implements Eth2Net\n \n   @Override\n   public MetadataMessage getMetadata() {\n-    return null;\n+    return MetadataMessage.createDefault();\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMDM2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437030367", "body": "nit: I'm be tempted to make this private and just have the two `fromDiscoveryPeer` methods use it internally.", "bodyText": "nit: I'm be tempted to make this private and just have the two fromDiscoveryPeer methods use it internally.", "bodyHTML": "<p dir=\"auto\">nit: I'm be tempted to make this private and just have the two <code>fromDiscoveryPeer</code> methods use it internally.</p>", "author": "ajsutton", "createdAt": "2020-06-08T22:13:09Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "diffHunk": "@@ -30,19 +30,29 @@ public static Multiaddr fromDiscoveryPeer(final DiscoveryPeer peer) {\n     return fromInetSocketAddress(peer.getNodeAddress(), getNodeId(peer));\n   }\n \n+  public static Multiaddr fromDiscoveryPeerAsUdp(final DiscoveryPeer peer) {\n+    return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n+  }\n+\n   public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+    return fromInetSocketAddress(address, \"tcp\");\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(", "originalCommit": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 0b17d6e1cb..025a86c295 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -34,12 +34,11 @@ public class MultiaddrUtil {\n     return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n   }\n \n-  public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n     return fromInetSocketAddress(address, \"tcp\");\n   }\n \n-  public static Multiaddr fromInetSocketAddress(\n-      final InetSocketAddress address, final String protocol) {\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address, final String protocol) {\n     final String addrString =\n         String.format(\n             \"/%s/%s/%s/%d\",\n", "next_change": null}]}}, {"oid": "90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "url": "https://github.com/ConsenSys/teku/commit/90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T22:26:33Z", "type": "commit"}, {"oid": "46f45984cac4e3483a84baf8098cda873b876069", "url": "https://github.com/ConsenSys/teku/commit/46f45984cac4e3483a84baf8098cda873b876069", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T22:44:49Z", "type": "commit"}]}