{"pr_number": 2074, "pr_title": "implement v1 rest api for version and identity.", "pr_author": "rolfyone", "pr_createdAt": "2020-06-08T01:47:06Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2074", "merge_commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "timeline": [{"oid": "e35c353c6f50fe69763b4f74b401817aa718599e", "url": "https://github.com/ConsenSys/teku/commit/e35c353c6f50fe69763b4f74b401817aa718599e", "message": "implement v1 rest api for version and identity.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T01:45:39Z", "type": "commit"}, {"oid": "d467bb4705fad9d1e4c4f9670ec7c87109ce7cfa", "url": "https://github.com/ConsenSys/teku/commit/d467bb4705fad9d1e4c4f9670ec7c87109ce7cfa", "message": "spotless\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T01:51:34Z", "type": "commit"}, {"oid": "943e097f789b8d198f6cea525386a029d8115d53", "url": "https://github.com/ConsenSys/teku/commit/943e097f789b8d198f6cea525386a029d8115d53", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T01:51:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428050", "body": "I just noticed these methods start with a capital ", "bodyText": "I just noticed these methods start with a capital", "bodyHTML": "<p dir=\"auto\">I just noticed these methods start with a capital</p>", "author": "macfarla", "createdAt": "2020-06-08T02:05:01Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -124,6 +125,16 @@ public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n+  @Test\n+  public void ShouldHaveV1VersionEndpoint() {", "originalCommit": "e35c353c6f50fe69763b4f74b401817aa718599e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODcwMg==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428702", "bodyText": "ah oops.", "author": "rolfyone", "createdAt": "2020-06-08T02:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyOTM0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436429347", "bodyText": "the whole file was like that, but i fixed it.", "author": "rolfyone", "createdAt": "2020-06-08T02:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "2510896dfe61690eff8084d6ac93db54d5a47eb2", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 8a2f3f37c..53d42adae 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -127,7 +127,10 @@ class BeaconRestApiTest {\n \n   @Test\n   public void ShouldHaveV1VersionEndpoint() {\n-    verify(app).get(eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE), any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n+    verify(app)\n+        .get(\n+            eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE),\n+            any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n   }\n \n   @Test\n", "next_change": {"commit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 53d42adae..22accf089 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -76,57 +76,57 @@ class BeaconRestApiTest {\n   }\n \n   @Test\n-  public void RestApiShouldHaveServerPortSet() {\n+  public void shouldHaveServerPortSet() {\n     verify(server).setServerPort(THE_PORT);\n   }\n \n   @Test\n-  public void RestApiShouldHaveGenesisTimeEndpoint() {\n+  public void shouldHaveGenesisTimeEndpoint() {\n     verify(app).get(eq(GetGenesisTime.ROUTE), any(GetGenesisTime.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveVersionEndpoint() {\n+  public void shouldHaveVersionEndpoint() {\n     verify(app).get(eq(GetVersion.ROUTE), any(GetVersion.class));\n   }\n \n   @Test\n-  public void RestApiShouldHavePeerIdEndpoint() {\n+  public void shouldHavePeerIdEndpoint() {\n     verify(app).get(eq(GetPeerId.ROUTE), any(GetPeerId.class));\n   }\n \n   @Test\n-  public void restApiShouldHaveBeaconHeadEndpoint() {\n+  public void shouldHaveBeaconHeadEndpoint() {\n     verify(app).get(eq(GetHead.ROUTE), any(GetHead.class));\n   }\n \n   @Test\n-  public void RestApiShouldHavePeersEndpoint() {\n+  public void shouldHavePeersEndpoint() {\n     verify(app).get(eq(GetPeers.ROUTE), any(GetPeers.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveChainHeadEndpoint() {\n+  public void shouldHaveChainHeadEndpoint() {\n     verify(app).get(eq(GetChainHead.ROUTE), any(GetChainHead.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconStateEndpoint() {\n+  public void shouldHaveBeaconStateEndpoint() {\n     verify(app).get(eq(GetState.ROUTE), any(GetState.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveSyncingEndpoint() {\n+  public void shouldHaveSyncingEndpoint() {\n     verify(app).get(eq(GetSyncing.ROUTE), any(GetSyncing.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n+  public void shouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n   @Test\n-  public void ShouldHaveV1VersionEndpoint() {\n+  public void shouldHaveV1VersionEndpoint() {\n     verify(app)\n         .get(\n             eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE),\n", "next_change": null}, {"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 53d42adae..22accf089 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -134,62 +134,62 @@ class BeaconRestApiTest {\n   }\n \n   @Test\n-  public void ShouldHaveV1IdentityEndpoint() {\n+  public void shouldHaveV1IdentityEndpoint() {\n     verify(app).get(eq(GetIdentity.ROUTE), any(GetIdentity.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconStateRootEndpoint() {\n+  public void shouldHaveBeaconStateRootEndpoint() {\n     verify(app).get(eq(GetStateRoot.ROUTE), any(GetStateRoot.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveForkEndpoint() {\n+  public void shouldHaveForkEndpoint() {\n     verify(app).get(eq(GetFork.ROUTE), any(GetFork.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkEnrEndpoint() {\n+  public void shouldHaveNetworkEnrEndpoint() {\n     verify(app).get(eq(GetEthereumNameRecord.ROUTE), any(GetEthereumNameRecord.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkListenAddressesEndpoint() {\n+  public void shouldHaveNetworkListenAddressesEndpoint() {\n     verify(app).get(eq(GetListenAddresses.ROUTE), any(GetListenAddresses.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkPeerCountEndpoint() {\n+  public void shouldHaveNetworkPeerCountEndpoint() {\n     verify(app).get(eq(GetPeerCount.ROUTE), any(GetPeerCount.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkListenPortEndpoint() {\n+  public void shouldHaveNetworkListenPortEndpoint() {\n     verify(app).get(eq(GetListenPort.ROUTE), any(GetListenPort.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconValidatorsPostEndpoint() {\n+  public void shouldHaveBeaconValidatorsPostEndpoint() {\n     verify(app).post(eq(PostValidators.ROUTE), any(PostValidators.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveValidatorBlockEndpoint() {\n+  public void shouldHaveValidatorBlockEndpoint() {\n     verify(app).post(eq(PostBlock.ROUTE), any(PostBlock.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveValidatorDutiesEndpoint() {\n+  public void shouldHaveValidatorDutiesEndpoint() {\n     verify(app).post(eq(PostDuties.ROUTE), any(PostDuties.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveCustomNotFoundError() {\n+  public void shouldHaveCustomNotFoundError() {\n     verify(app, never()).error(eq(SC_NOT_FOUND), any());\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeforeHandler() {\n+  public void shouldHaveBeforeHandler() {\n     verify(app).before(any());\n   }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\nindex 8a2f3f37c..22accf089 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n", "chunk": "@@ -76,117 +76,120 @@ class BeaconRestApiTest {\n   }\n \n   @Test\n-  public void RestApiShouldHaveServerPortSet() {\n+  public void shouldHaveServerPortSet() {\n     verify(server).setServerPort(THE_PORT);\n   }\n \n   @Test\n-  public void RestApiShouldHaveGenesisTimeEndpoint() {\n+  public void shouldHaveGenesisTimeEndpoint() {\n     verify(app).get(eq(GetGenesisTime.ROUTE), any(GetGenesisTime.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveVersionEndpoint() {\n+  public void shouldHaveVersionEndpoint() {\n     verify(app).get(eq(GetVersion.ROUTE), any(GetVersion.class));\n   }\n \n   @Test\n-  public void RestApiShouldHavePeerIdEndpoint() {\n+  public void shouldHavePeerIdEndpoint() {\n     verify(app).get(eq(GetPeerId.ROUTE), any(GetPeerId.class));\n   }\n \n   @Test\n-  public void restApiShouldHaveBeaconHeadEndpoint() {\n+  public void shouldHaveBeaconHeadEndpoint() {\n     verify(app).get(eq(GetHead.ROUTE), any(GetHead.class));\n   }\n \n   @Test\n-  public void RestApiShouldHavePeersEndpoint() {\n+  public void shouldHavePeersEndpoint() {\n     verify(app).get(eq(GetPeers.ROUTE), any(GetPeers.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveChainHeadEndpoint() {\n+  public void shouldHaveChainHeadEndpoint() {\n     verify(app).get(eq(GetChainHead.ROUTE), any(GetChainHead.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconStateEndpoint() {\n+  public void shouldHaveBeaconStateEndpoint() {\n     verify(app).get(eq(GetState.ROUTE), any(GetState.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveSyncingEndpoint() {\n+  public void shouldHaveSyncingEndpoint() {\n     verify(app).get(eq(GetSyncing.ROUTE), any(GetSyncing.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n+  public void shouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n   @Test\n-  public void ShouldHaveV1VersionEndpoint() {\n-    verify(app).get(eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE), any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n+  public void shouldHaveV1VersionEndpoint() {\n+    verify(app)\n+        .get(\n+            eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE),\n+            any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n   }\n \n   @Test\n-  public void ShouldHaveV1IdentityEndpoint() {\n+  public void shouldHaveV1IdentityEndpoint() {\n     verify(app).get(eq(GetIdentity.ROUTE), any(GetIdentity.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconStateRootEndpoint() {\n+  public void shouldHaveBeaconStateRootEndpoint() {\n     verify(app).get(eq(GetStateRoot.ROUTE), any(GetStateRoot.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveForkEndpoint() {\n+  public void shouldHaveForkEndpoint() {\n     verify(app).get(eq(GetFork.ROUTE), any(GetFork.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkEnrEndpoint() {\n+  public void shouldHaveNetworkEnrEndpoint() {\n     verify(app).get(eq(GetEthereumNameRecord.ROUTE), any(GetEthereumNameRecord.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkListenAddressesEndpoint() {\n+  public void shouldHaveNetworkListenAddressesEndpoint() {\n     verify(app).get(eq(GetListenAddresses.ROUTE), any(GetListenAddresses.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkPeerCountEndpoint() {\n+  public void shouldHaveNetworkPeerCountEndpoint() {\n     verify(app).get(eq(GetPeerCount.ROUTE), any(GetPeerCount.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveNetworkListenPortEndpoint() {\n+  public void shouldHaveNetworkListenPortEndpoint() {\n     verify(app).get(eq(GetListenPort.ROUTE), any(GetListenPort.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconValidatorsPostEndpoint() {\n+  public void shouldHaveBeaconValidatorsPostEndpoint() {\n     verify(app).post(eq(PostValidators.ROUTE), any(PostValidators.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveValidatorBlockEndpoint() {\n+  public void shouldHaveValidatorBlockEndpoint() {\n     verify(app).post(eq(PostBlock.ROUTE), any(PostBlock.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveValidatorDutiesEndpoint() {\n+  public void shouldHaveValidatorDutiesEndpoint() {\n     verify(app).post(eq(PostDuties.ROUTE), any(PostDuties.class));\n   }\n \n   @Test\n-  public void RestApiShouldHaveCustomNotFoundError() {\n+  public void shouldHaveCustomNotFoundError() {\n     verify(app, never()).error(eq(SC_NOT_FOUND), any());\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeforeHandler() {\n+  public void shouldHaveBeforeHandler() {\n     verify(app).before(any());\n   }\n }\n", "next_change": {"commit": "b4d7c903c1f319d6e291a83ab516eb392216e466", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\ndeleted file mode 100644\nindex 22accf089..000000000\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java\n+++ /dev/null\n", "chunk": "@@ -1,195 +0,0 @@\n-/*\n- * Copyright 2020 ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package tech.pegasys.teku.beaconrestapi;\n-\n-import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.never;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-\n-import com.google.common.eventbus.EventBus;\n-import io.javalin.Javalin;\n-import io.javalin.core.JavalinServer;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import tech.pegasys.teku.api.DataProvider;\n-import tech.pegasys.teku.beaconrestapi.handlers.beacon.GetChainHead;\n-import tech.pegasys.teku.beaconrestapi.handlers.beacon.GetHead;\n-import tech.pegasys.teku.beaconrestapi.handlers.beacon.GetState;\n-import tech.pegasys.teku.beaconrestapi.handlers.beacon.GetStateRoot;\n-import tech.pegasys.teku.beaconrestapi.handlers.beacon.GetValidators;\n-import tech.pegasys.teku.beaconrestapi.handlers.beacon.PostValidators;\n-import tech.pegasys.teku.beaconrestapi.handlers.network.GetEthereumNameRecord;\n-import tech.pegasys.teku.beaconrestapi.handlers.network.GetListenAddresses;\n-import tech.pegasys.teku.beaconrestapi.handlers.network.GetListenPort;\n-import tech.pegasys.teku.beaconrestapi.handlers.network.GetPeerCount;\n-import tech.pegasys.teku.beaconrestapi.handlers.network.GetPeerId;\n-import tech.pegasys.teku.beaconrestapi.handlers.network.GetPeers;\n-import tech.pegasys.teku.beaconrestapi.handlers.node.GetFork;\n-import tech.pegasys.teku.beaconrestapi.handlers.node.GetGenesisTime;\n-import tech.pegasys.teku.beaconrestapi.handlers.node.GetSyncing;\n-import tech.pegasys.teku.beaconrestapi.handlers.node.GetVersion;\n-import tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetIdentity;\n-import tech.pegasys.teku.beaconrestapi.handlers.validator.PostBlock;\n-import tech.pegasys.teku.beaconrestapi.handlers.validator.PostDuties;\n-import tech.pegasys.teku.statetransition.blockimport.BlockImporter;\n-import tech.pegasys.teku.storage.client.CombinedChainDataClient;\n-import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n-import tech.pegasys.teku.storage.client.RecentChainData;\n-import tech.pegasys.teku.sync.SyncService;\n-import tech.pegasys.teku.util.config.TekuConfiguration;\n-\n-class BeaconRestApiTest {\n-  private final RecentChainData storageClient = MemoryOnlyRecentChainData.create(new EventBus());\n-  private final CombinedChainDataClient combinedChainDataClient =\n-      mock(CombinedChainDataClient.class);\n-  private final JavalinServer server = mock(JavalinServer.class);\n-  private final Javalin app = mock(Javalin.class);\n-  private final SyncService syncService = mock(SyncService.class);\n-  private final BlockImporter blockImporter = mock(BlockImporter.class);\n-  private static final Integer THE_PORT = 12345;\n-\n-  @BeforeEach\n-  public void setup() {\n-    TekuConfiguration config =\n-        TekuConfiguration.builder().setRestApiPort(THE_PORT).setRestApiDocsEnabled(false).build();\n-    when(app.server()).thenReturn(server);\n-    new BeaconRestApi(\n-        new DataProvider(\n-            storageClient, combinedChainDataClient, null, syncService, null, blockImporter),\n-        config,\n-        app);\n-  }\n-\n-  @Test\n-  public void shouldHaveServerPortSet() {\n-    verify(server).setServerPort(THE_PORT);\n-  }\n-\n-  @Test\n-  public void shouldHaveGenesisTimeEndpoint() {\n-    verify(app).get(eq(GetGenesisTime.ROUTE), any(GetGenesisTime.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveVersionEndpoint() {\n-    verify(app).get(eq(GetVersion.ROUTE), any(GetVersion.class));\n-  }\n-\n-  @Test\n-  public void shouldHavePeerIdEndpoint() {\n-    verify(app).get(eq(GetPeerId.ROUTE), any(GetPeerId.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveBeaconHeadEndpoint() {\n-    verify(app).get(eq(GetHead.ROUTE), any(GetHead.class));\n-  }\n-\n-  @Test\n-  public void shouldHavePeersEndpoint() {\n-    verify(app).get(eq(GetPeers.ROUTE), any(GetPeers.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveChainHeadEndpoint() {\n-    verify(app).get(eq(GetChainHead.ROUTE), any(GetChainHead.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveBeaconStateEndpoint() {\n-    verify(app).get(eq(GetState.ROUTE), any(GetState.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveSyncingEndpoint() {\n-    verify(app).get(eq(GetSyncing.ROUTE), any(GetSyncing.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveBeaconValidatorsEndpoint() {\n-    verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveV1VersionEndpoint() {\n-    verify(app)\n-        .get(\n-            eq(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.ROUTE),\n-            any(tech.pegasys.teku.beaconrestapi.handlers.v1.node.GetVersion.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveV1IdentityEndpoint() {\n-    verify(app).get(eq(GetIdentity.ROUTE), any(GetIdentity.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveBeaconStateRootEndpoint() {\n-    verify(app).get(eq(GetStateRoot.ROUTE), any(GetStateRoot.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveForkEndpoint() {\n-    verify(app).get(eq(GetFork.ROUTE), any(GetFork.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveNetworkEnrEndpoint() {\n-    verify(app).get(eq(GetEthereumNameRecord.ROUTE), any(GetEthereumNameRecord.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveNetworkListenAddressesEndpoint() {\n-    verify(app).get(eq(GetListenAddresses.ROUTE), any(GetListenAddresses.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveNetworkPeerCountEndpoint() {\n-    verify(app).get(eq(GetPeerCount.ROUTE), any(GetPeerCount.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveNetworkListenPortEndpoint() {\n-    verify(app).get(eq(GetListenPort.ROUTE), any(GetListenPort.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveBeaconValidatorsPostEndpoint() {\n-    verify(app).post(eq(PostValidators.ROUTE), any(PostValidators.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveValidatorBlockEndpoint() {\n-    verify(app).post(eq(PostBlock.ROUTE), any(PostBlock.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveValidatorDutiesEndpoint() {\n-    verify(app).post(eq(PostDuties.ROUTE), any(PostDuties.class));\n-  }\n-\n-  @Test\n-  public void shouldHaveCustomNotFoundError() {\n-    verify(app, never()).error(eq(SC_NOT_FOUND), any());\n-  }\n-\n-  @Test\n-  public void shouldHaveBeforeHandler() {\n-    verify(app).before(any());\n-  }\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "fd2f3cf1c0fff20b075dd63887b53a13d105f937", "committedDate": "2020-08-05 18:29:39 +1200", "message": "Implement Validator API GetAggregate method (#2508)"}, {"oid": "a227bb6a4ef72fc8cb5f7524b3b5f18733b6fc79", "committedDate": "2020-08-06 17:31:47 +1200", "message": "Implement Validator API PostAggregateAndProof method (#2518)"}, {"oid": "86a79f9d1cc6787255a59db8077d362f643676a1", "committedDate": "2020-08-10 15:29:17 +1200", "message": "Implemented Validator API method to subscribe to beacon committee (#2542)"}, {"oid": "40733fd5a07ae0509ef268eb80bca5e283b9b910", "committedDate": "2020-08-10 17:14:36 +1200", "message": "Added Validator API method to subscribe to subnets (#2544)"}, {"oid": "fe0dc3ed2cd8ea116637c0563e96b72d56282c44", "committedDate": "2020-08-11 20:31:57 +1000", "message": "Added attestation pool size tracking (#2514)"}, {"oid": "79c740c4025c03b8cbf2698da689563e2c81c65a", "committedDate": "2020-09-07 09:54:00 +1000", "message": "Add standard api endpoint for node syncing. (#2736)"}, {"oid": "7ae54ce384b67db9f4bd3e6a0d1cacf2d95cfec5", "committedDate": "2020-09-07 10:09:03 +1000", "message": "Add standard api endpoint for node health. (#2737)"}, {"oid": "5249caffd544f23a72d15a15d666c35af1601ac4", "committedDate": "2020-09-15 17:13:15 -0400", "message": "[Issue-2273] Add weak subjectivity cli options, refactor TekuConfiguration (#2801)"}, {"oid": "7094122df8dd4310a63e43a013b95ab1bd0dc341", "committedDate": "2020-09-25 12:45:39 +1000", "message": "implement `/eth/v1/events` endpoint (#2835)"}, {"oid": "478bec9e6ba4191f4407518752861d67f3fc5cdf", "committedDate": "2020-10-09 06:52:36 +1000", "message": "Abstract Event Subscribers and queue processing to a separate class (#2917)"}, {"oid": "e657ef55cbe6bd88e916dc6d355ced54560b2377", "committedDate": "2020-10-11 12:55:38 +1000", "message": "Use the BlockManager to import blocks sent via the REST API (#2932)"}, {"oid": "aa471b71213736786145403abfecdb82c741710d", "committedDate": "2020-11-04 14:29:18 -0500", "message": "Implement beacon pool API getters (#3095)"}, {"oid": "20cd2b2b11f07060b6f0aa5b67e4c74ffb888980", "committedDate": "2020-11-10 14:13:52 -0500", "message": "[Issue-3063] Consolidate sync service setup (#3185)"}, {"oid": "5cdcd7e82ad4eb1f20e4ed1f01ac117a8016dc12", "committedDate": "2020-11-11 16:16:34 +1000", "message": "Remove deprecated apis (#3168)"}, {"oid": "3f3fb35b80328b4738c59bdb7545ac9c54eabe99", "committedDate": "2020-12-11 15:02:47 +1000", "message": "move BeaconRestApi configuration out of GlobalConfiguration. (#3396)"}, {"oid": "4a67b162baaf552910cd9b7f7390f2c901e057f1", "committedDate": "2020-12-14 14:45:26 -0500", "message": "Add sync status to beacon node events (#3403)"}, {"oid": "23a2c731f6f2aa0d0b1cdb5ab6a6ce61b14fdc71", "committedDate": "2021-01-08 10:33:47 -0500", "message": "[Issue-2808] Migrate NetworkDefinition out of GlobalConfiguration (#3439)"}, {"oid": "d94672c45d415e9f56ffe4f1eba85b4b2bd01019", "committedDate": "2021-01-11 13:25:06 -0500", "message": "[Issue 3394] Move away from static constants (#3443)"}, {"oid": "e46a994c017fec91b87fd32e01a42a4a27279d23", "committedDate": "2021-01-21 17:34:43 -0500", "message": "Add block events to event streams (#3477)"}, {"oid": "5d6c6de8349a1824eefb16a24b2681bcf4dc1ad5", "committedDate": "2021-01-21 18:09:05 -0500", "message": "Add attestation events to event stream (#3478)"}, {"oid": "a91b2b854e9c165b2cb6f2e88513c8e693549a0e", "committedDate": "2021-02-19 11:53:14 +1300", "message": "Refactor SpecProvider construction (#3624)"}, {"oid": "f5693d9f83dda4fd4be30702eed12b67e3afa11d", "committedDate": "2021-02-25 17:08:23 -0500", "message": "[Issue 3658] Move datastructures into spec (#3665)"}, {"oid": "bee2b697d26f4ec8f32ff5fc2b31eea5ac1e7f42", "committedDate": "2021-03-01 16:00:15 -0500", "message": "[Issue 3356] Clean up spec classes (#3676)"}, {"oid": "1771fba5b735e8d94d93e1cac89e37ba460f21f7", "committedDate": "2021-04-13 08:39:16 +1200", "message": "[Refactor] Simplify Spec construction (#3848)"}, {"oid": "5bfd155225141ffb2a9835abff3663f6e7d35ed9", "committedDate": "2021-07-01 11:50:41 +1000", "message": "Remove EventBus (#4125)"}, {"oid": "9be241e89678631bb1a0abd5e36d9086b60d94b8", "committedDate": "2021-07-28 11:33:08 +1000", "message": "add contribution_and_proof events in the rest api. (#4189)"}, {"oid": "cb8446b4a1bde9d2d44d8ce0a53e3430777d44aa", "committedDate": "2021-10-18 15:17:52 +1000", "message": "Add a cache to track liveness of validators (#4489)"}, {"oid": "bdfdba885ae847c13e56ce37415ac30b9b634add", "committedDate": "2021-10-25 10:19:30 +1000", "message": "Update javalin to version 4 (#4498)"}, {"oid": "bd33d64995d724c305e40b0199974571ef8cc3e4", "committedDate": "2022-01-11 08:45:36 +1000", "message": "change DataProvider to use builder (#4844)"}, {"oid": "ae9a22d39f06f6f92cc3516d15e0d8a45f6c0e88", "committedDate": "2022-02-08 06:30:43 +1000", "message": "Move sync module into beacon directory (#4946)"}, {"oid": "402200ee4150e6386ce04a9ef73fec19ddad4cd9", "committedDate": "2022-03-30 15:28:30 +1000", "message": "Update GetNewBlindedBlock to use MigratingAdapter (#5250)"}, {"oid": "38a60ea76e14c240cbcecaccab1a4c4f8734b056", "committedDate": "2022-05-03 18:53:14 +1000", "message": "Add time based tolerance before disconnecting event streams (#5408)"}, {"oid": "11b316e1916a5cf248914221dc0620b1d881b443", "committedDate": "2022-05-17 19:42:24 +0200", "message": "Improve responsibility separation between `ForkChoiceNotifier` and `ProposerDataManager` (#5520)"}, {"oid": "c5761a74acd6f97e8b9bed392bc841692937236e", "committedDate": "2022-05-27 11:16:42 +0300", "message": "Debug endpoint with deposits not yet included on the BeaconChain (#5586)"}, {"oid": "a559b4dee1a2e82a97fee38a22de09737613fdf5", "committedDate": "2022-05-31 12:27:11 +0300", "message": "RestAPI endpoint with Eth1Data we'd put in proposed block (#5599)"}, {"oid": "3dc7ff3ebc1206b7779495c1ad7922f5a9d595a2", "committedDate": "2022-06-03 11:02:59 +0300", "message": "REST API endpoint with votes breakdown (#5626)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}, {"oid": "9c59379bded1a648230ebbcb9e6cbb90b6d0111e", "committedDate": "2022-06-19 13:48:33 +1000", "message": "fixed issue opening too many interfaces for rest-api (#5817)"}, {"oid": "b4d7c903c1f319d6e291a83ab516eb392216e466", "committedDate": "2022-06-28 16:26:18 +1200", "message": "Add beacon rest api option to toggle migration (#5854)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODE1MQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428151", "body": "```suggestion\r\n            description = \"Network identity of the node.\"),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        description = \"An object network identity of the node.\"),\n          \n          \n            \n                        description = \"Network identity of the node.\"),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            description <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">An object network</span> identity of the node.<span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            description <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\">Network</span> identity of the node.<span class=\"pl-pds\">\"</span></span>),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "macfarla", "createdAt": "2020-06-08T02:05:49Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.node;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_NODE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NetworkDataProvider;\n+import tech.pegasys.teku.api.response.v1.node.Identity;\n+import tech.pegasys.teku.api.response.v1.node.IdentityResponse;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetIdentity implements Handler {\n+  public static final String ROUTE = \"/v1/node/identity\";\n+  private final JsonProvider jsonProvider;\n+  private final NetworkDataProvider network;\n+\n+  public GetIdentity(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.network = provider.getNetworkDataProvider();\n+  }\n+\n+  GetIdentity(final NetworkDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.network = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Retrieves data about the node's network presence.\",\n+      tags = {TAG_V1_NODE},\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = IdentityResponse.class),\n+            description = \"An object network identity of the node.\"),", "originalCommit": "e35c353c6f50fe69763b4f74b401817aa718599e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\nindex 9adbb4731..5a45ac4ce 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n", "chunk": "@@ -52,13 +52,13 @@ public class GetIdentity implements Handler {\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Retrieves data about the node's network presence.\",\n+      summary = \"Retrieves data about the node's network identity.\",\n       tags = {TAG_V1_NODE},\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n             content = @OpenApiContent(from = IdentityResponse.class),\n-            description = \"An object network identity of the node.\"),\n+            description = \"The identifying information of the node.\"),\n         @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n         @OpenApiResponse(status = RES_INTERNAL_ERROR)\n       })\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\nindex 9adbb4731..5a45ac4ce 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n", "chunk": "@@ -52,13 +52,13 @@ public class GetIdentity implements Handler {\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Retrieves data about the node's network presence.\",\n+      summary = \"Retrieves data about the node's network identity.\",\n       tags = {TAG_V1_NODE},\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n             content = @OpenApiContent(from = IdentityResponse.class),\n-            description = \"An object network identity of the node.\"),\n+            description = \"The identifying information of the node.\"),\n         @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n         @OpenApiResponse(status = RES_INTERNAL_ERROR)\n       })\n", "next_change": {"commit": "6c155094e2e67447fb0853313b05af0fb0ad26a2", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\nindex 5a45ac4ce..36e5a0208 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n", "chunk": "@@ -52,14 +50,13 @@ public class GetIdentity implements Handler {\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Retrieves data about the node's network identity.\",\n+      summary = \"Retrieves data about the node's network presence.\",\n       tags = {TAG_V1_NODE},\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n             content = @OpenApiContent(from = IdentityResponse.class),\n             description = \"The identifying information of the node.\"),\n-        @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n         @OpenApiResponse(status = RES_INTERNAL_ERROR)\n       })\n   @Override\n", "next_change": {"commit": "b6e15bb7f15a25c2a494e513ae3af18b8dca2c75", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\nindex 36e5a0208..bdbe932b2 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n", "chunk": "@@ -60,15 +143,61 @@ public class GetIdentity implements Handler {\n         @OpenApiResponse(status = RES_INTERNAL_ERROR)\n       })\n   @Override\n-  public void handle(@NotNull final Context ctx) throws Exception {\n-    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n-    final Identity networkIdentity =\n-        new Identity(\n+  public void handle(final Context ctx) throws Exception {\n+    adapt(ctx);\n+  }\n+\n+  @Override\n+  public void handleRequest(final RestApiRequest request) throws JsonProcessingException {\n+    final IdentityData networkIdentity =\n+        new IdentityData(\n             network.getNodeIdAsBase58(),\n-            network.getEnr().orElse(\"\"),\n+            network.getEnr(),\n             network.getListeningAddresses(),\n             network.getDiscoveryAddresses(),\n             network.getMetadata());\n-    ctx.result(jsonProvider.objectToJSON(new IdentityResponse(networkIdentity)));\n+\n+    request.respondOk(networkIdentity, NO_CACHE);\n+  }\n+\n+  static class IdentityData {\n+    private final String peerId;\n+    private final Optional<String> enr;\n+    private final List<String> listeningAddresses;\n+    private final List<String> discoveryAddresses;\n+    private final MetadataMessage metadata;\n+\n+    IdentityData(\n+        final String peerId,\n+        final Optional<String> enr,\n+        final List<String> listeningAddresses,\n+        final List<String> discoveryAddresses,\n+        final MetadataMessage metadata) {\n+      this.peerId = peerId;\n+      this.enr = enr;\n+      this.listeningAddresses = listeningAddresses;\n+      this.discoveryAddresses = discoveryAddresses;\n+      this.metadata = metadata;\n+    }\n+\n+    public String getPeerId() {\n+      return peerId;\n+    }\n+\n+    public Optional<String> getEnr() {\n+      return enr;\n+    }\n+\n+    public List<String> getListeningAddresses() {\n+      return listeningAddresses;\n+    }\n+\n+    public List<String> getDiscoveryAddresses() {\n+      return discoveryAddresses;\n+    }\n+\n+    public MetadataMessage getMetadata() {\n+      return metadata;\n+    }\n   }\n }\n", "next_change": {"commit": "162a1a1e5386becc4cbe16d171dd2618ddf436c8", "changed_code": [{"header": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\nindex bdbe932b2..696eba27b 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java\n", "chunk": "@@ -199,5 +200,26 @@ public class GetIdentity extends MigratingEndpointAdapter {\n     public MetadataMessage getMetadata() {\n       return metadata;\n     }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      final IdentityData that = (IdentityData) o;\n+      return Objects.equals(peerId, that.peerId)\n+          && Objects.equals(enr, that.enr)\n+          && Objects.equals(listeningAddresses, that.listeningAddresses)\n+          && Objects.equals(discoveryAddresses, that.discoveryAddresses)\n+          && Objects.equals(metadata, that.metadata);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(peerId, enr, listeningAddresses, discoveryAddresses, metadata);\n+    }\n   }\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "6c155094e2e67447fb0853313b05af0fb0ad26a2", "committedDate": "2020-09-03 11:48:01 +1000", "message": "Update existing /v1 endpoints to their standard path (#2725)"}, {"oid": "80a96e44b353588f7ff3a0e260e5803b0542eda1", "committedDate": "2020-09-17 09:45:46 +1000", "message": "Ensure summaries are nice and short for rendering to published html. (#2810)"}, {"oid": "a539d657708646e437e930d9b9a5d8e9b8212d9b", "committedDate": "2021-02-12 08:47:59 +1000", "message": "move some utility functions in BeaconStateUtil and associated tests (#3577)"}, {"oid": "d9df4fe9217ac9d4420a2ea000cfc9bf5ec6c7ff", "committedDate": "2021-04-08 08:53:38 +1000", "message": "rename rest tags to remove v1 (#3833)"}, {"oid": "bdfdba885ae847c13e56ce37415ac30b9b634add", "committedDate": "2021-10-25 10:19:30 +1000", "message": "Update javalin to version 4 (#4498)"}, {"oid": "c5e555a35fa580e3631321cae0325627f5d877e5", "committedDate": "2021-10-28 17:27:00 +1000", "message": "Start a rest endpoint for validator-client key management (#4535)"}, {"oid": "b6e15bb7f15a25c2a494e513ae3af18b8dca2c75", "committedDate": "2022-03-09 09:38:36 +1000", "message": "Migrate GetIdentity REST API to new framework (#5116)"}, {"oid": "162a1a1e5386becc4cbe16d171dd2618ddf436c8", "committedDate": "2022-05-05 15:39:45 +1000", "message": "Add tests to node endpoints. (#5434)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}, {"oid": "1d9f98a6f323130539852008f0c3bab6cb73bc3f", "committedDate": "2022-11-02 14:13:09 +1000", "message": "Removing old API definitions (#6360)"}]}, {"oid": "2510896dfe61690eff8084d6ac93db54d5a47eb2", "url": "https://github.com/ConsenSys/teku/commit/2510896dfe61690eff8084d6ac93db54d5a47eb2", "message": " - added new endpoints to changelog\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T02:09:05Z", "type": "commit"}, {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "url": "https://github.com/ConsenSys/teku/commit/a7fc79eb0e2cbbdae01f1338ca687416880475ec", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T02:13:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzk3MQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436433971", "body": "You can't create a new instance of this as it won't actually pick up the right values.  Need to add a `getMetaData()` to `Eth2Network` (and the implementation will actually wind up having to delegate to `Eth2PeerManager`).  `NetworkDataProvider` can be given an `Eth2Network` instead of a `P2PNetwork` so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.", "bodyText": "You can't create a new instance of this as it won't actually pick up the right values.  Need to add a getMetaData() to Eth2Network (and the implementation will actually wind up having to delegate to Eth2PeerManager).  NetworkDataProvider can be given an Eth2Network instead of a P2PNetwork so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.", "bodyHTML": "<p dir=\"auto\">You can't create a new instance of this as it won't actually pick up the right values.  Need to add a <code>getMetaData()</code> to <code>Eth2Network</code> (and the implementation will actually wind up having to delegate to <code>Eth2PeerManager</code>).  <code>NetworkDataProvider</code> can be given an <code>Eth2Network</code> instead of a <code>P2PNetwork</code> so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.</p>", "author": "ajsutton", "createdAt": "2020-06-08T02:43:30Z", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -16,12 +16,15 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import tech.pegasys.teku.api.schema.Metadata;\n+import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n   private final P2PNetwork<?> p2pNetwork;\n+  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NjYwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436446601", "bodyText": "yep didnt think this bit was right, that's what i was stuck on - perfect.", "author": "rolfyone", "createdAt": "2020-06-08T04:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\nindex c2ba23cfd..7d0d28df9 100644\n--- a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n", "chunk": "@@ -17,17 +17,15 @@ import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import tech.pegasys.teku.api.schema.Metadata;\n-import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n-import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n-  private final P2PNetwork<?> p2pNetwork;\n-  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();\n+  private final Eth2Network network;\n \n-  public NetworkDataProvider(final P2PNetwork<?> p2pNetwork) {\n-    this.p2pNetwork = p2pNetwork;\n+  public NetworkDataProvider(final Eth2Network network) {\n+    this.network = network;\n   }\n \n   /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\nindex c2ba23cfd..7d0d28df9 100644\n--- a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n", "chunk": "@@ -17,17 +17,15 @@ import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import tech.pegasys.teku.api.schema.Metadata;\n-import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n-import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n-  private final P2PNetwork<?> p2pNetwork;\n-  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();\n+  private final Eth2Network network;\n \n-  public NetworkDataProvider(final P2PNetwork<?> p2pNetwork) {\n-    this.p2pNetwork = p2pNetwork;\n+  public NetworkDataProvider(final Eth2Network network) {\n+    this.network = network;\n   }\n \n   /**\n", "next_change": {"commit": "a91b2b854e9c165b2cb6f2e88513c8e693549a0e", "changed_code": [{"header": "diff --git a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\nindex 7d0d28df9..24e4f1f1b 100644\n--- a/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java\n", "chunk": "@@ -16,15 +16,17 @@ package tech.pegasys.teku.api;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import tech.pegasys.teku.api.response.v1.node.Direction;\n+import tech.pegasys.teku.api.response.v1.node.State;\n import tech.pegasys.teku.api.schema.Metadata;\n-import tech.pegasys.teku.networking.eth2.Eth2Network;\n+import tech.pegasys.teku.networking.eth2.Eth2P2PNetwork;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n-import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n-  private final Eth2Network network;\n+  private final Eth2P2PNetwork network;\n \n-  public NetworkDataProvider(final Eth2Network network) {\n+  public NetworkDataProvider(final Eth2P2PNetwork network) {\n     this.network = network;\n   }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "8aeb4a0fc98e827f45ac13bd6e63e541cae790c4", "committedDate": "2020-09-09 09:38:13 +1000", "message": "[2722] add GetPeers and GetPeersById api endpoints (#2748)"}, {"oid": "ef4c2b052ee32d9ae069dfe9f0a8c68a10bfc828", "committedDate": "2020-11-16 10:12:00 +1000", "message": "remove redundant code from api providers (#3227)"}, {"oid": "a91b2b854e9c165b2cb6f2e88513c8e693549a0e", "committedDate": "2021-02-19 11:53:14 +1300", "message": "Refactor SpecProvider construction (#3624)"}, {"oid": "f129043a9fdd6c8b1c5bf6fd64cdf6b4ba8ba73d", "committedDate": "2021-04-28 16:19:20 -0400", "message": "Make gossip scores available to users (#3885)"}, {"oid": "b6e15bb7f15a25c2a494e513ae3af18b8dca2c75", "committedDate": "2022-03-09 09:38:36 +1000", "message": "Migrate GetIdentity REST API to new framework (#5116)"}, {"oid": "3323f6b7d681c77f9ddb85d7fe4ca21aab802313", "committedDate": "2022-03-16 13:45:13 +1300", "message": "Migrate GetPeers endpoint to MigratingEndpointAdapter (#5184)"}, {"oid": "589bd8e616cb9d9ff7d4e5c5792cfad22f2b175d", "committedDate": "2022-03-22 17:24:41 +1300", "message": "Migrate GetPeerById to MigratingEndpointAdapter (#5219)"}, {"oid": "ddbdac96854135c60b6884b08d55a41fead850f3", "committedDate": "2022-06-06 09:25:34 +1000", "message": "Enable Error Prone's UnnecessarilyFullyQualified check (#5699)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}, {"oid": "88a52832f307f54760c242f239547a053fb1cea0", "committedDate": "2022-06-17 11:50:55 +1000", "message": "Migrate GetPeersScore to MigratingEndpointAdapter (#5800)"}, {"oid": "95dc4ce17c606f66f6d6a4f8c690955538731c71", "committedDate": "2022-09-22 02:13:00 +1000", "message": "Fix findings from pre-release errorprone (#6234)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNTAwMg==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436435002", "body": "The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.\r\n\r\nAlso `MultiaddrUtil` is currently designed just for TCP (hard codes `/tcp/` in the address) but discovery is UDP.", "bodyText": "The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.\nAlso MultiaddrUtil is currently designed just for TCP (hard codes /tcp/ in the address) but discovery is UDP.", "bodyHTML": "<p dir=\"auto\">The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.</p>\n<p dir=\"auto\">Also <code>MultiaddrUtil</code> is currently designed just for TCP (hard codes <code>/tcp/</code> in the address) but discovery is UDP.</p>", "author": "ajsutton", "createdAt": "2020-06-08T02:50:04Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -25,24 +28,29 @@\n import org.ethereum.beacon.discovery.schema.NodeStatus;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryPeer;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.teku.networking.p2p.libp2p.MultiaddrUtil;\n+import tech.pegasys.teku.networking.p2p.network.NetworkConfig;\n import tech.pegasys.teku.service.serviceutils.Service;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class DiscV5Service extends Service implements DiscoveryService {\n \n   private final DiscoverySystem discoverySystem;\n+  private final Multiaddr advertisedAddr;\n \n-  public DiscV5Service(final DiscoverySystem discoverySystem) {\n+  private DiscV5Service(final DiscoverySystem discoverySystem, NetworkConfig config) {\n     this.discoverySystem = discoverySystem;\n+    final byte[] nodeId = discoverySystem.getLocalNodeRecord().getNodeId().toArray();\n+    this.advertisedAddr = getAdvertisedAddr(config, nodeId);", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 28dcd1c61..5a023278a 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -36,12 +34,9 @@ import tech.pegasys.teku.util.async.SafeFuture;\n public class DiscV5Service extends Service implements DiscoveryService {\n \n   private final DiscoverySystem discoverySystem;\n-  private final Multiaddr advertisedAddr;\n \n-  private DiscV5Service(final DiscoverySystem discoverySystem, NetworkConfig config) {\n+  private DiscV5Service(final DiscoverySystem discoverySystem) {\n     this.discoverySystem = discoverySystem;\n-    final byte[] nodeId = discoverySystem.getLocalNodeRecord().getNodeId().toArray();\n-    this.advertisedAddr = getAdvertisedAddr(config, nodeId);\n   }\n \n   public static DiscoveryService create(NetworkConfig p2pConfig) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 28dcd1c61..5a023278a 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -36,12 +34,9 @@ import tech.pegasys.teku.util.async.SafeFuture;\n public class DiscV5Service extends Service implements DiscoveryService {\n \n   private final DiscoverySystem discoverySystem;\n-  private final Multiaddr advertisedAddr;\n \n-  private DiscV5Service(final DiscoverySystem discoverySystem, NetworkConfig config) {\n+  private DiscV5Service(final DiscoverySystem discoverySystem) {\n     this.discoverySystem = discoverySystem;\n-    final byte[] nodeId = discoverySystem.getLocalNodeRecord().getNodeId().toArray();\n-    this.advertisedAddr = getAdvertisedAddr(config, nodeId);\n   }\n \n   public static DiscoveryService create(NetworkConfig p2pConfig) {\n", "next_change": {"commit": "2c15538b7d778a4e04d226af8b554869c2a5ece8", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 5a023278a..2c34de653 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -24,29 +27,36 @@ import org.ethereum.beacon.discovery.schema.NodeRecord;\n import org.ethereum.beacon.discovery.schema.NodeRecordBuilder;\n import org.ethereum.beacon.discovery.schema.NodeRecordInfo;\n import org.ethereum.beacon.discovery.schema.NodeStatus;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryPeer;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryService;\n import tech.pegasys.teku.networking.p2p.libp2p.MultiaddrUtil;\n import tech.pegasys.teku.networking.p2p.network.NetworkConfig;\n import tech.pegasys.teku.service.serviceutils.Service;\n-import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.storage.store.KeyValueStore;\n \n public class DiscV5Service extends Service implements DiscoveryService {\n+  private static final String SEQ_NO_STORE_KEY = \"local-enr-seqno\";\n \n-  private final DiscoverySystem discoverySystem;\n-\n-  private DiscV5Service(final DiscoverySystem discoverySystem) {\n-    this.discoverySystem = discoverySystem;\n+  public static DiscoveryService create(\n+      NetworkConfig p2pConfig, KeyValueStore<String, Bytes> kvStore) {\n+    return new DiscV5Service(p2pConfig, kvStore);\n   }\n \n-  public static DiscoveryService create(NetworkConfig p2pConfig) {\n+  private final DiscoverySystem discoverySystem;\n+  private final KeyValueStore<String, Bytes> kvStore;\n+\n+  private DiscV5Service(NetworkConfig p2pConfig, KeyValueStore<String, Bytes> kvStore) {\n     final Bytes privateKey = Bytes.wrap(p2pConfig.getPrivateKey().raw());\n     final String listenAddress = p2pConfig.getNetworkInterface();\n     final int listenPort = p2pConfig.getListenPort();\n     final String advertisedAddress = p2pConfig.getAdvertisedIp();\n     final int advertisedPort = p2pConfig.getAdvertisedPort();\n     final List<String> bootnodes = p2pConfig.getBootnodes();\n-    final DiscoverySystem discoveryManager =\n+    final UInt64 seqNo =\n+        kvStore.get(SEQ_NO_STORE_KEY).map(UInt64::fromBytes).orElse(UInt64.ZERO).add(1);\n+    discoverySystem =\n         new DiscoverySystemBuilder()\n             .listen(listenAddress, listenPort)\n             .privateKey(privateKey)\n", "next_change": {"commit": "d9f35d751ccef653d34c27314d24ceeb8f17defc", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 2c34de653..130bd55f8 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -56,6 +57,8 @@ public class DiscV5Service extends Service implements DiscoveryService {\n     final List<String> bootnodes = p2pConfig.getBootnodes();\n     final UInt64 seqNo =\n         kvStore.get(SEQ_NO_STORE_KEY).map(UInt64::fromBytes).orElse(UInt64.ZERO).add(1);\n+    final NewAddressHandler maybeUpdateNodeRecordHandler =\n+        maybeUpdateNodeRecord(p2pConfig.hasUserExplicitlySetAdvertisedIp());\n     discoverySystem =\n         new DiscoverySystemBuilder()\n             .listen(listenAddress, listenPort)\n", "next_change": {"commit": "c78b01eb85612abd336aad0689119134a3add3ff", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 130bd55f8..812b2d6bb 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -41,20 +42,26 @@ public class DiscV5Service extends Service implements DiscoveryService {\n   private static final String SEQ_NO_STORE_KEY = \"local-enr-seqno\";\n \n   public static DiscoveryService create(\n-      NetworkConfig p2pConfig, KeyValueStore<String, Bytes> kvStore) {\n-    return new DiscV5Service(p2pConfig, kvStore);\n+      final DiscoveryConfig discoConfig,\n+      final NetworkConfig p2pConfig,\n+      final KeyValueStore<String, Bytes> kvStore,\n+      final Bytes privateKey) {\n+    return new DiscV5Service(discoConfig, p2pConfig, kvStore, privateKey);\n   }\n \n   private final DiscoverySystem discoverySystem;\n   private final KeyValueStore<String, Bytes> kvStore;\n \n-  private DiscV5Service(NetworkConfig p2pConfig, KeyValueStore<String, Bytes> kvStore) {\n-    final Bytes privateKey = Bytes.wrap(p2pConfig.getPrivateKey().raw());\n+  private DiscV5Service(\n+      final DiscoveryConfig discoConfig,\n+      NetworkConfig p2pConfig,\n+      KeyValueStore<String, Bytes> kvStore,\n+      final Bytes privateKey) {\n     final String listenAddress = p2pConfig.getNetworkInterface();\n     final int listenPort = p2pConfig.getListenPort();\n     final String advertisedAddress = p2pConfig.getAdvertisedIp();\n     final int advertisedPort = p2pConfig.getAdvertisedPort();\n-    final List<String> bootnodes = p2pConfig.getBootnodes();\n+    final List<String> bootnodes = discoConfig.getBootnodes();\n     final UInt64 seqNo =\n         kvStore.get(SEQ_NO_STORE_KEY).map(UInt64::fromBytes).orElse(UInt64.ZERO).add(1);\n     final NewAddressHandler maybeUpdateNodeRecordHandler =\n", "next_change": {"commit": "a95a0b0be03ac72c10520ba0ed5e8a68b2cd2e4e", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 812b2d6bb..546528b83 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -35,42 +40,48 @@ import tech.pegasys.teku.networking.p2p.discovery.DiscoveryService;\n import tech.pegasys.teku.networking.p2p.libp2p.MultiaddrUtil;\n import tech.pegasys.teku.networking.p2p.network.config.NetworkConfig;\n import tech.pegasys.teku.service.serviceutils.Service;\n-import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.spec.schemas.SchemaDefinitions;\n+import tech.pegasys.teku.spec.schemas.SchemaDefinitionsSupplier;\n import tech.pegasys.teku.storage.store.KeyValueStore;\n \n public class DiscV5Service extends Service implements DiscoveryService {\n+  private static final Logger LOG = LogManager.getLogger();\n   private static final String SEQ_NO_STORE_KEY = \"local-enr-seqno\";\n-\n-  public static DiscoveryService create(\n-      final DiscoveryConfig discoConfig,\n-      final NetworkConfig p2pConfig,\n-      final KeyValueStore<String, Bytes> kvStore,\n-      final Bytes privateKey) {\n-    return new DiscV5Service(discoConfig, p2pConfig, kvStore, privateKey);\n-  }\n+  private static final Duration BOOTNODE_REFRESH_DELAY = Duration.ofMinutes(2);\n+  private final AsyncRunner asyncRunner;\n+  private final SchemaDefinitionsSupplier currentSchemaDefinitionsSupplier;\n \n   private final DiscoverySystem discoverySystem;\n   private final KeyValueStore<String, Bytes> kvStore;\n+  private final List<NodeRecord> bootnodes;\n+  private volatile Cancellable bootnodeRefreshTask;\n \n-  private DiscV5Service(\n+  public DiscV5Service(\n+      final AsyncRunner asyncRunner,\n       final DiscoveryConfig discoConfig,\n-      NetworkConfig p2pConfig,\n-      KeyValueStore<String, Bytes> kvStore,\n-      final Bytes privateKey) {\n+      final NetworkConfig p2pConfig,\n+      final KeyValueStore<String, Bytes> kvStore,\n+      final Bytes privateKey,\n+      final SchemaDefinitionsSupplier currentSchemaDefinitionsSupplier) {\n+    this.asyncRunner = asyncRunner;\n+    this.currentSchemaDefinitionsSupplier = currentSchemaDefinitionsSupplier;\n     final String listenAddress = p2pConfig.getNetworkInterface();\n     final int listenPort = p2pConfig.getListenPort();\n     final String advertisedAddress = p2pConfig.getAdvertisedIp();\n     final int advertisedPort = p2pConfig.getAdvertisedPort();\n-    final List<String> bootnodes = discoConfig.getBootnodes();\n     final UInt64 seqNo =\n         kvStore.get(SEQ_NO_STORE_KEY).map(UInt64::fromBytes).orElse(UInt64.ZERO).add(1);\n     final NewAddressHandler maybeUpdateNodeRecordHandler =\n         maybeUpdateNodeRecord(p2pConfig.hasUserExplicitlySetAdvertisedIp());\n-    discoverySystem =\n+    this.bootnodes =\n+        discoConfig.getBootnodes().stream()\n+            .map(NodeRecordFactory.DEFAULT::fromEnr)\n+            .collect(Collectors.toList());\n+    this.discoverySystem =\n         new DiscoverySystemBuilder()\n             .listen(listenAddress, listenPort)\n             .privateKey(privateKey)\n-            .bootnodes(bootnodes.toArray(new String[0]))\n+            .bootnodes(bootnodes)\n             .localNodeRecord(\n                 new NodeRecordBuilder()\n                     .privateKey(privateKey)\n", "next_change": {"commit": "a3842d9b4830ea68cdb56540816412fa08f7395a", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 546528b83..149414c09 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -72,36 +79,44 @@ public class DiscV5Service extends Service implements DiscoveryService {\n     final UInt64 seqNo =\n         kvStore.get(SEQ_NO_STORE_KEY).map(UInt64::fromBytes).orElse(UInt64.ZERO).add(1);\n     final NewAddressHandler maybeUpdateNodeRecordHandler =\n-        maybeUpdateNodeRecord(p2pConfig.hasUserExplicitlySetAdvertisedIp());\n+        maybeUpdateNodeRecord(p2pConfig.hasUserExplicitlySetAdvertisedIp(), advertisedPort);\n     this.bootnodes =\n         discoConfig.getBootnodes().stream()\n             .map(NodeRecordFactory.DEFAULT::fromEnr)\n-            .collect(Collectors.toList());\n+            .collect(toList());\n+    final NodeRecordBuilder nodeRecordBuilder =\n+        new NodeRecordBuilder().privateKey(privateKey).seq(seqNo);\n+    if (p2pConfig.hasUserExplicitlySetAdvertisedIp()) {\n+      nodeRecordBuilder.address(advertisedAddress, advertisedPort);\n+    }\n+    final NodeRecord localNodeRecord = nodeRecordBuilder.build();\n     this.discoverySystem =\n         new DiscoverySystemBuilder()\n             .listen(listenAddress, listenPort)\n             .privateKey(privateKey)\n             .bootnodes(bootnodes)\n-            .localNodeRecord(\n-                new NodeRecordBuilder()\n-                    .privateKey(privateKey)\n-                    .address(advertisedAddress, advertisedPort)\n-                    .seq(seqNo)\n-                    .build())\n+            .localNodeRecord(localNodeRecord)\n             .newAddressHandler(maybeUpdateNodeRecordHandler)\n             .localNodeRecordListener(this::localNodeRecordUpdated)\n             .build();\n     this.kvStore = kvStore;\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.DISCOVERY,\n+        \"live_nodes_current\",\n+        \"Current number of live nodes tracked by the discovery system\",\n+        () -> discoverySystem.getBucketStats().getTotalLiveNodeCount());\n   }\n \n-  private NewAddressHandler maybeUpdateNodeRecord(boolean userExplicitlySetAdvertisedIpOrPort) {\n-    return (oldRecord, proposedNewRecord) -> {\n-      if (userExplicitlySetAdvertisedIpOrPort) {\n-        return Optional.of(oldRecord);\n-      } else {\n-        return Optional.of(proposedNewRecord);\n-      }\n-    };\n+  private NewAddressHandler maybeUpdateNodeRecord(\n+      boolean userExplicitlySetAdvertisedIpOrPort, final int advertisedTcpPort) {\n+    if (userExplicitlySetAdvertisedIpOrPort) {\n+      return (oldRecord, newAddress) -> Optional.of(oldRecord);\n+    } else {\n+      return (oldRecord, newAddress) ->\n+          Optional.of(\n+              oldRecord.withNewAddress(\n+                  newAddress, Optional.of(advertisedTcpPort), localNodePrivateKey));\n+    }\n   }\n \n   private void localNodeRecordUpdated(NodeRecord oldRecord, NodeRecord newRecord) {\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "3e9bc8a369b3a40383d0535183e8bb51ec0e723b", "committedDate": "2020-07-08 13:12:44 +1000", "message": "Add persistent subnets list to discovery peer (#2320)"}, {"oid": "6f8ec886cee6f68b6464d124ffe842ea62003e86", "committedDate": "2020-07-18 08:41:15 +1000", "message": "Extract a separate async module (#2370)"}, {"oid": "2c15538b7d778a4e04d226af8b554869c2a5ece8", "committedDate": "2020-09-04 17:45:09 +0300", "message": "Persist discv5 local seqno and generated p2p private key (#2715)"}, {"oid": "d9f35d751ccef653d34c27314d24ceeb8f17defc", "committedDate": "2021-01-20 16:49:14 -0500", "message": "Disable automatic IP detection if user explicitly set advertised IP (#3474)"}, {"oid": "c78b01eb85612abd336aad0689119134a3add3ff", "committedDate": "2021-01-27 11:48:40 -0500", "message": "Refactor p2p-related configuration (#3487)"}, {"oid": "5dc0f4ce432c489d6a95331042613b1c595d3f79", "committedDate": "2021-02-18 12:20:57 +0300", "message": "Implement SszBitvector (#3611)"}, {"oid": "3044df72e94782b7407c0c3d911fd3875ac8e95d", "committedDate": "2021-03-16 20:51:45 +0300", "message": "Rename `tech.pegasys.teku.ssz.backing.*` packages to `tech.pegasys.teku.ssz.*` (remove `backing`) (#3727)"}, {"oid": "cae995ba584dc3df694ed054e6dc78b92869cc09", "committedDate": "2021-05-17 19:32:24 +0100", "message": "[Issue 3925] Search for peers on required sync committee subnets (#3989)"}, {"oid": "a95a0b0be03ac72c10520ba0ed5e8a68b2cd2e4e", "committedDate": "2021-07-03 08:57:03 +1000", "message": "Periodically ping bootnodes (#4131)"}, {"oid": "6ed09d8521e867e04944f390320666531ecc4444", "committedDate": "2021-07-27 18:57:39 +1000", "message": "Upgrade discovery to 0.4.8 (#4185)"}, {"oid": "a3842d9b4830ea68cdb56540816412fa08f7395a", "committedDate": "2021-08-05 07:21:04 +1000", "message": "Only advertise address in ENR when external address is known (#4212)"}, {"oid": "75b34d1d3c3b2fd6fda02b9e1a777016d488b743", "committedDate": "2021-10-14 08:24:16 +1000", "message": "Support different ports for tcp and udp (#4480)"}, {"oid": "6f468778bdec33d3974941e7d23ac27db9bc18fd", "committedDate": "2021-10-16 14:00:24 +1000", "message": "Increase delay between pinging bootnodes (#4490)"}, {"oid": "4a94938d041584660d6a3059ebe3445e1e589b58", "committedDate": "2021-10-18 10:26:33 +1000", "message": "Update discovery to handle timed out handshakes (#4497)"}, {"oid": "6b5d530cf7cb00527aeaef5a472eab64f2011c78", "committedDate": "2021-12-15 12:19:01 +0100", "message": "[Java API] Make DiscV5Service construction more customizable (#4789)"}, {"oid": "335a1b7dafb0f65f07e234c94489089b5f36cf61", "committedDate": "2022-03-30 17:44:13 +1000", "message": "Fix a lot of naming convention violations. (#5256)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}, {"oid": "608409383bb1a31a223d2a11bcb98c53b656788b", "committedDate": "2022-11-03 14:16:01 +1000", "message": "Update to discovery 22.11.1 (#6364)"}, {"oid": "dd84a2c5130134715f1ed49d63aee6a1343aa558", "committedDate": "2022-12-22 19:09:23 +1000", "message": "Add option to reject discovery traffic from site local addresses (#6631)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTUwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436439501", "body": "It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:\r\n```\r\nfinal NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\r\nif (nodeRecord.getUdpAddress().isEmpty() {\r\n  return Optional.empty();\r\n}\r\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\r\n\r\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/\r\n```", "bodyText": "It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:\nfinal NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/", "bodyHTML": "<p dir=\"auto\">It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/\"><pre><code>final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/\n</code></pre></div>", "author": "ajsutton", "createdAt": "2020-06-08T03:17:55Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -83,6 +91,21 @@ public static DiscoveryService create(\n     return Optional.of(discoverySystem.getLocalNodeRecord().asEnr());\n   }\n \n+  @Override\n+  public Optional<String> getDiscoveryAddress() {\n+    return Optional.of(advertisedAddr.toString());", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTg3Ng==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436439876", "bodyText": "You just can't use the resulting multiaddr for anything useful because you don't have the public key of the node record and this will actually wind up including a hash of the public key.", "author": "ajsutton", "createdAt": "2020-06-08T03:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 28dcd1c61..5a023278a 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -93,17 +88,17 @@ public class DiscV5Service extends Service implements DiscoveryService {\n \n   @Override\n   public Optional<String> getDiscoveryAddress() {\n-    return Optional.of(advertisedAddr.toString());\n-  }\n-\n-  private Multiaddr getAdvertisedAddr(NetworkConfig config, final byte[] nodeId) {\n-    try {\n-      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);\n-      return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n-    } catch (UnknownHostException err) {\n-      throw new RuntimeException(\n-          \"Unable to start discovery node due to failed attempt at obtaining host address\", err);\n+    final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\n+    if (nodeRecord.getUdpAddress().isEmpty()) {\n+      return Optional.empty();\n     }\n+    final DiscoveryPeer discoveryPeer =\n+        new DiscoveryPeer(\n+            (Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1),\n+            nodeRecord.getUdpAddress().get(),\n+            Optional.empty());\n+\n+    return Optional.of(MultiaddrUtil.fromDiscoveryPeerAsUdp(discoveryPeer).toString());\n   }\n \n   @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 28dcd1c61..5a023278a 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -93,17 +88,17 @@ public class DiscV5Service extends Service implements DiscoveryService {\n \n   @Override\n   public Optional<String> getDiscoveryAddress() {\n-    return Optional.of(advertisedAddr.toString());\n-  }\n-\n-  private Multiaddr getAdvertisedAddr(NetworkConfig config, final byte[] nodeId) {\n-    try {\n-      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);\n-      return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n-    } catch (UnknownHostException err) {\n-      throw new RuntimeException(\n-          \"Unable to start discovery node due to failed attempt at obtaining host address\", err);\n+    final NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\n+    if (nodeRecord.getUdpAddress().isEmpty()) {\n+      return Optional.empty();\n     }\n+    final DiscoveryPeer discoveryPeer =\n+        new DiscoveryPeer(\n+            (Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1),\n+            nodeRecord.getUdpAddress().get(),\n+            Optional.empty());\n+\n+    return Optional.of(MultiaddrUtil.fromDiscoveryPeerAsUdp(discoveryPeer).toString());\n   }\n \n   @Override\n", "next_change": {"commit": "3e9bc8a369b3a40383d0535183e8bb51ec0e723b", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 5a023278a..48e97ce07 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -96,7 +99,8 @@ public class DiscV5Service extends Service implements DiscoveryService {\n         new DiscoveryPeer(\n             (Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1),\n             nodeRecord.getUdpAddress().get(),\n-            Optional.empty());\n+            Optional.empty(),\n+            new Bitvector(ATTESTATION_SUBNET_COUNT));\n \n     return Optional.of(MultiaddrUtil.fromDiscoveryPeerAsUdp(discoveryPeer).toString());\n   }\n", "next_change": {"commit": "5dc0f4ce432c489d6a95331042613b1c595d3f79", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 48e97ce07..759bf81a9 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -100,7 +137,7 @@ public class DiscV5Service extends Service implements DiscoveryService {\n             (Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1),\n             nodeRecord.getUdpAddress().get(),\n             Optional.empty(),\n-            new Bitvector(ATTESTATION_SUBNET_COUNT));\n+            SUBNET_SUBSCRIPTIONS_SCHEMA.getDefault());\n \n     return Optional.of(MultiaddrUtil.fromDiscoveryPeerAsUdp(discoveryPeer).toString());\n   }\n", "next_change": {"commit": "cae995ba584dc3df694ed054e6dc78b92869cc09", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\nindex 759bf81a9..dac9a1245 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java\n", "chunk": "@@ -137,7 +142,8 @@ public class DiscV5Service extends Service implements DiscoveryService {\n             (Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1),\n             nodeRecord.getUdpAddress().get(),\n             Optional.empty(),\n-            SUBNET_SUBSCRIPTIONS_SCHEMA.getDefault());\n+            currentSchemaDefinitionsSupplier.getAttnetsENRFieldSchema().getDefault(),\n+            currentSchemaDefinitionsSupplier.getSyncnetsENRFieldSchema().getDefault());\n \n     return Optional.of(MultiaddrUtil.fromDiscoveryPeerAsUdp(discoveryPeer).toString());\n   }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "3e9bc8a369b3a40383d0535183e8bb51ec0e723b", "committedDate": "2020-07-08 13:12:44 +1000", "message": "Add persistent subnets list to discovery peer (#2320)"}, {"oid": "6f8ec886cee6f68b6464d124ffe842ea62003e86", "committedDate": "2020-07-18 08:41:15 +1000", "message": "Extract a separate async module (#2370)"}, {"oid": "2c15538b7d778a4e04d226af8b554869c2a5ece8", "committedDate": "2020-09-04 17:45:09 +0300", "message": "Persist discv5 local seqno and generated p2p private key (#2715)"}, {"oid": "d9f35d751ccef653d34c27314d24ceeb8f17defc", "committedDate": "2021-01-20 16:49:14 -0500", "message": "Disable automatic IP detection if user explicitly set advertised IP (#3474)"}, {"oid": "c78b01eb85612abd336aad0689119134a3add3ff", "committedDate": "2021-01-27 11:48:40 -0500", "message": "Refactor p2p-related configuration (#3487)"}, {"oid": "5dc0f4ce432c489d6a95331042613b1c595d3f79", "committedDate": "2021-02-18 12:20:57 +0300", "message": "Implement SszBitvector (#3611)"}, {"oid": "3044df72e94782b7407c0c3d911fd3875ac8e95d", "committedDate": "2021-03-16 20:51:45 +0300", "message": "Rename `tech.pegasys.teku.ssz.backing.*` packages to `tech.pegasys.teku.ssz.*` (remove `backing`) (#3727)"}, {"oid": "cae995ba584dc3df694ed054e6dc78b92869cc09", "committedDate": "2021-05-17 19:32:24 +0100", "message": "[Issue 3925] Search for peers on required sync committee subnets (#3989)"}, {"oid": "a95a0b0be03ac72c10520ba0ed5e8a68b2cd2e4e", "committedDate": "2021-07-03 08:57:03 +1000", "message": "Periodically ping bootnodes (#4131)"}, {"oid": "6ed09d8521e867e04944f390320666531ecc4444", "committedDate": "2021-07-27 18:57:39 +1000", "message": "Upgrade discovery to 0.4.8 (#4185)"}, {"oid": "a3842d9b4830ea68cdb56540816412fa08f7395a", "committedDate": "2021-08-05 07:21:04 +1000", "message": "Only advertise address in ENR when external address is known (#4212)"}, {"oid": "75b34d1d3c3b2fd6fda02b9e1a777016d488b743", "committedDate": "2021-10-14 08:24:16 +1000", "message": "Support different ports for tcp and udp (#4480)"}, {"oid": "6f468778bdec33d3974941e7d23ac27db9bc18fd", "committedDate": "2021-10-16 14:00:24 +1000", "message": "Increase delay between pinging bootnodes (#4490)"}, {"oid": "4a94938d041584660d6a3059ebe3445e1e589b58", "committedDate": "2021-10-18 10:26:33 +1000", "message": "Update discovery to handle timed out handshakes (#4497)"}, {"oid": "6b5d530cf7cb00527aeaef5a472eab64f2011c78", "committedDate": "2021-12-15 12:19:01 +0100", "message": "[Java API] Make DiscV5Service construction more customizable (#4789)"}, {"oid": "335a1b7dafb0f65f07e234c94489089b5f36cf61", "committedDate": "2022-03-30 17:44:13 +1000", "message": "Fix a lot of naming convention violations. (#5256)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}, {"oid": "608409383bb1a31a223d2a11bcb98c53b656788b", "committedDate": "2022-11-03 14:16:01 +1000", "message": "Update to discovery 22.11.1 (#6364)"}, {"oid": "dd84a2c5130134715f1ed49d63aee6a1343aa558", "committedDate": "2022-12-22 19:09:23 +1000", "message": "Add option to reject discovery traffic from site local addresses (#6631)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MTQ1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436441456", "body": "I'm not convinced this code belongs in `MultiaddrUtil` - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.", "bodyText": "I'm not convinced this code belongs in MultiaddrUtil - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.", "bodyHTML": "<p dir=\"auto\">I'm not convinced this code belongs in <code>MultiaddrUtil</code> - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.</p>", "author": "ajsutton", "createdAt": "2020-06-08T03:30:06Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -224,15 +223,7 @@ private Gossip createGossip() {\n \n   private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n     try {\n-      final InetSocketAddress advertisedAddress =\n-          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-      final InetSocketAddress resolvedAddress;\n-      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-        resolvedAddress =\n-            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-      } else {\n-        resolvedAddress = advertisedAddress;\n-      }\n+      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\nindex 67f70bd36..b5947e6a5 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n", "chunk": "@@ -223,7 +224,15 @@ public class LibP2PNetwork implements P2PNetwork<Peer> {\n \n   private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n     try {\n-      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);\n+      final InetSocketAddress advertisedAddress =\n+          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n+      final InetSocketAddress resolvedAddress;\n+      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n+        resolvedAddress =\n+            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n+      } else {\n+        resolvedAddress = advertisedAddress;\n+      }\n       return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n     } catch (UnknownHostException err) {\n       throw new RuntimeException(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\nindex 67f70bd36..b5947e6a5 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n", "chunk": "@@ -223,7 +224,15 @@ public class LibP2PNetwork implements P2PNetwork<Peer> {\n \n   private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n     try {\n-      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);\n+      final InetSocketAddress advertisedAddress =\n+          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n+      final InetSocketAddress resolvedAddress;\n+      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n+        resolvedAddress =\n+            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n+      } else {\n+        resolvedAddress = advertisedAddress;\n+      }\n       return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n     } catch (UnknownHostException err) {\n       throw new RuntimeException(\n", "next_change": {"commit": "5380e888871def02e4541c0f2ca8cba1f37d2c8d", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\nindex b5947e6a5..ff3c0b19f 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java\n", "chunk": "@@ -222,24 +215,6 @@ public class LibP2PNetwork implements P2PNetwork<Peer> {\n             });\n   }\n \n-  private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n-    try {\n-      final InetSocketAddress advertisedAddress =\n-          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-      final InetSocketAddress resolvedAddress;\n-      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-        resolvedAddress =\n-            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-      } else {\n-        resolvedAddress = advertisedAddress;\n-      }\n-      return MultiaddrUtil.fromInetSocketAddress(resolvedAddress, nodeId);\n-    } catch (UnknownHostException err) {\n-      throw new RuntimeException(\n-          \"Unable to start LibP2PNetwork due to failed attempt at obtaining host address\", err);\n-    }\n-  }\n-\n   @Override\n   public String getNodeAddress() {\n     return advertisedAddr.toString();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "19a751709efc907705f6ccd18048244f123e851c", "committedDate": "2020-06-19 07:09:44 +1000", "message": "Switch to using an explicit executor for async runner (#2150)"}, {"oid": "5380e888871def02e4541c0f2ca8cba1f37d2c8d", "committedDate": "2020-06-30 15:14:01 +1000", "message": "Resolve the address used in the local ENR if it is an any local address (#2265)"}, {"oid": "2ab946939baf88a736a7b84dec1efc2222803cd3", "committedDate": "2020-07-07 20:40:56 +1000", "message": "Publish attestations when not subscribed to the topic (#2324)"}, {"oid": "ff8db8acb8aab4bf77b9ee61ed0a780d384c3c08", "committedDate": "2020-07-09 10:34:02 +1000", "message": "Prioritise based on attestation subnets when connecting and disconnecting peers (#2326)"}, {"oid": "6f8ec886cee6f68b6464d124ffe842ea62003e86", "committedDate": "2020-07-18 08:41:15 +1000", "message": "Extract a separate async module (#2370)"}, {"oid": "0ceb6738a76b9b70c5d7f47de6625b7575b7bac3", "committedDate": "2020-07-21 18:28:01 +0100", "message": "Add issue numbers to all TODOs (#2413)"}, {"oid": "c1962578656d0b3861193c5aaf3f0959e6d72052", "committedDate": "2020-07-30 06:44:14 +1000", "message": "remove TODO from libP2PNetwork (#2474)"}, {"oid": "4c4a83bed7420442d045865e5388c58f2e6f8db2", "committedDate": "2020-07-31 02:47:43 +0300", "message": "Add libp2p connection Firewall (#2478)"}, {"oid": "25bf7117cdabe4b73227b253343d20842abe0e6c", "committedDate": "2020-08-18 08:41:49 +1000", "message": "Removed secIO support (#2595)"}, {"oid": "9af2adb4b2c0577d8ebb99908b5038b41b05456b", "committedDate": "2020-08-26 15:54:45 +1000", "message": "Remove todo about reporting external IP. (#2656)"}, {"oid": "994997f8208ee0b74d7becaacda23c0d496d0a37", "committedDate": "2020-09-03 08:19:45 +1000", "message": "Enable gossip 1.1 flood publish option (#2717)"}, {"oid": "0a0c69f9fb3586d5058fb5d2793f83b7590f01dd", "committedDate": "2020-09-06 11:41:11 +1000", "message": "Make infrastructure explicit in module structure (#2731)"}, {"oid": "10bba8e80b14528329a9a7054dd4287147723e15", "committedDate": "2020-09-08 19:51:25 +0300", "message": "Make optional Gossip message fields empty for outbound messages  (#2752)"}, {"oid": "8aeb4a0fc98e827f45ac13bd6e63e541cae790c4", "committedDate": "2020-09-09 09:38:13 +1000", "message": "[2722] add GetPeers and GetPeersById api endpoints (#2748)"}, {"oid": "16cbeb63c794702fd1e055342a2ae901d8c93ef9", "committedDate": "2020-09-14 14:35:16 -0400", "message": "Send goodbye message to peers on shutdown (#2743)"}, {"oid": "c5650d6eb8d4c9cd3793a347695efff41518e6b1", "committedDate": "2020-10-14 21:07:17 +0300", "message": "Enforce StrictNoSign on gossip messages (#2960)"}, {"oid": "2e85af0c962d9e24f40142614b7d317e44e073e6", "committedDate": "2020-10-23 06:08:33 +1000", "message": "Track peer reputation score during sync (#3049)"}, {"oid": "da1df22b9921f7418e2c7c386b07f9adddc8ef4a", "committedDate": "2020-10-29 11:28:20 +1000", "message": "Add metrics to record number of messages received per gossip topic (#3107)"}, {"oid": "a63f8a79819cf444ae49ae9dd8cc466ecfc5267e", "committedDate": "2020-11-10 00:57:34 +0300", "message": "Upgrade libp2p to version 0.5.8 (#2983)"}, {"oid": "c96dbda6e7e57a8aae16c173a7d0d542711ef976", "committedDate": "2020-11-13 15:06:44 +0300", "message": "Implement v1.0.0 message ID calculation (#3188)"}, {"oid": "e66336f14e839d1468941baf4bf64e329e82a719", "committedDate": "2020-12-22 14:32:03 -0500", "message": "Merge pull request from GHSA-4cpw-7xvx-2pf8"}, {"oid": "367cd28ec5a039a69c8ccb8f57ed978e829d4b84", "committedDate": "2021-01-26 08:20:34 +1000", "message": "Move more code out of util (#3484)"}, {"oid": "c78b01eb85612abd336aad0689119134a3add3ff", "committedDate": "2021-01-27 11:48:40 -0500", "message": "Refactor p2p-related configuration (#3487)"}, {"oid": "6505c1748af870a8155689a4f63b6d4a855e0b36", "committedDate": "2021-02-09 03:03:33 +1000", "message": "Upgrade jvm-libp2p to version 0.7.0 (#3553)"}, {"oid": "4053683507cc4d3d8b628d5f9c342864b3fe7bb5", "committedDate": "2021-02-10 13:29:39 -0500", "message": "[Issue 3457] Customize gossip params (#3534)"}, {"oid": "5efa7b70e5b1853b636a765cd35b1cf62bf64d5d", "committedDate": "2021-02-10 15:52:14 -0500", "message": "Revert \"[Issue 3457] Customize gossip params (#3534)\" (#3574)"}, {"oid": "b3e9d6f476c313da66cc95f586c3eb8e7783c63f", "committedDate": "2021-02-11 09:29:38 -0500", "message": "[Issue 3457] Customize gossip scoring params (#3576)"}, {"oid": "40726d1deed536eb7e6cf64a5310981c091ba873", "committedDate": "2021-03-18 09:02:14 +1000", "message": "Add Mplex firewall (#3738)"}, {"oid": "faf564cd0e1271189b6a19308b354589b567fe2e", "committedDate": "2021-04-22 03:03:25 +1000", "message": "[Issue 3732] Refactor RPC interfaces to prep for versioning (#3888)"}, {"oid": "f129043a9fdd6c8b1c5bf6fd64cdf6b4ba8ba73d", "committedDate": "2021-04-28 16:19:20 -0400", "message": "Make gossip scores available to users (#3885)"}, {"oid": "e1babe557eddab3e6a7c3afb0a9eb65615efad62", "committedDate": "2021-12-09 12:54:45 +0300", "message": "[Java API] Customize Network building  (#4763)"}, {"oid": "84bc64e144fa3049075a2fca46d422b3e91c5199", "committedDate": "2021-12-13 11:39:54 +0300", "message": "[Java API] Add some more facades and accessors  (#4779)"}, {"oid": "b3a4b3f0dc211510c42232dc31b66bb567d5bd9b", "committedDate": "2022-02-25 08:55:06 +1000", "message": "[Java API] Small network builder refactor to make it more extensible (#5050)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MTgwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436441805", "body": "We should avoid using `byte[]` for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  `NodeId` is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.", "bodyText": "We should avoid using byte[] for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  NodeId is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.", "bodyHTML": "<p dir=\"auto\">We should avoid using <code>byte[]</code> for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  <code>NodeId</code> is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.</p>", "author": "ajsutton", "createdAt": "2020-06-08T03:31:57Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "diffHunk": "@@ -45,10 +48,33 @@ public static Multiaddr fromInetSocketAddress(\n     return addPeerId(fromInetSocketAddress(address), nodeId);\n   }\n \n+  public static InetSocketAddress getResolvedInetSocketAddress(NetworkConfig config)\n+      throws UnknownHostException {\n+    final InetSocketAddress advertisedAddress =\n+        new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n+    final InetSocketAddress resolvedAddress;\n+    if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n+      resolvedAddress =\n+          new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n+    } else {\n+      resolvedAddress = advertisedAddress;\n+    }\n+    return resolvedAddress;\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(\n+      final InetSocketAddress address, final byte[] nodeId) {", "originalCommit": "a7fc79eb0e2cbbdae01f1338ca687416880475ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 407df1e03..0b17d6e1c 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -33,48 +30,35 @@ public class MultiaddrUtil {\n     return fromInetSocketAddress(peer.getNodeAddress(), getNodeId(peer));\n   }\n \n+  public static Multiaddr fromDiscoveryPeerAsUdp(final DiscoveryPeer peer) {\n+    return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n+  }\n+\n   public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+    return fromInetSocketAddress(address, \"tcp\");\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(\n+      final InetSocketAddress address, final String protocol) {\n     final String addrString =\n         String.format(\n-            \"/%s/%s/tcp/%d\",\n+            \"/%s/%s/%s/%d\",\n             protocol(address.getAddress()),\n             address.getAddress().getHostAddress(),\n+            protocol,\n             address.getPort());\n     return Multiaddr.fromString(addrString);\n   }\n \n   public static Multiaddr fromInetSocketAddress(\n       final InetSocketAddress address, final NodeId nodeId) {\n-    return addPeerId(fromInetSocketAddress(address), nodeId);\n-  }\n-\n-  public static InetSocketAddress getResolvedInetSocketAddress(NetworkConfig config)\n-      throws UnknownHostException {\n-    final InetSocketAddress advertisedAddress =\n-        new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-    final InetSocketAddress resolvedAddress;\n-    if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-      resolvedAddress =\n-          new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-    } else {\n-      resolvedAddress = advertisedAddress;\n-    }\n-    return resolvedAddress;\n-  }\n-\n-  public static Multiaddr fromInetSocketAddress(\n-      final InetSocketAddress address, final byte[] nodeId) {\n-    return addPeerId(fromInetSocketAddress(address), nodeId);\n+    return addPeerId(fromInetSocketAddress(address, \"tcp\"), nodeId);\n   }\n \n   private static Multiaddr addPeerId(final Multiaddr addr, final NodeId nodeId) {\n     return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + nodeId.toBase58()));\n   }\n \n-  private static Multiaddr addPeerId(final Multiaddr addr, final byte[] nodeId) {\n-    return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + Base58.INSTANCE.encode(nodeId)));\n-  }\n-\n   private static LibP2PNodeId getNodeId(final DiscoveryPeer peer) {\n     final PubKey pubKey = unmarshalSecp256k1PublicKey(peer.getPublicKey().toArrayUnsafe());\n     return new LibP2PNodeId(PeerId.fromPubKey(pubKey));\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 407df1e03..025a86c29 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -33,48 +30,34 @@ public class MultiaddrUtil {\n     return fromInetSocketAddress(peer.getNodeAddress(), getNodeId(peer));\n   }\n \n-  public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+  public static Multiaddr fromDiscoveryPeerAsUdp(final DiscoveryPeer peer) {\n+    return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n+  }\n+\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+    return fromInetSocketAddress(address, \"tcp\");\n+  }\n+\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address, final String protocol) {\n     final String addrString =\n         String.format(\n-            \"/%s/%s/tcp/%d\",\n+            \"/%s/%s/%s/%d\",\n             protocol(address.getAddress()),\n             address.getAddress().getHostAddress(),\n+            protocol,\n             address.getPort());\n     return Multiaddr.fromString(addrString);\n   }\n \n   public static Multiaddr fromInetSocketAddress(\n       final InetSocketAddress address, final NodeId nodeId) {\n-    return addPeerId(fromInetSocketAddress(address), nodeId);\n-  }\n-\n-  public static InetSocketAddress getResolvedInetSocketAddress(NetworkConfig config)\n-      throws UnknownHostException {\n-    final InetSocketAddress advertisedAddress =\n-        new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-    final InetSocketAddress resolvedAddress;\n-    if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-      resolvedAddress =\n-          new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-    } else {\n-      resolvedAddress = advertisedAddress;\n-    }\n-    return resolvedAddress;\n-  }\n-\n-  public static Multiaddr fromInetSocketAddress(\n-      final InetSocketAddress address, final byte[] nodeId) {\n-    return addPeerId(fromInetSocketAddress(address), nodeId);\n+    return addPeerId(fromInetSocketAddress(address, \"tcp\"), nodeId);\n   }\n \n   private static Multiaddr addPeerId(final Multiaddr addr, final NodeId nodeId) {\n     return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + nodeId.toBase58()));\n   }\n \n-  private static Multiaddr addPeerId(final Multiaddr addr, final byte[] nodeId) {\n-    return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + Base58.INSTANCE.encode(nodeId)));\n-  }\n-\n   private static LibP2PNodeId getNodeId(final DiscoveryPeer peer) {\n     final PubKey pubKey = unmarshalSecp256k1PublicKey(peer.getPublicKey().toArrayUnsafe());\n     return new LibP2PNodeId(PeerId.fromPubKey(pubKey));\n", "next_change": {"commit": "664848613b3d8f3d26bb52eed5009a0ea44eb0b5", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 025a86c29..2244508c5 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -55,7 +55,7 @@ public class MultiaddrUtil {\n   }\n \n   private static Multiaddr addPeerId(final Multiaddr addr, final NodeId nodeId) {\n-    return new Multiaddr(addr, Multiaddr.fromString(\"/p2p/\" + nodeId.toBase58()));\n+    return addr.withP2P(PeerId.fromBase58(nodeId.toBase58()));\n   }\n \n   private static LibP2PNodeId getNodeId(final DiscoveryPeer peer) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "664848613b3d8f3d26bb52eed5009a0ea44eb0b5", "committedDate": "2022-01-25 14:29:58 +1000", "message": "Update jvm-libp2p to 0.8.8 (#4904)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}]}, {"oid": "2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "url": "https://github.com/ConsenSys/teku/commit/2d078ae97033ce800c4b5dec7dcd6c5d7382d3b2", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T04:59:24Z", "type": "commit"}, {"oid": "5c011e135dfbf8c76657a777976016518f2a61df", "url": "https://github.com/ConsenSys/teku/commit/5c011e135dfbf8c76657a777976016518f2a61df", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T21:13:48Z", "type": "commit"}, {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "url": "https://github.com/ConsenSys/teku/commit/b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T21:50:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437029757", "body": "We should probably make this return `Optional` or this is going to create a lot of surprises when p2p is disabled.", "bodyText": "We should probably make this return Optional or this is going to create a lot of surprises when p2p is disabled.", "bodyHTML": "<p dir=\"auto\">We should probably make this return <code>Optional</code> or this is going to create a lot of surprises when p2p is disabled.</p>", "author": "ajsutton", "createdAt": "2020-06-08T22:11:26Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "diffHunk": "@@ -27,4 +28,9 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {}\n \n   @Override\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {}\n+\n+  @Override\n+  public MetadataMessage getMetadata() {\n+    return null;", "originalCommit": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTk0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437029947", "bodyText": "Alternatively this can probably just return sequence 1 and all zeros for the subscribed subnets which is probably better.", "author": "ajsutton", "createdAt": "2020-06-08T22:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTY5MA==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437041690", "bodyText": "ok, there's a MetadataMessage.createDefault() which creates sequence 0 and all 0's for subscribed, so i've called that here. hopefully sequence 0 is fine...", "author": "rolfyone", "createdAt": "2020-06-08T22:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0Mjk1Mw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437042953", "bodyText": "Yep, using that is a better idea. :)", "author": "ajsutton", "createdAt": "2020-06-08T22:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "changed_code": [{"header": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\nindex 75b4db4eb..c3dbd1f15 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n", "chunk": "@@ -31,6 +31,6 @@ public class NoOpEth2Network extends MockP2PNetwork<Eth2Peer> implements Eth2Net\n \n   @Override\n   public MetadataMessage getMetadata() {\n-    return null;\n+    return MetadataMessage.createDefault();\n   }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\nindex 75b4db4eb..c3dbd1f15 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n", "chunk": "@@ -31,6 +31,6 @@ public class NoOpEth2Network extends MockP2PNetwork<Eth2Peer> implements Eth2Net\n \n   @Override\n   public MetadataMessage getMetadata() {\n-    return null;\n+    return MetadataMessage.createDefault();\n   }\n }\n", "next_change": {"commit": "7b75896a8a2420cd32ba9a11f1a5ca8f67ee829d", "changed_code": [{"header": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\nindex c3dbd1f15..3ef1ce4c0 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java\n", "chunk": "@@ -31,6 +31,6 @@ public class NoOpEth2Network extends MockP2PNetwork<Eth2Peer> implements Eth2Net\n \n   @Override\n   public MetadataMessage getMetadata() {\n-    return MetadataMessage.createDefault();\n+    return MetadataMessage.DEFAULT;\n   }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "7b75896a8a2420cd32ba9a11f1a5ca8f67ee829d", "committedDate": "2021-02-04 12:20:00 +0300", "message": " Moving all SSZ containers to backing structures (part 2) (#3426)"}, {"oid": "a91b2b854e9c165b2cb6f2e88513c8e693549a0e", "committedDate": "2021-02-19 11:53:14 +1300", "message": "Refactor SpecProvider construction (#3624)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMDM2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437030367", "body": "nit: I'm be tempted to make this private and just have the two `fromDiscoveryPeer` methods use it internally.", "bodyText": "nit: I'm be tempted to make this private and just have the two fromDiscoveryPeer methods use it internally.", "bodyHTML": "<p dir=\"auto\">nit: I'm be tempted to make this private and just have the two <code>fromDiscoveryPeer</code> methods use it internally.</p>", "author": "ajsutton", "createdAt": "2020-06-08T22:13:09Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "diffHunk": "@@ -30,19 +30,29 @@ public static Multiaddr fromDiscoveryPeer(final DiscoveryPeer peer) {\n     return fromInetSocketAddress(peer.getNodeAddress(), getNodeId(peer));\n   }\n \n+  public static Multiaddr fromDiscoveryPeerAsUdp(final DiscoveryPeer peer) {\n+    return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n+  }\n+\n   public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+    return fromInetSocketAddress(address, \"tcp\");\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(", "originalCommit": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 0b17d6e1c..025a86c29 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -34,12 +34,11 @@ public class MultiaddrUtil {\n     return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n   }\n \n-  public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n     return fromInetSocketAddress(address, \"tcp\");\n   }\n \n-  public static Multiaddr fromInetSocketAddress(\n-      final InetSocketAddress address, final String protocol) {\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address, final String protocol) {\n     final String addrString =\n         String.format(\n             \"/%s/%s/%s/%d\",\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0c2c0f607fe33939c7551abd935953b99b9989a8", "changed_code": [{"header": "diff --git a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\nindex 0b17d6e1c..025a86c29 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java\n", "chunk": "@@ -34,12 +34,11 @@ public class MultiaddrUtil {\n     return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n   }\n \n-  public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n     return fromInetSocketAddress(address, \"tcp\");\n   }\n \n-  public static Multiaddr fromInetSocketAddress(\n-      final InetSocketAddress address, final String protocol) {\n+  static Multiaddr fromInetSocketAddress(final InetSocketAddress address, final String protocol) {\n     final String addrString =\n         String.format(\n             \"/%s/%s/%s/%d\",\n", "next_change": null}]}, "commits_in_main": [{"oid": "0c2c0f607fe33939c7551abd935953b99b9989a8", "message": "Merge commit", "committedDate": null}, {"oid": "664848613b3d8f3d26bb52eed5009a0ea44eb0b5", "committedDate": "2022-01-25 14:29:58 +1000", "message": "Update jvm-libp2p to 0.8.8 (#4904)"}, {"oid": "ce6e13e32f2c5029aa05895f400c00a9c72a3f38", "committedDate": "2022-06-11 20:08:55 +1000", "message": "Update copyright notice on all files (#5769)"}]}, {"oid": "90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "url": "https://github.com/ConsenSys/teku/commit/90f10d4e865ccaf3e806c1ff1f05b7dd07907ba1", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-08T22:26:33Z", "type": "commit"}, {"oid": "46f45984cac4e3483a84baf8098cda873b876069", "url": "https://github.com/ConsenSys/teku/commit/46f45984cac4e3483a84baf8098cda873b876069", "message": "Merge remote-tracking branch 'upstream/master' into v1-rest", "committedDate": "2020-06-08T22:44:49Z", "type": "commit"}]}