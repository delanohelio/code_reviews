{"pr_number": 2782, "pr_title": "2756 implement /eth/v1/validator/duties/attester/:epoch", "pr_author": "rolfyone", "pr_createdAt": "2020-09-11T04:32:38Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2782", "timeline": [{"oid": "9f3bb354d71129469175dc5dc662defc613ead64", "url": "https://github.com/ConsenSys/teku/commit/9f3bb354d71129469175dc5dc662defc613ead64", "message": "WIP\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-10T21:18:28Z", "type": "commit"}, {"oid": "bfce0b19f6da1e9fcd36a021b79a958182a9a28d", "url": "https://github.com/ConsenSys/teku/commit/bfce0b19f6da1e9fcd36a021b79a958182a9a28d", "message": "Merge remote-tracking branch 'upstream/master' into 2756-validator-attester-duties", "committedDate": "2020-09-10T21:18:52Z", "type": "commit"}, {"oid": "910ee2ed0f9e1d5e3d3b0ed08c1c38949f34bfd9", "url": "https://github.com/ConsenSys/teku/commit/910ee2ed0f9e1d5e3d3b0ed08c1c38949f34bfd9", "message": "WIP\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-11T02:07:59Z", "type": "commit"}, {"oid": "dde62e3a768c664d35c948a0f5b12cc3d9a49e67", "url": "https://github.com/ConsenSys/teku/commit/dde62e3a768c664d35c948a0f5b12cc3d9a49e67", "message": "Merge remote-tracking branch 'upstream/master' into 2756-validator-attester-duties", "committedDate": "2020-09-11T02:08:10Z", "type": "commit"}, {"oid": "0ea1df9b2459704fb4ebb061765c9731c8dcc480", "url": "https://github.com/ConsenSys/teku/commit/0ea1df9b2459704fb4ebb061765c9731c8dcc480", "message": "provider GetAttesterDuties\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-11T04:30:36Z", "type": "commit"}, {"oid": "56a2011a5cb78629627799a71d43187875016db8", "url": "https://github.com/ConsenSys/teku/commit/56a2011a5cb78629627799a71d43187875016db8", "message": "unit test for endpoint\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-11T06:32:01Z", "type": "commit"}, {"oid": "608570a08e833ddacca3e9e4eaf2d20c7496dc0e", "url": "https://github.com/ConsenSys/teku/commit/608570a08e833ddacca3e9e4eaf2d20c7496dc0e", "message": "Merge remote-tracking branch 'upstream/master' into 2756-validator-attester-duties", "committedDate": "2020-09-13T20:56:46Z", "type": "commit"}, {"oid": "d635a04cfff9c807e4382c97075bb6e822b6e81b", "url": "https://github.com/ConsenSys/teku/commit/d635a04cfff9c807e4382c97075bb6e822b6e81b", "message": "test cases, cleanup\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-13T23:05:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMDgwMg==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487600802", "body": "I'm pretty sure this isn't called anywhere currently, because the empty list would cause problems...\r\nI'm not overly concerned, but when we switch to using this remote implementation it'll need to be resolved.", "bodyText": "I'm pretty sure this isn't called anywhere currently, because the empty list would cause problems...\nI'm not overly concerned, but when we switch to using this remote implementation it'll need to be resolved.", "bodyHTML": "<p dir=\"auto\">I'm pretty sure this isn't called anywhere currently, because the empty list would cause problems...<br>\nI'm not overly concerned, but when we switch to using this remote implementation it'll need to be resolved.</p>", "author": "rolfyone", "createdAt": "2020-09-14T00:44:49Z", "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "diffHunk": "@@ -96,6 +97,31 @@ private ForkInfo mapGetForkResponse(final GetForkResponse response) {\n         });\n   }\n \n+  @Override\n+  public SafeFuture<Optional<List<ValidatorDuties>>> getAttestationDuties(\n+      final UInt64 epoch, final Collection<Integer> validatorIndexes) {\n+    return asyncRunner.runAsync(\n+        () -> {\n+          final List<ValidatorDuties> validatorDuties =\n+              apiClient.getAttestationDuties(epoch, validatorIndexes).stream()\n+                  .map(this::mapToApiValidatorDuties)\n+                  .collect(Collectors.toList());\n+\n+          return Optional.of(validatorDuties);\n+        });\n+  }\n+\n+  private ValidatorDuties mapToApiValidatorDuties(final AttesterDuty attesterDuty) {\n+    return ValidatorDuties.withDuties(\n+        attesterDuty.pubkey.asBLSPublicKey(),\n+        attesterDuty.validatorIndex.intValue(),\n+        attesterDuty.committeeIndex.intValue(),\n+        attesterDuty.validatorCommitteeIndex.intValue(),\n+        attesterDuty.committeeLength.intValue(),\n+        List.of(),\n+        attesterDuty.slot);", "originalCommit": "d635a04cfff9c807e4382c97075bb6e822b6e81b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMTM1Mw==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487611353", "bodyText": "This would work out better if we split ValidatorDuties into separate parts.", "author": "ajsutton", "createdAt": "2020-09-14T01:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMDgwMg=="}], "type": "inlineReview"}, {"oid": "f6465244d23b49a5a0d034e288594578144308b7", "url": "https://github.com/ConsenSys/teku/commit/f6465244d23b49a5a0d034e288594578144308b7", "message": "not ready to deprecate this endpoint, as only partially replaced by the attestation duties endpoint.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-14T00:52:19Z", "type": "commit"}, {"oid": "ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "url": "https://github.com/ConsenSys/teku/commit/ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "message": "Merge remote-tracking branch 'upstream/master' into 2756-validator-attester-duties", "committedDate": "2020-09-14T00:54:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNDY3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487604673", "body": "Slightly confused that we treat `,` as an item separator for int lists but not for string lists.  Shouldn't we be consistent?\r\n\r\nOr maybe this method should just be private?", "bodyText": "Slightly confused that we treat , as an item separator for int lists but not for string lists.  Shouldn't we be consistent?\nOr maybe this method should just be private?", "bodyHTML": "<p dir=\"auto\">Slightly confused that we treat <code>,</code> as an item separator for int lists but not for string lists.  Shouldn't we be consistent?</p>\n<p dir=\"auto\">Or maybe this method should just be private?</p>", "author": "ajsutton", "createdAt": "2020-09-14T01:10:55Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi;\n+\n+import com.google.common.base.Splitter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ListQueryParameterUtils {\n+  public static final String MISSING_QUERY_PARAMETER = \"Query parameter %s not found\";\n+  public static final Splitter splitter = Splitter.on(',').trimResults().omitEmptyStrings();\n+\n+  public static List<String> validateQueryParameter(\n+      final Map<String, List<String>> parameterMap, final String key)\n+      throws IllegalArgumentException {\n+    if (parameterMap.containsKey(key)) {\n+      final List<String> values = parameterMap.get(key);\n+      if (values.isEmpty()) {\n+        throw new IllegalArgumentException(String.format(MISSING_QUERY_PARAMETER, key));\n+      }\n+      // if its an array, we should filter any individual empty values out for sanity\n+      return parameterMap.get(key).stream()\n+          .filter(StringUtils::isNotEmpty)\n+          .collect(Collectors.toList());", "originalCommit": "ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNTkxOQ==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487615919", "bodyText": "made private", "author": "rolfyone", "createdAt": "2020-09-14T02:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNDY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjE0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487606147", "body": "Wes should check the future is actually completed first so we don't hang forever:\r\n```suggestion\r\n    assertThat(future).isCompleted();\r\n    String data = future.join();\r\n```\r\n\r\nThen using `join` instead of `get` will let you drop most of the declared exceptions.", "bodyText": "Wes should check the future is actually completed first so we don't hang forever:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String data = future.get();\n          \n          \n            \n                assertThat(future).isCompleted();\n          \n          \n            \n                String data = future.join();\n          \n      \n    \n    \n  \n\nThen using join instead of get will let you drop most of the declared exceptions.", "bodyHTML": "<p dir=\"auto\">Wes should check the future is actually completed first so we don't hang forever:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi x x-first\">String</span><span class=\"x\"> data </span><span class=\"pl-k x\">=</span><span class=\"x x-last\"> </span>future<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">get</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"x x-first x-last\">assertThat(</span>future<span class=\"x x-first\">)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isCompleted</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">String</span> data <span class=\"pl-k\">=</span> future<span class=\"pl-k\">.</span>join();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Then using <code>join</code> instead of <code>get</code> will let you drop most of the declared exceptions.</p>", "author": "ajsutton", "createdAt": "2020-09-14T01:18:51Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/AbstractBeaconHandlerTest.java", "diffHunk": "@@ -57,6 +63,14 @@ protected void verifyStatusCode(final int statusCode) {\n     return jsonProvider.jsonToObject(val, clazz);\n   }\n \n+  protected <T> T getResponseFromFuture(Class<T> clazz)\n+      throws ExecutionException, InterruptedException, JsonProcessingException {\n+    verify(context).result(args.capture());\n+    SafeFuture<String> future = args.getValue();\n+    String data = future.get();", "originalCommit": "ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjM1OQ==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487606359", "body": "We seem to only be testing the integer method, not `validateQueryParameter`.", "bodyText": "We seem to only be testing the integer method, not validateQueryParameter.", "bodyHTML": "<p dir=\"auto\">We seem to only be testing the integer method, not <code>validateQueryParameter</code>.</p>", "author": "ajsutton", "createdAt": "2020-09-14T01:19:55Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtilsTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Test;\n+\n+public class ListQueryParameterUtilsTest {", "originalCommit": "ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjgwMg==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487606802", "body": "Wouldn't `Optional.empty()` mean the data is unavailable? Should we be returning `Optional.of(emptyList())`? ie we have supplied all the requested data, there just isn't any.", "bodyText": "Wouldn't Optional.empty() mean the data is unavailable? Should we be returning Optional.of(emptyList())? ie we have supplied all the requested data, there just isn't any.", "bodyHTML": "<p dir=\"auto\">Wouldn't <code>Optional.empty()</code> mean the data is unavailable? Should we be returning <code>Optional.of(emptyList())</code>? ie we have supplied all the requested data, there just isn't any.</p>", "author": "ajsutton", "createdAt": "2020-09-14T01:22:26Z", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ValidatorDataProvider.java", "diffHunk": "@@ -215,4 +216,32 @@ public void subscribeToPersistentSubnets(final List<SubnetSubscription> subnetSu\n                 .collect(Collectors.toSet());\n     validatorApiChannel.subscribeToPersistentSubnets(internalSubnetSubscriptions);\n   }\n+\n+  public SafeFuture<Optional<List<AttesterDuty>>> getAttesterDuties(\n+      final UInt64 epoch, final List<Integer> indexes) {\n+    if (indexes.isEmpty()) {\n+      return SafeFuture.completedFuture(Optional.empty());", "originalCommit": "ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNjE1Mw==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487616153", "bodyText": "We could do that, I had that earlier and changed it when i was testing, but i'll update the test.", "author": "rolfyone", "createdAt": "2020-09-14T02:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMTIzNQ==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487611235", "body": "This method seems to be converting from index, to public key, then a couple of levels down `getValidatorDutiesFromState` converts from public key back to index.\r\n\r\nGiven we don't need the proposal slots it could just call `createValidatorDuties` directly and pass an empty map for the proposal slots. Ideally though we'd split the internal representation of `ValidatorDuties` in two so internally we calculate attestations and proposals separately, then for the existing API we combine them at the API layer.  Currently we're calculating proposer duties when the get attestations endpoint is called.", "bodyText": "This method seems to be converting from index, to public key, then a couple of levels down getValidatorDutiesFromState converts from public key back to index.\nGiven we don't need the proposal slots it could just call createValidatorDuties directly and pass an empty map for the proposal slots. Ideally though we'd split the internal representation of ValidatorDuties in two so internally we calculate attestations and proposals separately, then for the existing API we combine them at the API layer.  Currently we're calculating proposer duties when the get attestations endpoint is called.", "bodyHTML": "<p dir=\"auto\">This method seems to be converting from index, to public key, then a couple of levels down <code>getValidatorDutiesFromState</code> converts from public key back to index.</p>\n<p dir=\"auto\">Given we don't need the proposal slots it could just call <code>createValidatorDuties</code> directly and pass an empty map for the proposal slots. Ideally though we'd split the internal representation of <code>ValidatorDuties</code> in two so internally we calculate attestations and proposals separately, then for the existing API we combine them at the API layer.  Currently we're calculating proposer duties when the get attestations endpoint is called.</p>", "author": "ajsutton", "createdAt": "2020-09-14T01:45:28Z", "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -325,6 +346,16 @@ private boolean headBlockIsTooFarBehind() {\n     return headEpoch.plus(1).isLessThan(currentEpoch);\n   }\n \n+  private List<ValidatorDuties> getValidatorDutiesFromIndexes(\n+      final BeaconState state, final UInt64 epoch, final Collection<Integer> validatorIndexes) {\n+    List<BLSPublicKey> publicKeys =\n+        validatorIndexes.stream()\n+            .map(index -> state.getValidators().get(index))\n+            .map(Validator::getPubkey)\n+            .collect(toList());\n+    return getValidatorDutiesFromState(state, epoch, publicKeys);\n+  }", "originalCommit": "ff516b5f8ebbca4fc5502d8ba575bcd50496fc0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "07629784c49f3f36f31df7d1c4cbc6f4cf75757d", "url": "https://github.com/ConsenSys/teku/commit/07629784c49f3f36f31df7d1c4cbc6f4cf75757d", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-14T04:00:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0MTQxMQ==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487641411", "body": "nit:\r\n```suggestion\r\n    assertThatSafeFuture(future).isCompletedWithEmptyOptional();\r\n```", "bodyText": "nit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(future).isCompleted();\n          \n          \n            \n                Optional<List<AttesterDuty>> maybeData = future.join();\n          \n          \n            \n                assertThat(maybeData.isPresent()).isTrue();\n          \n          \n            \n                assertThat(maybeData.get()).isEmpty();\n          \n          \n            \n                assertThatSafeFuture(future).isCompletedWithEmptyOptional();", "bodyHTML": "<p dir=\"auto\">nit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"372\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(future)<span class=\"pl-k\">.</span>isCompleted();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"373\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">Optional&lt;<span class=\"pl-k\">List&lt;<span class=\"pl-smi\">AttesterDuty</span>&gt;</span>&gt;</span> maybeData <span class=\"pl-k\">=</span> future<span class=\"pl-k\">.</span>join();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"374\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(maybeData<span class=\"pl-k\">.</span>isPresent())<span class=\"pl-k\">.</span>isTrue();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"375\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    assertThat(maybeData<span class=\"pl-k\">.</span>get())<span class=\"pl-k\">.</span>isEmpty();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"372\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    assertThatSafeFuture(future)<span class=\"pl-k\">.</span>isCompletedWithEmptyOptional();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-09-14T04:11:09Z", "path": "data/provider/src/test/java/tech/pegasys/teku/api/ValidatorDataProviderTest.java", "diffHunk": "@@ -363,6 +365,53 @@ public void submitSignedBlock_shouldReturn500ForInternalError()\n     assertThat(validatorBlockResultSafeFuture.get().getResponseCode()).isEqualTo(500);\n   }\n \n+  @Test\n+  public void getAttesterDuties_shouldHandleEmptyIndexesList() {\n+    final SafeFuture<Optional<List<AttesterDuty>>> future =\n+        provider.getAttesterDuties(UInt64.ONE, List.of());\n+    assertThat(future).isCompleted();\n+    Optional<List<AttesterDuty>> maybeData = future.join();\n+    assertThat(maybeData.isPresent()).isTrue();\n+    assertThat(maybeData.get()).isEmpty();", "originalCommit": "07629784c49f3f36f31df7d1c4cbc6f4cf75757d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0MTY3Ng==", "url": "https://github.com/ConsenSys/teku/pull/2782#discussion_r487641676", "body": "This is way into the personal preference category but I tend to use `Collections.emptyMap()` over `Map.of()` as it reads better. Works either way though.", "bodyText": "This is way into the personal preference category but I tend to use Collections.emptyMap() over Map.of() as it reads better. Works either way though.", "bodyHTML": "<p dir=\"auto\">This is way into the personal preference category but I tend to use <code>Collections.emptyMap()</code> over <code>Map.of()</code> as it reads better. Works either way though.</p>", "author": "ajsutton", "createdAt": "2020-09-14T04:12:36Z", "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -345,6 +365,24 @@ private ValidatorDuties getDutiesForValidator(\n         .orElseGet(() -> ValidatorDuties.noDuties(key));\n   }\n \n+  private List<ValidatorDuties> getValidatorDutiesFromIndexes(\n+      final BeaconState state, final UInt64 epoch, final Collection<Integer> validatorIndexes) {\n+    return validatorIndexes.stream()\n+        .map(index -> createValidatorDuties(state, epoch, index))\n+        .collect(toList());\n+  }\n+\n+  private ValidatorDuties createValidatorDuties(\n+      final BeaconState state, final UInt64 epoch, final Integer validatorIndex) {\n+    try {\n+      BLSPublicKey pkey = state.getValidators().get(validatorIndex).getPubkey();\n+      return createValidatorDuties(Map.of(), pkey, state, epoch, validatorIndex);", "originalCommit": "07629784c49f3f36f31df7d1c4cbc6f4cf75757d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e66c41098c9fa7a4b9824f7d44727feed31cab38", "url": "https://github.com/ConsenSys/teku/commit/e66c41098c9fa7a4b9824f7d44727feed31cab38", "message": "Update data/provider/src/test/java/tech/pegasys/teku/api/ValidatorDataProviderTest.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>", "committedDate": "2020-09-14T04:19:30Z", "type": "commit"}, {"oid": "f32946154fd015db1e32e4370db37b1217b5aa02", "url": "https://github.com/ConsenSys/teku/commit/f32946154fd015db1e32e4370db37b1217b5aa02", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-14T04:26:22Z", "type": "commit"}, {"oid": "a41d40b30b56372b221fe5dffd6581a0bffae46a", "url": "https://github.com/ConsenSys/teku/commit/a41d40b30b56372b221fe5dffd6581a0bffae46a", "message": "missing dependency\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-14T04:33:09Z", "type": "commit"}, {"oid": "2ae12ff6bf40d1030a10da28ee7203349ed76d48", "url": "https://github.com/ConsenSys/teku/commit/2ae12ff6bf40d1030a10da28ee7203349ed76d48", "message": "revert suggestion, it broke the test.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-14T04:40:30Z", "type": "commit"}, {"oid": "4f497cf19bb37a39df4b54fb9ea46a3bd76b587b", "url": "https://github.com/ConsenSys/teku/commit/4f497cf19bb37a39df4b54fb9ea46a3bd76b587b", "message": "revert suggestion, it broke the test.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-09-14T05:03:19Z", "type": "commit"}]}