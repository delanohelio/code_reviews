{"pr_number": 2563, "pr_title": "[issue 2003] added a new option to load keystore files in bulk", "pr_author": "rolfyone", "pr_createdAt": "2020-08-12T02:09:45Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2563", "timeline": [{"oid": "3e59cfe7a7a7b6af662c3f12c044c170399884da", "url": "https://github.com/ConsenSys/teku/commit/3e59cfe7a7a7b6af662c3f12c044c170399884da", "message": "WIP\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-12T00:00:49Z", "type": "commit"}, {"oid": "eb2b9c9c8ee5c08d4dc3feb699f07036bd4646ff", "url": "https://github.com/ConsenSys/teku/commit/eb2b9c9c8ee5c08d4dc3feb699f07036bd4646ff", "message": "Merge remote-tracking branch 'upstream/master' into 2003-keys-directory", "committedDate": "2020-08-12T00:01:07Z", "type": "commit"}, {"oid": "7d2fa560d4e3809ceb6f8c2285befbf0e6cd7cb2", "url": "https://github.com/ConsenSys/teku/commit/7d2fa560d4e3809ceb6f8c2285befbf0e6cd7cb2", "message": "added a new option to load keystore files in bulk\n\n - `--validator-keys` takes a path separated list of paths to allow bulk loading of key files and password files\n\n - each pair keyDir:passDir (separated by ; on windows)  will be loaded as one logical grouping of key and password files.\n\n - the file locator looks for json files if a directory was passed in, and matches all json files with a .txt password file in the password path.\n\n Fixes #2003\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-12T02:06:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NDY0Mw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r468964643", "body": "@bgravenorst wondering if I could get some help explaining this? It's currently pretty long, and you might have ideas about how i can clean it up", "bodyText": "@bgravenorst wondering if I could get some help explaining this? It's currently pretty long, and you might have ideas about how i can clean it up", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bgravenorst/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bgravenorst\">@bgravenorst</a> wondering if I could get some help explaining this? It's currently pretty long, and you might have ideas about how i can clean it up</p>", "author": "rolfyone", "createdAt": "2020-08-12T02:11:45Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -20,12 +20,25 @@\n import tech.pegasys.teku.util.cli.GraffitiConverter;\n \n public class ValidatorOptions {\n+  @Option(\n+      names = {\"--validator-keys\"},\n+      paramLabel = \"<KEY_PATH>:<PASS_PATH>\",\n+      description =\n+          \"Where KEY_PATH is either a directory or file, and PASS_PATH is the associated password path. \"\n+              + \"keysDir:passDir will find keysDir/**.json, and expect to find passDir/**.txt. \"\n+              + \"keyFile:passFile will expect that the file 'keyFile' exists, \"\n+              + \"and the file containing the password for it is 'passFile'. \"\n+              + \"The path separator is operating system dependent, and should be ';' in windows rather than ':'.\",", "originalCommit": "7d2fa560d4e3809ceb6f8c2285befbf0e6cd7cb2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3192baf115162757ee8bda174908001ab04ce807", "url": "https://github.com/ConsenSys/teku/commit/3192baf115162757ee8bda174908001ab04ce807", "message": "Merge remote-tracking branch 'upstream/master' into 2003-keys-directory", "committedDate": "2020-08-12T02:58:34Z", "type": "commit"}, {"oid": "a2877192f859317636e697c9ca1ec55953e73d71", "url": "https://github.com/ConsenSys/teku/commit/a2877192f859317636e697c9ca1ec55953e73d71", "message": "update command line options description.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-12T03:59:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzg2NA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469003864", "body": "Can we initialise this to `new ArrayList<>()` so that it's always non-null?", "bodyText": "Can we initialise this to new ArrayList<>() so that it's always non-null?", "bodyHTML": "<p dir=\"auto\">Can we initialise this to <code>new ArrayList&lt;&gt;()</code> so that it's always non-null?</p>", "author": "ajsutton", "createdAt": "2020-08-12T04:52:38Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -20,12 +20,24 @@\n import tech.pegasys.teku.util.cli.GraffitiConverter;\n \n public class ValidatorOptions {\n+  @Option(\n+      names = {\"--validator-keys\"},\n+      paramLabel = \"<KEY_DIR>:<PASS_DIR> | <KEY_FILE>:<PASS_FILE>\",\n+      description =\n+          \"<KEY_DIR>:<PASS_DIR> will find <KEY_DIR>/**.json, and expect to find <PASS_DIR>/**.txt.\\n\"\n+              + \"<KEY_FILE>:<PASS_FILE> will expect that the file <KEY_FILE> exists, \"\n+              + \"and the file containing the password for it is <PASS_FILE>.\\n\"\n+              + \"The path separator is operating system dependent, and should be ';' in windows rather than ':'.\",\n+      split = \",\",\n+      arity = \"1..*\")\n+  private List<String> validatorKeys;", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDIyMQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469004221", "body": "And can we then make this just take `List<String>`?  `Optional<List>` is better avoided unless there's some important difference between empty and not set.", "bodyText": "And can we then make this just take List<String>?  Optional<List> is better avoided unless there's some important difference between empty and not set.", "bodyHTML": "<p dir=\"auto\">And can we then make this just take <code>List&lt;String&gt;</code>?  <code>Optional&lt;List&gt;</code> is better avoided unless there's some important difference between empty and not set.</p>", "author": "ajsutton", "createdAt": "2020-08-12T04:54:08Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxMTc3NA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469511774", "bodyText": "this was purely because the cmdline was giving me a null and i figured null checks were going to get me pinged...", "author": "rolfyone", "createdAt": "2020-08-12T20:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNTA5OA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469005098", "body": "This isn't using the file separator char correctly.  Suspect we can just drop this check and just use the first instance of the separator to split the parts.  If there are multiple separators it's likely to be rejected because the password isn't found but if it happens to work out that's ok.", "bodyText": "This isn't using the file separator char correctly.  Suspect we can just drop this check and just use the first instance of the separator to split the parts.  If there are multiple separators it's likely to be rejected because the password isn't found but if it happens to work out that's ok.", "bodyHTML": "<p dir=\"auto\">This isn't using the file separator char correctly.  Suspect we can just drop this check and just use the first instance of the separator to split the parts.  If there are multiple separators it's likely to be rejected because the password isn't found but if it happens to work out that's ok.</p>", "author": "ajsutton", "createdAt": "2020-08-12T04:57:22Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxMjE0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469512149", "bodyText": "eep that's a good find, i thought i got everywhere.", "author": "rolfyone", "createdAt": "2020-08-12T20:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNTA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNTUxMw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469005513", "body": "This would then be \r\n```suggestion\r\n      final List<String> entry = Splitter.on(pathSeparator).limit(2).splitToList(currentEntry);\r\n      parseEntry(entry.get(0), entry.get(1));\r\n```", "bodyText": "This would then be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n          \n          \n            \n                  parseEntry(entry.get(0), entry.get(1));\n          \n          \n            \n                  final List<String> entry = Splitter.on(pathSeparator).limit(2).splitToList(currentEntry);\n          \n          \n            \n                  parseEntry(entry.get(0), entry.get(1));", "bodyHTML": "<p dir=\"auto\">This would then be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span> entry <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Splitter</span><span class=\"pl-k\">.</span>on(pathSeparator)<span class=\"pl-k\">.</span>splitToList(currentEntry);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      parseEntry(entry<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>), entry<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">1</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span> entry <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Splitter</span><span class=\"pl-k\">.</span>on(pathSeparator)<span class=\"pl-k\">.</span><span class=\"x x-first\">limit(</span><span class=\"pl-c1 x\">2</span><span class=\"x\">)</span><span class=\"pl-k x x-last\">.</span>splitToList(currentEntry);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      parseEntry(entry<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>), entry<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">1</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T04:58:55Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjA0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006047", "body": "```suggestion\r\n          String.format(\"Invalid configuration. Could not find the keystore file (%s).\", keyFileName));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n          \n          \n            \n                      String.format(\"Invalid configuration. Could not find the keystore file (%s).\", keyFileName));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid configuration. <span class=\"x x-first x-last\">could</span> not find the <span class=\"x x-first x-last\">key</span> file (%s).<span class=\"pl-pds\">\"</span></span>, keyFileName));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid configuration. <span class=\"x x-first x-last\">Could</span> not find the <span class=\"x x-first x-last\">keystore</span> file (%s).<span class=\"pl-pds\">\"</span></span>, keyFileName));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:01:05Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjA4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006082", "body": "```suggestion\r\n              \"Invalid configuration. Could not find the password file (%s).\", passwordFileName));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n          \n          \n            \n                          \"Invalid configuration. Could not find the password file (%s).\", passwordFileName));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid configuration. <span class=\"x x-first x-last\">could</span> not find the password file (%s).<span class=\"pl-pds\">\"</span></span>, passwordFileName));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid configuration. <span class=\"x x-first x-last\">Could</span> not find the password file (%s).<span class=\"pl-pds\">\"</span></span>, passwordFileName));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:01:13Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjM5Mg==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006392", "body": "```suggestion\r\n              \"Invalid configuration. --validatorKeys entry (%s\"\r\n                  + pathSeparator\r\n                  + \"%s) must be both directories or both files.\",\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Invalid configuration. validatorKeys entry (%s\"\n          \n          \n            \n                              + pathSeparator\n          \n          \n            \n                              + \"%s) must be both directories or both files\",\n          \n          \n            \n                          \"Invalid configuration. --validatorKeys entry (%s\"\n          \n          \n            \n                              + pathSeparator\n          \n          \n            \n                              + \"%s) must be both directories or both files.\",", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"84\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid configuration. validatorKeys entry (%s<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"85\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                  <span class=\"pl-k\">+</span> pathSeparator</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"86\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                  <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%s) must be both directories or both files<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"84\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Invalid configuration. <span class=\"x x-first x-last\">--</span>validatorKeys entry (%s<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"85\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  <span class=\"pl-k\">+</span> pathSeparator</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"86\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%s) must be both directories or both files<span class=\"x x-first x-last\">.</span><span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:02:30Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjkzMw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006933", "body": "I'm not sure `filePairs` is doing anything useful, do we still need it?", "bodyText": "I'm not sure filePairs is doing anything useful, do we still need it?", "bodyHTML": "<p dir=\"auto\">I'm not sure <code>filePairs</code> is doing anything useful, do we still need it?</p>", "author": "ajsutton", "createdAt": "2020-08-12T05:04:44Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxODkzMA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469518930", "bodyText": "that was v.0 implementation floating around that i managed not to clean up :/ the map gives us easier de-duping, and i removed some but apparently not all of the old list.", "author": "rolfyone", "createdAt": "2020-08-12T20:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNzIyNw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469007227", "body": "```suggestion\r\n    return pathMap.entrySet().stream().map(entry -> Pair.of(entry.getKey(), entry.getValue())).collect(toList());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final List<Pair<Path, Path>> pairs = new ArrayList<>();\n          \n          \n            \n                pathMap.forEach((k, v) -> pairs.add(Pair.of(k, v)));\n          \n          \n            \n                return pairs;\n          \n          \n            \n                return pathMap.entrySet().stream().map(entry -> Pair.of(entry.getKey(), entry.getValue())).collect(toList());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-k\">Pair&lt;<span class=\"pl-smi\">Path</span>, <span class=\"pl-smi\">Path</span>&gt;</span>&gt;</span> pairs <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;&gt;</span>();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    pathMap<span class=\"pl-k\">.</span>forEach((k, v) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> pairs<span class=\"pl-k\">.</span>add(<span class=\"pl-smi\">Pair</span><span class=\"pl-k\">.</span>of(k, v)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> pairs;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> pathMap<span class=\"pl-k\">.</span>entrySet()<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>map(entry <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Pair</span><span class=\"pl-k\">.</span>of(entry<span class=\"pl-k\">.</span>getKey(), entry<span class=\"pl-k\">.</span>getValue()))<span class=\"pl-k\">.</span>collect(toList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:05:52Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))\n+          .forEach(\n+              path -> {\n+                final String keyFilename = path.toAbsolutePath().toString();\n+                final String passwordFileExpectedLocation =\n+                    keyFilename\n+                        .substring(0, keyFilename.length() - 5)\n+                        .replace(keyBasePath, passwordBasePath);\n+                final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);\n+                if (maybePassFile.isEmpty()) {\n+                  throw new InvalidConfigurationException(\n+                      String.format(\n+                          \"Invalid configuration. No matching password file for (%s) in the key path. \"\n+                              + \"For key file 'f.json', expect to see password 'f.txt'.\",\n+                          path.toAbsolutePath().toString()));\n+                }\n+                pathMap.putIfAbsent(path, maybePassFile.get().toPath());\n+              });\n+    } catch (IOException e) {\n+      LOG.fatal(\"Failed to load keys from keystore\", e);\n+    }\n+  }\n+\n+  private Optional<File> findPassFile(final String absolutePassPathWithoutExtension) {\n+    // bin type will be added here soon most likely.\n+    List<String> extensions = List.of(\"txt\");\n+    for (String ext : extensions) {\n+      final File file = new File(absolutePassPathWithoutExtension + \".\" + ext);\n+      if (file.exists() && file.isFile()) {\n+        return Optional.of(file);\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public List<Pair<Path, Path>> getFilePairs() {\n+    final List<Pair<Path, Path>> pairs = new ArrayList<>();\n+    pathMap.forEach((k, v) -> pairs.add(Pair.of(k, v)));\n+    return pairs;", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMDA5Ng==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469010096", "body": "The example `f.json` in this message is quite misleading for users. It should list the specific file paths that we attempted to load. ", "bodyText": "The example f.json in this message is quite misleading for users. It should list the specific file paths that we attempted to load.", "bodyHTML": "<p dir=\"auto\">The example <code>f.json</code> in this message is quite misleading for users. It should list the specific file paths that we attempted to load.</p>", "author": "ajsutton", "createdAt": "2020-08-12T05:17:00Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))\n+          .forEach(\n+              path -> {\n+                final String keyFilename = path.toAbsolutePath().toString();\n+                final String passwordFileExpectedLocation =\n+                    keyFilename\n+                        .substring(0, keyFilename.length() - 5)\n+                        .replace(keyBasePath, passwordBasePath);\n+                final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);\n+                if (maybePassFile.isEmpty()) {\n+                  throw new InvalidConfigurationException(\n+                      String.format(\n+                          \"Invalid configuration. No matching password file for (%s) in the key path. \"\n+                              + \"For key file 'f.json', expect to see password 'f.txt'.\",", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyMTgwOQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469521809", "bodyText": "hrm ok. i was attempting to give a concrete example of the expectation, because 'no matching password file' didnt seem to me to do the whole job, but i can remove the example?", "author": "rolfyone", "createdAt": "2020-08-12T20:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMDA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMTEzNQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469011135", "body": "This won't necessarily handle symlinks correctly as `toAbsolutePath` sometimes returns the resolved path (it's filesystem dependent).\r\n\r\nI think it will have to be:\r\n```suggestion\r\n                final Path relativeDirectoryPath = keyDirectory.toPath().relativize(path.getParent());\r\n                final String keystoreName = path.getFileName().toString();\r\n                final Path passwordPath =\r\n                    passwordDirectory\r\n                        .toPath()\r\n                        .resolve(relativeDirectoryPath)\r\n                        .resolve(\r\n                            keystoreName.substring(0, keystoreName.length() - \".json\".length()));\r\n                final Optional<File> maybePassFile =\r\n                    findPassFile(passwordPath.toAbsolutePath().toString());\r\n```\r\n", "bodyText": "This won't necessarily handle symlinks correctly as toAbsolutePath sometimes returns the resolved path (it's filesystem dependent).\nI think it will have to be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final String keyFilename = path.toAbsolutePath().toString();\n          \n          \n            \n                            final String passwordFileExpectedLocation =\n          \n          \n            \n                                keyFilename\n          \n          \n            \n                                    .substring(0, keyFilename.length() - 5)\n          \n          \n            \n                                    .replace(keyBasePath, passwordBasePath);\n          \n          \n            \n                            final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);\n          \n          \n            \n                            final Path relativeDirectoryPath = keyDirectory.toPath().relativize(path.getParent());\n          \n          \n            \n                            final String keystoreName = path.getFileName().toString();\n          \n          \n            \n                            final Path passwordPath =\n          \n          \n            \n                                passwordDirectory\n          \n          \n            \n                                    .toPath()\n          \n          \n            \n                                    .resolve(relativeDirectoryPath)\n          \n          \n            \n                                    .resolve(\n          \n          \n            \n                                        keystoreName.substring(0, keystoreName.length() - \".json\".length()));\n          \n          \n            \n                            final Optional<File> maybePassFile =\n          \n          \n            \n                                findPassFile(passwordPath.toAbsolutePath().toString());", "bodyHTML": "<p dir=\"auto\">This won't necessarily handle symlinks correctly as <code>toAbsolutePath</code> sometimes returns the resolved path (it's filesystem dependent).</p>\n<p dir=\"auto\">I think it will have to be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> keyFilename <span class=\"pl-k\">=</span> path<span class=\"pl-k\">.</span>toAbsolutePath()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> passwordFileExpectedLocation <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    keyFilename</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .substring(<span class=\"pl-c1\">0</span>, keyFilename<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">-</span> <span class=\"pl-c1\">5</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        .replace(keyBasePath, passwordBasePath);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">File</span>&gt;</span> maybePassFile <span class=\"pl-k\">=</span> findPassFile(passwordFileExpectedLocation);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Path</span> relativeDirectoryPath <span class=\"pl-k\">=</span> keyDirectory<span class=\"pl-k\">.</span>toPath()<span class=\"pl-k\">.</span>relativize(path<span class=\"pl-k\">.</span>getParent());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> keystoreName <span class=\"pl-k\">=</span> path<span class=\"pl-k\">.</span>getFileName()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Path</span> passwordPath <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    passwordDirectory</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .toPath()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .resolve(relativeDirectoryPath)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                        .resolve(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                            keystoreName<span class=\"pl-k\">.</span>substring(<span class=\"pl-c1\">0</span>, keystoreName<span class=\"pl-k\">.</span>length() <span class=\"pl-k\">-</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.json<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>length()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">final</span> <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">File</span>&gt;</span> maybePassFile <span class=\"pl-k\">=</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    findPassFile(passwordPath<span class=\"pl-k\">.</span>toAbsolutePath()<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:21:05Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))\n+          .forEach(\n+              path -> {\n+                final String keyFilename = path.toAbsolutePath().toString();\n+                final String passwordFileExpectedLocation =\n+                    keyFilename\n+                        .substring(0, keyFilename.length() - 5)\n+                        .replace(keyBasePath, passwordBasePath);\n+                final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMTU0MA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469011540", "body": "I'd remove this comment while you're passing through here (it would be the next 6 options that moved anyway and the TODO is just not useful).", "bodyText": "I'd remove this comment while you're passing through here (it would be the next 6 options that moved anyway and the TODO is just not useful).", "bodyHTML": "<p dir=\"auto\">I'd remove this comment while you're passing through here (it would be the next 6 options that moved anyway and the TODO is just not useful).</p>", "author": "ajsutton", "createdAt": "2020-08-12T05:22:40Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/TekuConfiguration.java", "diffHunk": "@@ -67,6 +67,7 @@\n   // TODO (#1918): The following two options will eventually be moved to the validator subcommand", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMTg1MA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469011850", "body": "Minor thing but since we're going to need to manipulate the filename later I'd make this:\r\n```suggestion\r\n                      && getFileName().toString().endsWith(\".json\"))\r\n```", "bodyText": "Minor thing but since we're going to need to manipulate the filename later I'd make this:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  && path.toString().endsWith(\".json\"))\n          \n          \n            \n                                  && getFileName().toString().endsWith(\".json\"))", "bodyHTML": "<p dir=\"auto\">Minor thing but since we're going to need to manipulate the filename later I'd make this:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                      <span class=\"pl-k\">&amp;&amp;</span> <span class=\"x x-first x-last\">path</span><span class=\"pl-k\">.</span>toString()<span class=\"pl-k\">.</span>endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.json<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                      <span class=\"pl-k\">&amp;&amp;</span> <span class=\"x x-first x-last\">getFileName()</span><span class=\"pl-k\">.</span>toString()<span class=\"pl-k\">.</span>endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.json<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:23:50Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjQxOA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012418", "body": "```suggestion\r\n        new File(tempStr, k).toPath(),\r\n        new File(tempStr, p).toPath());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n          \n          \n            \n                    new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n          \n          \n            \n                    new File(tempStr, k).toPath(),\n          \n          \n            \n                    new File(tempStr, p).toPath());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x\">.</span><span class=\"x\">format(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">%s/%s</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, </span>tempStr, k<span class=\"x x-first x-last\">)</span>)<span class=\"pl-k\">.</span>toPath(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x\">.</span><span class=\"x\">format(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">%s/%s</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, </span>tempStr, p<span class=\"x x-first x-last\">)</span>)<span class=\"pl-k\">.</span>toPath());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(tempStr, k)<span class=\"pl-k\">.</span>toPath(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(tempStr, p)<span class=\"pl-k\">.</span>toPath());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:25:43Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.mkdirs();\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, String... paths) throws IOException {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.createNewFile();\n+    }\n+  }\n+\n+  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+    return Pair.of(\n+        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n+        new File(String.format(\"%s/%s\", tempStr, p)).toPath());", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjU3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012573", "body": "```suggestion\r\n      File file = tempDir.resolve(path).toFile();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  File file = new File(tempDir.toString() + File.separator + path);\n          \n          \n            \n                  File file = tempDir.resolve(path).toFile();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">File</span> file <span class=\"pl-k\">=</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">File</span><span class=\"x x-last\">(</span>tempDir<span class=\"pl-k\">.</span><span class=\"x x-first\">toString() </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-smi x\">File</span><span class=\"pl-k x\">.</span><span class=\"x\">separator </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> path</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">File</span> file <span class=\"pl-k\">=</span> tempDir<span class=\"pl-k\">.</span><span class=\"x x-first\">resolve(path)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toFile(</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:26:17Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.mkdirs();\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, String... paths) throws IOException {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjY2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012667", "body": "```suggestion\r\n      File file = tempDir.resolve(path).toFile();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  File file = new File(tempDir.toString() + File.separator + path);\n          \n          \n            \n                  File file = tempDir.resolve(path).toFile();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi\">File</span> file <span class=\"pl-k\">=</span> <span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">File</span><span class=\"x x-last\">(</span>tempDir<span class=\"pl-k\">.</span><span class=\"x x-first\">toString() </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-smi x\">File</span><span class=\"pl-k x\">.</span><span class=\"x\">separator </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> path</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">File</span> file <span class=\"pl-k\">=</span> tempDir<span class=\"pl-k\">.</span><span class=\"x x-first\">resolve(path)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toFile(</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:26:37Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjg1NA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012854", "body": "```suggestion\r\n      if (!file.mkdirs() && !file.isDirectory()) {\r\n        Assertions.fail(\"Failed to create directory \" + file);\r\n      }\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  file.mkdirs();\n          \n          \n            \n                  if (!file.mkdirs() && !file.isDirectory()) {\n          \n          \n            \n                    Assertions.fail(\"Failed to create directory \" + file);\n          \n          \n            \n                  }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      file<span class=\"pl-k\">.</span>mkdirs()<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k x x-first\">if</span><span class=\"x\"> (</span><span class=\"pl-k x x-last\">!</span>file<span class=\"pl-k\">.</span>mkdirs()<span class=\"x x-first\"> </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x\"> </span><span class=\"pl-k x\">!</span><span class=\"x\">file</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isDirectory()) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">Assertions</span><span class=\"pl-k\">.</span>fail(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Failed to create directory <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> file);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-12T05:27:15Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.mkdirs();", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMzEyNg==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469013126", "body": "Need to avoid hard coding `/` as the path separator and use `Path.resolve` or `Path.of` to join the pieces.", "bodyText": "Need to avoid hard coding / as the path separator and use Path.resolve or Path.of to join the pieces.", "bodyHTML": "<p dir=\"auto\">Need to avoid hard coding <code>/</code> as the path separator and use <code>Path.resolve</code> or <code>Path.of</code> to join the pieces.</p>", "author": "ajsutton", "createdAt": "2020-08-12T05:28:22Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "20241fe2f46bf26833336cf41110fd5628f361a0", "url": "https://github.com/ConsenSys/teku/commit/20241fe2f46bf26833336cf41110fd5628f361a0", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-13T02:11:46Z", "type": "commit"}, {"oid": "c71c0aae9a53de77548ccdd8561f0ece5078b937", "url": "https://github.com/ConsenSys/teku/commit/c71c0aae9a53de77548ccdd8561f0ece5078b937", "message": "Merge remote-tracking branch 'upstream/master' into 2003-keys-directory", "committedDate": "2020-08-13T02:51:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MDQwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469670405", "body": "I've only just learnt this but we should use `File.isHidden` for this so:\r\n```suggestion\r\n                  !path.toFile().isHidden()\r\n```", "bodyText": "I've only just learnt this but we should use File.isHidden for this so:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              !path.getFileName().toString().startsWith(\".\")\n          \n          \n            \n                              !path.toFile().isHidden()", "bodyHTML": "<p dir=\"auto\">I've only just learnt this but we should use <code>File.isHidden</code> for this so:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                  <span class=\"pl-k\">!</span>path<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">getFileName</span>()<span class=\"pl-k\">.</span><span class=\"x x-first\">toString()</span><span class=\"pl-k x\">.</span><span class=\"x\">startsWith(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">.</span><span class=\"pl-pds x x-last\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  <span class=\"pl-k\">!</span>path<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">toFile</span>()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">isHidden(</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ajsutton", "createdAt": "2020-08-13T03:09:24Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Map<Path, Path> pathMap = new HashMap<>();\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(final List<String> colonSeparatedPairs, final String pathSeparator) {\n+    this.colonSeparatedPairs = colonSeparatedPairs;\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+\n+      final List<String> entry = Splitter.on(pathSeparator).limit(2).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. Could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. Could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. --validator-keys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")", "originalCommit": "c71c0aae9a53de77548ccdd8561f0ece5078b937", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c5b81cfced5bbcd3cceec3d510f0bbfe7c937337", "url": "https://github.com/ConsenSys/teku/commit/c5b81cfced5bbcd3cceec3d510f0bbfe7c937337", "message": "Update util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>", "committedDate": "2020-08-13T03:49:26Z", "type": "commit"}, {"oid": "8491f1996032544a22157cb4623e7521adfcae98", "url": "https://github.com/ConsenSys/teku/commit/8491f1996032544a22157cb4623e7521adfcae98", "message": "spotless\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-13T03:52:00Z", "type": "commit"}]}