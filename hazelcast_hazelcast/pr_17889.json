{"pr_number": 17889, "pr_title": "Introduce NODE_AWARE partitioning group type", "pr_author": "hasancelik", "pr_createdAt": "2020-11-24T13:20:30Z", "pr_url": "https://github.com/hazelcast/hazelcast/pull/17889", "timeline": [{"oid": "a78fcb0cfffe189e35a0a643a86455a032efe195", "url": "https://github.com/hazelcast/hazelcast/commit/a78fcb0cfffe189e35a0a643a86455a032efe195", "message": "Introduce NODE_AWARE partitioning group type\n\nFor Kubernetes based environments, user might want to store their backups at another Kubernetes node.\nThey can easily decide which pod will be runing on which node via defining labels or node-selector.\nTo satisfy these kind of specific requirements, NODE_AWARE partition group type is introduced.\nNewly created NodeAwareMemberGroupFactory class is just simplified version of ZoneAwareMemberGroupFactory.", "committedDate": "2020-11-24T12:44:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2Mjk4Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529662982", "body": "`groups are allocated according to the metadata provided by Discovery SPI Partitions are not written to the same group.`, could you re-write this sentence? Looks like some words are missing.", "bodyText": "groups are allocated according to the metadata provided by Discovery SPI Partitions are not written to the same group., could you re-write this sentence? Looks like some words are missing.", "bodyHTML": "<p dir=\"auto\"><code>groups are allocated according to the metadata provided by Discovery SPI Partitions are not written to the same group.</code>, could you re-write this sentence? Looks like some words are missing.</p>", "author": "leszko", "createdAt": "2020-11-24T15:47:46Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "diffHunk": "@@ -83,24 +83,34 @@\n  * <p>\n  * You can define as many <code>member-group</code>s as you want. Hazelcast will always store backups in a different\n  * member-group to the primary partition.\n+ *\n+ * <h1>Zone Aware Partition Groups</h1>\n+ * In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2MzEzNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529663136", "body": "racks?", "bodyText": "racks?", "bodyHTML": "<p dir=\"auto\">racks?</p>", "author": "leszko", "createdAt": "2020-11-24T15:47:53Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "diffHunk": "@@ -83,24 +83,34 @@\n  * <p>\n  * You can define as many <code>member-group</code>s as you want. Hazelcast will always store backups in a different\n  * member-group to the primary partition.\n+ *\n+ * <h1>Zone Aware Partition Groups</h1>\n+ * In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not\n+ * written to the same group. This is very useful for ensuring partitions are written to availability\n+ * zones or different racks without providing the IP addresses to the config ahead.", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxNDc5MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r530614791", "bodyText": "Actually, I did not write this part but as far as I can understand, rack is jclouds specific term and rack metadata is provided by jclouds and can be passed like this . Giving rack as a sample usage is not reasonable so I will remove it and use only zone.", "author": "hasancelik", "createdAt": "2020-11-25T20:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2MzEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NDMyNA==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529664324", "body": "I don't think we should mention Kubernetes here? The mechanism is generic and it may be applied to some other orchestration solutions, like Docker Swarm.", "bodyText": "I don't think we should mention Kubernetes here? The mechanism is generic and it may be applied to some other orchestration solutions, like Docker Swarm.", "bodyHTML": "<p dir=\"auto\">I don't think we should mention Kubernetes here? The mechanism is generic and it may be applied to some other orchestration solutions, like Docker Swarm.</p>", "author": "leszko", "createdAt": "2020-11-24T15:48:45Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "diffHunk": "@@ -83,24 +83,34 @@\n  * <p>\n  * You can define as many <code>member-group</code>s as you want. Hazelcast will always store backups in a different\n  * member-group to the primary partition.\n+ *\n+ * <h1>Zone Aware Partition Groups</h1>\n+ * In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not\n+ * written to the same group. This is very useful for ensuring partitions are written to availability\n+ * zones or different racks without providing the IP addresses to the config ahead.\n  * <code>\n  * <pre>\n  * &lt;partition-group enabled=\"true\" group-type=\"ZONE_AWARE\"/&gt;\n  * </pre>\n  * </code>\n  *\n- * <h1>Zone Aware Partition Groups</h1>\n+ * <h1>Node Aware Partition Groups</h1>\n  * In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not\n- * written to the same group. This is very useful for ensuring partitions are written to availability\n- * zones or different racks without providing the IP addresses to the config ahead.\n+ * written to the same group. This is very useful for ensuring partitions are written to different Kubernetes nodes", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzk5NA==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r530627994", "bodyText": "Actually, I thought so at first, but I couldn't quite decide we should talk about other tools. When I think twice, you are right, we should mention other tools like Docker Swarm and ECS \ud83d\udc4d", "author": "hasancelik", "createdAt": "2020-11-25T20:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NDMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NTgxNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529665817", "body": "The same, I don't think this feature is related only to Kubernetes.", "bodyText": "The same, I don't think this feature is related only to Kubernetes.", "bodyHTML": "<p dir=\"auto\">The same, I don't think this feature is related only to Kubernetes.</p>", "author": "leszko", "createdAt": "2020-11-24T15:49:47Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "diffHunk": "@@ -151,6 +161,11 @@\n          * If only one zone is available, backups will be created in the same zone.\n          */\n         ZONE_AWARE,\n+        /**\n+         * Node Aware. Backups will be created in other Kubernetes nodes/physical machines.", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2ODU5MQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529668591", "body": "I think we can just remove this `@since`. If you want to keep it, please add the correct version.", "bodyText": "I think we can just remove this @since. If you want to keep it, please add the correct version.", "bodyHTML": "<p dir=\"auto\">I think we can just remove this <code>@since</code>. If you want to keep it, please add the correct version.</p>", "author": "leszko", "createdAt": "2020-11-24T15:51:43Z", "path": "hazelcast/src/main/java/com/hazelcast/partition/membergroup/NodeAwareMemberGroupFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.partition.membergroup;\n+\n+import com.hazelcast.core.Member;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.partitiongroup.PartitionGroupMetaData;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.hazelcast.util.MapUtil.createHashMap;\n+\n+/**\n+ * NodeAwareMemberGroupFactory is responsible for MemberGroups\n+ * creation according to the Kubernetes Node metadata provided by\n+ * {@link DiscoveryStrategy#discoverLocalMetadata()}\n+ * @since 3.7", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxNDc0Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r530614742", "bodyText": "copy paste error :) fixed \ud83d\udc4d", "author": "hasancelik", "createdAt": "2020-11-25T20:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2ODU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2OTEzNQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529669135", "body": "the same: I'd not use `Kubernetes` in the doc.", "bodyText": "the same: I'd not use Kubernetes in the doc.", "bodyHTML": "<p dir=\"auto\">the same: I'd not use <code>Kubernetes</code> in the doc.</p>", "author": "leszko", "createdAt": "2020-11-24T15:52:08Z", "path": "hazelcast/src/main/java/com/hazelcast/partition/membergroup/NodeAwareMemberGroupFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.partition.membergroup;\n+\n+import com.hazelcast.core.Member;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.partitiongroup.PartitionGroupMetaData;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.hazelcast.util.MapUtil.createHashMap;\n+\n+/**\n+ * NodeAwareMemberGroupFactory is responsible for MemberGroups\n+ * creation according to the Kubernetes Node metadata provided by", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MDM4NQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529670385", "body": "The same, we'd better not limit it to Kubernetes", "bodyText": "The same, we'd better not limit it to Kubernetes", "bodyHTML": "<p dir=\"auto\">The same, we'd better not limit it to Kubernetes</p>", "author": "leszko", "createdAt": "2020-11-24T15:53:01Z", "path": "hazelcast/src/main/java/com/hazelcast/partition/membergroup/NodeAwareMemberGroupFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.partition.membergroup;\n+\n+import com.hazelcast.core.Member;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.partitiongroup.PartitionGroupMetaData;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.hazelcast.util.MapUtil.createHashMap;\n+\n+/**\n+ * NodeAwareMemberGroupFactory is responsible for MemberGroups\n+ * creation according to the Kubernetes Node metadata provided by\n+ * {@link DiscoveryStrategy#discoverLocalMetadata()}\n+ * @since 3.7\n+ */\n+public class NodeAwareMemberGroupFactory extends BackupSafeMemberGroupFactory implements MemberGroupFactory {\n+\n+    @Override\n+    protected Set<MemberGroup> createInternalMemberGroups(Collection<? extends Member> allMembers) {\n+        Map<String, MemberGroup> groups = createHashMap(allMembers.size());\n+        for (Member member : allMembers) {\n+            final String nodeInfo = member.getStringAttribute(PartitionGroupMetaData.PARTITION_GROUP_NODE);\n+            if (nodeInfo == null) {\n+                throw new IllegalArgumentException(\"Not enough metadata information is provided. \"\n+                        + \"Kubernetes node name information must be provided with NODE_AWARE partition group.\");", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MjU5Mg==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529672592", "body": "```suggestion\r\n        return new HashSet<>(groups.values());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new HashSet<MemberGroup>(groups.values());\n          \n          \n            \n                    return new HashSet<>(groups.values());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;<span class=\"pl-smi x x-first x-last\">MemberGroup</span>&gt;</span>(groups<span class=\"pl-k\">.</span>values());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">HashSet&lt;&gt;</span>(groups<span class=\"pl-k\">.</span>values());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "leszko", "createdAt": "2020-11-24T15:54:34Z", "path": "hazelcast/src/main/java/com/hazelcast/partition/membergroup/NodeAwareMemberGroupFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.partition.membergroup;\n+\n+import com.hazelcast.core.Member;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.partitiongroup.PartitionGroupMetaData;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.hazelcast.util.MapUtil.createHashMap;\n+\n+/**\n+ * NodeAwareMemberGroupFactory is responsible for MemberGroups\n+ * creation according to the Kubernetes Node metadata provided by\n+ * {@link DiscoveryStrategy#discoverLocalMetadata()}\n+ * @since 3.7\n+ */\n+public class NodeAwareMemberGroupFactory extends BackupSafeMemberGroupFactory implements MemberGroupFactory {\n+\n+    @Override\n+    protected Set<MemberGroup> createInternalMemberGroups(Collection<? extends Member> allMembers) {\n+        Map<String, MemberGroup> groups = createHashMap(allMembers.size());\n+        for (Member member : allMembers) {\n+            final String nodeInfo = member.getStringAttribute(PartitionGroupMetaData.PARTITION_GROUP_NODE);\n+            if (nodeInfo == null) {\n+                throw new IllegalArgumentException(\"Not enough metadata information is provided. \"\n+                        + \"Kubernetes node name information must be provided with NODE_AWARE partition group.\");\n+            }\n+            MemberGroup group = groups.get(nodeInfo);\n+            if (group == null) {\n+                group = new DefaultMemberGroup();\n+                groups.put(nodeInfo, group);\n+            }\n+            group.addMember(member);\n+        }\n+        return new HashSet<MemberGroup>(groups.values());", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMzMyOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r530633329", "bodyText": "I have converted this line into diamond operator but PR builder fails with below error so I reverted it:\nerror: diamond operator is not supported in -source 1.6", "author": "hasancelik", "createdAt": "2020-11-25T20:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MjU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NjcwMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r531146700", "bodyText": "Ahh, right, I forgot that it's a PR to 3.12.x and we need to support java 1.6. Then, it's fine. Leave it as it is.", "author": "leszko", "createdAt": "2020-11-26T16:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3MjU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NDQzNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529674437", "body": "The same, I'd avoid limiting this feature to Kubernetes.", "bodyText": "The same, I'd avoid limiting this feature to Kubernetes.", "bodyHTML": "<p dir=\"auto\">The same, I'd avoid limiting this feature to Kubernetes.</p>", "author": "leszko", "createdAt": "2020-11-24T15:55:48Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/DiscoveryStrategy.java", "diffHunk": "@@ -77,8 +77,8 @@\n \n     /**\n      * Returns a map with discovered metadata provided by the runtime environment. Those information\n-     * may include, but are not limited, to location information like datacenter, rack, host or additional\n-     * tags to be used for custom purpose.\n+     * may include, but are not limited, to location information like datacenter, rack, host,\n+     * Kubernetes node name or additional tags to be used for custom purpose.", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NDcyNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529674726", "body": "The same, I'd avoid limiting this feature to Kubernetes", "bodyText": "The same, I'd avoid limiting this feature to Kubernetes", "bodyHTML": "<p dir=\"auto\">The same, I'd avoid limiting this feature to Kubernetes</p>", "author": "leszko", "createdAt": "2020-11-24T15:56:00Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/discovery/integration/DiscoveryService.java", "diffHunk": "@@ -68,8 +68,8 @@\n \n     /**\n      * Returns a map with discovered metadata provided by the runtime environment. Those information\n-     * may include, but are not limited, to location information like datacenter, rack, host or additional\n-     * tags to be used for custom purpose.\n+     * may include, but are not limited, to location information like datacenter, rack, host,\n+     * Kubernetes node name or additional tags to be used for custom purpose.", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY3NTEyOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r529675128", "body": "the same", "bodyText": "the same", "bodyHTML": "<p dir=\"auto\">the same</p>", "author": "leszko", "createdAt": "2020-11-24T15:56:16Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/partitiongroup/PartitionGroupMetaData.java", "diffHunk": "@@ -18,13 +18,17 @@\n \n /**\n  * This class contains the definition of known Discovery SPI metadata to support automatic\n- * generation of zone aware backup strategies based on cloud or service discovery provided\n- * information. These information are split into three different levels of granularity:\n+ * generation of zone aware and Kubernetes node aware backup strategies.", "originalCommit": "a78fcb0cfffe189e35a0a643a86455a032efe195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3413ad08a6a3f791ba2e129bc5f1d3cc4e581686", "url": "https://github.com/hazelcast/hazelcast/commit/3413ad08a6a3f791ba2e129bc5f1d3cc4e581686", "message": "fixed test failures", "committedDate": "2020-11-25T08:24:05Z", "type": "commit"}, {"oid": "2c2bf326644cc6c6e2de4c79c9bd6df818d098d1", "url": "https://github.com/hazelcast/hazelcast/commit/2c2bf326644cc6c6e2de4c79c9bd6df818d098d1", "message": "revised javadoc parts based on review comments", "committedDate": "2020-11-25T20:02:19Z", "type": "commit"}, {"oid": "e46bda41505cb538e2ab9f46b7a94cba34342916", "url": "https://github.com/hazelcast/hazelcast/commit/e46bda41505cb538e2ab9f46b7a94cba34342916", "message": "use parameterized type", "committedDate": "2020-11-25T20:42:15Z", "type": "commit"}, {"oid": "9a18d9822129ad4ba03d066e07841bf00cded42b", "url": "https://github.com/hazelcast/hazelcast/commit/9a18d9822129ad4ba03d066e07841bf00cded42b", "message": "fixed checkstyle error", "committedDate": "2020-11-25T21:14:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NzEzNw==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r531147137", "body": "```suggestion\r\n * generation of zone aware and node aware backup strategies.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * generation of zone aware and Kubernetes node aware backup strategies.\n          \n          \n            \n             * generation of zone aware and node aware backup strategies.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> generation of zone aware and <span class=\"pl-smi x x-first\">Kubernetes</span><span class=\"x x-last\"> </span>node aware backup strategies.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> generation of zone aware and node aware backup strategies.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "leszko", "createdAt": "2020-11-26T16:54:23Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/partitiongroup/PartitionGroupMetaData.java", "diffHunk": "@@ -18,13 +18,19 @@\n \n /**\n  * This class contains the definition of known Discovery SPI metadata to support automatic\n- * generation of zone aware backup strategies based on cloud or service discovery provided\n- * information. These information are split into three different levels of granularity:\n+ * generation of zone aware and Kubernetes node aware backup strategies.", "originalCommit": "9a18d9822129ad4ba03d066e07841bf00cded42b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NzQxMA==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r531147410", "body": "```suggestion\r\n * one or more Hazelcast nodes to share the same physical host/node, rack or\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * one or more Hazelcast nodes to share the same physical host/Kubernetes node, rack or\n          \n          \n            \n             * one or more Hazelcast nodes to share the same physical host/node, rack or", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> one or more <span class=\"pl-smi\">Hazelcast</span> nodes to share the same physical host<span class=\"pl-k\">/</span><span class=\"pl-smi x x-first\">Kubernetes</span><span class=\"x x-last\"> </span>node, rack or</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> one or more <span class=\"pl-smi\">Hazelcast</span> nodes to share the same physical host<span class=\"pl-k\">/</span>node, rack or</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "leszko", "createdAt": "2020-11-26T16:54:58Z", "path": "hazelcast/src/main/java/com/hazelcast/spi/partitiongroup/PartitionGroupStrategy.java", "diffHunk": "@@ -22,7 +22,7 @@\n /**\n  * <p>A <tt>PartitionGroupStrategy</tt> implementation defines a strategy\n  * how backup groups are designed. Backup groups are units containing\n- * one or more Hazelcast nodes to share the same physical host, rack or\n+ * one or more Hazelcast nodes to share the same physical host/Kubernetes node, rack or", "originalCommit": "9a18d9822129ad4ba03d066e07841bf00cded42b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxNTM0Nw==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r532515347", "body": "Maybe something like \"The backups of the partitions are not placed on...\"?", "bodyText": "Maybe something like \"The backups of the partitions are not placed on...\"?", "bodyHTML": "<p dir=\"auto\">Maybe something like \"The backups of the partitions are not placed on...\"?</p>", "author": "blazember", "createdAt": "2020-11-30T11:06:03Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "diffHunk": "@@ -83,24 +83,38 @@\n  * <p>\n  * You can define as many <code>member-group</code>s as you want. Hazelcast will always store backups in a different\n  * member-group to the primary partition.\n+ *\n+ * <h1>Zone Aware Partition Groups</h1>\n+ * In this scheme, groups are allocated according to the metadata provided by Discovery SPI\n+ * These metadata are availability zone, rack and host. Partitions are not written to", "originalCommit": "9a18d9822129ad4ba03d066e07841bf00cded42b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NDkxNg==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r532544916", "body": "Same.", "bodyText": "Same.", "bodyHTML": "<p dir=\"auto\">Same.</p>", "author": "blazember", "createdAt": "2020-11-30T11:59:16Z", "path": "hazelcast/src/main/java/com/hazelcast/config/PartitionGroupConfig.java", "diffHunk": "@@ -83,24 +83,38 @@\n  * <p>\n  * You can define as many <code>member-group</code>s as you want. Hazelcast will always store backups in a different\n  * member-group to the primary partition.\n+ *\n+ * <h1>Zone Aware Partition Groups</h1>\n+ * In this scheme, groups are allocated according to the metadata provided by Discovery SPI\n+ * These metadata are availability zone, rack and host. Partitions are not written to\n+ * the same group so this is very useful for ensuring partitions are written to\n+ * different availability zones without providing the IP addresses to the config ahead.\n  * <code>\n  * <pre>\n  * &lt;partition-group enabled=\"true\" group-type=\"ZONE_AWARE\"/&gt;\n  * </pre>\n  * </code>\n  *\n- * <h1>Zone Aware Partition Groups</h1>\n- * In this scheme, groups are allocated according to the metadata provided by Discovery SPI Partitions are not\n- * written to the same group. This is very useful for ensuring partitions are written to availability\n- * zones or different racks without providing the IP addresses to the config ahead.\n+ * <h1>Node Aware Partition Groups</h1>\n+ * In this scheme, groups are allocated according to node name metadata provided by Discovery SPI.\n+ * For container orchestration tools like Kubernetes and Docker Swarm, node is the term used to refer\n+ * machine that containers/pods run on. A node may be a virtual or physical machine.\n+ * Partitions are not written to the same group so this is very useful for ensuring partitions", "originalCommit": "9a18d9822129ad4ba03d066e07841bf00cded42b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NzczOQ==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r532547739", "body": "I wonder if logging the `group:member` mappings at debug level would be useful.", "bodyText": "I wonder if logging the group:member mappings at debug level would be useful.", "bodyHTML": "<p dir=\"auto\">I wonder if logging the <code>group:member</code> mappings at debug level would be useful.</p>", "author": "blazember", "createdAt": "2020-11-30T12:04:20Z", "path": "hazelcast/src/main/java/com/hazelcast/partition/membergroup/NodeAwareMemberGroupFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.partition.membergroup;\n+\n+import com.hazelcast.core.Member;\n+import com.hazelcast.spi.discovery.DiscoveryStrategy;\n+import com.hazelcast.spi.partitiongroup.PartitionGroupMetaData;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.hazelcast.util.MapUtil.createHashMap;\n+\n+/**\n+ * NodeAwareMemberGroupFactory is responsible for MemberGroups\n+ * creation according to name of the node metadata. For container orchestration\n+ * tools like Kubernetes and Docker Swarm, node is the term used to refer\n+ * machine that containers/pods run on. A node may be a virtual or physical machine.\n+ * Node name metadata provided by\n+ * {@link DiscoveryStrategy#discoverLocalMetadata()}\n+ * @since 3.12.11\n+ */\n+public class NodeAwareMemberGroupFactory extends BackupSafeMemberGroupFactory implements MemberGroupFactory {\n+\n+    @Override\n+    protected Set<MemberGroup> createInternalMemberGroups(Collection<? extends Member> allMembers) {\n+        Map<String, MemberGroup> groups = createHashMap(allMembers.size());\n+        for (Member member : allMembers) {\n+            final String nodeInfo = member.getStringAttribute(PartitionGroupMetaData.PARTITION_GROUP_NODE);\n+            if (nodeInfo == null) {\n+                throw new IllegalArgumentException(\"Not enough metadata information is provided. \"\n+                        + \"Node name information must be provided with NODE_AWARE partition group.\");\n+            }\n+            MemberGroup group = groups.get(nodeInfo);\n+            if (group == null) {\n+                group = new DefaultMemberGroup();\n+                groups.put(nodeInfo, group);\n+            }\n+            group.addMember(member);\n+        }", "originalCommit": "9a18d9822129ad4ba03d066e07841bf00cded42b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxOTYxOA==", "url": "https://github.com/hazelcast/hazelcast/pull/17889#discussion_r532619618", "bodyText": "For zone and node aware, I can say that user (should) already knows which member will be running on which node or zone via external deployment config. On the other hand, I agree with you it would be good beneficial for debug purposes. I have added into my todo list, I will prepare another PR for all group factories.", "author": "hasancelik", "createdAt": "2020-11-30T14:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NzczOQ=="}], "type": "inlineReview"}, {"oid": "fd6e116cb3aad46a157a7a2a818ad94a15c90b75", "url": "https://github.com/hazelcast/hazelcast/commit/fd6e116cb3aad46a157a7a2a818ad94a15c90b75", "message": "review comments", "committedDate": "2020-11-30T14:05:23Z", "type": "commit"}, {"oid": "a77634c44b6464bb10b14b96a19f4a6e829c006f", "url": "https://github.com/hazelcast/hazelcast/commit/a77634c44b6464bb10b14b96a19f4a6e829c006f", "message": "removed since notation from NodeAwareMemberGroupFactory javadoc", "committedDate": "2020-12-01T07:13:24Z", "type": "commit"}, {"oid": "003b58c16a947640218f3d2eaaa16baf17fcf909", "url": "https://github.com/hazelcast/hazelcast/commit/003b58c16a947640218f3d2eaaa16baf17fcf909", "message": "added testNodeAwareMemberGroupFactoryThrowsIllegalArgumentExceptionWhenNoMetadataIsProvided", "committedDate": "2020-12-01T11:05:39Z", "type": "commit"}]}