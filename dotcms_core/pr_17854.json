{"pr_number": 17854, "pr_title": "#17749 this first effort renders on the absolute path when the contai\u2026", "pr_author": "jdotcms", "pr_createdAt": "2020-01-15T21:31:19Z", "pr_url": "https://github.com/dotCMS/core/pull/17854", "timeline": [{"oid": "361da972b608175bc9af8d98ff797c4ffb14f972", "url": "https://github.com/dotCMS/core/commit/361da972b608175bc9af8d98ff797c4ffb14f972", "message": "#17749 this first effort renders on the absolute path when the container is not part of the current host, and also make several fixes to make it work on the edit mode", "committedDate": "2020-01-15T21:30:32Z", "type": "commit"}, {"oid": "6d4b0daa66f70934330bd051898f4f3fbc872ba5", "url": "https://github.com/dotCMS/core/commit/6d4b0daa66f70934330bd051898f4f3fbc872ba5", "message": "#17749 start adding unit test", "committedDate": "2020-01-16T18:08:42Z", "type": "commit"}, {"oid": "98a1f6cfc7b11f15176234fb187f84db6007461d", "url": "https://github.com/dotCMS/core/commit/98a1f6cfc7b11f15176234fb187f84db6007461d", "message": "#17749 adding unit test for HostUtil", "committedDate": "2020-01-16T19:46:22Z", "type": "commit"}, {"oid": "a2cd2c44111d360e9bc22a81a6489099a9d19585", "url": "https://github.com/dotCMS/core/commit/a2cd2c44111d360e9bc22a81a6489099a9d19585", "message": "#17749 adding fixes and unit test", "committedDate": "2020-01-16T21:52:44Z", "type": "commit"}, {"oid": "752b8d9621431a0b3129ebf44bfa5a968446c711", "url": "https://github.com/dotCMS/core/commit/752b8d9621431a0b3129ebf44bfa5a968446c711", "message": "#17749 a new test case when the host does not exists, returns the default", "committedDate": "2020-01-16T22:09:00Z", "type": "commit"}, {"oid": "589fc1ea375d00a815940aeb8d215f59e19d9cf4", "url": "https://github.com/dotCMS/core/commit/589fc1ea375d00a815940aeb8d215f59e19d9cf4", "message": "#17749 Adding fixes to be able to add an container on non-default host when it is a container in the default host", "committedDate": "2020-01-18T01:35:03Z", "type": "commit"}, {"oid": "1eb899d953ac6261dd64e8476ecce51c689d00a3", "url": "https://github.com/dotCMS/core/commit/1eb899d953ac6261dd64e8476ecce51c689d00a3", "message": "#17749 Adding fixes to be able to add an container on non-default host when it is a container in the default host 2", "committedDate": "2020-01-18T01:35:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMDIwOQ==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369110209", "body": "Can you improve the error message please? Add info such as the `filePath`", "bodyText": "Can you improve the error message please? Add info such as the filePath", "bodyHTML": "<p dir=\"auto\">Can you improve the error message please? Add info such as the <code>filePath</code></p>", "author": "jcastro-dotcms", "createdAt": "2020-01-21T16:34:53Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/DotResourceLoader.java", "diffHunk": "@@ -74,6 +74,7 @@ public InputStream getResourceStream(final String filePath) throws ResourceNotFo\n                 }\n \n             } catch (Exception e) {\n+                Logger.error(this, e.getMessage(), e);", "originalCommit": "1eb899d953ac6261dd64e8476ecce51c689d00a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NTcwMA==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369145700", "bodyText": "Done", "author": "jdotcms", "createdAt": "2020-01-21T17:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMDIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMzA4OQ==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369113089", "body": "Are you sure that this call to `containerAPI.getWorkingContainerByFolderPath` will not throw an exception?", "bodyText": "Are you sure that this call to containerAPI.getWorkingContainerByFolderPath will not throw an exception?", "bodyHTML": "<p dir=\"auto\">Are you sure that this call to <code>containerAPI.getWorkingContainerByFolderPath</code> will not throw an exception?</p>", "author": "jcastro-dotcms", "createdAt": "2020-01-21T16:39:39Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/container/ContainerResource.java", "diffHunk": "@@ -370,9 +370,24 @@ private Container getContainer(final String containerId, final User user, final\n \n         if (FileAssetContainerUtil.getInstance().isFolderAssetContainerId(containerId)) {\n \n-            return mode.showLive?\n-                    this.containerAPI.getLiveContainerByFolderPath   (containerId, host, user, mode.respectAnonPerms):\n-                    this.containerAPI.getWorkingContainerByFolderPath(containerId, host, user, mode.respectAnonPerms);\n+            final Optional<Host> hostOpt = HostUtil.getHostFromPathOrCurrentHost(containerId, Constants.CONTAINER_FOLDER_PATH);\n+            final Host   containerHost   = hostOpt.isPresent()? hostOpt.get():host;\n+            final String relativePath    = FileAssetContainerUtil.getInstance().getPathFromFullPath(containerHost.getHostname(), containerId);\n+            try {\n+                \n+                return mode.showLive ?\n+                        this.containerAPI.getLiveContainerByFolderPath(relativePath, containerHost, user, mode.respectAnonPerms) :\n+                        this.containerAPI.getWorkingContainerByFolderPath(relativePath, containerHost, user, mode.respectAnonPerms);\n+            } catch (NotFoundInDbException e) {\n+\n+                // if does not found in the host path or current host, tries the default one if it is not the same\n+                final Host defaultHost = WebAPILocator.getHostWebAPI().findDefaultHost(user, false);\n+                if (!defaultHost.getIdentifier().equals(containerHost.getIdentifier())) {\n+\n+                    return  this.containerAPI.getWorkingContainerByFolderPath(relativePath,", "originalCommit": "1eb899d953ac6261dd64e8476ecce51c689d00a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE0NjA5OQ==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369146099", "bodyText": "it could throw an exception and it would be expected, the handlers will catch them", "author": "jdotcms", "createdAt": "2020-01-21T17:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMzA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMDIyOQ==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369120229", "body": "I've never seen why FileAssetContainerUtil has to be a singleton. All the methods in there could be changed to static.\r\nNo state is kept inside of that class to justify making it a singleton. \r\nI think we should definitively make all those methods static and get rid of the getInstance.", "bodyText": "I've never seen why FileAssetContainerUtil has to be a singleton. All the methods in there could be changed to static.\nNo state is kept inside of that class to justify making it a singleton.\nI think we should definitively make all those methods static and get rid of the getInstance.", "bodyHTML": "<p dir=\"auto\">I've never seen why FileAssetContainerUtil has to be a singleton. All the methods in there could be changed to static.<br>\nNo state is kept inside of that class to justify making it a singleton.<br>\nI think we should definitively make all those methods static and get rid of the getInstance.</p>", "author": "fabrizzio-dotCMS", "createdAt": "2020-01-21T16:51:39Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -9,6 +9,32 @@\n \n public class FileAssetContainerUtilTest extends ContentletBaseTest {\n \n+    @Test\n+    public void test_getPathFromFullPath_wrong_host_on_full_path() throws Exception {\n+\n+        final String relativePath = FileAssetContainerUtil.getInstance().getPathFromFullPath(\"demo.dotcms.com\",\"//global.dotcms.com/application/container/test-container\");\n+", "originalCommit": "1eb899d953ac6261dd64e8476ecce51c689d00a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNDI5Nw==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369124297", "bodyText": "Another observation not directly related to this PR is that Optional is not meant to be used as parameters\nLook at\nprivate void setContainerData(final Host host,\n                                  final Folder containerFolder,\n                                  final FileAsset metaInfoFileAsset,\n                                  final List<FileAsset> containerStructures,\n                                  final FileAssetContainer container,\n                                  final Optional<String> preLoop,\n                                  final Optional<String> postLoop,\n                                  final Optional<FileAsset> preLoopAsset,\n                                  final Optional<FileAsset> postLoopAsset,\n                                  final String containerMetaInfo,\n                                  final boolean includeHostOnPath,\n                                  final Optional<String> codeScript)\n\n\nhttps://stackoverflow.com/questions/31922866/why-should-java-8s-optional-not-be-used-in-arguments\nConsider refactoring that, please.", "author": "fabrizzio-dotCMS", "createdAt": "2020-01-21T16:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMDIyOQ=="}], "type": "inlineReview"}, {"oid": "79314d7245dc8984a69a33004f2ae002e18a442c", "url": "https://github.com/dotCMS/core/commit/79314d7245dc8984a69a33004f2ae002e18a442c", "message": "#17749 feedback done", "committedDate": "2020-01-21T17:46:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTMyMA==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161320", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [A method/constructor should not explicitly throw java.lang.Exception](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">A method/constructor should not explicitly throw java.lang.Exception</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:26Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/HostUtilTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class HostUtilTest extends IntegrationTestBase {\n+\n+    private static HostAPI hostAPI;\n+    private static UserAPI userAPI;\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static Host defaultHost;\n+    private static String defaultHostId;\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        hostAPI = APILocator.getHostAPI();\n+        userAPI = APILocator.getUserAPI();\n+\n+        //Setting the test user\n+        systemUser = userAPI.getSystemUser();\n+        testUser = userAPI.loadByUserByEmail(\"admin@dotcms.com\", systemUser, false);\n+        defaultHost = hostAPI.findDefaultHost( systemUser, false );\n+        defaultHostId=defaultHost.getIdentifier();\n+    }\n+\n+    /**\n+     * Test tryToFindCurrentHost without thread local request\n+     * @throws Exception\n+     */\n+    @Test\n+    public void tryToFindCurrentHost_no_request_on_threadlocal_expected_nopresent_Test () throws Exception {", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTMzMA==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161330", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused imports such as 'com.dotmarketing.util'](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.util'", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">Avoid unused imports such as 'com.dotmarketing.util'</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:27Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/container/ContainerResource.java", "diffHunk": "@@ -11,6 +12,8 @@\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+\n+import com.dotmarketing.util.*;", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTMzNA==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161334", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [A method/constructor should not explicitly throw java.lang.Exception](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">A method/constructor should not explicitly throw java.lang.Exception</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:28Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/HostUtilTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class HostUtilTest extends IntegrationTestBase {\n+\n+    private static HostAPI hostAPI;\n+    private static UserAPI userAPI;\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static Host defaultHost;\n+    private static String defaultHostId;\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        hostAPI = APILocator.getHostAPI();\n+        userAPI = APILocator.getUserAPI();\n+\n+        //Setting the test user\n+        systemUser = userAPI.getSystemUser();\n+        testUser = userAPI.loadByUserByEmail(\"admin@dotcms.com\", systemUser, false);\n+        defaultHost = hostAPI.findDefaultHost( systemUser, false );\n+        defaultHostId=defaultHost.getIdentifier();\n+    }\n+\n+    /**\n+     * Test tryToFindCurrentHost without thread local request\n+     * @throws Exception\n+     */\n+    @Test\n+    public void tryToFindCurrentHost_no_request_on_threadlocal_expected_nopresent_Test () throws Exception {\n+\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(null);\n+        final Optional<Host> hostOpt = HostUtil.tryToFindCurrentHost(testUser);\n+        assertNotNull( hostOpt );\n+        assertFalse( hostOpt.isPresent() );\n+    }\n+\n+    /**\n+     * Test tryToFindCurrentHost with thread local request, default host expected\n+     * @throws Exception\n+     */\n+    @Test\n+    public void tryToFindCurrentHost_with_request_on_threadlocal_expected_default_host_Test () throws Exception {", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTM0MA==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161340", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused imports such as 'org.junit.Assert'](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">Avoid unused imports such as 'org.junit.Assert'</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:29Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/HostUtilTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTM1NQ==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161355", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid empty catch blocks](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: Avoid empty catch blocks", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">Avoid empty catch blocks</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:31Z", "path": "dotCMS/src/main/java/com/dotmarketing/util/HostUtil.java", "diffHunk": "@@ -27,7 +38,75 @@ public static String hostNameUtil(ActionRequest req, User user) throws DotDataEx\n \t\t\n \n \t\treturn h.getTitle()!=null?h.getTitle():\"default\";\n+\t}\n+\n+\t/**\n+\t * Try to find the host on the current thread, empty optional if not able to do it.\n+\t * @param user {@link User}\n+\t * @return Optional Host\n+\t */\n+\tpublic static Optional<Host> tryToFindCurrentHost (final User user) {\n \n+\t\tfinal HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n+\n+\t\treturn null != request?\n+\t\t\tOptional.ofNullable(Try.of(()->WebAPILocator.getHostWebAPI().getCurrentHost(request, user)).getOrNull()):\n+\t\t\tOptional.empty();\n \t}\n \n+\tprivate static Host findCurrentHost () {\n+\n+\t\tfinal Optional<Host> hostOpt = tryToFindCurrentHost(APILocator.systemUser());\n+\t\treturn hostOpt.isPresent()? hostOpt.get():null;\n+\t}\n+\n+\t/**\n+\t * Tries to recover the host from the path, or the current host (if not possible returns the default one)\n+\t * @param path {@link String} path (could be relative or full)\n+\t * @param postHostToken {@link String} is the token that become immediate to the host, for instance if getting the host from a container postHostToken could be \"/application/containers\"\n+\t * @return Optional Host\n+\t */\n+\tpublic static Optional<Host> getHostFromPathOrCurrentHost (final String path, final String postHostToken) {\n+\n+\t\tif (UtilMethods.isSet(path)) {\n+\t\t\ttry {\n+\t\t\t\tfinal Tuple2<String, Host> pathHostTuple = splitPathHost(path, APILocator.systemUser(), postHostToken, HostUtil::findCurrentHost);\n+\t\t\t\treturn Optional.ofNullable(pathHostTuple._2);\n+\t\t\t} catch (DotSecurityException | DotDataException e) {", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTM2Ng==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161366", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [A method/constructor should not explicitly throw java.lang.Exception](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">A method/constructor should not explicitly throw java.lang.Exception</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:32Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/HostUtilTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class HostUtilTest extends IntegrationTestBase {\n+\n+    private static HostAPI hostAPI;\n+    private static UserAPI userAPI;\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static Host defaultHost;\n+    private static String defaultHostId;\n+    @BeforeClass\n+    public static void prepare () throws Exception {", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTM4Mw==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161383", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused imports such as 'com.dotmarketing.util'](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.util'", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">Avoid unused imports such as 'com.dotmarketing.util'</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:34Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/business/ContainerFactoryImpl.java", "diffHunk": "@@ -39,11 +39,7 @@\n import com.dotmarketing.portlets.folders.business.FolderAPI;\r\n import com.dotmarketing.portlets.folders.model.Folder;\r\n import com.dotmarketing.portlets.structure.model.Structure;\r\n-import com.dotmarketing.util.Constants;\r\n-import com.dotmarketing.util.InodeUtils;\r\n-import com.dotmarketing.util.Logger;\r\n-import com.dotmarketing.util.PaginatedArrayList;\r\n-import com.dotmarketing.util.UtilMethods;\r\n+import com.dotmarketing.util.*;\r", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTM5Mw==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161393", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused private fields such as 'defaultHostId'.](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: Avoid unused private fields such as 'defaultHostId'.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">Avoid unused private fields such as 'defaultHostId'.</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:35Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/HostUtilTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class HostUtilTest extends IntegrationTestBase {\n+\n+    private static HostAPI hostAPI;\n+    private static UserAPI userAPI;\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static Host defaultHost;\n+    private static String defaultHostId;", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTQwNg==", "url": "https://github.com/dotCMS/core/pull/17854#discussion_r369161406", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [A method/constructor should not explicitly throw java.lang.Exception](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838)", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4828838\" rel=\"nofollow\">A method/constructor should not explicitly throw java.lang.Exception</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-21T18:13:37Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/HostUtilTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package com.dotmarketing.util;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class HostUtilTest extends IntegrationTestBase {\n+\n+    private static HostAPI hostAPI;\n+    private static UserAPI userAPI;\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static Host defaultHost;\n+    private static String defaultHostId;\n+    @BeforeClass\n+    public static void prepare () throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        hostAPI = APILocator.getHostAPI();\n+        userAPI = APILocator.getUserAPI();\n+\n+        //Setting the test user\n+        systemUser = userAPI.getSystemUser();\n+        testUser = userAPI.loadByUserByEmail(\"admin@dotcms.com\", systemUser, false);\n+        defaultHost = hostAPI.findDefaultHost( systemUser, false );\n+        defaultHostId=defaultHost.getIdentifier();\n+    }\n+\n+    /**\n+     * Test tryToFindCurrentHost without thread local request\n+     * @throws Exception\n+     */\n+    @Test\n+    public void tryToFindCurrentHost_no_request_on_threadlocal_expected_nopresent_Test () throws Exception {\n+\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(null);\n+        final Optional<Host> hostOpt = HostUtil.tryToFindCurrentHost(testUser);\n+        assertNotNull( hostOpt );\n+        assertFalse( hostOpt.isPresent() );\n+    }\n+\n+    /**\n+     * Test tryToFindCurrentHost with thread local request, default host expected\n+     * @throws Exception\n+     */\n+    @Test\n+    public void tryToFindCurrentHost_with_request_on_threadlocal_expected_default_host_Test () throws Exception {\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(request);\n+        final Optional<Host> hostOpt = HostUtil.tryToFindCurrentHost(testUser);\n+        assertNotNull( hostOpt );\n+        assertTrue( hostOpt.isPresent() );\n+        assertEquals(\"Should return the default one\", hostOpt.get().getIdentifier(), defaultHost.getIdentifier());\n+    }\n+\n+    /**\n+     * Test tryToFindCurrentHost with thread local request, with custom host, expected the custom.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void tryToFindCurrentHost_with_request_on_threadlocal_expected_global_host_Test () throws Exception {", "originalCommit": "79314d7245dc8984a69a33004f2ae002e18a442c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}