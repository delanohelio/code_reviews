{"pr_number": 18683, "pr_title": "Issue 18682 delayed delegates", "pr_author": "wezell", "pr_createdAt": "2020-06-17T13:34:11Z", "pr_url": "https://github.com/dotCMS/core/pull/18683", "timeline": [{"oid": "723546e8f9ac763e380df292702f629794384c72", "url": "https://github.com/dotCMS/core/commit/723546e8f9ac763e380df292702f629794384c72", "message": "#18682 runs 50 delegates at a time", "committedDate": "2020-06-17T13:20:10Z", "type": "commit"}, {"oid": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee", "url": "https://github.com/dotCMS/core/commit/7b754ab23aeae22f23566c0bd9da3d79e40c3aee", "message": "#18682 added test", "committedDate": "2020-06-17T13:32:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MjcxMQ==", "url": "https://github.com/dotCMS/core/pull/18683#discussion_r441572711", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Useless parentheses.](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=5713246)", "bodyText": "Issue found: Useless parentheses.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=5713246\" rel=\"nofollow\">Useless parentheses.</a></p>", "author": "dev-dotcms", "createdAt": "2020-06-17T14:06:41Z", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -101,4 +103,44 @@ public void run() {\n         }\n \n     }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that the delayed queue will run jobs in the future, efficiently\n+     * \n+     * @throws Exception\n+     */\n+    \n+    @Test\n+    public void test_delayed_queue() throws Exception{\n+        \n+        // will kill it from the cache in some time.\n+        final DotSubmitter submitter = DotConcurrentFactory.getInstance().getSubmitter();\n+        final AtomicInteger aInt=new AtomicInteger(0);\n+        \n+        // add 50 to the atomicInteger, 3 seconds in the future\n+        int runs = 50;\n+        for(int i=0;i<runs;i++) {\n+            submitter.delay(()-> aInt.addAndGet(1), 3, TimeUnit.SECONDS);\n+        }\n+        \n+        // None of the jobs have been run\n+        assert(aInt.get()==0);", "originalCommit": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MjczMg==", "url": "https://github.com/dotCMS/core/pull/18683#discussion_r441572732", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [JUnit tests should include assert() or fail()](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=5713246)", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=5713246\" rel=\"nofollow\">JUnit tests should include assert() or fail()</a></p>", "author": "dev-dotcms", "createdAt": "2020-06-17T14:06:42Z", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -101,4 +103,44 @@ public void run() {\n         }\n \n     }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that the delayed queue will run jobs in the future, efficiently\n+     * \n+     * @throws Exception\n+     */\n+    \n+    @Test\n+    public void test_delayed_queue() throws Exception{", "originalCommit": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3Mjc0NA==", "url": "https://github.com/dotCMS/core/pull/18683#discussion_r441572744", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Useless parentheses.](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=5713246)", "bodyText": "Issue found: Useless parentheses.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=5713246\" rel=\"nofollow\">Useless parentheses.</a></p>", "author": "dev-dotcms", "createdAt": "2020-06-17T14:06:43Z", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -101,4 +103,44 @@ public void run() {\n         }\n \n     }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that the delayed queue will run jobs in the future, efficiently\n+     * \n+     * @throws Exception\n+     */\n+    \n+    @Test\n+    public void test_delayed_queue() throws Exception{\n+        \n+        // will kill it from the cache in some time.\n+        final DotSubmitter submitter = DotConcurrentFactory.getInstance().getSubmitter();\n+        final AtomicInteger aInt=new AtomicInteger(0);\n+        \n+        // add 50 to the atomicInteger, 3 seconds in the future\n+        int runs = 50;\n+        for(int i=0;i<runs;i++) {\n+            submitter.delay(()-> aInt.addAndGet(1), 3, TimeUnit.SECONDS);\n+        }\n+        \n+        // None of the jobs have been run\n+        assert(aInt.get()==0);\n+        \n+        // rest.  I must rest\n+        Thread.sleep(6000);\n+        \n+        // all of the jobs have been run\n+        assert(aInt.get()==50);", "originalCommit": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}