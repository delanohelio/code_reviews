{"pr_number": 17905, "pr_title": "Issue 17899 string interning", "pr_author": "wezell", "pr_createdAt": "2020-01-24T17:55:00Z", "pr_url": "https://github.com/dotCMS/core/pull/17905", "timeline": [{"oid": "404c99604430a7ced9ef4e354ad65eebbf5b042f", "url": "https://github.com/dotCMS/core/commit/404c99604430a7ced9ef4e354ad65eebbf5b042f", "message": "#17879 allows protocol to be configured", "committedDate": "2020-01-22T14:10:35Z", "type": "commit"}, {"oid": "96952eb7a4304392e0599503f17a8146c628a3b6", "url": "https://github.com/dotCMS/core/commit/96952eb7a4304392e0599503f17a8146c628a3b6", "message": "Merge branch 'master' of https://github.com/dotcms/core", "committedDate": "2020-01-22T17:07:01Z", "type": "commit"}, {"oid": "ac24ebd6c37a1a9b5602bd77c668e3d393eb3839", "url": "https://github.com/dotCMS/core/commit/ac24ebd6c37a1a9b5602bd77c668e3d393eb3839", "message": "Merge branch 'master' of https://github.com/dotcms/core", "committedDate": "2020-01-23T18:11:01Z", "type": "commit"}, {"oid": "cbd5d2df06efeff7e6b768ce970a05b39662eebf", "url": "https://github.com/dotCMS/core/commit/cbd5d2df06efeff7e6b768ce970a05b39662eebf", "message": "Merge branch 'master' of https://github.com/dotcms/core", "committedDate": "2020-01-23T18:57:21Z", "type": "commit"}, {"oid": "319963b8b476acffc38f975949559383cd531f9f", "url": "https://github.com/dotCMS/core/commit/319963b8b476acffc38f975949559383cd531f9f", "message": "#17899 elastic performance", "committedDate": "2020-01-23T21:23:03Z", "type": "commit"}, {"oid": "656602da53ead103e1cea592f35b9854f4093b0d", "url": "https://github.com/dotCMS/core/commit/656602da53ead103e1cea592f35b9854f4093b0d", "message": "#17899 prevent string interning", "committedDate": "2020-01-24T17:46:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAwOQ==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766009", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Local variable 'jsonFactoryField' could be declared final](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429)", "bodyText": "Issue found: Local variable 'jsonFactoryField' could be declared final", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429\" rel=\"nofollow\">Local variable 'jsonFactoryField' could be declared final</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-24T18:01:21Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");", "originalCommit": "656602da53ead103e1cea592f35b9854f4093b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAxNQ==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766015", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Local variable 'x' could be declared final](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429)", "bodyText": "Issue found: Local variable 'x' could be declared final", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429\" rel=\"nofollow\">Local variable 'x' could be declared final</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-24T18:01:23Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "originalCommit": "656602da53ead103e1cea592f35b9854f4093b0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTE5Ng==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r401389196", "bodyText": "yeah x is not a good name", "author": "jdotcms", "createdAt": "2020-04-01T06:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAyNQ==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766025", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429)", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429\" rel=\"nofollow\">Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-24T18:01:25Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");\n+            jsonFactoryField.setAccessible(true);\n+            JsonFactory jsonFactory = (JsonFactory) jsonFactoryField.get(null);\n+\n+            // set the value\n+            Logger.info(RestHighLevelClientProvider.class, \"disabling String.intern() in Jackson\");\n+            jsonFactory.configure(JsonFactory.Feature.INTERN_FIELD_NAMES, false);\n+        } catch (Exception e) {", "originalCommit": "656602da53ead103e1cea592f35b9854f4093b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAzNw==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766037", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid variables with short names like x](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429)", "bodyText": "Issue found: Avoid variables with short names like x", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429\" rel=\"nofollow\">Avoid variables with short names like x</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-24T18:01:26Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "originalCommit": "656602da53ead103e1cea592f35b9854f4093b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjA0Mg==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766042", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Local variable 'jsonFactory' could be declared final](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429)", "bodyText": "Issue found: Local variable 'jsonFactory' could be declared final", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429\" rel=\"nofollow\">Local variable 'jsonFactory' could be declared final</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-24T18:01:27Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");\n+            jsonFactoryField.setAccessible(true);\n+            JsonFactory jsonFactory = (JsonFactory) jsonFactoryField.get(null);", "originalCommit": "656602da53ead103e1cea592f35b9854f4093b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjA1MA==", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766050", "body": "![Codacy](https://app.codacy.com/assets/images/favicon.png) Issue found: [Avoid unused local variables such as 'x'.](https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429)", "bodyText": "Issue found: Avoid unused local variables such as 'x'.", "bodyHTML": "<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\"><img src=\"https://camo.githubusercontent.com/ddf013cbb1295b347431f8757e505fb295e9c7dd5043d9a3a0bf610dd0bb0da7/68747470733a2f2f6170702e636f646163792e636f6d2f6173736574732f696d616765732f66617669636f6e2e706e67\" alt=\"Codacy\" data-canonical-src=\"https://app.codacy.com/assets/images/favicon.png\" style=\"max-width: 100%;\"></a> Issue found: <a href=\"https://app.codacy.com/manual/dotCMS/core/pullRequest?prid=4883429\" rel=\"nofollow\">Avoid unused local variables such as 'x'.</a></p>", "author": "dev-dotcms", "createdAt": "2020-01-24T18:01:28Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "originalCommit": "656602da53ead103e1cea592f35b9854f4093b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}