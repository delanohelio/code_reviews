{"pr_number": 301, "pr_title": "create default ack_status node for moduleVersion. update portal view url", "pr_createdAt": "2020-05-29T16:10:31Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/301", "merge_commit": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "timeline": [{"oid": "62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "url": "https://github.com/redhataccess/pantheon/commit/62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "message": "create default ack_status node for moduleVersion. update portal view url", "committedDate": "2020-05-29T16:08:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzI3NA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r432617274", "body": "I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.", "bodyText": "I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.", "bodyHTML": "<p dir=\"auto\">I'm not sure this is where this creation should happen... but perhaps there's no better place. At the very least lets add a comment indicating that we should re-evaluate where this node gets created.</p>", "author": "carlosmunoz", "createdAt": "2020-05-29T16:59:35Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java", "diffHunk": "@@ -300,6 +294,9 @@ private String buildModule(@Nonnull Module base, @Nonnull Locale locale, @Nonnul\n                         .jcrData().get());\n                 html = asciidoctor.convert(content.toString(), ob.get());\n                 cacheContent(moduleVersion, html);\n+\n+                // ack_status\n+                moduleVersion.ackStatus().getOrCreate();", "originalCommit": "62fbf8d45feecb3ed3997e5ef2b9cbfd2c20d964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMjY3MQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434202671", "bodyText": "comment added", "author": "xdavidson", "createdAt": "2020-06-02T22:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNzI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "dc5de92d26ed920ef46573905699c0fe3c685059", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\nindex 3ae00ca..7fc0c49 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/asciidoctor/AsciidoctorService.java\n", "chunk": "@@ -296,6 +296,7 @@ public class AsciidoctorService {\n                 cacheContent(moduleVersion, html);\n \n                 // ack_status\n+                // TODO: re-evaluate where ack_status node should be created\n                 moduleVersion.ackStatus().getOrCreate();\n             } finally {\n                 asciidoctorPool.returnObject(asciidoctor);\n", "next_change": null}]}}, {"oid": "dc5de92d26ed920ef46573905699c0fe3c685059", "url": "https://github.com/redhataccess/pantheon/commit/dc5de92d26ed920ef46573905699c0fe3c685059", "message": "add new variant-based api", "committedDate": "2020-06-02T22:05:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDYxNw==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434584617", "body": "I would just get rid of the comment", "bodyText": "I would just get rid of the comment", "bodyHTML": "<p dir=\"auto\">I would just get rid of the comment</p>", "author": "carlosmunoz", "createdAt": "2020-06-03T13:53:53Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -102,6 +104,7 @@ protected String getQuery(SlingHttpServletRequest request) {\n                     .append(\"jcr:like(*/*/*/*/metadata/@jcr:title,'%\" + searchParam + \"%') \")\n                     .append(\"or jcr:like(*/*/*/*/metadata/@jcr:description,'%\" + searchParam + \"%')\")\n                     .append(\"or jcr:like(*/*/*/*/cached_html/jcr:content/@jcr:data,'%\" + searchParam + \"%')\")\n+//                    .append(\"or jcr:like(*/*/source/@jcr:created,'%\" + searchParam + \"%') \")", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTQ5MQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434799491", "bodyText": "done", "author": "xdavidson", "createdAt": "2020-06-03T19:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -104,7 +100,6 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n                     .append(\"jcr:like(*/*/*/*/metadata/@jcr:title,'%\" + searchParam + \"%') \")\n                     .append(\"or jcr:like(*/*/*/*/metadata/@jcr:description,'%\" + searchParam + \"%')\")\n                     .append(\"or jcr:like(*/*/*/*/cached_html/jcr:content/@jcr:data,'%\" + searchParam + \"%')\")\n-//                    .append(\"or jcr:like(*/*/source/@jcr:created,'%\" + searchParam + \"%') \")\n                     .append(\")\");\n             queryFilters.add(textFilter);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434587479", "body": "instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.", "bodyText": "instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.", "bodyHTML": "<p dir=\"auto\">instead of this conditional you coul use the traversal api. It would yield cleaner, more concise code.</p>", "author": "carlosmunoz", "createdAt": "2020-06-03T13:57:42Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java", "diffHunk": "@@ -183,11 +187,14 @@ protected String getQuery(SlingHttpServletRequest request) {\n     protected Map<String, Object> resourceToMap(Resource resource) {\n         Module module = resource.adaptTo(Module.class);\n \n-        String variantName = module.getWorkspace()\n+        String variantName = DEFAULT_VARIANT_NAME;\n+        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n                 .moduleVariantDefinitions().get()\n-                .getVariants()\n-                .findFirst().get()\n-                .getName();\n+                .getVariants();\n+\n+        if (mvd != null) {", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMjUzNA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434812534", "bodyText": "updated.", "author": "xdavidson", "createdAt": "2020-06-03T19:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTYxNA==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434869614", "bodyText": "\ud83d\udc4d\n(you could keep traversing all the way down to the variant name and avoid that null check \ud83d\ude03 )", "author": "carlosmunoz", "createdAt": "2020-06-03T21:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -188,9 +183,9 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n         Module module = resource.adaptTo(Module.class);\n \n         String variantName = DEFAULT_VARIANT_NAME;\n-        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n-                .moduleVariantDefinitions().get()\n-                .getVariants();\n+        Stream<ModuleVariantDefinition> mvd = traverseFrom(module)\n+                .toChild(m -> m.getWorkspace().moduleVariantDefinitions())\n+                        .get().getVariants();\n \n         if (mvd != null) {\n             variantName = mvd.findFirst().get().getName();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 4fccb5d..b1329ca 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -188,9 +183,9 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n         Module module = resource.adaptTo(Module.class);\n \n         String variantName = DEFAULT_VARIANT_NAME;\n-        Stream<ModuleVariantDefinition> mvd = module.getWorkspace()\n-                .moduleVariantDefinitions().get()\n-                .getVariants();\n+        Stream<ModuleVariantDefinition> mvd = traverseFrom(module)\n+                .toChild(m -> m.getWorkspace().moduleVariantDefinitions())\n+                        .get().getVariants();\n \n         if (mvd != null) {\n             variantName = mvd.findFirst().get().getName();\n", "next_change": {"commit": "ba1dcee13fb1686a728e6b28c622e6eb64f1ebc3", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex b1329ca..7199123 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -182,14 +182,7 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n     protected Map<String, Object> resourceToMap(Resource resource) {\n         Module module = resource.adaptTo(Module.class);\n \n-        String variantName = DEFAULT_VARIANT_NAME;\n-        Stream<ModuleVariantDefinition> mvd = traverseFrom(module)\n-                .toChild(m -> m.getWorkspace().moduleVariantDefinitions())\n-                        .get().getVariants();\n-\n-        if (mvd != null) {\n-            variantName = mvd.findFirst().get().getName();\n-        }\n+        String variantName = module.getWorkspace().getCanonicalVariantName();\n \n         Optional<Metadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<Metadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n", "next_change": {"commit": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 7199123..42b97c5 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -184,11 +183,11 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n \n         String variantName = module.getWorkspace().getCanonicalVariantName();\n \n-        Optional<Metadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n-        Optional<Metadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n+        Optional<ModuleMetadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n+        Optional<ModuleMetadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<HashableFileResource> sourceFile =\n                 traverseFrom(module)\n-                        .toChild(m -> m.moduleLocale(DEFAULT_MODULE_LOCALE))\n+                        .toChild(m -> m.locale(DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(sourceContent -> sourceContent.draft().isPresent() ? sourceContent.draft() : sourceContent.released())\n                         .getAsOptional();\n", "next_change": {"commit": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex 42b97c5..daaabd5 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -186,11 +232,11 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n         Optional<ModuleMetadata> draftMetadata = module.getDraftMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<ModuleMetadata> releasedMetadata = module.getReleasedMetadata(DEFAULT_MODULE_LOCALE, variantName);\n         Optional<HashableFileResource> sourceFile =\n-                traverseFrom(module)\n+                Child.from(module)\n                         .toChild(m -> m.locale(DEFAULT_MODULE_LOCALE))\n                         .toChild(ModuleLocale::source)\n                         .toChild(sourceContent -> sourceContent.draft().isPresent() ? sourceContent.draft() : sourceContent.released())\n-                        .getAsOptional();\n+                        .asOptional();\n \n         // TODO Need some DTOs to convert to maps\n         Map<String, Object> m = super.resourceToMap(resource);\n", "next_change": {"commit": "af8ca30850bbde8a1332f3fd485ec5005381f41d", "changed_code": [{"header": "diff --git a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\nindex daaabd5..87d9b4f 100644\n--- a/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n+++ b/pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/ModuleListingServlet.java\n", "chunk": "@@ -238,6 +240,10 @@ public class ModuleListingServlet extends AbstractJsonQueryServlet {\n                         .toChild(sourceContent -> sourceContent.draft().isPresent() ? sourceContent.draft() : sourceContent.released())\n                         .asOptional();\n \n+        // get Validations\n+        Optional<Validations> draftValidations = module.getValidations(DEFAULT_MODULE_LOCALE, variantName, \"draft\");\n+        Optional<Validations> releasedValidations = module.getValidations(DEFAULT_MODULE_LOCALE, variantName, \"released\");\n+\n         // TODO Need some DTOs to convert to maps\n         Map<String, Object> m = super.resourceToMap(resource);\n         String resourcePath = resource.getPath();\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "f6573c1be30a74666cd1a1a8f61106de77cc8833", "message": "Merge commit", "committedDate": null}, {"oid": "ba1dcee13fb1686a728e6b28c622e6eb64f1ebc3", "committedDate": "2020-07-08 08:24:50 -0400", "message": "Fixing search variant always being 1st variant which may not be canonical (#331)"}, {"oid": "27dab4069dc5bbf4aceb2b65490b17389c61646e", "committedDate": "2020-07-20 15:16:43 -0400", "message": "Adding Document classes that Module classes now extend (#335)"}, {"oid": "bcfbd457f5b0cffa334da8d08bd33bad76d927ff", "committedDate": "2020-07-22 20:18:59 -0400", "message": "add mixin type to help with fast querying of documents (#349)"}, {"oid": "04fea9d17d0d10ab3f7b295537318e66ff2b00ea", "committedDate": "2020-07-24 14:24:44 -0400", "message": "Adds Assembly classes to our Sling Model for future development work (#351)"}, {"oid": "2ca827c34ef99d327a3543bf4e2c56a6f3100e01", "committedDate": "2020-09-10 11:39:41 -0400", "message": "CCS-3743 - update labels on left nav and search results. add Assembly to the filter (#410)"}, {"oid": "a4cf47d2b7370e71129381fe12d6d722b16fd809", "committedDate": "2020-12-03 14:22:26 -0500", "message": "Search Beta  (#465)"}, {"oid": "a64d0a43283ac47e3ca089cb517eacc88bcd84df", "committedDate": "2020-12-04 10:26:58 -0500", "message": "Search Beta fixes2 (#484)"}, {"oid": "3f6f4904e5b1696321a188b1aa55868eb195a9cf", "committedDate": "2020-12-04 10:51:04 -0500", "message": "eliminate the ResourceTraversal class (#393)"}, {"oid": "371ec48d9386c95f88f4e0b6bb38719f4f0c8002", "committedDate": "2021-03-24 13:26:01 -0400", "message": "Ccs 4270 bulk edit (#545)"}, {"oid": "af8ca30850bbde8a1332f3fd485ec5005381f41d", "committedDate": "2021-04-05 16:48:31 -0400", "message": "Ccs 4274 validations on UI (#560)"}, {"oid": "82e1776950525223ff5d24a70a1a5520e92c32c7", "committedDate": "2021-04-09 16:41:06 -0400", "message": "update UI display for xref validation to adapt to the recent backend changes (#570)"}, {"oid": "629a67d668c8b96472396797d3e56f5179b9585d", "committedDate": "2021-05-05 10:42:16 -0400", "message": "Frontend changes to dates (#587)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4Nzg1NQ==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434587855", "body": "love this url style! :+1: ", "bodyText": "love this url style! \ud83d\udc4d", "bodyHTML": "<p dir=\"auto\">love this url style! <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>", "author": "carlosmunoz", "createdAt": "2020-06-03T13:58:14Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/module/VariantJsonServlet.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.redhat.pantheon.servlet.module;\n+\n+import com.google.common.base.Charsets;\n+import com.ibm.icu.util.ULocale;\n+import com.redhat.pantheon.html.Html;\n+import com.redhat.pantheon.model.ProductVersion;\n+import com.redhat.pantheon.model.api.FileResource;\n+import com.redhat.pantheon.model.module.Metadata;\n+import com.redhat.pantheon.model.module.ModuleVariant;\n+import com.redhat.pantheon.model.module.ModuleVersion;\n+import com.redhat.pantheon.servlet.AbstractJsonSingleQueryServlet;\n+import com.redhat.pantheon.servlet.ServletUtils;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.servlets.annotations.SlingServletPaths;\n+import org.jetbrains.annotations.NotNull;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import javax.jcr.RepositoryException;\n+import javax.servlet.Servlet;\n+import java.util.*;\n+\n+import static com.redhat.pantheon.conf.GlobalConfig.CONTENT_TYPE;\n+import static com.redhat.pantheon.model.api.util.ResourceTraversal.traverseFrom;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+\n+@Component(\n+        service = Servlet.class,\n+        property = {\n+                Constants.SERVICE_DESCRIPTION + \"=Servlet to facilitate GET operation which accepts locale and module uuid to output module data\",\n+                Constants.SERVICE_VENDOR + \"=Red Hat Content Tooling team\"\n+        })\n+// /api/module/variant.json/${variantUuid}\";", "originalCommit": "dc5de92d26ed920ef46573905699c0fe3c685059", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e452d65fef8afb5c15e49472411311d32e366466", "url": "https://github.com/redhataccess/pantheon/commit/e452d65fef8afb5c15e49472411311d32e366466", "message": "update hydra messages to use the variant api", "committedDate": "2020-06-03T18:08:54Z", "type": "commit"}, {"oid": "1ce99b0b382323511fcad0446dc7bff938f0647d", "url": "https://github.com/redhataccess/pantheon/commit/1ce99b0b382323511fcad0446dc7bff938f0647d", "message": "code review fixes", "committedDate": "2020-06-03T19:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2ODQwNg==", "url": "https://github.com/redhataccess/pantheon/pull/301#discussion_r434868406", "body": "Not a blocker, but we should add the uuid field to the `ModuleVariant` model so we can use it.", "bodyText": "Not a blocker, but we should add the uuid field to the ModuleVariant model so we can use it.", "bodyHTML": "<p dir=\"auto\">Not a blocker, but we should add the uuid field to the <code>ModuleVariant</code> model so we can use it.</p>", "author": "carlosmunoz", "createdAt": "2020-06-03T21:29:06Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/extension/HydraIntegration.java", "diffHunk": "@@ -241,32 +242,26 @@ public void checkServerTrusted(X509Certificate[] certs, String authType) {\n     private String buildModuleVersionUri(ModuleVersion moduleVersion) {\n         StringSubstitutor strSubs = new StringSubstitutor();\n         HashMap values = Maps.newHashMap();\n-        values.put(\"moduleUuid\", moduleVersion.getParent().getParent().getParent().getParent().uuid().get());\n-        values.put(\"localeId\", moduleVersion.getParent().getParent().getParent().getName());\n-        values.put(\"variantName\", moduleVersion.getParent().getName());\n+        values.put(\"variantUuid\", moduleVersion.getParent().getValueMap().containsKey(JcrConstants.JCR_UUID) ?", "originalCommit": "1ce99b0b382323511fcad0446dc7bff938f0647d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}