{"pr_number": 7191, "pr_title": "Properly decode $ref", "pr_author": "sbu-WBT", "pr_createdAt": "2020-08-12T21:14:23Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7191", "timeline": [{"oid": "54bb3824302ff8c619b09da84fcb107c98be1309", "url": "https://github.com/OpenAPITools/openapi-generator/commit/54bb3824302ff8c619b09da84fcb107c98be1309", "message": "Properly decode $ref\nfixes #5720", "committedDate": "2020-08-12T21:10:39Z", "type": "commit"}, {"oid": "d492ce20f68a48f0ac46ff51a04e9de4e73e4c1f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d492ce20f68a48f0ac46ff51a04e9de4e73e4c1f", "message": "Specify decoding encoding", "committedDate": "2020-08-12T21:37:19Z", "type": "commit"}, {"oid": "d492ce20f68a48f0ac46ff51a04e9de4e73e4c1f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/d492ce20f68a48f0ac46ff51a04e9de4e73e4c1f", "message": "Specify decoding encoding", "committedDate": "2020-08-12T21:37:19Z", "type": "forcePushed"}, {"oid": "18580bdc67df8e40278e910ac70c94b2f82ab757", "url": "https://github.com/OpenAPITools/openapi-generator/commit/18580bdc67df8e40278e910ac70c94b2f82ab757", "message": "Nicer syntax", "committedDate": "2020-08-12T23:35:28Z", "type": "commit"}, {"oid": "78fb8c3ce455e8101d39a4d12e3ad81ac9248ffc", "url": "https://github.com/OpenAPITools/openapi-generator/commit/78fb8c3ce455e8101d39a4d12e3ad81ac9248ffc", "message": "UTF-8 typo", "committedDate": "2020-08-12T23:43:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAwODA5OQ==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7191#discussion_r477008099", "body": "Shall we decode it at the start of the function `getSimpleRef` instead?", "bodyText": "Shall we decode it at the start of the function getSimpleRef instead?", "bodyHTML": "<p dir=\"auto\">Shall we decode it at the start of the function <code>getSimpleRef</code> instead?</p>", "author": "wing328", "createdAt": "2020-08-26T03:17:06Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -386,6 +388,11 @@ public static String getSimpleRef(String ref) {\n \n         }\n \n+        try {\n+            ref = URLDecoder.decode(ref, \"UTF-8\");\n+        } catch (UnsupportedEncodingException ignored) {\n+        }\n+", "originalCommit": "78fb8c3ce455e8101d39a4d12e3ad81ac9248ffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1MzI0MA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7191#discussion_r477153240", "bodyText": "I had the same thought, but why decoding a String part which gets thrown away? I see no reason to do so\nBy the way, I think we should also unescape these special cases:", "author": "SimonIT", "createdAt": "2020-08-26T09:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAwODA5OQ=="}], "type": "inlineReview"}, {"oid": "5693303a3580ad06fa8ae817256409b6e8052d4f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/5693303a3580ad06fa8ae817256409b6e8052d4f", "message": "Unescape special characters", "committedDate": "2020-08-26T09:41:45Z", "type": "commit"}, {"oid": "e2634d46009f0f477dffdf3517d9d7e268e0638b", "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2634d46009f0f477dffdf3517d9d7e268e0638b", "message": "Change order of unescaping to prevent escaped sequences by accident", "committedDate": "2020-08-26T09:54:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2Njc3Mw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7191#discussion_r482666773", "body": "```suggestion\r\n        // see https://tools.ietf.org/html/rfc6901#section-3\r\n        // Because the characters '~' (%x7E) and '/' (%x2F) have special meanings in\r\n        // JSON Pointer, '~' needs to be encoded as '~0' and '/' needs to be encoded \r\n        // as '~1' when these characters appear in a reference token.\r\n        // This reverses that encoding.\r\n        ref = ref.replace(\"~1\", \"/\").replace(\"~0\", \"~\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ref = ref.replace(\"~1\", \"/\").replace(\"~0\", \"~\");\n          \n          \n            \n                    // see https://tools.ietf.org/html/rfc6901#section-3\n          \n          \n            \n                    // Because the characters '~' (%x7E) and '/' (%x2F) have special meanings in\n          \n          \n            \n                    // JSON Pointer, '~' needs to be encoded as '~0' and '/' needs to be encoded \n          \n          \n            \n                    // as '~1' when these characters appear in a reference token.\n          \n          \n            \n                    // This reverses that encoding.\n          \n          \n            \n                    ref = ref.replace(\"~1\", \"/\").replace(\"~0\", \"~\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"401\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">ref </span><span class=\"pl-k x\">=</span><span class=\"x\"> ref</span><span class=\"pl-k x\">.</span><span class=\"x\">replace(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">~1</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">/</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">)</span><span class=\"pl-k x\">.</span><span class=\"x\">replace(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">~0</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">~</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"401\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c x x-first\">//</span><span class=\"x x-last\"> see https://tools.ietf.org/html/rfc6901#section-3</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"402\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Because the characters '~' (%x7E) and '/' (%x2F) have special meanings in</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"403\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> JSON Pointer, '~' needs to be encoded as '~0' and '/' needs to be encoded </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"404\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> as '~1' when these characters appear in a reference token.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"405\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> This reverses that encoding.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"406\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        ref <span class=\"pl-k\">=</span> ref<span class=\"pl-k\">.</span>replace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>~1<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>replace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>~0<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>~<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "jimschubert", "createdAt": "2020-09-03T02:32:53Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -386,6 +388,13 @@ public static String getSimpleRef(String ref) {\n \n         }\n \n+        try {\n+            ref = URLDecoder.decode(ref, \"UTF-8\");\n+        } catch (UnsupportedEncodingException ignored) {\n+        }\n+\n+        ref = ref.replace(\"~1\", \"/\").replace(\"~0\", \"~\");", "originalCommit": "e2634d46009f0f477dffdf3517d9d7e268e0638b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MjY2NA==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7191#discussion_r482792664", "bodyText": "@jimschubert Also added a unit test", "author": "sbu-WBT", "createdAt": "2020-09-03T08:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2Njc3Mw=="}], "type": "inlineReview"}, {"oid": "b4be8c8496e435fb39d2dcee5d8f05cc53458d54", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b4be8c8496e435fb39d2dcee5d8f05cc53458d54", "message": "Comment for special decoding\n\nCo-authored-by: Jim Schubert <james.schubert@gmail.com>", "committedDate": "2020-09-03T07:52:49Z", "type": "commit"}, {"oid": "7353c19b69b833df04b24ed5215440be15e3843c", "url": "https://github.com/OpenAPITools/openapi-generator/commit/7353c19b69b833df04b24ed5215440be15e3843c", "message": "Add unit test for simple ref decoding", "committedDate": "2020-09-03T08:12:27Z", "type": "commit"}]}