{"pr_number": 7186, "pr_title": "[python-exp] Force camelization of imports", "pr_author": "timgclark", "pr_createdAt": "2020-08-11T15:08:29Z", "pr_url": "https://github.com/OpenAPITools/openapi-generator/pull/7186", "timeline": [{"oid": "be889f0fe3e00c55631b157e3fa058218decda1f", "url": "https://github.com/OpenAPITools/openapi-generator/commit/be889f0fe3e00c55631b157e3fa058218decda1f", "message": "[python-exp] Force camelization of imports", "committedDate": "2020-08-10T20:41:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNDgzNw==", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7186#discussion_r468724837", "body": "Thank you for this fix!\r\n\r\nThis is definitely the right way to fix it.\r\nBecause our tests passed when this import was not working correctly, I am concerned that this corner case can break in the future and we would have no way to tell.\r\n\r\nCan you add a test that verifies that the model class name is correct and the import is correct for a model named oddly? One could add this test in a couple locations:\r\n- the [v3 sample tests](https://github.com/OpenAPITools/openapi-generator/tree/master/samples/openapi3/client/petstore/python-experimental/tests), how about adding a test of the component schema `_special_.model._name` which is named `SpecialModelName` in python OR\r\n    - one would need to add a new fake_api endpoint [(here's an example)](https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml#L928) which sends or receives this model to verify that the import is set correctly in fake_api\r\n- the [java testing file](https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java) for this generator, add a new test with an oddly named component and check its import in an operation (endpoint) that uses that schema", "bodyText": "Thank you for this fix!\nThis is definitely the right way to fix it.\nBecause our tests passed when this import was not working correctly, I am concerned that this corner case can break in the future and we would have no way to tell.\nCan you add a test that verifies that the model class name is correct and the import is correct for a model named oddly? One could add this test in a couple locations:\n\nthe v3 sample tests, how about adding a test of the component schema _special_.model._name which is named SpecialModelName in python OR\n\none would need to add a new fake_api endpoint (here's an example) which sends or receives this model to verify that the import is set correctly in fake_api\n\n\nthe java testing file for this generator, add a new test with an oddly named component and check its import in an operation (endpoint) that uses that schema", "bodyHTML": "<p dir=\"auto\">Thank you for this fix!</p>\n<p dir=\"auto\">This is definitely the right way to fix it.<br>\nBecause our tests passed when this import was not working correctly, I am concerned that this corner case can break in the future and we would have no way to tell.</p>\n<p dir=\"auto\">Can you add a test that verifies that the model class name is correct and the import is correct for a model named oddly? One could add this test in a couple locations:</p>\n<ul dir=\"auto\">\n<li>the <a href=\"https://github.com/OpenAPITools/openapi-generator/tree/master/samples/openapi3/client/petstore/python-experimental/tests\">v3 sample tests</a>, how about adding a test of the component schema <code>_special_.model._name</code> which is named <code>SpecialModelName</code> in python OR\n<ul dir=\"auto\">\n<li>one would need to add a new fake_api endpoint <a href=\"https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml#L928\">(here's an example)</a> which sends or receives this model to verify that the import is set correctly in fake_api</li>\n</ul>\n</li>\n<li>the <a href=\"https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java\">java testing file</a> for this generator, add a new test with an oddly named component and check its import in an operation (endpoint) that uses that schema</li>\n</ul>", "author": "spacether", "createdAt": "2020-08-11T16:52:39Z", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -330,7 +330,7 @@ public String toDefaultValue(Schema p) {\n     @Override\n     public String toModelImport(String name) {\n         // name looks like Cat\n-        return \"from \" + modelPackage() + \".\" + toModelFilename(name) + \" import \"+ name;\n+        return \"from \" + modelPackage() + \".\" + toModelFilename(name) + \" import \"+ toModelName(name);", "originalCommit": "be889f0fe3e00c55631b157e3fa058218decda1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5f8f5c300c2172cc619ce54f46c981e299ec0d2", "url": "https://github.com/OpenAPITools/openapi-generator/commit/b5f8f5c300c2172cc619ce54f46c981e299ec0d2", "message": "Add unit test", "committedDate": "2020-08-11T20:30:15Z", "type": "commit"}]}