{"pr_number": 2857, "pr_title": "[DROOLS-5237] Wrong property reactivity with non getter chain of non-\u2026", "pr_author": "tkobayas", "pr_createdAt": "2020-04-16T03:37:14Z", "pr_url": "https://github.com/kiegroup/drools/pull/2857", "timeline": [{"oid": "a7baecdcd0aabc2c6554fdee65a9321692c19f62", "url": "https://github.com/kiegroup/drools/commit/a7baecdcd0aabc2c6554fdee65a9321692c19f62", "message": "[DROOLS-5237] Wrong property reactivity with non getter chain of non-direct statements", "committedDate": "2020-04-16T05:22:12Z", "type": "commit"}, {"oid": "a7baecdcd0aabc2c6554fdee65a9321692c19f62", "url": "https://github.com/kiegroup/drools/commit/a7baecdcd0aabc2c6554fdee65a9321692c19f62", "message": "[DROOLS-5237] Wrong property reactivity with non getter chain of non-direct statements", "committedDate": "2020-04-16T05:22:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMDg0Mg==", "url": "https://github.com/kiegroup/drools/pull/2857#discussion_r409320842", "body": "Similar to standard-drl, we want to evaluate only direct statements.\r\nFor example, assuming you have\r\n```\r\n{\r\n    System.out.println(\"name.length = \" + $p.getName().length());\r\n    modify($p) { setAge(41) };\r\n}\r\n```\r\nin RHS. findModifiedProperties() takes various MethodCallExpr as methodCallExprs.\r\n- System.out.println(\"name.length = \" + $p.getName().length())\r\n- $p.getName().length()\r\n- $p.getName()\r\n- ($p).setAge(41)\r\n\r\nHowever, what we want to parse are, only direct statements.\r\n- System.out.println(\"name.length = \" + $p.getName().length())\r\n- ($p).setAge(41)\r\n\r\nThen, System.out.println(\"name.length = \" + $p.getName().length()) is not accepted because scope is not $p.\r\nThen, only \"age\" is parsed as modified property.\r\n", "bodyText": "Similar to standard-drl, we want to evaluate only direct statements.\nFor example, assuming you have\n{\n    System.out.println(\"name.length = \" + $p.getName().length());\n    modify($p) { setAge(41) };\n}\n\nin RHS. findModifiedProperties() takes various MethodCallExpr as methodCallExprs.\n\nSystem.out.println(\"name.length = \" + $p.getName().length())\n$p.getName().length()\n$p.getName()\n($p).setAge(41)\n\nHowever, what we want to parse are, only direct statements.\n\nSystem.out.println(\"name.length = \" + $p.getName().length())\n($p).setAge(41)\n\nThen, System.out.println(\"name.length = \" + $p.getName().length()) is not accepted because scope is not $p.\nThen, only \"age\" is parsed as modified property.", "bodyHTML": "<p dir=\"auto\">Similar to standard-drl, we want to evaluate only direct statements.<br>\nFor example, assuming you have</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n    System.out.println(&quot;name.length = &quot; + $p.getName().length());\n    modify($p) { setAge(41) };\n}\"><pre><code>{\n    System.out.println(\"name.length = \" + $p.getName().length());\n    modify($p) { setAge(41) };\n}\n</code></pre></div>\n<p dir=\"auto\">in RHS. findModifiedProperties() takes various MethodCallExpr as methodCallExprs.</p>\n<ul dir=\"auto\">\n<li>System.out.println(\"name.length = \" + $p.getName().length())</li>\n<li>$p.getName().length()</li>\n<li>$p.getName()</li>\n<li>($p).setAge(41)</li>\n</ul>\n<p dir=\"auto\">However, what we want to parse are, only direct statements.</p>\n<ul dir=\"auto\">\n<li>System.out.println(\"name.length = \" + $p.getName().length())</li>\n<li>($p).setAge(41)</li>\n</ul>\n<p dir=\"auto\">Then, System.out.println(\"name.length = \" + $p.getName().length()) is not accepted because scope is not $p.<br>\nThen, only \"age\" is parsed as modified property.</p>", "author": "tkobayas", "createdAt": "2020-04-16T06:51:35Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "diffHunk": "@@ -425,6 +428,10 @@ private AssignExpr createBitMaskField(String updatedVar, MethodCallExpr bitMaskC\n         return modifiedProps;\n     }\n \n+    private boolean isDirectExpression(MethodCallExpr methodCall) {\n+        return methodCall.getParentNode().map(parent -> parent instanceof ExpressionStmt).orElse(false);", "originalCommit": "a7baecdcd0aabc2c6554fdee65a9321692c19f62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}