{"pr_number": 2881, "pr_title": "[JBPM-9129] Start process without triggering a start node", "pr_author": "elguardian", "pr_createdAt": "2020-05-04T08:34:34Z", "pr_url": "https://github.com/kiegroup/drools/pull/2881", "timeline": [{"oid": "3d37797f8bbb7b91eaa2a67d661aa0611045a83a", "url": "https://github.com/kiegroup/drools/commit/3d37797f8bbb7b91eaa2a67d661aa0611045a83a", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-05T06:52:54Z", "type": "forcePushed"}, {"oid": "4406bc7c118efcc0c7d0b0169d6f443f457e428c", "url": "https://github.com/kiegroup/drools/commit/4406bc7c118efcc0c7d0b0169d6f443f457e428c", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-05T06:56:19Z", "type": "forcePushed"}, {"oid": "ca587347d5b886aa6a529344e0979836444cf7e2", "url": "https://github.com/kiegroup/drools/commit/ca587347d5b886aa6a529344e0979836444cf7e2", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-11T13:44:32Z", "type": "forcePushed"}, {"oid": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "url": "https://github.com/kiegroup/drools/commit/7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-11T17:56:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MTA1NQ==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428071055", "body": "Still seems to refer to nodeInstanceIds but I think these are just nodeIds (node definition ids).", "bodyText": "Still seems to refer to nodeInstanceIds but I think these are just nodeIds (node definition ids).", "bodyHTML": "<p dir=\"auto\">Still seems to refer to nodeInstanceIds but I think these are just nodeIds (node definition ids).</p>", "author": "krisv", "createdAt": "2020-05-20T14:44:52Z", "path": "drools-core/src/main/java/org/drools/core/base/WrappedStatefulKnowledgeSessionForRHS.java", "diffHunk": "@@ -775,19 +775,9 @@ public SessionClock getSessionClock() {\n         return delegate.getSessionClock();\n     }\n \n-//    public void switchToRuleUnit(RuleUnit ruleUnit, Activation activation) {\n-//        delegate.getRuleUnitExecutor().switchToRuleUnit(ruleUnit, activation);\n-//    }\n-//\n-//    public void switchToRuleUnit(Class<? extends RuleUnit> ruleUnitClass, Activation activation) {\n-//        delegate.getRuleUnitExecutor().switchToRuleUnit(ruleUnitClass, activation);\n-//    }\n-//\n-//    public void guardRuleUnit(RuleUnit ruleUnit, Activation activation) {\n-//        delegate.getRuleUnitExecutor().guardRuleUnit(ruleUnit, activation);\n-//    }\n-//\n-//    public void guardRuleUnit(Class<? extends RuleUnit> ruleUnitClass, Activation activation) {\n-//        delegate.getRuleUnitExecutor().guardRuleUnit(ruleUnitClass, activation);\n-//    }\n+    @Override\n+    public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeInstancesIds) {", "originalCommit": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0OTU0OQ==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428549549", "bodyText": "done.", "author": "elguardian", "createdAt": "2020-05-21T09:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MTA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MTU4Mg==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428071582", "body": "Same here, this class seem to refer to instance ids in many places, but they are definition ids I believe.", "bodyText": "Same here, this class seem to refer to instance ids in many places, but they are definition ids I believe.", "bodyHTML": "<p dir=\"auto\">Same here, this class seem to refer to instance ids in many places, but they are definition ids I believe.</p>", "author": "krisv", "createdAt": "2020-05-20T14:45:31Z", "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.command.runtime.process;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+\n+import org.drools.core.runtime.impl.ExecutionResultImpl;\n+import org.kie.api.runtime.Context;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.command.CorrelationKeyCommand;\n+import org.kie.internal.command.RegistryContext;\n+import org.kie.internal.jaxb.CorrelationKeyXmlAdapter;\n+import org.kie.internal.process.CorrelationAwareProcessRuntime;\n+import org.kie.internal.process.CorrelationKey;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.NONE)\n+public class StartProcessFromNodeIdsCommand extends StartProcessCommand implements CorrelationKeyCommand {\n+\n+    private static final long serialVersionUID = -6839934578407787510L;\n+\n+    @XmlElementWrapper(name = \"node-instance-id-list\")", "originalCommit": "7c07f7e0b8e2302d1eb7dd9b06ac641085a2510b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0OTYwMA==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428549600", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-21T09:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3MTU4Mg=="}], "type": "inlineReview"}, {"oid": "d897089996b0b8bc9b5345763fd491b7d4be080b", "url": "https://github.com/kiegroup/drools/commit/d897089996b0b8bc9b5345763fd491b7d4be080b", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-21T09:36:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTg1OA==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428579858", "body": "This is the same as parent but class name, that could be resolved by reflection or tailored with a protected attribute", "bodyText": "This is the same as parent but class name, that could be resolved by reflection or tailored with a protected attribute", "bodyHTML": "<p dir=\"auto\">This is the same as parent but class name, that could be resolved by reflection or tailored with a protected attribute</p>", "author": "gmunozfe", "createdAt": "2020-05-21T10:48:16Z", "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.command.runtime.process;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+\n+import org.drools.core.runtime.impl.ExecutionResultImpl;\n+import org.kie.api.runtime.Context;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.command.CorrelationKeyCommand;\n+import org.kie.internal.command.RegistryContext;\n+import org.kie.internal.jaxb.CorrelationKeyXmlAdapter;\n+import org.kie.internal.process.CorrelationAwareProcessRuntime;\n+import org.kie.internal.process.CorrelationKey;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.NONE)\n+public class StartProcessFromNodeIdsCommand extends StartProcessCommand implements CorrelationKeyCommand {\n+\n+    private static final long serialVersionUID = -6839934578407787510L;\n+\n+    @XmlElementWrapper(name = \"node-id-list\")\n+    @XmlElement(name = \"node-id\")\n+    private List<String> nodeIds;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    @XmlJavaTypeAdapter(value = CorrelationKeyXmlAdapter.class)\n+    private CorrelationKey correlationKey;\n+\n+    public StartProcessFromNodeIdsCommand() {\n+    }\n+\n+\n+    public StartProcessFromNodeIdsCommand(String processId, String outIdentifier) {\n+        super(processId);\n+        setOutIdentifier(outIdentifier);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters) {\n+        super(processId);\n+        setParameters(parameters);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters, String outIdentifier) {\n+        this(processId, outIdentifier);\n+        setParameters(parameters);\n+    }\n+\n+    public List<String> getNodeIds() {\n+        return nodeIds;\n+    }\n+\n+    public void setNodeIds(List<String> nodeIds) {\n+        this.nodeIds = nodeIds;\n+    }\n+\n+    public void setCorrelationKey(CorrelationKey key) {\n+        this.correlationKey = key;\n+    }\n+\n+    public CorrelationKey getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    @Override\n+    public ProcessInstance execute(Context context) {\n+        KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n+\n+        if (getData() != null) {\n+            for (Object o : getData()) {\n+                ksession.insert(o);\n+            }\n+        }\n+\n+        String[] ids = nodeIds != null ? nodeIds.stream().toArray(String[]::new) : new String[0];\n+\n+        ProcessInstance processInstance = null;\n+        if (correlationKey == null) {\n+            processInstance = ksession.startProcessFromNodeIds(getProcessId(), getParameters(), ids);\n+        } else {\n+            processInstance = ((CorrelationAwareProcessRuntime) ksession).startProcessFromNodeIds(getProcessId(), correlationKey, getParameters(), ids);\n+        }\n+        if ( getOutIdentifier() != null ) {\n+            ((RegistryContext) context).lookup(ExecutionResultImpl.class).setResult(getOutIdentifier(), processInstance.getId());\n+        }\n+        return processInstance;\n+    }\n+\n+    public String toString() {\n+        final StringBuilder result = new StringBuilder();\n+        result.append(\"session.restartProcess(\");\n+        result.append(getProcessId());\n+        result.append(\", [\");\n+        if (getParameters() != null) {\n+            int i = 0;\n+            for (final Map.Entry<String, Object> entry : getParameters().entrySet()) {\n+                if (i++ > 0) {\n+                    result.append(\", \");\n+                }\n+                result.append(entry.getKey());\n+                result.append(\"=\");\n+                result.append(entry.getValue());\n+            }\n+        }\n+        result.append(\"]);\");\n+        return result.toString();\n+    }", "originalCommit": "d897089996b0b8bc9b5345763fd491b7d4be080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDM2NQ==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r429104365", "bodyText": "removed.", "author": "elguardian", "createdAt": "2020-05-22T08:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3OTg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDM0NQ==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428580345", "body": "Same comment as Kris here to be coherent, use _nodeIds_", "bodyText": "Same comment as Kris here to be coherent, use nodeIds", "bodyHTML": "<p dir=\"auto\">Same comment as Kris here to be coherent, use <em>nodeIds</em></p>", "author": "gmunozfe", "createdAt": "2020-05-21T10:49:30Z", "path": "drools-ruleunit/src/main/java/org/drools/ruleunit/executor/RuleUnitSessionImpl.java", "diffHunk": "@@ -1006,4 +1006,14 @@ public void deactivate() {\n     public boolean tryDeactivate() {\n         return session.tryDeactivate();\n     }\n+\n+    @Override\n+    public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeInstancesIds) {", "originalCommit": "d897089996b0b8bc9b5345763fd491b7d4be080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDYyOQ==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r429104629", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-22T08:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDY0Mg==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428580642", "body": "and same here", "bodyText": "and same here", "bodyHTML": "<p dir=\"auto\">and same here</p>", "author": "gmunozfe", "createdAt": "2020-05-21T10:50:12Z", "path": "drools-templates/src/test/java/org/drools/template/parser/ExternalSheetListenerTest.java", "diffHunk": "@@ -454,6 +454,11 @@ public void fireUntilHalt() {\n                 public void fireUntilHalt(org.kie.api.runtime.rule.AgendaFilter agendaFilter) {\n \n                 }\n+\n+                @Override\n+                public ProcessInstance startProcessFromNodeIds(String processId, Map<String, Object> params, String... nodeInstancesIds) {", "originalCommit": "d897089996b0b8bc9b5345763fd491b7d4be080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwNDgyNA==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r429104824", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-22T08:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MDY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNTI1NA==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428615254", "body": "Should be 2020\r\n```suggestion\r\n * Copyright 2020 Red Hat, Inc. and/or its affiliates.\r\n```", "bodyText": "Should be 2020\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "bodyHTML": "<p dir=\"auto\">Should be 2020</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1 x x-first x-last\">2010</span> <span class=\"pl-smi\">Red</span> <span class=\"pl-smi\">Hat</span>, <span class=\"pl-smi\">Inc</span>. and<span class=\"pl-k\">/</span>or its affiliates.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Copyright</span> <span class=\"pl-c1 x x-first x-last\">2020</span> <span class=\"pl-smi\">Red</span> <span class=\"pl-smi\">Hat</span>, <span class=\"pl-smi\">Inc</span>. and<span class=\"pl-k\">/</span>or its affiliates.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "afalhambra", "createdAt": "2020-05-21T12:14:59Z", "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.", "originalCommit": "d897089996b0b8bc9b5345763fd491b7d4be080b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwMzk0Mw==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r429103943", "bodyText": "done", "author": "elguardian", "createdAt": "2020-05-22T08:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MjMwNg==", "url": "https://github.com/kiegroup/drools/pull/2881#discussion_r428652306", "body": "Wonder if logging `nodeIds` list here could add some value when debugging? wdyt?", "bodyText": "Wonder if logging nodeIds list here could add some value when debugging? wdyt?", "bodyHTML": "<p dir=\"auto\">Wonder if logging <code>nodeIds</code> list here could add some value when debugging? wdyt?</p>", "author": "afalhambra", "createdAt": "2020-05-21T13:31:23Z", "path": "drools-core/src/main/java/org/drools/core/command/runtime/process/StartProcessFromNodeIdsCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2010 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.core.command.runtime.process;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.xml.bind.annotation.XmlAccessType;\n+import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+\n+import org.drools.core.runtime.impl.ExecutionResultImpl;\n+import org.kie.api.runtime.Context;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.api.runtime.process.ProcessInstance;\n+import org.kie.internal.command.CorrelationKeyCommand;\n+import org.kie.internal.command.RegistryContext;\n+import org.kie.internal.jaxb.CorrelationKeyXmlAdapter;\n+import org.kie.internal.process.CorrelationAwareProcessRuntime;\n+import org.kie.internal.process.CorrelationKey;\n+\n+@XmlRootElement\n+@XmlAccessorType(XmlAccessType.NONE)\n+public class StartProcessFromNodeIdsCommand extends StartProcessCommand implements CorrelationKeyCommand {\n+\n+    private static final long serialVersionUID = -6839934578407787510L;\n+\n+    @XmlElementWrapper(name = \"node-id-list\")\n+    @XmlElement(name = \"node-id\")\n+    private List<String> nodeIds;\n+\n+    @XmlElement(name = \"correlation-key\")\n+    @XmlJavaTypeAdapter(value = CorrelationKeyXmlAdapter.class)\n+    private CorrelationKey correlationKey;\n+\n+    public StartProcessFromNodeIdsCommand() {\n+    }\n+\n+\n+    public StartProcessFromNodeIdsCommand(String processId, String outIdentifier) {\n+        super(processId);\n+        setOutIdentifier(outIdentifier);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters) {\n+        super(processId);\n+        setParameters(parameters);\n+    }\n+\n+    public StartProcessFromNodeIdsCommand(String processId, Map<String, Object> parameters, String outIdentifier) {\n+        this(processId, outIdentifier);\n+        setParameters(parameters);\n+    }\n+\n+    public List<String> getNodeIds() {\n+        return nodeIds;\n+    }\n+\n+    public void setNodeIds(List<String> nodeIds) {\n+        this.nodeIds = nodeIds;\n+    }\n+\n+    public void setCorrelationKey(CorrelationKey key) {\n+        this.correlationKey = key;\n+    }\n+\n+    public CorrelationKey getCorrelationKey() {\n+        return correlationKey;\n+    }\n+\n+    @Override\n+    public ProcessInstance execute(Context context) {\n+        KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n+\n+        if (getData() != null) {\n+            for (Object o : getData()) {\n+                ksession.insert(o);\n+            }\n+        }\n+\n+        String[] ids = nodeIds != null ? nodeIds.stream().toArray(String[]::new) : new String[0];\n+\n+        ProcessInstance processInstance = null;\n+        if (correlationKey == null) {\n+            processInstance = ksession.startProcessFromNodeIds(getProcessId(), getParameters(), ids);\n+        } else {\n+            processInstance = ((CorrelationAwareProcessRuntime) ksession).startProcessFromNodeIds(getProcessId(), correlationKey, getParameters(), ids);\n+        }\n+        if ( getOutIdentifier() != null ) {\n+            ((RegistryContext) context).lookup(ExecutionResultImpl.class).setResult(getOutIdentifier(), processInstance.getId());\n+        }\n+        return processInstance;\n+    }\n+\n+    public String toString() {\n+        final StringBuilder result = new StringBuilder();\n+        result.append(\"session.restartProcess(\");\n+        result.append(getProcessId());\n+        result.append(\", [\");\n+        if (getParameters() != null) {\n+            int i = 0;\n+            for (final Map.Entry<String, Object> entry : getParameters().entrySet()) {\n+                if (i++ > 0) {\n+                    result.append(\", \");\n+                }\n+                result.append(entry.getKey());\n+                result.append(\"=\");\n+                result.append(entry.getValue());\n+            }\n+        }\n+        result.append(\"]);\");\n+        return result.toString();\n+    }", "originalCommit": "d897089996b0b8bc9b5345763fd491b7d4be080b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2b7048c57d7b0386a64f888916f42175c061f0b", "url": "https://github.com/kiegroup/drools/commit/d2b7048c57d7b0386a64f888916f42175c061f0b", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-22T08:13:37Z", "type": "commit"}, {"oid": "d2b7048c57d7b0386a64f888916f42175c061f0b", "url": "https://github.com/kiegroup/drools/commit/d2b7048c57d7b0386a64f888916f42175c061f0b", "message": "[JBPM-9129] Start process without triggering a start node\n\nadded new command to restart a process from where it left", "committedDate": "2020-05-22T08:13:37Z", "type": "forcePushed"}]}