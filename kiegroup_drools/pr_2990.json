{"pr_number": 2990, "pr_title": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "pr_author": "Rikkola", "pr_createdAt": "2020-07-14T16:55:18Z", "pr_url": "https://github.com/kiegroup/drools/pull/2990", "timeline": [{"oid": "42d1e74b798c96ed155118eaa9d9c36340884974", "url": "https://github.com/kiegroup/drools/commit/42d1e74b798c96ed155118eaa9d9c36340884974", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-15T08:00:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MjQxMA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454852410", "body": "If the connector is not one that the Guided Rule Model supports, this defaults to predicate.", "bodyText": "If the connector is not one that the Guided Rule Model supports, this defaults to predicate.", "bodyHTML": "<p dir=\"auto\">If the connector is not one that the Guided Rule Model supports, this defaults to predicate.</p>", "author": "Rikkola", "createdAt": "2020-07-15T07:37:00Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MjY2OA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454852668", "body": "Separated this method so it can be overwritten.", "bodyText": "Separated this method so it can be overwritten.", "bodyHTML": "<p dir=\"auto\">Separated this method so it can be overwritten.</p>", "author": "Rikkola", "createdAt": "2020-07-15T07:37:29Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -1124,6 +1122,14 @@ private void generateSingleFieldConstraint(final SingleFieldConstraint constr,\n             }\n         }\n \n+        protected void generatePredicateSingleFieldConstraint(final SingleFieldConstraint constr,", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MzE1Nw==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454853157", "body": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.", "bodyText": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.", "bodyHTML": "<p dir=\"auto\">This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.</p>", "author": "Rikkola", "createdAt": "2020-07-15T07:38:24Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/context/GeneratorContextRuleModelVisitor.java", "diffHunk": "@@ -249,6 +249,11 @@ private void visitRuleModel(final RuleModel model) {\n     }\n \n     private void visitSingleFieldConstraint(final SingleFieldConstraint sfc) {\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+            parseStringPattern(sfc.getValue());\n+            return;\n+        }\n+", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg1MzQ3MA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r454853470", "body": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.\r\n\r\nA bit of redundancy here, but getting rid of it is likely a huge and risky task.", "bodyText": "This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.\nA bit of redundancy here, but getting rid of it is likely a huge and risky task.", "bodyHTML": "<p dir=\"auto\">This fix is not only needed by this, but fixes the behaviour for GRE and BRL condition columns in GDST.</p>\n<p dir=\"auto\">A bit of redundancy here, but getting rid of it is likely a huge and risky task.</p>", "author": "Rikkola", "createdAt": "2020-07-15T07:39:01Z", "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitor.java", "diffHunk": "@@ -255,6 +255,11 @@ private void visitRuleModel(RuleModel model) {\n     }\n \n     private void visitSingleFieldConstraint(SingleFieldConstraint sfc) {\n+        if (BaseSingleFieldConstraint.TYPE_PREDICATE == sfc.getConstraintValueType()){\n+            parseStringPattern(sfc.getValue());\n+            return;\n+        }\n+", "originalCommit": "8e7b568465d7da4523b68400c446f5f5dcfe5e21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "937c6018d012370386e2c086b3811b46e17bf187", "url": "https://github.com/kiegroup/drools/commit/937c6018d012370386e2c086b3811b46e17bf187", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-16T09:21:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457077930", "body": "Shouldn't we implement as `return new EvalExpr(expr).asFieldConstraint(m, factPattern);` ?\r\n\r\nAsking because that `EvalExpr` seems be implemented exactly in same way.", "bodyText": "Shouldn't we implement as return new EvalExpr(expr).asFieldConstraint(m, factPattern); ?\nAsking because that EvalExpr seems be implemented exactly in same way.", "bodyHTML": "<p dir=\"auto\">Shouldn't we implement as <code>return new EvalExpr(expr).asFieldConstraint(m, factPattern);</code> ?</p>\n<p dir=\"auto\">Asking because that <code>EvalExpr</code> seems be implemented exactly in same way.</p>", "author": "jomarko", "createdAt": "2020-07-20T05:57:16Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/main/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceImpl.java", "diffHunk": "@@ -4328,21 +4335,33 @@ private static ExpressionPart getExpressionPart(String expressionPart,\n \n         private final List<Expr> subExprs = new ArrayList<Expr>();\n         private final String connector;\n+        private final String expr;\n \n-        private ComplexExpr(final String connector) {\n+        private ComplexExpr(final String connector,\n+                            final String expr) {\n             this.connector = connector;\n+            this.expr = expr;\n         }\n \n         public FieldConstraint asFieldConstraint(final RuleModel m,\n                                                  final FactPattern factPattern) {\n-            final CompositeFieldConstraint comp = new CompositeFieldConstraint();\n-            comp.setCompositeJunctionType(connector.equals(\"&&\") ? CompositeFieldConstraint.COMPOSITE_TYPE_AND : CompositeFieldConstraint.COMPOSITE_TYPE_OR);\n-            for (final Expr expr : subExprs) {\n-                comp.addConstraint(expr.asFieldConstraint(m,\n-                                                          factPattern));\n-            }\n-            convertLegacyMatchesToNewFormat(comp);\n-            return comp;\n+            if (!connector.equals(\"&&\") && !connector.equals(\"||\")) {\n+\n+                final SingleFieldConstraint con = new SingleFieldConstraint();\n+                con.setConstraintValueType(SingleFieldConstraint.TYPE_PREDICATE);\n+                con.setValue(expr);\n+                return con;", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MjEyNA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457142124", "bodyText": "I'll try this out.", "author": "Rikkola", "createdAt": "2020-07-20T07:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1ODYzOQ==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457158639", "bodyText": "@jomarko Well spotted. Works and less redundancy.", "author": "Rikkola", "createdAt": "2020-07-20T08:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTM5MA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457101390", "body": "I saw in some `if` we were checking `&&` and `||` operators. I am wondering if test like below should pass then.\r\n\r\n```java\r\n    @Test\r\n    public void testMoreComplexExpressionLogicAnd() {\r\n\r\n        final String drl = \"rule \\\"r0\\\"\\n\" +\r\n                \"dialect \\\"mvel\\\"\\n\" +\r\n                \"when\\n\" +\r\n                \"Person( ( age != null ) == true && ( name == null ) == false )\\n\" +\r\n                \"then\\n\" +\r\n                \"end\\n\";\r\n\r\n        final PackageDataModelOracle dmo = mock(PackageDataModelOracle.class);\r\n        final RuleModel m = ruleModelPersistence.unmarshal(drl,\r\n                                                           Collections.EMPTY_LIST,\r\n                                                           dmo);\r\n        final String resultDrl = ruleModelPersistence.marshal(m);\r\n\r\n        final String expectedDrl = \"rule \\\"r0\\\"\\n\" +\r\n                \"dialect \\\"mvel\\\"\\n\" +\r\n                \"when\\n\" +\r\n                \"Person( eval( ( age != null ) == true ) && eval( ( name == null ) == false ) )\\n\" +\r\n                \"then\\n\" +\r\n                \"end\\n\";\r\n        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\r\n    }\r\n```", "bodyText": "I saw in some if we were checking && and || operators. I am wondering if test like below should pass then.\n    @Test\n    public void testMoreComplexExpressionLogicAnd() {\n\n        final String drl = \"rule \\\"r0\\\"\\n\" +\n                \"dialect \\\"mvel\\\"\\n\" +\n                \"when\\n\" +\n                \"Person( ( age != null ) == true && ( name == null ) == false )\\n\" +\n                \"then\\n\" +\n                \"end\\n\";\n\n        final PackageDataModelOracle dmo = mock(PackageDataModelOracle.class);\n        final RuleModel m = ruleModelPersistence.unmarshal(drl,\n                                                           Collections.EMPTY_LIST,\n                                                           dmo);\n        final String resultDrl = ruleModelPersistence.marshal(m);\n\n        final String expectedDrl = \"rule \\\"r0\\\"\\n\" +\n                \"dialect \\\"mvel\\\"\\n\" +\n                \"when\\n\" +\n                \"Person( eval( ( age != null ) == true ) && eval( ( name == null ) == false ) )\\n\" +\n                \"then\\n\" +\n                \"end\\n\";\n        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n    }", "bodyHTML": "<p dir=\"auto\">I saw in some <code>if</code> we were checking <code>&amp;&amp;</code> and <code>||</code> operators. I am wondering if test like below should pass then.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Test\n    public void testMoreComplexExpressionLogicAnd() {\n\n        final String drl = &quot;rule \\&quot;r0\\&quot;\\n&quot; +\n                &quot;dialect \\&quot;mvel\\&quot;\\n&quot; +\n                &quot;when\\n&quot; +\n                &quot;Person( ( age != null ) == true &amp;&amp; ( name == null ) == false )\\n&quot; +\n                &quot;then\\n&quot; +\n                &quot;end\\n&quot;;\n\n        final PackageDataModelOracle dmo = mock(PackageDataModelOracle.class);\n        final RuleModel m = ruleModelPersistence.unmarshal(drl,\n                                                           Collections.EMPTY_LIST,\n                                                           dmo);\n        final String resultDrl = ruleModelPersistence.marshal(m);\n\n        final String expectedDrl = &quot;rule \\&quot;r0\\&quot;\\n&quot; +\n                &quot;dialect \\&quot;mvel\\&quot;\\n&quot; +\n                &quot;when\\n&quot; +\n                &quot;Person( eval( ( age != null ) == true ) &amp;&amp; eval( ( name == null ) == false ) )\\n&quot; +\n                &quot;then\\n&quot; +\n                &quot;end\\n&quot;;\n        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n    }\"><pre>    <span class=\"pl-k\">@Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> testMoreComplexExpressionLogicAnd() {\n\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> drl <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rule <span class=\"pl-cce\">\\\"</span>r0<span class=\"pl-cce\">\\\"\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dialect <span class=\"pl-cce\">\\\"</span>mvel<span class=\"pl-cce\">\\\"\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>when<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Person( ( age != null ) == true &amp;&amp; ( name == null ) == false )<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>then<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">PackageDataModelOracle</span> dmo <span class=\"pl-k\">=</span> mock(<span class=\"pl-smi\">PackageDataModelOracle</span><span class=\"pl-k\">.</span>class);\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">RuleModel</span> m <span class=\"pl-k\">=</span> ruleModelPersistence<span class=\"pl-k\">.</span>unmarshal(drl,\n                                                           <span class=\"pl-smi\">Collections</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EMPTY_LIST</span>,\n                                                           dmo);\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> resultDrl <span class=\"pl-k\">=</span> ruleModelPersistence<span class=\"pl-k\">.</span>marshal(m);\n\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> expectedDrl <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rule <span class=\"pl-cce\">\\\"</span>r0<span class=\"pl-cce\">\\\"\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dialect <span class=\"pl-cce\">\\\"</span>mvel<span class=\"pl-cce\">\\\"\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>when<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Person( eval( ( age != null ) == true ) &amp;&amp; eval( ( name == null ) == false ) )<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>then<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>end<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>;\n        assertEqualsIgnoreWhitespace(expectedDrl, resultDrl);\n    }</pre></div>", "author": "jomarko", "createdAt": "2020-07-20T06:42:58Z", "path": "drools-workbench-models/drools-workbench-models-commons/src/test/java/org/drools/workbench/models/commons/backend/rule/RuleModelDRLPersistenceTest.java", "diffHunk": "@@ -5104,4 +5103,32 @@ public void testMatchesLegacyToNewVersion() {\n         assertEquals(\"matches\", right.getOperator());\n         assertEquals(\"P.*\", right.getValue());\n     }\n+\n+    @Test\n+    /**\n+     * The GRE can not produce this, but the Persistence class is also used by XLS->GDST->XLS conversions.\n+     */\n+    public void testMoreComplexExpression() {", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0MzEyOA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457143128", "bodyText": "This and several more DRL snippets will fail. What we support should probably be limited to what the Guider Rule Editor components can produce, and like in this case, what we want to be able to migrate from XLS to GDST.", "author": "Rikkola", "createdAt": "2020-07-20T07:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwMTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjQyMw==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457106423", "body": "If a boolean is expected as `param1` value, shouldn't this line be rather `        singleFieldConstraint.setValue(\"(age != null) == @{param1}\");` ?", "bodyText": "If a boolean is expected as param1 value, shouldn't this line be rather         singleFieldConstraint.setValue(\"(age != null) == @{param1}\"); ?", "bodyHTML": "<p dir=\"auto\">If a boolean is expected as <code>param1</code> value, shouldn't this line be rather <code>        singleFieldConstraint.setValue(\"(age != null) == @{param1}\");</code> ?</p>", "author": "jomarko", "createdAt": "2020-07-20T06:51:39Z", "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/visitors/RuleModelVisitorTest.java", "diffHunk": "@@ -71,6 +72,27 @@ public void visitSingleFieldConstraint() {\n         assertEquals(\"==\", interpolationVariable.getOperator());\n     }\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+\n+        Map<InterpolationVariable, Integer> variableMap = new HashMap<>();\n+        RuleModelVisitor visitor = new RuleModelVisitor(variableMap);\n+\n+        SingleFieldConstraint singleFieldConstraint = new SingleFieldConstraint();\n+        singleFieldConstraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        singleFieldConstraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE0Mzc3OA==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457143778", "bodyText": "I would keep it with quotes. The GRE components tend to add the quotes since they rely on the fact that MVEL is used.", "author": "Rikkola", "createdAt": "2020-07-20T07:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNjQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzMxMQ==", "url": "https://github.com/kiegroup/drools/pull/2990#discussion_r457107311", "body": "similar question as above", "bodyText": "similar question as above", "bodyHTML": "<p dir=\"auto\">similar question as above</p>", "author": "jomarko", "createdAt": "2020-07-20T06:53:11Z", "path": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/backend/GuidedDTBRDRLPersistenceTest.java", "diffHunk": "@@ -21,19 +21,51 @@\n import java.util.Collection;\n import java.util.function.Function;\n \n+import org.drools.workbench.models.datamodel.rule.BaseSingleFieldConstraint;\n+import org.drools.workbench.models.datamodel.rule.FactPattern;\n import org.drools.workbench.models.datamodel.rule.IAction;\n import org.drools.workbench.models.datamodel.rule.InterpolationVariable;\n import org.drools.workbench.models.datamodel.rule.PluggableIAction;\n import org.drools.workbench.models.datamodel.rule.RuleModel;\n+import org.drools.workbench.models.datamodel.rule.SingleFieldConstraint;\n import org.drools.workbench.models.datamodel.rule.TemplateAware;\n import org.drools.workbench.models.guided.dtable.backend.util.GuidedDTBRDRLPersistence;\n import org.junit.Test;\n import org.kie.soup.project.datamodel.oracle.DataType;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n public class GuidedDTBRDRLPersistenceTest {\n \n+    @Test\n+    public void testSingleFieldConstraintPredicate() {\n+        final GuidedDTBRDRLPersistence persistence = new GuidedDTBRDRLPersistence((key) -> \"true\");\n+\n+        final RuleModel ruleModel = new RuleModel();\n+        ruleModel.name = \"Template aware\";\n+\n+        ruleModel.addRhsItem(new TemplateAwareIAction(\"initialValue\"));\n+        final FactPattern factPattern = new FactPattern(\"Person\");\n+        final SingleFieldConstraint constraint = new SingleFieldConstraint();\n+        constraint.setConstraintValueType(BaseSingleFieldConstraint.TYPE_PREDICATE);\n+        constraint.setValue(\"(age != null) == \\\"@{param1}\\\"\");", "originalCommit": "937c6018d012370386e2c086b3811b46e17bf187", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "url": "https://github.com/kiegroup/drools/commit/1ebbb528089147f03388c2ecb4a6b023d66f6850", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-20T08:09:39Z", "type": "commit"}, {"oid": "1ebbb528089147f03388c2ecb4a6b023d66f6850", "url": "https://github.com/kiegroup/drools/commit/1ebbb528089147f03388c2ecb4a6b023d66f6850", "message": "DROOLS-5507 : Converting excel spreadsheet to guided decision table causes an exception", "committedDate": "2020-07-20T08:09:39Z", "type": "forcePushed"}, {"oid": "da641782ac497e5b1ab6a5162181d28c111dd370", "url": "https://github.com/kiegroup/drools/commit/da641782ac497e5b1ab6a5162181d28c111dd370", "message": "DROOLS-5507: Increase coverage", "committedDate": "2020-07-21T08:51:11Z", "type": "commit"}]}