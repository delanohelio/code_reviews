{"pr_number": 3170, "pr_title": "DROOLS-5733 prevent removing trailing zeros for numbers in scientific\u2026", "pr_author": "TommyNeubert", "pr_createdAt": "2020-10-15T13:22:32Z", "pr_url": "https://github.com/kiegroup/drools/pull/3170", "timeline": [{"oid": "500d78239e9442a997180d87cbc74e19c3528d1e", "url": "https://github.com/kiegroup/drools/commit/500d78239e9442a997180d87cbc74e19c3528d1e", "message": "DROOLS-5733 prevent removing trailing zeros for numbers in scientific notation", "committedDate": "2020-10-15T13:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MTExMw==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r505541113", "body": "@tarilabs seems I was a bit too quick, we found another one :sweat_smile:\r\n\r\nThere's probably a number of other solutions, such as using\r\n```java\r\nString.format(\"%f\", value)\r\n```\r\ninstead of \r\n```java\r\nvalue.toString()\r\n```\r\nIf you'd prefer a different solution, let us know.\r\n\r\nOverall, it's probably not a huge issue - normally, when dealing with large numbers with fractions, one should provide a BigDecimal as input value, instead of a float/double, anyways.\r\nWe just wanted to inform you that this bug exists. We're also fine with you closing this PR if you don't consider it imporant :slightly_smiling_face: ", "bodyText": "@tarilabs seems I was a bit too quick, we found another one \ud83d\ude05\nThere's probably a number of other solutions, such as using\nString.format(\"%f\", value)\ninstead of\nvalue.toString()\nIf you'd prefer a different solution, let us know.\nOverall, it's probably not a huge issue - normally, when dealing with large numbers with fractions, one should provide a BigDecimal as input value, instead of a float/double, anyways.\nWe just wanted to inform you that this bug exists. We're also fine with you closing this PR if you don't consider it imporant \ud83d\ude42", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/tarilabs/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tarilabs\">@tarilabs</a> seems I was a bit too quick, we found another one <g-emoji class=\"g-emoji\" alias=\"sweat_smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png\">\ud83d\ude05</g-emoji></p>\n<p dir=\"auto\">There's probably a number of other solutions, such as using</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"String.format(&quot;%f&quot;, value)\"><pre><span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%f<span class=\"pl-pds\">\"</span></span>, value)</pre></div>\n<p dir=\"auto\">instead of</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"value.toString()\"><pre>value<span class=\"pl-k\">.</span>toString()</pre></div>\n<p dir=\"auto\">If you'd prefer a different solution, let us know.</p>\n<p dir=\"auto\">Overall, it's probably not a huge issue - normally, when dealing with large numbers with fractions, one should provide a BigDecimal as input value, instead of a float/double, anyways.<br>\nWe just wanted to inform you that this bug exists. We're also fine with you closing this PR if you don't consider it imporant <g-emoji class=\"g-emoji\" alias=\"slightly_smiling_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f642.png\">\ud83d\ude42</g-emoji></p>", "author": "j-beyer", "createdAt": "2020-10-15T13:27:49Z", "path": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/util/EvalHelper.java", "diffHunk": "@@ -711,6 +711,9 @@ private static Boolean isEqual(Object l, Object r) {\n     }\n \n     private static String removeTrailingZeros(final String stringNumber) {\n+        if(stringNumber.contains(\"E\")) {\n+            return stringNumber;\n+        }", "originalCommit": "500d78239e9442a997180d87cbc74e19c3528d1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2MDQ4OQ==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r506160489", "bodyText": "when dealing with large numbers with fractions, one should provide a BigDecimal as input value, instead of a float/double, anyways.\n\nexactly, the recommendation is to supply a BigDecimal, as part of input DMNContext.\nHowever, thank-you for mentioning this, and I concur if there is a way to improve the behaviour also when (mis)using the doubles anyway, why not!\nAllow me some time on this one since I recall there was specific reasons we opted for the double->string->BigDecimal in the first place, so I just want to double check with that in mind.\nMany thanks again for letting us know!", "author": "tarilabs", "createdAt": "2020-10-16T08:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MTExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxNTMyMA==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r506415320", "bodyText": "In my opinion the easiest way of doing the double -> string -> BigDecimal conversion is to use:\nBigDecimal result = new BigDecimal(value.toString()).stripTrailingZeros();\n\nand remove the self-written method:\nprivate static String removeTrailingZeros(final String stringNumber) {\n   ...\n}", "author": "TommyNeubert", "createdAt": "2020-10-16T13:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MTExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNTg3Mg==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r507625872", "bodyText": "Unfortunately the solution of the comment\nwould be less ideal, since a call to\ngetBigDecimalOrNull(10.00000000D)\n\nwould cause to return a\nnew BigDecimal(\"1E+1\")\n\nrather then the most naturally expected:\nnew BigDecimal(\"10\")\n\nSo far, the current PR proposal is the most preferable, but I am always open to discuss additional options! :)", "author": "tarilabs", "createdAt": "2020-10-19T10:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MTExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5MDIwMg==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r507690202", "bodyText": "If I'm not mistaken, the current PR proposal would show the same behavior that you described.\ngetBigDecimalOrNull(10.00000000D)\n\nwould also just internally convert the double to \"1E+1\" using toString(), and would pass that to the BigDecimal constructor as well. We just wouldn't strip any trailing zeroes after the E anymore.\nMaybe the above metioned\nString.format(\"%f\", value)\n\nwould change this. We haven't checked the details of that yet, though.", "author": "j-beyer", "createdAt": "2020-10-19T12:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MTExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNTY1NA==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r507715654", "bodyText": "the current PR proposal works fine for me, let's merge this as-is and if later there are suggestion for further improvement we can always revise it. For now the most important part was to avoid the bug when the toString results in something ending with ...E10 or similar exponent ending with zero \ud83d\udc4d", "author": "tarilabs", "createdAt": "2020-10-19T12:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MTExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MzM2OQ==", "url": "https://github.com/kiegroup/drools/pull/3170#discussion_r505543369", "body": "Note: this assertion would break without the change.\r\n```java\r\nvalue.toString()\r\n```\r\nwill produce `1.00000000005E10`, and `removeTrailingZeros()` would change this to `1.00000000005E1`", "bodyText": "Note: this assertion would break without the change.\nvalue.toString()\nwill produce 1.00000000005E10, and removeTrailingZeros() would change this to 1.00000000005E1", "bodyHTML": "<p dir=\"auto\">Note: this assertion would break without the change.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"value.toString()\"><pre>value<span class=\"pl-k\">.</span>toString()</pre></div>\n<p dir=\"auto\">will produce <code>1.00000000005E10</code>, and <code>removeTrailingZeros()</code> would change this to <code>1.00000000005E1</code></p>", "author": "j-beyer", "createdAt": "2020-10-15T13:30:48Z", "path": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/util/EvalHelperTest.java", "diffHunk": "@@ -49,4 +52,12 @@ public void testNormalizeSpace() {\n         assertEquals(\"ab c\", normalizeVariableName(\"ab c  \"));\n         assertEquals(\"a b\", normalizeVariableName(\"a\\u00A0b\"));\n     }\n+    \n+    @Test\n+    public void testGetBigDecimalOrNull() {\n+        assertEquals(new BigDecimal(\"10\"), getBigDecimalOrNull(10d));\n+        assertEquals(new BigDecimal(\"10\"), getBigDecimalOrNull(10.00000000D));\n+        assertEquals(new BigDecimal(\"10000000000.5\"), getBigDecimalOrNull(10000000000.5D));", "originalCommit": "500d78239e9442a997180d87cbc74e19c3528d1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}