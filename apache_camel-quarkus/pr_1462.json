{"pr_number": 1462, "pr_title": "Extension for camel-threadpoolfactory-vertx #1430", "pr_author": "JiriOndrusek", "pr_createdAt": "2020-07-07T13:57:25Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1462", "merge_commit": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "timeline": [{"oid": "c268494b4a53f5efc46f7b54636239e5f14c65f6", "url": "https://github.com/apache/camel-quarkus/commit/c268494b4a53f5efc46f7b54636239e5f14c65f6", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-07-08T07:22:37Z", "type": "forcePushed"}, {"oid": "7313407c95e85e0c327db576d2c01237c993d673", "url": "https://github.com/apache/camel-quarkus/commit/7313407c95e85e0c327db576d2c01237c993d673", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-07-10T14:35:55Z", "type": "forcePushed"}, {"oid": "60bbebc1614c369232787067f45cd3b58271ea34", "url": "https://github.com/apache/camel-quarkus/commit/60bbebc1614c369232787067f45cd3b58271ea34", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-07-10T16:38:07Z", "type": "forcePushed"}, {"oid": "d913ac9684b346701e6c5ae12dbe61c972d8c278", "url": "https://github.com/apache/camel-quarkus/commit/d913ac9684b346701e6c5ae12dbe61c972d8c278", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-07-28T06:49:31Z", "type": "forcePushed"}, {"oid": "c7cdf2339215aec0ca2fca7235e3b79ce2146072", "url": "https://github.com/apache/camel-quarkus/commit/c7cdf2339215aec0ca2fca7235e3b79ce2146072", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-07-28T07:37:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MjUzNw==", "url": "https://github.com/apache/camel-quarkus/pull/1462#discussion_r463452537", "body": "```suggestion\r\n        final ... nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\r\n        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\r\n            if (route.idOrCreate(nodeIdFactory).equals(id)) {\r\n```\r\n\r\nIt would be more effective to get the factory once before starting the loop.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n          \n          \n            \n                        if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n          \n          \n            \n                    final ... nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n          \n          \n            \n                    for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n          \n          \n            \n                        if (route.idOrCreate(nodeIdFactory).equals(id)) {\n          \n      \n    \n    \n  \n\nIt would be more effective to get the factory once before starting the loop.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">RouteTemplateDefinition</span> route <span class=\"pl-k\">:</span> routeTemplateDefinitions) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (route<span class=\"pl-k\">.</span>idOrCreate(camelContext<span class=\"pl-k\">.</span>adapt(<span class=\"pl-smi\">ExtendedCamelContext</span><span class=\"pl-k\">.</span>class)<span class=\"pl-k\">.</span>getNodeIdFactory())<span class=\"pl-k\">.</span>equals(id)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-c1\">...</span> nodeIdFactory <span class=\"pl-k\">=</span> camelContext<span class=\"pl-k\">.</span>adapt(<span class=\"pl-smi\">ExtendedCamelContext</span><span class=\"pl-k\">.</span>class)<span class=\"pl-k\">.</span>getNodeIdFactory();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">RouteTemplateDefinition</span> route <span class=\"pl-k\">:</span> routeTemplateDefinitions) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (route<span class=\"pl-k\">.</span>idOrCreate(nodeIdFactory)<span class=\"pl-k\">.</span>equals(id)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">It would be more effective to get the factory once before starting the loop.</p>", "author": "ppalaga", "createdAt": "2020-07-31T07:35:23Z", "path": "extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java", "diffHunk": "@@ -110,6 +112,91 @@ public synchronized RouteDefinition getRouteDefinition(String id) {\n         return null;\n     }\n \n+    @Override\n+    public List<RouteTemplateDefinition> getRouteTemplateDefinitions() {\n+        return routeTemplateDefinitions;\n+    }\n+\n+    @Override\n+    public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n+        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n+            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {", "originalCommit": "c7cdf2339215aec0ca2fca7235e3b79ce2146072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1NDUzNg==", "url": "https://github.com/apache/camel-quarkus/pull/1462#discussion_r463454536", "bodyText": "No problem, I'll refactor it", "author": "JiriOndrusek", "createdAt": "2020-07-31T07:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MjUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "3c8deb8ca920794c224cdf8fa1a584ec31f427e4", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex e08704eee9..ce7fd3ff1d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -119,8 +120,9 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n+        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n         for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n+            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n                 return route;\n             }\n         }\n", "next_change": {"commit": "9574eb269da786dcfe3fb2709f2625d45ad87d57", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex ce7fd3ff1d..058901db2d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -120,9 +130,8 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n-        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n         for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n+            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n                 return route;\n             }\n         }\n", "next_change": {"commit": "4d2a0f7be8727317df90f84410fce39d7f47afe5", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 058901db2d..8bc65dc37d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -130,8 +131,9 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n+        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n         for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n+            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n                 return route;\n             }\n         }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex e08704eee9..8bc65dc37d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -119,8 +131,9 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n+        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n         for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n+            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n                 return route;\n             }\n         }\n", "next_change": {"commit": "654c08b214f281aadb8abf4017324925b99f915a", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\ndeleted file mode 100644\nindex 8bc65dc37d..0000000000\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ /dev/null\n", "chunk": "@@ -1,442 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.quarkus.core;\n-\n-import java.util.*;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n-\n-import org.apache.camel.CamelContext;\n-import org.apache.camel.ExtendedCamelContext;\n-import org.apache.camel.model.*;\n-import org.apache.camel.model.cloud.ServiceCallConfigurationDefinition;\n-import org.apache.camel.model.rest.RestDefinition;\n-import org.apache.camel.model.transformer.TransformerDefinition;\n-import org.apache.camel.model.validator.ValidatorDefinition;\n-import org.apache.camel.spi.NodeIdFactory;\n-import org.apache.camel.util.CollectionStringBuffer;\n-\n-public abstract class BaseModel implements Model {\n-\n-    private final CamelContext camelContext;\n-\n-    private final List<ModelLifecycleStrategy> modelLifecycleStrategies = new ArrayList<>();\n-    private final List<RouteDefinition> routeDefinitions = new ArrayList<>();\n-    private final List<RouteTemplateDefinition> routeTemplateDefinitions = new ArrayList<>();\n-    private final List<RestDefinition> restDefinitions = new ArrayList<>();\n-    private Map<String, DataFormatDefinition> dataFormats = new HashMap<>();\n-    private List<TransformerDefinition> transformers = new ArrayList<>();\n-    private List<ValidatorDefinition> validators = new ArrayList<>();\n-    private Map<String, ServiceCallConfigurationDefinition> serviceCallConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, HystrixConfigurationDefinition> hystrixConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, Resilience4jConfigurationDefinition> resilience4jConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, FaultToleranceConfigurationDefinition> faultToleranceConfigurations = new ConcurrentHashMap<>();\n-    private Function<RouteDefinition, Boolean> routeFilter;\n-\n-    public BaseModel(CamelContext camelContext) {\n-        this.camelContext = camelContext;\n-    }\n-\n-    public CamelContext getCamelContext() {\n-        return camelContext;\n-    }\n-\n-    @Override\n-    public void addModelLifecycleStrategy(ModelLifecycleStrategy modelLifecycleStrategy) {\n-        this.modelLifecycleStrategies.add(modelLifecycleStrategy);\n-    }\n-\n-    @Override\n-    public List<ModelLifecycleStrategy> getModelLifecycleStrategies() {\n-        return modelLifecycleStrategies;\n-    }\n-\n-    @Override\n-    public synchronized void addRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {\n-        if (routeDefinitions == null || routeDefinitions.isEmpty()) {\n-            return;\n-        }\n-        List<RouteDefinition> list = new ArrayList<>();\n-        routeDefinitions.forEach(r -> {\n-            if (routeFilter == null || routeFilter.apply(r)) {\n-                list.add(r);\n-            }\n-        });\n-\n-        removeRouteDefinitions(list);\n-        this.routeDefinitions.addAll(list);\n-        if (shouldStartRoutes()) {\n-            getCamelContext().adapt(ModelCamelContext.class).startRouteDefinitions(list);\n-        }\n-    }\n-\n-    @Override\n-    public void addRouteDefinition(RouteDefinition routeDefinition) throws Exception {\n-        addRouteDefinitions(Collections.singletonList(routeDefinition));\n-    }\n-\n-    @Override\n-    public synchronized void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {\n-        for (RouteDefinition routeDefinition : routeDefinitions) {\n-            removeRouteDefinition(routeDefinition);\n-        }\n-    }\n-\n-    @Override\n-    public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception {\n-        RouteDefinition toBeRemoved = routeDefinition;\n-        String id = routeDefinition.getId();\n-        if (id != null) {\n-            // remove existing route\n-            camelContext.getRouteController().stopRoute(id);\n-            camelContext.removeRoute(id);\n-            toBeRemoved = getRouteDefinition(id);\n-        }\n-        this.routeDefinitions.remove(toBeRemoved);\n-    }\n-\n-    @Override\n-    public synchronized List<RouteDefinition> getRouteDefinitions() {\n-        return routeDefinitions;\n-    }\n-\n-    @Override\n-    public synchronized RouteDefinition getRouteDefinition(String id) {\n-        for (RouteDefinition route : routeDefinitions) {\n-            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n-                return route;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public List<RouteTemplateDefinition> getRouteTemplateDefinitions() {\n-        return routeTemplateDefinitions;\n-    }\n-\n-    @Override\n-    public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n-        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n-        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n-                return route;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        if (routeTemplateDefinitions == null || routeTemplateDefinitions.isEmpty()) {\n-            return;\n-        }\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n-    }\n-\n-    @Override\n-    public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n-    }\n-\n-    @Override\n-    public void removeRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        routeTemplateDefinitions.remove(routeTemplateDefinition);\n-    }\n-\n-    @Override\n-    public String addRouteFromTemplate(String routeId, String routeTemplateId, Map<String, Object> parameters)\n-            throws Exception {\n-        RouteTemplateDefinition target = null;\n-        for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n-            if (routeTemplateId.equals(def.getId())) {\n-                target = def;\n-                break;\n-            }\n-        }\n-        if (target == null) {\n-            throw new IllegalArgumentException(\"Cannot find RouteTemplate with id \" + routeTemplateId);\n-        }\n-\n-        CollectionStringBuffer cbs = new CollectionStringBuffer();\n-        final Map<String, Object> prop = new HashMap();\n-        // include default values first from the template (and validate that we have inputs for all required parameters)\n-        if (target.getTemplateParameters() != null) {\n-            for (RouteTemplateParameterDefinition temp : target.getTemplateParameters()) {\n-                if (temp.getDefaultValue() != null) {\n-                    prop.put(temp.getName(), temp.getDefaultValue());\n-                } else {\n-                    // this is a required parameter do we have that as input\n-                    if (!parameters.containsKey(temp.getName())) {\n-                        cbs.append(temp.getName());\n-                    }\n-                }\n-            }\n-        }\n-        if (!cbs.isEmpty()) {\n-            throw new IllegalArgumentException(\"Route template \" + routeTemplateId\n-                    + \" the following mandatory parameters must be provided: \" + cbs.toString());\n-        }\n-        // then override with user parameters\n-        if (parameters != null) {\n-            prop.putAll(parameters);\n-        }\n-\n-        RouteDefinition def = target.asRouteDefinition();\n-        if (routeId != null) {\n-            def.setId(routeId);\n-        }\n-        def.setTemplateParameters(prop);\n-        addRouteDefinition(def);\n-        return def.getId();\n-    }\n-\n-    @Override\n-    public synchronized List<RestDefinition> getRestDefinitions() {\n-        return restDefinitions;\n-    }\n-\n-    @Override\n-    public synchronized void addRestDefinitions(Collection<RestDefinition> restDefinitions, boolean addToRoutes)\n-            throws Exception {\n-        if (restDefinitions == null || restDefinitions.isEmpty()) {\n-            return;\n-        }\n-\n-        this.restDefinitions.addAll(restDefinitions);\n-        if (addToRoutes) {\n-            // rests are also routes so need to add them there too\n-            for (final RestDefinition restDefinition : restDefinitions) {\n-                List<RouteDefinition> routeDefinitions = restDefinition.asRouteDefinition(camelContext);\n-                addRouteDefinitions(routeDefinitions);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public ServiceCallConfigurationDefinition getServiceCallConfiguration(String serviceName) {\n-        if (serviceName == null) {\n-            serviceName = \"\";\n-        }\n-\n-        return serviceCallConfigurations.get(serviceName);\n-    }\n-\n-    @Override\n-    public void setServiceCallConfiguration(ServiceCallConfigurationDefinition configuration) {\n-        serviceCallConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setServiceCallConfigurations(List<ServiceCallConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (ServiceCallConfigurationDefinition configuration : configurations) {\n-                serviceCallConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addServiceCallConfiguration(String serviceName, ServiceCallConfigurationDefinition configuration) {\n-        serviceCallConfigurations.put(serviceName, configuration);\n-    }\n-\n-    @Override\n-    public HystrixConfigurationDefinition getHystrixConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return hystrixConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setHystrixConfiguration(HystrixConfigurationDefinition configuration) {\n-        hystrixConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setHystrixConfigurations(List<HystrixConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (HystrixConfigurationDefinition configuration : configurations) {\n-                hystrixConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addHystrixConfiguration(String id, HystrixConfigurationDefinition configuration) {\n-        hystrixConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public Resilience4jConfigurationDefinition getResilience4jConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return resilience4jConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setResilience4jConfiguration(Resilience4jConfigurationDefinition configuration) {\n-        resilience4jConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setResilience4jConfigurations(List<Resilience4jConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (Resilience4jConfigurationDefinition configuration : configurations) {\n-                resilience4jConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addResilience4jConfiguration(String id, Resilience4jConfigurationDefinition configuration) {\n-        resilience4jConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public FaultToleranceConfigurationDefinition getFaultToleranceConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return faultToleranceConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setFaultToleranceConfiguration(FaultToleranceConfigurationDefinition configuration) {\n-        faultToleranceConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setFaultToleranceConfigurations(List<FaultToleranceConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (FaultToleranceConfigurationDefinition configuration : configurations) {\n-                faultToleranceConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addFaultToleranceConfiguration(String id, FaultToleranceConfigurationDefinition configuration) {\n-        faultToleranceConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public DataFormatDefinition resolveDataFormatDefinition(String name) {\n-        // lookup type and create the data format from it\n-        DataFormatDefinition type = lookup(camelContext, name, DataFormatDefinition.class);\n-        if (type == null && getDataFormats() != null) {\n-            type = getDataFormats().get(name);\n-        }\n-        return type;\n-    }\n-\n-    @Override\n-    public ProcessorDefinition getProcessorDefinition(String id) {\n-        for (RouteDefinition route : getRouteDefinitions()) {\n-            Iterator<ProcessorDefinition> it = ProcessorDefinitionHelper.filterTypeInOutputs(route.getOutputs(),\n-                    ProcessorDefinition.class);\n-            while (it.hasNext()) {\n-                ProcessorDefinition proc = it.next();\n-                if (id.equals(proc.getId())) {\n-                    return proc;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public <T extends ProcessorDefinition<T>> T getProcessorDefinition(String id, Class<T> type) {\n-        ProcessorDefinition answer = getProcessorDefinition(id);\n-        if (answer != null) {\n-            return type.cast(answer);\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public void setDataFormats(Map<String, DataFormatDefinition> dataFormats) {\n-        this.dataFormats = dataFormats;\n-    }\n-\n-    @Override\n-    public Map<String, DataFormatDefinition> getDataFormats() {\n-        return dataFormats;\n-    }\n-\n-    @Override\n-    public void setTransformers(List<TransformerDefinition> transformers) {\n-        this.transformers = transformers;\n-    }\n-\n-    @Override\n-    public List<TransformerDefinition> getTransformers() {\n-        return transformers;\n-    }\n-\n-    @Override\n-    public void setValidators(List<ValidatorDefinition> validators) {\n-        this.validators = validators;\n-    }\n-\n-    @Override\n-    public List<ValidatorDefinition> getValidators() {\n-        return validators;\n-    }\n-\n-    @Override\n-    public void setRouteFilterPattern(String include, String exclude) {\n-        setRouteFilter(RouteFilters.filterByPattern(include, exclude));\n-    }\n-\n-    @Override\n-    public Function<RouteDefinition, Boolean> getRouteFilter() {\n-        return routeFilter;\n-    }\n-\n-    @Override\n-    public void setRouteFilter(Function<RouteDefinition, Boolean> routeFilter) {\n-        this.routeFilter = routeFilter;\n-    }\n-\n-    /**\n-     * Should we start newly added routes?\n-     */\n-    protected boolean shouldStartRoutes() {\n-        return camelContext.isStarted() && !camelContext.isStarting();\n-    }\n-\n-    protected static <T> T lookup(CamelContext context, String ref, Class<T> type) {\n-        try {\n-            return context.getRegistry().lookupByNameAndType(ref, type);\n-        } catch (Exception e) {\n-            // need to ignore not same type and return it as null\n-            return null;\n-        }\n-    }\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "message": "Merge commit", "committedDate": null}, {"oid": "a68c4a39b37546fe5fc5f668fed04fe401af4d1d", "committedDate": "2020-09-02 12:56:02 +0100", "message": "Upgrade to Camel 3.5.0"}, {"oid": "70966912a6dcaa0af3d12ab8e266514c7576e8c8", "committedDate": "2020-10-17 09:47:43 +0200", "message": "Upgrade to Camel 3.6.0"}, {"oid": "0805ab42690bffb29f8234137787418483aff8a1", "committedDate": "2020-11-05 07:02:44 +0000", "message": "core: allign BaseModel with org.apache.camel.impl.DefaultModel"}, {"oid": "cfc118e1960c4b59ce3eb72151bfc7f154aea436", "committedDate": "2020-12-17 09:20:24 +0000", "message": "Upgrade to Camel 3.7.0"}, {"oid": "64c0743a60bda8e2aba46950752c3a271662c5de", "committedDate": "2021-05-25 07:13:57 +0100", "message": "Adapt to latest Camel API changes"}, {"oid": "7ec917e9bfa67357fdbcfd06ac4f5f82d3937136", "committedDate": "2021-05-25 07:13:57 +0100", "message": "Adapt to latest Camel API changes"}, {"oid": "78f03720944ce50481a9b63fe8b70cdb78a5443e", "committedDate": "2021-06-09 11:17:20 +0200", "message": "core: sync BaseModel and FastCamelContext with Camel main"}, {"oid": "654c08b214f281aadb8abf4017324925b99f915a", "committedDate": "2021-06-11 15:16:27 +0100", "message": "Avoid duplicating code in BaseModel & FastCamelContext"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MzQwNQ==", "url": "https://github.com/apache/camel-quarkus/pull/1462#discussion_r463453405", "body": "Does not look right. Perhaps this?\r\n```suggestion\r\n        this.routeTemplateDefinitions.addAll(routeTemplateDefinition);\r\n```", "bodyText": "Does not look right. Perhaps this?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n          \n          \n            \n                    this.routeTemplateDefinitions.addAll(routeTemplateDefinition);", "bodyHTML": "<p dir=\"auto\">Does not look right. Perhaps this?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>routeTemplateDefinitions<span class=\"pl-k\">.</span>addAll(<span class=\"x x-first x-last\">routeTemplateDefinitions</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>routeTemplateDefinitions<span class=\"pl-k\">.</span>addAll(<span class=\"x x-first x-last\">routeTemplateDefinition</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ppalaga", "createdAt": "2020-07-31T07:37:31Z", "path": "extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java", "diffHunk": "@@ -110,6 +112,91 @@ public synchronized RouteDefinition getRouteDefinition(String id) {\n         return null;\n     }\n \n+    @Override\n+    public List<RouteTemplateDefinition> getRouteTemplateDefinitions() {\n+        return routeTemplateDefinitions;\n+    }\n+\n+    @Override\n+    public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n+        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n+            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n+                return route;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void addRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n+        if (routeTemplateDefinitions == null || routeTemplateDefinitions.isEmpty()) {\n+            return;\n+        }\n+        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+    }\n+\n+    @Override\n+    public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n+        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);", "originalCommit": "c7cdf2339215aec0ca2fca7235e3b79ce2146072", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1NDkwOQ==", "url": "https://github.com/apache/camel-quarkus/pull/1462#discussion_r463454909", "bodyText": "I agree that current state doesn't make sense. I'll fix it.", "author": "JiriOndrusek", "createdAt": "2020-07-31T07:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MzQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c8deb8ca920794c224cdf8fa1a584ec31f427e4", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex e08704eee9..ce7fd3ff1d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -137,12 +139,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.remove(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "f4fe535aea5718f54efd8057cca580c4f42ffe0b", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex ce7fd3ff1d..8a6eab216b 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -144,7 +144,7 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.remove(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "9574eb269da786dcfe3fb2709f2625d45ad87d57", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 8a6eab216b..058901db2d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -139,12 +148,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n+        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "4d2a0f7be8727317df90f84410fce39d7f47afe5", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 058901db2d..8bc65dc37d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -148,12 +150,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex e08704eee9..8bc65dc37d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -137,12 +150,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "70966912a6dcaa0af3d12ab8e266514c7576e8c8", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 8bc65dc37d..3facae2e7c 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -163,6 +154,11 @@ public abstract class BaseModel implements Model {\n         routeTemplateDefinitions.remove(routeTemplateDefinition);\n     }\n \n+    @Override\n+    public void addRouteTemplateDefinitionConverter(String templateIdPattern, RouteTemplateDefinition.Converter converter) {\n+        routeTemplateConverters.put(templateIdPattern, converter);\n+    }\n+\n     @Override\n     public String addRouteFromTemplate(String routeId, String routeTemplateId, Map<String, Object> parameters)\n             throws Exception {\n", "next_change": {"commit": "0805ab42690bffb29f8234137787418483aff8a1", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 3facae2e7c..8ee50e071b 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -160,7 +188,7 @@ public abstract class BaseModel implements Model {\n     }\n \n     @Override\n-    public String addRouteFromTemplate(String routeId, String routeTemplateId, Map<String, Object> parameters)\n+    public String addRouteFromTemplate(final String routeId, final String routeTemplateId, final Map<String, Object> parameters)\n             throws Exception {\n         RouteTemplateDefinition target = null;\n         for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n", "next_change": {"commit": "7ec917e9bfa67357fdbcfd06ac4f5f82d3937136", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 8ee50e071b..4233ddc493 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -190,6 +197,16 @@ public abstract class BaseModel implements Model {\n     @Override\n     public String addRouteFromTemplate(final String routeId, final String routeTemplateId, final Map<String, Object> parameters)\n             throws Exception {\n+        RouteTemplateContext rtc = new DefaultRouteTemplateContext(camelContext);\n+        if (parameters != null) {\n+            parameters.forEach(rtc::setParameter);\n+        }\n+        return addRouteFromTemplate(routeId, routeTemplateId, rtc);\n+    }\n+\n+    @Override\n+    public String addRouteFromTemplate(String routeId, String routeTemplateId, RouteTemplateContext routeTemplateContext)\n+            throws Exception {\n         RouteTemplateDefinition target = null;\n         for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n             if (routeTemplateId.equals(def.getId())) {\n", "next_change": {"commit": "654c08b214f281aadb8abf4017324925b99f915a", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\ndeleted file mode 100644\nindex 4233ddc493..0000000000\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ /dev/null\n", "chunk": "@@ -1,529 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.quarkus.core;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.StringJoiner;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n-\n-import org.apache.camel.CamelContext;\n-import org.apache.camel.ExtendedCamelContext;\n-import org.apache.camel.FailedToCreateRouteFromTemplateException;\n-import org.apache.camel.RouteTemplateContext;\n-import org.apache.camel.impl.DefaultModelReifierFactory;\n-import org.apache.camel.model.DataFormatDefinition;\n-import org.apache.camel.model.DefaultRouteTemplateContext;\n-import org.apache.camel.model.FaultToleranceConfigurationDefinition;\n-import org.apache.camel.model.HystrixConfigurationDefinition;\n-import org.apache.camel.model.Model;\n-import org.apache.camel.model.ModelCamelContext;\n-import org.apache.camel.model.ModelLifecycleStrategy;\n-import org.apache.camel.model.ProcessorDefinition;\n-import org.apache.camel.model.ProcessorDefinitionHelper;\n-import org.apache.camel.model.Resilience4jConfigurationDefinition;\n-import org.apache.camel.model.RouteDefinition;\n-import org.apache.camel.model.RouteDefinitionHelper;\n-import org.apache.camel.model.RouteFilters;\n-import org.apache.camel.model.RouteTemplateDefinition;\n-import org.apache.camel.model.RouteTemplateParameterDefinition;\n-import org.apache.camel.model.cloud.ServiceCallConfigurationDefinition;\n-import org.apache.camel.model.rest.RestDefinition;\n-import org.apache.camel.model.transformer.TransformerDefinition;\n-import org.apache.camel.model.validator.ValidatorDefinition;\n-import org.apache.camel.spi.ModelReifierFactory;\n-import org.apache.camel.spi.NodeIdFactory;\n-import org.apache.camel.util.AntPathMatcher;\n-\n-public abstract class BaseModel implements Model {\n-\n-    private final CamelContext camelContext;\n-\n-    private ModelReifierFactory modelReifierFactory = new DefaultModelReifierFactory();\n-    private final List<RouteDefinition> routeDefinitions = new ArrayList<>();\n-    private final List<RouteTemplateDefinition> routeTemplateDefinitions = new ArrayList<>();\n-    private final List<RestDefinition> restDefinitions = new ArrayList<>();\n-    private final Map<String, RouteTemplateDefinition.Converter> routeTemplateConverters = new ConcurrentHashMap<>();\n-    private final List<ModelLifecycleStrategy> modelLifecycleStrategies = new ArrayList<>();\n-    private Map<String, DataFormatDefinition> dataFormats = new HashMap<>();\n-    private List<TransformerDefinition> transformers = new ArrayList<>();\n-    private List<ValidatorDefinition> validators = new ArrayList<>();\n-    private Map<String, ServiceCallConfigurationDefinition> serviceCallConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, HystrixConfigurationDefinition> hystrixConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, Resilience4jConfigurationDefinition> resilience4jConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, FaultToleranceConfigurationDefinition> faultToleranceConfigurations = new ConcurrentHashMap<>();\n-    private Function<RouteDefinition, Boolean> routeFilter;\n-\n-    public BaseModel(CamelContext camelContext) {\n-        this.camelContext = camelContext;\n-    }\n-\n-    protected static <T> T lookup(CamelContext context, String ref, Class<T> type) {\n-        try {\n-            return context.getRegistry().lookupByNameAndType(ref, type);\n-        } catch (Exception e) {\n-            // need to ignore not same type and return it as null\n-            return null;\n-        }\n-    }\n-\n-    public CamelContext getCamelContext() {\n-        return camelContext;\n-    }\n-\n-    @Override\n-    public synchronized void addRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {\n-        if (routeDefinitions == null || routeDefinitions.isEmpty()) {\n-            return;\n-        }\n-        List<RouteDefinition> list = new ArrayList<>();\n-        routeDefinitions.forEach(r -> {\n-            if (routeFilter == null || routeFilter.apply(r)) {\n-                list.add(r);\n-            }\n-        });\n-\n-        removeRouteDefinitions(list);\n-        this.routeDefinitions.addAll(list);\n-        if (shouldStartRoutes()) {\n-            getCamelContext().adapt(ModelCamelContext.class).startRouteDefinitions(list);\n-        }\n-    }\n-\n-    @Override\n-    public void addRouteDefinition(RouteDefinition routeDefinition) throws Exception {\n-        addRouteDefinitions(Collections.singletonList(routeDefinition));\n-    }\n-\n-    @Override\n-    public synchronized void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {\n-        for (RouteDefinition routeDefinition : routeDefinitions) {\n-            removeRouteDefinition(routeDefinition);\n-        }\n-    }\n-\n-    @Override\n-    public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception {\n-        RouteDefinition toBeRemoved = routeDefinition;\n-        String id = routeDefinition.getId();\n-        if (id != null) {\n-            // remove existing route\n-            camelContext.getRouteController().stopRoute(id);\n-            camelContext.removeRoute(id);\n-            toBeRemoved = getRouteDefinition(id);\n-        }\n-        this.routeDefinitions.remove(toBeRemoved);\n-    }\n-\n-    @Override\n-    public synchronized List<RouteDefinition> getRouteDefinitions() {\n-        return routeDefinitions;\n-    }\n-\n-    @Override\n-    public synchronized RouteDefinition getRouteDefinition(String id) {\n-        for (RouteDefinition route : routeDefinitions) {\n-            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n-                return route;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public List<RouteTemplateDefinition> getRouteTemplateDefinitions() {\n-        return routeTemplateDefinitions;\n-    }\n-\n-    @Override\n-    public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n-        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n-        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n-                return route;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        if (routeTemplateDefinitions == null || routeTemplateDefinitions.isEmpty()) {\n-            return;\n-        }\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n-    }\n-\n-    @Override\n-    public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n-    }\n-\n-    @Override\n-    public void removeRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        routeTemplateDefinitions.remove(routeTemplateDefinition);\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinitionConverter(String templateIdPattern, RouteTemplateDefinition.Converter converter) {\n-        routeTemplateConverters.put(templateIdPattern, converter);\n-    }\n-\n-    @Override\n-    public String addRouteFromTemplate(final String routeId, final String routeTemplateId, final Map<String, Object> parameters)\n-            throws Exception {\n-        RouteTemplateContext rtc = new DefaultRouteTemplateContext(camelContext);\n-        if (parameters != null) {\n-            parameters.forEach(rtc::setParameter);\n-        }\n-        return addRouteFromTemplate(routeId, routeTemplateId, rtc);\n-    }\n-\n-    @Override\n-    public String addRouteFromTemplate(String routeId, String routeTemplateId, RouteTemplateContext routeTemplateContext)\n-            throws Exception {\n-        RouteTemplateDefinition target = null;\n-        for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n-            if (routeTemplateId.equals(def.getId())) {\n-                target = def;\n-                break;\n-            }\n-        }\n-        if (target == null) {\n-            throw new IllegalArgumentException(\"Cannot find RouteTemplate with id \" + routeTemplateId);\n-        }\n-\n-        // apply configurer if any present\n-        if (target.getConfigurer() != null) {\n-            target.getConfigurer().accept(routeTemplateContext);\n-        }\n-\n-        final Map<String, Object> prop = new HashMap<>();\n-        // include default values first from the template (and validate that we have inputs for all required parameters)\n-        if (target.getTemplateParameters() != null) {\n-            StringJoiner templatesBuilder = new StringJoiner(\", \");\n-\n-            for (RouteTemplateParameterDefinition temp : target.getTemplateParameters()) {\n-                if (temp.getDefaultValue() != null) {\n-                    prop.put(temp.getName(), temp.getDefaultValue());\n-                } else {\n-                    // this is a required parameter do we have that as input\n-                    if (!routeTemplateContext.getParameters().containsKey(temp.getName())) {\n-                        templatesBuilder.add(temp.getName());\n-                    }\n-                }\n-            }\n-            if (templatesBuilder.length() > 0) {\n-                throw new IllegalArgumentException(\n-                        \"Route template \" + routeTemplateId + \" the following mandatory parameters must be provided: \"\n-                                + templatesBuilder.toString());\n-            }\n-        }\n-\n-        // then override with user parameters\n-        if (routeTemplateContext.getParameters() != null) {\n-            prop.putAll(routeTemplateContext.getParameters());\n-        }\n-\n-        RouteTemplateDefinition.Converter converter = RouteTemplateDefinition.Converter.DEFAULT_CONVERTER;\n-\n-        for (Map.Entry<String, RouteTemplateDefinition.Converter> entry : routeTemplateConverters.entrySet()) {\n-            final String key = entry.getKey();\n-            final String templateId = target.getId();\n-\n-            if (\"*\".equals(key) || templateId.equals(key)) {\n-                converter = entry.getValue();\n-                break;\n-            } else if (AntPathMatcher.INSTANCE.match(key, templateId)) {\n-                converter = entry.getValue();\n-                break;\n-            } else if (templateId.matches(key)) {\n-                converter = entry.getValue();\n-                break;\n-            }\n-        }\n-\n-        RouteDefinition def = converter.apply(target, prop);\n-        if (routeId != null) {\n-            def.setId(routeId);\n-        }\n-        def.setTemplateParameters(prop);\n-        def.setRouteTemplateContext(routeTemplateContext);\n-\n-        // assign ids to the routes and validate that the id's are all unique\n-        String duplicate = RouteDefinitionHelper.validateUniqueIds(def, routeDefinitions);\n-        if (duplicate != null) {\n-            throw new FailedToCreateRouteFromTemplateException(\n-                    routeId, routeTemplateId,\n-                    \"duplicate id detected: \" + duplicate + \". Please correct ids to be unique among all your routes.\");\n-        }\n-        addRouteDefinition(def);\n-        return def.getId();\n-    }\n-\n-    @Override\n-    public synchronized List<RestDefinition> getRestDefinitions() {\n-        return restDefinitions;\n-    }\n-\n-    @Override\n-    public synchronized void addRestDefinitions(Collection<RestDefinition> restDefinitions, boolean addToRoutes)\n-            throws Exception {\n-        if (restDefinitions == null || restDefinitions.isEmpty()) {\n-            return;\n-        }\n-\n-        this.restDefinitions.addAll(restDefinitions);\n-        if (addToRoutes) {\n-            // rests are also routes so need to add them there too\n-            for (final RestDefinition restDefinition : restDefinitions) {\n-                List<RouteDefinition> routeDefinitions = restDefinition.asRouteDefinition(camelContext);\n-                addRouteDefinitions(routeDefinitions);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public ServiceCallConfigurationDefinition getServiceCallConfiguration(String serviceName) {\n-        if (serviceName == null) {\n-            serviceName = \"\";\n-        }\n-\n-        return serviceCallConfigurations.get(serviceName);\n-    }\n-\n-    @Override\n-    public void setServiceCallConfiguration(ServiceCallConfigurationDefinition configuration) {\n-        serviceCallConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setServiceCallConfigurations(List<ServiceCallConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (ServiceCallConfigurationDefinition configuration : configurations) {\n-                serviceCallConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addServiceCallConfiguration(String serviceName, ServiceCallConfigurationDefinition configuration) {\n-        serviceCallConfigurations.put(serviceName, configuration);\n-    }\n-\n-    @Override\n-    public HystrixConfigurationDefinition getHystrixConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return hystrixConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setHystrixConfiguration(HystrixConfigurationDefinition configuration) {\n-        hystrixConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setHystrixConfigurations(List<HystrixConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (HystrixConfigurationDefinition configuration : configurations) {\n-                hystrixConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addHystrixConfiguration(String id, HystrixConfigurationDefinition configuration) {\n-        hystrixConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public Resilience4jConfigurationDefinition getResilience4jConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return resilience4jConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setResilience4jConfiguration(Resilience4jConfigurationDefinition configuration) {\n-        resilience4jConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setResilience4jConfigurations(List<Resilience4jConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (Resilience4jConfigurationDefinition configuration : configurations) {\n-                resilience4jConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addResilience4jConfiguration(String id, Resilience4jConfigurationDefinition configuration) {\n-        resilience4jConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public FaultToleranceConfigurationDefinition getFaultToleranceConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return faultToleranceConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setFaultToleranceConfiguration(FaultToleranceConfigurationDefinition configuration) {\n-        faultToleranceConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setFaultToleranceConfigurations(List<FaultToleranceConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (FaultToleranceConfigurationDefinition configuration : configurations) {\n-                faultToleranceConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addFaultToleranceConfiguration(String id, FaultToleranceConfigurationDefinition configuration) {\n-        faultToleranceConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public DataFormatDefinition resolveDataFormatDefinition(String name) {\n-        // lookup type and create the data format from it\n-        DataFormatDefinition type = lookup(camelContext, name, DataFormatDefinition.class);\n-        if (type == null && getDataFormats() != null) {\n-            type = getDataFormats().get(name);\n-        }\n-        return type;\n-    }\n-\n-    @Override\n-    public ProcessorDefinition getProcessorDefinition(String id) {\n-        for (RouteDefinition route : getRouteDefinitions()) {\n-            Iterator<ProcessorDefinition> it = ProcessorDefinitionHelper.filterTypeInOutputs(route.getOutputs(),\n-                    ProcessorDefinition.class).iterator();\n-            while (it.hasNext()) {\n-                ProcessorDefinition proc = it.next();\n-                if (id.equals(proc.getId())) {\n-                    return proc;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public <T extends ProcessorDefinition<T>> T getProcessorDefinition(String id, Class<T> type) {\n-        ProcessorDefinition answer = getProcessorDefinition(id);\n-        if (answer != null) {\n-            return type.cast(answer);\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Map<String, DataFormatDefinition> getDataFormats() {\n-        return dataFormats;\n-    }\n-\n-    @Override\n-    public void setDataFormats(Map<String, DataFormatDefinition> dataFormats) {\n-        this.dataFormats = dataFormats;\n-    }\n-\n-    @Override\n-    public List<TransformerDefinition> getTransformers() {\n-        return transformers;\n-    }\n-\n-    @Override\n-    public void setTransformers(List<TransformerDefinition> transformers) {\n-        this.transformers = transformers;\n-    }\n-\n-    @Override\n-    public List<ValidatorDefinition> getValidators() {\n-        return validators;\n-    }\n-\n-    @Override\n-    public void setValidators(List<ValidatorDefinition> validators) {\n-        this.validators = validators;\n-    }\n-\n-    @Override\n-    public void setRouteFilterPattern(String include, String exclude) {\n-        setRouteFilter(RouteFilters.filterByPattern(include, exclude));\n-    }\n-\n-    @Override\n-    public Function<RouteDefinition, Boolean> getRouteFilter() {\n-        return routeFilter;\n-    }\n-\n-    @Override\n-    public void setRouteFilter(Function<RouteDefinition, Boolean> routeFilter) {\n-        this.routeFilter = routeFilter;\n-    }\n-\n-    @Override\n-    public void addModelLifecycleStrategy(ModelLifecycleStrategy modelLifecycleStrategy) {\n-        this.modelLifecycleStrategies.add(modelLifecycleStrategy);\n-    }\n-\n-    @Override\n-    public List<ModelLifecycleStrategy> getModelLifecycleStrategies() {\n-        return modelLifecycleStrategies;\n-    }\n-\n-    @Override\n-    public ModelReifierFactory getModelReifierFactory() {\n-        return modelReifierFactory;\n-    }\n-\n-    @Override\n-    public void setModelReifierFactory(ModelReifierFactory modelReifierFactory) {\n-        this.modelReifierFactory = modelReifierFactory;\n-    }\n-\n-    /**\n-     * Should we start newly added routes?\n-     */\n-    protected boolean shouldStartRoutes() {\n-        return camelContext.isStarted() && !camelContext.isStarting();\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "message": "Merge commit", "committedDate": null}, {"oid": "a68c4a39b37546fe5fc5f668fed04fe401af4d1d", "committedDate": "2020-09-02 12:56:02 +0100", "message": "Upgrade to Camel 3.5.0"}, {"oid": "70966912a6dcaa0af3d12ab8e266514c7576e8c8", "committedDate": "2020-10-17 09:47:43 +0200", "message": "Upgrade to Camel 3.6.0"}, {"oid": "0805ab42690bffb29f8234137787418483aff8a1", "committedDate": "2020-11-05 07:02:44 +0000", "message": "core: allign BaseModel with org.apache.camel.impl.DefaultModel"}, {"oid": "cfc118e1960c4b59ce3eb72151bfc7f154aea436", "committedDate": "2020-12-17 09:20:24 +0000", "message": "Upgrade to Camel 3.7.0"}, {"oid": "64c0743a60bda8e2aba46950752c3a271662c5de", "committedDate": "2021-05-25 07:13:57 +0100", "message": "Adapt to latest Camel API changes"}, {"oid": "7ec917e9bfa67357fdbcfd06ac4f5f82d3937136", "committedDate": "2021-05-25 07:13:57 +0100", "message": "Adapt to latest Camel API changes"}, {"oid": "78f03720944ce50481a9b63fe8b70cdb78a5443e", "committedDate": "2021-06-09 11:17:20 +0200", "message": "core: sync BaseModel and FastCamelContext with Camel main"}, {"oid": "654c08b214f281aadb8abf4017324925b99f915a", "committedDate": "2021-06-11 15:16:27 +0100", "message": "Avoid duplicating code in BaseModel & FastCamelContext"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MzgzOA==", "url": "https://github.com/apache/camel-quarkus/pull/1462#discussion_r463453838", "body": "Does not look right either. Maybe this?\r\n```suggestion\r\n        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\r\n```", "bodyText": "Does not look right either. Maybe this?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n          \n          \n            \n                    this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);", "bodyHTML": "<p dir=\"auto\">Does not look right either. Maybe this?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        routeTemplateDefinitions<span class=\"pl-k\">.</span>removeAll(routeTemplateDefinitions);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1 x x-first\">this</span><span class=\"pl-k x x-last\">.</span>routeTemplateDefinitions<span class=\"pl-k\">.</span>removeAll(routeTemplateDefinitions);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ppalaga", "createdAt": "2020-07-31T07:38:36Z", "path": "extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java", "diffHunk": "@@ -110,6 +112,91 @@ public synchronized RouteDefinition getRouteDefinition(String id) {\n         return null;\n     }\n \n+    @Override\n+    public List<RouteTemplateDefinition> getRouteTemplateDefinitions() {\n+        return routeTemplateDefinitions;\n+    }\n+\n+    @Override\n+    public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n+        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n+            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n+                return route;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void addRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n+        if (routeTemplateDefinitions == null || routeTemplateDefinitions.isEmpty()) {\n+            return;\n+        }\n+        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+    }\n+\n+    @Override\n+    public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n+        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+    }\n+\n+    @Override\n+    public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n+        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);", "originalCommit": "c7cdf2339215aec0ca2fca7235e3b79ce2146072", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8deb8ca920794c224cdf8fa1a584ec31f427e4", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex e08704eee9..ce7fd3ff1d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -137,12 +139,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.remove(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "f4fe535aea5718f54efd8057cca580c4f42ffe0b", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex ce7fd3ff1d..8a6eab216b 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -144,7 +144,7 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.remove(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "9574eb269da786dcfe3fb2709f2625d45ad87d57", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 8a6eab216b..058901db2d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -139,12 +148,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n+        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "4d2a0f7be8727317df90f84410fce39d7f47afe5", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 058901db2d..8bc65dc37d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -148,12 +150,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex e08704eee9..8bc65dc37d 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -137,12 +150,12 @@ public abstract class BaseModel implements Model {\n \n     @Override\n     public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n     }\n \n     @Override\n     public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n+        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n     }\n \n     @Override\n", "next_change": {"commit": "70966912a6dcaa0af3d12ab8e266514c7576e8c8", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 8bc65dc37d..3facae2e7c 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -163,6 +154,11 @@ public abstract class BaseModel implements Model {\n         routeTemplateDefinitions.remove(routeTemplateDefinition);\n     }\n \n+    @Override\n+    public void addRouteTemplateDefinitionConverter(String templateIdPattern, RouteTemplateDefinition.Converter converter) {\n+        routeTemplateConverters.put(templateIdPattern, converter);\n+    }\n+\n     @Override\n     public String addRouteFromTemplate(String routeId, String routeTemplateId, Map<String, Object> parameters)\n             throws Exception {\n", "next_change": {"commit": "0805ab42690bffb29f8234137787418483aff8a1", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 3facae2e7c..8ee50e071b 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -160,7 +188,7 @@ public abstract class BaseModel implements Model {\n     }\n \n     @Override\n-    public String addRouteFromTemplate(String routeId, String routeTemplateId, Map<String, Object> parameters)\n+    public String addRouteFromTemplate(final String routeId, final String routeTemplateId, final Map<String, Object> parameters)\n             throws Exception {\n         RouteTemplateDefinition target = null;\n         for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n", "next_change": {"commit": "7ec917e9bfa67357fdbcfd06ac4f5f82d3937136", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\nindex 8ee50e071b..4233ddc493 100644\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n", "chunk": "@@ -190,6 +197,16 @@ public abstract class BaseModel implements Model {\n     @Override\n     public String addRouteFromTemplate(final String routeId, final String routeTemplateId, final Map<String, Object> parameters)\n             throws Exception {\n+        RouteTemplateContext rtc = new DefaultRouteTemplateContext(camelContext);\n+        if (parameters != null) {\n+            parameters.forEach(rtc::setParameter);\n+        }\n+        return addRouteFromTemplate(routeId, routeTemplateId, rtc);\n+    }\n+\n+    @Override\n+    public String addRouteFromTemplate(String routeId, String routeTemplateId, RouteTemplateContext routeTemplateContext)\n+            throws Exception {\n         RouteTemplateDefinition target = null;\n         for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n             if (routeTemplateId.equals(def.getId())) {\n", "next_change": {"commit": "654c08b214f281aadb8abf4017324925b99f915a", "changed_code": [{"header": "diff --git a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java b/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\ndeleted file mode 100644\nindex 4233ddc493..0000000000\n--- a/extensions-core/core/runtime/src/main/java/org/apache/camel/quarkus/core/BaseModel.java\n+++ /dev/null\n", "chunk": "@@ -1,529 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.camel.quarkus.core;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.StringJoiner;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n-\n-import org.apache.camel.CamelContext;\n-import org.apache.camel.ExtendedCamelContext;\n-import org.apache.camel.FailedToCreateRouteFromTemplateException;\n-import org.apache.camel.RouteTemplateContext;\n-import org.apache.camel.impl.DefaultModelReifierFactory;\n-import org.apache.camel.model.DataFormatDefinition;\n-import org.apache.camel.model.DefaultRouteTemplateContext;\n-import org.apache.camel.model.FaultToleranceConfigurationDefinition;\n-import org.apache.camel.model.HystrixConfigurationDefinition;\n-import org.apache.camel.model.Model;\n-import org.apache.camel.model.ModelCamelContext;\n-import org.apache.camel.model.ModelLifecycleStrategy;\n-import org.apache.camel.model.ProcessorDefinition;\n-import org.apache.camel.model.ProcessorDefinitionHelper;\n-import org.apache.camel.model.Resilience4jConfigurationDefinition;\n-import org.apache.camel.model.RouteDefinition;\n-import org.apache.camel.model.RouteDefinitionHelper;\n-import org.apache.camel.model.RouteFilters;\n-import org.apache.camel.model.RouteTemplateDefinition;\n-import org.apache.camel.model.RouteTemplateParameterDefinition;\n-import org.apache.camel.model.cloud.ServiceCallConfigurationDefinition;\n-import org.apache.camel.model.rest.RestDefinition;\n-import org.apache.camel.model.transformer.TransformerDefinition;\n-import org.apache.camel.model.validator.ValidatorDefinition;\n-import org.apache.camel.spi.ModelReifierFactory;\n-import org.apache.camel.spi.NodeIdFactory;\n-import org.apache.camel.util.AntPathMatcher;\n-\n-public abstract class BaseModel implements Model {\n-\n-    private final CamelContext camelContext;\n-\n-    private ModelReifierFactory modelReifierFactory = new DefaultModelReifierFactory();\n-    private final List<RouteDefinition> routeDefinitions = new ArrayList<>();\n-    private final List<RouteTemplateDefinition> routeTemplateDefinitions = new ArrayList<>();\n-    private final List<RestDefinition> restDefinitions = new ArrayList<>();\n-    private final Map<String, RouteTemplateDefinition.Converter> routeTemplateConverters = new ConcurrentHashMap<>();\n-    private final List<ModelLifecycleStrategy> modelLifecycleStrategies = new ArrayList<>();\n-    private Map<String, DataFormatDefinition> dataFormats = new HashMap<>();\n-    private List<TransformerDefinition> transformers = new ArrayList<>();\n-    private List<ValidatorDefinition> validators = new ArrayList<>();\n-    private Map<String, ServiceCallConfigurationDefinition> serviceCallConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, HystrixConfigurationDefinition> hystrixConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, Resilience4jConfigurationDefinition> resilience4jConfigurations = new ConcurrentHashMap<>();\n-    private Map<String, FaultToleranceConfigurationDefinition> faultToleranceConfigurations = new ConcurrentHashMap<>();\n-    private Function<RouteDefinition, Boolean> routeFilter;\n-\n-    public BaseModel(CamelContext camelContext) {\n-        this.camelContext = camelContext;\n-    }\n-\n-    protected static <T> T lookup(CamelContext context, String ref, Class<T> type) {\n-        try {\n-            return context.getRegistry().lookupByNameAndType(ref, type);\n-        } catch (Exception e) {\n-            // need to ignore not same type and return it as null\n-            return null;\n-        }\n-    }\n-\n-    public CamelContext getCamelContext() {\n-        return camelContext;\n-    }\n-\n-    @Override\n-    public synchronized void addRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {\n-        if (routeDefinitions == null || routeDefinitions.isEmpty()) {\n-            return;\n-        }\n-        List<RouteDefinition> list = new ArrayList<>();\n-        routeDefinitions.forEach(r -> {\n-            if (routeFilter == null || routeFilter.apply(r)) {\n-                list.add(r);\n-            }\n-        });\n-\n-        removeRouteDefinitions(list);\n-        this.routeDefinitions.addAll(list);\n-        if (shouldStartRoutes()) {\n-            getCamelContext().adapt(ModelCamelContext.class).startRouteDefinitions(list);\n-        }\n-    }\n-\n-    @Override\n-    public void addRouteDefinition(RouteDefinition routeDefinition) throws Exception {\n-        addRouteDefinitions(Collections.singletonList(routeDefinition));\n-    }\n-\n-    @Override\n-    public synchronized void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {\n-        for (RouteDefinition routeDefinition : routeDefinitions) {\n-            removeRouteDefinition(routeDefinition);\n-        }\n-    }\n-\n-    @Override\n-    public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception {\n-        RouteDefinition toBeRemoved = routeDefinition;\n-        String id = routeDefinition.getId();\n-        if (id != null) {\n-            // remove existing route\n-            camelContext.getRouteController().stopRoute(id);\n-            camelContext.removeRoute(id);\n-            toBeRemoved = getRouteDefinition(id);\n-        }\n-        this.routeDefinitions.remove(toBeRemoved);\n-    }\n-\n-    @Override\n-    public synchronized List<RouteDefinition> getRouteDefinitions() {\n-        return routeDefinitions;\n-    }\n-\n-    @Override\n-    public synchronized RouteDefinition getRouteDefinition(String id) {\n-        for (RouteDefinition route : routeDefinitions) {\n-            if (route.idOrCreate(camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory()).equals(id)) {\n-                return route;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public List<RouteTemplateDefinition> getRouteTemplateDefinitions() {\n-        return routeTemplateDefinitions;\n-    }\n-\n-    @Override\n-    public RouteTemplateDefinition getRouteTemplateDefinition(String id) {\n-        NodeIdFactory nodeIdFactory = camelContext.adapt(ExtendedCamelContext.class).getNodeIdFactory();\n-        for (RouteTemplateDefinition route : routeTemplateDefinitions) {\n-            if (route.idOrCreate(nodeIdFactory).equals(id)) {\n-                return route;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        if (routeTemplateDefinitions == null || routeTemplateDefinitions.isEmpty()) {\n-            return;\n-        }\n-        this.routeTemplateDefinitions.addAll(routeTemplateDefinitions);\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        this.routeTemplateDefinitions.add(routeTemplateDefinition);\n-    }\n-\n-    @Override\n-    public void removeRouteTemplateDefinitions(Collection<RouteTemplateDefinition> routeTemplateDefinitions) throws Exception {\n-        this.routeTemplateDefinitions.removeAll(routeTemplateDefinitions);\n-    }\n-\n-    @Override\n-    public void removeRouteTemplateDefinition(RouteTemplateDefinition routeTemplateDefinition) throws Exception {\n-        routeTemplateDefinitions.remove(routeTemplateDefinition);\n-    }\n-\n-    @Override\n-    public void addRouteTemplateDefinitionConverter(String templateIdPattern, RouteTemplateDefinition.Converter converter) {\n-        routeTemplateConverters.put(templateIdPattern, converter);\n-    }\n-\n-    @Override\n-    public String addRouteFromTemplate(final String routeId, final String routeTemplateId, final Map<String, Object> parameters)\n-            throws Exception {\n-        RouteTemplateContext rtc = new DefaultRouteTemplateContext(camelContext);\n-        if (parameters != null) {\n-            parameters.forEach(rtc::setParameter);\n-        }\n-        return addRouteFromTemplate(routeId, routeTemplateId, rtc);\n-    }\n-\n-    @Override\n-    public String addRouteFromTemplate(String routeId, String routeTemplateId, RouteTemplateContext routeTemplateContext)\n-            throws Exception {\n-        RouteTemplateDefinition target = null;\n-        for (RouteTemplateDefinition def : routeTemplateDefinitions) {\n-            if (routeTemplateId.equals(def.getId())) {\n-                target = def;\n-                break;\n-            }\n-        }\n-        if (target == null) {\n-            throw new IllegalArgumentException(\"Cannot find RouteTemplate with id \" + routeTemplateId);\n-        }\n-\n-        // apply configurer if any present\n-        if (target.getConfigurer() != null) {\n-            target.getConfigurer().accept(routeTemplateContext);\n-        }\n-\n-        final Map<String, Object> prop = new HashMap<>();\n-        // include default values first from the template (and validate that we have inputs for all required parameters)\n-        if (target.getTemplateParameters() != null) {\n-            StringJoiner templatesBuilder = new StringJoiner(\", \");\n-\n-            for (RouteTemplateParameterDefinition temp : target.getTemplateParameters()) {\n-                if (temp.getDefaultValue() != null) {\n-                    prop.put(temp.getName(), temp.getDefaultValue());\n-                } else {\n-                    // this is a required parameter do we have that as input\n-                    if (!routeTemplateContext.getParameters().containsKey(temp.getName())) {\n-                        templatesBuilder.add(temp.getName());\n-                    }\n-                }\n-            }\n-            if (templatesBuilder.length() > 0) {\n-                throw new IllegalArgumentException(\n-                        \"Route template \" + routeTemplateId + \" the following mandatory parameters must be provided: \"\n-                                + templatesBuilder.toString());\n-            }\n-        }\n-\n-        // then override with user parameters\n-        if (routeTemplateContext.getParameters() != null) {\n-            prop.putAll(routeTemplateContext.getParameters());\n-        }\n-\n-        RouteTemplateDefinition.Converter converter = RouteTemplateDefinition.Converter.DEFAULT_CONVERTER;\n-\n-        for (Map.Entry<String, RouteTemplateDefinition.Converter> entry : routeTemplateConverters.entrySet()) {\n-            final String key = entry.getKey();\n-            final String templateId = target.getId();\n-\n-            if (\"*\".equals(key) || templateId.equals(key)) {\n-                converter = entry.getValue();\n-                break;\n-            } else if (AntPathMatcher.INSTANCE.match(key, templateId)) {\n-                converter = entry.getValue();\n-                break;\n-            } else if (templateId.matches(key)) {\n-                converter = entry.getValue();\n-                break;\n-            }\n-        }\n-\n-        RouteDefinition def = converter.apply(target, prop);\n-        if (routeId != null) {\n-            def.setId(routeId);\n-        }\n-        def.setTemplateParameters(prop);\n-        def.setRouteTemplateContext(routeTemplateContext);\n-\n-        // assign ids to the routes and validate that the id's are all unique\n-        String duplicate = RouteDefinitionHelper.validateUniqueIds(def, routeDefinitions);\n-        if (duplicate != null) {\n-            throw new FailedToCreateRouteFromTemplateException(\n-                    routeId, routeTemplateId,\n-                    \"duplicate id detected: \" + duplicate + \". Please correct ids to be unique among all your routes.\");\n-        }\n-        addRouteDefinition(def);\n-        return def.getId();\n-    }\n-\n-    @Override\n-    public synchronized List<RestDefinition> getRestDefinitions() {\n-        return restDefinitions;\n-    }\n-\n-    @Override\n-    public synchronized void addRestDefinitions(Collection<RestDefinition> restDefinitions, boolean addToRoutes)\n-            throws Exception {\n-        if (restDefinitions == null || restDefinitions.isEmpty()) {\n-            return;\n-        }\n-\n-        this.restDefinitions.addAll(restDefinitions);\n-        if (addToRoutes) {\n-            // rests are also routes so need to add them there too\n-            for (final RestDefinition restDefinition : restDefinitions) {\n-                List<RouteDefinition> routeDefinitions = restDefinition.asRouteDefinition(camelContext);\n-                addRouteDefinitions(routeDefinitions);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public ServiceCallConfigurationDefinition getServiceCallConfiguration(String serviceName) {\n-        if (serviceName == null) {\n-            serviceName = \"\";\n-        }\n-\n-        return serviceCallConfigurations.get(serviceName);\n-    }\n-\n-    @Override\n-    public void setServiceCallConfiguration(ServiceCallConfigurationDefinition configuration) {\n-        serviceCallConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setServiceCallConfigurations(List<ServiceCallConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (ServiceCallConfigurationDefinition configuration : configurations) {\n-                serviceCallConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addServiceCallConfiguration(String serviceName, ServiceCallConfigurationDefinition configuration) {\n-        serviceCallConfigurations.put(serviceName, configuration);\n-    }\n-\n-    @Override\n-    public HystrixConfigurationDefinition getHystrixConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return hystrixConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setHystrixConfiguration(HystrixConfigurationDefinition configuration) {\n-        hystrixConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setHystrixConfigurations(List<HystrixConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (HystrixConfigurationDefinition configuration : configurations) {\n-                hystrixConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addHystrixConfiguration(String id, HystrixConfigurationDefinition configuration) {\n-        hystrixConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public Resilience4jConfigurationDefinition getResilience4jConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return resilience4jConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setResilience4jConfiguration(Resilience4jConfigurationDefinition configuration) {\n-        resilience4jConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setResilience4jConfigurations(List<Resilience4jConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (Resilience4jConfigurationDefinition configuration : configurations) {\n-                resilience4jConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addResilience4jConfiguration(String id, Resilience4jConfigurationDefinition configuration) {\n-        resilience4jConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public FaultToleranceConfigurationDefinition getFaultToleranceConfiguration(String id) {\n-        if (id == null) {\n-            id = \"\";\n-        }\n-\n-        return faultToleranceConfigurations.get(id);\n-    }\n-\n-    @Override\n-    public void setFaultToleranceConfiguration(FaultToleranceConfigurationDefinition configuration) {\n-        faultToleranceConfigurations.put(\"\", configuration);\n-    }\n-\n-    @Override\n-    public void setFaultToleranceConfigurations(List<FaultToleranceConfigurationDefinition> configurations) {\n-        if (configurations != null) {\n-            for (FaultToleranceConfigurationDefinition configuration : configurations) {\n-                faultToleranceConfigurations.put(configuration.getId(), configuration);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void addFaultToleranceConfiguration(String id, FaultToleranceConfigurationDefinition configuration) {\n-        faultToleranceConfigurations.put(id, configuration);\n-    }\n-\n-    @Override\n-    public DataFormatDefinition resolveDataFormatDefinition(String name) {\n-        // lookup type and create the data format from it\n-        DataFormatDefinition type = lookup(camelContext, name, DataFormatDefinition.class);\n-        if (type == null && getDataFormats() != null) {\n-            type = getDataFormats().get(name);\n-        }\n-        return type;\n-    }\n-\n-    @Override\n-    public ProcessorDefinition getProcessorDefinition(String id) {\n-        for (RouteDefinition route : getRouteDefinitions()) {\n-            Iterator<ProcessorDefinition> it = ProcessorDefinitionHelper.filterTypeInOutputs(route.getOutputs(),\n-                    ProcessorDefinition.class).iterator();\n-            while (it.hasNext()) {\n-                ProcessorDefinition proc = it.next();\n-                if (id.equals(proc.getId())) {\n-                    return proc;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public <T extends ProcessorDefinition<T>> T getProcessorDefinition(String id, Class<T> type) {\n-        ProcessorDefinition answer = getProcessorDefinition(id);\n-        if (answer != null) {\n-            return type.cast(answer);\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Map<String, DataFormatDefinition> getDataFormats() {\n-        return dataFormats;\n-    }\n-\n-    @Override\n-    public void setDataFormats(Map<String, DataFormatDefinition> dataFormats) {\n-        this.dataFormats = dataFormats;\n-    }\n-\n-    @Override\n-    public List<TransformerDefinition> getTransformers() {\n-        return transformers;\n-    }\n-\n-    @Override\n-    public void setTransformers(List<TransformerDefinition> transformers) {\n-        this.transformers = transformers;\n-    }\n-\n-    @Override\n-    public List<ValidatorDefinition> getValidators() {\n-        return validators;\n-    }\n-\n-    @Override\n-    public void setValidators(List<ValidatorDefinition> validators) {\n-        this.validators = validators;\n-    }\n-\n-    @Override\n-    public void setRouteFilterPattern(String include, String exclude) {\n-        setRouteFilter(RouteFilters.filterByPattern(include, exclude));\n-    }\n-\n-    @Override\n-    public Function<RouteDefinition, Boolean> getRouteFilter() {\n-        return routeFilter;\n-    }\n-\n-    @Override\n-    public void setRouteFilter(Function<RouteDefinition, Boolean> routeFilter) {\n-        this.routeFilter = routeFilter;\n-    }\n-\n-    @Override\n-    public void addModelLifecycleStrategy(ModelLifecycleStrategy modelLifecycleStrategy) {\n-        this.modelLifecycleStrategies.add(modelLifecycleStrategy);\n-    }\n-\n-    @Override\n-    public List<ModelLifecycleStrategy> getModelLifecycleStrategies() {\n-        return modelLifecycleStrategies;\n-    }\n-\n-    @Override\n-    public ModelReifierFactory getModelReifierFactory() {\n-        return modelReifierFactory;\n-    }\n-\n-    @Override\n-    public void setModelReifierFactory(ModelReifierFactory modelReifierFactory) {\n-        this.modelReifierFactory = modelReifierFactory;\n-    }\n-\n-    /**\n-     * Should we start newly added routes?\n-     */\n-    protected boolean shouldStartRoutes() {\n-        return camelContext.isStarted() && !camelContext.isStarting();\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "22cd74bb3a24c015ee03c6d6222ec627ac4f949d", "message": "Merge commit", "committedDate": null}, {"oid": "a68c4a39b37546fe5fc5f668fed04fe401af4d1d", "committedDate": "2020-09-02 12:56:02 +0100", "message": "Upgrade to Camel 3.5.0"}, {"oid": "70966912a6dcaa0af3d12ab8e266514c7576e8c8", "committedDate": "2020-10-17 09:47:43 +0200", "message": "Upgrade to Camel 3.6.0"}, {"oid": "0805ab42690bffb29f8234137787418483aff8a1", "committedDate": "2020-11-05 07:02:44 +0000", "message": "core: allign BaseModel with org.apache.camel.impl.DefaultModel"}, {"oid": "cfc118e1960c4b59ce3eb72151bfc7f154aea436", "committedDate": "2020-12-17 09:20:24 +0000", "message": "Upgrade to Camel 3.7.0"}, {"oid": "64c0743a60bda8e2aba46950752c3a271662c5de", "committedDate": "2021-05-25 07:13:57 +0100", "message": "Adapt to latest Camel API changes"}, {"oid": "7ec917e9bfa67357fdbcfd06ac4f5f82d3937136", "committedDate": "2021-05-25 07:13:57 +0100", "message": "Adapt to latest Camel API changes"}, {"oid": "78f03720944ce50481a9b63fe8b70cdb78a5443e", "committedDate": "2021-06-09 11:17:20 +0200", "message": "core: sync BaseModel and FastCamelContext with Camel main"}, {"oid": "654c08b214f281aadb8abf4017324925b99f915a", "committedDate": "2021-06-11 15:16:27 +0100", "message": "Avoid duplicating code in BaseModel & FastCamelContext"}]}, {"oid": "3c8deb8ca920794c224cdf8fa1a584ec31f427e4", "url": "https://github.com/apache/camel-quarkus/commit/3c8deb8ca920794c224cdf8fa1a584ec31f427e4", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-07-31T08:16:33Z", "type": "forcePushed"}, {"oid": "f4fe535aea5718f54efd8057cca580c4f42ffe0b", "url": "https://github.com/apache/camel-quarkus/commit/f4fe535aea5718f54efd8057cca580c4f42ffe0b", "message": "Fixed setter and getter for RouteTemplateDefinition + small optimization", "committedDate": "2020-07-31T11:09:49Z", "type": "forcePushed"}, {"oid": "9574eb269da786dcfe3fb2709f2625d45ad87d57", "url": "https://github.com/apache/camel-quarkus/commit/9574eb269da786dcfe3fb2709f2625d45ad87d57", "message": "Extension for camel-threadpoolfactory-vertx #1430", "committedDate": "2020-08-17T09:58:56Z", "type": "commit"}, {"oid": "4d2a0f7be8727317df90f84410fce39d7f47afe5", "url": "https://github.com/apache/camel-quarkus/commit/4d2a0f7be8727317df90f84410fce39d7f47afe5", "message": "Fixed setter and getter for RouteTemplateDefinition + small optimization", "committedDate": "2020-08-17T09:59:12Z", "type": "commit"}, {"oid": "4d2a0f7be8727317df90f84410fce39d7f47afe5", "url": "https://github.com/apache/camel-quarkus/commit/4d2a0f7be8727317df90f84410fce39d7f47afe5", "message": "Fixed setter and getter for RouteTemplateDefinition + small optimization", "committedDate": "2020-08-17T09:59:12Z", "type": "forcePushed"}]}