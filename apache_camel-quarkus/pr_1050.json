{"pr_number": 1050, "pr_title": "InfluxDB native support #1036", "pr_author": "JiriOndrusek", "pr_createdAt": "2020-04-07T12:34:56Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1050", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzk4NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404937985", "body": "I think `extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));` deserves a separate `@BuildStep` method. The code would be easier to follow that way. \r\n\r\n@lburgazzoli would even say that all `*Native*BuildItem` s should be produced in a separate `InfluxdbNativeProcessor` class. I do not find it necessary as long as there is a just a few methods here.", "bodyText": "I think extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE)); deserves a separate @BuildStep method. The code would be easier to follow that way.\n@lburgazzoli would even say that all *Native*BuildItem s should be produced in a separate InfluxdbNativeProcessor class. I do not find it necessary as long as there is a just a few methods here.", "bodyHTML": "<p dir=\"auto\">I think <code>extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));</code> deserves a separate <code>@BuildStep</code> method. The code would be easier to follow that way.</p>\n<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lburgazzoli/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lburgazzoli\">@lburgazzoli</a> would even say that all <code>*Native*BuildItem</code> s should be produced in a separate <code>InfluxdbNativeProcessor</code> class. I do not find it necessary as long as there is a just a few methods here.</p>", "author": "ppalaga", "createdAt": "2020-04-07T16:17:11Z", "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -16,32 +16,27 @@\n  */\n package org.apache.camel.quarkus.component.influxdb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n \n class InfluxdbProcessor {\n-    private static final Logger LOG = Logger.getLogger(InfluxdbProcessor.class);\n \n     private static final String FEATURE = \"camel-influxdb\";\n \n     @BuildStep\n-    FeatureBuildItem feature() {\n+    FeatureBuildItem feature(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+", "originalCommit": "1f27181cc0e811e93a4c6a313b99443b9cba571a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1OTg2NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404959865", "bodyText": "I'm not so strict, you have some freedom :)", "author": "lburgazzoli", "createdAt": "2020-04-07T16:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb2d781e1b4e851769a85bd3052d558fc8cbfd55", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex 619fe74cec..f007bf0805 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -20,23 +20,42 @@ import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.BatchPoints;\n+import org.influxdb.dto.Point;\n+import org.influxdb.dto.QueryResult;\n \n class InfluxdbProcessor {\n \n     private static final String FEATURE = \"camel-influxdb\";\n \n     @BuildStep\n-    FeatureBuildItem feature(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n \n         // Indicates that this extension would like the SSL support to be enabled\n         extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n-\n-        return new FeatureBuildItem(FEATURE);\n     }\n \n     @BuildStep\n     void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n         proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n     }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(true, true, BatchPoints.class, Point.class, QueryResult.class);\n+    }\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n }\n", "next_change": {"commit": "03817c7edda046a305f3e6c39a3039d8f78da31a", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex f007bf0805..63fea3a37a 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -51,7 +49,8 @@ class InfluxdbProcessor {\n \n     @BuildStep\n     ReflectiveClassBuildItem registerForReflection() {\n-        return new ReflectiveClassBuildItem(true, true, BatchPoints.class, Point.class, QueryResult.class);\n+        return new ReflectiveClassBuildItem(true, true, QueryResult.class,\n+                QueryResult.Result.class, QueryResult.Series.class);\n     }\n \n     @BuildStep\n", "next_change": {"commit": "017a7bd8597aeeed833f69fb09eefda2df880871", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex 63fea3a37a..23b8b4b035 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -48,13 +53,21 @@ class InfluxdbProcessor {\n     }\n \n     @BuildStep\n-    ReflectiveClassBuildItem registerForReflection() {\n-        return new ReflectiveClassBuildItem(true, true, QueryResult.class,\n-                QueryResult.Result.class, QueryResult.Series.class);\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n     }\n \n     @BuildStep\n-    IndexDependencyBuildItem registerDependencyForIndex() {\n-        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+\n+        return new ReflectiveClassBuildItem(true, true, QueryResult.class, QueryResult.Series.class, QueryResult.Result.class);\n     }\n+\n }\n", "next_change": {"commit": "e3ba53764029b80d0ee854dacf3d7763871bd6d8", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex 23b8b4b035..734f83115b 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -66,6 +67,8 @@ class InfluxdbProcessor {\n //                .map(ci -> ci.name().toString())\n //                .sorted()\n //                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);\n \n         return new ReflectiveClassBuildItem(true, true, QueryResult.class, QueryResult.Series.class, QueryResult.Result.class);\n     }\n", "next_change": {"commit": "657014b9552e2fe3fbc6a088eef3142e5e430178", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex 734f83115b..ed2c31f572 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -52,25 +50,22 @@ class InfluxdbProcessor {\n         proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n     }\n \n-\n     @BuildStep\n-    IndexDependencyBuildItem registerDependencyForIndex() {\n-        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        String[] dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(INFLUXDB_DTO_PACKAGE))\n+                .sorted()\n+                .toArray(String[]::new);\n+\n+        return new ReflectiveClassBuildItem(true, true, dtos);\n     }\n \n     @BuildStep\n-    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n-//        IndexView index = combinedIndex.getIndex();\n-//\n-//        String[] dtos = index.getKnownClasses().stream()\n-//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n-//                .map(ci -> ci.name().toString())\n-//                .sorted()\n-//                .toArray(String[]::new);\n-//\n-//        return new ReflectiveClassBuildItem(true, true, dtos);\n-\n-        return new ReflectiveClassBuildItem(true, true, QueryResult.class, QueryResult.Series.class, QueryResult.Result.class);\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n     }\n \n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MDI0NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404950245", "body": "I think we do not need a new connection for each request. It could be done in an CDI event listener, something like\r\n\r\n```\r\nvoid onStart(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeConfigure ev) {\r\n        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\r\n        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\r\n    }\r\n```\r\n\r\nWe might perhaps disconnect on `BeforeStop`", "bodyText": "I think we do not need a new connection for each request. It could be done in an CDI event listener, something like\nvoid onStart(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeConfigure ev) {\n        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\n    }\n\nWe might perhaps disconnect on BeforeStop", "bodyHTML": "<p dir=\"auto\">I think we do not need a new connection for each request. It could be done in an CDI event listener, something like</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"void onStart(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeConfigure ev) {\n        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\n    }\n\"><pre><code>void onStart(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeConfigure ev) {\n        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\n    }\n</code></pre></div>\n<p dir=\"auto\">We might perhaps disconnect on <code>BeforeStop</code></p>", "author": "ppalaga", "createdAt": "2020-04-07T16:34:09Z", "path": "integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java", "diffHunk": "@@ -33,19 +36,28 @@\n \n     private static final Logger LOG = Logger.getLogger(InfluxdbResource.class);\n \n-    private static final String COMPONENT_INFLUXDB = \"influxdb\";\n+    public static final String INFLUXDB_CONNECTION_PROPERTY = \"quarkus.influxdb.connection.url\";\n+    public static final String INFLUXDB_VERSION = \"1.7.10\";\n+\n+    private static final String INFLUXDB_CONNECTION = \"http://{{\" + INFLUXDB_CONNECTION_PROPERTY + \"}}/\";\n+    private static final String INFLUXDB_CONNECTION_NAME = \"influxDb_connection\";\n+    private static final String INFLUXDB_ENDPOINT_URL = \"influxdb:\" + INFLUXDB_CONNECTION_NAME;\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+\n     @Inject\n     CamelContext context;\n \n-    @Path(\"/load/component/influxdb\")\n+    @Path(\"/ping\")\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    public Response loadComponentInfluxdb() throws Exception {\n-        /* This is an autogenerated test */\n-        if (context.getComponent(COMPONENT_INFLUXDB) != null) {\n-            return Response.ok().build();\n-        }\n-        LOG.warnf(\"Could not load [%s] from the Camel context\", COMPONENT_INFLUXDB);\n-        return Response.status(500, COMPONENT_INFLUXDB + \" could not be loaded from the Camel context\").build();\n+    public String pingVersion() throws Exception {\n+        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n+        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);", "originalCommit": "1f27181cc0e811e93a4c6a313b99443b9cba571a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb2d781e1b4e851769a85bd3052d558fc8cbfd55", "changed_code": [{"header": "diff --git a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\nindex 89d0e158ad..277869f751 100644\n--- a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n+++ b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n", "chunk": "@@ -49,15 +61,75 @@ public class InfluxdbResource {\n     @Inject\n     CamelContext context;\n \n+    private InfluxDB influxDB;\n+\n+    void onStart(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeConfigure ev) {\n+        System.out.println(\"============================= start ==========================================\");\n+        influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n+\n+        influxDB.query(new Query(\"CREATE DATABASE \" + DB_NAME));\n+\n+        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\n+    }\n+\n+    void beforeStop(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeStop ev) {\n+        if (influxDB != null) {\n+            influxDB.query(new Query(\"DROP DATABASE \" + DB_NAME, \"\"));\n+            influxDB.close();\n+        }\n+    }\n+\n     @Path(\"/ping\")\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    public String pingVersion() throws Exception {\n-        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n-        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\n-\n+    public String ping() {\n+        System.out.println(\"============================= ping ==========================================\");\n         Pong pong = producerTemplate.requestBody(INFLUXDB_ENDPOINT_URL + \"?operation=ping\", null, Pong.class);\n \n         return pong.getVersion();\n     }\n+\n+    @Path(\"/insert\")\n+    @POST\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public boolean insert(Point point) {\n+        System.out.println(\"============================= insert ==========================================\");\n+        org.influxdb.dto.Point p = point.toPoint();\n+\n+        org.influxdb.dto.Point result = producerTemplate.requestBody(\n+                INFLUXDB_ENDPOINT_URL + \"?databaseName=\" + DB_NAME + \"&operation=insert&retentionPolicy=autogen\", p,\n+                org.influxdb.dto.Point.class);\n+\n+        return result != null;\n+    }\n+\n+    @Path(\"/batch\")\n+    @POST\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String batch(Points points) {\n+        System.out.println(\"============================= batch ==========================================\");\n+        BatchPoints p = points.toBatchPoints();\n+\n+        BatchPoints result = producerTemplate.requestBody(INFLUXDB_ENDPOINT_URL + \"?batch=true\", p,\n+                BatchPoints.class);\n+\n+        return String.valueOf(result.getPoints().size());\n+    }\n+\n+    @Path(\"/query\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public int query(String query) throws Exception {\n+        System.out.println(\"============================= query ==========================================\");\n+        Exchange exchange = producerTemplate.request(\n+                INFLUXDB_ENDPOINT_URL + \"?databaseName=\" + DB_NAME + \"&operation=query&retentionPolicy=autogen\",\n+                e -> e.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, query));\n+        List<QueryResult.Result> results = exchange.getMessage().getBody(QueryResult.class).getResults();\n+        return results == null ? 0 : results.size();\n+\n+    }\n+\n }\n", "next_change": {"commit": "03817c7edda046a305f3e6c39a3039d8f78da31a", "changed_code": [{"header": "diff --git a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\nindex 277869f751..aaa60a8abb 100644\n--- a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n+++ b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n", "chunk": "@@ -123,12 +119,12 @@ public class InfluxdbResource {\n     @Consumes(MediaType.TEXT_PLAIN)\n     @Produces(MediaType.TEXT_PLAIN)\n     public int query(String query) throws Exception {\n-        System.out.println(\"============================= query ==========================================\");\n         Exchange exchange = producerTemplate.request(\n                 INFLUXDB_ENDPOINT_URL + \"?databaseName=\" + DB_NAME + \"&operation=query&retentionPolicy=autogen\",\n                 e -> e.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, query));\n         List<QueryResult.Result> results = exchange.getMessage().getBody(QueryResult.class).getResults();\n-        return results == null ? 0 : results.size();\n+        return results == null || results.size() == 0 || results.get(0).getSeries() == null ? 0\n+                : results.get(0).getSeries().size();\n \n     }\n \n", "next_change": {"commit": "eeccc3c5d75b3a81523378dfefaecd61376cb879", "changed_code": [{"header": "diff --git a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\nindex aaa60a8abb..28a0a0a073 100644\n--- a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n+++ b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n", "chunk": "@@ -118,13 +119,15 @@ public class InfluxdbResource {\n     @POST\n     @Consumes(MediaType.TEXT_PLAIN)\n     @Produces(MediaType.TEXT_PLAIN)\n-    public int query(String query) throws Exception {\n+    public String query(String query) throws Exception {\n         Exchange exchange = producerTemplate.request(\n                 INFLUXDB_ENDPOINT_URL + \"?databaseName=\" + DB_NAME + \"&operation=query&retentionPolicy=autogen\",\n                 e -> e.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, query));\n         List<QueryResult.Result> results = exchange.getMessage().getBody(QueryResult.class).getResults();\n-        return results == null || results.size() == 0 || results.get(0).getSeries() == null ? 0\n-                : results.get(0).getSeries().size();\n+        return results.stream()\n+                .flatMap(r -> r.getSeries().stream())\n+                .map(s -> s.getName())\n+                .collect(Collectors.joining(\", \"));\n \n     }\n \n", "next_change": {"commit": "de96e372b271f1d11d761c5d17b37efe953b081c", "changed_code": [{"header": "diff --git a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\nindex 28a0a0a073..ad53101205 100644\n--- a/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n+++ b/integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java\n", "chunk": "@@ -125,7 +125,7 @@ public class InfluxdbResource {\n                 e -> e.getIn().setHeader(InfluxDbConstants.INFLUXDB_QUERY, query));\n         List<QueryResult.Result> results = exchange.getMessage().getBody(QueryResult.class).getResults();\n         return results.stream()\n-                .flatMap(r -> r.getSeries().stream())\n+                .flatMap(r -> r.getSeries() != null ? r.getSeries().stream() : null)\n                 .map(s -> s.getName())\n                 .collect(Collectors.joining(\", \"));\n \n", "next_change": null}]}}]}}]}}]}}, {"oid": "fb2d781e1b4e851769a85bd3052d558fc8cbfd55", "url": "https://github.com/apache/camel-quarkus/commit/fb2d781e1b4e851769a85bd3052d558fc8cbfd55", "message": "InfluxDB native support #1036", "committedDate": "2020-04-08T14:52:29Z", "type": "forcePushed"}, {"oid": "ab399690f89b3567dee073fe42e70d92fd072a27", "url": "https://github.com/apache/camel-quarkus/commit/ab399690f89b3567dee073fe42e70d92fd072a27", "message": "InfluxDB native support #1036", "committedDate": "2020-04-08T15:02:40Z", "type": "forcePushed"}, {"oid": "05c7ecae63602db80cade50e8ffae6ff47d2a4b2", "url": "https://github.com/apache/camel-quarkus/commit/05c7ecae63602db80cade50e8ffae6ff47d2a4b2", "message": "InfluxDB native support #1036", "committedDate": "2020-04-08T15:05:30Z", "type": "forcePushed"}, {"oid": "03817c7edda046a305f3e6c39a3039d8f78da31a", "url": "https://github.com/apache/camel-quarkus/commit/03817c7edda046a305f3e6c39a3039d8f78da31a", "message": "InfluxDB native support #1036", "committedDate": "2020-04-09T14:46:10Z", "type": "forcePushed"}, {"oid": "017a7bd8597aeeed833f69fb09eefda2df880871", "url": "https://github.com/apache/camel-quarkus/commit/017a7bd8597aeeed833f69fb09eefda2df880871", "message": "InfluxDB native support #1036", "committedDate": "2020-04-09T16:07:13Z", "type": "forcePushed"}, {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8", "url": "https://github.com/apache/camel-quarkus/commit/e3ba53764029b80d0ee854dacf3d7763871bd6d8", "message": "InfluxDB native support #1036", "committedDate": "2020-04-09T16:08:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406318601", "body": "@ppalaga , @lburgazzoli \r\nIf I understand your previous comments, this should be the desired solution - do not name classes by one, but use the whole package name.\r\nUnfortunately this is not working in native mode.\r\nIn JVM mode I can see that search on the index is correct and returns:\r\n\r\n> [org.influxdb.dto.BatchPoints, org.influxdb.dto.BoundParameterQuery, org.influxdb.dto.Point, org.influxdb.dto.Pong, org.influxdb.dto.Query, org.influxdb.dto.QueryResult]\r\n\r\nIs it possible that index is not updated by the new build item from previous step (in native), because the desired classes are added in previous step into index?", "bodyText": "@ppalaga , @lburgazzoli\nIf I understand your previous comments, this should be the desired solution - do not name classes by one, but use the whole package name.\nUnfortunately this is not working in native mode.\nIn JVM mode I can see that search on the index is correct and returns:\n\n[org.influxdb.dto.BatchPoints, org.influxdb.dto.BoundParameterQuery, org.influxdb.dto.Point, org.influxdb.dto.Pong, org.influxdb.dto.Query, org.influxdb.dto.QueryResult]\n\nIs it possible that index is not updated by the new build item from previous step (in native), because the desired classes are added in previous step into index?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ppalaga/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppalaga\">@ppalaga</a> , <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lburgazzoli/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lburgazzoli\">@lburgazzoli</a><br>\nIf I understand your previous comments, this should be the desired solution - do not name classes by one, but use the whole package name.<br>\nUnfortunately this is not working in native mode.<br>\nIn JVM mode I can see that search on the index is correct and returns:</p>\n<blockquote>\n<p dir=\"auto\">[org.influxdb.dto.BatchPoints, org.influxdb.dto.BoundParameterQuery, org.influxdb.dto.Point, org.influxdb.dto.Pong, org.influxdb.dto.Query, org.influxdb.dto.QueryResult]</p>\n</blockquote>\n<p dir=\"auto\">Is it possible that index is not updated by the new build item from previous step (in native), because the desired classes are added in previous step into index?</p>", "author": "JiriOndrusek", "createdAt": "2020-04-09T16:14:49Z", "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "originalCommit": "e3ba53764029b80d0ee854dacf3d7763871bd6d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMzc3Nw==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406323777", "bodyText": "Strange. You may want to add .peek(System.out::println) before .filter() to see whether the inner classes are in the index. If they appear in the log, that probably means that ci.name().prefix() returns something else than you expect.", "author": "ppalaga", "createdAt": "2020-04-09T16:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNTk5NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406325995", "bodyText": "btw the search should not appear neither in jvm nor in native mode as it happens during augmentation", "author": "lburgazzoli", "createdAt": "2020-04-09T16:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyODY4Mg==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406328682", "bodyText": "I've tried peek, as suggested - but in console there are noin influxdb classes present.\nI was able to debug this method in JVM mode -> to be sure, that filter works correctly and it is.\nIf I disable step with influxdb adition in jvm mode, it behaves in the same way as native (no ivfluxdb classes found) -> IMO index is not updated by added dependency of influxdb. (which could be caused, that I haven't defined any kind of dependency between these 2 steps )", "author": "JiriOndrusek", "createdAt": "2020-04-09T16:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNjIwNg==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406336206", "bodyText": "you have a dependency as you require CombinedIndexBuildItem which of course need to collect all the IndexDependencyBuildItem.", "author": "lburgazzoli", "createdAt": "2020-04-09T16:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTc3MQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406361771", "bodyText": "Problem was caused by the fact, that same required classes are definned as inner classes therefore they have different prefix (e.g. org.influxdb.dto.QueryResult$Series). It works with modification of filter to use 'startsWith' instead of 'equals'.", "author": "JiriOndrusek", "createdAt": "2020-04-09T17:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "657014b9552e2fe3fbc6a088eef3142e5e430178", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex 734f83115b..ed2c31f572 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -52,25 +50,22 @@ class InfluxdbProcessor {\n         proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n     }\n \n-\n     @BuildStep\n-    IndexDependencyBuildItem registerDependencyForIndex() {\n-        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        String[] dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(INFLUXDB_DTO_PACKAGE))\n+                .sorted()\n+                .toArray(String[]::new);\n+\n+        return new ReflectiveClassBuildItem(true, true, dtos);\n     }\n \n     @BuildStep\n-    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n-//        IndexView index = combinedIndex.getIndex();\n-//\n-//        String[] dtos = index.getKnownClasses().stream()\n-//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n-//                .map(ci -> ci.name().toString())\n-//                .sorted()\n-//                .toArray(String[]::new);\n-//\n-//        return new ReflectiveClassBuildItem(true, true, dtos);\n-\n-        return new ReflectiveClassBuildItem(true, true, QueryResult.class, QueryResult.Series.class, QueryResult.Result.class);\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n     }\n \n }\n", "next_change": null}]}}, {"oid": "657014b9552e2fe3fbc6a088eef3142e5e430178", "url": "https://github.com/apache/camel-quarkus/commit/657014b9552e2fe3fbc6a088eef3142e5e430178", "message": "InfluxDB native support #1036", "committedDate": "2020-04-09T17:26:56Z", "type": "forcePushed"}, {"oid": "6fe2f4314289b0ed9c21e9c64d58f510e1c58c55", "url": "https://github.com/apache/camel-quarkus/commit/6fe2f4314289b0ed9c21e9c64d58f510e1c58c55", "message": "InfluxDB native support #1036", "committedDate": "2020-04-09T17:30:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNTAxMQ==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406415011", "body": "`false, true` is typically enough. Could you please check, unless you did already?", "bodyText": "false, true is typically enough. Could you please check, unless you did already?", "bodyHTML": "<p dir=\"auto\"><code>false, true</code> is typically enough. Could you please check, unless you did already?</p>", "author": "ppalaga", "createdAt": "2020-04-09T19:02:45Z", "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static String INFLUXDB_DTO_PACKAGE = \"org.influxdb.dto\";\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        String[] dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(INFLUXDB_DTO_PACKAGE))\n+                .sorted()\n+                .toArray(String[]::new);\n+\n+        return new ReflectiveClassBuildItem(true, true, dtos);", "originalCommit": "6fe2f4314289b0ed9c21e9c64d58f510e1c58c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3OTA0Mw==", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r407979043", "bodyText": "@ppalaga  you are right, 'false, true' is enough. I've fixed PR", "author": "JiriOndrusek", "createdAt": "2020-04-14T09:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "eeccc3c5d75b3a81523378dfefaecd61376cb879", "changed_code": [{"header": "diff --git a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\nindex ed2c31f572..8df98a7733 100644\n--- a/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n+++ b/extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java\n", "chunk": "@@ -60,7 +60,7 @@ class InfluxdbProcessor {\n                 .sorted()\n                 .toArray(String[]::new);\n \n-        return new ReflectiveClassBuildItem(true, true, dtos);\n+        return new ReflectiveClassBuildItem(false, true, dtos);\n     }\n \n     @BuildStep\n", "next_change": null}]}}, {"oid": "eeccc3c5d75b3a81523378dfefaecd61376cb879", "url": "https://github.com/apache/camel-quarkus/commit/eeccc3c5d75b3a81523378dfefaecd61376cb879", "message": "InfluxDB native support #1036", "committedDate": "2020-04-14T09:00:51Z", "type": "forcePushed"}, {"oid": "ce30acf47c3f7f6e49aa8fbc82495f63a8d77a9e", "url": "https://github.com/apache/camel-quarkus/commit/ce30acf47c3f7f6e49aa8fbc82495f63a8d77a9e", "message": "InfluxDB native support #1036", "committedDate": "2020-04-14T10:05:50Z", "type": "forcePushed"}, {"oid": "de96e372b271f1d11d761c5d17b37efe953b081c", "url": "https://github.com/apache/camel-quarkus/commit/de96e372b271f1d11d761c5d17b37efe953b081c", "message": "InfluxDB native support #1036", "committedDate": "2020-04-14T12:01:29Z", "type": "forcePushed"}, {"oid": "5b4496a9518afa977a77af440828083d86bf0506", "url": "https://github.com/apache/camel-quarkus/commit/5b4496a9518afa977a77af440828083d86bf0506", "message": "InfluxDB native support #1036", "committedDate": "2020-04-15T07:04:06Z", "type": "forcePushed"}, {"oid": "9afde1300c1a055a7d87c9954747a13164c3a194", "url": "https://github.com/apache/camel-quarkus/commit/9afde1300c1a055a7d87c9954747a13164c3a194", "message": "InfluxDB native support #1036", "committedDate": "2020-04-15T07:57:31Z", "type": "commit"}, {"oid": "9afde1300c1a055a7d87c9954747a13164c3a194", "url": "https://github.com/apache/camel-quarkus/commit/9afde1300c1a055a7d87c9954747a13164c3a194", "message": "InfluxDB native support #1036", "committedDate": "2020-04-15T07:57:31Z", "type": "forcePushed"}]}