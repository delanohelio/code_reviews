{"pr_number": 1018, "pr_title": "Fix #1017 Do not hardcode the TransformerFactory implementation irrev\u2026", "pr_author": "ppalaga", "pr_createdAt": "2020-04-02T14:10:57Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1018", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402349024", "body": "We don't provide any substitution for other transformers so it should be clear that any value except the default is out of our support", "bodyText": "We don't provide any substitution for other transformers so it should be clear that any value except the default is out of our support", "bodyHTML": "<p dir=\"auto\">We don't provide any substitution for other transformers so it should be clear that any value except the default is out of our support</p>", "author": "lburgazzoli", "createdAt": "2020-04-02T14:18:08Z", "path": "extensions-support/xalan/deployment/src/main/java/org/apache/camel/quarkus/support/xalan/deployment/CamelXalanBuildTimeConfig.java", "diffHunk": "@@ -14,24 +14,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.camel.quarkus.support.xalan.graal;\n+package org.apache.camel.quarkus.support.xalan.deployment;\n \n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.TransformerFactoryConfigurationError;\n+import java.util.Optional;\n \n-import com.oracle.svm.core.annotate.Substitute;\n-import com.oracle.svm.core.annotate.TargetClass;\n-import org.apache.xalan.xsltc.trax.TransformerFactoryImpl;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n \n-@TargetClass(className = \"javax.xml.transform.TransformerFactory\")\n-final class TransformerFactorySubstitution {\n-    @Substitute\n-    public static TransformerFactory newDefaultInstance() {\n-        return new TransformerFactoryImpl();\n-    }\n+@ConfigRoot(name = \"camel.xalan\", phase = ConfigPhase.BUILD_TIME)\n+public class CamelXalanBuildTimeConfig {\n \n-    @Substitute\n-    public static TransformerFactory newInstance() throws TransformerFactoryConfigurationError {\n-        return newDefaultInstance();\n-    }\n+    /**\n+     * A fully qualified class name to set as the {@code javax.xml.transform.TransformerFactory} system property early\n+     * at the application startup.\n+     */\n+    @ConfigItem(defaultValue = \"org.apache.camel.quarkus.support.xalan.XalanTransformerFactory\")\n+    public Optional<String> transformerFactory;", "originalCommit": "ac258e7df7620d32ae10af29c017796dd7482f6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MDE4Mg==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402350182", "bodyText": "btw it probably does not need to be Optional as it has a default value", "author": "lburgazzoli", "createdAt": "2020-04-02T14:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODAyOA==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402358028", "bodyText": "it probably does not need to be Optional\n\nMaybe. I was not sure what\ncamel.xalan.transformer-factory = \n\nwould do. I'd naively expect it to be null/nonPresent. I should test it.", "author": "ppalaga", "createdAt": "2020-04-02T14:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MDIzMg==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402360232", "bodyText": "We don't provide any substitution for other transformers so it should be clear that any value except the default is out of our support\n\nIf you mean the text should be different, plz. propose a change.", "author": "ppalaga", "createdAt": "2020-04-02T14:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2ODcyNA==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402368724", "bodyText": "I don't have one in mind but with this seems to indicate one can swap the implementation to whatever transformer factory and that's all that is needed but that may not be true as the user has to take care of any substitution that may be needed", "author": "lburgazzoli", "createdAt": "2020-04-02T14:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NjM4MQ==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402396381", "bodyText": "I have tested with\nquarkus.camel.xalan.transformer-factory =\n\nand it makes the Optional.isPresent() to return false.", "author": "ppalaga", "createdAt": "2020-04-02T15:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5Nzk5Mg==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402397992", "bodyText": "what if you remove optional ? does it get the default ?", "author": "lburgazzoli", "createdAt": "2020-04-02T15:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwNDE2Mw==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402404163", "bodyText": "what if you remove optional ? does it get the default ?\n\nStrange enough it is neither null or default: it throws an exception\njava.util.NoSuchElementException: Property quarkus.camel.xalan.transformer-factory not found\n        at io.quarkus.test.junit.QuarkusTestExtension.beforeEach(QuarkusTestExtension.java:191)\n        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$1(TestMethodTestDescriptor.java:154)\n        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$5(TestMethodTestDescriptor.java:190)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:190)\n        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:153)\n        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\n        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\n        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\n        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\n        at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\n        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\n        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\n        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n        at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n        at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)\n        at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)\n        at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)\n        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)\n        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\n        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)\n        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)\n        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)\n        at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)\nCaused by: java.lang.RuntimeException: java.util.NoSuchElementException: Property quarkus.camel.xalan.transformer-factory not found\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:206)\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.createInitialRuntimeApplication(AugmentActionImpl.java:95)\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.createInitialRuntimeApplication(AugmentActionImpl.java:45)\n        at io.quarkus.test.junit.QuarkusTestExtension.doJavaStart(QuarkusTestExtension.java:96)\n        at io.quarkus.test.junit.QuarkusTestExtension.ensureStarted(QuarkusTestExtension.java:205)\n        at io.quarkus.test.junit.QuarkusTestExtension.beforeAll(QuarkusTestExtension.java:228)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeBeforeAllCallbacks$7(ClassBasedTestDescriptor.java:359)\n        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeBeforeAllCallbacks(ClassBasedTestDescriptor.java:359)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:189)\n        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.before(ClassBasedTestDescriptor.java:78)\n        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:132)\n        ... 31 more\nCaused by: java.util.NoSuchElementException: Property quarkus.camel.xalan.transformer-factory not found\n        at io.smallrye.config.SmallRyeConfig.propertyNotFound(SmallRyeConfig.java:209)\n        at io.smallrye.config.SmallRyeConfig.getValue(SmallRyeConfig.java:96)\n        at io.quarkus.deployment.configuration.BuildTimeConfigurationReader$ReadOperation.readConfigValue(BuildTimeConfigurationReader.java:616)\n        at io.quarkus.deployment.configuration.BuildTimeConfigurationReader$ReadOperation.readConfigGroup(BuildTimeConfigurationReader.java:561)\n        at io.quarkus.deployment.configuration.BuildTimeConfigurationReader$ReadOperation.run(BuildTimeConfigurationReader.java:284)\n        at io.quarkus.deployment.configuration.BuildTimeConfigurationReader.readConfiguration(BuildTimeConfigurationReader.java:241)\n        at io.quarkus.deployment.ExtensionLoader.loadStepsFrom(ExtensionLoader.java:204)\n        at io.quarkus.deployment.ExtensionLoader.loadStepsFrom(ExtensionLoader.java:136)\n        at io.quarkus.deployment.QuarkusAugmentor.run(QuarkusAugmentor.java:93)\n        at io.quarkus.runner.bootstrap.AugmentActionImpl.runAugment(AugmentActionImpl.java:204)\n        ... 42 more", "author": "ppalaga", "createdAt": "2020-04-02T15:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMjY5OA==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402422698", "bodyText": ":(", "author": "lburgazzoli", "createdAt": "2020-04-02T15:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0OTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MTAwMg==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402351002", "body": "It was an issue even before but this does not apply to JVM so we could have different behavior between native and jvm", "bodyText": "It was an issue even before but this does not apply to JVM so we could have different behavior between native and jvm", "bodyHTML": "<p dir=\"auto\">It was an issue even before but this does not apply to JVM so we could have different behavior between native and jvm</p>", "author": "lburgazzoli", "createdAt": "2020-04-02T14:20:41Z", "path": "extensions-support/xalan/deployment/src/main/java/org/apache/camel/quarkus/support/xalan/deployment/XalanNativeImageProcessor.java", "diffHunk": "@@ -52,4 +55,29 @@ ReflectiveClassBuildItem reflectiveClasses() {\n         return Arrays.asList(\n                 new NativeImageResourceBuildItem(\"org/apache/xml/serializer/output_xml.properties\"));\n     }\n+\n+    @BuildStep\n+    void installTransformerFactory(\n+            CamelXalanBuildTimeConfig config,\n+            BuildProducer<SystemPropertyBuildItem> properties,\n+            BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            BuildProducer<NativeImageResourceBuildItem> nativeResources) {\n+\n+        config.transformerFactory\n+                .ifPresent(val -> properties.produce(\n+                        /*\n+                         * If we do not do this, the service provider defined in xalan.jar's\n+                         * META-INF/services/javax.xml.transform.TransformerFactory\n+                         * wins over our factory on Java 11+ native\n+                         * I any case, the user has an option to pass his preferred factory instead of ours\n+                         */\n+                        new SystemPropertyBuildItem(\"javax.xml.transform.TransformerFactory\", val)));", "originalCommit": "ac258e7df7620d32ae10af29c017796dd7482f6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTk1Mw==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402355953", "bodyText": "this does not apply to JVM\n\nIt does. There is NativeImageSystemPropertyBuildItem that applies to native only.", "author": "ppalaga", "createdAt": "2020-04-02T14:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MTAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2NjU1OA==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402366558", "bodyText": "ah sorry I misread it, my bad", "author": "lburgazzoli", "createdAt": "2020-04-02T14:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MTAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDUxMA==", "url": "https://github.com/apache/camel-quarkus/pull/1018#discussion_r402420510", "body": "How about this new variant of the text?\r\n\r\n```suggestion\r\n     * A fully qualified class name to set as the {@code javax.xml.transform.TransformerFactory} system property early\r\n     * at the application startup. The system property effectively overrides any service providers defined in\r\n     * {@code META-INF/services/javax.xml.transform.TransformerFactory} files available in the class path. If you do not\r\n     * set the option the default value is used and the service providers are overriden anyway.\r\n     * <p>\r\n     * Note that any custom transformer factory you pass will only work in native mode if all necessary classes are\r\n     * registered for reflection and all necessary resources are included in the native image. This may already be the\r\n     * case for {@code com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl} if you depend on\r\n     * {@code io.quarkus:quarkus-jaxb} or {@code org.apache.xalan.xsltc.trax.TransformerFactoryImpl} if you depend on\r\n     * {@code org.apache.camel.quarkus:camel-quarkus-support-xalan}.\r\n```", "bodyText": "How about this new variant of the text?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * A fully qualified class name to set as the {@code javax.xml.transform.TransformerFactory} system property early\n          \n          \n            \n                 * at the application startup.\n          \n          \n            \n                 * A fully qualified class name to set as the {@code javax.xml.transform.TransformerFactory} system property early\n          \n          \n            \n                 * at the application startup. The system property effectively overrides any service providers defined in\n          \n          \n            \n                 * {@code META-INF/services/javax.xml.transform.TransformerFactory} files available in the class path. If you do not\n          \n          \n            \n                 * set the option the default value is used and the service providers are overriden anyway.\n          \n          \n            \n                 * <p>\n          \n          \n            \n                 * Note that any custom transformer factory you pass will only work in native mode if all necessary classes are\n          \n          \n            \n                 * registered for reflection and all necessary resources are included in the native image. This may already be the\n          \n          \n            \n                 * case for {@code com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl} if you depend on\n          \n          \n            \n                 * {@code io.quarkus:quarkus-jaxb} or {@code org.apache.xalan.xsltc.trax.TransformerFactoryImpl} if you depend on\n          \n          \n            \n                 * {@code org.apache.camel.quarkus:camel-quarkus-support-xalan}.", "bodyHTML": "<p dir=\"auto\">How about this new variant of the text?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"29\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> A fully qualified <span class=\"pl-k\">class</span> <span class=\"pl-en\">name</span> to set as the {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">javax.xml.transform<span class=\"pl-k\">.</span>TransformerFactory</span>} system property early</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"30\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> at the application startup.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"29\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> A fully qualified <span class=\"pl-k\">class</span> <span class=\"pl-en\">name</span> to set as the {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">javax.xml.transform<span class=\"pl-k\">.</span>TransformerFactory</span>} system property early</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"30\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> at the application startup. <span class=\"pl-smi\">The</span> system property effectively overrides any service providers defined in</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"31\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> {<span class=\"pl-k\">@code</span> <span class=\"pl-c1\">META</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">INF</span><span class=\"pl-k\">/</span>services<span class=\"pl-k\">/</span><span class=\"pl-smi\">javax.xml.transform<span class=\"pl-k\">.</span>TransformerFactory</span>} files available in the <span class=\"pl-k\">class</span> <span class=\"pl-en\">path</span>. If you do not</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"32\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> set the option the <span class=\"pl-k\">default</span> value is used and the service providers are overriden anyway.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"33\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"34\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Note</span> that any custom transformer factory you pass will only work in <span class=\"pl-k\">native</span> mode <span class=\"pl-k\">if</span> all necessary classes are</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"35\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> registered <span class=\"pl-k\">for</span> reflection and all necessary resources are included in the <span class=\"pl-k\">native</span> image. <span class=\"pl-smi\">This</span> may already be the</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"36\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">case</span> <span class=\"pl-k\">for</span> {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">com.sun.org.apache.xalan.internal.xsltc.trax<span class=\"pl-k\">.</span>TransformerFactoryImpl</span>} <span class=\"pl-k\">if</span> you depend on</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"37\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> {<span class=\"pl-k\">@code</span> io<span class=\"pl-k\">.</span>quarkus<span class=\"pl-k\">:</span>quarkus<span class=\"pl-k\">-</span>jaxb} or {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">org.apache.xalan.xsltc.trax<span class=\"pl-k\">.</span>TransformerFactoryImpl</span>} <span class=\"pl-k\">if</span> you depend on</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"38\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> {<span class=\"pl-k\">@code</span> org<span class=\"pl-k\">.</span>apache<span class=\"pl-k\">.</span>camel<span class=\"pl-k\">.</span>quarkus<span class=\"pl-k\">:</span>camel<span class=\"pl-k\">-</span>quarkus<span class=\"pl-k\">-</span>support<span class=\"pl-k\">-</span>xalan}<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ppalaga", "createdAt": "2020-04-02T15:50:39Z", "path": "extensions-support/xalan/deployment/src/main/java/org/apache/camel/quarkus/support/xalan/deployment/CamelXalanBuildTimeConfig.java", "diffHunk": "@@ -14,24 +14,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.camel.quarkus.support.xalan.graal;\n+package org.apache.camel.quarkus.support.xalan.deployment;\n \n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.TransformerFactoryConfigurationError;\n+import java.util.Optional;\n \n-import com.oracle.svm.core.annotate.Substitute;\n-import com.oracle.svm.core.annotate.TargetClass;\n-import org.apache.xalan.xsltc.trax.TransformerFactoryImpl;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n \n-@TargetClass(className = \"javax.xml.transform.TransformerFactory\")\n-final class TransformerFactorySubstitution {\n-    @Substitute\n-    public static TransformerFactory newDefaultInstance() {\n-        return new TransformerFactoryImpl();\n-    }\n+@ConfigRoot(name = \"camel.xalan\", phase = ConfigPhase.BUILD_TIME)\n+public class CamelXalanBuildTimeConfig {\n \n-    @Substitute\n-    public static TransformerFactory newInstance() throws TransformerFactoryConfigurationError {\n-        return newDefaultInstance();\n-    }\n+    /**\n+     * A fully qualified class name to set as the {@code javax.xml.transform.TransformerFactory} system property early\n+     * at the application startup.", "originalCommit": "ac258e7df7620d32ae10af29c017796dd7482f6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "349782f2f503720f3ecfc0afb3ae32638fb7a415", "url": "https://github.com/apache/camel-quarkus/commit/349782f2f503720f3ecfc0afb3ae32638fb7a415", "message": "Fix #1017 Do not hardcode the TransformerFactory implementation irreversibly", "committedDate": "2020-04-02T16:11:17Z", "type": "forcePushed"}, {"oid": "30c815931887589eb7bd6e0613fa91a825613259", "url": "https://github.com/apache/camel-quarkus/commit/30c815931887589eb7bd6e0613fa91a825613259", "message": "Fix #1017 Do not hardcode the TransformerFactory implementation irreversibly", "committedDate": "2020-04-02T16:13:04Z", "type": "forcePushed"}, {"oid": "ac163da0ff8140452308a5350a4c479bd68f2447", "url": "https://github.com/apache/camel-quarkus/commit/ac163da0ff8140452308a5350a4c479bd68f2447", "message": "Fix #1017 Do not hardcode the TransformerFactory implementation irreversibly", "committedDate": "2020-04-02T16:14:00Z", "type": "commit"}, {"oid": "ac163da0ff8140452308a5350a4c479bd68f2447", "url": "https://github.com/apache/camel-quarkus/commit/ac163da0ff8140452308a5350a4c479bd68f2447", "message": "Fix #1017 Do not hardcode the TransformerFactory implementation irreversibly", "committedDate": "2020-04-02T16:14:00Z", "type": "forcePushed"}]}