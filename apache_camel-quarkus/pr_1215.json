{"pr_number": 1215, "pr_title": "Debezium PostgresSQL Connector native support #1191", "pr_author": "JiriOndrusek", "pr_createdAt": "2020-05-12T13:07:54Z", "pr_url": "https://github.com/apache/camel-quarkus/pull/1215", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MTcxNw==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r423741717", "body": "License missing", "bodyText": "License missing", "bodyHTML": "<p dir=\"auto\">License missing</p>", "author": "oscerd", "createdAt": "2020-05-12T13:40:54Z", "path": "integration-tests/debezium-postgres/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresRouteBuilder.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.apache.camel.quarkus.component.debezium.postgres.it;", "originalCommit": "c41d2e45e435dd0812646705f061f920a4df2fdf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "261ef1657735e7cc1675786581c348bd4f774659", "url": "https://github.com/apache/camel-quarkus/commit/261ef1657735e7cc1675786581c348bd4f774659", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-14T14:22:52Z", "type": "forcePushed"}, {"oid": "9691ae99b379b37051ddd7f43e02061c9a099c6f", "url": "https://github.com/apache/camel-quarkus/commit/9691ae99b379b37051ddd7f43e02061c9a099c6f", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-15T09:24:27Z", "type": "forcePushed"}, {"oid": "1a944357934a423ec54909c33224ce0a4ec46287", "url": "https://github.com/apache/camel-quarkus/commit/1a944357934a423ec54909c33224ce0a4ec46287", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-15T11:48:06Z", "type": "forcePushed"}, {"oid": "8a1baf95771028a6a30e615ace7bd120a6392508", "url": "https://github.com/apache/camel-quarkus/commit/8a1baf95771028a6a30e615ace7bd120a6392508", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-15T12:49:03Z", "type": "forcePushed"}, {"oid": "b06a291855cddbd70c4a4ca4e21841765f675fb4", "url": "https://github.com/apache/camel-quarkus/commit/b06a291855cddbd70c4a4ca4e21841765f675fb4", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-15T15:04:05Z", "type": "forcePushed"}, {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46", "url": "https://github.com/apache/camel-quarkus/commit/859ffe68382a0b76c999baf8b7168f9d2916ce46", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-18T08:42:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTExMA==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426555110", "body": "Could we perhaps use `ReflectiveClassBuildItem` instead?", "bodyText": "Could we perhaps use ReflectiveClassBuildItem instead?", "bodyHTML": "<p dir=\"auto\">Could we perhaps use <code>ReflectiveClassBuildItem</code> instead?</p>", "author": "ppalaga", "createdAt": "2020-05-18T11:24:32Z", "path": "extensions/debezium-postgres/runtime/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/graal/storage/NativeFileOffsetBackingStore.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.graal.storage;\n+\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+import org.apache.kafka.connect.storage.FileOffsetBackingStore;\n+\n+@RegisterForReflection\n+public class NativeFileOffsetBackingStore extends FileOffsetBackingStore {\n+}", "originalCommit": "859ffe68382a0b76c999baf8b7168f9d2916ce46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTE3NA==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426555174", "body": "Could we perhaps use `ReflectiveClassBuildItem` instead?", "bodyText": "Could we perhaps use ReflectiveClassBuildItem instead?", "bodyHTML": "<p dir=\"auto\">Could we perhaps use <code>ReflectiveClassBuildItem</code> instead?</p>", "author": "ppalaga", "createdAt": "2020-05-18T11:24:40Z", "path": "extensions/debezium-postgres/runtime/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/graal/storage/NativeMemoryOffsetBackingStore.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.graal.storage;\n+\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection\n+public class NativeMemoryOffsetBackingStore extends org.apache.kafka.connect.storage.MemoryOffsetBackingStore {", "originalCommit": "859ffe68382a0b76c999baf8b7168f9d2916ce46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2MTA5Ng==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426561096", "body": "It would perhaps be worth JavaDoc-ing that connection is set by DebeziumPostgresTestResource", "bodyText": "It would perhaps be worth JavaDoc-ing that connection is set by DebeziumPostgresTestResource", "bodyHTML": "<p dir=\"auto\">It would perhaps be worth JavaDoc-ing that connection is set by DebeziumPostgresTestResource</p>", "author": "ppalaga", "createdAt": "2020-05-18T11:36:14Z", "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.response.Response;\n+import org.jboss.logging.Logger;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.is;\n+\n+@QuarkusTest\n+@QuarkusTestResource(DebeziumPostgresTestResource.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class DebeziumPostgresTest {\n+    private static final Logger LOG = Logger.getLogger(DebeziumPostgresTest.class);\n+\n+    private static String COMPANY_1 = \"Best Company\";\n+    private static String COMPANY_2 = \"Even Better Company\";\n+    private static String CITY_1 = \"Prague\";\n+    private static String CITY_2 = \"Paris\";\n+\n+    private static int REPEAT_COUNT = 5;\n+\n+    Connection connection;", "originalCommit": "859ffe68382a0b76c999baf8b7168f9d2916ce46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64edb689836b75434f11c33b0e5d6e2b1f19593b", "url": "https://github.com/apache/camel-quarkus/commit/64edb689836b75434f11c33b0e5d6e2b1f19593b", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-18T12:46:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMTI0NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426611245", "body": "Wouldn't these two actually be fine with `new ReflectiveClassBuildItem(false, false, ...` (constructor-only reflection)? ", "bodyText": "Wouldn't these two actually be fine with new ReflectiveClassBuildItem(false, false, ... (constructor-only reflection)?", "bodyHTML": "<p dir=\"auto\">Wouldn't these two actually be fine with <code>new ReflectiveClassBuildItem(false, false, ...</code> (constructor-only reflection)?</p>", "author": "ppalaga", "createdAt": "2020-05-18T13:06:25Z", "path": "extensions/debezium-postgres/deployment/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/deployment/DebeziumPostgresProcessor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.deployment;\n+\n+import java.util.ArrayList;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+import static java.util.stream.Collectors.toCollection;\n+\n+class DebeziumPostgresProcessor {\n+\n+    private static final String FEATURE = \"camel-debezium-postgres\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        ArrayList<String> dtos = index.getKnownClasses().stream().map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(\"org.apache.kafka.connect.json\")\n+                        || n.startsWith(\"io.debezium.connector.postgresql.PostgresConnector\")\n+                        || n.startsWith(\"io.debezium.embedded.spi\"))\n+                .sorted()\n+                .collect(toCollection(ArrayList::new));\n+\n+        dtos.add(\"org.apache.kafka.connect.storage.FileOffsetBackingStore\");\n+        dtos.add(\"org.apache.kafka.connect.storage.MemoryOffsetBackingStore\");", "originalCommit": "64edb689836b75434f11c33b0e5d6e2b1f19593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjY1Mw==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426612653", "body": "If we are adding `new IndexDependencyBuildItem(\"io.debezium\", \"debezium-connector-postgres\")` only because of `io.debezium.connector.postgresql.PostgresConnector`, then hardcoding a literal like with the `BackingStore`s below would be more effective.", "bodyText": "If we are adding new IndexDependencyBuildItem(\"io.debezium\", \"debezium-connector-postgres\") only because of io.debezium.connector.postgresql.PostgresConnector, then hardcoding a literal like with the BackingStores below would be more effective.", "bodyHTML": "<p dir=\"auto\">If we are adding <code>new IndexDependencyBuildItem(\"io.debezium\", \"debezium-connector-postgres\")</code> only because of <code>io.debezium.connector.postgresql.PostgresConnector</code>, then hardcoding a literal like with the <code>BackingStore</code>s below would be more effective.</p>", "author": "ppalaga", "createdAt": "2020-05-18T13:08:51Z", "path": "extensions/debezium-postgres/deployment/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/deployment/DebeziumPostgresProcessor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.deployment;\n+\n+import java.util.ArrayList;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+import static java.util.stream.Collectors.toCollection;\n+\n+class DebeziumPostgresProcessor {\n+\n+    private static final String FEATURE = \"camel-debezium-postgres\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        ArrayList<String> dtos = index.getKnownClasses().stream().map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(\"org.apache.kafka.connect.json\")\n+                        || n.startsWith(\"io.debezium.connector.postgresql.PostgresConnector\")", "originalCommit": "64edb689836b75434f11c33b0e5d6e2b1f19593b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50d404754f65cfe66211f1b1302f92028758df4b", "url": "https://github.com/apache/camel-quarkus/commit/50d404754f65cfe66211f1b1302f92028758df4b", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-18T14:10:00Z", "type": "forcePushed"}, {"oid": "418ec7c3b759085ff59f4bbd3518e9ebb15f6536", "url": "https://github.com/apache/camel-quarkus/commit/418ec7c3b759085ff59f4bbd3518e9ebb15f6536", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-18T14:25:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1Nzk4NA==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426857984", "body": "If something like the following works, we could remove the whole `DebeziumPostgresRouteBuilder` class and the direct Maven dependency:\r\n\r\n```suggestion\r\n        return consumerTemplate.receiveBody(\"debezium-postgres:localhost?\"\r\n                + \"databaseHostname={{\" + DebeziumPostgresResource.PROPERTY_HOSTNAME + \"}}\"\r\n                + \"&databasePort={{\" + DebeziumPostgresResource.PROPERTY_PORT + \"}}\"\r\n                + \"&databaseUser=\" + DebeziumPostgresResource.DB_USERNAME\r\n                + \"&databasePassword=\" + DebeziumPostgresResource.DB_PASSWORD\r\n                + \"&databaseDbname=\" + DebeziumPostgresResource.DB_NAME\r\n                + \"&databaseServerName=qa\"\r\n                + \"&offsetStorageFileName={{\" + DebeziumPostgresResource.PROPERTY_STORE_FILE + \"}}\", 5000, String.class);\r\n```", "bodyText": "If something like the following works, we could remove the whole DebeziumPostgresRouteBuilder class and the direct Maven dependency:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Exchange message = consumerTemplate.receive(\"direct:event\", 2000);\n          \n          \n            \n                    return message == null ? null : message.getIn().getBody(String.class);\n          \n          \n            \n                    return consumerTemplate.receiveBody(\"debezium-postgres:localhost?\"\n          \n          \n            \n                            + \"databaseHostname={{\" + DebeziumPostgresResource.PROPERTY_HOSTNAME + \"}}\"\n          \n          \n            \n                            + \"&databasePort={{\" + DebeziumPostgresResource.PROPERTY_PORT + \"}}\"\n          \n          \n            \n                            + \"&databaseUser=\" + DebeziumPostgresResource.DB_USERNAME\n          \n          \n            \n                            + \"&databasePassword=\" + DebeziumPostgresResource.DB_PASSWORD\n          \n          \n            \n                            + \"&databaseDbname=\" + DebeziumPostgresResource.DB_NAME\n          \n          \n            \n                            + \"&databaseServerName=qa\"\n          \n          \n            \n                            + \"&offsetStorageFileName={{\" + DebeziumPostgresResource.PROPERTY_STORE_FILE + \"}}\", 5000, String.class);", "bodyHTML": "<p dir=\"auto\">If something like the following works, we could remove the whole <code>DebeziumPostgresRouteBuilder</code> class and the direct Maven dependency:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Exchange</span> message <span class=\"pl-k\">=</span> consumerTemplate<span class=\"pl-k\">.</span>receive(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>direct:event<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">2000</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> message <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">:</span> message<span class=\"pl-k\">.</span>getIn()<span class=\"pl-k\">.</span>getBody(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> consumerTemplate<span class=\"pl-k\">.</span>receiveBody(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>debezium-postgres:localhost?<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>databaseHostname={{<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DebeziumPostgresResource</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>PROPERTY_HOSTNAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}}<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;databasePort={{<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DebeziumPostgresResource</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>PROPERTY_PORT</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}}<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;databaseUser=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DebeziumPostgresResource</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DB_USERNAME</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;databasePassword=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DebeziumPostgresResource</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DB_PASSWORD</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;databaseDbname=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DebeziumPostgresResource</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>DB_NAME</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;databaseServerName=qa<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;offsetStorageFileName={{<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">DebeziumPostgresResource</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>PROPERTY_STORE_FILE</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}}<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">5000</span>, <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>class);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ppalaga", "createdAt": "2020-05-18T19:50:56Z", "path": "integration-tests/debezium-postgres/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresResource.java", "diffHunk": "@@ -22,30 +22,33 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n \n-import org.apache.camel.CamelContext;\n+import org.apache.camel.ConsumerTemplate;\n+import org.apache.camel.Exchange;\n import org.jboss.logging.Logger;\n \n @Path(\"/debezium-postgres\")\n @ApplicationScoped\n public class DebeziumPostgresResource {\n \n+    public static final String DB_NAME = \"postgresDB\";\n+    public static final String DB_USERNAME = \"user\";\n+    public static final String DB_PASSWORD = \"changeit\";\n+    public static final String PROPERTY_HOSTNAME = \"quarkus.postgres.hostname\";\n+    public static final String PROPERTY_STORE_FILE = \"quarkus.debezium.store.folder\";\n+    public static final String PROPERTY_PORT = \"quarkus.postgres.port\";\n+\n     private static final Logger LOG = Logger.getLogger(DebeziumPostgresResource.class);\n \n-    private static final String COMPONENT_DEBEZIUM_POSTGRES = \"debezium-postgres\";\n     @Inject\n-    CamelContext context;\n+    ConsumerTemplate consumerTemplate;\n \n-    @Path(\"/load/component/debezium-postgres\")\n+    @Path(\"/getEvent\")\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    public Response loadComponentDebeziumPostgres() throws Exception {\n-        /* This is an autogenerated test */\n-        if (context.getComponent(COMPONENT_DEBEZIUM_POSTGRES) != null) {\n-            return Response.ok().build();\n-        }\n-        LOG.warnf(\"Could not load [%s] from the Camel context\", COMPONENT_DEBEZIUM_POSTGRES);\n-        return Response.status(500, COMPONENT_DEBEZIUM_POSTGRES + \" could not be loaded from the Camel context\").build();\n+    public String getEvent() throws Exception {\n+        final Exchange message = consumerTemplate.receive(\"direct:event\", 2000);\n+        return message == null ? null : message.getIn().getBody(String.class);", "originalCommit": "418ec7c3b759085ff59f4bbd3518e9ebb15f6536", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c6df966280ba8a6d86f42d376f2f67fc16c8752b", "url": "https://github.com/apache/camel-quarkus/commit/c6df966280ba8a6d86f42d376f2f67fc16c8752b", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-19T07:37:03Z", "type": "forcePushed"}, {"oid": "d30b85ea88d255cdfb88f21c7a69008d79a45c86", "url": "https://github.com/apache/camel-quarkus/commit/d30b85ea88d255cdfb88f21c7a69008d79a45c86", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-19T08:05:39Z", "type": "forcePushed"}, {"oid": "b19e5eb3db6c38528f242e90878ffebcc2d9ede4", "url": "https://github.com/apache/camel-quarkus/commit/b19e5eb3db6c38528f242e90878ffebcc2d9ede4", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-19T12:54:22Z", "type": "forcePushed"}, {"oid": "fc8f0f2af90e345d02ef35c1fc3045f32ffca327", "url": "https://github.com/apache/camel-quarkus/commit/fc8f0f2af90e345d02ef35c1fc3045f32ffca327", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-19T12:56:21Z", "type": "forcePushed"}, {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc", "url": "https://github.com/apache/camel-quarkus/commit/653e589fc4e2efefcf75fd71e4659165dfac2fbc", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-19T13:50:36Z", "type": "commit"}, {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc", "url": "https://github.com/apache/camel-quarkus/commit/653e589fc4e2efefcf75fd71e4659165dfac2fbc", "message": "Debezium PostgresSQL Connector native support #1191", "committedDate": "2020-05-19T13:50:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427331086", "body": "Do we need to do inject these things into the test instance? \r\n\r\nThe usual way to set up properties needed by the component endpoint URIs would be to return a map of properties from `start()`. For example, like we do in [ActiveMQTestResource](https://github.com/apache/camel-quarkus/blob/master/integration-tests/messaging/src/test/java/org/apache/camel/quarkus/component/messaging/it/ActiveMQTestResource.java#L56-L63).", "bodyText": "Do we need to do inject these things into the test instance?\nThe usual way to set up properties needed by the component endpoint URIs would be to return a map of properties from start(). For example, like we do in ActiveMQTestResource.", "bodyHTML": "<p dir=\"auto\">Do we need to do inject these things into the test instance?</p>\n<p dir=\"auto\">The usual way to set up properties needed by the component endpoint URIs would be to return a map of properties from <code>start()</code>. For example, like we do in <a href=\"https://github.com/apache/camel-quarkus/blob/master/integration-tests/messaging/src/test/java/org/apache/camel/quarkus/component/messaging/it/ActiveMQTestResource.java#L56-L63\">ActiveMQTestResource</a>.</p>", "author": "jamesnetherton", "createdAt": "2020-05-19T14:09:23Z", "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "originalCommit": "653e589fc4e2efefcf75fd71e4659165dfac2fbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzNjM5OQ==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427336399", "bodyText": "@jamesnetherton  I know about Map approach. It is working well if property placeholder is \"not\" in test, where I could inject propertiesComponent to translate it for me. But I haven't found any way how to do it in test/* classes. Did I miss something?", "author": "JiriOndrusek", "createdAt": "2020-05-19T14:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzNzA0NQ==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427337045", "bodyText": "and for example connection is not a simple object", "author": "JiriOndrusek", "createdAt": "2020-05-19T14:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzODE5OQ==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427338199", "bodyText": "I knew that it makes the map available to the application under test, but can the test code access it as well (how?).", "author": "ppalaga", "createdAt": "2020-05-19T14:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MTQxMw==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427341413", "bodyText": "Aren't they just system properties? So you should be able to look them up.", "author": "jamesnetherton", "createdAt": "2020-05-19T14:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDk2MA==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427354960", "bodyText": "Indeed. I thought it was a bit more sophisticated. So assigning a random port to the app under test does not help at all to be able to run the tests in parallel, because the system props used to pass the port number are shared by all tests.", "author": "ppalaga", "createdAt": "2020-05-19T14:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NDU5MQ==", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r428044591", "bodyText": "@jamesnetherton I've started to work on debebezium-mysql. Because this extension will be very similar to debezium-postgres (and probably other debezium-* extensions). I'd like to refactor each of them to use some debezium-common extension. As a part of that refactor I'll cover also this issue with properties. -> From my POV I'd fixed it after merging this one PR.", "author": "JiriOndrusek", "createdAt": "2020-05-20T14:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}], "type": "inlineReview"}]}