{"pr_number": 3195, "pr_title": "TRUNK 5101: Add Tests for HibernateAlertDAO", "pr_author": "HerbertYiga", "pr_createdAt": "2020-05-11T22:03:49Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3195", "merge_commit": "f33a776462828b25d397b22abbb20e4504dea883", "timeline": [{"oid": "57c6250abee4dbe7992ed0924c61c48519cf6027", "url": "https://github.com/openmrs/openmrs-core/commit/57c6250abee4dbe7992ed0924c61c48519cf6027", "message": "TRUNK-5101:Tests for HibernateAlertDAO", "committedDate": "2020-05-11T22:16:09Z", "type": "forcePushed"}, {"oid": "0268ce0b2709ad6406f7357c1ecfc577502e7fb7", "url": "https://github.com/openmrs/openmrs-core/commit/0268ce0b2709ad6406f7357c1ecfc577502e7fb7", "message": "TRUNK-5101:Tests for HibernateAlertDAO", "committedDate": "2020-05-11T23:01:02Z", "type": "forcePushed"}, {"oid": "d45edf51c6481564bac3cb1af1e839cd7893fa0e", "url": "https://github.com/openmrs/openmrs-core/commit/d45edf51c6481564bac3cb1af1e839cd7893fa0e", "message": "TRUNK-5101:Tests for HibernateAlertDAO", "committedDate": "2020-05-11T23:03:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NjMyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r423496327", "body": "Is this a test or its just a class, If its a test ,could you kindly make it a full test by adding @test annotation", "bodyText": "Is this a test or its just a class, If its a test ,could you kindly make it a full test by adding @test annotation", "bodyHTML": "<p dir=\"auto\">Is this a test or its just a class, If its a test ,could you kindly make it a full test by adding <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/test/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/test\">@test</a> annotation</p>", "author": "sherrif10", "createdAt": "2020-05-12T06:42:33Z", "path": "api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java", "diffHunk": "@@ -32,11 +46,49 @@ public void runBeforeEachTest() {\n \t * @throws Exception\n \t */\n \t@Test\n-\tpublic void shouldGetAlerts() {\n-\t\t\n-\t\tAlertService as = Context.getAlertService();\n-\t\t//System.out.println(as.getAllAlerts());\n+\tpublic void getAlert_shouldReturnSavedAlert() throws Exception {", "originalCommit": "d45edf51c6481564bac3cb1af1e839cd7893fa0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MzM4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r423573386", "bodyText": "hi @sherrif10   thanks for the review,the above method already has a @test annotation cc @ibacher", "author": "HerbertYiga", "createdAt": "2020-05-12T08:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1Mzg2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r424053868", "bodyText": "So a quick thought on this. We want tests to only test a single \"unit\" of work. So, for example, the code here is basically identical to the code to test saveAlert() which tells me that something has gone wrong. I would model these tests on the tests that we have for HibernateConceptDAOTest.\nIn particular, this uses DBUnit to put the database in a known state and adds the @Autowired annotation to the dao being tested.\nThen, the test for the various get methods becomes just a matter of getting known values from the database (because they are configured using a DBUnit XML document) and so if we break the save functionality, it doesn't also break this test.\nAlso on naming conventions, the key part about the getAlert() method is that it gets the alert by the id field so I would name this something like:\npublic void getAlert_shouldGetAlertById()\nSimilarly, saveAlert() probably needs at least two tests:\npublic void saveAlert_shouldSaveAlertToDb()\n\npublic void saveAlert_shouldRaiseExceptionWhenAlertInvalid()", "author": "ibacher", "createdAt": "2020-05-12T21:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NjMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "db3a4d260a59f54bcc5bc62b163de7d6425b6255", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex fa7f6f3e2..ec972e9cf 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -19,76 +16,55 @@ import org.openmrs.User;\n import org.openmrs.api.context.Context;\n import org.openmrs.notification.Alert;\n import org.openmrs.test.BaseContextSensitiveTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * This class tests the hibernate alert data access. TODO Consider changing this and all subsequent\n  * tests to use dbunit\n  */\n public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n-\tprivate HibernateAlertDAO hibernateAlertDAO;\n \t\n+\tprivate static final String DATA_XML = \"org/openmrs/api/db/hibernate/include/HibernateAlertDAOTestDataSet.xml\";\n+\t@Autowired\n+\tprivate HibernateAlertDAO hibernateAlertDAO;\n \t@Before\n-\tpublic void runBeforeEachTest() {\n-\t\tContext.openSession();\n-\t\tauthenticate();\n-\t\thibernateAlertDAO = new HibernateAlertDAO();\n-\t\thibernateAlertDAO.setSessionFactory((SessionFactory) applicationContext.getBean(\"sessionFactory\"));\n-\t}\n-\tprivate Alert createAlert() {\n-\t\tAlert alert = new Alert(1234);\n-\t\talert.setText(\"Testing the hibernate DAO\");\n-\t\treturn alert;\n+\n+\tpublic void setUp() {\n+\t\texecuteDataSet(DATA_XML);\n+\t\t\n \t}\n-\t\n \t/**\n \t * Test that you can get alerts\n \t * \n \t * @throws Exception\n \t */\n-\t@Test\n-\tpublic void getAlert_shouldReturnSavedAlert() throws Exception {\n-\t\tAlert alert = createAlert();\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\tAlert savedAlert = Context.getAlertService().getAlert(1234);\n-\t\tAssert.assertEquals(savedAlert.getText(), \"Testing the hibernate DAO\");\n-\t\t\n-\t}\n \t\n \t@Test\n-\tpublic void saveAlert_shouldReturnNotNull() {\n-\t\tAlert alert = createAlert();\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\tAlert savedAlert = Context.getAlertService().getAlert(1234);\n-\t\tAssert.assertNotNull(savedAlert.getAlertId());\n-\n+\tpublic void saveAlert_shouldSaveAlertToDb() {\n+\t\tAlert saveAlert = hibernateAlertDAO.getAlert(2);\n+\t    hibernateAlertDAO.saveAlert(saveAlert);\n+\t    Assert.assertNotNull(saveAlert.getText());\n \t}\n-\n+\t\n \t@Test\n-\tpublic void deleteAlert_shouldReturnNullAfterDeleting() {\n-    \tAlert alert = createAlert();\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\thibernateAlertDAO.deleteAlert(alert);\n-\t\tAssert.assertNull(Context.getAlertService().getAlert(1234));\n-\n+\tpublic void getAlert_shouldGetAlertById() {\n+\t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n+\t\tint id=savedAlert.getAlertId();\n+\t\tAssert.assertEquals(id,2);\n+\t\t\n \t}\n+\t\n \t@Test\n-\tpublic void getAlerts_shouldReturnAlertsWhenUserIsPassedIn() {\n-\t\tUser user = new User(1);\n-\t\tAlert alert=new Alert();\n-\t\talert.setText(\"Testing get Alerts Method\");\n-\t\talert.addRecipient(user);\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\tList<Alert> alerts = hibernateAlertDAO.getAlerts(user, true, true);\n-\t\tAssert.assertEquals(alerts.size(),1);\n+\tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n+\t\t\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(),1);\n+\t\t\n \t}\n \t@Test\n-\tpublic void getAllAllerts_shouldreturnAllAlerts() {\n-\t\tAlert alert=new Alert();\n-\t\talert.setText(\"Testing the Hibernate get All Alerts Method\");\n-\t\tContext.getAlertService().saveAlert(alert);\n-        List<Alert>alerts=hibernateAlertDAO.getAllAlerts(false);\n-\t    Assert.assertEquals(alerts.size(), 1);\n-\t    \n+\tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n+\t\tUser user=Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user,true,false).size(),1);\n+\t\t\n \t}\n-\t\n+\n }\n", "next_change": {"commit": "90c1b64bfef654365d28ddcc7a7dcbf5d890fdcf", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex ec972e9cf..36c831f25 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -54,17 +49,23 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\t\n \t}\n \t\n+\t@Test\n+\tpublic void deleteAlert_shouldReturnNullAfterDeleting() {\n+\t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n+\t\tAssert.assertNotNull(savedAlert);\n+\t\thibernateAlertDAO.deleteAlert(savedAlert);\n+\t\tAssert.assertNull(hibernateAlertDAO.getAlert(2));\n+\t}\n+\t\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n-\t\t\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(),1);\n-\t\t\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n+\t\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n-\t\tUser user=Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user,true,false).size(),1);\n-\t\t\n+\t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(),1);\n \t}\n \n }\n", "next_change": {"commit": "4db1bba5ac7e582f4d580c824113f229b11b8d67", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 36c831f25..babc7915a 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -65,7 +66,7 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(),1);\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n \t}\n \n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "f33a776462828b25d397b22abbb20e4504dea883", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex fa7f6f3e2..b34b0d999 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -9,86 +9,64 @@\n  */\n package org.openmrs.notification.db.hibernate;\n \n-import java.util.List;\n-\n-import org.hibernate.SessionFactory;\n import org.junit.Assert;\n+\n import org.junit.Before;\n import org.junit.Test;\n import org.openmrs.User;\n import org.openmrs.api.context.Context;\n import org.openmrs.notification.Alert;\n import org.openmrs.test.BaseContextSensitiveTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * This class tests the hibernate alert data access. TODO Consider changing this and all subsequent\n  * tests to use dbunit\n  */\n public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n+\t\n+\tprivate static final String DATA_XML = \"org/openmrs/api/db/hibernate/include/HibernateAlertDAOTestDataSet.xml\";\n+\t\n+\t@Autowired\n \tprivate HibernateAlertDAO hibernateAlertDAO;\n \t\n \t@Before\n-\tpublic void runBeforeEachTest() {\n-\t\tContext.openSession();\n-\t\tauthenticate();\n-\t\thibernateAlertDAO = new HibernateAlertDAO();\n-\t\thibernateAlertDAO.setSessionFactory((SessionFactory) applicationContext.getBean(\"sessionFactory\"));\n-\t}\n-\tprivate Alert createAlert() {\n-\t\tAlert alert = new Alert(1234);\n-\t\talert.setText(\"Testing the hibernate DAO\");\n-\t\treturn alert;\n+\tpublic void setUp() {\n+\t\texecuteDataSet(DATA_XML);\n \t}\n-\t\n-\t/**\n-\t * Test that you can get alerts\n-\t * \n-\t * @throws Exception\n-\t */\n+\n \t@Test\n-\tpublic void getAlert_shouldReturnSavedAlert() throws Exception {\n-\t\tAlert alert = createAlert();\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\tAlert savedAlert = Context.getAlertService().getAlert(1234);\n-\t\tAssert.assertEquals(savedAlert.getText(), \"Testing the hibernate DAO\");\n-\t\t\n+\tpublic void saveAlert_shouldSaveAlertToDb() {\n+\t\tAlert alert=new Alert();\n+\t\talert.setText(\"Coding time\");\n+\t\talert.setId(5);\n+\t    hibernateAlertDAO.saveAlert(alert);\n+\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n-\tpublic void saveAlert_shouldReturnNotNull() {\n-\t\tAlert alert = createAlert();\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\tAlert savedAlert = Context.getAlertService().getAlert(1234);\n-\t\tAssert.assertNotNull(savedAlert.getAlertId());\n-\n+\tpublic void getAlert_shouldGetAlertById() {\n+\t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n+\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n-\n+\t\n \t@Test\n \tpublic void deleteAlert_shouldReturnNullAfterDeleting() {\n-    \tAlert alert = createAlert();\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\thibernateAlertDAO.deleteAlert(alert);\n-\t\tAssert.assertNull(Context.getAlertService().getAlert(1234));\n-\n+\t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n+\t\tAssert.assertNotNull(savedAlert);\n+\t\thibernateAlertDAO.deleteAlert(savedAlert);\n+\t\tAssert.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n+\t\n \t@Test\n-\tpublic void getAlerts_shouldReturnAlertsWhenUserIsPassedIn() {\n-\t\tUser user = new User(1);\n-\t\tAlert alert=new Alert();\n-\t\talert.setText(\"Testing get Alerts Method\");\n-\t\talert.addRecipient(user);\n-\t\tContext.getAlertService().saveAlert(alert);\n-\t\tList<Alert> alerts = hibernateAlertDAO.getAlerts(user, true, true);\n-\t\tAssert.assertEquals(alerts.size(),1);\n+\tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n+\t\n \t@Test\n-\tpublic void getAllAllerts_shouldreturnAllAlerts() {\n-\t\tAlert alert=new Alert();\n-\t\talert.setText(\"Testing the Hibernate get All Alerts Method\");\n-\t\tContext.getAlertService().saveAlert(alert);\n-        List<Alert>alerts=hibernateAlertDAO.getAllAlerts(false);\n-\t    Assert.assertEquals(alerts.size(), 1);\n-\t    \n+\tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n+\t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n+\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n \t}\n-\t\n+\n }\n", "next_change": {"commit": "2e82ea6586a6b687fc392faab24f379f72db3b7d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex b34b0d999..614b67879 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -41,32 +41,32 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\talert.setText(\"Coding time\");\n \t\talert.setId(5);\n \t    hibernateAlertDAO.saveAlert(alert);\n-\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n+\t\tAssertions.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n+\t\tAssertions.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n \tpublic void deleteAlert_shouldReturnNullAfterDeleting() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertNotNull(savedAlert);\n+\t\tAssertions.assertNotNull(savedAlert);\n \t\thibernateAlertDAO.deleteAlert(savedAlert);\n-\t\tAssert.assertNull(hibernateAlertDAO.getAlert(2));\n+\t\tAssertions.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n \t\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n+\t\tAssertions.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n \t\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n+\t\tAssertions.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n \t}\n \n }\n", "next_change": {"commit": "df833f4a8f8e5dde18a9f035f5e41878352bf0a0", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 614b67879..791e19d0b 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -57,12 +77,12 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\thibernateAlertDAO.deleteAlert(savedAlert);\n \t\tAssertions.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n \t\tAssertions.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n-\t\n+\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f33a776462828b25d397b22abbb20e4504dea883", "message": "Merge commit", "committedDate": null}, {"oid": "2e82ea6586a6b687fc392faab24f379f72db3b7d", "committedDate": "2020-07-13 19:39:48 +0200", "message": "TRUNK-5816: Migrate unit tests to Junit5 3"}, {"oid": "df833f4a8f8e5dde18a9f035f5e41878352bf0a0", "committedDate": "2021-08-10 15:37:18 -0400", "message": "Fix HibernateAlertDAOTest (hopefully permanently"}]}, {"oid": "db3a4d260a59f54bcc5bc62b163de7d6425b6255", "url": "https://github.com/openmrs/openmrs-core/commit/db3a4d260a59f54bcc5bc62b163de7d6425b6255", "message": "TRUNK 5101:Tests for HibernateAlertDAO", "committedDate": "2020-06-15T20:34:09Z", "type": "forcePushed"}, {"oid": "dd19eb1eacf8a0f02f91f588a33409586c2b414c", "url": "https://github.com/openmrs/openmrs-core/commit/dd19eb1eacf8a0f02f91f588a33409586c2b414c", "message": "TRUNK 5101:Tests for HibernateAlertDAO", "committedDate": "2020-06-15T20:53:38Z", "type": "forcePushed"}, {"oid": "ddad7287f532f3cd7c136ad9058056415f6edc03", "url": "https://github.com/openmrs/openmrs-core/commit/ddad7287f532f3cd7c136ad9058056415f6edc03", "message": "TRUNK 5101:Tests for HibernateAlertDAO", "committedDate": "2020-06-19T08:36:28Z", "type": "commit"}, {"oid": "ddad7287f532f3cd7c136ad9058056415f6edc03", "url": "https://github.com/openmrs/openmrs-core/commit/ddad7287f532f3cd7c136ad9058056415f6edc03", "message": "TRUNK 5101:Tests for HibernateAlertDAO", "committedDate": "2020-06-19T08:36:28Z", "type": "forcePushed"}, {"oid": "90c1b64bfef654365d28ddcc7a7dcbf5d890fdcf", "url": "https://github.com/openmrs/openmrs-core/commit/90c1b64bfef654365d28ddcc7a7dcbf5d890fdcf", "message": "Fix formatting", "committedDate": "2020-06-22T14:05:11Z", "type": "commit"}, {"oid": "768809cba72edda71ad82a2f1de2a22ce1ab4fbc", "url": "https://github.com/openmrs/openmrs-core/commit/768809cba72edda71ad82a2f1de2a22ce1ab4fbc", "message": "Update HibernateAlertDAOTest.java", "committedDate": "2020-06-22T14:06:46Z", "type": "commit"}, {"oid": "ed89f591d00eef9f8424b9af84c880cb919c709b", "url": "https://github.com/openmrs/openmrs-core/commit/ed89f591d00eef9f8424b9af84c880cb919c709b", "message": "Add new line at end of file", "committedDate": "2020-06-22T14:07:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4Mjk1MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r443582951", "body": "I'm not sure what, exactly, is being tested here. Presumably, we should create a new alert (rather than loading one from the database), save it, and assert that we can call `getAlert()` to get the expected alert.", "bodyText": "I'm not sure what, exactly, is being tested here. Presumably, we should create a new alert (rather than loading one from the database), save it, and assert that we can call getAlert() to get the expected alert.", "bodyHTML": "<p dir=\"auto\">I'm not sure what, exactly, is being tested here. Presumably, we should create a new alert (rather than loading one from the database), save it, and assert that we can call <code>getAlert()</code> to get the expected alert.</p>", "author": "ibacher", "createdAt": "2020-06-22T14:06:04Z", "path": "api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java", "diffHunk": "@@ -9,34 +9,63 @@\n  */\n package org.openmrs.notification.db.hibernate;\n \n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.openmrs.User;\n import org.openmrs.api.context.Context;\n-import org.openmrs.notification.AlertService;\n+import org.openmrs.notification.Alert;\n import org.openmrs.test.BaseContextSensitiveTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * This class tests the hibernate alert data access. TODO Consider changing this and all subsequent\n  * tests to use dbunit\n  */\n public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\n+\tprivate static final String DATA_XML = \"org/openmrs/api/db/hibernate/include/HibernateAlertDAOTestDataSet.xml\";\n+\t\n+\t@Autowired\n+\tprivate HibernateAlertDAO hibernateAlertDAO;\n+\t\n \t@Before\n-\tpublic void runBeforeEachTest() {\n-\t\tauthenticate();\n+\tpublic void setUp() {\n+\t\texecuteDataSet(DATA_XML);\n+\t}\n+\n+\t@Test\n+\tpublic void saveAlert_shouldSaveAlertToDb() {\n+\t\tAlert saveAlert = hibernateAlertDAO.getAlert(2);\n+\t    hibernateAlertDAO.saveAlert(saveAlert);\n+\t    Assert.assertNotNull(saveAlert.getText());", "originalCommit": "90c1b64bfef654365d28ddcc7a7dcbf5d890fdcf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91d7eb7e71013997bdf7909454e1f743e359fed4", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 36c831f25..43850622b 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -36,17 +37,18 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \n \t@Test\n \tpublic void saveAlert_shouldSaveAlertToDb() {\n-\t\tAlert saveAlert = hibernateAlertDAO.getAlert(2);\n-\t    hibernateAlertDAO.saveAlert(saveAlert);\n-\t    Assert.assertNotNull(saveAlert.getText());\n+\t\tAlert alert=new Alert();\n+\t\talert.setText(\"Coding time\");\n+\t\talert.setId(5);\n+\t    hibernateAlertDAO.saveAlert(alert);\n+\t    Assert.assertNull(Context.getAlertService().getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n \t\tint id=savedAlert.getAlertId();\n-\t\tAssert.assertEquals(id,2);\n-\t\t\n+\t\tAssert.assertEquals(id, 2);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "4db1bba5ac7e582f4d580c824113f229b11b8d67", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 43850622b..babc7915a 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -41,14 +41,13 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\talert.setText(\"Coding time\");\n \t\talert.setId(5);\n \t    hibernateAlertDAO.saveAlert(alert);\n-\t    Assert.assertNull(Context.getAlertService().getAlert(5));\n+\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tint id=savedAlert.getAlertId();\n-\t\tAssert.assertEquals(id, 2);\n+\t\tAssert.assertEquals(savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "0deac5f0aefe2c05e7989f1ee8a72c0900d6c22c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex babc7915a..b34b0d999 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -47,7 +47,7 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertEquals(savedAlert.getAlertId(), 2);\n+\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "f33a776462828b25d397b22abbb20e4504dea883", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 36c831f25..b34b0d999 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -36,17 +37,17 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \n \t@Test\n \tpublic void saveAlert_shouldSaveAlertToDb() {\n-\t\tAlert saveAlert = hibernateAlertDAO.getAlert(2);\n-\t    hibernateAlertDAO.saveAlert(saveAlert);\n-\t    Assert.assertNotNull(saveAlert.getText());\n+\t\tAlert alert=new Alert();\n+\t\talert.setText(\"Coding time\");\n+\t\talert.setId(5);\n+\t    hibernateAlertDAO.saveAlert(alert);\n+\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tint id=savedAlert.getAlertId();\n-\t\tAssert.assertEquals(id,2);\n-\t\t\n+\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "2e82ea6586a6b687fc392faab24f379f72db3b7d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex b34b0d999..614b67879 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -41,32 +41,32 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\talert.setText(\"Coding time\");\n \t\talert.setId(5);\n \t    hibernateAlertDAO.saveAlert(alert);\n-\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n+\t\tAssertions.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n+\t\tAssertions.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n \tpublic void deleteAlert_shouldReturnNullAfterDeleting() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertNotNull(savedAlert);\n+\t\tAssertions.assertNotNull(savedAlert);\n \t\thibernateAlertDAO.deleteAlert(savedAlert);\n-\t\tAssert.assertNull(hibernateAlertDAO.getAlert(2));\n+\t\tAssertions.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n \t\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n+\t\tAssertions.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n \t\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n+\t\tAssertions.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n \t}\n \n }\n", "next_change": {"commit": "df833f4a8f8e5dde18a9f035f5e41878352bf0a0", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 614b67879..791e19d0b 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -57,12 +77,12 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\thibernateAlertDAO.deleteAlert(savedAlert);\n \t\tAssertions.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n \t\tAssertions.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n-\t\n+\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f33a776462828b25d397b22abbb20e4504dea883", "message": "Merge commit", "committedDate": null}, {"oid": "2e82ea6586a6b687fc392faab24f379f72db3b7d", "committedDate": "2020-07-13 19:39:48 +0200", "message": "TRUNK-5816: Migrate unit tests to Junit5 3"}, {"oid": "df833f4a8f8e5dde18a9f035f5e41878352bf0a0", "committedDate": "2021-08-10 15:37:18 -0400", "message": "Fix HibernateAlertDAOTest (hopefully permanently"}]}, {"oid": "91d7eb7e71013997bdf7909454e1f743e359fed4", "url": "https://github.com/openmrs/openmrs-core/commit/91d7eb7e71013997bdf7909454e1f743e359fed4", "message": "TRUNK 5101:Tests for HibernateAlertDAO", "committedDate": "2020-06-23T11:29:53Z", "type": "commit"}, {"oid": "a7bacd8fada2e8d62854b263b82fa7ae4baca9af", "url": "https://github.com/openmrs/openmrs-core/commit/a7bacd8fada2e8d62854b263b82fa7ae4baca9af", "message": "TRUNK 5101:Tests for HibernateAlertDAO", "committedDate": "2020-06-23T12:13:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3NzQxOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r444177419", "body": "@ibacher   hi ian made a fix for this method,thanks", "bodyText": "@ibacher   hi ian made a fix for this method,thanks", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ibacher/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ibacher\">@ibacher</a>   hi ian made a fix for this method,thanks</p>", "author": "HerbertYiga", "createdAt": "2020-06-23T12:16:29Z", "path": "api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java", "diffHunk": "@@ -9,34 +9,65 @@\n  */\n package org.openmrs.notification.db.hibernate;\n \n+import org.junit.Assert;\n+\n import org.junit.Before;\n import org.junit.Test;\n+import org.openmrs.User;\n import org.openmrs.api.context.Context;\n-import org.openmrs.notification.AlertService;\n+import org.openmrs.notification.Alert;\n import org.openmrs.test.BaseContextSensitiveTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * This class tests the hibernate alert data access. TODO Consider changing this and all subsequent\n  * tests to use dbunit\n  */\n public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\n+\tprivate static final String DATA_XML = \"org/openmrs/api/db/hibernate/include/HibernateAlertDAOTestDataSet.xml\";\n+\t\n+\t@Autowired\n+\tprivate HibernateAlertDAO hibernateAlertDAO;\n+\t\n \t@Before\n-\tpublic void runBeforeEachTest() {\n-\t\tauthenticate();\n+\tpublic void setUp() {\n+\t\texecuteDataSet(DATA_XML);\n+\t}\n+\n+\t@Test\n+\tpublic void saveAlert_shouldSaveAlertToDb() {", "originalCommit": "a7bacd8fada2e8d62854b263b82fa7ae4baca9af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMTc5Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r444201796", "bodyText": "@ibacher   on squashing this, i get different commits that i never made using(git rebase -i master)", "author": "HerbertYiga", "createdAt": "2020-06-23T12:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3NzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2Mjk1Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3195#discussion_r447662953", "bodyText": "@HerbertYiga That's kind of expected. Those commits are probably the result of changed committed to master. You don't have to worry about squashing things, though, as GitHub will handle that for us.", "author": "ibacher", "createdAt": "2020-06-30T13:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3NzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4db1bba5ac7e582f4d580c824113f229b11b8d67", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex edec14cf7..babc7915a 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -41,14 +41,13 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\talert.setText(\"Coding time\");\n \t\talert.setId(5);\n \t    hibernateAlertDAO.saveAlert(alert);\n-\t    Assert.assertNotNull(Context.getAlertService().getAlert(5));\n+\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tint id=savedAlert.getAlertId();\n-\t\tAssert.assertEquals(id, 2);\n+\t\tAssert.assertEquals(savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "0deac5f0aefe2c05e7989f1ee8a72c0900d6c22c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex babc7915a..b34b0d999 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -47,7 +47,7 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertEquals(savedAlert.getAlertId(), 2);\n+\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "f33a776462828b25d397b22abbb20e4504dea883", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex edec14cf7..b34b0d999 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -41,14 +41,13 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\talert.setText(\"Coding time\");\n \t\talert.setId(5);\n \t    hibernateAlertDAO.saveAlert(alert);\n-\t    Assert.assertNotNull(Context.getAlertService().getAlert(5));\n+\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tint id=savedAlert.getAlertId();\n-\t\tAssert.assertEquals(id, 2);\n+\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "2e82ea6586a6b687fc392faab24f379f72db3b7d", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex b34b0d999..614b67879 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -41,32 +41,32 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\talert.setText(\"Coding time\");\n \t\talert.setId(5);\n \t    hibernateAlertDAO.saveAlert(alert);\n-\t\tAssert.assertNotNull(hibernateAlertDAO.getAlert(5));\n+\t\tAssertions.assertNotNull(hibernateAlertDAO.getAlert(5));\n \t}\n \t\n \t@Test\n \tpublic void getAlert_shouldGetAlertById() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertEquals((int) savedAlert.getAlertId(), 2);\n+\t\tAssertions.assertEquals((int) savedAlert.getAlertId(), 2);\n \t}\n \t\n \t@Test\n \tpublic void deleteAlert_shouldReturnNullAfterDeleting() {\n \t\tAlert savedAlert = hibernateAlertDAO.getAlert(2);\n-\t\tAssert.assertNotNull(savedAlert);\n+\t\tAssertions.assertNotNull(savedAlert);\n \t\thibernateAlertDAO.deleteAlert(savedAlert);\n-\t\tAssert.assertNull(hibernateAlertDAO.getAlert(2));\n+\t\tAssertions.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n \t\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n+\t\tAssertions.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n \t\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n-\t\tAssert.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n+\t\tAssertions.assertEquals(hibernateAlertDAO.getAlerts(user, true, false).size(), 1);\n \t}\n \n }\n", "next_change": {"commit": "df833f4a8f8e5dde18a9f035f5e41878352bf0a0", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\nindex 614b67879..791e19d0b 100644\n--- a/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n+++ b/api/src/test/java/org/openmrs/notification/db/hibernate/HibernateAlertDAOTest.java\n", "chunk": "@@ -57,12 +77,12 @@ public class HibernateAlertDAOTest extends BaseContextSensitiveTest {\n \t\thibernateAlertDAO.deleteAlert(savedAlert);\n \t\tAssertions.assertNull(hibernateAlertDAO.getAlert(2));\n \t}\n-\t\n+\n \t@Test\n \tpublic void getAllAlerts_shouldReturnOnlyNonExpiredAllerts() {\n \t\tAssertions.assertEquals(hibernateAlertDAO.getAllAlerts(false).size(), 1);\n \t}\n-\t\n+\n \t@Test\n \tpublic void getAlerts_shouldReturnAllAlertsWhenUserIsSpecified() {\n \t\tUser user = Context.getUserService().getUserByUuid(\"c1d8f5c2-e131-11de-babe-001e378eb77e\");\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "f33a776462828b25d397b22abbb20e4504dea883", "message": "Merge commit", "committedDate": null}, {"oid": "2e82ea6586a6b687fc392faab24f379f72db3b7d", "committedDate": "2020-07-13 19:39:48 +0200", "message": "TRUNK-5816: Migrate unit tests to Junit5 3"}, {"oid": "df833f4a8f8e5dde18a9f035f5e41878352bf0a0", "committedDate": "2021-08-10 15:37:18 -0400", "message": "Fix HibernateAlertDAOTest (hopefully permanently"}]}, {"oid": "4db1bba5ac7e582f4d580c824113f229b11b8d67", "url": "https://github.com/openmrs/openmrs-core/commit/4db1bba5ac7e582f4d580c824113f229b11b8d67", "message": "Update HibernateAlertDAOTest.java", "committedDate": "2020-06-30T13:03:52Z", "type": "commit"}, {"oid": "0deac5f0aefe2c05e7989f1ee8a72c0900d6c22c", "url": "https://github.com/openmrs/openmrs-core/commit/0deac5f0aefe2c05e7989f1ee8a72c0900d6c22c", "message": "Update HibernateAlertDAOTest.java", "committedDate": "2020-06-30T14:45:27Z", "type": "commit"}]}