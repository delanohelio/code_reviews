{"pr_number": 3279, "pr_title": "TRUNK-5813:  Replace all ExpectedException Rules and the @Test(expected..)", "pr_author": "achilep", "pr_createdAt": "2020-06-26T22:12:50Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3279", "merge_commit": "2d496e65424b809e894d19957941c6214449c316", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDI5OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446544298", "body": "you have a few small whitespace errors. we add a whitespace after the `,`.\r\n\r\nso `APIException exception = assertThrows(APIException.class ,()-> duration.addToDate(startDate, frequency));`\r\nshould be `APIException exception = assertThrows(APIException.class, ()-> duration.addToDate(startDate, frequency));`\r\n\r\nand a whitespace is missing after the comma in `,is`", "bodyText": "you have a few small whitespace errors. we add a whitespace after the ,.\nso APIException exception = assertThrows(APIException.class ,()-> duration.addToDate(startDate, frequency));\nshould be APIException exception = assertThrows(APIException.class, ()-> duration.addToDate(startDate, frequency));\nand a whitespace is missing after the comma in ,is", "bodyHTML": "<p dir=\"auto\">you have a few small whitespace errors. we add a whitespace after the <code>,</code>.</p>\n<p dir=\"auto\">so <code>APIException exception = assertThrows(APIException.class ,()-&gt; duration.addToDate(startDate, frequency));</code><br>\nshould be <code>APIException exception = assertThrows(APIException.class, ()-&gt; duration.addToDate(startDate, frequency));</code></p>\n<p dir=\"auto\">and a whitespace is missing after the comma in <code>,is</code></p>", "author": "teleivo", "createdAt": "2020-06-27T16:47:14Z", "path": "api/src/test/java/org/openmrs/DurationTest.java", "diffHunk": "@@ -98,18 +96,17 @@ public void addToDate_shouldFailWhenUnitIsRecurringAndFrequencyIsUnknown() throw\n \t\tDate startDate = createDateTime(\"2014-07-01 10:00:00\");\n \t\tOrderFrequency frequency = null;\n \t\t\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(Matchers.is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n-\t\tduration.addToDate(startDate, frequency);\n+\t\tAPIException exception = assertThrows(APIException.class ,()-> duration.addToDate(startDate, frequency));\n+\t\tassertThat(exception.getMessage(),is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/DurationTest.java b/api/src/test/java/org/openmrs/DurationTest.java\nindex 0c69b57d9..bb1389a30 100644\n--- a/api/src/test/java/org/openmrs/DurationTest.java\n+++ b/api/src/test/java/org/openmrs/DurationTest.java\n", "chunk": "@@ -96,8 +96,8 @@ public class DurationTest extends BaseContextSensitiveTest {\n \t\tDate startDate = createDateTime(\"2014-07-01 10:00:00\");\n \t\tOrderFrequency frequency = null;\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class ,()-> duration.addToDate(startDate, frequency));\n-\t\tassertThat(exception.getMessage(),is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> duration.addToDate(startDate, frequency));\n+\t\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDM3NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446544375", "body": "you might have this issue in a few lamdbas you added like `() ->duration` should be  `() -> duration`", "bodyText": "you might have this issue in a few lamdbas you added like () ->duration should be  () -> duration", "bodyHTML": "<p dir=\"auto\">you might have this issue in a few lamdbas you added like <code>() -&gt;duration</code> should be  <code>() -&gt; duration</code></p>", "author": "teleivo", "createdAt": "2020-06-27T16:48:04Z", "path": "api/src/test/java/org/openmrs/DurationTest.java", "diffHunk": "@@ -98,18 +96,17 @@ public void addToDate_shouldFailWhenUnitIsRecurringAndFrequencyIsUnknown() throw\n \t\tDate startDate = createDateTime(\"2014-07-01 10:00:00\");\n \t\tOrderFrequency frequency = null;\n \t\t\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(Matchers.is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n-\t\tduration.addToDate(startDate, frequency);\n+\t\tAPIException exception = assertThrows(APIException.class ,()-> duration.addToDate(startDate, frequency));\n+\t\tassertThat(exception.getMessage(),is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n \t}\n \t\n \t@Test\n \tpublic void addToDate_shouldFailWhenUnitIsUnknown() throws ParseException {\n \t\tDuration duration = new Duration(3, \"J\");\n \t\t\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(Matchers.is(Context.getMessageSourceService().getMessage(\"Duration.unknown.code\", new Object[] { \"J\" }, null)));\n-\t\tduration.addToDate(createDateTime(\"2014-07-01 10:00:00\"), null);\n+\t\t\n+\t\tAPIException exception = assertThrows(APIException.class,() ->duration.addToDate(createDateTime(\"2014-07-01 10:00:00\"), null));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/DurationTest.java b/api/src/test/java/org/openmrs/DurationTest.java\nindex 0c69b57d9..bb1389a30 100644\n--- a/api/src/test/java/org/openmrs/DurationTest.java\n+++ b/api/src/test/java/org/openmrs/DurationTest.java\n", "chunk": "@@ -96,8 +96,8 @@ public class DurationTest extends BaseContextSensitiveTest {\n \t\tDate startDate = createDateTime(\"2014-07-01 10:00:00\");\n \t\tOrderFrequency frequency = null;\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class ,()-> duration.addToDate(startDate, frequency));\n-\t\tassertThat(exception.getMessage(),is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> duration.addToDate(startDate, frequency));\n+\t\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Duration.error.frequency.null\")));\n \t}\n \t\n \t@Test\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/org/openmrs/DurationTest.java b/api/src/test/java/org/openmrs/DurationTest.java\nindex 0c69b57d9..bb1389a30 100644\n--- a/api/src/test/java/org/openmrs/DurationTest.java\n+++ b/api/src/test/java/org/openmrs/DurationTest.java\n", "chunk": "@@ -105,8 +105,8 @@ public class DurationTest extends BaseContextSensitiveTest {\n \t\tDuration duration = new Duration(3, \"J\");\n \t\t\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class,() ->duration.addToDate(createDateTime(\"2014-07-01 10:00:00\"), null));\n-\t\tassertThat(exception.getMessage(),is(Context.getMessageSourceService().getMessage(\"Duration.unknown.code\", new Object[] { \"J\" }, null)));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> duration.addToDate(createDateTime(\"2014-07-01 10:00:00\"), null));\n+\t\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Duration.unknown.code\", new Object[] { \"J\" }, null)));\n \t}\n \t\n \tprivate OrderFrequency createFrequency(double frequencyPerDay) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDQ2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446544468", "body": "`, ()-> order` should be `, () -> order`", "bodyText": ", ()-> order should be , () -> order", "bodyHTML": "<p dir=\"auto\"><code>, ()-&gt; order</code> should be <code>, () -&gt; order</code></p>", "author": "teleivo", "createdAt": "2020-06-27T16:49:30Z", "path": "api/src/test/java/org/openmrs/OrderTest.java", "diffHunk": "@@ -521,10 +520,8 @@ public void isDiscontinued_shouldFailIfDateStoppedIsAfterAutoExpireDate() throws\n \t\torder.setDateActivated(DateUtils.parseDate(\"2014-11-01 11:11:10\", DATE_FORMAT));\n \t\torder.setAutoExpireDate(DateUtils.parseDate(\"2014-11-01 11:11:11\", DATE_FORMAT));\n \t\tOrderUtilTest.setDateStopped(order, DateUtils.parseDate(\"2014-11-01 11:11:12\", DATE_FORMAT));\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\n-\t\t    Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\"));\n-\t\torder.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT));\n+\t\tAPIException exception = assertThrows(APIException.class, ()-> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex 2ef414163..fddbbe8b8 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -520,8 +520,8 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t\torder.setDateActivated(DateUtils.parseDate(\"2014-11-01 11:11:10\", DATE_FORMAT));\n \t\torder.setAutoExpireDate(DateUtils.parseDate(\"2014-11-01 11:11:11\", DATE_FORMAT));\n \t\tOrderUtilTest.setDateStopped(order, DateUtils.parseDate(\"2014-11-01 11:11:12\", DATE_FORMAT));\n-\t\tAPIException exception = assertThrows(APIException.class, ()-> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n-\t    assertThat(exception.getMessage(),is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n+\t    assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex fddbbe8b8..64d1c1e70 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -525,7 +525,7 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see Order#isDiscontinued(java.util.Date)\n+\t * @see Order#isDiscontinued(Date)\n \t */\n \t@Test\n \tpublic void isDiscontinued_shouldReturnTrueIfCheckDateIsAfterDateStoppedButBeforeAutoExpireDate() throws Exception {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex 64d1c1e70..fddbbe8b8 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -525,7 +525,7 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see Order#isDiscontinued(Date)\n+\t * @see Order#isDiscontinued(java.util.Date)\n \t */\n \t@Test\n \tpublic void isDiscontinued_shouldReturnTrueIfCheckDateIsAfterDateStoppedButBeforeAutoExpireDate() throws Exception {\n", "next_change": {"commit": "c3c868926923c9207ddcb9ae33cb33e588ad49b3", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex fddbbe8b8..8a879c400 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -521,7 +521,7 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t\torder.setAutoExpireDate(DateUtils.parseDate(\"2014-11-01 11:11:11\", DATE_FORMAT));\n \t\tOrderUtilTest.setDateStopped(order, DateUtils.parseDate(\"2014-11-01 11:11:12\", DATE_FORMAT));\n \t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n-\t    assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n+\t\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDU5Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446544592", "body": "please remove this import `import static org.openmrs.api.context.Context.getConceptService;`", "bodyText": "please remove this import import static org.openmrs.api.context.Context.getConceptService;", "bodyHTML": "<p dir=\"auto\">please remove this import <code>import static org.openmrs.api.context.Context.getConceptService;</code></p>", "author": "teleivo", "createdAt": "2020-06-27T16:50:51Z", "path": "api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java", "diffHunk": "@@ -16,6 +16,8 @@\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n+import static org.junit.Assert.assertThrows;\n+import static org.openmrs.api.context.Context.getConceptService;", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 3d4d537b3..4c201fcd7 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -17,14 +17,12 @@ import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.empty;\n import static org.junit.Assert.assertThrows;\n-import static org.openmrs.api.context.Context.getConceptService;\n \n import javax.annotation.Resource;\n import java.util.LinkedHashSet;\n import java.util.Set;\n \n import org.junit.Test;\n-import org.openmrs.Concept;\n import org.openmrs.PrivilegeListener;\n import org.openmrs.User;\n import org.openmrs.api.APIAuthenticationException;\n", "next_change": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4c201fcd7..de95fa3e2 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -23,6 +23,7 @@ import java.util.LinkedHashSet;\n import java.util.Set;\n \n import org.junit.Test;\n+import org.openmrs.Concept;\n import org.openmrs.PrivilegeListener;\n import org.openmrs.User;\n import org.openmrs.api.APIAuthenticationException;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NTA1MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446545051", "body": "When you hardcode the locale like `\"\\\"en_GB\\\"` in an assertion it might be that the test fails on another machine that has a different locale set.\r\n\r\nAbove we get it using `LocaleUtility.getDefaultLocale().toString()`. One option would be to use that in the assertion and string concatenate it with the rest of the message.\r\n\r\nI think we should not have that much logic in this assertion. I would rather only partially match and thus use a matcher like `containsString` or `startsWith`.\r\n\r\n", "bodyText": "When you hardcode the locale like \"\\\"en_GB\\\" in an assertion it might be that the test fails on another machine that has a different locale set.\nAbove we get it using LocaleUtility.getDefaultLocale().toString(). One option would be to use that in the assertion and string concatenate it with the rest of the message.\nI think we should not have that much logic in this assertion. I would rather only partially match and thus use a matcher like containsString or startsWith.", "bodyHTML": "<p dir=\"auto\">When you hardcode the locale like <code>\"\\\"en_GB\\\"</code> in an assertion it might be that the test fails on another machine that has a different locale set.</p>\n<p dir=\"auto\">Above we get it using <code>LocaleUtility.getDefaultLocale().toString()</code>. One option would be to use that in the assertion and string concatenate it with the rest of the message.</p>\n<p dir=\"auto\">I think we should not have that much logic in this assertion. I would rather only partially match and thus use a matcher like <code>containsString</code> or <code>startsWith</code>.</p>", "author": "teleivo", "createdAt": "2020-06-27T16:55:19Z", "path": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "diffHunk": "@@ -443,23 +440,21 @@ public void saveGlobalProperty_shouldFailIfGivenAllowedLocaleListDoesNotContainD\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tadminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n+\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n+\t\tassertThat(exception.getMessage(),is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 3ac124975..1e319da71 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -443,7 +443,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(),is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));\n+\t\tassertThat(exception.getMessage(), is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n", "next_change": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 1e319da71..f74ba2af6 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -443,7 +442,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));\n+\t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex f74ba2af6..8ba380882 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -442,7 +442,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));\n+\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 8ba380882..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -439,10 +443,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n \t}\n \n \t@Test\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 8ba380882..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -450,10 +455,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \n \t\tLocale defaultLocale = new Locale(\"fr\");\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"is not in allowed locales list\");\n \n-\t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString())));\n-\t\tassertThat(exception.getMessage(), containsString(\"is not in allowed locales list\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString()));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5NjQyNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446796426", "body": "please check all the lambdas for whitespaces, so they are in this format `assertThrows(APIException.class, () -> yyy`", "bodyText": "please check all the lambdas for whitespaces, so they are in this format assertThrows(APIException.class, () -> yyy", "bodyHTML": "<p dir=\"auto\">please check all the lambdas for whitespaces, so they are in this format <code>assertThrows(APIException.class, () -&gt; yyy</code></p>", "author": "teleivo", "createdAt": "2020-06-29T06:21:59Z", "path": "api/src/test/java/org/openmrs/api/ConceptServiceTest.java", "diffHunk": "@@ -616,9 +613,9 @@ public void getConceptByMapping_shouldNotReturnRetiredConcept() {\n \t\t\n \t}\n \t\n-\t@Test(expected = APIException.class)\n+\t@Test\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tconceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\");\n+\t\tassertThrows(APIException.class, ()-> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 4440dce49..84f3e79a7 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -615,7 +615,7 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tassertThrows(APIException.class, ()-> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n+\t\tassertThrows(APIException.class,() -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 84f3e79a7..4f453d48e 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -615,7 +615,7 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tassertThrows(APIException.class,() -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n+\t\tassertThrows(APIException.class, () -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 4f453d48e..4cb01f720 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -613,9 +616,9 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t}\n \t\n-\t@Test\n+\t@Test(expected = APIException.class)\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tassertThrows(APIException.class, () -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n+\t\tconceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\");\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5Njc3NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446796774", "body": "no whitespace before the `,`", "bodyText": "no whitespace before the ,", "bodyHTML": "<p dir=\"auto\">no whitespace before the <code>,</code></p>", "author": "teleivo", "createdAt": "2020-06-29T06:22:57Z", "path": "api/src/test/java/org/openmrs/api/ConceptServiceTest.java", "diffHunk": "@@ -1143,9 +1140,8 @@ public void getConceptSourceByUniqueId_shouldReturnNullIfGivenAnEmptyString() {\n \t@Test\n \tpublic void getConceptSourceByUniqueId_shouldFailIfGivenNull() {\n \n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(\"uniqueId is required\");\n-\t\tconceptService.getConceptSourceByUniqueId(null);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class , () -> conceptService.getConceptSourceByUniqueId(null));\n+\t\tassertThat(exception.getMessage() , is(\"uniqueId is required\"));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 4440dce49..84f3e79a7 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -1140,8 +1140,8 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getConceptSourceByUniqueId_shouldFailIfGivenNull() {\n \n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class , () -> conceptService.getConceptSourceByUniqueId(null));\n-\t\tassertThat(exception.getMessage() , is(\"uniqueId is required\"));\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> conceptService.getConceptSourceByUniqueId(null));\n+\t\tassertThat(exception.getMessage(), is(\"uniqueId is required\"));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 84f3e79a7..4cb01f720 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -1140,8 +1143,9 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getConceptSourceByUniqueId_shouldFailIfGivenNull() {\n \n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> conceptService.getConceptSourceByUniqueId(null));\n-\t\tassertThat(exception.getMessage(), is(\"uniqueId is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"uniqueId is required\");\n+\t\tconceptService.getConceptSourceByUniqueId(null);\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5ODMzNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446798335", "body": "I assume\r\n\r\n`Context.getEncounterService().getEncounter(encounter.getId())`\r\n\r\nthrows an exception. So we do not need to assert that the return value is null since it will not return anything.\r\n\r\nYou can thus remove the commented line and the call to `assertNull` in the `assertThrows`", "bodyText": "I assume\nContext.getEncounterService().getEncounter(encounter.getId())\nthrows an exception. So we do not need to assert that the return value is null since it will not return anything.\nYou can thus remove the commented line and the call to assertNull in the assertThrows", "bodyHTML": "<p dir=\"auto\">I assume</p>\n<p dir=\"auto\"><code>Context.getEncounterService().getEncounter(encounter.getId())</code></p>\n<p dir=\"auto\">throws an exception. So we do not need to assert that the return value is null since it will not return anything.</p>\n<p dir=\"auto\">You can thus remove the commented line and the call to <code>assertNull</code> in the <code>assertThrows</code></p>", "author": "teleivo", "createdAt": "2020-06-29T06:27:22Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -2528,7 +2531,8 @@ public void getEncounter_shouldFailIfUserIsNotAllowedToViewEncounterByGivenId()\n \t\t// have to add privilege in order to be able to call getEncounter(Integer) method\n \t\tContext.addProxyPrivilege(PrivilegeConstants.GET_ENCOUNTERS);\n \t\t\n-\t\tassertNull(Context.getEncounterService().getEncounter(encounter.getId()));\n+\t\t//assertNull(Context.getEncounterService().getEncounter(encounter.getId()));\n+\t\tassertThrows(APIException.class,() -> assertNull(Context.getEncounterService().getEncounter(encounter.getId())));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgwMzgzNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r446803834", "bodyText": "thanks you @teleivo", "author": "achilep", "createdAt": "2020-06-29T06:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5ODMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 247c2a0af..7d83726c3 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -2531,8 +2531,7 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\t// have to add privilege in order to be able to call getEncounter(Integer) method\n \t\tContext.addProxyPrivilege(PrivilegeConstants.GET_ENCOUNTERS);\n \t\t\n-\t\t//assertNull(Context.getEncounterService().getEncounter(encounter.getId()));\n-\t\tassertThrows(APIException.class,() -> assertNull(Context.getEncounterService().getEncounter(encounter.getId())));\n+\t\tassertThrows(APIException.class, () -> Context.getEncounterService().getEncounter(encounter.getId()));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 7d83726c3..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -2531,7 +2528,7 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\t// have to add privilege in order to be able to call getEncounter(Integer) method\n \t\tContext.addProxyPrivilege(PrivilegeConstants.GET_ENCOUNTERS);\n \t\t\n-\t\tassertThrows(APIException.class, () -> Context.getEncounterService().getEncounter(encounter.getId()));\n+\t\tassertNull(Context.getEncounterService().getEncounter(encounter.getId()));\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NDQzNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r447894434", "body": "You need to remove the line `validator.validate(concept, errors);`\r\nSince it is failing the test at https://travis-ci.org/github/openmrs/openmrs-core/jobs/702528088#L2893\r\n\r\nI made the mistake some time back and added this line https://github.com/openmrs/openmrs-core/commit/e4cb346ee8c63915c1261e8412340b8d0eb6ae16#diff-1f3fc20c6e60d3bf5fcdda09c14456c2R374\r\n\r\nThe test is making sure that if you validate a concept with a duplicate name the validation fails. It will throw a `DuplicateConceptNameException` which it does on the call to `validate`.\r\n\r\nThe call `validator.validate(concept, errors);` throws this exception but since its not in the assertThrows it fails the test. The `() -> validator.validate(anotherConcept, errors)` in your assertThrows is testing exactly that and is enough for us to make sure `validate` works as expected in this case.", "bodyText": "You need to remove the line validator.validate(concept, errors);\nSince it is failing the test at https://travis-ci.org/github/openmrs/openmrs-core/jobs/702528088#L2893\nI made the mistake some time back and added this line e4cb346#diff-1f3fc20c6e60d3bf5fcdda09c14456c2R374\nThe test is making sure that if you validate a concept with a duplicate name the validation fails. It will throw a DuplicateConceptNameException which it does on the call to validate.\nThe call validator.validate(concept, errors); throws this exception but since its not in the assertThrows it fails the test. The () -> validator.validate(anotherConcept, errors) in your assertThrows is testing exactly that and is enough for us to make sure validate works as expected in this case.", "bodyHTML": "<p dir=\"auto\">You need to remove the line <code>validator.validate(concept, errors);</code><br>\nSince it is failing the test at <a href=\"https://travis-ci.org/github/openmrs/openmrs-core/jobs/702528088#L2893\" rel=\"nofollow\">https://travis-ci.org/github/openmrs/openmrs-core/jobs/702528088#L2893</a></p>\n<p dir=\"auto\">I made the mistake some time back and added this line <a class=\"commit-link\" href=\"https://github.com/openmrs/openmrs-core/commit/e4cb346ee8c63915c1261e8412340b8d0eb6ae16#diff-1f3fc20c6e60d3bf5fcdda09c14456c2R374\"><tt>e4cb346</tt>#diff-1f3fc20c6e60d3bf5fcdda09c14456c2R374</a></p>\n<p dir=\"auto\">The test is making sure that if you validate a concept with a duplicate name the validation fails. It will throw a <code>DuplicateConceptNameException</code> which it does on the call to <code>validate</code>.</p>\n<p dir=\"auto\">The call <code>validator.validate(concept, errors);</code> throws this exception but since its not in the assertThrows it fails the test. The <code>() -&gt; validator.validate(anotherConcept, errors)</code> in your assertThrows is testing exactly that and is enough for us to make sure <code>validate</code> works as expected in this case.</p>", "author": "teleivo", "createdAt": "2020-06-30T18:28:50Z", "path": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "diffHunk": "@@ -368,11 +357,9 @@ public void validate_shouldFailIfThereIsADuplicateUnretiredConceptNameInTheSameL\n \t\tanotherConcept.getFullySpecifiedName(en).setName(duplicateName);\n \t\tErrors errors = new BindException(anotherConcept, \"concept\");\n \t\t\n-\t\texpectedException.expect(DuplicateConceptNameException.class);\n-\t\texpectedException\n-\t\t        .expectMessage(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\");\n \t\tvalidator.validate(concept, errors);\n-\t\tvalidator.validate(anotherConcept, errors);", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex daaad2ddd..fb95e475d 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n", "chunk": "@@ -357,9 +357,8 @@ public class ConceptValidatorTest extends BaseContextSensitiveTest {\n \t\tanotherConcept.getFullySpecifiedName(en).setName(duplicateName);\n \t\tErrors errors = new BindException(anotherConcept, \"concept\");\n \t\t\n-\t\tvalidator.validate(concept, errors);\n-\t\tDuplicateConceptNameException exception = assertThrows(DuplicateConceptNameException.class,() -> validator.validate(anotherConcept, errors));\n-\t\tassertThat(exception.getMessage(),is(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\"));\n+\t\tDuplicateConceptNameException exception = assertThrows(DuplicateConceptNameException.class, () -> validator.validate(anotherConcept, errors));\n+\t\tassertThat(exception.getMessage(), is(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\"));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex fb95e475d..2543ea586 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n", "chunk": "@@ -357,8 +368,11 @@ public class ConceptValidatorTest extends BaseContextSensitiveTest {\n \t\tanotherConcept.getFullySpecifiedName(en).setName(duplicateName);\n \t\tErrors errors = new BindException(anotherConcept, \"concept\");\n \t\t\n-\t\tDuplicateConceptNameException exception = assertThrows(DuplicateConceptNameException.class, () -> validator.validate(anotherConcept, errors));\n-\t\tassertThat(exception.getMessage(), is(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\"));\n+\t\texpectedException.expect(DuplicateConceptNameException.class);\n+\t\texpectedException\n+\t\t        .expectMessage(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\");\n+\t\tvalidator.validate(concept, errors);\n+\t\tvalidator.validate(anotherConcept, errors);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex 2543ea586..fb95e475d 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n", "chunk": "@@ -368,11 +357,8 @@ public class ConceptValidatorTest extends BaseContextSensitiveTest {\n \t\tanotherConcept.getFullySpecifiedName(en).setName(duplicateName);\n \t\tErrors errors = new BindException(anotherConcept, \"concept\");\n \t\t\n-\t\texpectedException.expect(DuplicateConceptNameException.class);\n-\t\texpectedException\n-\t\t        .expectMessage(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\");\n-\t\tvalidator.validate(concept, errors);\n-\t\tvalidator.validate(anotherConcept, errors);\n+\t\tDuplicateConceptNameException exception = assertThrows(DuplicateConceptNameException.class, () -> validator.validate(anotherConcept, errors));\n+\t\tassertThat(exception.getMessage(), is(\"'\" + duplicateName + \"' is a duplicate name in locale '\" + en + \"'\"));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NTUwOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r447895509", "body": "please check the whitespaces something seems to have gone wrong in your changes.\r\n\r\n`assertThrows (IllegalArgumentException.class ,() -> validator.validate(null, errors));`\r\nshould be\r\n`assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));`", "bodyText": "please check the whitespaces something seems to have gone wrong in your changes.\nassertThrows (IllegalArgumentException.class ,() -> validator.validate(null, errors));\nshould be\nassertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));", "bodyHTML": "<p dir=\"auto\">please check the whitespaces something seems to have gone wrong in your changes.</p>\n<p dir=\"auto\"><code>assertThrows (IllegalArgumentException.class ,() -&gt; validator.validate(null, errors));</code><br>\nshould be<br>\n<code>assertThrows(IllegalArgumentException.class, () -&gt; validator.validate(null, errors));</code></p>", "author": "teleivo", "createdAt": "2020-06-30T18:30:43Z", "path": "api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java", "diffHunk": "@@ -51,16 +51,15 @@ public void setUp(){\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(NULL_ERROR_MESSAGE);\n-\t\tvalidator.validate(null, errors);\n+\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(null, errors));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\nindex 7f01d30ef..5ba76ecfb 100644\n--- a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n", "chunk": "@@ -51,15 +51,15 @@ public class ConditionValidatorTest {\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(null, errors));\n-\t\tassertThat(exception.getMessage(),is(NULL_ERROR_MESSAGE));\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));\n+\t\tassertThat(exception.getMessage(), is(NULL_ERROR_MESSAGE));\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n \t\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(new Cohort(), errors));\n-\t\tassertThat(exception.getMessage(),is(INCOMPATIBLE_ERROR_MESSAGE));\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(new Cohort(), errors));\n+\t\tassertThat(exception.getMessage(), is(INCOMPATIBLE_ERROR_MESSAGE));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\nindex 5ba76ecfb..33fee3fd3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n", "chunk": "@@ -51,15 +51,16 @@ public class ConditionValidatorTest {\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));\n-\t\tassertThat(exception.getMessage(), is(NULL_ERROR_MESSAGE));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(NULL_ERROR_MESSAGE);\n+\t\tvalidator.validate(null, errors);\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n-\t\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(new Cohort(), errors));\n-\t\tassertThat(exception.getMessage(), is(INCOMPATIBLE_ERROR_MESSAGE));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(INCOMPATIBLE_ERROR_MESSAGE);\n+\t\tvalidator.validate(new Cohort(), errors);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\nindex 33fee3fd3..cbf416337 100644\n--- a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n", "chunk": "@@ -51,16 +50,14 @@ public class ConditionValidatorTest {\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(NULL_ERROR_MESSAGE);\n-\t\tvalidator.validate(null, errors);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));\n+\t\tassertThat(exception.getMessage(), is(NULL_ERROR_MESSAGE));\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(INCOMPATIBLE_ERROR_MESSAGE);\n-\t\tvalidator.validate(new Cohort(), errors);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(new Cohort(), errors));\n+\t\tassertThat(exception.getMessage(), is(INCOMPATIBLE_ERROR_MESSAGE));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NTY0NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r447895644", "body": "same here", "bodyText": "same here", "bodyHTML": "<p dir=\"auto\">same here</p>", "author": "teleivo", "createdAt": "2020-06-30T18:30:59Z", "path": "api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java", "diffHunk": "@@ -51,16 +51,15 @@ public void setUp(){\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(NULL_ERROR_MESSAGE);\n-\t\tvalidator.validate(null, errors);\n+\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(null, errors));\n+\t\tassertThat(exception.getMessage(),is(NULL_ERROR_MESSAGE));\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(INCOMPATIBLE_ERROR_MESSAGE);\n-\t\tvalidator.validate(new Cohort(), errors);\n+\t\n+\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(new Cohort(), errors));", "originalCommit": "2b1ae519770454ee8b68fad112f8b8bbedd0e744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDU3MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r447910570", "bodyText": "okay thanks  @teleivo", "author": "achilep", "createdAt": "2020-06-30T18:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5NTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\nindex 7f01d30ef..5ba76ecfb 100644\n--- a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n", "chunk": "@@ -51,15 +51,15 @@ public class ConditionValidatorTest {\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(null, errors));\n-\t\tassertThat(exception.getMessage(),is(NULL_ERROR_MESSAGE));\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));\n+\t\tassertThat(exception.getMessage(), is(NULL_ERROR_MESSAGE));\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n \t\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class ,() -> validator.validate(new Cohort(), errors));\n-\t\tassertThat(exception.getMessage(),is(INCOMPATIBLE_ERROR_MESSAGE));\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(new Cohort(), errors));\n+\t\tassertThat(exception.getMessage(), is(INCOMPATIBLE_ERROR_MESSAGE));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\nindex 5ba76ecfb..33fee3fd3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n", "chunk": "@@ -51,15 +51,16 @@ public class ConditionValidatorTest {\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));\n-\t\tassertThat(exception.getMessage(), is(NULL_ERROR_MESSAGE));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(NULL_ERROR_MESSAGE);\n+\t\tvalidator.validate(null, errors);\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n-\t\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(new Cohort(), errors));\n-\t\tassertThat(exception.getMessage(), is(INCOMPATIBLE_ERROR_MESSAGE));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(INCOMPATIBLE_ERROR_MESSAGE);\n+\t\tvalidator.validate(new Cohort(), errors);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\nindex 33fee3fd3..cbf416337 100644\n--- a/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConditionValidatorTest.java\n", "chunk": "@@ -51,16 +50,14 @@ public class ConditionValidatorTest {\n \n \t@Test\n \tpublic void shouldFailIfGivenNull(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(NULL_ERROR_MESSAGE);\n-\t\tvalidator.validate(null, errors);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(null, errors));\n+\t\tassertThat(exception.getMessage(), is(NULL_ERROR_MESSAGE));\n \t}\n \n \t@Test\n \tpublic void shouldFailIfGivenInstanceOfClassOtherThanCondition(){\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(INCOMPATIBLE_ERROR_MESSAGE);\n-\t\tvalidator.validate(new Cohort(), errors);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> validator.validate(new Cohort(), errors));\n+\t\tassertThat(exception.getMessage(), is(INCOMPATIBLE_ERROR_MESSAGE));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}}, {"oid": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "url": "https://github.com/openmrs/openmrs-core/commit/34d90b56f8adaebe4eb7c84b3f70febc045fe148", "message": "TRUNK-5813: Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-06-30T23:35:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODU2Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448128563", "body": "@achilep these above look like formatting changes ", "bodyText": "@achilep these above look like formatting changes", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/achilep/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/achilep\">@achilep</a> these above look like formatting changes</p>", "author": "gitcliff", "createdAt": "2020-07-01T05:47:13Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -50,29 +73,6 @@\n import org.openmrs.util.OpenmrsConstants;\n import org.openmrs.util.PrivilegeConstants;\n \n-import java.lang.reflect.Field;\n-import java.text.DateFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.TreeSet;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzODMyNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448138325", "bodyText": "yes @gitcliff , and it is the right format. when u config intelij like its here .it automatically formats all the java class in which you work.", "author": "achilep", "createdAt": "2020-07-01T06:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjAxMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448152013", "bodyText": "yes this formatting is correct", "author": "teleivo", "createdAt": "2020-07-01T06:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 7d83726c3..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -73,6 +50,29 @@ import org.openmrs.util.DateUtil;\n import org.openmrs.util.OpenmrsConstants;\n import org.openmrs.util.PrivilegeConstants;\n \n+import java.lang.reflect.Field;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n /**\n  * Tests all methods in the {@link EncounterService}\n  */\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NDI5Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448144296", "body": "should be\r\n\r\n```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.confirmNoKnownAllergies());\r\n```\r\n\r\nWe do not put whitespaces before the comma.", "bodyText": "should be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class , () -> allergies.confirmNoKnownAllergies());\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.confirmNoKnownAllergies());\n          \n      \n    \n    \n  \n\nWe do not put whitespaces before the comma.", "bodyHTML": "<p dir=\"auto\">should be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class<span class=\"x x-first x-last\"> </span>, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>confirmNoKnownAllergies());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>confirmNoKnownAllergies());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">We do not put whitespaces before the comma.</p>", "author": "teleivo", "createdAt": "2020-07-01T06:33:56Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -143,16 +145,16 @@ public void shouldConfirmNoKnownAllergies(){\n \t/**\n \t * @see {@link Allergies#confirmNoKnownAllergies()}\n \t */\n-\t@Test(expected = APIException.class)\n+\t@Test\n \tpublic void shouldThrowAnErrorWhenTryingConfirmNoKnowAllergiesWhileAllergiesIsNotEmpty(){\n \t\tallergies.add(new Allergy());\n-\t\tallergies.confirmNoKnownAllergies();\n+\t\tassertThrows(APIException.class , () -> allergies.confirmNoKnownAllergies());", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex c9ba272e3..9bfc1c716 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -148,7 +148,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void shouldThrowAnErrorWhenTryingConfirmNoKnowAllergiesWhileAllergiesIsNotEmpty(){\n \t\tallergies.add(new Allergy());\n-\t\tassertThrows(APIException.class , () -> allergies.confirmNoKnownAllergies());\n+\t\tassertThrows(APIException.class, () -> allergies.confirmNoKnownAllergies());\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NDcwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448144702", "body": "should be\r\n\r\n```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\r\n```", "bodyText": "should be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows( APIException.class, () -> allergies.add(allergy2));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.add(allergy2));", "bodyHTML": "<p dir=\"auto\">should be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>add(allergy2));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>add(allergy2));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:34:58Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -162,7 +164,7 @@ public void add_shouldNotAllowDuplicateCodedAllergen(){\n \t\tallergy2.setAllergen(new Allergen(null, concept, null));\n \t\t\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n+\t\tassertThrows( APIException.class, () -> allergies.add(allergy2));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex c9ba272e3..9bfc1c716 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -164,7 +164,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergy2.setAllergen(new Allergen(null, concept, null));\n \t\t\n \t\tallergies.add(allergy1);\n-\t\tassertThrows( APIException.class, () -> allergies.add(allergy2));\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NTA2OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448145069", "body": "should be\r\n```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\r\n```", "bodyText": "should be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows( APIException.class, () -> allergies.add(allergy2));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.add(allergy2));", "bodyHTML": "<p dir=\"auto\">should be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>add(allergy2));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>add(allergy2));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:35:53Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -194,7 +196,7 @@ public void add_shouldNotAllowDuplicateNonCodedAllergen(){\n \t\tallergy2.setAllergen(new Allergen(null, concept, \"OTHER VALUE\"));\n \t\t\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n+\t\tassertThrows( APIException.class, () -> allergies.add(allergy2));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex c9ba272e3..9bfc1c716 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -196,7 +196,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergy2.setAllergen(new Allergen(null, concept, \"OTHER VALUE\"));\n \t\t\n \t\tallergies.add(allergy1);\n-\t\tassertThrows( APIException.class, () -> allergies.add(allergy2));\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NTMzMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448145332", "body": "should be\r\n```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\r\n```", "bodyText": "should be\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));", "bodyHTML": "<p dir=\"auto\">should be</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(allergies));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(allergies));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:36:30Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -294,13 +296,13 @@ public void addAll_shouldNotAllowDuplicateCodedAllergen(){\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n \t\t\n-\t\tallergies.addAll(allergies);\n+\t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex c9ba272e3..9bfc1c716 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -296,7 +296,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n \t\t\n-\t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NTQyOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448145428", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(allergies));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(allergies));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:36:44Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -311,14 +313,14 @@ public void addAll_shouldAllowNonDuplicateCodedAllergen(){\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n-\t\t\n-\t\tallergies.addAll(allergies);\n+\n+\t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex c9ba272e3..9bfc1c716 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -314,7 +314,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n \n-\t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NTU1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448145556", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(allergies));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(allergies));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:37:02Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -351,14 +353,14 @@ public void addAll_shouldAllowNonDuplicateNonCodedAllergen(){\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n-\t\t\n-\t\tallergies.addAll(allergies);\n+\n+\t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NjIwNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448146205", "bodyText": "You will need to look at all your assertThrows it seems that you have whitespace issues in a lot of them.\nWhats important to remember are the following\n\nno whitespace before the comma\nno whitespace after ( before the Exception\nand a lambda should look like () -> yyy", "author": "teleivo", "createdAt": "2020-07-01T06:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NTU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex c9ba272e3..9bfc1c716 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -354,7 +352,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n \n-\t\tassertThrows(APIException.class, ()-> allergies.addAll(allergies));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NzQ4Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448147486", "body": "```suggestion\r\n\t\tassertThrows(RuntimeException.class, () -> obs.setValueAsString(null));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(RuntimeException.class , () -> obs.setValueAsString(null));\n          \n          \n            \n            \t\tassertThrows(RuntimeException.class, () -> obs.setValueAsString(null));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">RuntimeException</span><span class=\"pl-k\">.</span>class<span class=\"x x-first x-last\"> </span>, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> obs<span class=\"pl-k\">.</span>setValueAsString(<span class=\"pl-c1\">null</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">RuntimeException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> obs<span class=\"pl-k\">.</span>setValueAsString(<span class=\"pl-c1\">null</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:41:07Z", "path": "api/src/test/java/org/openmrs/ObsTest.java", "diffHunk": "@@ -317,19 +318,19 @@ public void isComplex_shouldReturnTrueIfTheConceptIsComplex() throws Exception {\n \t/**\n \t * @see Obs#setValueAsString(String)\n \t */\n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void setValueAsString_shouldFailIfTheValueOfTheStringIsEmpty() throws Exception {\n \t\tObs obs = new Obs();\n-\t\tobs.setValueAsString(\"\");\n+\t\tassertThrows(RuntimeException.class, () -> obs.setValueAsString(\"\"));\n \t}\n \t\n \t/**\n \t * @see Obs#setValueAsString(String)\n \t */\n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void setValueAsString_shouldFailIfTheValueOfTheStringIsNull() throws Exception {\n \t\tObs obs = new Obs();\n-\t\tobs.setValueAsString(null);\n+\t\tassertThrows(RuntimeException.class , () -> obs.setValueAsString(null));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/ObsTest.java b/api/src/test/java/org/openmrs/ObsTest.java\nindex e436dfe3a..b0ea7e414 100644\n--- a/api/src/test/java/org/openmrs/ObsTest.java\n+++ b/api/src/test/java/org/openmrs/ObsTest.java\n", "chunk": "@@ -330,7 +330,7 @@ public class ObsTest {\n \t@Test\n \tpublic void setValueAsString_shouldFailIfTheValueOfTheStringIsNull() throws Exception {\n \t\tObs obs = new Obs();\n-\t\tassertThrows(RuntimeException.class , () -> obs.setValueAsString(null));\n+\t\tassertThrows(RuntimeException.class, () -> obs.setValueAsString(null));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0ODYyMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448148623", "body": "```suggestion\r\n\t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\r\n\t        assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n          \n          \n            \n            \t    assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n          \n          \n            \n            \t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n          \n          \n            \n            \t        assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\">APIException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> order<span class=\"pl-k\">.</span>isDiscontinued(<span class=\"pl-smi\">DateUtils</span><span class=\"pl-k\">.</span>parseDate(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2014-11-01 11:11:13<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">DATE_FORMAT</span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t    assertThat(exception<span class=\"pl-k\">.</span>getMessage(), is(<span class=\"pl-smi\">Context</span><span class=\"pl-k\">.</span>getMessageSourceService()<span class=\"pl-k\">.</span>getMessage(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Order.error.invalidDateStoppedAndAutoExpireDate<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">APIException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> order<span class=\"pl-k\">.</span>isDiscontinued(<span class=\"pl-smi\">DateUtils</span><span class=\"pl-k\">.</span>parseDate(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2014-11-01 11:11:13<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">DATE_FORMAT</span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t    <span class=\"x x-first x-last\">    </span>assertThat(exception<span class=\"pl-k\">.</span>getMessage(), is(<span class=\"pl-smi\">Context</span><span class=\"pl-k\">.</span>getMessageSourceService()<span class=\"pl-k\">.</span>getMessage(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Order.error.invalidDateStoppedAndAutoExpireDate<span class=\"pl-pds\">\"</span></span>)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:43:54Z", "path": "api/src/test/java/org/openmrs/OrderTest.java", "diffHunk": "@@ -521,10 +520,8 @@ public void isDiscontinued_shouldFailIfDateStoppedIsAfterAutoExpireDate() throws\n \t\torder.setDateActivated(DateUtils.parseDate(\"2014-11-01 11:11:10\", DATE_FORMAT));\n \t\torder.setAutoExpireDate(DateUtils.parseDate(\"2014-11-01 11:11:11\", DATE_FORMAT));\n \t\tOrderUtilTest.setDateStopped(order, DateUtils.parseDate(\"2014-11-01 11:11:12\", DATE_FORMAT));\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\n-\t\t    Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\"));\n-\t\torder.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n+\t    assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex fddbbe8b8..64d1c1e70 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -525,7 +525,7 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see Order#isDiscontinued(java.util.Date)\n+\t * @see Order#isDiscontinued(Date)\n \t */\n \t@Test\n \tpublic void isDiscontinued_shouldReturnTrueIfCheckDateIsAfterDateStoppedButBeforeAutoExpireDate() throws Exception {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex 64d1c1e70..fddbbe8b8 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -525,7 +525,7 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see Order#isDiscontinued(Date)\n+\t * @see Order#isDiscontinued(java.util.Date)\n \t */\n \t@Test\n \tpublic void isDiscontinued_shouldReturnTrueIfCheckDateIsAfterDateStoppedButBeforeAutoExpireDate() throws Exception {\n", "next_change": {"commit": "c3c868926923c9207ddcb9ae33cb33e588ad49b3", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/OrderTest.java b/api/src/test/java/org/openmrs/OrderTest.java\nindex fddbbe8b8..8a879c400 100644\n--- a/api/src/test/java/org/openmrs/OrderTest.java\n+++ b/api/src/test/java/org/openmrs/OrderTest.java\n", "chunk": "@@ -521,7 +521,7 @@ public class OrderTest extends BaseContextSensitiveTest {\n \t\torder.setAutoExpireDate(DateUtils.parseDate(\"2014-11-01 11:11:11\", DATE_FORMAT));\n \t\tOrderUtilTest.setDateStopped(order, DateUtils.parseDate(\"2014-11-01 11:11:12\", DATE_FORMAT));\n \t\tAPIException exception = assertThrows(APIException.class, () -> order.isDiscontinued(DateUtils.parseDate(\"2014-11-01 11:11:13\", DATE_FORMAT)));\n-\t    assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n+\t\tassertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Order.error.invalidDateStoppedAndAutoExpireDate\")));\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0OTM5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448149395", "body": "why did you delete the `concept` and the call to `saveConcept`?\r\nit seems to me that this could be the reason for the failing test at https://travis-ci.org/github/openmrs/openmrs-core/jobs/703726180#L3173", "bodyText": "why did you delete the concept and the call to saveConcept?\nit seems to me that this could be the reason for the failing test at https://travis-ci.org/github/openmrs/openmrs-core/jobs/703726180#L3173", "bodyHTML": "<p dir=\"auto\">why did you delete the <code>concept</code> and the call to <code>saveConcept</code>?<br>\nit seems to me that this could be the reason for the failing test at <a href=\"https://travis-ci.org/github/openmrs/openmrs-core/jobs/703726180#L3173\" rel=\"nofollow\">https://travis-ci.org/github/openmrs/openmrs-core/jobs/703726180#L3173</a></p>", "author": "teleivo", "createdAt": "2020-07-01T06:45:47Z", "path": "api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java", "diffHunk": "@@ -61,7 +60,6 @@ public void before_shouldNotifyListenersAboutCheckedPrivileges() {\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n \t\t\n-\t\tContext.getConceptService().saveConcept(concept);", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4c201fcd7..de95fa3e2 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -50,8 +51,8 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener2.hasPrivileges.clear();\n \t\tlistener2.lacksPrivileges.clear();\n-\t\t\n-\t\t\n+\n+\t\tConcept concept = Context.getConceptService().getConcept(3);\n \t\tassertThat(\"listener1\", listener1.hasPrivileges, containsInAnyOrder(PrivilegeConstants.GET_CONCEPTS));\n \t\tassertThat(\"listener2\", listener2.hasPrivileges, containsInAnyOrder(PrivilegeConstants.GET_CONCEPTS));\n \t\tassertThat(listener1.lacksPrivileges, empty());\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex de95fa3e2..4ce5a1132 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -51,7 +51,6 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener2.hasPrivileges.clear();\n \t\tlistener2.lacksPrivileges.clear();\n-\n \t\tConcept concept = Context.getConceptService().getConcept(3);\n \t\tassertThat(\"listener1\", listener1.hasPrivileges, containsInAnyOrder(PrivilegeConstants.GET_CONCEPTS));\n \t\tassertThat(\"listener2\", listener2.hasPrivileges, containsInAnyOrder(PrivilegeConstants.GET_CONCEPTS));\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4ce5a1132..d46d38e4d 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -51,7 +50,9 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener2.hasPrivileges.clear();\n \t\tlistener2.lacksPrivileges.clear();\n+\t\t\n \t\tConcept concept = Context.getConceptService().getConcept(3);\n+\t\t\n \t\tassertThat(\"listener1\", listener1.hasPrivileges, containsInAnyOrder(PrivilegeConstants.GET_CONCEPTS));\n \t\tassertThat(\"listener2\", listener2.hasPrivileges, containsInAnyOrder(PrivilegeConstants.GET_CONCEPTS));\n \t\tassertThat(listener1.lacksPrivileges, empty());\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4ce5a1132..d46d38e4d 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -59,6 +60,7 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n+\t\t\n \t\tContext.getConceptService().saveConcept(concept);\n \t\t\n \t\tString[] privileges = { PrivilegeConstants.MANAGE_CONCEPTS, PrivilegeConstants.GET_OBS,\n", "next_change": null}]}}, {"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex de95fa3e2..4ce5a1132 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -60,7 +59,6 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n-\n \t\tContext.getConceptService().saveConcept(concept);\n \t\t\n \t\tString[] privileges = { PrivilegeConstants.MANAGE_CONCEPTS, PrivilegeConstants.GET_OBS,\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4ce5a1132..d46d38e4d 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -59,6 +60,7 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n+\t\t\n \t\tContext.getConceptService().saveConcept(concept);\n \t\t\n \t\tString[] privileges = { PrivilegeConstants.MANAGE_CONCEPTS, PrivilegeConstants.GET_OBS,\n", "next_change": null}]}}]}}, {"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4c201fcd7..de95fa3e2 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -59,7 +60,8 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n-\t\t\n+\n+\t\tContext.getConceptService().saveConcept(concept);\n \t\t\n \t\tString[] privileges = { PrivilegeConstants.MANAGE_CONCEPTS, PrivilegeConstants.GET_OBS,\n \t\t        PrivilegeConstants.GET_CONCEPT_ATTRIBUTE_TYPES };\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex de95fa3e2..4ce5a1132 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -60,7 +59,6 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n-\n \t\tContext.getConceptService().saveConcept(concept);\n \t\t\n \t\tString[] privileges = { PrivilegeConstants.MANAGE_CONCEPTS, PrivilegeConstants.GET_OBS,\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\nindex 4ce5a1132..d46d38e4d 100644\n--- a/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n+++ b/api/src/test/java/org/openmrs/aop/AuthorizationAdviceTest.java\n", "chunk": "@@ -59,6 +60,7 @@ public class AuthorizationAdviceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tlistener1.hasPrivileges.clear();\n \t\tlistener2.hasPrivileges.clear();\n+\t\t\n \t\tContext.getConceptService().saveConcept(concept);\n \t\t\n \t\tString[] privileges = { PrivilegeConstants.MANAGE_CONCEPTS, PrivilegeConstants.GET_OBS,\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDYwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448150603", "body": "When you hardcode the locale like `\"\\\"en_GB\\\"` in an assertion it might be that the test fails on another machine that has a different locale set.\r\n\r\nAbove we get it using `LocaleUtility.getDefaultLocale().toString()`. One option would be to use that in the assertion and string concatenate it with the rest of the message.\r\n\r\nI think we should not have that much logic in this assertion. I would rather only partially match and thus use a matcher like `containsString` or `startsWith` to make sure that the message contains `\"can not be removed from allowed locales list because it is the default locale\"`\r\n\r\n", "bodyText": "When you hardcode the locale like \"\\\"en_GB\\\" in an assertion it might be that the test fails on another machine that has a different locale set.\nAbove we get it using LocaleUtility.getDefaultLocale().toString(). One option would be to use that in the assertion and string concatenate it with the rest of the message.\nI think we should not have that much logic in this assertion. I would rather only partially match and thus use a matcher like containsString or startsWith to make sure that the message contains \"can not be removed from allowed locales list because it is the default locale\"", "bodyHTML": "<p dir=\"auto\">When you hardcode the locale like <code>\"\\\"en_GB\\\"</code> in an assertion it might be that the test fails on another machine that has a different locale set.</p>\n<p dir=\"auto\">Above we get it using <code>LocaleUtility.getDefaultLocale().toString()</code>. One option would be to use that in the assertion and string concatenate it with the rest of the message.</p>\n<p dir=\"auto\">I think we should not have that much logic in this assertion. I would rather only partially match and thus use a matcher like <code>containsString</code> or <code>startsWith</code> to make sure that the message contains <code>\"can not be removed from allowed locales list because it is the default locale\"</code></p>", "author": "teleivo", "createdAt": "2020-07-01T06:48:42Z", "path": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "diffHunk": "@@ -443,23 +440,21 @@ public void saveGlobalProperty_shouldFailIfGivenAllowedLocaleListDoesNotContainD\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tadminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n+\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n+\t\tassertThat(exception.getMessage(), is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 1e319da71..f74ba2af6 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -443,7 +442,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));\n+\t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex f74ba2af6..8ba380882 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -442,7 +442,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));\n+\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 8ba380882..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -439,10 +443,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n \t}\n \n \t@Test\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 8ba380882..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -450,10 +455,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \n \t\tLocale defaultLocale = new Locale(\"fr\");\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"is not in allowed locales list\");\n \n-\t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString())));\n-\t\tassertThat(exception.getMessage(), containsString(\"is not in allowed locales list\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString()));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDk2Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448150967", "body": "```suggestion\r\n\t\tAPIException exception = assertThrows(APIException.class, () -> adminService.saveGlobalProperty(\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(\n          \n          \n            \n            \t\tAPIException exception = assertThrows(APIException.class, () -> adminService.saveGlobalProperty(", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\">APIException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class<span class=\"x x-first x-last\"> ,</span>() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> adminService<span class=\"pl-k\">.</span>saveGlobalProperty(</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">APIException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class<span class=\"x x-first x-last\">, </span>() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> adminService<span class=\"pl-k\">.</span>saveGlobalProperty(</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:49:36Z", "path": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "diffHunk": "@@ -443,23 +440,21 @@ public void saveGlobalProperty_shouldFailIfGivenAllowedLocaleListDoesNotContainD\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tadminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n+\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n+\t\tassertThat(exception.getMessage(), is(\"\\\"en_GB\\\" can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n \tpublic void saveGlobalProperty_shouldFailIfDefaultLocaleNotInAllowedLocaleList() {\n \n \t\tLocale defaultLocale = new Locale(\"fr\");\n \n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"is not in allowed locales list\");\n \n-\t\tadminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString()));\n+\t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 1e319da71..f74ba2af6 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -454,7 +453,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \n \t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString())));\n-\t\tassertThat(exception.getMessage(), is(\"\\\"fr\\\" is not in allowed locales list\"));\n+\t\tassertThat(exception.getMessage(), containsString(\"is not in allowed locales list\"));\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex f74ba2af6..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -450,10 +455,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \n \t\tLocale defaultLocale = new Locale(\"fr\");\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"is not in allowed locales list\");\n \n-\t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString())));\n-\t\tassertThat(exception.getMessage(), containsString(\"is not in allowed locales list\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString()));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MTEyOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448151129", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> adminService.validate(null, errors));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class,() -> adminService.validate(null, errors));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> adminService.validate(null, errors));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class,() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> adminService<span class=\"pl-k\">.</span>validate(<span class=\"pl-c1\">null</span>, errors));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class,<span class=\"x x-first x-last\"> </span>() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> adminService<span class=\"pl-k\">.</span>validate(<span class=\"pl-c1\">null</span>, errors));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:49:57Z", "path": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "diffHunk": "@@ -633,10 +628,10 @@ public void getSearchLocales_shouldIncludeUsersProficientLocales() {\n \t\tassertFalse(\"pl\", searchLocales.contains(new Locale(\"pl\")));\n \t}\n \t\n-\t@Test(expected = APIException.class)\n+\t@Test\n \tpublic void validate_shouldThrowThrowAPIExceptionIfTheInputIsNull() {\n \t\tBindException errors = new BindException(new Object(), \"\");\n-\t\tadminService.validate(null, errors);\n+\t\tassertThrows(APIException.class,() -> adminService.validate(null, errors));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 1e319da71..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -628,10 +633,10 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\tassertFalse(\"pl\", searchLocales.contains(new Locale(\"pl\")));\n \t}\n \t\n-\t@Test\n+\t@Test(expected = APIException.class)\n \tpublic void validate_shouldThrowThrowAPIExceptionIfTheInputIsNull() {\n \t\tBindException errors = new BindException(new Object(), \"\");\n-\t\tassertThrows(APIException.class,() -> adminService.validate(null, errors));\n+\t\tadminService.validate(null, errors);\n \t}\n \t\n \t@Test\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MTMxNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448151317", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class,() -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class,() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> conceptService<span class=\"pl-k\">.</span>getConceptByMapping(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>127689<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Some Standardized Terminology<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class,<span class=\"x x-first x-last\"> </span>() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> conceptService<span class=\"pl-k\">.</span>getConceptByMapping(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>127689<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Some Standardized Terminology<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:50:24Z", "path": "api/src/test/java/org/openmrs/api/ConceptServiceTest.java", "diffHunk": "@@ -616,9 +613,9 @@ public void getConceptByMapping_shouldNotReturnRetiredConcept() {\n \t\t\n \t}\n \t\n-\t@Test(expected = APIException.class)\n+\t@Test\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tconceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\");\n+\t\tassertThrows(APIException.class,() -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 84f3e79a7..4f453d48e 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -615,7 +615,7 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Test\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tassertThrows(APIException.class,() -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n+\t\tassertThrows(APIException.class, () -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\nindex 4f453d48e..4cb01f720 100644\n--- a/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ConceptServiceTest.java\n", "chunk": "@@ -613,9 +616,9 @@ public class ConceptServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t}\n \t\n-\t@Test\n+\t@Test(expected = APIException.class)\n \tpublic void getConceptByMapping_shouldThrowExceptionIfTwoConceptsHaveSameMapping() {\n-\t\tassertThrows(APIException.class, () -> conceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\"));\n+\t\tconceptService.getConceptByMapping(\"127689\", \"Some Standardized Terminology\");\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjI5Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448152297", "body": "please remove the newline", "bodyText": "please remove the newline", "bodyHTML": "<p dir=\"auto\">please remove the newline</p>", "author": "teleivo", "createdAt": "2020-07-01T06:52:40Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -1679,9 +1680,10 @@ public void getEncountersByPatient_shouldIncludeVoidedEncountersInTheReturnedLis\n \t/**\n \t * @see EncounterService#getEncountersByPatient(String,boolean)\n \t */\n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void getEncountersByPatient_shouldThrowErrorIfGivenNullParameter() {\n-\t\tContext.getEncounterService().getEncountersByPatient(null, false);\n+\t\tassertThrows(IllegalArgumentException.class, () -> Context.getEncounterService().getEncountersByPatient(null, false));\n+\t\t", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 7d83726c3..fe683c48c 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -1683,7 +1683,6 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t@Test\n \tpublic void getEncountersByPatient_shouldThrowErrorIfGivenNullParameter() {\n \t\tassertThrows(IllegalArgumentException.class, () -> Context.getEncounterService().getEncountersByPatient(null, false));\n-\t\t\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex fe683c48c..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -1680,9 +1679,9 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t/**\n \t * @see EncounterService#getEncountersByPatient(String,boolean)\n \t */\n-\t@Test\n+\t@Test(expected = IllegalArgumentException.class)\n \tpublic void getEncountersByPatient_shouldThrowErrorIfGivenNullParameter() {\n-\t\tassertThrows(IllegalArgumentException.class, () -> Context.getEncounterService().getEncountersByPatient(null, false));\n+\t\tContext.getEncounterService().getEncountersByPatient(null, false);\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjcyNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448152726", "body": "```suggestion\r\n\t\tassertThrows(EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows( EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));\n          \n          \n            \n            \t\tassertThrows(EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">EncounterTypeLockedException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> encounterService<span class=\"pl-k\">.</span>retireEncounterType(encounterType, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>reason<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">EncounterTypeLockedException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> encounterService<span class=\"pl-k\">.</span>retireEncounterType(encounterType, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>reason<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-01T06:53:42Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -2843,13 +2847,13 @@ public void retireEncounterType_shouldThrowErrorWhenTryingToRetireEncounterTypeW\n \t\tEncounterType encounterType = Context.getEncounterService().getEncounterType(1);\n \t\tAssert.assertNotNull(encounterType);\n \t\t\n-\t\tencounterService.retireEncounterType(encounterType, \"reason\");\n+\t\tassertThrows( EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));", "originalCommit": "34d90b56f8adaebe4eb7c84b3f70febc045fe148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MzkwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448583903", "bodyText": "thanks @teleivo for correction.", "author": "achilep", "createdAt": "2020-07-01T19:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MjcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "0586c206fb60d6b454c852377b14422d2901d650", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex 7d83726c3..fe683c48c 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -2847,7 +2846,7 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\tEncounterType encounterType = Context.getEncounterService().getEncounterType(1);\n \t\tAssert.assertNotNull(encounterType);\n \t\t\n-\t\tassertThrows( EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));\n+\t\tassertThrows(EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex fe683c48c..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -2846,13 +2843,13 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\tEncounterType encounterType = Context.getEncounterService().getEncounterType(1);\n \t\tAssert.assertNotNull(encounterType);\n \t\t\n-\t\tassertThrows(EncounterTypeLockedException.class, () -> encounterService.retireEncounterType(encounterType, \"reason\"));\n+\t\tencounterService.retireEncounterType(encounterType, \"reason\");\n \t}\n \t\n \t/**\n \t * @see EncounterService#unretireEncounterType(EncounterType)\n \t */\n-\t@Test\n+\t@Test(expected = EncounterTypeLockedException.class)\n \tpublic void unretireEncounterType_shouldThrowErrorWhenTryingToUnretireEncounterTypeWhenEncounterTypesAreLocked()\n \t{\n \t\tEncounterService encounterService = Context.getEncounterService();\n", "next_change": null}]}}]}}, {"oid": "0586c206fb60d6b454c852377b14422d2901d650", "url": "https://github.com/openmrs/openmrs-core/commit/0586c206fb60d6b454c852377b14422d2901d650", "message": "TRUNK-5813: Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-01T22:32:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448659459", "body": "please @teleivo  this classs is failling because of this two expression: \r\n\r\nmessageSourceService.getMessage(messageKey)) does not return messageKey when it is call .\r\n      \r\n     @Mock\r\n\tprivate MessageSourceService messageSourceService;\r\n\r\n\r\n    when(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\r\n\r\n\r\n", "bodyText": "please @teleivo  this classs is failling because of this two expression:\nmessageSourceService.getMessage(messageKey)) does not return messageKey when it is call .\n @Mock\nprivate MessageSourceService messageSourceService;\n\n\nwhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);", "bodyHTML": "<p dir=\"auto\">please <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/teleivo/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/teleivo\">@teleivo</a>  this classs is failling because of this two expression:</p>\n<p dir=\"auto\">messageSourceService.getMessage(messageKey)) does not return messageKey when it is call .</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Mock\nprivate MessageSourceService messageSourceService;\n\n\nwhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\"><pre><code> @Mock\nprivate MessageSourceService messageSourceService;\n\n\nwhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\n</code></pre></div>", "author": "achilep", "createdAt": "2020-07-01T23:02:47Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -67,9 +67,7 @@\n \n \tprivate static DocumentBuilder documentBuilder;\n \n-\t@Rule\n-\tpublic ExpectedException expectedException = ExpectedException.none();\n-\n+\t\n \t@Rule\n \tpublic TemporaryFolder temporaryFolder = new TemporaryFolder();\n ", "originalCommit": "0586c206fb60d6b454c852377b14422d2901d650", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4NTE4Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448885183", "bodyText": "what does it return?", "author": "teleivo", "createdAt": "2020-07-02T09:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4NzY4NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448887684", "bodyText": "does it return the module name at the end of the message?\nI believe I adapted\n\tprivate void expectModuleExceptionWithMessage(Executable executable, String expectedMessage) {\n\t\tModuleException thrown = assertThrows(ModuleException.class, executable);\n\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n\t}\nto use startsWith\nsee e20474f#diff-2070c992acbb365e64864e095104fb74L1203-L1206", "author": "teleivo", "createdAt": "2020-07-02T09:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNDIyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448914227", "bodyText": "it does not work, in fact I deleted the function and I call\n         ModuleException thrown = assertThrows(ModuleException.class, executable);\n\tassertThat(thrown.getMessage(), startsWith(expectedMessage)) \n\ndirectly in each test.", "author": "achilep", "createdAt": "2020-07-02T10:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNjc3NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448916775", "bodyText": "The problem is this function :\n\n\nits does not return the value it must return(messageKey).\nthanks @teleivo .", "author": "achilep", "createdAt": "2020-07-02T10:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODkxMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r448918910", "bodyText": "this is one of the message :", "author": "achilep", "createdAt": "2020-07-02T10:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MDcyMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449180723", "bodyText": "I am looking into why the mock only returns null \ud83d\udc40\nIn any case I would advocate for using startsWith\n\tprivate void expectModuleExceptionWithMessage(Executable executable, String expectedMessage) {\n\t\tModuleException thrown = assertThrows(ModuleException.class, executable);\n\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n\t}\ninstead of changing the messageKey like you did\n\t\tString messageKey = \"Module.error.cannotParseConfigFile Module: modulewithoutconfig.omod\";\n\t\twhenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(messageKey);\nSince if you look at the old ExpectedException the expectMessage was only checking for the substring. The following is a successful test\n\t@Test\n\tpublic void some() {\n\t\texpectedException.expect(IllegalArgumentException.class);\n\t\texpectedException.expectMessage(\"foo\");\n\t\tthrow new IllegalArgumentException(\"foo some\");\n\t}\nSo assertThat(thrown.getMessage(), startsWith(expectedMessage)); would be along those lines.", "author": "teleivo", "createdAt": "2020-07-02T17:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1OTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\nindex b4c6365cb..ab26b309c 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n", "chunk": "@@ -67,7 +67,9 @@ public class ModuleFileParserUnitTest extends BaseContextMockTest {\n \n \tprivate static DocumentBuilder documentBuilder;\n \n-\t\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\n \t@Rule\n \tpublic TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MzMxNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449193317", "body": "this is the problem :)\r\n\r\n`whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey` sets up the mock. if you look at what it does its basically\r\n\r\n```java\r\n\tprivate void whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(String messageKey) {\r\n\t\twhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\r\n\t}\r\n```\r\n\r\nThe `messageKey` like `\"Module.error.invalidFileExtension` will actually be passed to the `getMessage` in the implementation, which is why we are using it inside the Mockito `when` and just to make it simple in our assertion we also use it in setting up the return value of the mock `thenReturn`.\r\n\r\nSince you changed the `messageKey` the mock is never called with `\"Module.error.invalidFileExtension Module: unknownmodule.jar\"` in the implementation and so it returns null (which is the default) :)\r\n\r\nSo what you need to do is leave the `messageKey` values as they were before your changes. Then in the assertion use `assertThat(exception.getMessage(), startsWith(messageKey));` (why see my comment before) and the tests will pass.", "bodyText": "this is the problem :)\nwhenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey sets up the mock. if you look at what it does its basically\n\tprivate void whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(String messageKey) {\n\t\twhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\n\t}\nThe messageKey like \"Module.error.invalidFileExtension will actually be passed to the getMessage in the implementation, which is why we are using it inside the Mockito when and just to make it simple in our assertion we also use it in setting up the return value of the mock thenReturn.\nSince you changed the messageKey the mock is never called with \"Module.error.invalidFileExtension Module: unknownmodule.jar\" in the implementation and so it returns null (which is the default) :)\nSo what you need to do is leave the messageKey values as they were before your changes. Then in the assertion use assertThat(exception.getMessage(), startsWith(messageKey)); (why see my comment before) and the tests will pass.", "bodyHTML": "<p dir=\"auto\">this is the problem :)</p>\n<p dir=\"auto\"><code>whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey</code> sets up the mock. if you look at what it does its basically</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tprivate void whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(String messageKey) {\n\t\twhen(messageSourceService.getMessage(messageKey)).thenReturn(messageKey);\n\t}\"><pre>\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> whenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(<span class=\"pl-smi\">String</span> messageKey) {\n\t\twhen(messageSourceService<span class=\"pl-k\">.</span>getMessage(messageKey))<span class=\"pl-k\">.</span>thenReturn(messageKey);\n\t}</pre></div>\n<p dir=\"auto\">The <code>messageKey</code> like <code>\"Module.error.invalidFileExtension</code> will actually be passed to the <code>getMessage</code> in the implementation, which is why we are using it inside the Mockito <code>when</code> and just to make it simple in our assertion we also use it in setting up the return value of the mock <code>thenReturn</code>.</p>\n<p dir=\"auto\">Since you changed the <code>messageKey</code> the mock is never called with <code>\"Module.error.invalidFileExtension Module: unknownmodule.jar\"</code> in the implementation and so it returns null (which is the default) :)</p>\n<p dir=\"auto\">So what you need to do is leave the <code>messageKey</code> values as they were before your changes. Then in the assertion use <code>assertThat(exception.getMessage(), startsWith(messageKey));</code> (why see my comment before) and the tests will pass.</p>", "author": "teleivo", "createdAt": "2020-07-02T18:18:55Z", "path": "api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java", "diffHunk": "@@ -166,31 +160,28 @@ public void parse_shouldFailIfModuleFileIsNull() {\n \t\tString messageKey = \"Module.error.fileCannotBeNull\";\n \t\twhenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(messageKey);\n \n-\t\texpectModuleExceptionWithMessage(messageKey);\n-\n-\t\tparser.parse((File) null);\n+\t\tModuleException exception =assertThrows(ModuleException.class, () -> parser.parse((File) null));\n+\t\tassertThat(exception.getMessage(), is(messageKey));\n \t}\n \n \t@Test\n \tpublic void parse_shouldFailIfModuleFileHasInvalidExtension() {\n \n-\t\tString messageKey = \"Module.error.invalidFileExtension\";\n+\t\tString messageKey = \"Module.error.invalidFileExtension Module: unknownmodule.jar\";", "originalCommit": "0586c206fb60d6b454c852377b14422d2901d650", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxMzgyMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449213821", "bodyText": "thank you @teleivo", "author": "achilep", "createdAt": "2020-07-02T19:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MzMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1ODgwNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449258805", "bodyText": "there is  no Executable in junit 4.for now i have comment that method . and  i use\n            ModuleException thrown = assertThrows(ModuleException.class, executable);\n\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n\ndirectly in the test", "author": "achilep", "createdAt": "2020-07-02T20:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MzMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MTYyMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449371620", "bodyText": "in Junit4 the parameter should be a ThrowingRunnable\nso it becomes\n\tprivate void expectModuleExceptionWithMessage(ThrowingRunnable executable, String expectedMessage) {\n\t\tModuleException thrown = assertThrows(ModuleException.class, executable);\n\t\tassertThat(thrown.getMessage(), startsWith(expectedMessage));\n\t}\nand tests that did use expectModuleExceptionWithMessage before use it like\nexpectModuleExceptionWithMessage(() -> parser.parse(writeConfigXmlToFile(config)), messageKey);", "author": "teleivo", "createdAt": "2020-07-03T04:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MzMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3MzYxNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449373614", "bodyText": "and please be aware of the whitespaces, I see\nModuleException exception =assertThrows\nwhich should be ModuleException exception = assertThrows", "author": "teleivo", "createdAt": "2020-07-03T04:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "dee61becdfe9742b2d75769f27a7a53464daab9c", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\nindex b4c6365cb..c65699671 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n", "chunk": "@@ -167,21 +168,21 @@ public class ModuleFileParserUnitTest extends BaseContextMockTest {\n \t@Test\n \tpublic void parse_shouldFailIfModuleFileHasInvalidExtension() {\n \n-\t\tString messageKey = \"Module.error.invalidFileExtension Module: unknownmodule.jar\";\n+\t\tString messageKey = \"Module.error.invalidFileExtension\";\n \t\twhenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(messageKey);\n \n \t\tModuleException exception =assertThrows(ModuleException.class, () -> parser.parse(new File(\"unknownmodule.jar\")));\n-\t\tassertThat(exception.getMessage(), is(messageKey));\n+\t\tassertThat(exception.getMessage(), startsWith(messageKey));\n \t}\n \n \t@Test\n \tpublic void parse_shouldFailIfModuleFileCannotBeFound() {\n \n-\t\tString messageKey = \"Module.error.cannotGetJarFile Module: unknownmodule.omod\";\n+\t\tString messageKey = \"Module.error.cannotGetJarFile\";\n \t\twhenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(messageKey);\n \n \t\tModuleException exception =assertThrows(ModuleException.class, () -> parser.parse(new File(\"unknownmodule.omod\")));\n-\t\tassertThat(exception.getMessage(), is(messageKey));\n+\t\tassertThat(exception.getMessage(), startsWith(messageKey));\n \t}\n \n \t@Test\n", "next_change": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\nindex c65699671..ab26b309c 100644\n--- a/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n+++ b/api/src/test/java/org/openmrs/module/ModuleFileParserUnitTest.java\n", "chunk": "@@ -181,8 +188,9 @@ public class ModuleFileParserUnitTest extends BaseContextMockTest {\n \t\tString messageKey = \"Module.error.cannotGetJarFile\";\n \t\twhenGettingMessageFromMessageSourceServiceWithKeyReturnSameKey(messageKey);\n \n-\t\tModuleException exception =assertThrows(ModuleException.class, () -> parser.parse(new File(\"unknownmodule.omod\")));\n-\t\tassertThat(exception.getMessage(), startsWith(messageKey));\n+\t\texpectModuleExceptionWithMessage(messageKey);\n+\n+\t\tparser.parse(new File(\"unknownmodule.omod\"));\n \t}\n \n \t@Test\n", "next_change": null}]}}]}}, {"oid": "dee61becdfe9742b2d75769f27a7a53464daab9c", "url": "https://github.com/openmrs/openmrs-core/commit/dee61becdfe9742b2d75769f27a7a53464daab9c", "message": "TRUNK-5813: Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-02T19:29:15Z", "type": "forcePushed"}, {"oid": "965dc5b4f3b057cf17a60a4a4b01ee4dc9d32977", "url": "https://github.com/openmrs/openmrs-core/commit/965dc5b4f3b057cf17a60a4a4b01ee4dc9d32977", "message": "TRUNK-5813: Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-02T20:13:28Z", "type": "forcePushed"}, {"oid": "2539973a8c83e30965399288b404dd75c620913e", "url": "https://github.com/openmrs/openmrs-core/commit/2539973a8c83e30965399288b404dd75c620913e", "message": "TRUNK-5813: Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-03T06:35:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTEyNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449589124", "body": "I think this line should not be removed", "bodyText": "I think this line should not be removed", "bodyHTML": "<p dir=\"auto\">I think this line should not be removed</p>", "author": "teleivo", "createdAt": "2020-07-03T13:39:59Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -330,15 +332,13 @@ public void addAll_shouldNotAllowDuplicateNonCodedAllergen(){\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 9bfc1c716..1f24fad26 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -333,6 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n \t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "c3c868926923c9207ddcb9ae33cb33e588ad49b3", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 1f24fad26..1dad5e648 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -331,7 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n+\t\tallergies.add(allergy2);\n \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n", "next_change": {"commit": "2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 1dad5e648..c74f26ec1 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -332,7 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTY2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449589668", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"335\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">add(allergy2</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"335\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">addAll(allergies</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-03T13:41:12Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -330,15 +332,13 @@ public void addAll_shouldNotAllowDuplicateNonCodedAllergen(){\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n-\t\t\n-\t\tallergies.addAll(allergies);\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMzYxNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449733616", "bodyText": "The last statement in the tests testing exceptions with @Test(expected = xxx) should be the ones throwing the exception. It can happen that they are not throwing an exception and that this was hidden from us by a statement before that was throwing the exception. If that is the case assertThrows should now highlight such cases.", "author": "teleivo", "createdAt": "2020-07-04T03:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 9bfc1c716..1f24fad26 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -333,6 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n \t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "c3c868926923c9207ddcb9ae33cb33e588ad49b3", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 1f24fad26..1dad5e648 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -331,7 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n+\t\tallergies.add(allergy2);\n \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n", "next_change": {"commit": "2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 1dad5e648..c74f26ec1 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -332,7 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTgxNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449589817", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.addAll(0, allergies));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class, ()-> allergies.addAll(0, allergies));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.addAll(0, allergies));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(<span class=\"pl-c1\">0</span>, allergies));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(<span class=\"pl-c1\">0</span>, allergies));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-03T13:41:33Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -369,14 +369,14 @@ public void addAll2_shouldNotAllowDuplicateCodedAllergen(){\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n-\t\t\n-\t\tallergies.addAll(0, allergies);\n+\n+\t\tassertThrows(APIException.class, ()-> allergies.addAll(0, allergies));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 9bfc1c716..1f24fad26 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -370,7 +370,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n \n-\t\tassertThrows(APIException.class, ()-> allergies.addAll(0, allergies));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(0, allergies));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTg4NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449589885", "body": "```suggestion\r\n\t\tassertThrows(APIException.class, () -> allergies.addAll(0, allergies));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThrows(APIException.class, ()-> allergies.addAll(0, allergies));\n          \n          \n            \n            \t\tassertThrows(APIException.class, () -> allergies.addAll(0, allergies));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(<span class=\"pl-c1\">0</span>, allergies));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, ()<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> allergies<span class=\"pl-k\">.</span>addAll(<span class=\"pl-c1\">0</span>, allergies));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-03T13:41:44Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -387,14 +387,14 @@ public void addAll2_shouldAllowNonDuplicateCodedAllergen(){\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n-\t\t\n-\t\tallergies.addAll(0, allergies);\n+\n+\t\tassertThrows(APIException.class, ()-> allergies.addAll(0, allergies));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMzk0Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449733947", "bodyText": "Please check again the rest of the lambdas. All the lambdas should look like , () ->", "author": "teleivo", "createdAt": "2020-07-04T03:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU4OTg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 9bfc1c716..1f24fad26 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -388,7 +388,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\tallergies.add(allergy1);\n \t\tallergies.add(allergy2);\n \n-\t\tassertThrows(APIException.class, ()-> allergies.addAll(0, allergies));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(0, allergies));\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDE1OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734159", "body": "```suggestion\r\n\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));\n          \n          \n            \n            \t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\tassertThat(exception<span class=\"pl-k\">.</span>getMessage(), containsString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\"> </span>can not be removed from allowed locales list because it is the default locale<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\tassertThat(exception<span class=\"pl-k\">.</span>getMessage(), containsString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>can not be removed from allowed locales list because it is the default locale<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-04T03:27:32Z", "path": "api/src/test/java/org/openmrs/api/AdministrationServiceTest.java", "diffHunk": "@@ -443,23 +439,21 @@ public void saveGlobalProperty_shouldFailIfGivenAllowedLocaleListDoesNotContainD\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tadminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n+\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n+\t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex f74ba2af6..8ba380882 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -442,7 +442,7 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n \t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), containsString(\" can not be removed from allowed locales list because it is the default locale\"));\n+\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\n \t}\n \n \t@Test\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 8ba380882..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -439,10 +443,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \t\tassertThat(\"localeList contains default locale but should not for this test case\", localeList,\n \t\t\tnot(containsString(LocaleUtility.getDefaultLocale().toString())));\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"can not be removed from allowed locales list because it is the default locale\");\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class , () -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList)));\n-\t\tassertThat(exception.getMessage(), containsString(\"can not be removed from allowed locales list because it is the default locale\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, localeList));\n \t}\n \n \t@Test\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\nindex 8ba380882..963d35960 100644\n--- a/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/AdministrationServiceTest.java\n", "chunk": "@@ -450,10 +455,11 @@ public class AdministrationServiceTest extends BaseContextSensitiveTest {\n \n \t\tLocale defaultLocale = new Locale(\"fr\");\n \n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"is not in allowed locales list\");\n \n-\t\tAPIException exception = assertThrows(APIException.class ,() -> adminService.saveGlobalProperty(\n-\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString())));\n-\t\tassertThat(exception.getMessage(), containsString(\"is not in allowed locales list\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t\tnew GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE, defaultLocale.toString()));\n \t}\n \t\n \t@Test\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDQ4Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734487", "body": "remove newline", "bodyText": "remove newline", "bodyHTML": "<p dir=\"auto\">remove newline</p>", "author": "teleivo", "createdAt": "2020-07-04T03:32:52Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -2595,13 +2597,14 @@ public void voidEncounter_shouldFailfIfUserIsNotSupposedToEditEncountersOfTypeOf\n \t\t// have to add privilege in order to be able to call voidEncounter(Encounter,String) method\n \t\tContext.addProxyPrivilege(PrivilegeConstants.EDIT_ENCOUNTERS);\n \t\t\n-\t\tContext.getEncounterService().voidEncounter(encounter, \"test\");\n+\t\tassertThrows(APIException.class, () -> Context.getEncounterService().voidEncounter(encounter, \"test\"));\n+\t\t", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex fe683c48c..ab32fc835 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -2598,7 +2596,6 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\tContext.addProxyPrivilege(PrivilegeConstants.EDIT_ENCOUNTERS);\n \t\t\n \t\tassertThrows(APIException.class, () -> Context.getEncounterService().voidEncounter(encounter, \"test\"));\n-\t\t\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\nindex ab32fc835..cc5922193 100644\n--- a/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/EncounterServiceTest.java\n", "chunk": "@@ -2595,13 +2595,13 @@ public class EncounterServiceTest extends BaseContextSensitiveTest {\n \t\t// have to add privilege in order to be able to call voidEncounter(Encounter,String) method\n \t\tContext.addProxyPrivilege(PrivilegeConstants.EDIT_ENCOUNTERS);\n \t\t\n-\t\tassertThrows(APIException.class, () -> Context.getEncounterService().voidEncounter(encounter, \"test\"));\n+\t\tContext.getEncounterService().voidEncounter(encounter, \"test\");\n \t}\n \t\n \t/**\n \t * @see EncounterService#unvoidEncounter(Encounter)\n \t */\n-\t@Test\n+\t@Test(expected = APIException.class)\n \tpublic void unvoidEncounter_shouldFailfIfUserIsNotSupposedToEditEncountersOfTypeOfGivenEncounter() {\n \t\t// get encounter that has type with edit privilege set\n \t\tEncounter encounter = getEncounterWithEditPrivilege();\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDU3MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734571", "body": "remove newline", "bodyText": "remove newline", "bodyHTML": "<p dir=\"auto\">remove newline</p>", "author": "teleivo", "createdAt": "2020-07-04T03:34:41Z", "path": "api/src/test/java/org/openmrs/api/ObsServiceTest.java", "diffHunk": "@@ -82,9 +81,7 @@\n \t@Autowired\n \tprivate ObsService obsService;\n \n-\t@Rule\n-\tpublic ExpectedException expectedException = ExpectedException.none();\n-\n+\t", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ObsServiceTest.java b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\nindex 68fb6f6a1..3245665b3 100644\n--- a/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n", "chunk": "@@ -80,7 +80,6 @@ public class ObsServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Autowired\n \tprivate ObsService obsService;\n-\n \t\n \n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ObsServiceTest.java b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\nindex 3245665b3..0cc1a2496 100644\n--- a/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n", "chunk": "@@ -80,7 +81,10 @@ public class ObsServiceTest extends BaseContextSensitiveTest {\n \t\n \t@Autowired\n \tprivate ObsService obsService;\n-\t\n+\n+\t@Rule\n+\tpublic ExpectedException expectedException = ExpectedException.none();\n+\n \n \t/**\n \t * This method gets the revision obs for voided obs\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDU5MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734590", "body": "tab missing", "bodyText": "tab missing", "bodyHTML": "<p dir=\"auto\">tab missing</p>", "author": "teleivo", "createdAt": "2020-07-04T03:34:55Z", "path": "api/src/test/java/org/openmrs/api/ObsServiceTest.java", "diffHunk": "@@ -105,10 +102,9 @@ public void shouldGetRevisedObs() {\n \n \t@Test\n \tpublic void shouldReturnAPIExceptionWhenObsIsNull(){\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(Context.getMessageSourceService().getMessage(\"Obs.error.cannot.be.null\"));\n \t\tObsService os = Context.getObsService();\n-\t\tos.saveObs(null,\"Null Obs\");\n+\t\tAPIException exception = assertThrows(APIException.class, () -> os.saveObs(null,\"Null Obs\"));\n+        assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Obs.error.cannot.be.null\")));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ObsServiceTest.java b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\nindex 68fb6f6a1..0cc1a2496 100644\n--- a/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n", "chunk": "@@ -102,9 +105,10 @@ public class ObsServiceTest extends BaseContextSensitiveTest {\n \n \t@Test\n \tpublic void shouldReturnAPIExceptionWhenObsIsNull(){\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(Context.getMessageSourceService().getMessage(\"Obs.error.cannot.be.null\"));\n \t\tObsService os = Context.getObsService();\n-\t\tAPIException exception = assertThrows(APIException.class, () -> os.saveObs(null,\"Null Obs\"));\n-        assertThat(exception.getMessage(), is(Context.getMessageSourceService().getMessage(\"Obs.error.cannot.be.null\")));\n+\t\tos.saveObs(null,\"Null Obs\");\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDY4Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734687", "body": "remove newline", "bodyText": "remove newline", "bodyHTML": "<p dir=\"auto\">remove newline</p>", "author": "teleivo", "createdAt": "2020-07-04T03:36:26Z", "path": "api/src/test/java/org/openmrs/api/ObsServiceTest.java", "diffHunk": "@@ -1472,13 +1468,14 @@ public void unvoidObs_shouldUnsetVoidedBitOnGivenObs() {\n \t/**\n \t * @see ObsService#voidObs(Obs,String)\n \t */\n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void voidObs_shouldFailIfReasonParameterIsEmpty() {\n \t\tObsService obsService = Context.getObsService();\n \t\t\n \t\tObs obs = obsService.getObs(7);\n+\n+\t\tassertThrows(IllegalArgumentException.class, () -> obsService.voidObs(obs, \"\"));\n \t\t", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ObsServiceTest.java b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\nindex 68fb6f6a1..3245665b3 100644\n--- a/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n", "chunk": "@@ -1475,7 +1474,6 @@ public class ObsServiceTest extends BaseContextSensitiveTest {\n \t\tObs obs = obsService.getObs(7);\n \n \t\tassertThrows(IllegalArgumentException.class, () -> obsService.voidObs(obs, \"\"));\n-\t\t\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/ObsServiceTest.java b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\nindex 3245665b3..0cc1a2496 100644\n--- a/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/ObsServiceTest.java\n", "chunk": "@@ -1467,13 +1472,13 @@ public class ObsServiceTest extends BaseContextSensitiveTest {\n \t/**\n \t * @see ObsService#voidObs(Obs,String)\n \t */\n-\t@Test\n+\t@Test(expected = IllegalArgumentException.class)\n \tpublic void voidObs_shouldFailIfReasonParameterIsEmpty() {\n \t\tObsService obsService = Context.getObsService();\n \t\t\n \t\tObs obs = obsService.getObs(7);\n-\n-\t\tassertThrows(IllegalArgumentException.class, () -> obsService.voidObs(obs, \"\"));\n+\t\t\n+\t\tobsService.voidObs(obs, \"\");\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDc0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734742", "body": "use matcher `containsString` with `\"failed to validate with reason:\"` like you did in other tests", "bodyText": "use matcher containsString with \"failed to validate with reason:\" like you did in other tests", "bodyHTML": "<p dir=\"auto\">use matcher <code>containsString</code> with <code>\"failed to validate with reason:\"</code> like you did in other tests</p>", "author": "teleivo", "createdAt": "2020-07-04T03:37:24Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -208,9 +205,8 @@ public void saveOrder_shouldNotSaveOrderIfOrderDoesntValidate() {\n \t\tOrder order = new Order();\n \t\torder.setPatient(null);\n \t\torder.setOrderer(null);\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"failed to validate with reason:\");\n-\t\torderService.saveOrder(order, null);\n+\t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(order, null));\n+\t\tassertThat(exception.getMessage(), is(\"'Order. orderId: null patient: null concept: null care setting: null' failed to validate with reason: concept: No Concepts found - Invalid Concept Id, patient: Cannot be empty or null, encounter: Cannot be empty or null, orderer: Cannot be empty or null\"));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -198,7 +199,7 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldNotSaveOrderIfOrderDoesntValidate() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -199,15 +201,16 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldNotSaveOrderIfOrderDoesntValidate() {\n \t\tOrder order = new Order();\n \t\torder.setPatient(null);\n \t\torder.setOrderer(null);\n-\t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(order, null));\n-\t\tassertThat(exception.getMessage(), containsString(\"failed to validate with reason:\"));\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"failed to validate with reason:\");\n+\t\torderService.saveOrder(order, null);\n \t}\n \t\n \t/**\n", "next_change": null}]}}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -206,7 +207,7 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\torder.setPatient(null);\n \t\torder.setOrderer(null);\n \t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(order, null));\n-\t\tassertThat(exception.getMessage(), is(\"'Order. orderId: null patient: null concept: null care setting: null' failed to validate with reason: concept: No Concepts found - Invalid Concept Id, patient: Cannot be empty or null, encounter: Cannot be empty or null, orderer: Cannot be empty or null\"));\n+\t\tassertThat(exception.getMessage(), containsString(\"failed to validate with reason:\"));\n \t}\n \t\n \t/**\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -199,15 +201,16 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldNotSaveOrderIfOrderDoesntValidate() {\n \t\tOrder order = new Order();\n \t\torder.setPatient(null);\n \t\torder.setOrderer(null);\n-\t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(order, null));\n-\t\tassertThat(exception.getMessage(), containsString(\"failed to validate with reason:\"));\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"failed to validate with reason:\");\n+\t\torderService.saveOrder(order, null);\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDc3Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734776", "body": "tab missing", "bodyText": "tab missing", "bodyHTML": "<p dir=\"auto\">tab missing</p>", "author": "teleivo", "createdAt": "2020-07-04T03:38:11Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -759,9 +753,8 @@ public void discontinueOrder_shouldFailForADiscontinuationOrder() {\n \t\tOrder discontinuationOrder = orderService.getOrder(26);\n \t\tassertEquals(Action.DISCONTINUE, discontinuationOrder.getAction());\n \t\tEncounter encounter = encounterService.getEncounter(3);\n-\t\texpectedException.expect(CannotStopDiscontinuationOrderException.class);\n-\t\texpectedException.expectMessage(mss.getMessage(\"Order.action.cannot.discontinue\"));\n-\t\torderService.discontinueOrder(discontinuationOrder, \"Test if I can discontinue this\", null, null, encounter);\n+\t\tCannotStopDiscontinuationOrderException exception = assertThrows(CannotStopDiscontinuationOrderException.class, () -> orderService.discontinueOrder(discontinuationOrder, \"Test if I can discontinue this\", null, null, encounter));\n+\t   assertThat(exception.getMessage(), is(mss.getMessage(\"Order.action.cannot.discontinue\")));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -754,12 +755,12 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertEquals(Action.DISCONTINUE, discontinuationOrder.getAction());\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tCannotStopDiscontinuationOrderException exception = assertThrows(CannotStopDiscontinuationOrderException.class, () -> orderService.discontinueOrder(discontinuationOrder, \"Test if I can discontinue this\", null, null, encounter));\n-\t   assertThat(exception.getMessage(), is(mss.getMessage(\"Order.action.cannot.discontinue\")));\n+\t    assertThat(exception.getMessage(), is(mss.getMessage(\"Order.action.cannot.discontinue\")));\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n-\t *      org.openmrs.Provider, org.openmrs.Encounter)\n+\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n+\t *      Provider, Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldNotPassForADiscontinuationOrder() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -754,13 +759,14 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tOrder discontinuationOrder = orderService.getOrder(26);\n \t\tassertEquals(Action.DISCONTINUE, discontinuationOrder.getAction());\n \t\tEncounter encounter = encounterService.getEncounter(3);\n-\t\tCannotStopDiscontinuationOrderException exception = assertThrows(CannotStopDiscontinuationOrderException.class, () -> orderService.discontinueOrder(discontinuationOrder, \"Test if I can discontinue this\", null, null, encounter));\n-\t    assertThat(exception.getMessage(), is(mss.getMessage(\"Order.action.cannot.discontinue\")));\n+\t\texpectedException.expect(CannotStopDiscontinuationOrderException.class);\n+\t\texpectedException.expectMessage(mss.getMessage(\"Order.action.cannot.discontinue\"));\n+\t\torderService.discontinueOrder(discontinuationOrder, \"Test if I can discontinue this\", null, null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldNotPassForADiscontinuationOrder() {\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -769,13 +775,14 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tOrder discontinuationOrder = orderService.getOrder(26);\n \t\tassertEquals(Action.DISCONTINUE, discontinuationOrder.getAction());\n \t\tEncounter encounter = encounterService.getEncounter(3);\n-\t\tCannotStopDiscontinuationOrderException exception = assertThrows(CannotStopDiscontinuationOrderException.class, () -> orderService.discontinueOrder(discontinuationOrder, (Concept) null, null, null, encounter));\n-\t\tassertThat(exception.getMessage() , is(mss.getMessage(\"Order.action.cannot.discontinue\")));\n+\t\texpectedException.expect(CannotStopDiscontinuationOrderException.class);\n+\t\texpectedException.expectMessage(mss.getMessage(\"Order.action.cannot.discontinue\"));\n+\t\torderService.discontinueOrder(discontinuationOrder, (Concept) null, null, null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, String, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, String, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForADiscontinuedOrder() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDgyOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734829", "body": "tab missing", "bodyText": "tab missing", "bodyHTML": "<p dir=\"auto\">tab missing</p>", "author": "teleivo", "createdAt": "2020-07-04T03:39:29Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -898,9 +888,8 @@ public void saveOrder_shouldFailIfConceptInPreviousOrderDoesNotMatchThisConcept(\n \t\tassertFalse(previousOrder.getConcept().equals(newConcept));\n \t\torder.setConcept(newConcept);\n \t\t\n-\t\texpectedException.expect(EditedOrderDoesNotMatchPreviousException.class);\n-\t\texpectedException.expectMessage(\"The orderable of the previous order and the new one order don't match\");\n-\t\torderService.saveOrder(order, null);\n+\t\tEditedOrderDoesNotMatchPreviousException exception = assertThrows(EditedOrderDoesNotMatchPreviousException.class, () -> orderService.saveOrder(order, null));\n+\t    assertThat(exception.getMessage(), is(\"The orderable of the previous order and the new one order don't match\"));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -893,8 +894,8 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n-\t *      org.openmrs.Provider, org.openmrs.Encounter)\n+\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n+\t *      Provider, Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldRejectAFutureDiscontinueDate() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -889,13 +898,14 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tassertFalse(previousOrder.getConcept().equals(newConcept));\n \t\torder.setConcept(newConcept);\n \t\t\n-\t\tEditedOrderDoesNotMatchPreviousException exception = assertThrows(EditedOrderDoesNotMatchPreviousException.class, () -> orderService.saveOrder(order, null));\n-\t    assertThat(exception.getMessage(), is(\"The orderable of the previous order and the new one order don't match\"));\n+\t\texpectedException.expect(EditedOrderDoesNotMatchPreviousException.class);\n+\t\texpectedException.expectMessage(\"The orderable of the previous order and the new one order don't match\");\n+\t\torderService.saveOrder(order, null);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldRejectAFutureDiscontinueDate() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDg1Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734852", "body": "tab missing", "bodyText": "tab missing", "bodyHTML": "<p dir=\"auto\">tab missing</p>", "author": "teleivo", "createdAt": "2020-07-04T03:39:56Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -931,9 +919,8 @@ public void discontinueOrder_shouldFailIfDiscontinueDateIsInTheFuture() {\n \t\tOrder orderToDiscontinue = orderService.getActiveOrders(Context.getPatientService().getPatient(2), null,\n \t\t    orderService.getCareSetting(1), null).get(0);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(\"Discontinue date cannot be in the future\");\n-\t\torderService.discontinueOrder(orderToDiscontinue, \"Testing\", cal.getTime(), null, encounter);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.discontinueOrder(orderToDiscontinue, \"Testing\", cal.getTime(), null, encounter));\n+\t  assertThat(exception.getMessage(), is(\"Discontinue date cannot be in the future\"));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -920,11 +921,11 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\t    orderService.getCareSetting(1), null).get(0);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.discontinueOrder(orderToDiscontinue, \"Testing\", cal.getTime(), null, encounter));\n-\t  assertThat(exception.getMessage(), is(\"Discontinue date cannot be in the future\"));\n+\t    assertThat(exception.getMessage(), is(\"Discontinue date cannot be in the future\"));\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfTheExistingDrugOrderMatchesTheConceptAndDrugOfTheDCOrder() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -920,12 +931,13 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tOrder orderToDiscontinue = orderService.getActiveOrders(Context.getPatientService().getPatient(2), null,\n \t\t    orderService.getCareSetting(1), null).get(0);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.discontinueOrder(orderToDiscontinue, \"Testing\", cal.getTime(), null, encounter));\n-\t    assertThat(exception.getMessage(), is(\"Discontinue date cannot be in the future\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"Discontinue date cannot be in the future\");\n+\t\torderService.discontinueOrder(orderToDiscontinue, \"Testing\", cal.getTime(), null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfTheExistingDrugOrderMatchesTheConceptAndDrugOfTheDCOrder() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDg3Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734873", "body": "same", "bodyText": "same", "bodyHTML": "<p dir=\"auto\">same</p>", "author": "teleivo", "createdAt": "2020-07-04T03:40:02Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -991,9 +978,8 @@ public void saveOrder_shouldFailIfTheExistingDrugOrderMatchesTheConceptAndNotDru\n \t\torder.setDrug(discontinuationOrderDrug);\n \t\torder.setOrderReasonNonCoded(\"Discontinue this\");\n \t\t\n-\t\texpectedException.expect(EditedOrderDoesNotMatchPreviousException.class);\n-\t\texpectedException.expectMessage(\"The orderable of the previous order and the new one order don't match\");\n-\t\torderService.saveOrder(order, null);\n+\t\tEditedOrderDoesNotMatchPreviousException exception = assertThrows(EditedOrderDoesNotMatchPreviousException.class, () -> orderService.saveOrder(order, null));\n+\t   assertThat(exception.getMessage(), is(\"The orderable of the previous order and the new one order don't match\"));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -979,12 +980,12 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\torder.setOrderReasonNonCoded(\"Discontinue this\");\n \t\t\n \t\tEditedOrderDoesNotMatchPreviousException exception = assertThrows(EditedOrderDoesNotMatchPreviousException.class, () -> orderService.saveOrder(order, null));\n-\t   assertThat(exception.getMessage(), is(\"The orderable of the previous order and the new one order don't match\"));\n+\t    assertThat(exception.getMessage(), is(\"The orderable of the previous order and the new one order don't match\"));\n \t}\n \t\n \t/**\n \t *           previous order\n-\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfTheExistingDrugOrderMatchesTheConceptAndThereIsNoDrugOnThePreviousOrder()\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -979,13 +991,14 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\torder.setDrug(discontinuationOrderDrug);\n \t\torder.setOrderReasonNonCoded(\"Discontinue this\");\n \t\t\n-\t\tEditedOrderDoesNotMatchPreviousException exception = assertThrows(EditedOrderDoesNotMatchPreviousException.class, () -> orderService.saveOrder(order, null));\n-\t    assertThat(exception.getMessage(), is(\"The orderable of the previous order and the new one order don't match\"));\n+\t\texpectedException.expect(EditedOrderDoesNotMatchPreviousException.class);\n+\t\texpectedException.expectMessage(\"The orderable of the previous order and the new one order don't match\");\n+\t\torderService.saveOrder(order, null);\n \t}\n \t\n \t/**\n \t *           previous order\n-\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfTheExistingDrugOrderMatchesTheConceptAndThereIsNoDrugOnThePreviousOrder()\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNDkyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449734927", "body": "remove newline and indent next line since there is a tab missing", "bodyText": "remove newline and indent next line since there is a tab missing", "bodyHTML": "<p dir=\"auto\">remove newline and indent next line since there is a tab missing</p>", "author": "teleivo", "createdAt": "2020-07-04T03:40:35Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -1048,9 +1034,9 @@ public void discontinueOrder_shouldFailForAStoppedOrder() {\n \t\tOrder orderToDiscontinue = orderService.getOrder(1);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tassertNotNull(orderToDiscontinue.getDateStopped());\n-\t\texpectedException.expect(CannotStopInactiveOrderException.class);\n-\t\texpectedException.expectMessage(mss.getMessage(\"Order.cannot.discontinue.inactive\"));\n-\t\torderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter);\n+\t\tCannotStopInactiveOrderException exception = assertThrows(CannotStopInactiveOrderException.class, () -> orderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter));\n+", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1026,8 +1027,8 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n-\t *      org.openmrs.Provider, org.openmrs.Encounter)\n+\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n+\t *      Provider, Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAStoppedOrder() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1027,34 +1040,36 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAStoppedOrder() {\n \t\tOrder orderToDiscontinue = orderService.getOrder(1);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tassertNotNull(orderToDiscontinue.getDateStopped());\n-\t\tCannotStopInactiveOrderException exception = assertThrows(CannotStopInactiveOrderException.class, () -> orderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter));\n-        assertThat(exception.getMessage(), is(mss.getMessage(\"Order.cannot.discontinue.inactive\")));\n+\t\texpectedException.expect(CannotStopInactiveOrderException.class);\n+\t\texpectedException.expectMessage(mss.getMessage(\"Order.cannot.discontinue.inactive\"));\n+\t\torderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, String, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, String, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAVoidedOrder() {\n \t\tOrder orderToDiscontinue = orderService.getOrder(8);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tassertTrue(orderToDiscontinue.getVoided());\n-\t\tCannotStopInactiveOrderException exception = assertThrows(CannotStopInactiveOrderException.class, () -> orderService.discontinueOrder(orderToDiscontinue, \"testing\", null, null, encounter));\n-\t\tassertThat(exception.getMessage(), is(mss.getMessage(\"Order.cannot.discontinue.inactive\")));\n+\t\texpectedException.expect(CannotStopInactiveOrderException.class);\n+\t\texpectedException.expectMessage(mss.getMessage(\"Order.cannot.discontinue.inactive\"));\n+\t\torderService.discontinueOrder(orderToDiscontinue, \"testing\", null, null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAnExpiredOrder() {\n", "next_change": null}]}}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1035,13 +1036,12 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tassertNotNull(orderToDiscontinue.getDateStopped());\n \t\tCannotStopInactiveOrderException exception = assertThrows(CannotStopInactiveOrderException.class, () -> orderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter));\n-\n         assertThat(exception.getMessage(), is(mss.getMessage(\"Order.cannot.discontinue.inactive\")));\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(org.openmrs.Order, String, java.util.Date,\n-\t *      org.openmrs.Provider, org.openmrs.Encounter)\n+\t * @see OrderService#discontinueOrder(Order, String, Date,\n+\t *      Provider, Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAVoidedOrder() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1027,34 +1040,36 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAStoppedOrder() {\n \t\tOrder orderToDiscontinue = orderService.getOrder(1);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tassertNotNull(orderToDiscontinue.getDateStopped());\n-\t\tCannotStopInactiveOrderException exception = assertThrows(CannotStopInactiveOrderException.class, () -> orderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter));\n-        assertThat(exception.getMessage(), is(mss.getMessage(\"Order.cannot.discontinue.inactive\")));\n+\t\texpectedException.expect(CannotStopInactiveOrderException.class);\n+\t\texpectedException.expectMessage(mss.getMessage(\"Order.cannot.discontinue.inactive\"));\n+\t\torderService.discontinueOrder(orderToDiscontinue, Context.getConceptService().getConcept(1), null, null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, String, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, String, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAVoidedOrder() {\n \t\tOrder orderToDiscontinue = orderService.getOrder(8);\n \t\tEncounter encounter = encounterService.getEncounter(3);\n \t\tassertTrue(orderToDiscontinue.getVoided());\n-\t\tCannotStopInactiveOrderException exception = assertThrows(CannotStopInactiveOrderException.class, () -> orderService.discontinueOrder(orderToDiscontinue, \"testing\", null, null, encounter));\n-\t\tassertThat(exception.getMessage(), is(mss.getMessage(\"Order.cannot.discontinue.inactive\")));\n+\t\texpectedException.expect(CannotStopInactiveOrderException.class);\n+\t\texpectedException.expectMessage(mss.getMessage(\"Order.cannot.discontinue.inactive\"));\n+\t\torderService.discontinueOrder(orderToDiscontinue, \"testing\", null, null, encounter);\n \t}\n \t\n \t/**\n-\t * @see OrderService#discontinueOrder(Order, Concept, Date,\n-\t *      Provider, Encounter)\n+\t * @see OrderService#discontinueOrder(org.openmrs.Order, org.openmrs.Concept, java.util.Date,\n+\t *      org.openmrs.Provider, org.openmrs.Encounter)\n \t */\n \t@Test\n \tpublic void discontinueOrder_shouldFailForAnExpiredOrder() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTExMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449735110", "body": "```suggestion\r\n\t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(revision, null));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAPIException exception = assertThrows( APIException.class, () -> orderService.saveOrder(revision, null));\n          \n          \n            \n            \t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(revision, null));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\">APIException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>saveOrder(revision, <span class=\"pl-c1\">null</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">APIException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">APIException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>saveOrder(revision, <span class=\"pl-c1\">null</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-04T03:44:16Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -1695,9 +1672,8 @@ public void saveOrder_shouldFailForRevisionOrderIfAnActiveDrugOrderForTheSameCon\n \t\trevision.setEncounter(encounterService.getEncounter(6));\n \t\trevision.setOrderer(providerService.getProvider(1));\n \t\t\n-\t\texpectedException.expect(APIException.class);\n-\t\texpectedException.expectMessage(\"Order.cannot.have.more.than.one\");\n-\t\torderService.saveOrder(revision, null);\n+\t\tAPIException exception = assertThrows( APIException.class, () -> orderService.saveOrder(revision, null));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1672,7 +1672,7 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\trevision.setEncounter(encounterService.getEncounter(6));\n \t\trevision.setOrderer(providerService.getProvider(1));\n \t\t\n-\t\tAPIException exception = assertThrows( APIException.class, () -> orderService.saveOrder(revision, null));\n+\t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(revision, null));\n \t\tassertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\n \t}\n \t\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1672,8 +1695,9 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\trevision.setEncounter(encounterService.getEncounter(6));\n \t\trevision.setOrderer(providerService.getProvider(1));\n \t\t\n-\t\tAPIException exception = assertThrows(APIException.class, () -> orderService.saveOrder(revision, null));\n-\t\tassertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\n+\t\texpectedException.expect(APIException.class);\n+\t\texpectedException.expectMessage(\"Order.cannot.have.more.than.one\");\n+\t\torderService.saveOrder(revision, null);\n \t}\n \t\n \t/**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTEyNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449735124", "body": "```suggestion\r\n\t\tAmbiguousOrderException exception = assertThrows(AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAmbiguousOrderException exception = assertThrows( AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;\n          \n          \n            \n            \t\tAmbiguousOrderException exception = assertThrows(AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\">AmbiguousOrderException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">AmbiguousOrderException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>saveOrder(drugOrder, <span class=\"pl-c1\">null</span>));;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">AmbiguousOrderException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">AmbiguousOrderException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>saveOrder(drugOrder, <span class=\"pl-c1\">null</span>));;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-04T03:44:26Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -1771,9 +1747,8 @@ public void saveOrder_shouldFailIfAnActiveDrugOrderForTheSameConceptAndCareSetti\n \t\tdrugOrder.setQuantityUnits(duplicateOrder.getQuantityUnits());\n \t\tdrugOrder.setNumRefills(duplicateOrder.getNumRefills());\n \t\t\n-\t\texpectedException.expect(AmbiguousOrderException.class);\n-\t\texpectedException.expectMessage(\"Order.cannot.have.more.than.one\");\n-\t\torderService.saveOrder(drugOrder, null);\n+\t\tAmbiguousOrderException exception = assertThrows( AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1747,12 +1747,12 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tdrugOrder.setQuantityUnits(duplicateOrder.getQuantityUnits());\n \t\tdrugOrder.setNumRefills(duplicateOrder.getNumRefills());\n \t\t\n-\t\tAmbiguousOrderException exception = assertThrows( AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;\n+\t\tAmbiguousOrderException exception = assertThrows(AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;\n \t\tassertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfAnActiveTestOrderForTheSameConceptAndCareSettingExists() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1747,12 +1771,13 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\tdrugOrder.setQuantityUnits(duplicateOrder.getQuantityUnits());\n \t\tdrugOrder.setNumRefills(duplicateOrder.getNumRefills());\n \t\t\n-\t\tAmbiguousOrderException exception = assertThrows(AmbiguousOrderException.class, () -> orderService.saveOrder(drugOrder, null));;\n-\t\tassertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\n+\t\texpectedException.expect(AmbiguousOrderException.class);\n+\t\texpectedException.expectMessage(\"Order.cannot.have.more.than.one\");\n+\t\torderService.saveOrder(drugOrder, null);\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfAnActiveTestOrderForTheSameConceptAndCareSettingExists() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTE0NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449735144", "body": "```suggestion\r\n\t\tAmbiguousOrderException exception = assertThrows(AmbiguousOrderException.class, () -> orderService.saveOrder(order, null));\r\n\t        assertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAmbiguousOrderException exception = assertThrows( AmbiguousOrderException.class, () -> orderService.saveOrder(order, null));\n          \n          \n            \n            \t    assertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\n          \n          \n            \n            \t\tAmbiguousOrderException exception = assertThrows(AmbiguousOrderException.class, () -> orderService.saveOrder(order, null));\n          \n          \n            \n            \t        assertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\">AmbiguousOrderException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">AmbiguousOrderException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>saveOrder(order, <span class=\"pl-c1\">null</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t    assertThat(exception<span class=\"pl-k\">.</span>getMessage(), is(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Order.cannot.have.more.than.one<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">AmbiguousOrderException</span> exception <span class=\"pl-k\">=</span> assertThrows(<span class=\"pl-smi\">AmbiguousOrderException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>saveOrder(order, <span class=\"pl-c1\">null</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t    <span class=\"x x-first x-last\">    </span>assertThat(exception<span class=\"pl-k\">.</span>getMessage(), is(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Order.cannot.have.more.than.one<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-04T03:44:47Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -1899,9 +1874,8 @@ public void saveOrder_shouldThrowAmbiguousOrderExceptionIfAnActiveDrugOrderForTh\n \t\torder.setQuantityUnits(conceptService.getConcept(51));\n \t\torder.setNumRefills(2);\n \t\t\n-\t\texpectedException.expect(AmbiguousOrderException.class);\n-\t\texpectedException.expectMessage(\"Order.cannot.have.more.than.one\");\n-\t\torderService.saveOrder(order, null);\n+\t\tAmbiguousOrderException exception = assertThrows( AmbiguousOrderException.class, () -> orderService.saveOrder(order, null));\n+\t    assertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1879,7 +1879,7 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n+\t * @see OrderService#saveOrder(Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfAnActiveOrderForTheSameConceptExistsInADifferentCareSetting() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -1874,12 +1899,13 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t\torder.setQuantityUnits(conceptService.getConcept(51));\n \t\torder.setNumRefills(2);\n \t\t\n-\t\tAmbiguousOrderException exception = assertThrows( AmbiguousOrderException.class, () -> orderService.saveOrder(order, null));\n-\t    assertThat(exception.getMessage(), is(\"Order.cannot.have.more.than.one\"));\n+\t\texpectedException.expect(AmbiguousOrderException.class);\n+\t\texpectedException.expectMessage(\"Order.cannot.have.more.than.one\");\n+\t\torderService.saveOrder(order, null);\n \t}\n \t\n \t/**\n-\t * @see OrderService#saveOrder(Order, OrderContext)\n+\t * @see OrderService#saveOrder(org.openmrs.Order, OrderContext)\n \t */\n \t@Test\n \tpublic void saveOrder_shouldPassIfAnActiveOrderForTheSameConceptExistsInADifferentCareSetting() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTIwMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449735202", "body": "```suggestion\r\n\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tIllegalArgumentException exception = assertThrows ( IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n          \n          \n            \n            \t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-smi\">IllegalArgumentException</span> exception <span class=\"pl-k\">=</span> assertThrows (<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">IllegalArgumentException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>getOrders(<span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">false</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-smi\">IllegalArgumentException</span> exception <span class=\"pl-k\">=</span> assertThrows (<span class=\"pl-smi\">IllegalArgumentException</span><span class=\"pl-k\">.</span>class, () <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> orderService<span class=\"pl-k\">.</span>getOrders(<span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">false</span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "teleivo", "createdAt": "2020-07-04T03:45:11Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -2071,9 +2045,8 @@ public void getOrderTypeByName_shouldReturnTheOrderTypeThatMatchesTheSpecifiedNa\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfPatientIsNull() {\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(\"Patient is required\");\n-\t\torderService.getOrders(null, null, null, false);\n+\t\tIllegalArgumentException exception = assertThrows ( IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -2040,18 +2040,18 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n-\t *      org.openmrs.OrderType, boolean)\n+\t * @see OrderService#getOrders(Patient, CareSetting,\n+\t *      OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfPatientIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows ( IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n+\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n \t\tassertThat(exception.getMessage(), is(\"Patient is required\"));\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n-\t *      org.openmrs.OrderType, boolean)\n+\t * @see OrderService#getOrders(Patient, CareSetting,\n+\t *      OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfCareSettingIsNull() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -2040,28 +2066,30 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfPatientIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n-\t\tassertThat(exception.getMessage(), is(\"Patient is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"Patient is required\");\n+\t\torderService.getOrders(null, null, null, false);\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfCareSettingIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.getOrders(new Patient(), null, null, false));\n-\t    assertThat(exception.getMessage(), is(\"CareSetting is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"CareSetting is required\");\n+\t\torderService.getOrders(new Patient(), null, null, false);\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldGetTheOrdersThatMatchAllTheArguments() {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTIxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449735215", "body": "remove newline", "bodyText": "remove newline", "bodyHTML": "<p dir=\"auto\">remove newline</p>", "author": "teleivo", "createdAt": "2020-07-04T03:45:22Z", "path": "api/src/test/java/org/openmrs/api/OrderServiceTest.java", "diffHunk": "@@ -2082,11 +2055,11 @@ public void getOrders_shouldFailIfPatientIsNull() {\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfCareSettingIsNull() {\n-\t\texpectedException.expect(IllegalArgumentException.class);\n-\t\texpectedException.expectMessage(\"CareSetting is required\");\n-\t\torderService.getOrders(new Patient(), null, null, false);\n+\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.getOrders(new Patient(), null, null, false));\n+\t    assertThat(exception.getMessage(), is(\"CareSetting is required\"));\n \t}\n \t\n+\t", "originalCommit": "2539973a8c83e30965399288b404dd75c620913e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19b114ed2f99434829771ead3505c7a43e4d21ae", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -2040,18 +2040,18 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n-\t *      org.openmrs.OrderType, boolean)\n+\t * @see OrderService#getOrders(Patient, CareSetting,\n+\t *      OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfPatientIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows ( IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n+\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n \t\tassertThat(exception.getMessage(), is(\"Patient is required\"));\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n-\t *      org.openmrs.OrderType, boolean)\n+\t * @see OrderService#getOrders(Patient, CareSetting,\n+\t *      OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfCareSettingIsNull() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -2040,28 +2066,30 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfPatientIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n-\t\tassertThat(exception.getMessage(), is(\"Patient is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"Patient is required\");\n+\t\torderService.getOrders(null, null, null, false);\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfCareSettingIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.getOrders(new Patient(), null, null, false));\n-\t    assertThat(exception.getMessage(), is(\"CareSetting is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"CareSetting is required\");\n+\t\torderService.getOrders(new Patient(), null, null, false);\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldGetTheOrdersThatMatchAllTheArguments() {\n", "next_change": null}]}}, {"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex 14449ee37..eff8641df 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -2059,10 +2059,9 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t    assertThat(exception.getMessage(), is(\"CareSetting is required\"));\n \t}\n \t\n-\t\n \t/**\n-\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n-\t *      org.openmrs.OrderType, boolean)\n+\t * @see OrderService#getOrders(Patient, CareSetting,\n+\t *      OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldGetTheOrdersThatMatchAllTheArguments() {\n", "next_change": {"commit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/api/OrderServiceTest.java b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\nindex eff8641df..86d13c4c8 100644\n--- a/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n+++ b/api/src/test/java/org/openmrs/api/OrderServiceTest.java\n", "chunk": "@@ -2040,28 +2066,30 @@ public class OrderServiceTest extends BaseContextSensitiveTest {\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfPatientIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows (IllegalArgumentException.class, () -> orderService.getOrders(null, null, null, false));\n-\t\tassertThat(exception.getMessage(), is(\"Patient is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"Patient is required\");\n+\t\torderService.getOrders(null, null, null, false);\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldFailIfCareSettingIsNull() {\n-\t\tIllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> orderService.getOrders(new Patient(), null, null, false));\n-\t    assertThat(exception.getMessage(), is(\"CareSetting is required\"));\n+\t\texpectedException.expect(IllegalArgumentException.class);\n+\t\texpectedException.expectMessage(\"CareSetting is required\");\n+\t\torderService.getOrders(new Patient(), null, null, false);\n \t}\n \t\n \t/**\n-\t * @see OrderService#getOrders(Patient, CareSetting,\n-\t *      OrderType, boolean)\n+\t * @see OrderService#getOrders(org.openmrs.Patient, org.openmrs.CareSetting,\n+\t *      org.openmrs.OrderType, boolean)\n \t */\n \t@Test\n \tpublic void getOrders_shouldGetTheOrdersThatMatchAllTheArguments() {\n", "next_change": null}]}}]}}, {"oid": "19b114ed2f99434829771ead3505c7a43e4d21ae", "url": "https://github.com/openmrs/openmrs-core/commit/19b114ed2f99434829771ead3505c7a43e4d21ae", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-04T20:25:48Z", "type": "forcePushed"}, {"oid": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "url": "https://github.com/openmrs/openmrs-core/commit/480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-04T22:53:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0MTE5NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449841195", "body": "i have this problem with this problem:\r\n![Screenshot from 2020-07-05 07-39-45](https://user-images.githubusercontent.com/39851246/86527052-044f5780-be93-11ea-938a-119ba5439850.png)\r\n\r\n![Screenshot from 2020-07-05 07-39-29](https://user-images.githubusercontent.com/39851246/86527054-09140b80-be93-11ea-977c-678621c9ac45.png)\r\n", "bodyText": "i have this problem with this problem:", "bodyHTML": "<p dir=\"auto\">i have this problem with this problem:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/39851246/86527052-044f5780-be93-11ea-938a-119ba5439850.png\"><img src=\"https://user-images.githubusercontent.com/39851246/86527052-044f5780-be93-11ea-938a-119ba5439850.png\" alt=\"Screenshot from 2020-07-05 07-39-45\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/39851246/86527054-09140b80-be93-11ea-977c-678621c9ac45.png\"><img src=\"https://user-images.githubusercontent.com/39851246/86527054-09140b80-be93-11ea-977c-678621c9ac45.png\" alt=\"Screenshot from 2020-07-05 07-39-29\" style=\"max-width: 100%;\"></a></p>", "author": "achilep", "createdAt": "2020-07-05T06:42:46Z", "path": "api/src/test/java/org/openmrs/AllergiesTest.java", "diffHunk": "@@ -330,15 +332,14 @@ public void addAll_shouldNotAllowDuplicateNonCodedAllergen(){\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n-\t\t\n-\t\tallergies.addAll(allergies);\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n+\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));", "originalCommit": "480dd4c7d8fee82b3c2cb344ea79a71a8db7ac51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0NTEzMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449845131", "bodyText": "sorry @teleivo  for the format problem, I solved all this problem locally, but I don't understand how online it is something else.", "author": "achilep", "createdAt": "2020-07-05T07:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0MTE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0ODYwMw==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449848603", "bodyText": "on my computer\n\nonline", "author": "achilep", "createdAt": "2020-07-05T08:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0MTE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1MjIwOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449852208", "bodyText": "@achilep you changed the meaning of this test.\nWhen converting @Test(expected to assertThrows you should only have to delete 1 line. The line that throws the exception since you wrap it in assertThrows\n\t\tAllergies allergies = new Allergies();\n\t\tallergies.add(allergy1);\n\t\tallergies.add(allergy2);\n\t\t\n\t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\nPlease check the PR, after having pushed and go through my comments. If you see a line where I comment please dont delete and its still highlighted it means you haven't resolved my comment.\n\nSo you are saying that\nallergies.add(allergy2); already throws the APIException.class.\nThen you are right to only assert on\nassertThrows(APIException.class, () -> allergies.add(allergy2));\nSorry for misleading you then. Please remove the other assertThrows and only keep the above.", "author": "teleivo", "createdAt": "2020-07-05T08:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0MTE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1MjMwMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3279#discussion_r449852300", "bodyText": "sorry @teleivo for the format problem, I solved all this problem locally, but I don't understand how online it is something else.\n\nThat could be because of tabs/spaces. we use tabs in OpenMRS. You can enable the IDE to show whitespaces to see if its that issue. Then replace all spaces with tabs.\nOr maybe you fixed it locally but did not push your changes. Or you did not commit the changes that fixed the problem.", "author": "teleivo", "createdAt": "2020-07-05T08:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0MTE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3c868926923c9207ddcb9ae33cb33e588ad49b3", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex bd6b41f48..1dad5e648 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -332,7 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n+\t\tallergies.add(allergy2);\n \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n", "next_change": {"commit": "2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "changed_code": [{"header": "diff --git a/api/src/test/java/org/openmrs/AllergiesTest.java b/api/src/test/java/org/openmrs/AllergiesTest.java\nindex 1dad5e648..c74f26ec1 100644\n--- a/api/src/test/java/org/openmrs/AllergiesTest.java\n+++ b/api/src/test/java/org/openmrs/AllergiesTest.java\n", "chunk": "@@ -332,7 +332,7 @@ public class AllergiesTest extends BaseContextSensitiveTest {\n \t\t\n \t\tAllergies allergies = new Allergies();\n \t\tallergies.add(allergy1);\n-\t\tallergies.add(allergy2);\n+\t\tassertThrows(APIException.class, () -> allergies.add(allergy2));\n \t\tassertThrows(APIException.class, () -> allergies.addAll(allergies));\n \t}\n \t\n", "next_change": null}]}}]}}, {"oid": "c3c868926923c9207ddcb9ae33cb33e588ad49b3", "url": "https://github.com/openmrs/openmrs-core/commit/c3c868926923c9207ddcb9ae33cb33e588ad49b3", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-05T06:54:56Z", "type": "forcePushed"}, {"oid": "fed983fa847c8091ff988bb5464a9e803ae7e268", "url": "https://github.com/openmrs/openmrs-core/commit/fed983fa847c8091ff988bb5464a9e803ae7e268", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-05T07:19:18Z", "type": "forcePushed"}, {"oid": "cd546748d74edfbe6991ba2a6a94c08d114102e6", "url": "https://github.com/openmrs/openmrs-core/commit/cd546748d74edfbe6991ba2a6a94c08d114102e6", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-05T12:18:47Z", "type": "forcePushed"}, {"oid": "7a302d3ef3f4f7e81099f38980cff5e1c8060c15", "url": "https://github.com/openmrs/openmrs-core/commit/7a302d3ef3f4f7e81099f38980cff5e1c8060c15", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-05T12:32:31Z", "type": "forcePushed"}, {"oid": "2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "url": "https://github.com/openmrs/openmrs-core/commit/2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-05T12:47:43Z", "type": "commit"}, {"oid": "2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "url": "https://github.com/openmrs/openmrs-core/commit/2f9b3a0d87112fa3c0b36236fb9591e8884f6b81", "message": "TRUNK-5813 Replace all ExpectedException Rules and the @Test(expected..)", "committedDate": "2020-07-05T12:47:43Z", "type": "forcePushed"}]}