{"pr_number": 16034, "pr_title": "Porting SessionTokenMismatchRetryPolicy from .Net-SDK", "pr_author": "FabianMeiswinkel", "pr_createdAt": "2020-10-07T15:15:00Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16034", "timeline": [{"oid": "059cd3ffc67f2dcf03ae66afc237f888af6eb301", "url": "https://github.com/Azure/azure-sdk-for-java/commit/059cd3ffc67f2dcf03ae66afc237f888af6eb301", "message": "Adding SessionTokenMismatchPolicy", "committedDate": "2020-10-07T07:46:09Z", "type": "commit"}, {"oid": "c44296b4d6bfa4aae4a2b17095a9e083468769a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c44296b4d6bfa4aae4a2b17095a9e083468769a1", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/ConsistencyReaderMissingReadSessionFix", "committedDate": "2020-10-07T07:46:35Z", "type": "commit"}, {"oid": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ce18f96b55de5a4634e5f5718a98fb14e49add93", "message": "Adding unit test coverage for SessionTokenMismatchRetryPolicy in ConsistencyReader", "committedDate": "2020-10-07T15:09:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5Njc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501096799", "body": "In .Net we allow overriding these defaults via Environment variables - this is the reason why I added it here as well. But to be honest I don't expect this to be an often used extensibility - most likely the configuration was allowed in .Net for Compute/Mongo/Cassandra - so I would be ok with removing and hard-coding the settings instead as well. Let me know what you think...", "bodyText": "In .Net we allow overriding these defaults via Environment variables - this is the reason why I added it here as well. But to be honest I don't expect this to be an often used extensibility - most likely the configuration was allowed in .Net for Compute/Mongo/Cassandra - so I would be ok with removing and hard-coding the settings instead as well. Let me know what you think...", "bodyHTML": "<p dir=\"auto\">In .Net we allow overriding these defaults via Environment variables - this is the reason why I added it here as well. But to be honest I don't expect this to be an often used extensibility - most likely the configuration was allowed in .Net for Compute/Mongo/Cassandra - so I would be ok with removing and hard-coding the settings instead as well. Let me know what you think...</p>", "author": "FabianMeiswinkel", "createdAt": "2020-10-07T15:16:50Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net", "originalCommit": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDMyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501104323", "body": "info vs warn?", "bodyText": "info vs warn?", "bodyHTML": "<p dir=\"auto\">info vs warn?</p>", "author": "kirankumarkolli", "createdAt": "2020-10-07T15:26:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(", "originalCommit": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NzA5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501197092", "bodyText": "ACK - Fixed in next iteration", "author": "FabianMeiswinkel", "createdAt": "2020-10-07T17:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNDMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0ODk5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501148993", "body": "the new config names not consistent with the existing ones.\r\n```suggestion\r\n        \"COSMOS.SESSION_TOKEN_MISMATCH_POLICY_DEFAULT_MAX_BACKOF_IN_MILLISECONDS\"\r\n```\r\n\r\nsame for the other configs", "bodyText": "the new config names not consistent with the existing ones.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";\n          \n          \n            \n                    \"COSMOS.SESSION_TOKEN_MISMATCH_POLICY_DEFAULT_MAX_BACKOF_IN_MILLISECONDS\"\n          \n      \n    \n    \n  \n\nsame for the other configs", "bodyHTML": "<p dir=\"auto\">the new config names not consistent with the existing ones.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first\">session-token-mismatch-policy-default-maximum-backoff-milliseconds</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first\">COSMOS.SESSION_TOKEN_MISMATCH_POLICY_DEFAULT_MAX_BACKOF_IN_MILLISECONDS</span><span class=\"pl-pds x x-last\">\"</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">same for the other configs</p>", "author": "moderakh", "createdAt": "2020-10-07T16:28:27Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -72,6 +72,20 @@\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 5;\n \n+    // SessionTokenMismatchRetryPolicy Constants\n+    // TODO fabianm - do we really want to keep these config overrides like in .Net\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-wait-time-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_WAIT_TIME_IN_MILLISECONDS = 5000;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-initial-backoff-milliseconds\";\n+    private static final int DEFAULT_SESSION_TOKEN_MISMATCH_INITIAL_BACKOFF_TIME_IN_MILLISECONDS = 5;\n+\n+    private static final String DEFAULT_SESSION_TOKEN_MISMATCH_MAXIMUM_BACKOFF_TIME_IN_MILLISECONDS_NAME =\n+        \"session-token-mismatch-policy-default-maximum-backoff-milliseconds\";", "originalCommit": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NjIxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501196217", "bodyText": "Fixed in next iteration", "author": "FabianMeiswinkel", "createdAt": "2020-10-07T17:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0ODk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTYxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501151614", "body": "code style: in java \"{\" should be on the same line as if.", "bodyText": "code style: in java \"{\" should be on the same line as if.", "bodyHTML": "<p dir=\"auto\">code style: in java \"{\" should be on the same line as if.</p>", "author": "moderakh", "createdAt": "2020-10-07T16:32:17Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionTokenMismatchRetryPolicy.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.directconnectivity.TimeoutHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class SessionTokenMismatchRetryPolicy extends RetryPolicyWithDiagnostics {\n+\n+    private final static Logger LOGGER = LoggerFactory.getLogger(SessionTokenMismatchRetryPolicy.class);\n+\n+    private static final int BACKOFF_MULTIPLIER = 2;\n+\n+    private final Duration maximumBackoff;\n+    private final TimeoutHelper waitTimeTimeoutHelper;\n+    private final AtomicInteger retryCount;\n+\n+    private Duration currentBackoff;\n+\n+    public SessionTokenMismatchRetryPolicy(int waitTimeInMilliSeconds)\n+    {\n+        this.waitTimeTimeoutHelper = new TimeoutHelper(Duration.ofMillis(waitTimeInMilliSeconds));\n+        this.maximumBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchMaximumBackoffTimeInMs());\n+\n+        this.retryCount = new AtomicInteger();\n+        this.retryCount.set(0);\n+        this.currentBackoff = Duration.ofMillis(Configs.getSessionTokenMismatchInitialBackoffTimeInMs());\n+    }\n+\n+    public SessionTokenMismatchRetryPolicy() {\n+        this(Configs.getSessionTokenMismatchDefaultWaitTimeInMs());\n+    }\n+\n+    @Override\n+    public Mono<ShouldRetryResult> shouldRetry(Exception e) {\n+\n+        if (!(e instanceof CosmosException)) {\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        CosmosException cosmosException = (CosmosException)e;\n+\n+        if (cosmosException.getStatusCode() != HttpConstants.StatusCodes.NOTFOUND ||\n+            cosmosException.getSubStatusCode() != HttpConstants.SubStatusCodes.READ_SESSION_NOT_AVAILABLE) {\n+\n+            LOGGER.debug(\n+                \"SessionTokenMismatchRetryPolicy not retrying because StatusCode or SubStatusCode not found.\");\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        if (this.waitTimeTimeoutHelper.isElapsed()) {\n+\n+            LOGGER.info(\n+                \"SessionTokenMismatchRetryPolicy not retrying because it has exceeded \" +\n+                    \"the time limit. Retry count = {}\",\n+                this.retryCount);\n+\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+\n+        Duration effectiveBackoff = Duration.ZERO;\n+\n+        // Don't penalize first retry with delay\n+        if (this.retryCount.getAndIncrement() > 0)\n+        {", "originalCommit": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NDg3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501194872", "bodyText": "ACK - Fixed in next iteartion", "author": "FabianMeiswinkel", "createdAt": "2020-10-07T17:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1Mjg4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501152880", "body": "great test. thanks.", "bodyText": "great test. thanks.", "bodyHTML": "<p dir=\"auto\">great test. thanks.</p>", "author": "moderakh", "createdAt": "2020-10-07T16:34:13Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReaderTest.java", "diffHunk": "@@ -424,6 +423,122 @@ public void sessionNotAvailableFromSomeReplicasThrowingNotFound_FindReplicaSatis\n \n         StoreResponseValidator validator = StoreResponseValidator.create().isSameAs(storeResponse).isSameAs(storeResponse).build();\n         validateSuccess(storeResponseSingle, validator);\n+        transportClientWrapper.verifyNumberOfInvocations(4);\n+    }\n+\n+    /**\n+     * reading in session consistency, if the requested session token cannot be supported by some replicas\n+     * tries others till we find a replica which can support the given session token\n+     */\n+    @Test(groups = \"unit\")\n+    public void sessionNotAvailableFromAllReplicasThrowingNotFound_FindReplicaSatisfyingRequestedSessionOnRetry() {", "originalCommit": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501154771", "body": "we should consider doing a quick perf test for session consistency to see the perf impact of having retry logic hooked up here?", "bodyText": "we should consider doing a quick perf test for session consistency to see the perf impact of having retry logic hooked up here?", "bodyHTML": "<p dir=\"auto\">we should consider doing a quick perf test for session consistency to see the perf impact of having retry logic hooked up here?</p>", "author": "moderakh", "createdAt": "2020-10-07T16:37:13Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ConsistencyReader.java", "diffHunk": "@@ -235,7 +231,9 @@ public ConsistencyReader(\n \n             case Any:\n                 if (targetConsistencyLevel.v == ConsistencyLevel.SESSION) {\n-                    return this.readSessionAsync(entity, desiredReadMode);\n+                    return BackoffRetryUtility.executeRetry(", "originalCommit": "ce18f96b55de5a4634e5f5718a98fb14e49add93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE5NTE3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501195170", "bodyText": "Will do that before merging", "author": "FabianMeiswinkel", "createdAt": "2020-10-07T17:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI5MzE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16034#discussion_r501293144", "bodyText": "Results - are in the same ballpark - if any regression it is minimal (around 1%).....\nBaseline\n[2000000] operations performed in [296] seconds.\n-- Timers ----------------------------------------------------------------------\nlatency\ncount = 2000000\n1-minute rate = 6770.75 calls/second\n5-minute rate = 4997.96 calls/second\n95% <= 1.98 milliseconds\n98% <= 2.75 milliseconds\n99% <= 4.39 milliseconds\n99.9% <= 11.47 milliseconds\nCandidate (with SessionTokenMismatchRetryPolicy)\n[2000000] operations performed in [301] seconds.\n-- Timers ----------------------------------------------------------------------\nlatency\ncount = 2000000\n1-minute rate = 6691.68 calls/second\n5-minute rate = 4945.42 calls/second\n95% <= 2.09 milliseconds\n98% <= 3.16 milliseconds\n99% <= 4.52 milliseconds\n99.9% <= 11.01 milliseconds", "author": "FabianMeiswinkel", "createdAt": "2020-10-07T20:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDc3MQ=="}], "type": "inlineReview"}, {"oid": "4c7312d971ddbce0291c1157537a861c042aa528", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c7312d971ddbce0291c1157537a861c042aa528", "message": "Reacting to code review feedback", "committedDate": "2020-10-07T17:46:10Z", "type": "commit"}, {"oid": "ef46151841cfb41a922a8c08dd0a008571bbe9d6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef46151841cfb41a922a8c08dd0a008571bbe9d6", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/ConsistencyReaderMissingReadSessionFix", "committedDate": "2020-10-07T17:50:35Z", "type": "commit"}]}