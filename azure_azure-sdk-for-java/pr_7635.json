{"pr_number": 7635, "pr_title": "Update error and exception model design for Text Analytics", "pr_author": "samvaity", "pr_createdAt": "2020-01-22T23:50:39Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7635", "timeline": [{"oid": "1d7cd2caab18a61c781375145871c94e2cf6136a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d7cd2caab18a61c781375145871c94e2cf6136a", "message": "throw exception if success property accessed", "committedDate": "2020-01-24T19:01:07Z", "type": "forcePushed"}, {"oid": "c1829a66781c8e5111ed856d89a05306a500a034", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1829a66781c8e5111ed856d89a05306a500a034", "message": "update error model", "committedDate": "2020-01-27T19:40:12Z", "type": "commit"}, {"oid": "e0a3f65a2c41218c4416db14a53ff14e9e8d805d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0a3f65a2c41218c4416db14a53ff14e9e8d805d", "message": "Add custom exception for single input 200 ok error", "committedDate": "2020-01-27T19:41:30Z", "type": "commit"}, {"oid": "fc564d21eba50d192dfe51e1745a3617f5b7ae72", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc564d21eba50d192dfe51e1745a3617f5b7ae72", "message": "update error code model name", "committedDate": "2020-01-27T19:41:34Z", "type": "commit"}, {"oid": "add9eba27901ccc6dfb2fe47948c6bf12626ad36", "url": "https://github.com/Azure/azure-sdk-for-java/commit/add9eba27901ccc6dfb2fe47948c6bf12626ad36", "message": "throw exception if success property accessed", "committedDate": "2020-01-27T19:41:35Z", "type": "commit"}, {"oid": "b6a70ce133e037125f016ac1d645150b09467052", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6a70ce133e037125f016ac1d645150b09467052", "message": "update to function", "committedDate": "2020-01-27T19:50:38Z", "type": "commit"}, {"oid": "b6a70ce133e037125f016ac1d645150b09467052", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6a70ce133e037125f016ac1d645150b09467052", "message": "update to function", "committedDate": "2020-01-27T19:50:38Z", "type": "forcePushed"}, {"oid": "15dce052089af2553f7976ded1deca82485f7298", "url": "https://github.com/Azure/azure-sdk-for-java/commit/15dce052089af2553f7976ded1deca82485f7298", "message": "remov unused imports", "committedDate": "2020-01-27T20:58:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODI1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371518252", "body": "I might be missing something, but what happens if no innerError is returned? Will the top level error code/message/target be used?", "bodyText": "I might be missing something, but what happens if no innerError is returned? Will the top level error code/message/target be used?", "bodyHTML": "<p dir=\"auto\">I might be missing something, but what happens if no innerError is returned? Will the top level error code/message/target be used?</p>", "author": "kristapratico", "createdAt": "2020-01-27T22:27:41Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -67,9 +70,9 @@ static TextDocumentBatchStatistics toBatchStatistics(RequestStatistics statistic\n     static com.azure.ai.textanalytics.models.TextAnalyticsError toTextAnalyticsError(\n         TextAnalyticsError textAnalyticsError) {\n         return new com.azure.ai.textanalytics.models.TextAnalyticsError(\n-            ErrorCodeValue.fromString(textAnalyticsError.getCode().toString()), textAnalyticsError.getMessage(),\n-            textAnalyticsError.getTarget(), textAnalyticsError.getDetails() == null ? null\n-            : setErrors(textAnalyticsError.getDetails()));\n+            TextAnalyticsErrorCode.fromString(textAnalyticsError.getInnerError().getCode().toString()),", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzOTUxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371539512", "bodyText": "It currently doesn't do that, but I think it should. Will update!", "author": "samvaity", "createdAt": "2020-01-27T23:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMDI5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371520298", "body": "Would it make sense to return the document id/error message in the exception message here?", "bodyText": "Would it make sense to return the document id/error message in the exception message here?", "bodyHTML": "<p dir=\"auto\">Would it make sense to return the document id/error message in the exception message here?</p>", "author": "kristapratico", "createdAt": "2020-01-27T22:32:43Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentResult.java", "diffHunk": "@@ -64,4 +66,15 @@ public TextAnalyticsError getError() {\n     public boolean isError() {\n         return isError;\n     }\n+\n+    /**\n+     * Throw a TextAnalyticsException if result has isError true and when a non-error property was accessed.\n+     */\n+    void throwExceptionIfError() {\n+        if (this.isError()) {\n+            throw logger.logExceptionAsError(new TextAnalyticsException(\n+                String.format(\"Error in accessing the property when %s returned with an error.\",\n+                    this.getClass()), null, null));", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyNDk3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371524979", "body": "Amqp?", "bodyText": "Amqp?", "bodyHTML": "<p dir=\"auto\">Amqp?</p>", "author": "kristapratico", "createdAt": "2020-01-27T22:44:36Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the AmqpException class.", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyNTgwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371525803", "body": "Passing in an empty string gives an invalid country hint error?", "bodyText": "Passing in an empty string gives an invalid country hint error?", "bodyHTML": "<p dir=\"auto\">Passing in an empty string gives an invalid country hint error?</p>", "author": "kristapratico", "createdAt": "2020-01-27T22:46:35Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -124,15 +120,12 @@ public void detectLanguageFaultyText() {\n     }\n \n     /**\n-     * Verifies that an error document is returned for a text input with invalid country hint.\n-     * <p>\n-     * TODO: update error Model. #6559\n+     * Verifies that an TextAnalyticsException is thrown for a text input with invalid country hint.\n      */\n     @Test\n     public void detectLanguageInvalidCountryHint() {\n-        TextAnalyticsError expectedError = new TextAnalyticsError(ErrorCodeValue.INVALID_ARGUMENT, \"Invalid Country Hint.\", null, null);\n-        validateErrorDocument(client.detectLanguageWithResponse(\"Este es un document escrito en Espa\u00f1ol.\", \"en\", Context.NONE).getValue().getError(),\n-            expectedError);\n+        Exception exception = assertThrows(TextAnalyticsException.class, () -> client.detectLanguage(\"\"));\n+        assertTrue(exception.getMessage().equals(INVALID_COUNTRY_HINT_EXPECTED_EXCEPTION_MESSAGE));", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyNzQ5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371527494", "body": "What's the different between `toTextAnalyticsException()` and `toTextAnalyticsError()`? When is error used and when is exception used? ", "bodyText": "What's the different between toTextAnalyticsException() and toTextAnalyticsError()? When is error used and when is exception used?", "bodyHTML": "<p dir=\"auto\">What's the different between <code>toTextAnalyticsException()</code> and <code>toTextAnalyticsError()</code>? When is error used and when is exception used?</p>", "author": "srnagar", "createdAt": "2020-01-27T22:51:23Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -87,21 +90,12 @@ static TextDocumentBatchStatistics toBatchStatistics(RequestStatistics statistic\n         return multiLanguageInputs;\n     }\n \n-    /**\n-     * Helper method to set error details on {@link TextAnalyticsError}.\n-     *\n-     * @param details about specific errors that led to this reported error.\n-     * @return the {@link TextAnalyticsError} returned by the SDK.\n-     */\n-    private static List<com.azure.ai.textanalytics.models.TextAnalyticsError> setErrors(\n-        List<TextAnalyticsError> details) {\n-        List<com.azure.ai.textanalytics.models.TextAnalyticsError> detailsList = new ArrayList<>();\n-        for (TextAnalyticsError error : details) {\n-            detailsList.add(new com.azure.ai.textanalytics.models.TextAnalyticsError(\n-                ErrorCodeValue.fromString(error.getCode().toString()),\n-                error.getMessage(),\n-                error.getTarget(), error.getDetails() == null ? null : setErrors(error.getDetails())));\n-        }\n-        return detailsList;\n+    static void toTextAnalyticsException(com.azure.ai.textanalytics.models.TextAnalyticsError error,", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNzM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371537388", "bodyText": "Every TextAnalyticsError returned the service is converted to the sdk equivalent TextAnalyticsError i.e uses toTextAnalyticsError().\nAnd in cases of methods taking in a single input if such error is encountered, it is converted to toTextAnalyticsException().", "author": "samvaity", "createdAt": "2020-01-27T23:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyNzQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyNzkyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371527923", "body": "This piece of code is repeated in each of the error mappers. Avoid duplication and extract this out to a common method.", "bodyText": "This piece of code is repeated in each of the error mappers. Avoid duplication and extract this out to a common method.", "bodyHTML": "<p dir=\"auto\">This piece of code is repeated in each of the error mappers. Avoid duplication and extract this out to a common method.</p>", "author": "srnagar", "createdAt": "2020-01-27T22:52:33Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizePiiEntityAsyncClient.java", "diffHunk": "@@ -54,7 +56,17 @@\n \n         return recognizeBatchPiiEntitiesWithResponse(\n             Collections.singletonList(new TextDocumentInput(\"0\", text, language)), null, context)\n-            .map(response -> new SimpleResponse<>(response, response.getValue().iterator().next()));\n+            .map(response -> {\n+                Iterator<RecognizePiiEntitiesResult> piiEntitiesResultIterator = response.getValue().iterator();\n+                RecognizePiiEntitiesResult piiEntitiesResult = null;\n+                if (response.getStatusCode() == 200 && piiEntitiesResultIterator.hasNext()) {\n+                    piiEntitiesResult = piiEntitiesResultIterator.next();\n+                    if (piiEntitiesResult.isError()) {\n+                        toTextAnalyticsException(piiEntitiesResult.getError(), logger);\n+                    }\n+                }\n+                return new SimpleResponse<>(response, piiEntitiesResult);\n+            });", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTUwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371529503", "body": "This method always throws an exception, however, it's not clear from this code that the method ends here. I was assuming that it would still continue to return `SimpleResponse` before looking at `toTextAnalyticsException()` method.\r\n\r\nInstead, return the exception from `toTextAnalyticsException()` and change this to `throw toTextAnalyticsException()`. ", "bodyText": "This method always throws an exception, however, it's not clear from this code that the method ends here. I was assuming that it would still continue to return SimpleResponse before looking at toTextAnalyticsException() method.\nInstead, return the exception from toTextAnalyticsException() and change this to throw toTextAnalyticsException().", "bodyHTML": "<p dir=\"auto\">This method always throws an exception, however, it's not clear from this code that the method ends here. I was assuming that it would still continue to return <code>SimpleResponse</code> before looking at <code>toTextAnalyticsException()</code> method.</p>\n<p dir=\"auto\">Instead, return the exception from <code>toTextAnalyticsException()</code> and change this to <code>throw toTextAnalyticsException()</code>.</p>", "author": "srnagar", "createdAt": "2020-01-27T22:57:11Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -55,7 +57,17 @@\n \n         return recognizeBatchLinkedEntitiesWithResponse(\n             Collections.singletonList(new TextDocumentInput(\"0\", text, language)), null, context)\n-            .map(response -> new SimpleResponse<>(response, response.getValue().iterator().next()));\n+            .map(response -> {\n+                Iterator<RecognizeLinkedEntitiesResult> linkedEntitiesResultIterator = response.getValue().iterator();\n+                RecognizeLinkedEntitiesResult linkedEntitiesResult = null;\n+                if (response.getStatusCode() == 200 && linkedEntitiesResultIterator.hasNext()) {\n+                    linkedEntitiesResult = linkedEntitiesResultIterator.next();\n+                    if (linkedEntitiesResult.isError()) {\n+                        toTextAnalyticsException(linkedEntitiesResult.getError(), logger);", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMDY1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371530655", "body": "Use `HttpUrlConnection.HTTP_OK` instead of magic numbers.", "bodyText": "Use HttpUrlConnection.HTTP_OK instead of magic numbers.", "bodyHTML": "<p dir=\"auto\">Use <code>HttpUrlConnection.HTTP_OK</code> instead of magic numbers.</p>", "author": "srnagar", "createdAt": "2020-01-27T23:00:36Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -55,7 +57,17 @@\n \n         return recognizeBatchLinkedEntitiesWithResponse(\n             Collections.singletonList(new TextDocumentInput(\"0\", text, language)), null, context)\n-            .map(response -> new SimpleResponse<>(response, response.getValue().iterator().next()));\n+            .map(response -> {\n+                Iterator<RecognizeLinkedEntitiesResult> linkedEntitiesResultIterator = response.getValue().iterator();\n+                RecognizeLinkedEntitiesResult linkedEntitiesResult = null;\n+                if (response.getStatusCode() == 200 && linkedEntitiesResultIterator.hasNext()) {", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMTMzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371531331", "body": "Use `Locale.ROOT` instead of `Locale.US`", "bodyText": "Use Locale.ROOT instead of Locale.US", "bodyHTML": "<p dir=\"auto\">Use <code>Locale.ROOT</code> instead of <code>Locale.US</code></p>", "author": "srnagar", "createdAt": "2020-01-27T23:02:42Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the AmqpException class.\n+     * @param message Text containing any supplementary details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();\n+        } else {\n+            baseMessage = String.format(Locale.US, \"%s %s: {%s}\", baseMessage, \"ErrorCodeValue\",", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMjA1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371532055", "body": "Is error guaranteed to have `code` or can `getCode()` result in NPE?", "bodyText": "Is error guaranteed to have code or can getCode() result in NPE?", "bodyHTML": "<p dir=\"auto\">Is error guaranteed to have <code>code</code> or can <code>getCode()</code> result in NPE?</p>", "author": "srnagar", "createdAt": "2020-01-27T23:04:42Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -87,21 +90,12 @@ static TextDocumentBatchStatistics toBatchStatistics(RequestStatistics statistic\n         return multiLanguageInputs;\n     }\n \n-    /**\n-     * Helper method to set error details on {@link TextAnalyticsError}.\n-     *\n-     * @param details about specific errors that led to this reported error.\n-     * @return the {@link TextAnalyticsError} returned by the SDK.\n-     */\n-    private static List<com.azure.ai.textanalytics.models.TextAnalyticsError> setErrors(\n-        List<TextAnalyticsError> details) {\n-        List<com.azure.ai.textanalytics.models.TextAnalyticsError> detailsList = new ArrayList<>();\n-        for (TextAnalyticsError error : details) {\n-            detailsList.add(new com.azure.ai.textanalytics.models.TextAnalyticsError(\n-                ErrorCodeValue.fromString(error.getCode().toString()),\n-                error.getMessage(),\n-                error.getTarget(), error.getDetails() == null ? null : setErrors(error.getDetails())));\n-        }\n-        return detailsList;\n+    static void toTextAnalyticsException(com.azure.ai.textanalytics.models.TextAnalyticsError error,\n+        ClientLogger logger) {\n+        String baseMessage = String.format(Locale.US, \"%s: {%s}, %s\",\n+            \"Status Code\", 200, error.getMessage());\n+        throw logger.logExceptionAsError(new TextAnalyticsException(baseMessage,\n+            error.getCode().toString(),", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDcwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371550708", "bodyText": "Error here is guaranteed to have code and message.", "author": "samvaity", "createdAt": "2020-01-28T00:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzMjA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNTI0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371535240", "body": "Generate the servialVersionUID instead of setting it to 1L", "bodyText": "Generate the servialVersionUID instead of setting it to 1L", "bodyHTML": "<p dir=\"auto\">Generate the servialVersionUID instead of setting it to 1L</p>", "author": "srnagar", "createdAt": "2020-01-27T23:13:55Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 1L;", "originalCommit": "15dce052089af2553f7976ded1deca82485f7298", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bb8260613d823ffefb8d89156a849368e7932ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3bb8260613d823ffefb8d89156a849368e7932ed", "message": "update review comments", "committedDate": "2020-01-28T00:04:37Z", "type": "commit"}, {"oid": "231df37e2437faf4e4b4bc22608368f90e688dbe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/231df37e2437faf4e4b4bc22608368f90e688dbe", "message": "add tests for success property access exception", "committedDate": "2020-01-28T00:47:23Z", "type": "commit"}, {"oid": "875b3aa92f23f63e123360f4a390a003cd638805", "url": "https://github.com/Azure/azure-sdk-for-java/commit/875b3aa92f23f63e123360f4a390a003cd638805", "message": "update to use generic function", "committedDate": "2020-01-28T02:30:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkzOTM0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371939349", "body": "Was this a manual change or a regeneration change? If the former this will be overwritten next time the implementation layer is regenerated.", "bodyText": "Was this a manual change or a regeneration change? If the former this will be overwritten next time the implementation layer is regenerated.", "bodyHTML": "<p dir=\"auto\">Was this a manual change or a regeneration change? If the former this will be overwritten next time the implementation layer is regenerated.</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:11:48Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/ErrorCodeValue.java", "diffHunk": "@@ -8,7 +8,7 @@\n import com.fasterxml.jackson.annotation.JsonValue;\n \n /**\n- * Defines values for ErrorCodeValue.\n+ * Defines values for TextAnalyticsErrorCode.", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3ODU0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371978542", "bodyText": "I think the refactor for name change made this change, will revert this.", "author": "samvaity", "createdAt": "2020-01-28T18:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkzOTM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0MDYzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371940633", "body": "Should this accept a `ClientLogger`? Won't everything calling into this use the `DocumentResult.class` logger?", "bodyText": "Should this accept a ClientLogger? Won't everything calling into this use the DocumentResult.class logger?", "bodyHTML": "<p dir=\"auto\">Should this accept a <code>ClientLogger</code>? Won't everything calling into this use the <code>DocumentResult.class</code> logger?</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:13:58Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentResult.java", "diffHunk": "@@ -64,4 +67,16 @@ public TextAnalyticsError getError() {\n     public boolean isError() {\n         return isError;\n     }\n+\n+    /**\n+     * Throw a {@link TextAnalyticsException} if result has isError true and when a non-error property was accessed.\n+     */\n+    void throwExceptionIfError() {", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0MjU0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371942547", "body": "Should this be turned back into a `TextAnalyticsErrorCode`? Generally don't want to have to much loose string matching on error codes.", "bodyText": "Should this be turned back into a TextAnalyticsErrorCode? Generally don't want to have to much loose string matching on error codes.", "bodyHTML": "<p dir=\"auto\">Should this be turned back into a <code>TextAnalyticsErrorCode</code>? Generally don't want to have to much loose string matching on error codes.</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:17:22Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 21436310107606058L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the TextAnalyticsException class.\n+     * @param message Text containing any additional details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"ErrorCodeValue\",\n+                errorCodeValue);\n+        }\n+\n+        if (this.target == null) {\n+            return baseMessage;\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"target\", target);\n+        }\n+\n+        return baseMessage;\n+    }\n+\n+    /**\n+     * Gets the target for this exception.\n+     *\n+     * @return The target for this exception.\n+     */\n+    public String getTarget() {\n+        return this.target;\n+    }\n+\n+    /**\n+     * Gets the String value of TextAnalyticsErrorCode for this exception.\n+     *\n+     * @return The String value of TextAnalyticsErrorCode for this exception.\n+     */\n+    public String getErrorCodeValue() {\n+        return errorCodeValue;", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0MzUwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371943506", "body": "Is it possible to have a target without an error code a vice-versa? This seems like it could be cleaned up to check that both aren't 'null' at once and do a full string formatting.", "bodyText": "Is it possible to have a target without an error code a vice-versa? This seems like it could be cleaned up to check that both aren't 'null' at once and do a full string formatting.", "bodyHTML": "<p dir=\"auto\">Is it possible to have a target without an error code a vice-versa? This seems like it could be cleaned up to check that both aren't 'null' at once and do a full string formatting.</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:19:01Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 21436310107606058L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the TextAnalyticsException class.\n+     * @param message Text containing any additional details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"ErrorCodeValue\",\n+                errorCodeValue);\n+        }\n+\n+        if (this.target == null) {\n+            return baseMessage;\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"target\", target);\n+        }", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4MDY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371980642", "bodyText": "It should always have error code but target can be null. Can clean it that way.", "author": "samvaity", "createdAt": "2020-01-28T18:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0MzUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0Mzc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371943773", "body": "`baseMessage` could be returned here instead of retrieving it from the super class again.", "bodyText": "baseMessage could be returned here instead of retrieving it from the super class again.", "bodyHTML": "<p dir=\"auto\"><code>baseMessage</code> could be returned here instead of retrieving it from the super class again.</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:19:31Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 21436310107606058L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the TextAnalyticsException class.\n+     * @param message Text containing any additional details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0Mzk3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371943973", "body": "Let's make 'ErrorCodeValue` a constant", "bodyText": "Let's make 'ErrorCodeValue` a constant", "bodyHTML": "<p dir=\"auto\">Let's make 'ErrorCodeValue` a constant</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:19:50Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 21436310107606058L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the TextAnalyticsException class.\n+     * @param message Text containing any additional details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"ErrorCodeValue\",", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NDY1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371944652", "bodyText": "Actually, why isn't this in the format string?", "author": "alzimmermsft", "createdAt": "2020-01-28T17:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0Mzk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NDA5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371944097", "body": "Let's make `target` a constant", "bodyText": "Let's make target a constant", "bodyHTML": "<p dir=\"auto\">Let's make <code>target</code> a constant</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:20:04Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 21436310107606058L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the TextAnalyticsException class.\n+     * @param message Text containing any additional details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"ErrorCodeValue\",\n+                errorCodeValue);\n+        }\n+\n+        if (this.target == null) {\n+            return baseMessage;\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"target\", target);", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NDY3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371944676", "bodyText": "Actually, why isn't this in the format string?", "author": "alzimmermsft", "createdAt": "2020-01-28T17:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NDA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NDk5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371944992", "body": "Could a `StringBuilder` be used instead of using two `String.format` calls?", "bodyText": "Could a StringBuilder be used instead of using two String.format calls?", "bodyHTML": "<p dir=\"auto\">Could a <code>StringBuilder</code> be used instead of using two <code>String.format</code> calls?</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:21:45Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsException.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.exception.AzureException;\n+\n+import java.util.Locale;\n+\n+/**\n+ * General exception for Text Analytics related failures.\n+ */\n+public class TextAnalyticsException extends AzureException {\n+    private static final long serialVersionUID = 21436310107606058L;\n+\n+    private final String errorCodeValue;\n+    private final String target;\n+\n+    /**\n+     * Initializes a new instance of the TextAnalyticsException class.\n+     * @param message Text containing any additional details of the exception.\n+     * @param errorCodeValue The service returned error code value.\n+     * @param target The target for this exception.\n+     */\n+    public TextAnalyticsException(String message, String errorCodeValue, String target) {\n+        super(message);\n+        this.errorCodeValue = errorCodeValue;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        String baseMessage = super.getMessage();\n+\n+        if (this.errorCodeValue == null) {\n+            return super.getMessage();\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"ErrorCodeValue\",\n+                errorCodeValue);\n+        }\n+\n+        if (this.target == null) {\n+            return baseMessage;\n+        } else {\n+            baseMessage = String.format(Locale.ROOT, \"%s %s: {%s}\", baseMessage, \"target\", target);", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NTY2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371945662", "body": "Why do the other `String.format` changes use `Locale.ROOT` where this does not?", "bodyText": "Why do the other String.format changes use Locale.ROOT where this does not?", "bodyHTML": "<p dir=\"auto\">Why do the other <code>String.format</code> changes use <code>Locale.ROOT</code> where this does not?</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:23:01Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentResult.java", "diffHunk": "@@ -64,4 +67,16 @@ public TextAnalyticsError getError() {\n     public boolean isError() {\n         return isError;\n     }\n+\n+    /**\n+     * Throw a {@link TextAnalyticsException} if result has isError true and when a non-error property was accessed.\n+     */\n+    void throwExceptionIfError() {\n+        if (this.isError()) {\n+            throw logger.logExceptionAsError(new TextAnalyticsException(\n+                String.format(\"Error in accessing the property on document id: %s, when %s returned with an error: %s\",\n+                    this.id, this.getClass().getSimpleName(), this.error.getMessage()),", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NjE3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r371946172", "body": "Since this is package private it won't be inherited by the subclasses, will this require any additional parameters to be passed?", "bodyText": "Since this is package private it won't be inherited by the subclasses, will this require any additional parameters to be passed?", "bodyHTML": "<p dir=\"auto\">Since this is package private it won't be inherited by the subclasses, will this require any additional parameters to be passed?</p>", "author": "alzimmermsft", "createdAt": "2020-01-28T17:23:55Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentResult.java", "diffHunk": "@@ -64,4 +67,16 @@ public TextAnalyticsError getError() {\n     public boolean isError() {\n         return isError;\n     }\n+\n+    /**\n+     * Throw a {@link TextAnalyticsException} if result has isError true and when a non-error property was accessed.\n+     */\n+    void throwExceptionIfError() {", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNjQ5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372026491", "bodyText": "Given that it is an exception to be raised for accessing success attributes on output models, this method would always be accessed in the model classes which exist in the same packages.", "author": "samvaity", "createdAt": "2020-01-28T20:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk0NjE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372015885", "body": "Will this exception always be for 200 only?  A different exception is thrown for 4xx/5xx codes?\r\n\r\nIt's possible TA service could add another top-level error.  Does this exception type leave room to grow if they do?\r\nRight now they have just these top-level errors:\r\n\r\n          \"enum\": [\r\n            \"invalidRequest\", // 400\r\n            \"invalidArgument\", // 200\r\n            \"internalServerError\", // 500\r\n            \"serviceUnavailable\"  // 500\r\n          ],\r\n\r\nWhat exception type would we throw if they added another for 200?  Would you inherit from TextAnalyticsException or differentiate it another way?  ", "bodyText": "Will this exception always be for 200 only?  A different exception is thrown for 4xx/5xx codes?\nIt's possible TA service could add another top-level error.  Does this exception type leave room to grow if they do?\nRight now they have just these top-level errors:\n      \"enum\": [\n        \"invalidRequest\", // 400\n        \"invalidArgument\", // 200\n        \"internalServerError\", // 500\n        \"serviceUnavailable\"  // 500\n      ],\n\nWhat exception type would we throw if they added another for 200?  Would you inherit from TextAnalyticsException or differentiate it another way?", "bodyHTML": "<p dir=\"auto\">Will this exception always be for 200 only?  A different exception is thrown for 4xx/5xx codes?</p>\n<p dir=\"auto\">It's possible TA service could add another top-level error.  Does this exception type leave room to grow if they do?<br>\nRight now they have just these top-level errors:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"      &quot;enum&quot;: [\n        &quot;invalidRequest&quot;, // 400\n        &quot;invalidArgument&quot;, // 200\n        &quot;internalServerError&quot;, // 500\n        &quot;serviceUnavailable&quot;  // 500\n      ],\n\"><pre><code>      \"enum\": [\n        \"invalidRequest\", // 400\n        \"invalidArgument\", // 200\n        \"internalServerError\", // 500\n        \"serviceUnavailable\"  // 500\n      ],\n</code></pre></div>\n<p dir=\"auto\">What exception type would we throw if they added another for 200?  Would you inherit from TextAnalyticsException or differentiate it another way?</p>", "author": "annelo-msft", "createdAt": "2020-01-28T19:40:55Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -88,20 +105,43 @@ static TextDocumentBatchStatistics toBatchStatistics(RequestStatistics statistic\n     }\n \n     /**\n-     * Helper method to set error details on {@link TextAnalyticsError}.\n+     * Convert the incoming input {@link com.azure.ai.textanalytics.models.TextAnalyticsError}\n+     * to a {@link TextAnalyticsException}.\n+     *\n+     * @param error the {@link com.azure.ai.textanalytics.models.TextAnalyticsError}.\n+     * @return the {@link TextAnalyticsException} to be thrown.\n+     */\n+    static TextAnalyticsException toTextAnalyticsException(com.azure.ai.textanalytics.models.TextAnalyticsError error) {\n+        String baseMessage = String.format(Locale.US, \"%s: {%s}, %s\",\n+            \"Status Code\", HttpURLConnection.HTTP_OK, error.getMessage());", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMTA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372031095", "bodyText": "Will this exception always be for 200 only? A different exception is thrown for 4xx/5xx codes?\n\nYes, we have HttpResponseException to deal with the unsuccessful response received with HTTP status code (e.g. 3XX, 4XX, 5XX) from the service request.\n\nWhat exception type would we throw if they added another for 200?\n\nFor another 200 added from the service side, we can update the getMessage() method to handle it accordingly. TextAnalyticsException can still be reused in those cases.\nAlso, on this, I am considering removing Status code from the exception message as it would be repetitive info with the response.", "author": "samvaity", "createdAt": "2020-01-28T20:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTgzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372019839", "body": "We have error code as a string in .NET rather than having an enum for it.  Not sure what the philosophy is on this on the Java side, but in .NET if we did expose this as an enum, we would want a service-specific name for it to avoid type name clashes down the line.  This is a candidate for a common library, but we're still operating under the assumption that we won't get there for TextAnalytics (this could change).", "bodyText": "We have error code as a string in .NET rather than having an enum for it.  Not sure what the philosophy is on this on the Java side, but in .NET if we did expose this as an enum, we would want a service-specific name for it to avoid type name clashes down the line.  This is a candidate for a common library, but we're still operating under the assumption that we won't get there for TextAnalytics (this could change).", "bodyHTML": "<p dir=\"auto\">We have error code as a string in .NET rather than having an enum for it.  Not sure what the philosophy is on this on the Java side, but in .NET if we did expose this as an enum, we would want a service-specific name for it to avoid type name clashes down the line.  This is a candidate for a common library, but we're still operating under the assumption that we won't get there for TextAnalytics (this could change).</p>", "author": "annelo-msft", "createdAt": "2020-01-28T19:48:40Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/ErrorCodeValue.java", "diffHunk": "@@ -8,7 +8,7 @@\n import com.fasterxml.jackson.annotation.JsonValue;\n \n /**\n- * Defines values for ErrorCodeValue.\n+ * Defines values for TextAnalyticsErrorCode.\n  */\n public enum ErrorCodeValue {", "originalCommit": "875b3aa92f23f63e123360f4a390a003cd638805", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MzUxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372083513", "bodyText": "Correct, this was reverted as it was a code generated file and should not have been changed.\nThe enum exposed to the users is named TextAnalyticsErrorCode.", "author": "samvaity", "createdAt": "2020-01-28T22:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NTA2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372085065", "bodyText": "Ah, ok.  I must have read the code incorrectly.", "author": "annelo-msft", "createdAt": "2020-01-28T22:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4NTIzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372085236", "bodyText": "Do you have the same issue that we have in .NET where it's a breaking change to add values to an enum?", "author": "annelo-msft", "createdAt": "2020-01-28T22:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MDcwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372090701", "bodyText": "No, it wouldn't since in Java we use ExpandableStringEnum that allows this enum to accept any future values that service team could add.", "author": "samvaity", "createdAt": "2020-01-28T22:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzU3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372773579", "bodyText": "ExpandableStringEnum that allows this enum to accept any future values that service team could add.\n\nCool :)", "author": "maririos", "createdAt": "2020-01-30T06:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTgzOQ=="}], "type": "inlineReview"}, {"oid": "be5571b25e8f501b6f0b6fd5493ab7f56bdfa020", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be5571b25e8f501b6f0b6fd5493ab7f56bdfa020", "message": "update to use class logger", "committedDate": "2020-01-28T19:57:50Z", "type": "commit"}, {"oid": "94b394850d9d9b7b466d63560c81753fdf5f7422", "url": "https://github.com/Azure/azure-sdk-for-java/commit/94b394850d9d9b7b466d63560c81753fdf5f7422", "message": "update to use Locale.ROOT", "committedDate": "2020-01-28T21:16:27Z", "type": "commit"}, {"oid": "628815d15808992cda741fd06d09cace9e4b1a07", "url": "https://github.com/Azure/azure-sdk-for-java/commit/628815d15808992cda741fd06d09cace9e4b1a07", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into update-error-model", "committedDate": "2020-01-29T19:36:36Z", "type": "commit"}, {"oid": "bab240370639c1322c374659fc9e6e2c890ddfa2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bab240370639c1322c374659fc9e6e2c890ddfa2", "message": "Remove status code from single error response exception", "committedDate": "2020-01-29T19:39:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNjE2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372726167", "body": "ClientLogger doesn't have to be passed around. Use a ClientLogger that is created with the name of this class.", "bodyText": "ClientLogger doesn't have to be passed around. Use a ClientLogger that is created with the name of this class.", "bodyHTML": "<p dir=\"auto\">ClientLogger doesn't have to be passed around. Use a ClientLogger that is created with the name of this class.</p>", "author": "srnagar", "createdAt": "2020-01-30T01:57:54Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -88,20 +104,40 @@ static TextDocumentBatchStatistics toBatchStatistics(RequestStatistics statistic\n     }\n \n     /**\n-     * Helper method to set error details on {@link TextAnalyticsError}.\n+     * Convert the incoming input {@link com.azure.ai.textanalytics.models.TextAnalyticsError}\n+     * to a {@link TextAnalyticsException}.\n+     *\n+     * @param error the {@link com.azure.ai.textanalytics.models.TextAnalyticsError}.\n+     * @return the {@link TextAnalyticsException} to be thrown.\n+     */\n+    static TextAnalyticsException toTextAnalyticsException(com.azure.ai.textanalytics.models.TextAnalyticsError error) {\n+        return new TextAnalyticsException(error.getMessage(),\n+            error.getCode().toString(),\n+            error.getTarget());\n+    }\n+\n+    /**\n+     * Convert the service returned model response {@link DocumentResultCollection} to a {@link SimpleResponse}.\n+     * If the response returned with an error, a {@link TextAnalyticsException} is thrown.\n+     *\n+     * @param response the {@link com.azure.ai.textanalytics.models.TextAnalyticsError}.\n+     * @param logger the {@link ClientLogger} used to log any exception.\n+     *\n+     * @return the {@link SimpleResponse}.\n      *\n-     * @param details about specific errors that led to this reported error.\n-     * @return the {@link TextAnalyticsError} returned by the SDK.\n+     * @throws com.azure.ai.textanalytics.models.TextAnalyticsException if the response returned with\n+     * an {@link com.azure.ai.textanalytics.models.TextAnalyticsError error}.\n      */\n-    private static List<com.azure.ai.textanalytics.models.TextAnalyticsError> setErrors(\n-        List<TextAnalyticsError> details) {\n-        List<com.azure.ai.textanalytics.models.TextAnalyticsError> detailsList = new ArrayList<>();\n-        for (TextAnalyticsError error : details) {\n-            detailsList.add(new com.azure.ai.textanalytics.models.TextAnalyticsError(\n-                ErrorCodeValue.fromString(error.getCode().toString()),\n-                error.getMessage(),\n-                error.getTarget(), error.getDetails() == null ? null : setErrors(error.getDetails())));\n+    static <T extends DocumentResult> Response<T> processSingleResponseErrorResult(\n+        Response<DocumentResultCollection<T>> response, ClientLogger logger) {", "originalCommit": "bab240370639c1322c374659fc9e6e2c890ddfa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNjY1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r373216658", "bodyText": "Updated to use the class logger.", "author": "samvaity", "createdAt": "2020-01-30T22:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNjE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNjk1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372726958", "body": "This can now be made `private`", "bodyText": "This can now be made private", "bodyHTML": "<p dir=\"auto\">This can now be made <code>private</code></p>", "author": "srnagar", "createdAt": "2020-01-30T02:01:37Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/Transforms.java", "diffHunk": "@@ -88,20 +104,40 @@ static TextDocumentBatchStatistics toBatchStatistics(RequestStatistics statistic\n     }\n \n     /**\n-     * Helper method to set error details on {@link TextAnalyticsError}.\n+     * Convert the incoming input {@link com.azure.ai.textanalytics.models.TextAnalyticsError}\n+     * to a {@link TextAnalyticsException}.\n+     *\n+     * @param error the {@link com.azure.ai.textanalytics.models.TextAnalyticsError}.\n+     * @return the {@link TextAnalyticsException} to be thrown.\n+     */\n+    static TextAnalyticsException toTextAnalyticsException(com.azure.ai.textanalytics.models.TextAnalyticsError error) {", "originalCommit": "bab240370639c1322c374659fc9e6e2c890ddfa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNzUzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372727538", "body": "Don't use a logger created in another class. For debugging purposes, we should know which class actually has the code that logged something.", "bodyText": "Don't use a logger created in another class. For debugging purposes, we should know which class actually has the code that logged something.", "bodyHTML": "<p dir=\"auto\">Don't use a logger created in another class. For debugging purposes, we should know which class actually has the code that logged something.</p>", "author": "srnagar", "createdAt": "2020-01-30T02:04:52Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DocumentResult.java", "diffHunk": "@@ -64,4 +69,19 @@ public TextAnalyticsError getError() {\n     public boolean isError() {\n         return isError;\n     }\n+\n+    /**\n+     * Throw a {@link TextAnalyticsException} if result has isError true and when a non-error property was accessed.\n+     *\n+     * @param logger the {@link ClientLogger} used to log the exception.\n+     */\n+    void throwExceptionIfError(ClientLogger logger) {", "originalCommit": "bab240370639c1322c374659fc9e6e2c890ddfa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNzU5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r372727599", "body": "Any reason why this generated code was deleted?", "bodyText": "Any reason why this generated code was deleted?", "bodyHTML": "<p dir=\"auto\">Any reason why this generated code was deleted?</p>", "author": "srnagar", "createdAt": "2020-01-30T02:05:13Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/ErrorCodeValue.java", "diffHunk": "@@ -1,71 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.", "originalCommit": "bab240370639c1322c374659fc9e6e2c890ddfa2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NjI3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r373186271", "bodyText": "It was a duplicate file, the generated file still exists here.", "author": "samvaity", "createdAt": "2020-01-30T20:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNzU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3ODQ0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r373078443", "body": "NIT: `name a name`", "bodyText": "NIT: name a name", "bodyHTML": "<p dir=\"auto\">NIT: <code>name a name</code></p>", "author": "maririos", "createdAt": "2020-01-30T17:09:44Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsErrorCode.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Defines values for TextAnalyticsErrorCode.\n+ */\n+public final class TextAnalyticsErrorCode extends ExpandableStringEnum<TextAnalyticsErrorCode> {\n+    /**\n+     * Enum value invalidRequest.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_REQUEST = fromString(\"invalidRequest\");\n+\n+    /**\n+     * Enum value invalidArgument.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_ARGUMENT = fromString(\"invalidArgument\");\n+\n+    /**\n+     * Enum value internalServerError.\n+     */\n+    public static final TextAnalyticsErrorCode INTERNAL_SERVER_ERROR = fromString(\"internalServerError\");\n+\n+    /**\n+     * Enum value serviceUnavailable.\n+     */\n+    public static final TextAnalyticsErrorCode SERVICE_UNAVAILABLE = fromString(\"serviceUnavailable\");\n+\n+    /**\n+     * Enum value invalidParameterValue.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_PARAMETER_VALUE = fromString(\"invalidParameterValue\");\n+\n+    /**\n+     * Enum value invalidRequestBodyFormat.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_REQUEST_BODY_FORMAT = fromString(\"invalidRequestBodyFormat\");\n+\n+    /**\n+     * Enum value emptyRequest.\n+     */\n+    public static final TextAnalyticsErrorCode EMPTY_REQUEST = fromString(\"emptyRequest\");\n+\n+    /**\n+     * Enum value missingInputRecords.\n+     */\n+    public static final TextAnalyticsErrorCode MISSING_INPUT_RECORDS = fromString(\"missingInputRecords\");\n+\n+    /**\n+     * Enum value invalidDocument.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_DOCUMENT = fromString(\"invalidDocument\");\n+\n+    /**\n+     * Enum value modelVersionIncorrect.\n+     */\n+    public static final TextAnalyticsErrorCode MODEL_VERSION_INCORRECT = fromString(\"modelVersionIncorrect\");\n+\n+    /**\n+     * Enum value invalidDocumentBatch.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_DOCUMENT_BATCH = fromString(\"invalidDocumentBatch\");\n+\n+    /**\n+     * Enum value unsupportedLanguageCode.\n+     */\n+    public static final TextAnalyticsErrorCode UNSUPPORTED_LANGUAGE_CODE = fromString(\"unsupportedLanguageCode\");\n+\n+    /**\n+     * Enum value invalidCountryHint.\n+     */\n+    public static final TextAnalyticsErrorCode INVALID_COUNTRY_HINT = fromString(\"invalidCountryHint\");\n+\n+    /**\n+     * Creates or finds a TextAnalyticsErrorCode from its string representation.\n+     *\n+     * @param name a name to look for.", "originalCommit": "bab240370639c1322c374659fc9e6e2c890ddfa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3OTkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r373079906", "body": "```suggestion\r\n     * Verifies that a TextAnalyticsException is thrown when empty text is passed.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Verifies that  an TextAnalyticsException is thrown when empty text is passed.\n          \n          \n            \n                 * Verifies that a TextAnalyticsException is thrown when empty text is passed.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Verifies</span> that <span class=\"x x-first x-last\"> an</span> <span class=\"pl-smi\">TextAnalyticsException</span> is thrown when empty text is passed.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Verifies</span> that <span class=\"x x-first x-last\">a</span> <span class=\"pl-smi\">TextAnalyticsException</span> is thrown when empty text is passed.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "maririos", "createdAt": "2020-01-30T17:12:30Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -110,14 +110,12 @@ public void detectLanguagesNullInput() {\n     }\n \n     /**\n-     * Verifies that the error result is returned when empty text is passed.\n+     * Verifies that  an TextAnalyticsException is thrown when empty text is passed.", "originalCommit": "bab240370639c1322c374659fc9e6e2c890ddfa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c78c1a2cba0795a4548fc37915e239f1b215f0b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c78c1a2cba0795a4548fc37915e239f1b215f0b", "message": "update to use static logger", "committedDate": "2020-01-30T22:07:05Z", "type": "commit"}, {"oid": "5c78c1a2cba0795a4548fc37915e239f1b215f0b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c78c1a2cba0795a4548fc37915e239f1b215f0b", "message": "update to use static logger", "committedDate": "2020-01-30T22:07:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3ODE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7635#discussion_r373278147", "body": "nit: can use method reference instead \r\n```suggestion\r\n            .map(Transforms::processSingleResponseErrorResult);\r\n```", "bodyText": "nit: can use method reference instead\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(response -> processSingleResponseErrorResult(response));\n          \n          \n            \n                        .map(Transforms::processSingleResponseErrorResult);", "bodyHTML": "<p dir=\"auto\">nit: can use method reference instead</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            .map(<span class=\"x x-first\">response </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x x-last\"> </span>processSingleResponseErrorResult<span class=\"x x-first x-last\">(response)</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            .map(<span class=\"pl-smi x x-first\">Transforms</span><span class=\"pl-k x x-last\">::</span>processSingleResponseErrorResult);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "srnagar", "createdAt": "2020-01-31T01:24:02Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -55,7 +57,7 @@\n \n         return analyzeBatchSentimentWithResponse(\n             Collections.singletonList(new TextDocumentInput(\"0\", text, language)), null, context)\n-            .map(response -> new SimpleResponse<>(response, response.getValue().iterator().next()));\n+            .map(response -> processSingleResponseErrorResult(response));", "originalCommit": "5c78c1a2cba0795a4548fc37915e239f1b215f0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc8082fdb8aa261da958ccd8589b9d1f2b77ac0d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc8082fdb8aa261da958ccd8589b9d1f2b77ac0d", "message": "use method reference", "committedDate": "2020-01-31T02:07:04Z", "type": "commit"}]}