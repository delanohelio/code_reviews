{"pr_number": 16111, "pr_title": "Optimize reads/queries to Gateway and only send SessionToken when applicable", "pr_author": "FabianMeiswinkel", "pr_createdAt": "2020-10-09T14:17:44Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16111", "timeline": [{"oid": "fc5e2043f23e132f23898dfcb51a8e1d70aebc48", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc5e2043f23e132f23898dfcb51a8e1d70aebc48", "message": "Adding repro", "committedDate": "2020-10-06T18:18:54Z", "type": "commit"}, {"oid": "888626bcdbeb63c9b56ef79aaf44653818419873", "url": "https://github.com/Azure/azure-sdk-for-java/commit/888626bcdbeb63c9b56ef79aaf44653818419873", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/MSCIInvestigation", "committedDate": "2020-10-09T11:27:51Z", "type": "commit"}, {"oid": "3e930c4ece230616f5214999d768a2c1bcfcc081", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e930c4ece230616f5214999d768a2c1bcfcc081", "message": "Only sending SessionToken to Gateway when applicable", "committedDate": "2020-10-09T14:12:24Z", "type": "commit"}, {"oid": "1751dfcd48c13335b4147e1f646ca32ae578c0a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1751dfcd48c13335b4147e1f646ca32ae578c0a8", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/MSCIInvestigation", "committedDate": "2020-10-09T14:12:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MDQxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502470417", "body": "Are we now supporting request level consistency now?", "bodyText": "Are we now supporting request level consistency now?", "bodyHTML": "<p dir=\"auto\">Are we now supporting request level consistency now?</p>", "author": "kirankumarkolli", "createdAt": "2020-10-09T14:34:12Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosQueryRequestOptions.java", "diffHunk": "@@ -71,6 +75,31 @@ CosmosQueryRequestOptions setPartitionKeyRangeIdInternal(String partitionKeyRang\n         return this;\n     }\n \n+    /**\n+     * Gets the consistency level required for the request.\n+     *\n+     * @return the consistency level.\n+     */\n+\n+    public ConsistencyLevel getConsistencyLevel() {\n+        return consistencyLevel;\n+    }\n+\n+    /**\n+     * Sets the consistency level required for the request. The effective consistency level\n+     * can only be reduce for read/query requests. So when the Account's default consistency level\n+     * is for example Session you can specify on a request-by-request level for individual requests\n+     * that Eventual consistency is sufficient - which could reduce the latency and RU charges for this\n+     * request but will not guarantee session consistency (read-your-own-write) anymore\n+     *\n+     * @param consistencyLevel the consistency level.\n+     * @return the CosmosItemRequestOptions.\n+     */\n+    public CosmosQueryRequestOptions setConsistencyLevel(ConsistencyLevel consistencyLevel) {", "originalCommit": "1751dfcd48c13335b4147e1f646ca32ae578c0a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MjA4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502472082", "bodyText": "We have always been supporting it in .Net - In Java V4 I made it public for read/query where it is most commonly used my customers", "author": "FabianMeiswinkel", "createdAt": "2020-10-09T14:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MjkzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502472936", "body": "What are session-container semantics with request level overrides? \r\n\r\nex: With eventual and session SxS\r\n- Is session expected to progress even with eventual requests context? ", "bodyText": "What are session-container semantics with request level overrides?\nex: With eventual and session SxS\n\nIs session expected to progress even with eventual requests context?", "bodyHTML": "<p dir=\"auto\">What are session-container semantics with request level overrides?</p>\n<p dir=\"auto\">ex: With eventual and session SxS</p>\n<ul dir=\"auto\">\n<li>Is session expected to progress even with eventual requests context?</li>\n</ul>", "author": "kirankumarkolli", "createdAt": "2020-10-09T14:38:08Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "diffHunk": "@@ -131,11 +131,23 @@ public CosmosQueryRequestOptions getFeedOptions(String continuationToken, Intege\n         Map<String, String> requestHeaders = new HashMap<>();\n \n         ConsistencyLevel defaultConsistencyLevel = this.client.getDefaultConsistencyLevelAsync();\n-        ConsistencyLevel desiredConsistencyLevel = this.client.getDesiredConsistencyLevelAsync();\n+        ConsistencyLevel desiredConsistencyLevel = cosmosQueryRequestOptions.getConsistencyLevel() != null ?\n+            cosmosQueryRequestOptions.getConsistencyLevel():\n+            this.client.getDesiredConsistencyLevelAsync();\n+\n+        boolean sessionTokenApplicable =", "originalCommit": "1751dfcd48c13335b4147e1f646ca32ae578c0a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MjEwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502562104", "bodyText": "It is independent of the change here. Backend ignores the SessionToken when we request Eventual Consistency on a request level. The response still contains a session token - even when request is for eventual without session token.  We update the SessionContainer with the session token from the response (if it is newer). So session would progress even for individual eventual consistency requests.", "author": "FabianMeiswinkel", "createdAt": "2020-10-09T17:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ3MjkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzk1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502547959", "body": "Should it ignore case?", "bodyText": "Should it ignore case?", "bodyHTML": "<p dir=\"auto\">Should it ignore case?</p>", "author": "j82w", "createdAt": "2020-10-09T16:36:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +431,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqual(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||", "originalCommit": "1751dfcd48c13335b4147e1f646ca32ae578c0a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2MzQ0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502563449", "bodyText": "Yes - thanks - good catch .", "author": "FabianMeiswinkel", "createdAt": "2020-10-09T17:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2OTU3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502569573", "bodyText": "Fixed in next iteration", "author": "FabianMeiswinkel", "createdAt": "2020-10-09T17:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Nzk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MDIyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502550228", "body": "1. Should execute stored procedure be included?\r\n2. What about get query plan? That never needs the session token.", "bodyText": "Should execute stored procedure be included?\nWhat about get query plan? That never needs the session token.", "bodyHTML": "<ol dir=\"auto\">\n<li>Should execute stored procedure be included?</li>\n<li>What about get query plan? That never needs the session token.</li>\n</ol>", "author": "j82w", "createdAt": "2020-10-09T16:40:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +431,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqual(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||\n+                (this.defaultConsistencyLevel == ConsistencyLevel.SESSION &&\n+                    // skip applying the session token when Eventual Consistency is explicitly requested\n+                    // on request-level for data plane operations.\n+                    // The session token is ignored on teh backend/gateway in this case anyway\n+                    // and the session token can be rather large (even run in the 16 KB header length problem\n+                    // on the gateway - so not worth sending when not needed\n+                    (!request.isReadOnlyRequest() ||\n+                        request.getResourceType() != ResourceType.Document ||", "originalCommit": "1751dfcd48c13335b4147e1f646ca32ae578c0a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NDA4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502564087", "bodyText": "Query plan - good point. Stored Procedure I would not want to touch right now. Semantics aren't clear enough for me - and I am not aware of a single scenario where customers would want to adjust consistency level for SPs individually.", "author": "FabianMeiswinkel", "createdAt": "2020-10-09T17:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MDIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2OTQwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502569404", "bodyText": "Fixed in next iteration", "author": "FabianMeiswinkel", "createdAt": "2020-10-09T17:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MDIyOA=="}], "type": "inlineReview"}, {"oid": "92287756336c91b4a1bce18b62a138acaf3cd103", "url": "https://github.com/Azure/azure-sdk-for-java/commit/92287756336c91b4a1bce18b62a138acaf3cd103", "message": "Addressing code review feedback", "committedDate": "2020-10-09T17:20:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NTU5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502585599", "body": "they way query plan is constructed it will never have session token, so this is No-Op. please see `QueryPlanRetriever`. but I guess it doesn't hurt to be safe.", "bodyText": "they way query plan is constructed it will never have session token, so this is No-Op. please see QueryPlanRetriever. but I guess it doesn't hurt to be safe.", "bodyHTML": "<p dir=\"auto\">they way query plan is constructed it will never have session token, so this is No-Op. please see <code>QueryPlanRetriever</code>. but I guess it doesn't hurt to be safe.</p>", "author": "moderakh", "createdAt": "2020-10-09T17:50:31Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -114,6 +114,11 @@ public RxGatewayStoreModel(\n     private Mono<RxDocumentServiceResponse> query(RxDocumentServiceRequest request) {\n         if(request.getOperationType() != OperationType.QueryPlan) {\n             request.getHeaders().put(HttpConstants.HttpHeaders.IS_QUERY, \"true\");\n+        } else {\n+            // Session token is irrelevant for query plan\n+            // Gateway can hit header limitation issues quickly so removing it here\n+            // to protect accounts with large number of partitions (big session tokens)\n+            request.getHeaders().remove(HttpConstants.HttpHeaders.SESSION_TOKEN);", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzOTg5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503539894", "bodyText": "Removed the code", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NTU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NjYxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502586619", "body": "the code which sets the consistency level in headers, uses `ConsistencyLeve.toString()`. hence the casing will be the same. ignore-case equality is not needed.", "bodyText": "the code which sets the consistency level in headers, uses ConsistencyLeve.toString(). hence the casing will be the same. ignore-case equality is not needed.", "bodyHTML": "<p dir=\"auto\">the code which sets the consistency level in headers, uses <code>ConsistencyLeve.toString()</code>. hence the casing will be the same. ignore-case equality is not needed.</p>", "author": "moderakh", "createdAt": "2020-10-09T17:52:27Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +438,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqualIgnoreCase(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MTAwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503541000", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NjYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4Njk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502586941", "body": "the code which sets the consistency level in headers, uses `ConsistencyLeve.toString()`. hence the casing will be the same. ignore-case equality is not needed.", "bodyText": "the code which sets the consistency level in headers, uses ConsistencyLeve.toString(). hence the casing will be the same. ignore-case equality is not needed.", "bodyHTML": "<p dir=\"auto\">the code which sets the consistency level in headers, uses <code>ConsistencyLeve.toString()</code>. hence the casing will be the same. ignore-case equality is not needed.</p>", "author": "moderakh", "createdAt": "2020-10-09T17:53:08Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -431,21 +438,28 @@ private void applySessionToken(RxDocumentServiceRequest request) {\n         Map<String, String> headers = request.getHeaders();\n         Objects.requireNonNull(headers, \"RxDocumentServiceRequest::headers is required and cannot be null\");\n \n+        String requestConsistencyLevel = headers.get(HttpConstants.HttpHeaders.CONSISTENCY_LEVEL);\n+\n+        boolean sessionTokenApplicable =\n+            Strings.areEqualIgnoreCase(requestConsistencyLevel, ConsistencyLevel.SESSION.toString()) ||\n+                (this.defaultConsistencyLevel == ConsistencyLevel.SESSION &&\n+                    // skip applying the session token when Eventual Consistency is explicitly requested\n+                    // on request-level for data plane operations.\n+                    // The session token is ignored on teh backend/gateway in this case anyway\n+                    // and the session token can be rather large (even run in the 16 KB header length problem\n+                    // on the gateway - so not worth sending when not needed\n+                    (!request.isReadOnlyRequest() ||\n+                        request.getResourceType() != ResourceType.Document ||\n+                        !Strings.areEqualIgnoreCase(requestConsistencyLevel, ConsistencyLevel.EVENTUAL.toString())));", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MDcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503540718", "bodyText": "ACK", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4Njk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MTMzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502591334", "body": "If the account default consistency is session, client default consistency is set to be eventual, but for an individual request consistency is set to session, we will have a problem.\r\n\r\nBy default in java v4 we don't capture session tokens for non session consistency.\r\nwe should document that if the user wants to use this per request option, the user has to enable per request session capturing on the cosmos-client-builder and we should make the method for that public.\r\n\r\nsee `CosmosClientBuilder:sessionCapturingOverrideEnabled()`\r\n\r\n`CosmosItemRequestOption.setConsistencyLevel()` and `CosmosClientBuilder:sessionCapturingOverrideEnabled()` should go hand in hand.", "bodyText": "If the account default consistency is session, client default consistency is set to be eventual, but for an individual request consistency is set to session, we will have a problem.\nBy default in java v4 we don't capture session tokens for non session consistency.\nwe should document that if the user wants to use this per request option, the user has to enable per request session capturing on the cosmos-client-builder and we should make the method for that public.\nsee CosmosClientBuilder:sessionCapturingOverrideEnabled()\nCosmosItemRequestOption.setConsistencyLevel() and CosmosClientBuilder:sessionCapturingOverrideEnabled() should go hand in hand.", "bodyHTML": "<p dir=\"auto\">If the account default consistency is session, client default consistency is set to be eventual, but for an individual request consistency is set to session, we will have a problem.</p>\n<p dir=\"auto\">By default in java v4 we don't capture session tokens for non session consistency.<br>\nwe should document that if the user wants to use this per request option, the user has to enable per request session capturing on the cosmos-client-builder and we should make the method for that public.</p>\n<p dir=\"auto\">see <code>CosmosClientBuilder:sessionCapturingOverrideEnabled()</code></p>\n<p dir=\"auto\"><code>CosmosItemRequestOption.setConsistencyLevel()</code> and <code>CosmosClientBuilder:sessionCapturingOverrideEnabled()</code> should go hand in hand.</p>", "author": "moderakh", "createdAt": "2020-10-09T18:01:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemRequestOptions.java", "diffHunk": "@@ -101,17 +101,21 @@ public CosmosItemRequestOptions setIfNoneMatchETag(String ifNoneMatchETag) {\n      * @return the consistency level.\n      */\n \n-    ConsistencyLevel getConsistencyLevel() {\n+    public ConsistencyLevel getConsistencyLevel() {\n         return consistencyLevel;\n     }\n \n     /**\n-     * Sets the consistency level required for the request.\n+     * Sets the consistency level required for the request. The effective consistency level\n+     * can only be reduce for read/query requests. So when the Account's default consistency level\n+     * is for example Session you can specify on a request-by-request level for individual requests\n+     * that Eventual consistency is sufficient - which could reduce the latency and RU charges for this\n+     * request but will not guarantee session consistency (read-your-own-write) anymore", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MDkxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503550917", "bodyText": "Nice catch - thanks. Added documentation and made sessionCapturingOverrideEnabled public", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MTMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502592486", "body": "```suggestion\r\n        logger.info(\"REQUEST DIAGNOSTICS: {}\" readResponse1.getDiagnostics());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.println(\"REQUEST DIAGNOSTICS: \" + readResponse1.getDiagnostics().toString());\n          \n          \n            \n                    logger.info(\"REQUEST DIAGNOSTICS: {}\" readResponse1.getDiagnostics());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first\">System</span><span class=\"pl-k x\">.</span><span class=\"x\">out</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">println</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>REQUEST DIAGNOSTICS: <span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span>readResponse1<span class=\"pl-k\">.</span>getDiagnostics<span class=\"x x-first\">()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toString</span>());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"x x-first\">logger</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">info</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>REQUEST DIAGNOSTICS: <span class=\"x x-first\">{}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\"> </span>readResponse1<span class=\"pl-k\">.</span>getDiagnostics());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "moderakh", "createdAt": "2020-10-09T18:04:24Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -101,6 +102,30 @@ public void readItem() throws Exception {\n \n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readItemWithEventualConsistency() throws Exception {\n+\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+\n+        String idAndPkValue = UUID.randomUUID().toString();\n+        ObjectNode properties = getDocumentDefinition(idAndPkValue, idAndPkValue);\n+        CosmosItemResponse<ObjectNode> itemResponse = container.createItem(properties);\n+\n+        CosmosItemResponse<ObjectNode> readResponse1 = container.readItem(\n+            idAndPkValue,\n+            new PartitionKey(idAndPkValue),\n+            new CosmosItemRequestOptions()\n+                // generate an invalid session token large enough to cause an error in Gateway\n+                // due to header being too long\n+                .setSessionToken(StringUtils.repeat(\"SomeManualInvalidSessionToken\", 2000))\n+                .setConsistencyLevel(ConsistencyLevel.EVENTUAL),\n+            ObjectNode.class);\n+\n+        System.out.println(\"REQUEST DIAGNOSTICS: \" + readResponse1.getDiagnostics().toString());", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MjY0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503542646", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjY2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502592660", "body": "please remove.", "bodyText": "please remove.", "bodyHTML": "<p dir=\"auto\">please remove.</p>", "author": "moderakh", "createdAt": "2020-10-09T18:04:49Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -175,6 +199,41 @@ public void queryItems() throws Exception{\n         assertThat(feedResponseIterator3.iterator().hasNext()).isTrue();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void queryItemsWithEventualConsistency() throws Exception{\n+\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+\n+        String idAndPkValue = UUID.randomUUID().toString();\n+        ObjectNode properties = getDocumentDefinition(idAndPkValue, idAndPkValue);\n+        CosmosItemResponse<ObjectNode> itemResponse = container.createItem(properties);\n+\n+        String query = String.format(\"SELECT * from c where c.id = '%s'\", idAndPkValue);\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions =\n+            new CosmosQueryRequestOptions()\n+                // generate an invalid session token large enough to cause an error in Gateway\n+                // due to header being too long\n+                .setSessionToken(StringUtils.repeat(\"SomeManualInvalidSessionToken\", 2000))\n+                .setConsistencyLevel(ConsistencyLevel.EVENTUAL);\n+\n+        CosmosPagedIterable<ObjectNode> feedResponseIterator1 =\n+            container.queryItems(query, cosmosQueryRequestOptions, ObjectNode.class);\n+        feedResponseIterator1.handle((r) -> System.out.println(\"Query RequestDiagnostics: \" + r.getCosmosDiagnostics().toString()));\n+        System.out.println(\"hello world\");", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0Mjc2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503542762", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5MjY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mjc2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r502592768", "body": "ditto on the System.out.println -> logger", "bodyText": "ditto on the System.out.println -> logger", "bodyHTML": "<p dir=\"auto\">ditto on the System.out.println -&gt; logger</p>", "author": "moderakh", "createdAt": "2020-10-09T18:05:00Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemTest.java", "diffHunk": "@@ -175,6 +199,41 @@ public void queryItems() throws Exception{\n         assertThat(feedResponseIterator3.iterator().hasNext()).isTrue();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void queryItemsWithEventualConsistency() throws Exception{\n+\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+\n+        String idAndPkValue = UUID.randomUUID().toString();\n+        ObjectNode properties = getDocumentDefinition(idAndPkValue, idAndPkValue);\n+        CosmosItemResponse<ObjectNode> itemResponse = container.createItem(properties);\n+\n+        String query = String.format(\"SELECT * from c where c.id = '%s'\", idAndPkValue);\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions =\n+            new CosmosQueryRequestOptions()\n+                // generate an invalid session token large enough to cause an error in Gateway\n+                // due to header being too long\n+                .setSessionToken(StringUtils.repeat(\"SomeManualInvalidSessionToken\", 2000))\n+                .setConsistencyLevel(ConsistencyLevel.EVENTUAL);\n+\n+        CosmosPagedIterable<ObjectNode> feedResponseIterator1 =\n+            container.queryItems(query, cosmosQueryRequestOptions, ObjectNode.class);\n+        feedResponseIterator1.handle((r) -> System.out.println(\"Query RequestDiagnostics: \" + r.getCosmosDiagnostics().toString()));\n+        System.out.println(\"hello world\");\n+\n+        // Very basic validation\n+        assertThat(feedResponseIterator1.iterator().hasNext()).isTrue();\n+        assertThat(feedResponseIterator1.stream().count() == 1);\n+\n+        SqlQuerySpec querySpec = new SqlQuerySpec(query);\n+        CosmosPagedIterable<ObjectNode> feedResponseIterator3 =\n+            container.queryItems(querySpec, cosmosQueryRequestOptions, ObjectNode.class);\n+        feedResponseIterator3.handle((r) -> System.out.println(\"Query RequestDiagnostics: \" + r.getCosmosDiagnostics().toString()));", "originalCommit": "92287756336c91b4a1bce18b62a138acaf3cd103", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0Mjk3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503542973", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-10-12T21:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mjc2OA=="}], "type": "inlineReview"}, {"oid": "e72e47809bd90cab4fad22b2a37d7ca5b945d7ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e72e47809bd90cab4fad22b2a37d7ca5b945d7ee", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into users/fabianm/MSCIInvestigation", "committedDate": "2020-10-12T21:23:06Z", "type": "commit"}, {"oid": "a524a36752f7f0e27215241fcc49deee29224817", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a524a36752f7f0e27215241fcc49deee29224817", "message": "Addressing code review comments.", "committedDate": "2020-10-12T21:48:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjQ5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16111#discussion_r503582493", "body": "`CosmosClientBuilder:sessionCapturingOverrideEnabled(true)` would only be needed when you set the request consistency to Session.\r\n\r\nIt is not needed if you set the request consistency to Strong nor for Bounded-Staleness.\r\n\r\n", "bodyText": "CosmosClientBuilder:sessionCapturingOverrideEnabled(true) would only be needed when you set the request consistency to Session.\nIt is not needed if you set the request consistency to Strong nor for Bounded-Staleness.", "bodyHTML": "<p dir=\"auto\"><code>CosmosClientBuilder:sessionCapturingOverrideEnabled(true)</code> would only be needed when you set the request consistency to Session.</p>\n<p dir=\"auto\">It is not needed if you set the request consistency to Strong nor for Bounded-Staleness.</p>", "author": "moderakh", "createdAt": "2020-10-12T23:24:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosItemRequestOptions.java", "diffHunk": "@@ -100,18 +100,25 @@ public CosmosItemRequestOptions setIfNoneMatchETag(String ifNoneMatchETag) {\n      *\n      * @return the consistency level.\n      */\n-\n-    ConsistencyLevel getConsistencyLevel() {\n+    public ConsistencyLevel getConsistencyLevel() {\n         return consistencyLevel;\n     }\n \n     /**\n-     * Sets the consistency level required for the request.\n+     * Sets the consistency level required for the request. The effective consistency level\n+     * can only be reduce for read/query requests. So when the Account's default consistency level\n+     * is for example Session you can specify on a request-by-request level for individual requests\n+     * that Eventual consistency is sufficient - which could reduce the latency and RU charges for this\n+     * request but will not guarantee session consistency (read-your-own-write) anymore\n+     * NOTE: If the consistency-level set on a request level here is higher than the default consistency\n+     * level set when constructing the CosmosClient instance via CosmosClientBuilder.consistencyLevel\n+     * session token capturing also needs to be enabled by calling\n+     * CosmosClientBuilder:sessionCapturingOverrideEnabled(true).", "originalCommit": "a524a36752f7f0e27215241fcc49deee29224817", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e4633d1e9af42b0783c632ee6eaabc2228326c7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e4633d1e9af42b0783c632ee6eaabc2228326c7", "message": "Fixing comment", "committedDate": "2020-10-12T23:40:50Z", "type": "commit"}]}