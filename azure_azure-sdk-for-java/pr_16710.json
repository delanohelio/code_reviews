{"pr_number": 16710, "pr_title": "API ServiceBusErrorSource to  represent source of error", "pr_author": "hemanttanwar", "pr_createdAt": "2020-10-22T23:44:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16710", "timeline": [{"oid": "b0c8562544e3b80cb6aad92098f76b345972165c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0c8562544e3b80cb6aad92098f76b345972165c", "message": "Designing ErrorSource options", "committedDate": "2020-10-22T18:20:14Z", "type": "commit"}, {"oid": "b9a83efe1d9d9b84205979e5374738782c2d2a0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9a83efe1d9d9b84205979e5374738782c2d2a0c", "message": "Merge branch 'master' into sb-t2-errorsource-api", "committedDate": "2020-10-22T18:21:12Z", "type": "commit"}, {"oid": "aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "message": "Error source structure.", "committedDate": "2020-10-22T23:40:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r511191523", "body": "Why do need this?", "bodyText": "Why do need this?", "bodyHTML": "<p dir=\"auto\">Why do need this?</p>", "author": "conniey", "createdAt": "2020-10-23T23:07:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java", "diffHunk": "@@ -53,6 +79,27 @@ public Throwable getThrowable() {\n         return error;\n     }\n \n+    /**\n+     * Gets the {@link ServiceBusErrorSource} of the error where it occurred.\n+     *\n+     * @return The {@link ServiceBusErrorSource} of the error or message.\n+     */\n+    public ServiceBusErrorSource getErrorSource() {\n+        return errorSource;\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} of the error where it occurred.\n+     *\n+     * @param errorSource {@link ServiceBusErrorSource} where error occurred.\n+     *\n+     * @return The updated {@link ServiceBusReceivedMessageContext} of the error.\n+     */\n+    ServiceBusReceivedMessageContext setErrorSource(ServiceBusErrorSource errorSource) {", "originalCommit": "aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTU1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r511191555", "body": "Why do need this?", "bodyText": "Why do need this?", "bodyHTML": "<p dir=\"auto\">Why do need this?</p>", "author": "conniey", "createdAt": "2020-10-23T23:07:31Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java", "diffHunk": "@@ -35,6 +36,31 @@\n         this.message = null;\n     }\n \n+    /**\n+     * Creates an instance where an error occurred such as session-lock-lost.\n+     *\n+     * @param sessionId Session id that the error occurred in.\n+     * @param error AMQP exception that occurred in session.\n+     * @param errorSource the source of the error.\n+     */\n+    ServiceBusReceivedMessageContext(String sessionId, Throwable error, ServiceBusErrorSource errorSource) {\n+        this(sessionId,error);\n+        this.errorSource = Objects.requireNonNull(errorSource, \"'errorSource' cannot be null.\");\n+    }\n+\n+    /**\n+     * Creates an instance where an error occurred such as session-lock-lost.\n+     *\n+     * @param error AMQP exception that occurred in session.\n+     * @param errorSource the source of the error.\n+     */\n+    ServiceBusReceivedMessageContext(Throwable error, ServiceBusErrorSource errorSource) {", "originalCommit": "aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTY0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r511191646", "bodyText": "We can just use the maximal overload because this is internal.\nAlso, optional arguments should be at the end, like sessionId.", "author": "conniey", "createdAt": "2020-10-23T23:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNzE4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r512317188", "bodyText": "moved this to ServiceBusException as we discussed.", "author": "hemanttanwar", "createdAt": "2020-10-26T22:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTU1NQ=="}], "type": "inlineReview"}, {"oid": "28fea7b588c690eeecd97f064f2f64aa426136ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28fea7b588c690eeecd97f064f2f64aa426136ed", "message": "Adding error handling for Error source", "committedDate": "2020-10-26T22:53:28Z", "type": "commit"}, {"oid": "d01190a50674acfb431452c33ad261596a6e538b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d01190a50674acfb431452c33ad261596a6e538b", "message": "Adding error handling for Error source", "committedDate": "2020-10-26T22:56:19Z", "type": "commit"}, {"oid": "1ec13b505ab58db7d139949e3bc5ff70f1a0b4cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ec13b505ab58db7d139949e3bc5ff70f1a0b4cc", "message": "Adding error handling for Error source", "committedDate": "2020-10-26T23:01:03Z", "type": "commit"}, {"oid": "bd05bfe86aa5b0fef94ce357325eebff4c0905d6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd05bfe86aa5b0fef94ce357325eebff4c0905d6", "message": "Removed error source from SBM context", "committedDate": "2020-10-26T23:02:17Z", "type": "commit"}, {"oid": "3ce0cb37c6fab0872c2e6ed321ab21fff197a4b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ce0cb37c6fab0872c2e6ed321ab21fff197a4b3", "message": "Removed unwanted changes", "committedDate": "2020-10-26T23:04:42Z", "type": "commit"}, {"oid": "36106a31aec946eaab35f7dbd5121f920e4131b9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36106a31aec946eaab35f7dbd5121f920e4131b9", "message": "Added  test case for sending and receiving the messages.", "committedDate": "2020-10-27T08:08:10Z", "type": "commit"}, {"oid": "1d498aed3217a1a534419cfd998c4e91eabab985", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d498aed3217a1a534419cfd998c4e91eabab985", "message": "merge master into branch", "committedDate": "2020-10-27T08:20:06Z", "type": "commit"}, {"oid": "46f7d2c27d235a47982b3e93367f05fea7788bca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/46f7d2c27d235a47982b3e93367f05fea7788bca", "message": "Added java doc", "committedDate": "2020-10-27T08:24:38Z", "type": "commit"}, {"oid": "e8d7e1fec2179577cf39f133b3a451dbe1a5e05a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8d7e1fec2179577cf39f133b3a451dbe1a5e05a", "message": "updated module info", "committedDate": "2020-10-27T18:08:21Z", "type": "commit"}, {"oid": "cbc6f554059c8434a6ef29b40e6986a9d729d08c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbc6f554059c8434a6ef29b40e6986a9d729d08c", "message": "updated code to pass error source in updateDisposition", "committedDate": "2020-10-27T18:15:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMDYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r512930601", "body": "Needed for test `ServiceBusManagementSerializerTest.deserializeNamespace`\r\naccessible: module com.azure.messaging.servicebus does not \"exports com.azure.messaging.servicebus.implementation.models\" to module com.fasterxml.jackson.databind", "bodyText": "Needed for test ServiceBusManagementSerializerTest.deserializeNamespace\naccessible: module com.azure.messaging.servicebus does not \"exports com.azure.messaging.servicebus.implementation.models\" to module com.fasterxml.jackson.databind", "bodyHTML": "<p dir=\"auto\">Needed for test <code>ServiceBusManagementSerializerTest.deserializeNamespace</code><br>\naccessible: module com.azure.messaging.servicebus does not \"exports com.azure.messaging.servicebus.implementation.models\" to module com.fasterxml.jackson.databind</p>", "author": "hemanttanwar", "createdAt": "2020-10-27T18:24:58Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/module-info.java", "diffHunk": "@@ -9,12 +9,8 @@\n     exports com.azure.messaging.servicebus.administration.models;\n     exports com.azure.messaging.servicebus.models;\n \n-    opens com.azure.messaging.servicebus;\n-    opens com.azure.messaging.servicebus.administration;\n-    opens com.azure.messaging.servicebus.administration.models;\n-    opens com.azure.messaging.servicebus.implementation;\n-    opens com.azure.messaging.servicebus.implementation.models;\n-    opens com.azure.messaging.servicebus.models;\n+    opens com.azure.messaging.servicebus.administration.models to com.fasterxml.jackson.databind;\n+    opens com.azure.messaging.servicebus.implementation.models to com.fasterxml.jackson.databind;", "originalCommit": "cbc6f554059c8434a6ef29b40e6986a9d729d08c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32aae8d553d40351497524d332e28674d7176787", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32aae8d553d40351497524d332e28674d7176787", "message": "module info changes will be in separate PR", "committedDate": "2020-10-27T19:14:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MjE5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513072197", "body": "Why do we need the error source parameter? It can be inferred from the Disposition status.", "bodyText": "Why do we need the error source parameter? It can be inferred from the Disposition status.", "bodyHTML": "<p dir=\"auto\">Why do we need the error source parameter? It can be inferred from the Disposition status.</p>", "author": "conniey", "createdAt": "2020-10-27T22:32:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1008,8 +1015,21 @@ private boolean isManagementToken(String lockToken) {\n \n     private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n+        ServiceBusTransactionContext transactionContext, ServiceBusErrorSource errorSource) {", "originalCommit": "32aae8d553d40351497524d332e28674d7176787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MjM5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513072397", "body": "I don't understand why we created a function here. The method itself is already private.", "bodyText": "I don't understand why we created a function here. The method itself is already private.", "bodyHTML": "<p dir=\"auto\">I don't understand why we created a function here. The method itself is already private.</p>", "author": "conniey", "createdAt": "2020-10-27T22:32:44Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1008,8 +1015,21 @@ private boolean isManagementToken(String lockToken) {\n \n     private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n+        ServiceBusTransactionContext transactionContext, ServiceBusErrorSource errorSource) {\n+        return updateDispositionInternal(message, dispositionStatus, deadLetterReason, deadLetterErrorDescription,\n+            propertiesToModify, transactionContext)\n+            .onErrorMap(throwable -> {\n+                if (throwable instanceof AmqpException) {\n+                    return new ServiceBusException((AmqpException) throwable, errorSource);\n+                }\n+                return throwable;\n \n+            });\n+    }\n+\n+    private Mono<Void> updateDispositionInternal(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,", "originalCommit": "32aae8d553d40351497524d332e28674d7176787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Mjc0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513072749", "body": "This mapping logic is in many places. It would be better to have a static method that this calls into which maps a throwable into the corresponding ServiceBusErrorSource.", "bodyText": "This mapping logic is in many places. It would be better to have a static method that this calls into which maps a throwable into the corresponding ServiceBusErrorSource.", "bodyHTML": "<p dir=\"auto\">This mapping logic is in many places. It would be better to have a static method that this calls into which maps a throwable into the corresponding ServiceBusErrorSource.</p>", "author": "conniey", "createdAt": "2020-10-27T22:33:45Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -503,6 +503,12 @@ public void close() {\n         return createMessageBatch().flatMap(messageBatch -> {\n             messages.forEach(message -> messageBatch.tryAddMessage(message));\n             return sendInternal(messageBatch, transaction);\n+        }).onErrorMap(throwable -> {", "originalCommit": "32aae8d553d40351497524d332e28674d7176787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NTc1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513255752", "bodyText": "Moved this into same class for reuse. I did not wanted to introduce a utility classes just for this.", "author": "hemanttanwar", "createdAt": "2020-10-28T08:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Mjc0OQ=="}], "type": "inlineReview"}, {"oid": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "message": "Updated based on review comments.", "committedDate": "2020-10-28T08:22:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNjIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513706223", "body": "Are we using this exception for the sender client too?", "bodyText": "Are we using this exception for the sender client too?", "bodyHTML": "<p dir=\"auto\">Are we using this exception for the sender client too?</p>", "author": "srnagar", "createdAt": "2020-10-28T19:28:13Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.\n+ */\n+public enum ServiceBusErrorSource {\n+    /** Error while sending the message(s).*/\n+    SEND,", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMzEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513723129", "bodyText": "I confirmed it from .Net and they are not doing for send, so I am also removing it. This is only needed for processor.", "author": "hemanttanwar", "createdAt": "2020-10-28T19:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNjIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNzMxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513707313", "body": "We need an enum for user code. Also, this must be ExpandableStringEnum so that we can add more sources later.", "bodyText": "We need an enum for user code. Also, this must be ExpandableStringEnum so that we can add more sources later.", "bodyHTML": "<p dir=\"auto\">We need an enum for user code. Also, this must be ExpandableStringEnum so that we can add more sources later.</p>", "author": "srnagar", "createdAt": "2020-10-28T19:30:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.\n+ */\n+public enum ServiceBusErrorSource {", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwODIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513708211", "body": "There's an administration aspect to SB as well and we will want to differentiate between an exception coming from the HTTP admin client vs the exception coming from AMQP. So, we should consider naming this exception accordingly.", "bodyText": "There's an administration aspect to SB as well and we will want to differentiate between an exception coming from the HTTP admin client vs the exception coming from AMQP. So, we should consider naming this exception accordingly.", "bodyHTML": "<p dir=\"auto\">There's an administration aspect to SB as well and we will want to differentiate between an exception coming from the HTTP admin client vs the exception coming from AMQP. So, we should consider naming this exception accordingly.</p>", "author": "srnagar", "createdAt": "2020-10-28T19:31:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has addition properties. You can {@link ServiceBusErrorSource} to\n+ * determine source of error.\n+ *\n+ * @see ServiceBusErrorSource\n+ */\n+public class ServiceBusException extends AmqpException {", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NzE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513767144", "bodyText": "ServiceBusAmqpException ? : Putting  Amqp   in class name, is telling normal user complexity of protocol which they only need to know if they are dealing with amqp message. I still think it will be fine with ServiceBusException\nServiceBusAdministrationException  could be another name for admin, when we need to do it.", "author": "hemanttanwar", "createdAt": "2020-10-28T21:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1OTQ1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513859450", "bodyText": "Renamed.", "author": "hemanttanwar", "createdAt": "2020-10-29T01:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwODIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513712944", "body": "Don't need to throw another exception here. If the `dispositionStatus` is unknown, we should just mark that as unknown and use that as the source. ", "bodyText": "Don't need to throw another exception here. If the dispositionStatus is unknown, we should just mark that as unknown and use that as the source.", "bodyHTML": "<p dir=\"auto\">Don't need to throw another exception here. If the <code>dispositionStatus</code> is unknown, we should just mark that as unknown and use that as the source.</p>", "author": "srnagar", "createdAt": "2020-10-28T19:40:42Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1060,20 +1068,49 @@ private boolean isManagementToken(String lockToken) {\n                     logger.info(\"Could not perform on session manger. Performing on management node.\");\n                     return performOnManagement;\n                 });\n-        }\n-\n-        final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n-        if (isManagementToken(lockToken) || existingConsumer == null) {\n-            return performOnManagement;\n         } else {\n-            return existingConsumer.updateDisposition(lockToken, dispositionStatus, deadLetterReason,\n-                deadLetterErrorDescription, propertiesToModify, transactionContext)\n-                .then(Mono.fromRunnable(() -> {\n-                    logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n-                        entityPath, dispositionStatus, lockToken);\n-                    renewalContainer.remove(lockToken);\n-                }));\n+            final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n+            if (isManagementToken(lockToken) || existingConsumer == null) {\n+                updateDispositionOperation = performOnManagement;\n+            } else {\n+                updateDispositionOperation = existingConsumer.updateDisposition(lockToken, dispositionStatus,\n+                    deadLetterReason, deadLetterErrorDescription, propertiesToModify, transactionContext)\n+                    .then(Mono.fromRunnable(() -> {\n+                        logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n+                            entityPath, dispositionStatus, lockToken);\n+                        renewalContainer.remove(lockToken);\n+                    }));\n+            }\n         }\n+        return updateDispositionOperation\n+            .onErrorMap(throwable -> {\n+                ServiceBusErrorSource errorSource;\n+                if (throwable instanceof AmqpException) {\n+                    switch (dispositionStatus) {\n+                        case COMPLETED:\n+                            errorSource = ServiceBusErrorSource.COMPLETE;\n+                            break;\n+                        case DEFERRED:\n+                            errorSource = ServiceBusErrorSource.DEFER;\n+                            break;\n+                        case SUSPENDED:\n+                            errorSource = ServiceBusErrorSource.DEAD_LETTER;\n+                            break;\n+                        case ABANDONED:\n+                            errorSource = ServiceBusErrorSource.ABANDONED;\n+                            break;\n+                        default:\n+                            throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "message": "changes based on review comments", "committedDate": "2020-10-28T22:05:25Z", "type": "commit"}, {"oid": "fce6f5561b3a457173ad95f513a8301e1a031925", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fce6f5561b3a457173ad95f513a8301e1a031925", "message": "changes based on review comments", "committedDate": "2020-10-28T22:18:05Z", "type": "commit"}, {"oid": "f84f896eeb164cc8ffd11107995cf80fc2efb16d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f84f896eeb164cc8ffd11107995cf80fc2efb16d", "message": "changes based on review comments", "committedDate": "2020-10-28T22:29:03Z", "type": "commit"}, {"oid": "2d004d8c6dafe3284970d87f3f870c9cca2f5774", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d004d8c6dafe3284970d87f3f870c9cca2f5774", "message": "Removed Error source from Sender as  dotnet is also not doing it", "committedDate": "2020-10-28T22:55:07Z", "type": "commit"}, {"oid": "5a52a8d0121a82903c8192ba08b719bedaccc8ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a52a8d0121a82903c8192ba08b719bedaccc8ca", "message": "Removed Error source from Sender as  dotnet is also not doing it", "committedDate": "2020-10-28T22:55:33Z", "type": "commit"}, {"oid": "578a0dde08dc04112e3a0bc39c5b560d86584f89", "url": "https://github.com/Azure/azure-sdk-for-java/commit/578a0dde08dc04112e3a0bc39c5b560d86584f89", "message": "added error source for renew lock", "committedDate": "2020-10-28T23:12:04Z", "type": "commit"}, {"oid": "eda86d168b8b7ffa854e7fd69413b8d5e8fa6381", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eda86d168b8b7ffa854e7fd69413b8d5e8fa6381", "message": "added error source for renew lock", "committedDate": "2020-10-28T23:12:59Z", "type": "commit"}, {"oid": "d24f339da759943673c96c4e77e9e9d05ef02013", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d24f339da759943673c96c4e77e9e9d05ef02013", "message": "added error source for renew lock", "committedDate": "2020-10-28T23:18:37Z", "type": "commit"}, {"oid": "6e3b5d8a95227bf23c24779efc79109c010aad70", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e3b5d8a95227bf23c24779efc79109c010aad70", "message": "added docs for unit test", "committedDate": "2020-10-28T23:21:15Z", "type": "commit"}, {"oid": "c90eb0ecff9e073f1fec4a1490728e425f4c1338", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c90eb0ecff9e073f1fec4a1490728e425f4c1338", "message": "Renamed Exception", "committedDate": "2020-10-29T01:27:14Z", "type": "commit"}, {"oid": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "message": "Renamed Exception", "committedDate": "2020-10-29T02:03:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyODk5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514028993", "body": "```suggestion\r\n * Defines {@link ServiceBusAmqpException} which has additional information about the operation that caused the error.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n          \n          \n            \n             * Defines {@link ServiceBusAmqpException} which has additional information about the operation that caused the error.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Defines</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">ServiceBusAmqpException</span>} which has <span class=\"x x-first\">addition properties. </span><span class=\"pl-smi x\">You</span><span class=\"x\"> can {</span><span class=\"pl-k x\">@link</span><span class=\"x\"> </span><span class=\"pl-smi x\">ServiceBusErrorSource</span><span class=\"x x-last\">} to</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Defines</span> {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">ServiceBusAmqpException</span>} which has <span class=\"x x-first x-last\">additional information about the operation that caused the error.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "srnagar", "createdAt": "2020-10-29T06:45:55Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+\n+/**\n+ * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyOTk0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514029942", "body": "Some of the operations may not be performed by the user. For e.g autocomplete, autorenew or even abandoning a message. ", "bodyText": "Some of the operations may not be performed by the user. For e.g autocomplete, autorenew or even abandoning a message.", "bodyHTML": "<p dir=\"auto\">Some of the operations may not be performed by the user. For e.g autocomplete, autorenew or even abandoning a message.</p>", "author": "srnagar", "createdAt": "2020-10-29T06:47:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMDUwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514030500", "body": "`ServiceBusAmqpException`", "bodyText": "ServiceBusAmqpException", "bodyHTML": "<p dir=\"auto\"><code>ServiceBusAmqpException</code></p>", "author": "srnagar", "createdAt": "2020-10-29T06:48:09Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1136,4 +1172,15 @@ private String getLinkName(String sessionId) {\n             return existing != null ? existing.getLinkName() : null;\n         }\n     }\n+\n+    /**\n+     * Map the error to ServiceBusException", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMDc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514030757", "body": "Make this final", "bodyText": "Make this final", "bodyHTML": "<p dir=\"auto\">Make this final</p>", "author": "srnagar", "createdAt": "2020-10-29T06:48:41Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+\n+/**\n+ * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n+ * determine source of error.\n+ *\n+ * @see ServiceBusErrorSource\n+ */\n+public class ServiceBusAmqpException extends AmqpException {", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMjgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514032818", "body": "We'll need error sources for session-related operations too.", "bodyText": "We'll need error sources for session-related operations too.", "bodyHTML": "<p dir=\"auto\">We'll need error sources for session-related operations too.</p>", "author": "srnagar", "createdAt": "2020-10-29T06:52:31Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.\n+ */\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n+\n+    private static final long serialVersionUID = -2819764417333954922L;\n+\n+    /** Error while abandoning the message.*/\n+    public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n+\n+    /** Error while completing the message.*/\n+    public static final ServiceBusErrorSource COMPLETE = fromString(\"COMPLETE\", ServiceBusErrorSource.class);\n+\n+    /** Error while deferring the message.*/\n+    public static final ServiceBusErrorSource DEFER = fromString(\"DEFER\", ServiceBusErrorSource.class);\n+\n+    /** Error while dead-lettering the message.*/\n+    public static final ServiceBusErrorSource DEAD_LETTER = fromString(\"DEAD_LETTER\",\n+        ServiceBusErrorSource.class);\n+\n+    /** Error while receiving the message(s).*/\n+    public static final ServiceBusErrorSource RECEIVE = fromString(\"RECEIVE\", ServiceBusErrorSource.class);\n+\n+    /** Error while renewing lock.*/\n+    public static final ServiceBusErrorSource RENEW_LOCK = fromString(\"RENEW_LOCK\", ServiceBusErrorSource.class);", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Njc5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514096796", "bodyText": "https://github.com/Azure/azure-sdk-for-net/blob/93739d8ef58c6a2d3d5263a043461a36481b270d/sdk/servicebus/Azure.Messaging.ServiceBus/api/Azure.Messaging.ServiceBus.netstandard2.0.cs#L109   Is this what  you want accept, close session ?", "author": "hemanttanwar", "createdAt": "2020-10-29T08:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMjgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzNDYyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514034626", "body": "```suggestion\r\n        final String lockToken = UUID.randomUUID().toString();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String lockToken1 = UUID.randomUUID().toString();\n          \n          \n            \n                    final String lockToken = UUID.randomUUID().toString();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">lockToken1</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">UUID</span><span class=\"pl-k\">.</span>randomUUID()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">lockToken</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">UUID</span><span class=\"pl-k\">.</span>randomUUID()<span class=\"pl-k\">.</span>toString();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "srnagar", "createdAt": "2020-10-29T06:55:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,135 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during message settlement.\n+     */\n+    @ParameterizedTest\n+    @MethodSource\n+    void errorSourceOnSettlement(DispositionStatus dispositionStatus, ServiceBusErrorSource expectedErrorSource,\n+        DeliveryStateType expectedDeliveryState) {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(amqpReceiveLink.updateDisposition(eq(lockToken1), argThat(e -> e.getType() == expectedDeliveryState)))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1)\n+            .flatMap(context -> {\n+                final Mono<Void> operation;\n+                switch (dispositionStatus) {\n+                    case DEFERRED:\n+                        operation = receiver.defer(receivedMessage);\n+                        break;\n+                    case ABANDONED:\n+                        operation = receiver.abandon(receivedMessage);\n+                        break;\n+                    case COMPLETED:\n+                        operation = receiver.complete(receivedMessage);\n+                        break;\n+                    case SUSPENDED:\n+                        operation = receiver.deadLetter(receivedMessage);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unrecognized operation: \" + dispositionStatus);\n+                }\n+                return operation;\n+            }))\n+            .then(() -> messageSink.next(message))\n+            .expectNext()\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(expectedErrorSource, actual);\n+                return true;\n+            });\n+\n+        verify(amqpReceiveLink).updateDisposition(eq(lockToken1), any(DeliveryState.class));\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during receiving of message.\n+     */\n+    @Test\n+    void errorSourceOnReceiveMessage() {\n+        final String lockToken1 = UUID.randomUUID().toString();", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzNDkyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514034923", "body": "Can we also have tests for error source `UNKNOWN`?", "bodyText": "Can we also have tests for error source UNKNOWN?", "bodyHTML": "<p dir=\"auto\">Can we also have tests for error source <code>UNKNOWN</code>?</p>", "author": "srnagar", "createdAt": "2020-10-29T06:56:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,135 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during message settlement.\n+     */\n+    @ParameterizedTest\n+    @MethodSource\n+    void errorSourceOnSettlement(DispositionStatus dispositionStatus, ServiceBusErrorSource expectedErrorSource,\n+        DeliveryStateType expectedDeliveryState) {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(amqpReceiveLink.updateDisposition(eq(lockToken1), argThat(e -> e.getType() == expectedDeliveryState)))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1)\n+            .flatMap(context -> {\n+                final Mono<Void> operation;\n+                switch (dispositionStatus) {\n+                    case DEFERRED:\n+                        operation = receiver.defer(receivedMessage);\n+                        break;\n+                    case ABANDONED:\n+                        operation = receiver.abandon(receivedMessage);\n+                        break;\n+                    case COMPLETED:\n+                        operation = receiver.complete(receivedMessage);\n+                        break;\n+                    case SUSPENDED:\n+                        operation = receiver.deadLetter(receivedMessage);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unrecognized operation: \" + dispositionStatus);\n+                }\n+                return operation;\n+            }))\n+            .then(() -> messageSink.next(message))\n+            .expectNext()\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(expectedErrorSource, actual);\n+                return true;\n+            });\n+\n+        verify(amqpReceiveLink).updateDisposition(eq(lockToken1), any(DeliveryState.class));\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during receiving of message.\n+     */\n+    @Test\n+    void errorSourceOnReceiveMessage() {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(connection.createReceiveLink(anyString(), anyString(), any(ReceiveMode.class), any(),\n+            any(MessagingEntityType.class))).thenReturn(Mono.error(new AmqpException(false, \"some receive link Error.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RECEIVE, actual);", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b61551fa0443e35d8147d39ed79c9370c8adddc8", "message": "review comments incorporated", "committedDate": "2020-10-29T09:02:44Z", "type": "commit"}, {"oid": "204fd28389bc8417768e1c35c0a33642a670239f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/204fd28389bc8417768e1c35c0a33642a670239f", "message": "Fixing checkstyle", "committedDate": "2020-10-29T15:29:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNDQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514424436", "body": "* This is going to mask an autocomplete/Renew exception. iirc, we pass it downstream. it would not be a receive error, it would be a complete error.\r\nThis should be different in that we check the exception type, if it's ServiceBusErrorSource already and if so, not map it.\r\n* Would be nice to have a test for this.", "bodyText": "This is going to mask an autocomplete/Renew exception. iirc, we pass it downstream. it would not be a receive error, it would be a complete error.\nThis should be different in that we check the exception type, if it's ServiceBusErrorSource already and if so, not map it.\nWould be nice to have a test for this.", "bodyHTML": "<ul dir=\"auto\">\n<li>This is going to mask an autocomplete/Renew exception. iirc, we pass it downstream. it would not be a receive error, it would be a complete error.<br>\nThis should be different in that we check the exception type, if it's ServiceBusErrorSource already and if so, not map it.</li>\n<li>Would be nice to have a test for this.</li>\n</ul>", "author": "conniey", "createdAt": "2020-10-29T17:07:07Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -611,7 +611,8 @@ public String getEntityPath() {\n             withAutoComplete = withAutoLockRenewal;\n         }\n \n-        return withAutoComplete;\n+        return withAutoComplete\n+            .onErrorMap(throwable -> mapError(throwable, ServiceBusErrorSource.RECEIVE));", "originalCommit": "204fd28389bc8417768e1c35c0a33642a670239f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyOTQwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514429402", "body": "verifyErrorSatisfies is the correct one. Same with the other ones.", "bodyText": "verifyErrorSatisfies is the correct one. Same with the other ones.", "bodyHTML": "<p dir=\"auto\">verifyErrorSatisfies is the correct one. Same with the other ones.</p>", "author": "conniey", "createdAt": "2020-10-29T17:14:18Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,135 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {", "originalCommit": "204fd28389bc8417768e1c35c0a33642a670239f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "message": "Incorporated  review comments", "committedDate": "2020-10-29T18:59:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514530310", "body": "Is there a reason we need to implement Serializable? Is this a thing? \ud83e\udd14  @JonathanGiles ", "bodyText": "Is there a reason we need to implement Serializable? Is this a thing? \ud83e\udd14  @JonathanGiles", "bodyHTML": "<p dir=\"auto\">Is there a reason we need to implement Serializable? Is this a thing? <g-emoji class=\"g-emoji\" alias=\"thinking\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f914.png\">\ud83e\udd14</g-emoji>  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/JonathanGiles/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JonathanGiles\">@JonathanGiles</a></p>", "author": "conniey", "createdAt": "2020-10-29T20:01:24Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represent the operation this sdk was performing when the error happened.\n+ */\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n+\n+    private static final long serialVersionUID = -2819764417333954922L;", "originalCommit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNTQwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514605401", "bodyText": "Connie is right - we shouldn't be making everything serializable by default.", "author": "JonathanGiles", "createdAt": "2020-10-29T22:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMjk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514622986", "bodyText": "We are getting this error in spotbug at build time.\n[ERROR] Class com.azure.messaging.servicebus.ServiceBusAmqpException defines non-transient non-serializable instance field errorSource [com.azure.messaging.servicebus.ServiceBusAmqpException] In ServiceBusAmqpException.java SE_BAD_FIELD", "author": "hemanttanwar", "createdAt": "2020-10-29T23:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY2NTI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514665285", "bodyText": "changed it to transient.", "author": "hemanttanwar", "createdAt": "2020-10-30T01:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMTY0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514531647", "body": "This can be condensed.\r\n```java\r\nif ((throwable instanceof ServiceBusAmqpException) || !(throwable instanceof AmqpException)) {\r\n    return throwable;\r\n}\r\n\r\nreturn new ServiceBusAmqpException((AmqpException) throwable, errorSource);\r\n````", "bodyText": "This can be condensed.\nif ((throwable instanceof ServiceBusAmqpException) || !(throwable instanceof AmqpException)) {\n    return throwable;\n}\n\nreturn new ServiceBusAmqpException((AmqpException) throwable, errorSource);", "bodyHTML": "<p dir=\"auto\">This can be condensed.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if ((throwable instanceof ServiceBusAmqpException) || !(throwable instanceof AmqpException)) {\n    return throwable;\n}\n\nreturn new ServiceBusAmqpException((AmqpException) throwable, errorSource);\"><pre><span class=\"pl-k\">if</span> ((throwable <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">ServiceBusAmqpException</span>) <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span>(throwable <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">AmqpException</span>)) {\n    <span class=\"pl-k\">return</span> throwable;\n}\n\n<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ServiceBusAmqpException</span>((<span class=\"pl-smi\">AmqpException</span>) throwable, errorSource);</pre></div>", "author": "conniey", "createdAt": "2020-10-29T20:03:07Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1136,4 +1172,19 @@ private String getLinkName(String sessionId) {\n             return existing != null ? existing.getLinkName() : null;\n         }\n     }\n+\n+    /**\n+     * Map the error to {@link ServiceBusAmqpException}\n+     */\n+    private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        if (throwable instanceof ServiceBusAmqpException) {", "originalCommit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzNDUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514534532", "body": "These should all be: verifyErrorSatisfies.  verifyErrorMatches should be taking a predicate. This predicate ALWAYS returns true because you've done assertions. So this should be a consumer. \r\nhttps://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.LastStep.html#verifyErrorSatisfies-java.util.function.Consumer-", "bodyText": "These should all be: verifyErrorSatisfies.  verifyErrorMatches should be taking a predicate. This predicate ALWAYS returns true because you've done assertions. So this should be a consumer.\nhttps://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.LastStep.html#verifyErrorSatisfies-java.util.function.Consumer-", "bodyHTML": "<p dir=\"auto\">These should all be: verifyErrorSatisfies.  verifyErrorMatches should be taking a predicate. This predicate ALWAYS returns true because you've done assertions. So this should be a consumer.<br>\n<a href=\"https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.LastStep.html#verifyErrorSatisfies-java.util.function.Consumer-\" rel=\"nofollow\">https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.LastStep.html#verifyErrorSatisfies-java.util.function.Consumer-</a></p>", "author": "conniey", "createdAt": "2020-10-29T20:06:40Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,175 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during message settlement.\n+     */\n+    @ParameterizedTest\n+    @MethodSource\n+    void errorSourceOnSettlement(DispositionStatus dispositionStatus, ServiceBusErrorSource expectedErrorSource,\n+        DeliveryStateType expectedDeliveryState) {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(amqpReceiveLink.updateDisposition(eq(lockToken1), argThat(e -> e.getType() == expectedDeliveryState)))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1)\n+            .flatMap(context -> {\n+                final Mono<Void> operation;\n+                switch (dispositionStatus) {\n+                    case DEFERRED:\n+                        operation = receiver.defer(receivedMessage);\n+                        break;\n+                    case ABANDONED:\n+                        operation = receiver.abandon(receivedMessage);\n+                        break;\n+                    case COMPLETED:\n+                        operation = receiver.complete(receivedMessage);\n+                        break;\n+                    case SUSPENDED:\n+                        operation = receiver.deadLetter(receivedMessage);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unrecognized operation: \" + dispositionStatus);\n+                }\n+                return operation;\n+            }))\n+            .then(() -> messageSink.next(message))\n+            .expectNext()\n+            .verifyErrorMatches(throwable -> {", "originalCommit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e62f7f5d44c26d72ea640f4e61d6a01011e3e6d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e62f7f5d44c26d72ea640f4e61d6a01011e3e6d0", "message": "Review comments", "committedDate": "2020-10-29T23:27:09Z", "type": "commit"}, {"oid": "4c11eb445e1fa76465189c8e1ea31d3bc7a14a7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c11eb445e1fa76465189c8e1ea31d3bc7a14a7a", "message": "Review comments", "committedDate": "2020-10-29T23:29:53Z", "type": "commit"}, {"oid": "59ff15f844981e0e3831fa897ac0800d9beb1fcf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/59ff15f844981e0e3831fa897ac0800d9beb1fcf", "message": "Review comments", "committedDate": "2020-10-29T23:59:09Z", "type": "commit"}, {"oid": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b0d16a63c7d471f44715fa57e852b59ec2da31e", "message": "Removed unwanted error source types", "committedDate": "2020-10-30T01:28:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514879261", "body": "Why do we need `MESSAGE` here in this enum? Can this be named `ACCEPT_SESSION` and `CLOSE_SESSION` for the next one?", "bodyText": "Why do we need MESSAGE here in this enum? Can this be named ACCEPT_SESSION and CLOSE_SESSION for the next one?", "bodyHTML": "<p dir=\"auto\">Why do we need <code>MESSAGE</code> here in this enum? Can this be named <code>ACCEPT_SESSION</code> and <code>CLOSE_SESSION</code> for the next one?</p>", "author": "srnagar", "createdAt": "2020-10-30T05:27:59Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * Represent the operation this sdk was performing when the error happened.\n+ */\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> {\n+\n+    /** Error while abandoning the message.*/\n+    public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n+\n+    /** Error while completing the message.*/\n+    public static final ServiceBusErrorSource COMPLETE = fromString(\"COMPLETE\", ServiceBusErrorSource.class);\n+\n+    /** Error while receiving the message(s).*/\n+    public static final ServiceBusErrorSource RECEIVE = fromString(\"RECEIVE\", ServiceBusErrorSource.class);\n+\n+    /** Error while renewing lock.*/\n+    public static final ServiceBusErrorSource RENEW_LOCK = fromString(\"RENEW_LOCK\", ServiceBusErrorSource.class);\n+\n+    /** Error when we could not determine the source.*/\n+    public static final ServiceBusErrorSource UNKNOWN = fromString(\"UNKNOWN\", ServiceBusErrorSource.class);\n+\n+    /** Error while user's code is running for a message.*/\n+    public static final ServiceBusErrorSource USER_CALLBACK = fromString(\"USER_CALLBACK\",\n+        ServiceBusErrorSource.class);\n+\n+    /** Error while session is accepted.*/\n+    public static final ServiceBusErrorSource ACCEPT_MESSAGE_SESSION = fromString(\"ACCEPT_MESSAGE_SESSION\",", "originalCommit": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNDk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514904965", "bodyText": "I copied from dotnet, but I will change it.", "author": "hemanttanwar", "createdAt": "2020-10-30T07:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTYwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514879609", "body": "DEFER is not in ServiceBusErrorSource", "bodyText": "DEFER is not in ServiceBusErrorSource", "bodyHTML": "<p dir=\"auto\">DEFER is not in ServiceBusErrorSource</p>", "author": "srnagar", "createdAt": "2020-10-30T05:29:35Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1060,20 +1068,48 @@ private boolean isManagementToken(String lockToken) {\n                     logger.info(\"Could not perform on session manger. Performing on management node.\");\n                     return performOnManagement;\n                 });\n-        }\n-\n-        final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n-        if (isManagementToken(lockToken) || existingConsumer == null) {\n-            return performOnManagement;\n         } else {\n-            return existingConsumer.updateDisposition(lockToken, dispositionStatus, deadLetterReason,\n-                deadLetterErrorDescription, propertiesToModify, transactionContext)\n-                .then(Mono.fromRunnable(() -> {\n-                    logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n-                        entityPath, dispositionStatus, lockToken);\n-                    renewalContainer.remove(lockToken);\n-                }));\n+            final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n+            if (isManagementToken(lockToken) || existingConsumer == null) {\n+                updateDispositionOperation = performOnManagement;\n+            } else {\n+                updateDispositionOperation = existingConsumer.updateDisposition(lockToken, dispositionStatus,\n+                    deadLetterReason, deadLetterErrorDescription, propertiesToModify, transactionContext)\n+                    .then(Mono.fromRunnable(() -> {\n+                        logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n+                            entityPath, dispositionStatus, lockToken);\n+                        renewalContainer.remove(lockToken);\n+                    }));\n+            }\n         }\n+        return updateDispositionOperation\n+            .onErrorMap(throwable -> {\n+                ServiceBusErrorSource errorSource;\n+                if (throwable instanceof AmqpException) {\n+                    switch (dispositionStatus) {\n+                        case COMPLETED:\n+                            errorSource = ServiceBusErrorSource.COMPLETE;\n+                            break;\n+                        case DEFERRED:\n+                            errorSource = ServiceBusErrorSource.DEFER;", "originalCommit": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514879819", "body": "DEAD_LETTER too is removed from ServiceBusErrorSource.", "bodyText": "DEAD_LETTER too is removed from ServiceBusErrorSource.", "bodyHTML": "<p dir=\"auto\">DEAD_LETTER too is removed from ServiceBusErrorSource.</p>", "author": "srnagar", "createdAt": "2020-10-30T05:30:22Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1060,20 +1068,48 @@ private boolean isManagementToken(String lockToken) {\n                     logger.info(\"Could not perform on session manger. Performing on management node.\");\n                     return performOnManagement;\n                 });\n-        }\n-\n-        final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n-        if (isManagementToken(lockToken) || existingConsumer == null) {\n-            return performOnManagement;\n         } else {\n-            return existingConsumer.updateDisposition(lockToken, dispositionStatus, deadLetterReason,\n-                deadLetterErrorDescription, propertiesToModify, transactionContext)\n-                .then(Mono.fromRunnable(() -> {\n-                    logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n-                        entityPath, dispositionStatus, lockToken);\n-                    renewalContainer.remove(lockToken);\n-                }));\n+            final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n+            if (isManagementToken(lockToken) || existingConsumer == null) {\n+                updateDispositionOperation = performOnManagement;\n+            } else {\n+                updateDispositionOperation = existingConsumer.updateDisposition(lockToken, dispositionStatus,\n+                    deadLetterReason, deadLetterErrorDescription, propertiesToModify, transactionContext)\n+                    .then(Mono.fromRunnable(() -> {\n+                        logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n+                            entityPath, dispositionStatus, lockToken);\n+                        renewalContainer.remove(lockToken);\n+                    }));\n+            }\n         }\n+        return updateDispositionOperation\n+            .onErrorMap(throwable -> {\n+                ServiceBusErrorSource errorSource;\n+                if (throwable instanceof AmqpException) {\n+                    switch (dispositionStatus) {\n+                        case COMPLETED:\n+                            errorSource = ServiceBusErrorSource.COMPLETE;\n+                            break;\n+                        case DEFERRED:\n+                            errorSource = ServiceBusErrorSource.DEFER;\n+                            break;\n+                        case SUSPENDED:\n+                            errorSource = ServiceBusErrorSource.DEAD_LETTER;", "originalCommit": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "205fbfef94069c968b9b3509e08bb960e831de3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/205fbfef94069c968b9b3509e08bb960e831de3c", "message": "Fix unit test and ErrorSource only for AutoComplete on", "committedDate": "2020-10-30T07:01:44Z", "type": "commit"}, {"oid": "62510bdfeee20cbd41ec3e6a393fdaff4b75d505", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62510bdfeee20cbd41ec3e6a393fdaff4b75d505", "message": "Review Comments", "committedDate": "2020-10-30T07:05:32Z", "type": "commit"}, {"oid": "6d79df0c6fd251fa8cfefcea3a52cdba716abb6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d79df0c6fd251fa8cfefcea3a52cdba716abb6b", "message": " Fix unit test", "committedDate": "2020-10-30T08:40:56Z", "type": "commit"}, {"oid": "0a6fea9c71f12b4e89542133caeca79f5e664a99", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a6fea9c71f12b4e89542133caeca79f5e664a99", "message": "merge conflict resolution", "committedDate": "2020-10-30T09:46:19Z", "type": "commit"}]}