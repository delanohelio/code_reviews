{"pr_number": 13370, "pr_title": "Changed to use reactive test class StepVerifier to confirm test result", "pr_author": "moarychan", "pr_createdAt": "2020-07-21T06:49:31Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13370", "timeline": [{"oid": "1949d5b0e2052516353e8bc82e169aafdfce620b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1949d5b0e2052516353e8bc82e169aafdfce620b", "message": "Allow Long as ID type in Entity for Cosmos DB", "committedDate": "2020-07-20T02:51:20Z", "type": "commit"}, {"oid": "70aa09c72c749642780fdb06690dd1219f0856ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/70aa09c72c749642780fdb06690dd1219f0856ad", "message": "Unified processing of ID type conversion and added test cases\nhttps://github.com/Azure/azure-sdk-for-java/issues/12712", "committedDate": "2020-07-20T07:50:53Z", "type": "commit"}, {"oid": "1e42ed2c5b89685d1124bf941b31b3fb9c3e7f4c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e42ed2c5b89685d1124bf941b31b3fb9c3e7f4c", "message": "Updated code smell", "committedDate": "2020-07-20T09:45:22Z", "type": "commit"}, {"oid": "103ffa2f9ce3e08e1185e9388ab62e1cedbcbbc2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/103ffa2f9ce3e08e1185e9388ab62e1cedbcbbc2", "message": "Updated code smell", "committedDate": "2020-07-20T09:46:32Z", "type": "commit"}, {"oid": "2aa5b64cdd0f340bd00c26f6f726899bdc3ac98e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2aa5b64cdd0f340bd00c26f6f726899bdc3ac98e", "message": "Updated getStringIDValue API to return String instead of Object", "committedDate": "2020-07-20T16:36:46Z", "type": "commit"}, {"oid": "ee3fcfd8a49e7dd3d3685ddf6a0bb7deda19abf6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee3fcfd8a49e7dd3d3685ddf6a0bb7deda19abf6", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java into feature/cosmos/long-id-in-entity", "committedDate": "2020-07-21T05:16:15Z", "type": "commit"}, {"oid": "1f3880d001830d805dc4a003f0e4a191b81adc45", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1f3880d001830d805dc4a003f0e4a191b81adc45", "message": "Changed to use reactive test class StepVerifier to confirm test result; https://github.com/Azure/azure-sdk-for-java/issues/12712", "committedDate": "2020-07-21T06:46:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NjEyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458246126", "body": "Setup can be done on a blocking call - need not to worry about it, but this looks good, thanks :) ", "bodyText": "Setup can be done on a blocking call - need not to worry about it, but this looks good, thanks :)", "bodyHTML": "<p dir=\"auto\">Setup can be done on a blocking call - need not to worry about it, but this looks good, thanks :)</p>", "author": "kushagraThapar", "createdAt": "2020-07-21T16:53:32Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -60,8 +56,8 @@ public void setUp() {\n             staticTemplate = template;\n             template.createContainerIfNotExists(entityInformation);\n         }\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.save(DOMAIN_2).block(DEFAULT_TIME_OUT);\n+        Flux<LongIdDomainPartition> savedAllFlux = this.repository.saveAll(Arrays.asList(DOMAIN_1, DOMAIN_2));\n+        StepVerifier.create(savedAllFlux).thenConsumeWhile(domain -> true).expectComplete().verify();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MDcyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458250723", "body": "Here, we should test that the response is the saved `DOMAIN_1`\r\nsomething like this -> \r\n```suggestion\r\n        StepVerifier.create(findIdMono).expectNext(DOMAIN_1).expectComplete().verify();\r\n```", "bodyText": "Here, we should test that the response is the saved DOMAIN_1\nsomething like this ->\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();\n          \n          \n            \n                    StepVerifier.create(findIdMono).expectNext(DOMAIN_1).expectComplete().verify();", "bodyHTML": "<p dir=\"auto\">Here, we should test that the response is the saved <code>DOMAIN_1</code><br>\nsomething like this -&gt;</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">StepVerifier</span><span class=\"pl-k\">.</span>create(<span class=\"x x-first\">saveMono)</span><span class=\"pl-k x\">.</span><span class=\"x\">thenConsumeWhile(domain </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">true</span>)<span class=\"pl-k\">.</span>expectComplete()<span class=\"pl-k\">.</span>verify();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">StepVerifier</span><span class=\"pl-k\">.</span>create(<span class=\"x x-first\">findIdMono)</span><span class=\"pl-k x\">.</span><span class=\"x\">expectNext(</span><span class=\"pl-c1 x x-last\">DOMAIN_1</span>)<span class=\"pl-k\">.</span>expectComplete()<span class=\"pl-k\">.</span>verify();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kushagraThapar", "createdAt": "2020-07-21T17:00:46Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -78,19 +74,26 @@ public static void afterClassCleanup() {\n \n     @Test\n     public void testLongIdDomainPartition() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deletedMono = this.repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Optional<LongIdDomainPartition> foundOptional = this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> idMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(idMono).verifyComplete();\n \n-        Assert.assertTrue(foundOptional.isPresent());\n-        Assert.assertEquals(DOMAIN_1.getNumber(), foundOptional.get().getNumber());\n-        Assert.assertEquals(DOMAIN_1.getName(), foundOptional.get().getName());\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTA1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458251056", "body": "Here, we can make sure that nothing is returned from the backend - since we deleted all entities. \r\n\r\n```suggestion\r\n        StepVerifier.create(idMono).expectNextCount(0).verifyComplete();\r\n```", "bodyText": "Here, we can make sure that nothing is returned from the backend - since we deleted all entities.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StepVerifier.create(idMono).verifyComplete();\n          \n          \n            \n                    StepVerifier.create(idMono).expectNextCount(0).verifyComplete();", "bodyHTML": "<p dir=\"auto\">Here, we can make sure that nothing is returned from the backend - since we deleted all entities.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">StepVerifier</span><span class=\"pl-k\">.</span>create(idMono)<span class=\"pl-k\">.</span>verifyComplete();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">StepVerifier</span><span class=\"pl-k\">.</span>create(idMono)<span class=\"pl-k\">.</span><span class=\"x x-first\">expectNextCount(</span><span class=\"pl-c1 x\">0</span><span class=\"x\">)</span><span class=\"pl-k x x-last\">.</span>verifyComplete();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kushagraThapar", "createdAt": "2020-07-21T17:01:21Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -78,19 +74,26 @@ public static void afterClassCleanup() {\n \n     @Test\n     public void testLongIdDomainPartition() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deletedMono = this.repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Optional<LongIdDomainPartition> foundOptional = this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> idMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(idMono).verifyComplete();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458251586", "body": "Same here, we can make sure that entities are not returned back. \r\n```suggestion\r\n        StepVerifier.create(afterDelIdMono).expectNextCount(0).verifyComplete();\r\n```", "bodyText": "Same here, we can make sure that entities are not returned back.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StepVerifier.create(afterDelIdMono).verifyComplete();\n          \n          \n            \n                    StepVerifier.create(afterDelIdMono).expectNextCount(0).verifyComplete();", "bodyHTML": "<p dir=\"auto\">Same here, we can make sure that entities are not returned back.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">StepVerifier</span><span class=\"pl-k\">.</span>create(afterDelIdMono)<span class=\"pl-k\">.</span>verifyComplete();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">StepVerifier</span><span class=\"pl-k\">.</span>create(afterDelIdMono)<span class=\"pl-k\">.</span><span class=\"x x-first\">expectNextCount(</span><span class=\"pl-c1 x\">0</span><span class=\"x\">)</span><span class=\"pl-k x x-last\">.</span>verifyComplete();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kushagraThapar", "createdAt": "2020-07-21T17:02:08Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -78,19 +74,26 @@ public static void afterClassCleanup() {\n \n     @Test\n     public void testLongIdDomainPartition() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deletedMono = this.repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Optional<LongIdDomainPartition> foundOptional = this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> idMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(idMono).verifyComplete();\n \n-        Assert.assertTrue(foundOptional.isPresent());\n-        Assert.assertEquals(DOMAIN_1.getNumber(), foundOptional.get().getNumber());\n-        Assert.assertEquals(DOMAIN_1.getName(), foundOptional.get().getName());\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();\n \n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(findIdMono).expectNext(DOMAIN_1).expectComplete().verify();\n \n-        Assert.assertFalse(this.repository.findById(ID_1).blockOptional(DEFAULT_TIME_OUT).isPresent());\n+        Mono<Void> deleteMono = this.repository.delete(DOMAIN_1);\n+        StepVerifier.create(deleteMono).verifyComplete();\n+\n+        Mono<LongIdDomainPartition> afterDelIdMono = this.repository.findById(ID_1,\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(afterDelIdMono).verifyComplete();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MTg0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458251841", "body": "We can verify the count here as well, like you have done below. ", "bodyText": "We can verify the count here as well, like you have done below.", "bodyHTML": "<p dir=\"auto\">We can verify the count here as well, like you have done below.</p>", "author": "kushagraThapar", "createdAt": "2020-07-21T17:02:38Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -99,32 +102,21 @@ public void testInvalidDomain() {\n     }\n \n     @Test\n-    public void testBasicQuery() {\n-        LongIdDomainPartition save = this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Assert.assertNotNull(save);\n-    }\n+    public void testSaveAllAndFindAll() {\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n \n-    @Test\n-    public void testSaveAndFindById() {\n-        Assert.assertNotNull(this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT));\n-        Optional<LongIdDomainPartition> longIdDomainPartitionOptional = this.repository\n-            .findById(DOMAIN_1.getNumber()).blockOptional(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(longIdDomainPartitionOptional.isPresent());\n-        Assert.assertEquals(DOMAIN_1, longIdDomainPartitionOptional.get());\n-    }\n+        Flux<LongIdDomainPartition> savedAllFlux = this.repository.saveAll(Arrays.asList(DOMAIN_1, DOMAIN_2));\n+        StepVerifier.create(savedAllFlux).thenConsumeWhile(domain -> true).expectComplete().verify();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjA4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458252087", "body": "Same here, make sure the expectNextCount = 0", "bodyText": "Same here, make sure the expectNextCount = 0", "bodyHTML": "<p dir=\"auto\">Same here, make sure the expectNextCount = 0</p>", "author": "kushagraThapar", "createdAt": "2020-07-21T17:03:04Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -139,66 +131,77 @@ public void testDeleteByIdAndPartitionKey() {\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n         StepVerifier.create(deleteMono).verifyComplete();\n \n-        final Mono<LongIdDomainPartition> byId = repository.findById(DOMAIN_1.getNumber(),\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n-        Assert.assertNull(byId.block(DEFAULT_TIME_OUT));\n+        StepVerifier.create(findIdMono).verifyComplete();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjM3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458252372", "body": "`expectNext = DOMAIN_1`", "bodyText": "expectNext = DOMAIN_1", "bodyHTML": "<p dir=\"auto\"><code>expectNext = DOMAIN_1</code></p>", "author": "kushagraThapar", "createdAt": "2020-07-21T17:03:34Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -139,66 +131,77 @@ public void testDeleteByIdAndPartitionKey() {\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n         StepVerifier.create(deleteMono).verifyComplete();\n \n-        final Mono<LongIdDomainPartition> byId = repository.findById(DOMAIN_1.getNumber(),\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n-        Assert.assertNull(byId.block(DEFAULT_TIME_OUT));\n+        StepVerifier.create(findIdMono).verifyComplete();\n     }\n \n-    @Test(expected = CosmosAccessException.class)\n+    @Test\n     public void testDeleteByIdShouldFailIfNothingToDelete() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        this.repository.deleteById(DOMAIN_1.getNumber()).block(DEFAULT_TIME_OUT);\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n+\n+        final Mono<Void> deleteIdMono = repository.deleteById(DOMAIN_1.getNumber(),\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(deleteIdMono).expectError(CosmosAccessException.class).verify();\n     }\n \n     @Test\n     public void testDelete() {\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(1 == this.repository.count().block(DEFAULT_TIME_OUT));\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MjU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13370#discussion_r458252598", "body": "expectNextCount = 2", "bodyText": "expectNextCount = 2", "bodyHTML": "<p dir=\"auto\">expectNextCount = 2</p>", "author": "kushagraThapar", "createdAt": "2020-07-21T17:03:59Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/test/java/com/azure/spring/data/cosmos/repository/integration/ReactiveLongIdDomainPartitionPartitionRepositoryIT.java", "diffHunk": "@@ -139,66 +131,77 @@ public void testDeleteByIdAndPartitionKey() {\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n         StepVerifier.create(deleteMono).verifyComplete();\n \n-        final Mono<LongIdDomainPartition> byId = repository.findById(DOMAIN_1.getNumber(),\n+        Mono<LongIdDomainPartition> findIdMono = this.repository.findById(ID_1,\n             new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n-        Assert.assertNull(byId.block(DEFAULT_TIME_OUT));\n+        StepVerifier.create(findIdMono).verifyComplete();\n     }\n \n-    @Test(expected = CosmosAccessException.class)\n+    @Test\n     public void testDeleteByIdShouldFailIfNothingToDelete() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        this.repository.deleteById(DOMAIN_1.getNumber()).block(DEFAULT_TIME_OUT);\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n+\n+        final Mono<Void> deleteIdMono = repository.deleteById(DOMAIN_1.getNumber(),\n+            new PartitionKey(entityInformation.getPartitionKeyFieldValue(DOMAIN_1)));\n+        StepVerifier.create(deleteIdMono).expectError(CosmosAccessException.class).verify();\n     }\n \n     @Test\n     public void testDelete() {\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(1 == this.repository.count().block(DEFAULT_TIME_OUT));\n+        Mono<LongIdDomainPartition> saveMono = this.repository.save(DOMAIN_1);\n+        StepVerifier.create(saveMono).thenConsumeWhile(domain -> true).expectComplete().verify();\n+\n+        Mono<Void> deleteMono = this.repository.delete(DOMAIN_1);\n+        StepVerifier.create(deleteMono).verifyComplete();\n+\n+        Mono<Long> countMono = repository.count();\n+        StepVerifier.create(countMono).expectNext(1L).verifyComplete();\n     }\n \n-    @Test(expected = CosmosAccessException.class)\n+    @Test\n     public void testDeleteShouldFailIfNothingToDelete() {\n-        this.repository.deleteAll().block(DEFAULT_TIME_OUT);\n-        this.repository.delete(DOMAIN_1).block(DEFAULT_TIME_OUT);\n+        final Mono<Void> deletedMono = repository.deleteAll();\n+        StepVerifier.create(deletedMono).thenAwait().verifyComplete();\n+\n+        Mono<Void> deleteIdMono = this.repository.delete(DOMAIN_1);\n+        StepVerifier.create(deleteIdMono).expectError(CosmosAccessException.class).verify();\n     }\n \n     @Test\n     public void testDeleteAll() {\n-        this.repository.save(DOMAIN_1).block(DEFAULT_TIME_OUT);\n-        this.repository.save(DOMAIN_2).block(DEFAULT_TIME_OUT);\n-        this.repository.deleteAll(Arrays.asList(DOMAIN_1, DOMAIN_2)).block(DEFAULT_TIME_OUT);\n-        Assert.assertTrue(0 == this.repository.count().block(DEFAULT_TIME_OUT));\n+        Flux<LongIdDomainPartition> savedAllFlux = this.repository.saveAll(Arrays.asList(DOMAIN_1, DOMAIN_2));\n+        StepVerifier.create(savedAllFlux).thenConsumeWhile(domain -> true).expectComplete().verify();", "originalCommit": "1f3880d001830d805dc4a003f0e4a191b81adc45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dbdd683d8ed65c5196bad39b7aa803c84eaa1506", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbdd683d8ed65c5196bad39b7aa803c84eaa1506", "message": "Optimize use case logic", "committedDate": "2020-07-22T01:16:41Z", "type": "commit"}]}