{"pr_number": 15742, "pr_title": "CosmosPagedFlux & CosmosPagedIterable Handler", "pr_author": "kushagraThapar", "pr_createdAt": "2020-09-25T23:56:36Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15742", "timeline": [{"oid": "95202d43f027dbd12b13244f908946069cfe9b35", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95202d43f027dbd12b13244f908946069cfe9b35", "message": "WIP", "committedDate": "2020-09-25T18:22:20Z", "type": "commit"}, {"oid": "c15d978d21619049bea0fd1798625ca17f11c4ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c15d978d21619049bea0fd1798625ca17f11c4ac", "message": "Merge branch 'master' into cosmos_paged_flux_handler", "committedDate": "2020-09-25T20:27:59Z", "type": "commit"}, {"oid": "c135b55aa6b8df4af0dfc269f9743a2a20543dbd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c135b55aa6b8df4af0dfc269f9743a2a20543dbd", "message": "WIP for CosmosPagedFluxHandler", "committedDate": "2020-09-25T21:24:26Z", "type": "commit"}, {"oid": "8ad74ef79cc10631c34233ab10d842703dfa25ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ad74ef79cc10631c34233ab10d842703dfa25ad", "message": "WIP for Cosmos Paged Iterable Handler", "committedDate": "2020-09-25T21:40:07Z", "type": "commit"}, {"oid": "6d5f0dc010d748f953808056f9c955ac22f7ed83", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d5f0dc010d748f953808056f9c955ac22f7ed83", "message": "Added functionality to provide handler to CosmosPagedFlux and CosmosPagedIterable", "committedDate": "2020-09-25T23:53:25Z", "type": "commit"}, {"oid": "df24d030f3536129da73f60444473ad145dddaa7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df24d030f3536129da73f60444473ad145dddaa7", "message": "Merged latest master and resolved conflicts", "committedDate": "2020-09-25T23:54:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496084541", "body": "```suggestion\r\n    private final Consumer<FeedResponse<T>> feedResponseConsumer;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Consumer<FeedResponse<T>> feedResponseConsumer;\n          \n          \n            \n                private final Consumer<FeedResponse<T>> feedResponseConsumer;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">Consumer&lt;<span class=\"pl-k\">FeedResponse&lt;<span class=\"pl-smi\">T</span>&gt;</span>&gt;</span> feedResponseConsumer;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-k\">Consumer&lt;<span class=\"pl-k\">FeedResponse&lt;<span class=\"pl-smi\">T</span>&gt;</span>&gt;</span> feedResponseConsumer;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "moderakh", "createdAt": "2020-09-28T16:34:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MjIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497142204", "bodyText": "It can't be final as this is optional. We only set this in 1 constructor which is invoked by handle() API.", "author": "kushagraThapar", "createdAt": "2020-09-29T23:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MjczOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497142739", "bodyText": "you can set it to null in the other constructor.", "author": "moderakh", "createdAt": "2020-09-29T23:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NTAwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497145007", "bodyText": "Yes, that is possible, we can do that.", "author": "kushagraThapar", "createdAt": "2020-09-29T23:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDA0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090042", "body": "you will need client builder for session consistency otherwise the test will become flaky.\r\n\r\nperhaps `clientBuildersWithDirectSession` ?", "bodyText": "you will need client builder for session consistency otherwise the test will become flaky.\nperhaps clientBuildersWithDirectSession ?", "bodyHTML": "<p dir=\"auto\">you will need client builder for session consistency otherwise the test will become flaky.</p>\n<p dir=\"auto\">perhaps <code>clientBuildersWithDirectSession</code> ?</p>", "author": "moderakh", "createdAt": "2020-09-28T16:43:33Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDU4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090584", "body": "loggger.info is too noisy for the test.", "bodyText": "loggger.info is too noisy for the test.", "bodyHTML": "<p dir=\"auto\">loggger.info is too noisy for the test.</p>", "author": "moderakh", "createdAt": "2020-09-28T16:44:25Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =\n+            cosmosContainer.readAllItems(cosmosQueryRequestOptions, InternalObjectNode.class);\n+\n+        AtomicInteger handleCount = new AtomicInteger();\n+        cosmosPagedIterable = cosmosPagedIterable.handle(feedResponse -> {\n+            CosmosDiagnostics cosmosDiagnostics = feedResponse.getCosmosDiagnostics();\n+            logger.info(\"Cosmos Diagnostics : {}\", cosmosDiagnostics);", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496094115", "body": "ditto we should use client builder with at least session, otherwise the test will be flaky.\r\n\r\nperhaps `clientBuildersWithDirectSession`", "bodyText": "ditto we should use client builder with at least session, otherwise the test will be flaky.\nperhaps clientBuildersWithDirectSession", "bodyHTML": "<p dir=\"auto\">ditto we should use client builder with at least session, otherwise the test will be flaky.</p>\n<p dir=\"auto\">perhaps <code>clientBuildersWithDirectSession</code></p>", "author": "moderakh", "createdAt": "2020-09-28T16:50:28Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTQzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095434", "body": "for the new test please don't use `InternalObjectNode` this will be used by the end user.\r\n\r\nPlease rely on ObjectNode or a simple POJO.", "bodyText": "for the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "bodyHTML": "<p dir=\"auto\">for the new test please don't use <code>InternalObjectNode</code> this will be used by the end user.</p>\n<p dir=\"auto\">Please rely on ObjectNode or a simple POJO.</p>", "author": "moderakh", "createdAt": "2020-09-28T16:52:46Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedFluxTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedFluxTest() {\n+        assertThat(this.cosmosAsyncClient).isNull();\n+        this.cosmosAsyncClient = getClientBuilder().buildAsyncClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosAsyncClient);\n+        cosmosAsyncContainer =\n+            cosmosAsyncClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosAsyncClient).isNotNull();\n+        this.cosmosAsyncClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedFluxHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedFlux<InternalObjectNode> cosmosPagedFlux =", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTUzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095536", "body": "ditto.\r\nfor the new test please don't use `InternalObjectNode` this will be used by the end user.\r\n\r\nPlease rely on ObjectNode or a simple POJO.", "bodyText": "ditto.\nfor the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "bodyHTML": "<p dir=\"auto\">ditto.<br>\nfor the new test please don't use <code>InternalObjectNode</code> this will be used by the end user.</p>\n<p dir=\"auto\">Please rely on ObjectNode or a simple POJO.</p>", "author": "moderakh", "createdAt": "2020-09-28T16:52:56Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095958", "body": "nit: final.", "bodyText": "nit: final.", "bodyHTML": "<p dir=\"auto\">nit: final.</p>", "author": "moderakh", "createdAt": "2020-09-28T16:53:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java", "diffHunk": "@@ -22,12 +22,27 @@\n  */\n public final class CosmosPagedIterable<T> extends ContinuablePagedIterable<String, T, FeedResponse<T>> {\n \n+    private CosmosPagedFlux<T> cosmosPagedFlux;", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NzM0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497147346", "bodyText": "This cannot be final, because this is mutable. However, we can change it to be immutable, will try that out.", "author": "kushagraThapar", "createdAt": "2020-09-29T23:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA=="}], "type": "inlineReview"}, {"oid": "98f661d2b5e6af340d4c81a1043f335304cd5221", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98f661d2b5e6af340d4c81a1043f335304cd5221", "message": "Updated tests with ObjectNode and other code review comments", "committedDate": "2020-09-30T00:07:53Z", "type": "commit"}]}