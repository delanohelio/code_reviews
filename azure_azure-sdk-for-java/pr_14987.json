{"pr_number": 14987, "pr_title": "feat(samples): Components samples", "pr_author": "azabbasi", "pr_createdAt": "2020-09-09T18:56:54Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14987", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485851843", "body": "wouldn't we want to iterate over the created models list and use those Ids to log the success statement here?", "bodyText": "wouldn't we want to iterate over the created models list and use those Ids to log the success statement here?", "bodyHTML": "<p dir=\"auto\">wouldn't we want to iterate over the created models list and use those Ids to log the success statement here?</p>", "author": "abhipsaMisra", "createdAt": "2020-09-09T19:13:26Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.DigitalTwinMetadata;\n+import com.azure.digitaltwins.core.serialization.ModelProperties;\n+import com.azure.digitaltwins.core.util.UpdateOperationUtility;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ComponentSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runComponentSample();\n+    }\n+\n+    public static void runComponentSample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"COMPONENT SAMPLES\");\n+\n+        // For the purpose of this example we will create temporary models using a random model Ids.\n+        // We have to make sure these model Ids are unique within the DT instance.\n+\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+        String basicDigitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TemporaryTwinPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, modelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+\n+        ConsoleLogger.printHeader(\"Create Models\");\n+        // We now create all the models (including components)\n+        client.createModels(modelsList);\n+\n+        ConsoleLogger.print(\"Created models: \" + componentModelId + \" and \" + modelId);", "originalCommit": "bce98ed429eef081b6dc61706edac4ec48587f05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "03cab61d050679dceb88c553a1ced7d403a30c86", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\nindex 92ee1aaf906..65148d28a72 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\n", "chunk": "@@ -52,16 +53,16 @@ public class ComponentSyncSamples {\n         // For the purpose of this example we will create temporary models using a random model Ids.\n         // We have to make sure these model Ids are unique within the DT instance.\n \n-        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n-        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n-        String basicDigitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TemporaryTwinPrefix, client);\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TEMPORARY_COMPONENT_MODEL_PREFIX, client);\n+        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TEMPORARY_MODEL_PREFIX, client);\n+        String basicDigitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TEMPORARY_TWIN_PREFIX, client);\n \n-        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n-            .replace(SamplesConstants.ComponentId, componentModelId);\n+        String newComponentModelPayload = SamplesConstants.TEMPORARY_COMPONENT_MODEL_PAYLOAD\n+            .replace(SamplesConstants.COMPONENT_ID, componentModelId);\n \n-        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n-            .replace(SamplesConstants.ModelId, modelId)\n-            .replace(SamplesConstants.ComponentId, componentModelId);\n+        String newModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_COMPONENT_PAYLOAD\n+            .replace(SamplesConstants.MODEL_ID, modelId)\n+            .replace(SamplesConstants.COMPONENT_ID, componentModelId);\n \n         List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n \n", "next_change": {"commit": "dbcc3df37ead89a705b3eb7f93927b46fee3957f", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\nindex 65148d28a72..0bac3c30060 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\n", "chunk": "@@ -68,9 +69,11 @@ public class ComponentSyncSamples {\n \n         ConsoleLogger.printHeader(\"Create Models\");\n         // We now create all the models (including components)\n-        client.createModels(modelsList);\n+        List<ModelData> modelList =  client.createModels(modelsList);\n \n-        ConsoleLogger.print(\"Created models: \" + componentModelId + \" and \" + modelId);\n+        for (ModelData model : modelList) {\n+            ConsoleLogger.print(\"Created model: \" + model.getId());\n+        }\n \n         ConsoleLogger.printHeader(\"Create digital twin with components\");\n         // Create digital twin with component payload using the BasicDigitalTwin serialization helper.\n", "next_change": {"commit": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\ndeleted file mode 100644\nindex 0bac3c30060..00000000000\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\n+++ /dev/null\n", "chunk": "@@ -1,162 +0,0 @@\n-package com.azure.digitaltwins.core;\n-\n-import com.azure.core.http.policy.HttpLogOptions;\n-import com.azure.core.http.rest.Response;\n-import com.azure.core.util.Context;\n-import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n-import com.azure.digitaltwins.core.helpers.SamplesArguments;\n-import com.azure.digitaltwins.core.helpers.SamplesConstants;\n-import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n-import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n-import com.azure.digitaltwins.core.models.ModelData;\n-import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n-import com.azure.digitaltwins.core.serialization.DigitalTwinMetadata;\n-import com.azure.digitaltwins.core.serialization.ModelProperties;\n-import com.azure.digitaltwins.core.util.UpdateOperationUtility;\n-import com.azure.identity.ClientSecretCredentialBuilder;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import javax.net.ssl.HttpsURLConnection;\n-import java.io.IOException;\n-import java.util.*;\n-\n-public class ComponentSyncSamples {\n-    private static DigitalTwinsClient client;\n-    private static final ObjectMapper mapper = new ObjectMapper();\n-\n-    public static void main(String[] args) throws IOException {\n-\n-        SamplesArguments parsedArguments = new SamplesArguments(args);\n-\n-        client = new DigitalTwinsClientBuilder()\n-            .credential(\n-                new ClientSecretCredentialBuilder()\n-                    .tenantId(parsedArguments.getTenantId())\n-                    .clientId(parsedArguments.getClientId())\n-                    .clientSecret(parsedArguments.getClientSecret())\n-                    .build()\n-            )\n-            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n-            .httpLogOptions(\n-                new HttpLogOptions()\n-                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n-            .buildClient();\n-\n-        runComponentSample();\n-    }\n-\n-    @SuppressWarnings(\"rawtypes\")\n-    public static void runComponentSample() throws JsonProcessingException {\n-\n-        ConsoleLogger.printHeader(\"COMPONENT SAMPLES\");\n-\n-        // For the purpose of this example we will create temporary models using a random model Ids.\n-        // We have to make sure these model Ids are unique within the DT instance.\n-\n-        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TEMPORARY_COMPONENT_MODEL_PREFIX, client);\n-        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TEMPORARY_MODEL_PREFIX, client);\n-        String basicDigitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TEMPORARY_TWIN_PREFIX, client);\n-\n-        String newComponentModelPayload = SamplesConstants.TEMPORARY_COMPONENT_MODEL_PAYLOAD\n-            .replace(SamplesConstants.COMPONENT_ID, componentModelId);\n-\n-        String newModelPayload = SamplesConstants.TEMPORARY_MODEL_WITH_COMPONENT_PAYLOAD\n-            .replace(SamplesConstants.MODEL_ID, modelId)\n-            .replace(SamplesConstants.COMPONENT_ID, componentModelId);\n-\n-        List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n-\n-        ConsoleLogger.printHeader(\"Create Models\");\n-        // We now create all the models (including components)\n-        List<ModelData> modelList =  client.createModels(modelsList);\n-\n-        for (ModelData model : modelList) {\n-            ConsoleLogger.print(\"Created model: \" + model.getId());\n-        }\n-\n-        ConsoleLogger.printHeader(\"Create digital twin with components\");\n-        // Create digital twin with component payload using the BasicDigitalTwin serialization helper.\n-        BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n-            .setId(basicDigitalTwinId)\n-            .setMetadata(\n-                new DigitalTwinMetadata()\n-                    .setModelId(modelId)\n-            )\n-            .setCustomProperties(\"Prop1\", \"Value1\")\n-            .setCustomProperties(\"Prop2\", 987)\n-            .setCustomProperties(\n-                \"Component1\",\n-                new ModelProperties()\n-                    .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n-                    .setCustomProperties(\"ComponentProp2\", 123)\n-            );\n-\n-        String basicDigitalTwinPayload = mapper.writeValueAsString(basicTwin);\n-\n-        client.createDigitalTwin(basicDigitalTwinId, basicDigitalTwinPayload);\n-\n-        ConsoleLogger.print(\"Created digital twin \" + basicDigitalTwinId);\n-\n-        // You can get a digital twin in json string format and deserialize it on your own\n-        Response<String> getStringDigitalTwinResponse = client.getDigitalTwinWithResponse(basicDigitalTwinId, Context.NONE);\n-        ConsoleLogger.print(\"Successfully retrieved digital twin as a json string \\n\" + getStringDigitalTwinResponse.getValue());\n-\n-        BasicDigitalTwin deserializedDigitalTwin = mapper.readValue(getStringDigitalTwinResponse.getValue(), BasicDigitalTwin.class);\n-        ConsoleLogger.print(\"Deserialized the string response into a BasicDigitalTwin with Id: \" + deserializedDigitalTwin.getId());\n-\n-        // You can also get a digital twin using the built in deserializer into a BasicDigitalTwin.\n-        // It works well for basic stuff, but as you can see it gets more difficult when delving into\n-        // more complex properties, like components.\n-        Response<BasicDigitalTwin> basicDigitalTwinResponse = client.getDigitalTwinWithResponse(basicDigitalTwinId, BasicDigitalTwin.class, Context.NONE);\n-\n-        if (basicDigitalTwinResponse.getStatusCode() == HttpsURLConnection.HTTP_OK) {\n-\n-            BasicDigitalTwin basicDigitalTwin = basicDigitalTwinResponse.getValue();\n-\n-            String component1RawText = mapper.writeValueAsString(basicDigitalTwin.getCustomProperties().get(\"Component1\"));\n-\n-            HashMap component1 = mapper.readValue(component1RawText, HashMap.class);\n-\n-            ConsoleLogger.print(\"Retrieved digital twin using generic API to use built in deserialization into a BasicDigitalTwin with Id: \" + basicDigitalTwin.getId() + \":\\n\\t\"\n-                + \"Etag: \" + basicDigitalTwin.getTwinETag() + \"\\n\\t\"\n-                + \"Prop1: \" + basicDigitalTwin.getCustomProperties().get(\"Prop1\") + \"\\n\\t\"\n-                + \"Prop2: \" + basicDigitalTwin.getCustomProperties().get(\"Prop2\") + \"\\n\\t\"\n-                + \"ComponentProp1: \" + component1.get(\"ComponentProp1\") + \"\\n\\t\"\n-                + \"ComponentProp2: \" + component1.get(\"ComponentProp2\") + \"\\n\\t\"\n-            );\n-        }\n-\n-        ConsoleLogger.printHeader(\"Update Component\");\n-\n-        // Update Component1 by replacing the property ComponentProp1 value,\n-        // using the UpdateOperationUtility to build the payload.\n-        UpdateOperationUtility updateOperationUtility = new UpdateOperationUtility();\n-\n-        updateOperationUtility.appendReplaceOperation(\"/ComponentProp1\", \"Some new Value\");\n-\n-        client.updateComponent(basicDigitalTwinId, \"Component1\", updateOperationUtility.getUpdateOperations());\n-\n-        ConsoleLogger.print(\"Updated component for digital twin: \" + basicDigitalTwinId);\n-\n-        ConsoleLogger.printHeader(\"Get Component\");\n-        String getComponentResponse = client.getComponent(basicDigitalTwinId, \"Component1\");\n-        ConsoleLogger.print(\"Retrieved component for digital twin \" + basicDigitalTwinId + \" :\\n\" + getComponentResponse);\n-\n-        // Clean up\n-        try {\n-            client.deleteDigitalTwin(basicDigitalTwinId);\n-        }\n-        catch (ErrorResponseException ex) {\n-            ConsoleLogger.printFatal(\"Failed to delete digital twin due to\" + ex);\n-        }\n-\n-        try {\n-            client.deleteModel(modelId);\n-            client.deleteModel(componentModelId);\n-        }\n-        catch (ErrorResponseException ex) {\n-            ConsoleLogger.printFatal(\"Failed to delete models due to\" + ex);\n-        }\n-    }\n-}\n", "next_change": {"commit": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\nnew file mode 100644\nindex 00000000000..92ee1aaf906\n--- /dev/null\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ComponentSyncSamples.java\n", "chunk": "@@ -0,0 +1,158 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.SamplesConstants;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.serialization.BasicDigitalTwin;\n+import com.azure.digitaltwins.core.serialization.DigitalTwinMetadata;\n+import com.azure.digitaltwins.core.serialization.ModelProperties;\n+import com.azure.digitaltwins.core.util.UpdateOperationUtility;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class ComponentSyncSamples {\n+    private static DigitalTwinsClient client;\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runComponentSample();\n+    }\n+\n+    public static void runComponentSample() throws JsonProcessingException {\n+\n+        ConsoleLogger.printHeader(\"COMPONENT SAMPLES\");\n+\n+        // For the purpose of this example we will create temporary models using a random model Ids.\n+        // We have to make sure these model Ids are unique within the DT instance.\n+\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String modelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+        String basicDigitalTwinId = UniqueIdHelper.getUniqueDigitalTwinId(SamplesConstants.TemporaryTwinPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, modelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        List<String> modelsList = new ArrayList<>(Arrays.asList(newComponentModelPayload, newModelPayload));\n+\n+        ConsoleLogger.printHeader(\"Create Models\");\n+        // We now create all the models (including components)\n+        client.createModels(modelsList);\n+\n+        ConsoleLogger.print(\"Created models: \" + componentModelId + \" and \" + modelId);\n+\n+        ConsoleLogger.printHeader(\"Create digital twin with components\");\n+        // Create digital twin with component payload using the BasicDigitalTwin serialization helper.\n+        BasicDigitalTwin basicTwin = new BasicDigitalTwin()\n+            .setId(basicDigitalTwinId)\n+            .setMetadata(\n+                new DigitalTwinMetadata()\n+                    .setModelId(modelId)\n+            )\n+            .setCustomProperties(\"Prop1\", \"Value1\")\n+            .setCustomProperties(\"Prop2\", 987)\n+            .setCustomProperties(\n+                \"Component1\",\n+                new ModelProperties()\n+                    .setCustomProperties(\"ComponentProp1\", \"Component value 1\")\n+                    .setCustomProperties(\"ComponentProp2\", 123)\n+            );\n+\n+        String basicDigitalTwinPayload = mapper.writeValueAsString(basicTwin);\n+\n+        client.createDigitalTwin(basicDigitalTwinId, basicDigitalTwinPayload);\n+\n+        ConsoleLogger.print(\"Created digital twin \" + basicDigitalTwinId);\n+\n+        // You can get a digital twin in json string format and deserialize it on your own\n+        Response<String> getStringDigitalTwinResponse = client.getDigitalTwinWithResponse(basicDigitalTwinId, Context.NONE);\n+        ConsoleLogger.print(\"Successfully retrieved digital twin as a json string \\n\" + getStringDigitalTwinResponse.getValue());\n+\n+        BasicDigitalTwin deserializedDigitalTwin = mapper.readValue(getStringDigitalTwinResponse.getValue(), BasicDigitalTwin.class);\n+        ConsoleLogger.print(\"Deserialized the string response into a BasicDigitalTwin with Id: \" + deserializedDigitalTwin.getId());\n+\n+        // You can also get a digital twin using the built in deserializer into a BasicDigitalTwin.\n+        // It works well for basic stuff, but as you can see it gets more difficult when delving into\n+        // more complex properties, like components.\n+        Response<BasicDigitalTwin> basicDigitalTwinResponse = client.getDigitalTwinWithResponse(basicDigitalTwinId, BasicDigitalTwin.class, Context.NONE);\n+\n+        if (basicDigitalTwinResponse.getStatusCode() == HttpsURLConnection.HTTP_OK) {\n+\n+            BasicDigitalTwin basicDigitalTwin = basicDigitalTwinResponse.getValue();\n+\n+            String component1RawText = mapper.writeValueAsString(basicDigitalTwin.getCustomProperties().get(\"Component1\"));\n+\n+            Map<String, Object> component1 = mapper.readValue(component1RawText, HashMap.class);\n+\n+            ConsoleLogger.print(\"Retrieved digital twin using generic API to use built in deserialization into a BasicDigitalTwin with Id: \" + basicDigitalTwin.getId() + \":\\n\\t\"\n+                + \"Etag: \" + basicDigitalTwin.getTwinETag() + \"\\n\\t\"\n+                + \"Prop1: \" + basicDigitalTwin.getCustomProperties().get(\"Prop1\") + \"\\n\\t\"\n+                + \"Prop2: \" + basicDigitalTwin.getCustomProperties().get(\"Prop2\") + \"\\n\\t\"\n+                + \"ComponentProp1: \" + component1.get(\"ComponentProp1\") + \"\\n\\t\"\n+                + \"ComponentProp2: \" + component1.get(\"ComponentProp2\") + \"\\n\\t\"\n+            );\n+        }\n+\n+        ConsoleLogger.printHeader(\"Update Component\");\n+\n+        // Update Component1 by replacing the property ComponentProp1 value,\n+        // using the UpdateOperationUtility to build the payload.\n+        UpdateOperationUtility updateOperationUtility = new UpdateOperationUtility();\n+\n+        updateOperationUtility.appendReplaceOperation(\"/ComponentProp1\", \"Some new Value\");\n+\n+        client.updateComponent(basicDigitalTwinId, \"Component1\", updateOperationUtility.getUpdateOperations());\n+\n+        ConsoleLogger.print(\"Updated component for digital twin: \" + basicDigitalTwinId);\n+\n+        ConsoleLogger.printHeader(\"Get Component\");\n+        String getComponentResponse = client.getComponent(basicDigitalTwinId, \"Component1\");\n+        ConsoleLogger.print(\"Retrieved component for digital twin \" + basicDigitalTwinId + \" :\\n\" + getComponentResponse);\n+\n+        // Clean up\n+        try {\n+            client.deleteDigitalTwin(basicDigitalTwinId);\n+        }\n+        catch (ErrorResponseException ex) {\n+            ConsoleLogger.printFatal(\"Failed to delete digital twin due to\" + ex);\n+        }\n+\n+        try {\n+            client.deleteModel(modelId);\n+            client.deleteModel(componentModelId);\n+        }\n+        catch (ErrorResponseException ex) {\n+            ConsoleLogger.printFatal(\"Failed to delete models due to\" + ex);\n+        }\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NDYzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485854639", "body": "Could you add some comments to these helper methods, describing their user-cases. \r\nAlso, just FYI - Jonathan recommended that we don't use println, I have asked for clarification on if we should use printf or logger.", "bodyText": "Could you add some comments to these helper methods, describing their user-cases.\nAlso, just FYI - Jonathan recommended that we don't use println, I have asked for clarification on if we should use printf or logger.", "bodyHTML": "<p dir=\"auto\">Could you add some comments to these helper methods, describing their user-cases.<br>\nAlso, just FYI - Jonathan recommended that we don't use println, I have asked for clarification on if we should use printf or logger.</p>", "author": "abhipsaMisra", "createdAt": "2020-09-09T19:18:59Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java", "diffHunk": "@@ -7,21 +7,27 @@\n     private static final String ANSI_RED = \"\\u001B[31m\";\n     private static final String ANSI_GREEN = \"\\u001B[32m\";\n     public static final String ANSI_YELLOW = \"\\u001B[33m\";\n+    public static final String ANSI_BLUE = \"\\u001B[34m\";\n     private static final String ANSI_CYAN = \"\\u001B[36m\";\n \n-    public static void PrintHeader(String message) {\n+    public static void printHeader(String message) {\n         System.out.println(ANSI_CYAN + \"\\n===\" + message.toUpperCase() + \"===\\n\" + ANSI_RESET);\n     }\n \n-    public static void PrintSuccess(String message) {\n-        System.out.println(ANSI_GREEN + message + ANSI_RESET);\n+    public static void print(String message) {", "originalCommit": "bce98ed429eef081b6dc61706edac4ec48587f05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e51904d3d9416702e155d3832abe9976ea25357", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\nindex f8451ae23c3..fbfc6de4c9e 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n", "chunk": "@@ -19,7 +19,7 @@ public class ConsoleLogger {\n     }\n \n     public static void printSuccess(String message){\n-        System.out.println(ANSI_BLUE + message + ANSI_RESET);\n+        System.out.println(ANSI_GREEN + message + ANSI_RESET);\n     }\n \n     public static void printWarning(String message) {\n", "next_change": {"commit": "dbcc3df37ead89a705b3eb7f93927b46fee3957f", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\nindex fbfc6de4c9e..e5bd5bd93bd 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n", "chunk": "@@ -10,23 +10,43 @@ public class ConsoleLogger {\n     public static final String ANSI_BLUE = \"\\u001B[34m\";\n     private static final String ANSI_CYAN = \"\\u001B[36m\";\n \n+    /**\n+     * Prints a header with a new line before and after the message. Use this to create different sections.\n+     * @param message Header message to be printed for the section.\n+     */\n     public static void printHeader(String message) {\n         System.out.println(ANSI_CYAN + \"\\n===\" + message.toUpperCase() + \"===\\n\" + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging verbose.\n+     * @param message Message to be printed\n+     */\n     public static void print(String message) {\n         System.out.println(ANSI_BLUE + message + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging successful events.\n+     * @param message Message to be printed\n+     */\n     public static void printSuccess(String message){\n         System.out.println(ANSI_GREEN + message + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging warnings.\n+     * @param message Message to be printed\n+     */\n     public static void printWarning(String message) {\n \n         System.out.println(ANSI_YELLOW + message + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging fatal failures.\n+     * @param message Message to be printed\n+     */\n     public static void printFatal(String message) {\n         System.out.println(ANSI_RED + message + ANSI_RESET);\n     }\n", "next_change": {"commit": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\nindex e5bd5bd93bd..09ea96eef5b 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n", "chunk": "@@ -7,47 +7,21 @@ public class ConsoleLogger {\n     private static final String ANSI_RED = \"\\u001B[31m\";\n     private static final String ANSI_GREEN = \"\\u001B[32m\";\n     public static final String ANSI_YELLOW = \"\\u001B[33m\";\n-    public static final String ANSI_BLUE = \"\\u001B[34m\";\n     private static final String ANSI_CYAN = \"\\u001B[36m\";\n \n-    /**\n-     * Prints a header with a new line before and after the message. Use this to create different sections.\n-     * @param message Header message to be printed for the section.\n-     */\n-    public static void printHeader(String message) {\n+    public static void PrintHeader(String message) {\n         System.out.println(ANSI_CYAN + \"\\n===\" + message.toUpperCase() + \"===\\n\" + ANSI_RESET);\n     }\n \n-    /**\n-     * Prints a message to console. Use this for logging verbose.\n-     * @param message Message to be printed\n-     */\n-    public static void print(String message) {\n-        System.out.println(ANSI_BLUE + message + ANSI_RESET);\n-    }\n-\n-    /**\n-     * Prints a message to console. Use this for logging successful events.\n-     * @param message Message to be printed\n-     */\n-    public static void printSuccess(String message){\n+    public static void PrintSuccess(String message) {\n         System.out.println(ANSI_GREEN + message + ANSI_RESET);\n     }\n \n-    /**\n-     * Prints a message to console. Use this for logging warnings.\n-     * @param message Message to be printed\n-     */\n-    public static void printWarning(String message) {\n-\n+    public static void PrintWarning(String message) {\n         System.out.println(ANSI_YELLOW + message + ANSI_RESET);\n     }\n \n-    /**\n-     * Prints a message to console. Use this for logging fatal failures.\n-     * @param message Message to be printed\n-     */\n-    public static void printFatal(String message) {\n+    public static void PrintFatal(String message) {\n         System.out.println(ANSI_RED + message + ANSI_RESET);\n     }\n }\n", "next_change": {"commit": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\nindex 09ea96eef5b..f8451ae23c3 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n", "chunk": "@@ -7,21 +7,27 @@ public class ConsoleLogger {\n     private static final String ANSI_RED = \"\\u001B[31m\";\n     private static final String ANSI_GREEN = \"\\u001B[32m\";\n     public static final String ANSI_YELLOW = \"\\u001B[33m\";\n+    public static final String ANSI_BLUE = \"\\u001B[34m\";\n     private static final String ANSI_CYAN = \"\\u001B[36m\";\n \n-    public static void PrintHeader(String message) {\n+    public static void printHeader(String message) {\n         System.out.println(ANSI_CYAN + \"\\n===\" + message.toUpperCase() + \"===\\n\" + ANSI_RESET);\n     }\n \n-    public static void PrintSuccess(String message) {\n-        System.out.println(ANSI_GREEN + message + ANSI_RESET);\n+    public static void print(String message) {\n+        System.out.println(ANSI_BLUE + message + ANSI_RESET);\n     }\n \n-    public static void PrintWarning(String message) {\n+    public static void printSuccess(String message){\n+        System.out.println(ANSI_BLUE + message + ANSI_RESET);\n+    }\n+\n+    public static void printWarning(String message) {\n+\n         System.out.println(ANSI_YELLOW + message + ANSI_RESET);\n     }\n \n-    public static void PrintFatal(String message) {\n+    public static void printFatal(String message) {\n         System.out.println(ANSI_RED + message + ANSI_RESET);\n     }\n }\n", "next_change": {"commit": "dc8b31384497889439857b8c0ed30a037b1a1489", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\nindex f8451ae23c3..e5bd5bd93bd 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/ConsoleLogger.java\n", "chunk": "@@ -10,23 +10,43 @@ public class ConsoleLogger {\n     public static final String ANSI_BLUE = \"\\u001B[34m\";\n     private static final String ANSI_CYAN = \"\\u001B[36m\";\n \n+    /**\n+     * Prints a header with a new line before and after the message. Use this to create different sections.\n+     * @param message Header message to be printed for the section.\n+     */\n     public static void printHeader(String message) {\n         System.out.println(ANSI_CYAN + \"\\n===\" + message.toUpperCase() + \"===\\n\" + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging verbose.\n+     * @param message Message to be printed\n+     */\n     public static void print(String message) {\n         System.out.println(ANSI_BLUE + message + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging successful events.\n+     * @param message Message to be printed\n+     */\n     public static void printSuccess(String message){\n-        System.out.println(ANSI_BLUE + message + ANSI_RESET);\n+        System.out.println(ANSI_GREEN + message + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging warnings.\n+     * @param message Message to be printed\n+     */\n     public static void printWarning(String message) {\n \n         System.out.println(ANSI_YELLOW + message + ANSI_RESET);\n     }\n \n+    /**\n+     * Prints a message to console. Use this for logging fatal failures.\n+     * @param message Message to be printed\n+     */\n     public static void printFatal(String message) {\n         System.out.println(ANSI_RED + message + ANSI_RESET);\n     }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTA3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485855073", "body": "This class should be annotated with `@Fluent`.", "bodyText": "This class should be annotated with @Fluent.", "bodyHTML": "<p dir=\"auto\">This class should be annotated with <code>@Fluent</code>.</p>", "author": "abhipsaMisra", "createdAt": "2020-09-09T19:19:47Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An optional helper class for deserializing a digital twin\n+ */", "originalCommit": "bce98ed429eef081b6dc61706edac4ec48587f05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbcc3df37ead89a705b3eb7f93927b46fee3957f", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\nindex 2febf2ee429..700b4a3032d 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n", "chunk": "@@ -1,7 +1,9 @@\n package com.azure.digitaltwins.core.serialization;\n \n+import com.azure.core.annotation.Fluent;\n import com.fasterxml.jackson.annotation.JsonAnyGetter;\n import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n \n import java.util.HashMap;\n import java.util.Map;\n", "next_change": {"commit": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\ndeleted file mode 100644\nindex 700b4a3032d..00000000000\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n+++ /dev/null\n", "chunk": "@@ -1,44 +0,0 @@\n-package com.azure.digitaltwins.core.serialization;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * An optional helper class for deserializing a digital twin\n- */\n-@Fluent\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-public class ComponentMetadata {\n-\n-    /**\n-     * Model-defined writable properties' request state.\n-     */\n-    private final Map<String, Object> writeableProperties = new HashMap<>();\n-\n-    public ComponentMetadata() {}\n-\n-    /**\n-     * Gets the model-defined writable properties' request state.\n-     * For your convenience, the value of each map can be turned into an instance of {@link WritableProperty}.\n-     * @return The model-defined writable properties' request state.\n-     */\n-    @JsonAnyGetter\n-    public Map<String, Object> getWriteableProperties() {\n-        return writeableProperties;\n-    }\n-\n-    /**\n-     * Sets the model-defined writable properties' request state.\n-     * @return The ComponentMetadata object itself.\n-     */\n-    @JsonAnySetter\n-    ComponentMetadata setWritableProperties(String key, Object value) {\n-        this.writeableProperties.put(key, value);\n-        return this;\n-    }\n-}\n", "next_change": {"commit": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\nnew file mode 100644\nindex 00000000000..2febf2ee429\n--- /dev/null\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n", "chunk": "@@ -0,0 +1,40 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An optional helper class for deserializing a digital twin\n+ */\n+public class ComponentMetadata {\n+\n+    /**\n+     * Model-defined writable properties' request state.\n+     */\n+    private final Map<String, Object> writeableProperties = new HashMap<>();\n+\n+    public ComponentMetadata() {}\n+\n+    /**\n+     * Gets the model-defined writable properties' request state.\n+     * For your convenience, the value of each map can be turned into an instance of {@link WritableProperty}.\n+     * @return The model-defined writable properties' request state.\n+     */\n+    @JsonAnyGetter\n+    public Map<String, Object> getWriteableProperties() {\n+        return writeableProperties;\n+    }\n+\n+    /**\n+     * Sets the model-defined writable properties' request state.\n+     * @return The ComponentMetadata object itself.\n+     */\n+    @JsonAnySetter\n+    ComponentMetadata setWritableProperties(String key, Object value) {\n+        this.writeableProperties.put(key, value);\n+        return this;\n+    }\n+}\n", "next_change": null}]}}]}}, {"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\nindex 2febf2ee429..700b4a3032d 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n", "chunk": "@@ -9,6 +11,8 @@ import java.util.Map;\n /**\n  * An optional helper class for deserializing a digital twin\n  */\n+@Fluent\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class ComponentMetadata {\n \n     /**\n", "next_change": {"commit": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\ndeleted file mode 100644\nindex 700b4a3032d..00000000000\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n+++ /dev/null\n", "chunk": "@@ -1,44 +0,0 @@\n-package com.azure.digitaltwins.core.serialization;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * An optional helper class for deserializing a digital twin\n- */\n-@Fluent\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-public class ComponentMetadata {\n-\n-    /**\n-     * Model-defined writable properties' request state.\n-     */\n-    private final Map<String, Object> writeableProperties = new HashMap<>();\n-\n-    public ComponentMetadata() {}\n-\n-    /**\n-     * Gets the model-defined writable properties' request state.\n-     * For your convenience, the value of each map can be turned into an instance of {@link WritableProperty}.\n-     * @return The model-defined writable properties' request state.\n-     */\n-    @JsonAnyGetter\n-    public Map<String, Object> getWriteableProperties() {\n-        return writeableProperties;\n-    }\n-\n-    /**\n-     * Sets the model-defined writable properties' request state.\n-     * @return The ComponentMetadata object itself.\n-     */\n-    @JsonAnySetter\n-    ComponentMetadata setWritableProperties(String key, Object value) {\n-        this.writeableProperties.put(key, value);\n-        return this;\n-    }\n-}\n", "next_change": {"commit": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\nnew file mode 100644\nindex 00000000000..2febf2ee429\n--- /dev/null\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ComponentMetadata.java\n", "chunk": "@@ -0,0 +1,40 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An optional helper class for deserializing a digital twin\n+ */\n+public class ComponentMetadata {\n+\n+    /**\n+     * Model-defined writable properties' request state.\n+     */\n+    private final Map<String, Object> writeableProperties = new HashMap<>();\n+\n+    public ComponentMetadata() {}\n+\n+    /**\n+     * Gets the model-defined writable properties' request state.\n+     * For your convenience, the value of each map can be turned into an instance of {@link WritableProperty}.\n+     * @return The model-defined writable properties' request state.\n+     */\n+    @JsonAnyGetter\n+    public Map<String, Object> getWriteableProperties() {\n+        return writeableProperties;\n+    }\n+\n+    /**\n+     * Sets the model-defined writable properties' request state.\n+     * @return The ComponentMetadata object itself.\n+     */\n+    @JsonAnySetter\n+    ComponentMetadata setWritableProperties(String key, Object value) {\n+        this.writeableProperties.put(key, value);\n+        return this;\n+    }\n+}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485855339", "body": "`@Fluent` here, as well", "bodyText": "@Fluent here, as well", "bodyHTML": "<p dir=\"auto\"><code>@Fluent</code> here, as well</p>", "author": "abhipsaMisra", "createdAt": "2020-09-09T19:20:14Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Properties on a component that adhere to a specific model.\n+ */\n+public class ModelProperties {", "originalCommit": "bce98ed429eef081b6dc61706edac4ec48587f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MTk0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485861949", "bodyText": "Does this add any functionality? I haven't used this annotation before", "author": "timtay-microsoft", "createdAt": "2020-09-09T19:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dbcc3df37ead89a705b3eb7f93927b46fee3957f", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\nindex 25476591dfb..32df7b4e5e1 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\n", "chunk": "@@ -10,6 +12,8 @@ import java.util.Map;\n /**\n  * Properties on a component that adhere to a specific model.\n  */\n+@Fluent\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class ModelProperties {\n \n     /**\n", "next_change": {"commit": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\ndeleted file mode 100644\nindex 32df7b4e5e1..00000000000\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\n+++ /dev/null\n", "chunk": "@@ -1,68 +0,0 @@\n-package com.azure.digitaltwins.core.serialization;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * Properties on a component that adhere to a specific model.\n- */\n-@Fluent\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-public class ModelProperties {\n-\n-    /**\n-     * Information about the model a component conforms to. This field is present on every digital twin.\n-     */\n-    @JsonProperty(value = \"$metadata\", required = true)\n-    private ComponentMetadata metadata = new ComponentMetadata();\n-\n-    /**\n-     * The additional properties of the model. This field will contain any properties of the digital twin that are not already defined by the other strong types of this class.\n-     */\n-    private final Map<String, Object> customProperties = new HashMap<>();\n-\n-    /**\n-     * Gets the metadata about the model.\n-     * @return The model metadata.\n-     */\n-    public ComponentMetadata getMetadata() {\n-        return metadata;\n-    }\n-\n-    /**\n-     * Sets the model metadata.\n-     * @param metadata Model metadata.\n-     * @return The ModelProperties object itself.\n-     */\n-    public ModelProperties setMetadata(ComponentMetadata metadata) {\n-        this.metadata = metadata;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the custom properties\n-     * @return The custom properties\n-     */\n-    @JsonAnyGetter\n-    public Map<String, Object> getCustomProperties() {\n-        return customProperties;\n-    }\n-\n-    /**\n-     * Sets the custom properties\n-     * @param key The key of the additional property to be added to the digital twin.\n-     * @param value The value of the additional property to be added to the digital twin.\n-     * @return The ModelProperties object itself.\n-     */\n-    @JsonAnySetter\n-    public ModelProperties setCustomProperties(String key, Object value) {\n-        this.customProperties.put(key, value);\n-        return this;\n-    }\n-}\n", "next_change": {"commit": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\nnew file mode 100644\nindex 00000000000..25476591dfb\n--- /dev/null\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/serialization/ModelProperties.java\n", "chunk": "@@ -0,0 +1,64 @@\n+package com.azure.digitaltwins.core.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Properties on a component that adhere to a specific model.\n+ */\n+public class ModelProperties {\n+\n+    /**\n+     * Information about the model a component conforms to. This field is present on every digital twin.\n+     */\n+    @JsonProperty(value = \"$metadata\", required = true)\n+    private ComponentMetadata metadata = new ComponentMetadata();\n+\n+    /**\n+     * The additional properties of the model. This field will contain any properties of the digital twin that are not already defined by the other strong types of this class.\n+     */\n+    private final Map<String, Object> customProperties = new HashMap<>();\n+\n+    /**\n+     * Gets the metadata about the model.\n+     * @return The model metadata.\n+     */\n+    public ComponentMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    /**\n+     * Sets the model metadata.\n+     * @param metadata Model metadata.\n+     * @return The ModelProperties object itself.\n+     */\n+    public ModelProperties setMetadata(ComponentMetadata metadata) {\n+        this.metadata = metadata;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the custom properties\n+     * @return The custom properties\n+     */\n+    @JsonAnyGetter\n+    public Map<String, Object> getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    /**\n+     * Sets the custom properties\n+     * @param key The key of the additional property to be added to the digital twin.\n+     * @param value The value of the additional property to be added to the digital twin.\n+     * @return The ModelProperties object itself.\n+     */\n+    @JsonAnySetter\n+    public ModelProperties setCustomProperties(String key, Object value) {\n+        this.customProperties.put(key, value);\n+        return this;\n+    }\n+}\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTYwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485855603", "body": "While you are sprucing this up, we can actually do region sections in java, too.\r\n\r\n```java\r\n//region Models APIs\r\n...\r\n//endregion Models APIs\r\n```\r\n\r\nIntellij will let you collapse the code just like how C# does", "bodyText": "While you are sprucing this up, we can actually do region sections in java, too.\n//region Models APIs\n...\n//endregion Models APIs\nIntellij will let you collapse the code just like how C# does", "bodyHTML": "<p dir=\"auto\">While you are sprucing this up, we can actually do region sections in java, too.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"//region Models APIs\n...\n//endregion Models APIs\n\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span>region Models APIs</span>\n<span class=\"pl-c1\">...</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>endregion Models APIs</span></pre></div>\n<p dir=\"auto\">Intellij will let you collapse the code just like how C# does</p>", "author": "timtay-microsoft", "createdAt": "2020-09-09T19:20:44Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -221,6 +226,10 @@ public void deleteDigitalTwin(String digitalTwinId)\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n+    //==================================================================================================================================================\n+    // Relationship APIs", "originalCommit": "bce98ed429eef081b6dc61706edac4ec48587f05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2OTA3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14987#discussion_r485869072", "bodyText": "much better.", "author": "azabbasi", "createdAt": "2020-09-09T19:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "42f454cd3757ca471e32d8d49570a21be3652414", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\nindex 7d0c4f903b6..1bcda775bb1 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n", "chunk": "@@ -226,9 +224,9 @@ public final class DigitalTwinsClient {\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n-    //==================================================================================================================================================\n-    // Relationship APIs\n-    //==================================================================================================================================================\n+    //endregion\n+\n+    //region Relationship APIs\n \n     /**\n      * Creates a relationship on a digital twin.\n", "next_change": {"commit": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\nindex 1bcda775bb1..cd8c2274ec9 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n", "chunk": "@@ -224,10 +221,6 @@ public final class DigitalTwinsClient {\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n-    //endregion\n-\n-    //region Relationship APIs\n-\n     /**\n      * Creates a relationship on a digital twin.\n      *\n", "next_change": {"commit": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\nindex cd8c2274ec9..7d0c4f903b6 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n", "chunk": "@@ -221,6 +226,10 @@ public final class DigitalTwinsClient {\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n+    //==================================================================================================================================================\n+    // Relationship APIs\n+    //==================================================================================================================================================\n+\n     /**\n      * Creates a relationship on a digital twin.\n      *\n", "next_change": {"commit": "fe0e76ff95d30b3175eb173d1ff898466e99fc9e", "changed_code": [{"header": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\nindex 7d0c4f903b6..1bcda775bb1 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n", "chunk": "@@ -226,9 +224,9 @@ public final class DigitalTwinsClient {\n         return digitalTwinsAsyncClient.deleteDigitalTwinWithResponse(digitalTwinId, options, context).block();\n     }\n \n-    //==================================================================================================================================================\n-    // Relationship APIs\n-    //==================================================================================================================================================\n+    //endregion\n+\n+    //region Relationship APIs\n \n     /**\n      * Creates a relationship on a digital twin.\n", "next_change": null}]}}]}}]}}]}}, {"oid": "fcd81cd86fe924e3c1932afc7b1209f739c19ca4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fcd81cd86fe924e3c1932afc7b1209f739c19ca4", "message": "Move serialization package from implementation to the root package. Add Component samples", "committedDate": "2020-09-09T19:26:19Z", "type": "commit"}, {"oid": "7e51904d3d9416702e155d3832abe9976ea25357", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e51904d3d9416702e155d3832abe9976ea25357", "message": "Fix build issues", "committedDate": "2020-09-09T19:27:03Z", "type": "commit"}, {"oid": "08eeb7e4bc9164b1551bca2273bd6a2fc59444cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08eeb7e4bc9164b1551bca2273bd6a2fc59444cd", "message": "rebase onto master", "committedDate": "2020-09-09T19:29:55Z", "type": "commit"}, {"oid": "08eeb7e4bc9164b1551bca2273bd6a2fc59444cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08eeb7e4bc9164b1551bca2273bd6a2fc59444cd", "message": "rebase onto master", "committedDate": "2020-09-09T19:29:55Z", "type": "forcePushed"}, {"oid": "03cab61d050679dceb88c553a1ced7d403a30c86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/03cab61d050679dceb88c553a1ced7d403a30c86", "message": "Refactor constant variable names.", "committedDate": "2020-09-09T19:33:02Z", "type": "commit"}, {"oid": "42f454cd3757ca471e32d8d49570a21be3652414", "url": "https://github.com/Azure/azure-sdk-for-java/commit/42f454cd3757ca471e32d8d49570a21be3652414", "message": "Update DigitalTwinsClient.java", "committedDate": "2020-09-09T19:39:16Z", "type": "commit"}, {"oid": "dbcc3df37ead89a705b3eb7f93927b46fee3957f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbcc3df37ead89a705b3eb7f93927b46fee3957f", "message": "Address comments.", "committedDate": "2020-09-09T19:48:28Z", "type": "commit"}, {"oid": "a683ebdb243249c369f769b0beb0985c0e46c6f6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a683ebdb243249c369f769b0beb0985c0e46c6f6", "message": "Add Model API tests to ADT, fix a few ADT implementation details (#14791)\n\nFixed a few test assets as well. While they were accepted by the service when the context field was just one value, the service always returns a model such that the context is an array with one value instead. This makes it easier to test that models retrieved from the service match our expectations", "committedDate": "2020-09-09T20:00:34Z", "type": "commit"}, {"oid": "e633fec93e3e3ebcf4e14227695a362d9c61acbe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e633fec93e3e3ebcf4e14227695a362d9c61acbe", "message": "Move serialization package from implementation to the root package. Add Component samples", "committedDate": "2020-09-09T20:14:31Z", "type": "commit"}, {"oid": "15bc60cdc544527a37d6cf587d3fc454637cab3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/15bc60cdc544527a37d6cf587d3fc454637cab3c", "message": "Fix build issues", "committedDate": "2020-09-09T20:14:32Z", "type": "commit"}, {"oid": "aa2488338ca0f1a3e092b50705d94518b2168860", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa2488338ca0f1a3e092b50705d94518b2168860", "message": "rebase onto master", "committedDate": "2020-09-09T20:14:32Z", "type": "commit"}, {"oid": "f04811227a9381dee5856e0e5968371d0561707b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f04811227a9381dee5856e0e5968371d0561707b", "message": "Refactor constant variable names.", "committedDate": "2020-09-09T20:14:49Z", "type": "commit"}, {"oid": "fe0e76ff95d30b3175eb173d1ff898466e99fc9e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe0e76ff95d30b3175eb173d1ff898466e99fc9e", "message": "Update DigitalTwinsClient.java", "committedDate": "2020-09-09T20:14:50Z", "type": "commit"}, {"oid": "dc8b31384497889439857b8c0ed30a037b1a1489", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc8b31384497889439857b8c0ed30a037b1a1489", "message": "Address comments.", "committedDate": "2020-09-09T20:14:50Z", "type": "commit"}, {"oid": "07f8256a25cd3b920d3246c96269bfb1e3c96ca2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/07f8256a25cd3b920d3246c96269bfb1e3c96ca2", "message": "Rebase master", "committedDate": "2020-09-09T20:32:34Z", "type": "commit"}, {"oid": "8214b9b69591021d3e7157c9ca6875ff0445c6a6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8214b9b69591021d3e7157c9ca6875ff0445c6a6", "message": "Merge branch 'feature/adt/azabbasi/componentSamples' of https://github.com/Azure/azure-sdk-for-java into feature/adt/azabbasi/componentSamples", "committedDate": "2020-09-09T20:34:02Z", "type": "commit"}]}