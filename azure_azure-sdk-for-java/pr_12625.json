{"pr_number": 12625, "pr_title": "Update RecognizeOptions to take only optional params", "pr_author": "samvaity", "pr_createdAt": "2020-06-29T21:38:30Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12625", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MTc5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447271797", "body": "why do we make a copy of the user-provided options here?", "bodyText": "why do we make a copy of the user-provided options here?", "bodyHTML": "<p dir=\"auto\">why do we make a copy of the user-provided options here?</p>", "author": "srnagar", "createdAt": "2020-06-29T21:44:13Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -687,13 +726,14 @@ private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse)\n         return Mono.just(new PollResponse<>(status, operationResultPollResponse.getValue()));\n     }\n \n-    private static Flux<ByteBuffer> getByteBufferFlux(InputStream form, Flux<ByteBuffer> formData) {\n-        Flux<ByteBuffer> buffer;\n-        if (form != null) {\n-            buffer = Utility.toFluxByteBuffer(form);\n+    private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProvidedOptions) {\n+        if (userProvidedOptions != null) {\n+            return new RecognizeOptions()\n+                .setPollInterval(userProvidedOptions.getPollInterval())\n+                .setFormContentType(userProvidedOptions.getFormContentType())\n+                .setIncludeTextContent(userProvidedOptions.isIncludeTextContent());", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447277952", "body": "```suggestion\r\n     * @param length The exact length of the data. Size of the bytebuffer flux must be less than 50 MB.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param length The exact length of the data. Size of the file must be less than 50 MB.\n          \n          \n            \n                 * @param length The exact length of the data. Size of the bytebuffer flux must be less than 50 MB.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> length <span class=\"pl-smi\">The</span> exact length of the data. <span class=\"pl-smi\">Size</span> of the <span class=\"x x-first x-last\">file</span> must be less than <span class=\"pl-c1\">50</span> <span class=\"pl-c1\">MB</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> length <span class=\"pl-smi\">The</span> exact length of the data. <span class=\"pl-smi\">Size</span> of the <span class=\"x x-first x-last\">bytebuffer flux</span> must be less than <span class=\"pl-c1\">50</span> <span class=\"pl-c1\">MB</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "srnagar", "createdAt": "2020-06-29T21:58:27Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -271,10 +299,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * content on a form.\n+     * @param form The data of the form to recognize content information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB.", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODY1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447278654", "bodyText": "Actually, we should just remove this limit from the javadoc as the limit is controlled by the service and an error will be thrown from the service if the limit exceeds. This allows service to increase or decrease the limit dynamically.", "author": "srnagar", "createdAt": "2020-06-29T22:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDM4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447280387", "body": "Change `file` to `flux of bytebuffer`.", "bodyText": "Change file to flux of bytebuffer.", "bodyHTML": "<p dir=\"auto\">Change <code>file</code> to <code>flux of bytebuffer</code>.</p>", "author": "srnagar", "createdAt": "2020-06-29T22:04:12Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -383,10 +425,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * receipt data on the provided receipt document.\n+     * @param receipt The data of the document to recognize receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5MzM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447293366", "body": "`subscribe` inside another `subscribe` looks a bit odd. Can we instead use reactor pattern here?\r\n\r\n```java\r\nformRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(...)\r\n        .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\r\n        .subscribe(recognizedReceipts -> {...});\r\n```", "bodyText": "subscribe inside another subscribe looks a bit odd. Can we instead use reactor pattern here?\nformRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(...)\n        .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\n        .subscribe(recognizedReceipts -> {...});", "bodyHTML": "<p dir=\"auto\"><code>subscribe</code> inside another <code>subscribe</code> looks a bit odd. Can we instead use reactor pattern here?</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(...)\n        .flatMap(recognizePollingOperation -&gt; recognizePollingOperation.getFinalResult())\n        .subscribe(recognizedReceipts -&gt; {...});\"><pre>formRecognizerAsyncClient<span class=\"pl-k\">.</span>beginRecognizeReceiptsFromUrl(<span class=\"pl-c1\">...</span>)\n        .flatMap(recognizePollingOperation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> recognizePollingOperation<span class=\"pl-k\">.</span>getFinalResult())\n        .subscribe(recognizedReceipts <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {<span class=\"pl-c1\">...</span>});</pre></div>", "author": "srnagar", "createdAt": "2020-06-29T22:25:51Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -274,16 +329,68 @@ public void beginRecognizeReceiptsFromUrl() {\n     }\n \n     /**\n-     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long, FormContentType)}\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String, RecognizeOptions)}\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+        String receiptUrl = \"{file_source_url}\";\n+        boolean includeTextContent = true;\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n+            new RecognizeOptions()\n+                .setIncludeTextContent(includeTextContent)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .subscribe(recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n+                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                        RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447812115", "body": "In .NET we call this field `ContentType` only (without the `Form` prefix). Are we concerned about consistency in fields names? If `formContentType` feels more idiomatic to Java, I believe that's not a big concern on the .NET side and can be easily updated.", "bodyText": "In .NET we call this field ContentType only (without the Form prefix). Are we concerned about consistency in fields names? If formContentType feels more idiomatic to Java, I believe that's not a big concern on the .NET side and can be easily updated.", "bodyHTML": "<p dir=\"auto\">In .NET we call this field <code>ContentType</code> only (without the <code>Form</code> prefix). Are we concerned about consistency in fields names? If <code>formContentType</code> feels more idiomatic to Java, I believe that's not a big concern on the .NET side and can be easily updated.</p>", "author": "kinelski", "createdAt": "2020-06-30T16:20:46Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java", "diffHunk": "@@ -3,64 +3,19 @@\n package com.azure.ai.formrecognizer.models;\n \n import com.azure.core.annotation.Fluent;\n-import reactor.core.publisher.Flux;\n \n-import java.io.InputStream;\n-import java.nio.ByteBuffer;\n import java.time.Duration;\n \n /**\n  * Options that may be passed when using recognize APIs on Form Recognizer client.\n  */\n @Fluent\n public class RecognizeOptions {\n-    private final InputStream form;\n-    private final Flux<ByteBuffer> formData;\n-    private final long length;\n-    private final String formUrl;\n     private FormContentType formContentType;", "originalCommit": "f577718a56cdb0c08c186632cd02004cec6fa2f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMDM3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447900371", "bodyText": "I think we agreed to keep this model named FormContentType.\n@kristapratico and @jeremymeng can you confirm what Python and JS have?", "author": "samvaity", "createdAt": "2020-06-30T18:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTE2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447905164", "bodyText": "The model is called FormContentType as well in .NET. I'm talking about the formContentType, which is simply ContentType in .NET. I know it's private, but since you have the public getFormContentType method, I was wondering whether we should update its name in .NET.", "author": "kinelski", "createdAt": "2020-06-30T18:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNTYxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447915611", "bodyText": "We renamed the type to FormContentType to differentiate from general content type as only a handful content types are supported.", "author": "jeremymeng", "createdAt": "2020-06-30T19:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNDgwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447924808", "bodyText": "We are all in the same page with the name of the type.\nI think what @kinelski is pointing out is the name of the property. Currently .NET, JS, and Python have Content Type for the property name.", "author": "maririos", "createdAt": "2020-06-30T19:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MTU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447941577", "bodyText": "we don't have this in an option bag in JS.  for parameters it's just contentType", "author": "jeremymeng", "createdAt": "2020-06-30T19:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0OTY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r448049642", "bodyText": "I am inclined to keep it consistent with the property name unless we have any strong objections.", "author": "samvaity", "createdAt": "2020-07-01T00:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r448068066", "bodyText": "I am not against it, although I will like to understand why the deviation from the other languages though", "author": "maririos", "createdAt": "2020-07-01T01:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}], "type": "inlineReview"}, {"oid": "6e408233821e1a7a0504ae5976ab78fffea16d22", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e408233821e1a7a0504ae5976ab78fffea16d22", "message": "review comments", "committedDate": "2020-07-01T00:39:30Z", "type": "forcePushed"}, {"oid": "135dd4c46f61dc516099a0e9183f6349f541aac9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/135dd4c46f61dc516099a0e9183f6349f541aac9", "message": "review comments", "committedDate": "2020-07-01T21:26:11Z", "type": "forcePushed"}, {"oid": "3a328d17f91dd1e682c2591d926d8b980ee37694", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a328d17f91dd1e682c2591d926d8b980ee37694", "message": "review comments", "committedDate": "2020-07-01T21:32:26Z", "type": "forcePushed"}, {"oid": "dd30d74e367b57cd12ea938d1980e1e216d65165", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd30d74e367b57cd12ea938d1980e1e216d65165", "message": "update options to take optional params", "committedDate": "2020-07-02T02:48:28Z", "type": "commit"}, {"oid": "392d12999fb4a0100d4818f134311ef719552931", "url": "https://github.com/Azure/azure-sdk-for-java/commit/392d12999fb4a0100d4818f134311ef719552931", "message": "review comments", "committedDate": "2020-07-02T02:48:59Z", "type": "commit"}, {"oid": "e93d5fff08151176765039411f066c87ccffd6e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93d5fff08151176765039411f066c87ccffd6e6", "message": "rebase changes", "committedDate": "2020-07-02T03:46:45Z", "type": "commit"}, {"oid": "e93d5fff08151176765039411f066c87ccffd6e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93d5fff08151176765039411f066c87ccffd6e6", "message": "rebase changes", "committedDate": "2020-07-02T03:46:45Z", "type": "forcePushed"}, {"oid": "8af7125bed7abbc115af554f4cd7677a29e0ad0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8af7125bed7abbc115af554f4cd7677a29e0ad0c", "message": "rename formContentType", "committedDate": "2020-07-02T18:27:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjg5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r449232890", "body": "Use `forEach()` instead or you can also show the reactor pattern here:\r\n```java\r\nformRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\r\n     .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\r\n     .flatMap(recognizedReceipts -> Flux.fromIterable(recognizedReceipts))\r\n     .subscribe(recognizedReceipt -> {...});\r\n```", "bodyText": "Use forEach() instead or you can also show the reactor pattern here:\nformRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n     .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\n     .flatMap(recognizedReceipts -> Flux.fromIterable(recognizedReceipts))\n     .subscribe(recognizedReceipt -> {...});", "bodyHTML": "<p dir=\"auto\">Use <code>forEach()</code> instead or you can also show the reactor pattern here:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n     .flatMap(recognizePollingOperation -&gt; recognizePollingOperation.getFinalResult())\n     .flatMap(recognizedReceipts -&gt; Flux.fromIterable(recognizedReceipts))\n     .subscribe(recognizedReceipt -&gt; {...});\"><pre>formRecognizerAsyncClient<span class=\"pl-k\">.</span>beginRecognizeReceipts(buffer, receipt<span class=\"pl-k\">.</span>length())\n     .flatMap(recognizePollingOperation <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> recognizePollingOperation<span class=\"pl-k\">.</span>getFinalResult())\n     .flatMap(recognizedReceipts <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Flux</span><span class=\"pl-k\">.</span>fromIterable(recognizedReceipts))\n     .subscribe(recognizedReceipt <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {<span class=\"pl-c1\">...</span>});</pre></div>", "author": "srnagar", "createdAt": "2020-07-02T19:46:15Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -264,115 +323,170 @@ public void beginRecognizeReceiptsFromUrl() {\n                     }\n                 }\n             });\n-        });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n     }\n \n     /**\n-     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long, FormContentType)}\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String, RecognizeOptions)}\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+        String receiptUrl = \"{receiptUrl}\";\n+        boolean includeTextContent = true;\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n+            new RecognizeOptions()\n+                .setIncludeFieldElements(includeTextContent)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .flatMap(recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult())\n+            .subscribe(recognizedReceipts -> {\n+                for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                    RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n+                    System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n+                    FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n+                    if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n+                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                            merchantNameField.getFieldValue().asString(),\n+                            merchantNameField.getConfidence());\n+                    }\n+                    FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                    if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n+                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                            transactionDateField.getFieldValue().asDate(),\n+                            transactionDateField.getConfidence());\n+                    }\n+                    FormField receiptItemsField = recognizedFields.get(\"Items\");\n+                    System.out.printf(\"Receipt Items: %n\");\n+                    if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n+                        List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n+                        receiptItems.forEach(receiptItem -> {\n+                            if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n+                                receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n+                                    if (key.equals(\"Quantity\")) {\n+                                        if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n+                                            System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n+                                                formField.getFieldValue().asInteger(), formField.getConfidence());\n+                                        }\n+                                    }\n+                                });\n+                            }\n+                        });\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long)}\n      *\n      * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n      */\n     public void beginRecognizeReceipts() throws IOException {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType\n-        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n-        // Utility method to convert input stream to Byte buffer\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long\n+        File receipt = new File(\"{file_source_url}\");\n         Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n-        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length(), FormContentType.IMAGE_JPEG)\n-            .subscribe(recognizePollingOperation -> {\n+        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n+            .flatMap(recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n-                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                        RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n-                        Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n-                        System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n-                        FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n-                        if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n-                            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                                merchantNameField.getFieldValue().asString(),\n-                                merchantNameField.getConfidence());\n-                        }\n-                        FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                        if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n-                            System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                                transactionDateField.getFieldValue().asDate(),\n-                                transactionDateField.getConfidence());\n-                        }\n-                        FormField receiptItemsField = recognizedFields.get(\"Items\");\n-                        System.out.printf(\"Receipt Items: %n\");\n-                        if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n-                            List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n-                            receiptItems.forEach(receiptItem -> {\n-                                if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n-                                    receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n-                                        if (key.equals(\"Quantity\")) {\n-                                            if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n-                                                System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n-                                                    formField.getFieldValue().asInteger(), formField.getConfidence());\n-                                            }\n+                recognizePollingOperation.getFinalResult())\n+            .subscribe(recognizedReceipts -> {\n+                for (int i = 0; i < recognizedReceipts.size(); i++) {", "originalCommit": "8af7125bed7abbc115af554f4cd7677a29e0ad0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MTMzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r449241336", "bodyText": "Yep, I am preparing a follow-up PR for sample and snippets update to follow reactor pattern more!", "author": "samvaity", "createdAt": "2020-07-02T20:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjg5MA=="}], "type": "inlineReview"}, {"oid": "110ab12e942bbb7fcf7173ff78d449fa71173e0d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/110ab12e942bbb7fcf7173ff78d449fa71173e0d", "message": "checkstyle update", "committedDate": "2020-07-02T22:42:55Z", "type": "commit"}]}