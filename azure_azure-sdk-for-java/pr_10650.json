{"pr_number": 10650, "pr_title": "Adding support for autoscale throughput", "pr_author": "mbhaskar", "pr_createdAt": "2020-05-01T02:17:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10650", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427265", "body": "Fixed rebranded as Manual", "bodyText": "Fixed rebranded as Manual", "bodyHTML": "<p dir=\"auto\">Fixed rebranded as Manual</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:53:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDY2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774660", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427433", "body": "How about excluding Provisioned from the name?\r\n@j82w can you please check for consistency with .NET contracts as well.", "bodyText": "How about excluding Provisioned from the name?\n@j82w can you please check for consistency with .NET contracts as well.", "bodyHTML": "<p dir=\"auto\">How about excluding Provisioned from the name?<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/j82w/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/j82w\">@j82w</a> can you please check for consistency with .NET contracts as well.</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:54:18Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428174", "bodyText": "Its V4 we have a choice to improvise as well.", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MDg5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419190893", "bodyText": "Makes sense. It is createAutoScaledThroughput now.", "author": "mbhaskar", "createdAt": "2020-05-04T02:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2OTM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419369354", "bodyText": "@deborahc do you agree with this?", "author": "j82w", "createdAt": "2020-05-04T11:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwMjc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419502784", "bodyText": "How about: createAutoscaleThroughput for consistency. (the official autoscale name doesn't have the S in scale capitalized).", "author": "deborahc", "createdAt": "2020-05-04T15:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MDY2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419590667", "bodyText": "Oh yeah! I should lowercase the S. createAutoscaleThroughput should be the method name right?", "author": "mbhaskar", "createdAt": "2020-05-04T17:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxOTc5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420219790", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-05-05T15:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427544", "body": "autoScaleMaxThroughput", "bodyText": "autoScaleMaxThroughput", "bodyHTML": "<p dir=\"auto\">autoScaleMaxThroughput</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:54:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774829", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427943", "body": "Need more baking time for `autoUpgradethroughputIncrementPercentage`. Can it be exlucded from //build scope?", "bodyText": "Need more baking time for autoUpgradethroughputIncrementPercentage. Can it be exlucded from //build scope?", "bodyHTML": "<p dir=\"auto\">Need more baking time for <code>autoUpgradethroughputIncrementPercentage</code>. Can it be exlucded from //build scope?</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:56:55Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDg2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774867", "bodyText": "Made this method package private.", "author": "mbhaskar", "createdAt": "2020-05-01T23:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428114", "body": "getManualThrughput", "bodyText": "getManualThrughput", "bodyHTML": "<p dir=\"auto\">getManualThrughput</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:58:00Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDkzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774939", "bodyText": "Changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428460", "body": "How about inling the auto-scale related entries?\r\nWhat;s the value of nesting type?", "bodyText": "How about inling the auto-scale related entries?\nWhat;s the value of nesting type?", "bodyHTML": "<p dir=\"auto\">How about inling the auto-scale related entries?<br>\nWhat;s the value of nesting type?</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:59:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {\n+        return offer.getThroughput();\n+    }\n+\n+    /**\n+     * Gets offer autoscale properties.\n+     *\n+     * @return the offer autoscale properties\n+     */\n+    public OfferAutoscaleSettings getOfferAutoscaleProperties() {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODU2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428562", "bodyText": "It can be non-public for //build as well.", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTA0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775042", "bodyText": "Makes sense. Made package private", "author": "mbhaskar", "createdAt": "2020-05-01T23:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428718", "body": "How do CX UT?", "bodyText": "How do CX UT?", "bodyHTML": "<p dir=\"auto\">How do CX UT?</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:01:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MTEwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419191103", "bodyText": "Will try to redesign to make offer mockable in subsequent PRs.", "author": "mbhaskar", "createdAt": "2020-05-04T02:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428976", "body": "Between choice of ReqeustOptions vs overload: Isn't overload better from experience wise?", "bodyText": "Between choice of ReqeustOptions vs overload: Isn't overload better from experience wise?", "bodyHTML": "<p dir=\"auto\">Between choice of ReqeustOptions vs overload: Isn't overload better from experience wise?</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:02:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseRequestOptions.java", "diffHunk": "@@ -51,10 +53,16 @@ CosmosDatabaseRequestOptions setOfferThroughput(Integer offerThroughput) {\n         return this;\n     }\n \n+    CosmosDatabaseRequestOptions setThroughputProperties(ThroughputProperties throughputProperties) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTE4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775187", "bodyText": "Yeah, we use an overload. This is not a public method.", "author": "mbhaskar", "createdAt": "2020-05-01T23:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418429036", "body": "multi lines", "bodyText": "multi lines", "bodyHTML": "<p dir=\"auto\">multi lines</p>", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:03:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -908,6 +907,31 @@ private static void validateResource(Resource resource) {\n             headers.put(HttpConstants.HttpHeaders.OFFER_TYPE, options.getOfferType());\n         }\n \n+        if (options.getOfferThroughput() == null) {\n+            if (options.getThroughputProperties() != null) {\n+                Offer offer = ModelBridgeInternal.getOfferFromThroughputProperties(options.getThroughputProperties());\n+                final OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties\n+                    = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                if (offer.hasOfferThroughput() &&\n+                        (offer.getOfferAutoScaleSettings().getMaxThroughput() >= 0 ||\n+                             autoscaleAutoUpgradeProperties != null &&\n+                                 autoscaleAutoUpgradeProperties\n+                                     .getAutoscaleThroughputProperties()\n+                                     .getIncrementPercent() >= 0)) {\n+                    throw new IllegalArgumentException(\"Autoscale provisioned throughput can not be configured with \"\n+                                                           + \"fixed offer\");\n+                }\n+\n+                if (offer.hasOfferThroughput()) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_THROUGHPUT, options.getOfferThroughput().toString());\n+                } else if (offer.getOfferAutoScaleSettings() != null) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_AUTOPILOT_SETTINGS,\n+                                ModelBridgeInternal.toJsonFromJsonSerializable(offer.getOfferAutoScaleSettings()));\n+                }\n+            }\n+        }\n+", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTI4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775284", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-05-01T23:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418433281", "body": "I would use parametrized SqlQuerySpec instead of concating strings", "bodyText": "I would use parametrized SqlQuerySpec instead of concating strings", "bodyHTML": "<p dir=\"auto\">I would use parametrized SqlQuerySpec instead of concating strings</p>", "author": "moderakh", "createdAt": "2020-05-01T06:24:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,69 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775385", "bodyText": "Changed to use querySpec", "author": "mbhaskar", "createdAt": "2020-05-01T23:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418434146", "body": "autopilot is a v2 offer?", "bodyText": "autopilot is a v2 offer?", "bodyHTML": "<p dir=\"auto\">autopilot is a v2 offer?</p>", "author": "moderakh", "createdAt": "2020-05-01T06:28:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -26,6 +27,18 @@ public Offer(int offerThroughput) {\n         this.setContent(content);\n     }\n \n+    Offer(OfferAutoscaleSettings offerAutoscaleSettings) {\n+        super();\n+        this.setOfferVersion(Constants.Properties.OFFER_VERSION_V2);", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTQ5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775490", "bodyText": "Yes it is according to the offer payload I saw in Autopilot doc.", "author": "mbhaskar", "createdAt": "2020-05-01T23:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436485", "body": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\r\n\r\nPlease use CosmosDatabaseForTest.generateId()", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "bodyHTML": "<p dir=\"auto\">tests should not use static database name to avoid any potential issue with runnings tests in parallel.</p>\n<p dir=\"auto\">Please use CosmosDatabaseForTest.generateId()</p>", "author": "moderakh", "createdAt": "2020-05-01T06:40:54Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java", "diffHunk": "@@ -367,6 +370,33 @@ public void sessionTokenConsistencyCollectionDeleteCreateSameName() {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NjM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418996366", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-05-02T19:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436505", "body": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\r\n\r\nPlease use CosmosDatabaseForTest.generateId()", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "bodyHTML": "<p dir=\"auto\">tests should not use static database name to avoid any potential issue with runnings tests in parallel.</p>\n<p dir=\"auto\">Please use CosmosDatabaseForTest.generateId()</p>", "author": "moderakh", "createdAt": "2020-05-01T06:41:00Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java", "diffHunk": "@@ -108,6 +114,25 @@ public void deleteDatabase_DoesntExist() throws Exception {\n         validateFailure(deleteObservable, validator);\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTUzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775530", "bodyText": "Makes sense. Changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999482", "body": "it might worth to include the name of database and container in the sdk generated error message.", "bodyText": "it might worth to include the name of database and container in the sdk generated error message.", "bodyHTML": "<p dir=\"auto\">it might worth to include the name of database and container in the sdk generated error message.</p>", "author": "moderakh", "createdAt": "2020-05-02T19:44:01Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220018", "bodyText": "Added resource name", "author": "mbhaskar", "createdAt": "2020-05-05T15:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999534", "body": "it is worth including the name of the database and container in the sdk generated error message.", "bodyText": "it is worth including the name of the database and container in the sdk generated error message.", "bodyHTML": "<p dir=\"auto\">it is worth including the name of the database and container in the sdk generated error message.</p>", "author": "moderakh", "createdAt": "2020-05-02T19:44:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+                                                return this.database.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            }).map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Read the throughput throughput .\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999645", "body": "it is worth including the name of the database in the sdk generated error message.", "bodyText": "it is worth including the name of the database in the sdk generated error message.", "bodyHTML": "<p dir=\"auto\">it is worth including the name of the database in the sdk generated error message.</p>", "author": "moderakh", "createdAt": "2020-05-02T19:45:39Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTA2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781069", "bodyText": "@j82w lets please track it part of diagnostics improvement.", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDE0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220142", "bodyText": "Added resource name", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999663", "body": "ditto", "bodyText": "ditto", "bodyHTML": "<p dir=\"auto\">ditto</p>", "author": "moderakh", "createdAt": "2020-05-02T19:45:54Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+\n+                                                return this.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            })\n+                                            .map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Gets the throughput of the database\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                            .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDI1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220258", "bodyText": "Added resource name", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419000107", "body": "please add code sample snippet.\r\nsimilar to `AnalyticalStorageCodeSnippet` or `IndexPolicyCodeSnippet` as example.", "bodyText": "please add code sample snippet.\nsimilar to AnalyticalStorageCodeSnippet or IndexPolicyCodeSnippet as example.", "bodyHTML": "<p dir=\"auto\">please add code sample snippet.<br>\nsimilar to <code>AnalyticalStorageCodeSnippet</code> or <code>IndexPolicyCodeSnippet</code> as example.</p>", "author": "moderakh", "createdAt": "2020-05-02T19:49:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220453", "bodyText": "Added snippet", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419007436", "body": "remove second offer", "bodyText": "remove second offer", "bodyHTML": "<p dir=\"auto\">remove second offer</p>", "author": "j82w", "createdAt": "2020-05-02T21:00:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -34,7 +47,80 @@ public Offer(int offerThroughput) {\n     public Offer(String jsonString) {\n         super(jsonString);\n     }\n-    \n+\n+    /**\n+     * Instantiates a new Offer from object node.\n+     *\n+     * @param objectNode the object node\n+     */\n+    public Offer(ObjectNode objectNode) {\n+        super(objectNode);\n+    }\n+\n+    /**\n+     * Create fixed offer offer.\n+     *\n+     * @param throughput the throughput\n+     * @return the offer\n+     */\n+    public static Offer createManualOffer(int throughput) {\n+        return new Offer(throughput);\n+    }\n+\n+    /**\n+     * Create autoscale offer offer.", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDU2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220567", "bodyText": "Removed", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781500", "body": "Is the indentation right?\r\n\r\nIt looks very nested and deep. @moderakh ?", "bodyText": "Is the indentation right?\nIt looks very nested and deep. @moderakh ?", "bodyHTML": "<p dir=\"auto\">Is the indentation right?</p>\n<p dir=\"auto\">It looks very nested and deep. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/moderakh/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/moderakh\">@moderakh</a> ?</p>", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:11:27Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420477425", "bodyText": "It looks a bit weird, but this is correct. Also this is the best intellij could do :)", "author": "mbhaskar", "createdAt": "2020-05-06T00:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjYwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420516603", "bodyText": "The indentation is correct. The nesting is the result of reactive-stream chaining and lambdas", "author": "moderakh", "createdAt": "2020-05-06T02:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781794", "body": "In practice its only possible if name is invalid right? \r\nHow about reflecting the same in the exception message.", "bodyText": "In practice its only possible if name is invalid right?\nHow about reflecting the same in the exception message.", "bodyHTML": "<p dir=\"auto\">In practice its only possible if name is invalid right?<br>\nHow about reflecting the same in the exception message.</p>", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:12:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDc0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220747", "bodyText": "Added resource id in the error message which should help.", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419782692", "body": "```suggestion\r\n    public static ThroughputProperties createAutoscaledThroughput(int autoscaleMaxThroughput) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n          \n          \n            \n                public static ThroughputProperties createAutoscaledThroughput(int autoscaleMaxThroughput) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">ThroughputProperties</span> <span class=\"x x-first x-last\">createAutoScaledThroughput</span>(<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">autoScaleMaxThroughput</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">ThroughputProperties</span> <span class=\"x x-first x-last\">createAutoscaledThroughput</span>(<span class=\"pl-k\">int</span> <span class=\"x x-first x-last\">autoscaleMaxThroughput</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:14:58Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NzYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422387623", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-05-08T21:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg=="}], "type": "inlineReview"}, {"oid": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "url": "https://github.com/Azure/azure-sdk-for-java/commit/571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "message": "Autoscale/Autopilot support\n- Added ThroughputProperties class which contains factories for creating autoscaled or fixed throughput\n- Added ThroughputResponse class to fetch relevant details of offer response\n- Added overloads for database and container to create using throughput properties\n- Added read and replace overloads for database and container to read or replace throughput response", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "6c76f5bcce71d4282c02576af722d2d2197d70bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c76f5bcce71d4282c02576af722d2d2197d70bf", "message": "Fixing spotbug issue", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2be9d9426979f3e2e8e5926077b6bcb4ded060de", "message": "Adressing PR comments\nAdding additional tests", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "message": "Implementing PR comments", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "message": "Implementing PR comments", "committedDate": "2020-05-06T00:54:54Z", "type": "forcePushed"}, {"oid": "7258a7e6d43871be75cde97f736bb00917de1608", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7258a7e6d43871be75cde97f736bb00917de1608", "message": "Rebasing master.\nChanging autopilot tests from emulator to simple", "committedDate": "2020-05-06T01:00:12Z", "type": "commit"}, {"oid": "c9c999e2ed99614f9739b1f86105eaea8f18cfaa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9c999e2ed99614f9739b1f86105eaea8f18cfaa", "message": "Refactoring some implementation", "committedDate": "2020-05-07T21:38:15Z", "type": "commit"}, {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/191d86f5c2fa3094c5024c985a63ef132913aa62", "message": "Moving throughput tests to a new test class.", "committedDate": "2020-05-08T00:24:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422389583", "body": "Will it ship out?", "bodyText": "Will it ship out?", "bodyHTML": "<p dir=\"auto\">Will it ship out?</p>", "author": "kirankumarkolli", "createdAt": "2020-05-08T21:42:42Z", "path": "sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ThroughputPropertiesCodeSnippet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.models.ThroughputProperties;\n+\n+public class ThroughputPropertiesCodeSnippet {", "originalCommit": "191d86f5c2fa3094c5024c985a63ef132913aa62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MTQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422391455", "bodyText": "Yeah, this is public CodeSnippet", "author": "mbhaskar", "createdAt": "2020-05-08T21:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw=="}], "type": "inlineReview"}]}