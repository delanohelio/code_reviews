{"pr_number": 17883, "pr_title": "Add Storage File Share , File Datalake Perf Tests", "pr_author": "g2vinay", "pr_createdAt": "2020-11-30T21:28:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17883", "timeline": [{"oid": "039437f5a3da7661a5b95c9f13cfb7874b29e5f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/039437f5a3da7661a5b95c9f13cfb7874b29e5f8", "message": "add file share test", "committedDate": "2020-11-30T21:27:51Z", "type": "commit"}, {"oid": "e21858fd37bd3deda571e35aae2b4ba8f1d184a0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e21858fd37bd3deda571e35aae2b4ba8f1d184a0", "message": "perf tests", "committedDate": "2020-12-07T21:09:57Z", "type": "commit"}, {"oid": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a97110949f390eb0c762a3425ed7e1eaedae4b3", "message": "update tests", "committedDate": "2020-12-09T21:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDU1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539720551", "body": "This isn't being used", "bodyText": "This isn't being used", "bodyHTML": "<p dir=\"auto\">This isn't being used</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:17:51Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/AppendFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class AppendFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMTQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r540431467", "bodyText": "This and BUFFER_SIZE as a result", "author": "gapra-msft", "createdAt": "2020-12-10T19:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMTgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539721832", "body": "Can we move this into the base perf framework, this is likely something we'll want across SDKs.", "bodyText": "Can we move this into the base perf framework, this is likely something we'll want across SDKs.", "bodyHTML": "<p dir=\"auto\">Can we move this into the base perf framework, this is likely something we'll want across SDKs.</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:20:42Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/ReadFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class ReadFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-filev11-\" + UUID.randomUUID().toString();\n+\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    public ReadFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+        dataLakeFileClient = dataLakeDirectoryClient.getFileClient(FILE_NAME);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(dataLakeFileAsyncClient.create())\n+            .then(dataLakeFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), null, true))\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        dataLakeFileClient.read(DEV_NULL);\n+    }\n+\n+    static class NullOutputStream extends OutputStream {", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDkzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539724939", "body": "I'm seeing this code in multiple places, can we move it into the base framework as a utility method?", "bodyText": "I'm seeing this code in multiple places, can we move it into the base framework as a utility method?", "bodyHTML": "<p dir=\"auto\">I'm seeing this code in multiple places, can we move it into the base framework as a utility method?</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:27:30Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/core/FileTestBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.azure.storage.file.datalake.perf.core;// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.UUID;\n+\n+public abstract class FileTestBase<TOptions extends PerfStressOptions> extends DirectoryTest<TOptions> {\n+\n+    public static final int DEFAULT_BUFFER_SIZE = 8192;\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+\n+    public FileTestBase(TOptions options) {\n+        super(options);\n+\n+        String fileName = \"randomfiletest-\" + UUID.randomUUID().toString();\n+\n+        dataLakeFileClient =  dataLakeDirectoryClient.getFileClient(fileName);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(fileName);\n+    }\n+\n+    @Override\n+    public Mono<Void> setupAsync() {\n+        return dataLakeFileAsyncClient.create().then(super.cleanupAsync());\n+    }\n+\n+    public long copyStream(InputStream input, OutputStream out) throws IOException {", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTI3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539725271", "body": "This is in multiple locations as well", "bodyText": "This is in multiple locations as well", "bodyHTML": "<p dir=\"auto\">This is in multiple locations as well</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:28:18Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.share.perf.core.DirectoryTest;\n+import com.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-filev11-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        shareFileClient = shareDirectoryClient.getFileClient(FILE_NAME);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(shareFileAsyncClient.create(options.getSize()))\n+            .then(shareFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), options.getSize()))\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        shareFileClient.download(DEV_NULL);\n+    }\n+\n+    static class NullOutputStream extends OutputStream {", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539725649", "body": "This isn't used", "bodyText": "This isn't used", "bodyHTML": "<p dir=\"auto\">This isn't used</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:29:12Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/DownloadToFileShareTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.share.perf.core.DirectoryTest;\n+import com.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class DownloadToFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNjIxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539726217", "body": "Any reason we are adding to the size of the file?", "bodyText": "Any reason we are adding to the size of the file?", "bodyHTML": "<p dir=\"auto\">Any reason we are adding to the size of the file?</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:30:15Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/core/FileTestBase.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.azure.storage.file.share.perf.core;// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public abstract class FileTestBase<TOptions extends PerfStressOptions> extends DirectoryTest<TOptions> {\n+\n+    public static final int DEFAULT_BUFFER_SIZE = 8192;\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    public FileTestBase(TOptions options) {\n+        super(options);\n+\n+        String fileName = \"randomfiletest-\" + UUID.randomUUID().toString();\n+\n+        shareFileClient =  shareDirectoryClient.getFileClient(fileName);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(fileName);\n+    }\n+\n+    @Override\n+    public Mono<Void> setupAsync() {\n+        return shareFileAsyncClient.create(options.getSize()+DEFAULT_BUFFER_SIZE).then(super.cleanupAsync());", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNjc2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539726765", "body": "We should use `Configuration` so we can pass `STORAGE_CONNECTION_STRING` via system properties or environment variables", "bodyText": "We should use Configuration so we can pass STORAGE_CONNECTION_STRING via system properties or environment variables", "bodyHTML": "<p dir=\"auto\">We should use <code>Configuration</code> so we can pass <code>STORAGE_CONNECTION_STRING</code> via system properties or environment variables</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:31:27Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.storage.file.share.ShareServiceAsyncClient;\n+import com.azure.storage.file.share.ShareServiceClient;\n+import com.azure.storage.file.share.ShareServiceClientBuilder;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+\n+    protected final ShareServiceClient shareServiceClient;\n+    protected final ShareServiceAsyncClient shareServiceAsyncClient;\n+\n+\n+    public ServiceTest(TOptions options) {\n+        super(options);\n+        String connectionString = System.getenv(\"STORAGE_CONNECTION_STRING\");", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNzE2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539727161", "body": "Not used", "bodyText": "Not used", "bodyHTML": "<p dir=\"auto\">Not used</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:32:15Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import com.microsoft.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+import com.microsoft.azure.storage.file.share.perf.core.FileTestBase;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final CloudFile cloudFile;\n+\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNzQ0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r539727446", "body": "Why are we doing this on terminate?", "bodyText": "Why are we doing this on terminate?", "bodyHTML": "<p dir=\"auto\">Why are we doing this on terminate?</p>", "author": "alzimmermsft", "createdAt": "2020-12-09T23:32:51Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import com.microsoft.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+import com.microsoft.azure.storage.file.share.perf.core.FileTestBase;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final CloudFile cloudFile;\n+\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        try {\n+            cloudFile = cloudFileDirectory.getFileReference(FILE_NAME);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .doOnTerminate(() -> {", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNTE0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r540425148", "body": "Should we undo this * import? Not sure if this matters cause its just the perf package, ", "bodyText": "Should we undo this * import? Not sure if this matters cause its just the perf package,", "bodyHTML": "<p dir=\"auto\">Should we undo this * import? Not sure if this matters cause its just the perf package,</p>", "author": "gapra-msft", "createdAt": "2020-12-10T19:07:18Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/App.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+import com.azure.storage.blob.perf.*;", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMTk0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r540431949", "body": "Do we have to upload as part of setup?", "bodyText": "Do we have to upload as part of setup?", "bodyHTML": "<p dir=\"auto\">Do we have to upload as part of setup?</p>", "author": "gapra-msft", "createdAt": "2020-12-10T19:18:36Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/AppendFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class AppendFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+\n+    public AppendFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+        dataLakeFileClient = dataLakeDirectoryClient.getFileClient(FILE_NAME);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(dataLakeFileAsyncClient.create())\n+            .then(dataLakeFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), null, true))", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MzQ5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r541453495", "bodyText": "Probably not, assuming we can append immediately after create.", "author": "mikeharder", "createdAt": "2020-12-12T00:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMTk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNzIyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r540537228", "body": "FILE_SYSTEM_NAME", "bodyText": "FILE_SYSTEM_NAME", "bodyHTML": "<p dir=\"auto\">FILE_SYSTEM_NAME</p>", "author": "gapra-msft", "createdAt": "2020-12-10T22:16:10Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/core/FileSystemTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileSystemClient;\n+import com.azure.storage.file.share.ShareAsyncClient;\n+import com.azure.storage.file.share.ShareClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+public abstract class FileSystemTest<TOptions extends PerfStressOptions> extends ServiceTest<TOptions> {\n+    private static final String SHARE_NAME = \"perfstress-dl-\" + UUID.randomUUID().toString();", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46962340935cd01ed857b75dfd5b0bf115f59420", "url": "https://github.com/Azure/azure-sdk-for-java/commit/46962340935cd01ed857b75dfd5b0bf115f59420", "message": "update storage tests", "committedDate": "2020-12-14T21:09:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NTQyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r541445428", "body": "Why is this API being removed?", "bodyText": "Why is this API being removed?", "bodyHTML": "<p dir=\"auto\">Why is this API being removed?</p>", "author": "mikeharder", "createdAt": "2020-12-12T00:12:07Z", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/TestDataCreationHelper.java", "diffHunk": "@@ -127,10 +127,6 @@ public synchronized void reset() {\n             this.pos = this.mark;\n         }\n \n-        @Override", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTYxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r541451619", "body": "Is there a reason the perf tests for Blob, FileDataLake, and FileShare are in a single perf project, instead of three separate perf projects?  In .NET, we are currently planning to use one perf project per library, rather than one perf project per service folder.\r\n\r\nThis is more about code organization since the test results should be the same either way.  There might be a slight perf impact to loading unnecessary dependencies in the shared project, but this should be negligible.", "bodyText": "Is there a reason the perf tests for Blob, FileDataLake, and FileShare are in a single perf project, instead of three separate perf projects?  In .NET, we are currently planning to use one perf project per library, rather than one perf project per service folder.\nThis is more about code organization since the test results should be the same either way.  There might be a slight perf impact to loading unnecessary dependencies in the shared project, but this should be negligible.", "bodyHTML": "<p dir=\"auto\">Is there a reason the perf tests for Blob, FileDataLake, and FileShare are in a single perf project, instead of three separate perf projects?  In .NET, we are currently planning to use one perf project per library, rather than one perf project per service folder.</p>\n<p dir=\"auto\">This is more about code organization since the test results should be the same either way.  There might be a slight perf impact to loading unnecessary dependencies in the shared project, but this should be negligible.</p>", "author": "mikeharder", "createdAt": "2020-12-12T00:24:53Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/App.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage;\n+\n+import com.azure.perf.test.core.PerfStressProgram;\n+import com.azure.storage.blob.perf.*;\n+import com.azure.storage.file.datalake.perf.AppendFileDatalakeTest;", "originalCommit": "6a97110949f390eb0c762a3425ed7e1eaedae4b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r541451789", "bodyText": "My preference is one perf project per library, but if the Java team feels strongly the other way then I'm OK with it.", "author": "mikeharder", "createdAt": "2020-12-12T00:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r541451975", "bodyText": "I prefer smaller perf projects since there are less tests per project, the test names are less likely to conflict, etc.", "author": "mikeharder", "createdAt": "2020-12-12T00:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg2OTM2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542869362", "body": "Should this return `0` or `-1`?", "bodyText": "Should this return 0 or -1?", "bodyHTML": "<p dir=\"auto\">Should this return <code>0</code> or <code>-1</code>?</p>", "author": "mikeharder", "createdAt": "2020-12-14T22:24:18Z", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/NullInputStream.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.perf.test.core;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * The Null Input Stream class, applicable to JDK 8.\n+ */\n+public class NullInputStream extends InputStream {\n+    @Override\n+    public int read() throws IOException {\n+        return 0;", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg3MDA1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542870058", "body": "NIT: Empty line", "bodyText": "NIT: Empty line", "bodyHTML": "<p dir=\"auto\">NIT: Empty line</p>", "author": "mikeharder", "createdAt": "2020-12-14T22:24:56Z", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/NullOutputStream.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.perf.test.core;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * The Null Output Stream class, applicable to JDK 8.\n+ */\n+public class NullOutputStream extends OutputStream {\n+    @Override\n+    public void write(int b) {\n+", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg3Njk3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542876979", "body": "I think this could be slightly optimized by creating the input stream once and resetting before each operation:\r\n\r\n```java\r\n    protected final InputStream inputStream;\r\n\r\n    public AppendFileDatalakeTest(PerfStressOptions options) {\r\n        inputStream = TestDataCreationHelper.createRandomInputStream(options.getSize());\r\n        inputStream.mark();\r\n    }\r\n\r\n    public void run() {\r\n        inputStream.reset();\r\n        dataLakeFileClient.append(inputStream, 0, options.getSize());\r\n    }\r\n```", "bodyText": "I think this could be slightly optimized by creating the input stream once and resetting before each operation:\n    protected final InputStream inputStream;\n\n    public AppendFileDatalakeTest(PerfStressOptions options) {\n        inputStream = TestDataCreationHelper.createRandomInputStream(options.getSize());\n        inputStream.mark();\n    }\n\n    public void run() {\n        inputStream.reset();\n        dataLakeFileClient.append(inputStream, 0, options.getSize());\n    }", "bodyHTML": "<p dir=\"auto\">I think this could be slightly optimized by creating the input stream once and resetting before each operation:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    protected final InputStream inputStream;\n\n    public AppendFileDatalakeTest(PerfStressOptions options) {\n        inputStream = TestDataCreationHelper.createRandomInputStream(options.getSize());\n        inputStream.mark();\n    }\n\n    public void run() {\n        inputStream.reset();\n        dataLakeFileClient.append(inputStream, 0, options.getSize());\n    }\"><pre>    <span class=\"pl-k\">protected</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">InputStream</span> inputStream;\n\n    <span class=\"pl-k\">public</span> AppendFileDatalakeTest(<span class=\"pl-smi\">PerfStressOptions</span> options) {\n        inputStream <span class=\"pl-k\">=</span> <span class=\"pl-smi\">TestDataCreationHelper</span><span class=\"pl-k\">.</span>createRandomInputStream(options<span class=\"pl-k\">.</span>getSize());\n        inputStream<span class=\"pl-k\">.</span>mark();\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> run() {\n        inputStream<span class=\"pl-k\">.</span>reset();\n        dataLakeFileClient<span class=\"pl-k\">.</span>append(inputStream, <span class=\"pl-c1\">0</span>, options<span class=\"pl-k\">.</span>getSize());\n    }</pre></div>", "author": "mikeharder", "createdAt": "2020-12-14T22:31:35Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/AppendFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class AppendFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+\n+    public AppendFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+        dataLakeFileClient = dataLakeDirectoryClient.getFileClient(FILE_NAME);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(dataLakeFileAsyncClient.create())\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        dataLakeFileClient.append(TestDataCreationHelper.createRandomInputStream(options.getSize()),", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjE2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542916160", "body": "@alzimmermsft: Do you know if the `randomByteBufferFlux` could be reused in the same way as the `InputStream` above?  Or does each call to `runAsync()` require creating a new `randomByteBufferFlux`?", "bodyText": "@alzimmermsft: Do you know if the randomByteBufferFlux could be reused in the same way as the InputStream above?  Or does each call to runAsync() require creating a new randomByteBufferFlux?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/alzimmermsft/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alzimmermsft\">@alzimmermsft</a>: Do you know if the <code>randomByteBufferFlux</code> could be reused in the same way as the <code>InputStream</code> above?  Or does each call to <code>runAsync()</code> require creating a new <code>randomByteBufferFlux</code>?</p>", "author": "mikeharder", "createdAt": "2020-12-14T23:16:44Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/AppendFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class AppendFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+\n+    public AppendFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+        dataLakeFileClient = dataLakeDirectoryClient.getFileClient(FILE_NAME);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(dataLakeFileAsyncClient.create())\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        dataLakeFileClient.append(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n+            0, options.getSize());\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return dataLakeFileAsyncClient.append(createRandomByteBufferFlux(options.getSize()), 0, options.getSize());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNTA5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r543525093", "bodyText": "randomByteBufferFlux is safe to re-use as it'll create window ByteBuffers each time it is consumed.", "author": "alzimmermsft", "createdAt": "2020-12-15T17:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NTA3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r543645074", "bodyText": "@g2vinay: Let's try reusing the randomByteBufferFlux.", "author": "mikeharder", "createdAt": "2020-12-15T19:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4NjgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r546186832", "bodyText": "For datalake append API, reusing the byte buffer flux, doesn't work, for other APIs, it works.\nI'll file an issue for this.", "author": "g2vinay", "createdAt": "2020-12-19T03:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyNTAyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542925027", "body": "Reuse input stream.", "bodyText": "Reuse input stream.", "bodyHTML": "<p dir=\"auto\">Reuse input stream.</p>", "author": "mikeharder", "createdAt": "2020-12-14T23:36:53Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/UploadFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class UploadFileDatalakeTest extends FileTestBase<PerfStressOptions> {\n+    public UploadFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        dataLakeFileClient.upload(createRandomInputStream(options.getSize()), options.getSize(), true);", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MDY2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542980666", "body": "The perf impact should be negligible, but as a principle it would be better to call `TEMP_FILE.toString()` once and store the result in a variable, rather than calling it every iteration.", "bodyText": "The perf impact should be negligible, but as a principle it would be better to call TEMP_FILE.toString() once and store the result in a variable, rather than calling it every iteration.", "bodyHTML": "<p dir=\"auto\">The perf impact should be negligible, but as a principle it would be better to call <code>TEMP_FILE.toString()</code> once and store the result in a variable, rather than calling it every iteration.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:43:20Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/UploadFromFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class UploadFromFileDatalakeTest extends FileTestBase<PerfStressOptions> {\n+\n+    private static final Path TEMP_FILE;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public UploadFromFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(createTempFile());\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return deleteTempFile().then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> createTempFile() {\n+        try (InputStream inputStream = createRandomInputStream(options.getSize());\n+             OutputStream outputStream = new FileOutputStream(TEMP_FILE.toString())) {\n+            copyStream(inputStream, outputStream);\n+            return Mono.empty();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private Mono<Void> deleteTempFile() {\n+        try {\n+            Files.delete(TEMP_FILE);\n+            return Mono.empty();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        dataLakeFileClient.uploadFromFile(TEMP_FILE.toString(), true);", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MDg0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542980848", "body": "You might want to move this into a shared helper method for other tests which need a temp file with random data.", "bodyText": "You might want to move this into a shared helper method for other tests which need a temp file with random data.", "bodyHTML": "<p dir=\"auto\">You might want to move this into a shared helper method for other tests which need a temp file with random data.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:43:56Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/UploadFromFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class UploadFromFileDatalakeTest extends FileTestBase<PerfStressOptions> {\n+\n+    private static final Path TEMP_FILE;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public UploadFromFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(createTempFile());\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return deleteTempFile().then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> createTempFile() {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MTY4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542981686", "body": "I think this is unnecessary (and makes cleanup slightly slower) since deleting the file system will automatically delete the directory.", "bodyText": "I think this is unnecessary (and makes cleanup slightly slower) since deleting the file system will automatically delete the directory.", "bodyHTML": "<p dir=\"auto\">I think this is unnecessary (and makes cleanup slightly slower) since deleting the file system will automatically delete the directory.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:46:09Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/core/DirectoryTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeDirectoryClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+public abstract class DirectoryTest<TOptions extends PerfStressOptions> extends FileSystemTest<TOptions> {\n+    private static final String DIRECTORY_NAME = \"perfstress-dl-\" + UUID.randomUUID().toString();\n+\n+    protected final DataLakeDirectoryClient dataLakeDirectoryClient;\n+    protected final DataLakeDirectoryAsyncClient dataLakeDirectoryAsyncClient;\n+\n+    public DirectoryTest(TOptions options) {\n+        super(options);\n+        // Setup the container clients\n+        dataLakeDirectoryClient = dataLakeFileSystemClient.getDirectoryClient(DIRECTORY_NAME);\n+        dataLakeDirectoryAsyncClient = dataLakeFileSystemAsyncClient.getDirectoryAsyncClient(DIRECTORY_NAME);\n+    }\n+\n+    // NOTE: the pattern setup the parent first, then yourself.\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(dataLakeDirectoryAsyncClient.create()).then();\n+    }\n+\n+    // NOTE: the pattern, cleanup yourself, then the parent.\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return dataLakeDirectoryAsyncClient.delete().then(super.globalCleanupAsync());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MjI4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542982281", "body": "I think this is unnecessary (and makes cleanup slightly slower) since deleting the file system will automatically delete the file.", "bodyText": "I think this is unnecessary (and makes cleanup slightly slower) since deleting the file system will automatically delete the file.", "bodyHTML": "<p dir=\"auto\">I think this is unnecessary (and makes cleanup slightly slower) since deleting the file system will automatically delete the file.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:47:41Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/core/FileTestBase.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.UUID;\n+\n+public abstract class FileTestBase<TOptions extends PerfStressOptions> extends DirectoryTest<TOptions> {\n+\n+    public static final int DEFAULT_BUFFER_SIZE = 8192;\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+\n+    public FileTestBase(TOptions options) {\n+        super(options);\n+\n+        String fileName = \"randomfiletest-\" + UUID.randomUUID().toString();\n+\n+        dataLakeFileClient =  dataLakeDirectoryClient.getFileClient(fileName);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(fileName);\n+    }\n+\n+    @Override\n+    public Mono<Void> setupAsync() {\n+        return dataLakeFileAsyncClient.create().then(super.cleanupAsync());\n+    }\n+\n+    public long copyStream(InputStream input, OutputStream out) throws IOException {\n+        long transferred = 0;\n+        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n+        int read;\n+        while ((read = input.read(buffer, 0, DEFAULT_BUFFER_SIZE)) >= 0) {\n+            out.write(buffer, 0, read);\n+            transferred += read;\n+        }\n+        return transferred;\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        return dataLakeFileAsyncClient.delete().then(super.cleanupAsync());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MjM0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542982345", "body": "NIT: Extra blank line", "bodyText": "NIT: Extra blank line", "bodyHTML": "<p dir=\"auto\">NIT: Extra blank line</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:47:55Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.implementation.connectionstring.StorageEndpoint;\n+import com.azure.storage.file.datalake.DataLakeServiceAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeServiceClient;\n+import com.azure.storage.file.datalake.DataLakeServiceClientBuilder;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+\n+    protected final DataLakeServiceClient dataLakeServiceClient;\n+    protected final DataLakeServiceAsyncClient dataLakeServiceAsyncClient;\n+", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4Mjg5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542982897", "body": "I recommend adding a helper method in the PerfTest base class to get an env var and throw if not set.  Example in .NET:\r\n\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67-L75", "bodyText": "I recommend adding a helper method in the PerfTest base class to get an env var and throw if not set.  Example in .NET:\nhttps://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67-L75", "bodyHTML": "<p dir=\"auto\">I recommend adding a helper method in the PerfTest base class to get an env var and throw if not set.  Example in .NET:</p>\n<p dir=\"auto\"><a href=\"https://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67-L75\">https://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67-L75</a></p>", "author": "mikeharder", "createdAt": "2020-12-15T01:49:34Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/core/ServiceTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf.core;\n+\n+import com.azure.core.util.CoreUtils;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.PerfStressTest;\n+import com.azure.storage.common.StorageSharedKeyCredential;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import com.azure.storage.common.implementation.connectionstring.StorageEndpoint;\n+import com.azure.storage.file.datalake.DataLakeServiceAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeServiceClient;\n+import com.azure.storage.file.datalake.DataLakeServiceClientBuilder;\n+\n+public abstract class ServiceTest<TOptions extends PerfStressOptions> extends PerfStressTest<TOptions> {\n+\n+    protected final DataLakeServiceClient dataLakeServiceClient;\n+    protected final DataLakeServiceAsyncClient dataLakeServiceAsyncClient;\n+\n+\n+    public ServiceTest(TOptions options) {\n+        super(options);\n+        String connectionString = System.getenv(\"STORAGE_CONNECTION_STRING\");", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4NjY0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r546186647", "bodyText": "We already have it in azure-core, updated to use that.", "author": "g2vinay", "createdAt": "2020-12-19T03:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4Mjg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MzYwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542983602", "body": "I think this is unnecessary since deleting the share will delete the file.", "bodyText": "I think this is unnecessary since deleting the share will delete the file.", "bodyHTML": "<p dir=\"auto\">I think this is unnecessary since deleting the share will delete the file.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:51:34Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.NullOutputStream;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-filev11-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        shareFileClient = shareDirectoryClient.getFileClient(FILE_NAME);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(shareFileAsyncClient.create(options.getSize()))\n+            .then(shareFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), options.getSize()))\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        shareFileClient.download(DEV_NULL);\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return shareFileAsyncClient.download()\n+            .map(b -> {\n+                int readCount = 0;\n+                int remaining = b.remaining();\n+                while (readCount < remaining) {\n+                    int expectedReadCount = Math.min(remaining - readCount, BUFFER_SIZE);\n+                    b.get(buffer, 0, expectedReadCount);\n+                    readCount += expectedReadCount;\n+                }\n+                return 1;\n+            }).then();\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalCleanupAsync() {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NDk5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542984991", "body": "Each instance of this test needs to write to a unique file, but within an instance I believe each operation can write to the same file.  So I think you can create the file in `setupAsync()`, save the name in an instance variable, then delete the file in `cleanupAsync()`.  I slightly prefer deleting in `cleanupAsync()` as opposed to using `deleteOnExit()` since it's more similar to other languages and will also allow us to see errors during deletion if it fails for some reason.", "bodyText": "Each instance of this test needs to write to a unique file, but within an instance I believe each operation can write to the same file.  So I think you can create the file in setupAsync(), save the name in an instance variable, then delete the file in cleanupAsync().  I slightly prefer deleting in cleanupAsync() as opposed to using deleteOnExit() since it's more similar to other languages and will also allow us to see errors during deletion if it fails for some reason.", "bodyHTML": "<p dir=\"auto\">Each instance of this test needs to write to a unique file, but within an instance I believe each operation can write to the same file.  So I think you can create the file in <code>setupAsync()</code>, save the name in an instance variable, then delete the file in <code>cleanupAsync()</code>.  I slightly prefer deleting in <code>cleanupAsync()</code> as opposed to using <code>deleteOnExit()</code> since it's more similar to other languages and will also allow us to see errors during deletion if it fails for some reason.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:55:21Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/DownloadToFileShareTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class DownloadToFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    public DownloadToFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        shareFileClient = shareDirectoryClient.getFileClient(FILE_NAME);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(FILE_NAME);\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(shareFileAsyncClient.create(options.getSize()))\n+            .then(shareFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), options.getSize()))\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        File file = new File(UUID.randomUUID().toString());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4Njc1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r546186758", "bodyText": "The API expects the file to not exist already, so we can't use a single file per thread here.\nThe Track 1 API can reuse the same file, so I'll file an issue here for the storage team to look at.", "author": "g2vinay", "createdAt": "2020-12-19T03:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NDk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNzAwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547007003", "bodyText": "Yes, I think an overload should be added with a boolean overwrite parameter.  In the meantime, can you compare the perf of creating a new file every time, with using a single file but deleting the file after each download?  I'm a little concerned about how much disk space this test could use if it keeps creating more and more files.", "author": "mikeharder", "createdAt": "2020-12-22T00:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NDk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NTc3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542985770", "body": "Reuse input stream.", "bodyText": "Reuse input stream.", "bodyHTML": "<p dir=\"auto\">Reuse input stream.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:57:19Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/UploadFileShareTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class UploadFileShareTest extends FileTestBase<PerfStressOptions> {\n+    public UploadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        shareFileClient.upload(createRandomInputStream(options.getSize()), options.getSize());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NTk2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542985964", "body": "Cache file name as string.", "bodyText": "Cache file name as string.", "bodyHTML": "<p dir=\"auto\">Cache file name as string.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:57:51Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/UploadFromFileShareTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class UploadFromFileShareTest extends FileTestBase<PerfStressOptions> {\n+\n+    private static final Path TEMP_FILE;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public UploadFromFileShareTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(createTempFile());\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return deleteTempFile().then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> createTempFile() {\n+        try (InputStream inputStream = createRandomInputStream(options.getSize());\n+             OutputStream outputStream = new FileOutputStream(TEMP_FILE.toString())) {\n+            copyStream(inputStream, outputStream);\n+            return Mono.empty();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private Mono<Void> deleteTempFile() {\n+        try {\n+            Files.delete(TEMP_FILE);\n+            return Mono.empty();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        shareFileClient.uploadFromFile(TEMP_FILE.toString());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NjEyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542986120", "body": "Unnecessary since delete share will delete directory.", "bodyText": "Unnecessary since delete share will delete directory.", "bodyHTML": "<p dir=\"auto\">Unnecessary since delete share will delete directory.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:58:22Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/core/DirectoryTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareDirectoryAsyncClient;\n+import com.azure.storage.file.share.ShareDirectoryClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+public abstract class DirectoryTest<TOptions extends PerfStressOptions> extends ShareTest<TOptions> {\n+    private static final String DIRECTORY_NAME = \"perfstress-directoryv11-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareDirectoryClient shareDirectoryClient;\n+    protected final ShareDirectoryAsyncClient shareDirectoryAsyncClient;\n+\n+    public DirectoryTest(TOptions options) {\n+        super(options);\n+        // Setup the container clients\n+        shareDirectoryClient = shareClient.getDirectoryClient(DIRECTORY_NAME);\n+        shareDirectoryAsyncClient = shareAsyncClient.getDirectoryClient(DIRECTORY_NAME);\n+    }\n+\n+    // NOTE: the pattern setup the parent first, then yourself.\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(shareDirectoryAsyncClient.create().then());\n+    }\n+\n+    // NOTE: the pattern, cleanup yourself, then the parent.\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return shareDirectoryAsyncClient.delete().then(super.globalCleanupAsync());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NjE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542986174", "body": "Unnecessary.", "bodyText": "Unnecessary.", "bodyHTML": "<p dir=\"auto\">Unnecessary.</p>", "author": "mikeharder", "createdAt": "2020-12-15T01:58:32Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/core/FileTestBase.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.UUID;\n+\n+public abstract class FileTestBase<TOptions extends PerfStressOptions> extends DirectoryTest<TOptions> {\n+\n+    public static final int DEFAULT_BUFFER_SIZE = 8192;\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    public FileTestBase(TOptions options) {\n+        super(options);\n+\n+        String fileName = \"randomfiletest-\" + UUID.randomUUID().toString();\n+\n+        shareFileClient =  shareDirectoryClient.getFileClient(fileName);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(fileName);\n+    }\n+\n+    @Override\n+    public Mono<Void> setupAsync() {\n+        return shareFileAsyncClient.create(options.getSize() + DEFAULT_BUFFER_SIZE).then(super.cleanupAsync());\n+    }\n+\n+    public long copyStream(InputStream input, OutputStream out) throws IOException {\n+        long transferred = 0;\n+        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n+        int read;\n+        while ((read = input.read(buffer, 0, DEFAULT_BUFFER_SIZE)) >= 0) {\n+            out.write(buffer, 0, read);\n+            transferred += read;\n+        }\n+        return transferred;\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {\n+        return shareFileAsyncClient.delete().then(super.cleanupAsync());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4Njc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542986766", "body": "Re-use NullOutputStream", "bodyText": "Re-use NullOutputStream", "bodyHTML": "<p dir=\"auto\">Re-use NullOutputStream</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:00:13Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.blob.perf;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import com.azure.perf.test.core.NullOutputStream;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.blob.CloudBlockBlob;\n+\n+import com.microsoft.azure.storage.blob.perf.core.ContainerTest;\n+import reactor.core.publisher.Mono;\n+\n+public class DownloadBlobTest extends ContainerTest<PerfStressOptions> {\n+    private final CloudBlockBlob cloudBlockBlob;\n+\n+    public DownloadBlobTest(PerfStressOptions options) {\n+        super(options);\n+\n+        try {\n+            cloudBlockBlob = cloudBlobContainer.getBlockBlobReference(\"downloadtest\");\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(Mono.fromCallable(() -> {\n+            try {\n+                cloudBlockBlob.upload(TestDataCreationHelper\n+                    .createRandomInputStream(options.getSize()), options.getSize());\n+            } catch (StorageException | IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return 1;\n+        })).then();\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            cloudBlockBlob.download(new NullOutputStream());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NzM1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542987356", "body": "Is this a Track1 test?  If so, I recommend putting Track1 and Track2 tests in completely different projects, and using only Track1 APIs including in setup/cleanup.", "bodyText": "Is this a Track1 test?  If so, I recommend putting Track1 and Track2 tests in completely different projects, and using only Track1 APIs including in setup/cleanup.", "bodyHTML": "<p dir=\"auto\">Is this a Track1 test?  If so, I recommend putting Track1 and Track2 tests in completely different projects, and using only Track1 APIs including in setup/cleanup.</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:01:40Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.blob.perf;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import com.azure.perf.test.core.NullOutputStream;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.blob.CloudBlockBlob;\n+\n+import com.microsoft.azure.storage.blob.perf.core.ContainerTest;\n+import reactor.core.publisher.Mono;\n+\n+public class DownloadBlobTest extends ContainerTest<PerfStressOptions> {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4Nzg3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542987876", "body": "Cache temp file string.", "bodyText": "Cache temp file string.", "bodyHTML": "<p dir=\"auto\">Cache temp file string.</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:02:58Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/blob/perf/UploadFromFileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.blob.perf;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+\n+import com.microsoft.azure.storage.blob.perf.core.BlobTestBase;\n+import reactor.core.publisher.Mono;\n+\n+public class UploadFromFileTest extends BlobTestBase<PerfStressOptions> {\n+    private static Path tempFile;\n+\n+    public UploadFromFileTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(createTempFile());\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return deleteTempFile().then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> createTempFile() {\n+        return Mono.fromCallable(() -> {\n+            InputStream inputStream = null;\n+            OutputStream outputStream = null;\n+            try {\n+                tempFile = Files.createTempFile(null, null);\n+                inputStream = TestDataCreationHelper.createRandomInputStream(options.getSize());\n+                outputStream = new FileOutputStream(tempFile.toString());\n+                TestDataCreationHelper.copyStream(inputStream, outputStream, DEFAULT_BUFFER_SIZE);\n+                return 1;\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                if (outputStream != null) {\n+                    outputStream.close();\n+                }\n+\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }).then();\n+    }\n+\n+    private Mono<Void> deleteTempFile() {\n+        try {\n+            Files.delete(tempFile);\n+            return Mono.empty();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            cloudBlockBlob.uploadFromFile(tempFile.toString());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODA0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542988040", "body": "Cache input stream", "bodyText": "Cache input stream", "bodyHTML": "<p dir=\"auto\">Cache input stream</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:03:24Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/blob/perf/UploadOutputStreamTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.blob.perf;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.blob.BlobOutputStream;\n+\n+import com.microsoft.azure.storage.blob.perf.core.BlobTestBase;\n+import reactor.core.publisher.Mono;\n+\n+public class UploadOutputStreamTest extends BlobTestBase<PerfStressOptions> {\n+\n+    public UploadOutputStreamTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            InputStream inputStream = TestDataCreationHelper.createRandomInputStream(options.getSize());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODUxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542988517", "body": "Unnecessary", "bodyText": "Unnecessary", "bodyHTML": "<p dir=\"auto\">Unnecessary</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:04:43Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import com.microsoft.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final CloudFile cloudFile;\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        try {\n+            cloudFile = cloudFileDirectory.getFileReference(FILE_NAME);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(Mono.fromCallable(() -> {\n+                try {\n+                    cloudFile.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n+                        options.getSize());\n+                    return 1;\n+                } catch (URISyntaxException | StorageException | IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            })).then();\n+    }\n+\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        try {\n+            cloudFile.download(DEV_NULL);\n+        } catch (StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static class NullOutputStream extends OutputStream {\n+        @Override\n+        public void write(int b) {\n+\n+        }\n+\n+        @Override\n+        public void write(byte[] b) {\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    // NOTE: the pattern, cleanup yourself, then the parent.\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODY4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542988683", "body": "Unnecessary", "bodyText": "Unnecessary", "bodyHTML": "<p dir=\"auto\">Unnecessary</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:05:12Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/DownloadToFileShareTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import com.microsoft.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public class DownloadToFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final CloudFile cloudFile;\n+\n+    public DownloadToFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        try {\n+            cloudFile = cloudFileDirectory.getFileReference(FILE_NAME);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(Mono.fromCallable(() -> {\n+                try {\n+                    cloudFile.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n+                        options.getSize());\n+                    return 1;\n+                } catch (URISyntaxException | StorageException | IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            })).then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        try {\n+            File tempFile = File.createTempFile(\"tempFile\", \"fileshare\");\n+            tempFile.deleteOnExit();\n+            cloudFile.downloadToFile(tempFile.getAbsolutePath());\n+        } catch (StorageException | IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODc0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542988740", "body": "Re-use temp file", "bodyText": "Re-use temp file", "bodyHTML": "<p dir=\"auto\">Re-use temp file</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:05:19Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/DownloadToFileShareTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import com.microsoft.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public class DownloadToFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final CloudFile cloudFile;\n+\n+    public DownloadToFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        try {\n+            cloudFile = cloudFileDirectory.getFileReference(FILE_NAME);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(Mono.fromCallable(() -> {\n+                try {\n+                    cloudFile.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n+                        options.getSize());\n+                    return 1;\n+                } catch (URISyntaxException | StorageException | IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            })).then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        try {\n+            File tempFile = File.createTempFile(\"tempFile\", \"fileshare\");", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODgwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542988801", "body": "Cache input stream", "bodyText": "Cache input stream", "bodyHTML": "<p dir=\"auto\">Cache input stream</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:05:31Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/UploadFileShareTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+public class UploadFileShareTest extends FileTestBase<PerfStressOptions> {\n+    public UploadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            cloudFile.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()),", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4ODk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542988941", "body": "NIT: Extra blank line", "bodyText": "NIT: Extra blank line", "bodyHTML": "<p dir=\"auto\">NIT: Extra blank line</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:05:56Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/UploadFileShareTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+public class UploadFileShareTest extends FileTestBase<PerfStressOptions> {\n+    public UploadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            cloudFile.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n+                options.getSize());\n+        } catch (StorageException | URISyntaxException | IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        throw new UnsupportedOperationException();\n+    }\n+", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4OTIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542989204", "body": "Cache file name string", "bodyText": "Cache file name string", "bodyHTML": "<p dir=\"auto\">Cache file name string</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:06:36Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/UploadFromFileShareTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.share.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class UploadFromFileShareTest extends FileTestBase<PerfStressOptions> {\n+\n+    private static final Path TEMP_FILE;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public UploadFromFileShareTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            cloudFile.uploadFromFile(TEMP_FILE.toString());", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4OTMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542989300", "body": "Unnecessary", "bodyText": "Unnecessary", "bodyHTML": "<p dir=\"auto\">Unnecessary</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:06:53Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/core/DirectoryTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFileDirectory;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public abstract class DirectoryTest<TOptions extends PerfStressOptions> extends ShareTest<TOptions> {\n+    private static final String DIRECTORY_NAME = \"perfstress-directory-\" + UUID.randomUUID().toString();\n+\n+    protected final CloudFileDirectory cloudFileDirectory;\n+\n+    public DirectoryTest(TOptions options) {\n+        super(options);\n+        // Setup the container clients\n+        try {\n+            cloudFileDirectory = cloudFileShare.getRootDirectoryReference().getDirectoryReference(DIRECTORY_NAME);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // NOTE: the pattern setup the parent first, then yourself.\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(Mono.fromCallable(() -> {\n+                cloudFileDirectory.create();\n+                return 1; }))\n+            .then();\n+    }\n+\n+    // NOTE: the pattern, cleanup yourself, then the parent.\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4OTM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r542989385", "body": "Unnecessary", "bodyText": "Unnecessary", "bodyHTML": "<p dir=\"auto\">Unnecessary</p>", "author": "mikeharder", "createdAt": "2020-12-15T02:07:12Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/core/FileTestBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public abstract class FileTestBase<TOptions extends PerfStressOptions> extends DirectoryTest<TOptions> {\n+\n+    public static final int DEFAULT_BUFFER_SIZE = 8192;\n+    protected final CloudFile cloudFile;\n+\n+    public FileTestBase(TOptions options) {\n+        super(options);\n+\n+        String fileName = \"randomfiletest-\" + UUID.randomUUID().toString();\n+\n+        try {\n+            cloudFile =  cloudFileDirectory.getFileReference(fileName);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public long copyStream(InputStream input, OutputStream out) throws IOException {\n+        long transferred = 0;\n+        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n+        int read;\n+        while ((read = input.read(buffer, 0, DEFAULT_BUFFER_SIZE)) >= 0) {\n+            out.write(buffer, 0, read);\n+            transferred += read;\n+        }\n+        return transferred;\n+    }\n+\n+    @Override\n+    public Mono<Void> cleanupAsync() {", "originalCommit": "46962340935cd01ed857b75dfd5b0bf115f59420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2de0d337c2bbf5b4cee9e38c498b5da29f6689ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2de0d337c2bbf5b4cee9e38c498b5da29f6689ed", "message": "update tests", "committedDate": "2020-12-18T19:45:15Z", "type": "commit"}, {"oid": "0bbfc74e8886493b259cb5f25a8a5a2ff72e8b1d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0bbfc74e8886493b259cb5f25a8a5a2ff72e8b1d", "message": "update T1 tests", "committedDate": "2020-12-18T21:29:57Z", "type": "commit"}, {"oid": "5ce9116e6254780bc8ee9abb90604d20dbe71782", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ce9116e6254780bc8ee9abb90604d20dbe71782", "message": "update tests", "committedDate": "2020-12-19T03:55:47Z", "type": "commit"}, {"oid": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "message": "Merge branch 'master' into add-storage-file-share-perf-test", "committedDate": "2020-12-19T04:02:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMTczOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547001738", "body": "I'm not sure about the Java coding guidelines, but in .NET we would use a named parameter for a bare boolean like this, so in Java I would personally use an inline comment to document the parameter.\r\n\r\n```suggestion\r\n            BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream(/* overwrite */ true);\r\n```", "bodyText": "I'm not sure about the Java coding guidelines, but in .NET we would use a named parameter for a bare boolean like this, so in Java I would personally use an inline comment to document the parameter.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream(true);\n          \n          \n            \n                        BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream(/* overwrite */ true);", "bodyHTML": "<p dir=\"auto\">I'm not sure about the Java coding guidelines, but in .NET we would use a named parameter for a bare boolean like this, so in Java I would personally use an inline comment to document the parameter.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"23\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">BlobOutputStream</span> blobOutputStream <span class=\"pl-k\">=</span> blockBlobClient<span class=\"pl-k\">.</span>getBlobOutputStream(<span class=\"pl-c1\">true</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"23\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi\">BlobOutputStream</span> blobOutputStream <span class=\"pl-k\">=</span> blockBlobClient<span class=\"pl-k\">.</span>getBlobOutputStream(<span class=\"pl-c\"><span class=\"pl-c x x-first\">/*</span><span class=\"x\"> overwrite </span><span class=\"pl-c x\">*/</span></span><span class=\"x x-last\"> </span><span class=\"pl-c1\">true</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mikeharder", "createdAt": "2020-12-22T00:35:34Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/UploadOutputStreamTest.java", "diffHunk": "@@ -20,7 +20,7 @@ public UploadOutputStreamTest(PerfStressOptions options) {\n     @Override\n     public void run() {\n         try {\n-            BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream();\n+            BlobOutputStream blobOutputStream = blockBlobClient.getBlobOutputStream(true);", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMjE3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547002179", "body": "In the other languages we have been adding a helper function to the base class for this:\r\n\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67", "bodyText": "In the other languages we have been adding a helper function to the base class for this:\nhttps://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67", "bodyHTML": "<p dir=\"auto\">In the other languages we have been adding a helper function to the base class for this:</p>\n<p dir=\"auto\"><a href=\"https://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67\">https://github.com/Azure/azure-sdk-for-net/blob/master/common/Perf/Azure.Test.Perf/PerfTest.cs#L67</a></p>", "author": "mikeharder", "createdAt": "2020-12-22T00:37:02Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/blob/perf/core/ServiceTest.java", "diffHunk": "@@ -15,13 +16,15 @@\n \n     protected final BlobServiceClient blobServiceClient;\n     protected final BlobServiceAsyncClient blobServiceAsyncClient;\n+    private final Configuration configuration;\n \n     public ServiceTest(TOptions options) {\n         super(options);\n-        String connectionString = System.getenv(\"STORAGE_CONNECTION_STRING\");\n+        configuration = Configuration.getGlobalConfiguration().clone();\n+        String connectionString = configuration.get(\"STORAGE_CONNECTION_STRING\");", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMjU5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547002593", "body": "Should each instance append to the same service file or one file per instance?  I would think one file per instance, to avoid possible issues appending to the same file from multiple instances in parallel.", "bodyText": "Should each instance append to the same service file or one file per instance?  I would think one file per instance, to avoid possible issues appending to the same file from multiple instances in parallel.", "bodyHTML": "<p dir=\"auto\">Should each instance append to the same service file or one file per instance?  I would think one file per instance, to avoid possible issues appending to the same file from multiple instances in parallel.</p>", "author": "mikeharder", "createdAt": "2020-12-22T00:38:43Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/AppendFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.RepeatingInputStream;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class AppendFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMjc2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547002761", "body": "```suggestion\r\n        dataLakeFileClient.append(inputStream,\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataLakeFileClient.append(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n          \n          \n            \n                    dataLakeFileClient.append(inputStream,", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        dataLakeFileClient<span class=\"pl-k\">.</span>append(<span class=\"pl-smi x x-first\">TestDataCreationHelper</span><span class=\"pl-k x\">.</span><span class=\"x\">createRandomInputStream(options</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getSize())</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        dataLakeFileClient<span class=\"pl-k\">.</span>append(<span class=\"x x-first x-last\">inputStream</span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mikeharder", "createdAt": "2020-12-22T00:39:21Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/AppendFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.RepeatingInputStream;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.DataLakeFileAsyncClient;\n+import com.azure.storage.file.datalake.DataLakeFileClient;\n+import com.azure.storage.file.datalake.perf.core.DirectoryTest;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class AppendFileDatalakeTest extends DirectoryTest<PerfStressOptions> {\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    protected final DataLakeFileClient dataLakeFileClient;\n+    protected final DataLakeFileAsyncClient dataLakeFileAsyncClient;\n+    protected final RepeatingInputStream inputStream;\n+    protected final Flux<ByteBuffer> byteBufferFlux;\n+\n+    public AppendFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+        dataLakeFileClient = dataLakeDirectoryClient.getFileClient(FILE_NAME);\n+        dataLakeFileAsyncClient = dataLakeDirectoryAsyncClient.getFileAsyncClient(FILE_NAME);\n+        inputStream = (RepeatingInputStream) TestDataCreationHelper.createRandomInputStream(options.getSize());\n+        byteBufferFlux = createRandomByteBufferFlux(options.getSize());\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(dataLakeFileAsyncClient.create())\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        inputStream.reset();\n+        dataLakeFileClient.append(TestDataCreationHelper.createRandomInputStream(options.getSize()),", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNDY1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547004659", "body": "```suggestion\r\n        return dataLakeFileAsyncClient.upload(byteBufferFlux, null, true)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return dataLakeFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), null, true)\n          \n          \n            \n                    return dataLakeFileAsyncClient.upload(byteBufferFlux, null, true)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"35\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> dataLakeFileAsyncClient<span class=\"pl-k\">.</span>upload(<span class=\"x x-first\">createRandomByteBufferFlux(options</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getSize())</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">true</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"35\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> dataLakeFileAsyncClient<span class=\"pl-k\">.</span>upload(<span class=\"x x-first x-last\">byteBufferFlux</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">true</span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mikeharder", "createdAt": "2020-12-22T00:46:33Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/UploadFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.RepeatingInputStream;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.perf.core.FileTestBase;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+\n+public class UploadFileDatalakeTest extends FileTestBase<PerfStressOptions> {\n+    protected final RepeatingInputStream inputStream;\n+    protected final Flux<ByteBuffer> byteBufferFlux;\n+\n+    public UploadFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+        inputStream = (RepeatingInputStream) TestDataCreationHelper.createRandomInputStream(options.getSize());\n+        byteBufferFlux = createRandomByteBufferFlux(options.getSize());\n+    }\n+\n+    @Override\n+    public void run() {\n+        inputStream.reset();\n+        dataLakeFileClient.upload(inputStream, options.getSize(), true);\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return dataLakeFileAsyncClient.upload(createRandomByteBufferFlux(options.getSize()), null, true)", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNTA1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547005055", "body": "```suggestion\r\n        dataLakeFileClient.uploadFromFile(TEMP_FILE_PATH, /* overwrite */ true);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataLakeFileClient.uploadFromFile(TEMP_FILE_PATH, true);\n          \n          \n            \n                    dataLakeFileClient.uploadFromFile(TEMP_FILE_PATH, /* overwrite */ true);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        dataLakeFileClient<span class=\"pl-k\">.</span>uploadFromFile(<span class=\"pl-c1\">TEMP_FILE_PATH</span>, <span class=\"pl-c1\">true</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        dataLakeFileClient<span class=\"pl-k\">.</span>uploadFromFile(<span class=\"pl-c1\">TEMP_FILE_PATH</span>, <span class=\"pl-c\"><span class=\"pl-c x x-first\">/*</span><span class=\"x\"> overwrite </span><span class=\"pl-c x\">*/</span></span><span class=\"x x-last\"> </span><span class=\"pl-c1\">true</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mikeharder", "createdAt": "2020-12-22T00:48:08Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/datalake/perf/UploadFromFileDatalakeTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.datalake.perf.core.FileTestBase;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class UploadFromFileDatalakeTest extends FileTestBase<PerfStressOptions> {\n+\n+    private static final Path TEMP_FILE;\n+    private static final String TEMP_FILE_PATH;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+            TEMP_FILE_PATH = TEMP_FILE.toString();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public UploadFromFileDatalakeTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync().then(createTempFile());\n+    }\n+\n+    @Override\n+    public Mono<Void> globalCleanupAsync() {\n+        return deleteTempFile().then(super.globalCleanupAsync());\n+    }\n+\n+    private Mono<Void> createTempFile() {\n+        return Mono.fromCallable(() -> {\n+            TestDataCreationHelper.writeToFile(TEMP_FILE_PATH, options.getSize(), DEFAULT_BUFFER_SIZE);\n+            return 1;\n+        }).then();\n+    }\n+\n+    private Mono<Void> deleteTempFile() {\n+        try {\n+            Files.delete(TEMP_FILE);\n+            return Mono.empty();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        dataLakeFileClient.uploadFromFile(TEMP_FILE_PATH, true);", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNjAzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547006035", "body": "If we just need to upload a file in any way so it can be downloaded later, I think it would be simpler to use `upload(Flux<ByteBuffer>, long)` instead of creating a temp file on disk.", "bodyText": "If we just need to upload a file in any way so it can be downloaded later, I think it would be simpler to use upload(Flux<ByteBuffer>, long) instead of creating a temp file on disk.", "bodyHTML": "<p dir=\"auto\">If we just need to upload a file in any way so it can be downloaded later, I think it would be simpler to use <code>upload(Flux&lt;ByteBuffer&gt;, long)</code> instead of creating a temp file on disk.</p>", "author": "mikeharder", "createdAt": "2020-12-22T00:51:55Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.NullOutputStream;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-filev11-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        shareFileClient = shareDirectoryClient.getFileClient(FILE_NAME);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(FILE_NAME);\n+    }\n+\n+    private static final Path TEMP_FILE;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private Mono<Long> createTempFile() {\n+        try (InputStream inputStream = createRandomInputStream(options.getSize());\n+             OutputStream outputStream = new FileOutputStream(TEMP_FILE.toString())) {\n+            return Mono.just(TestDataCreationHelper.copyStream(inputStream, outputStream, 8192));\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(createTempFile())\n+            .flatMap(dataSize -> shareFileAsyncClient.create(dataSize))\n+            .then(shareFileAsyncClient.uploadFromFile(TEMP_FILE.toString()))", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNjIxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547006216", "body": "I think I've seen this same code repeated many times so maybe move to helper method?", "bodyText": "I think I've seen this same code repeated many times so maybe move to helper method?", "bodyHTML": "<p dir=\"auto\">I think I've seen this same code repeated many times so maybe move to helper method?</p>", "author": "mikeharder", "createdAt": "2020-12-22T00:52:31Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.NullOutputStream;\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.azure.storage.file.share.ShareFileAsyncClient;\n+import com.azure.storage.file.share.ShareFileClient;\n+import com.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.UUID;\n+\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final int BUFFER_SIZE = 16 * 1024 * 1024;\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-filev11-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareFileClient shareFileClient;\n+    protected final ShareFileAsyncClient shareFileAsyncClient;\n+\n+    private final byte[] buffer = new byte[BUFFER_SIZE];\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        shareFileClient = shareDirectoryClient.getFileClient(FILE_NAME);\n+        shareFileAsyncClient = shareDirectoryAsyncClient.getFileClient(FILE_NAME);\n+    }\n+\n+    private static final Path TEMP_FILE;\n+\n+    static {\n+        try {\n+            TEMP_FILE = Files.createTempFile(null, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private Mono<Long> createTempFile() {\n+        try (InputStream inputStream = createRandomInputStream(options.getSize());\n+             OutputStream outputStream = new FileOutputStream(TEMP_FILE.toString())) {\n+            return Mono.just(TestDataCreationHelper.copyStream(inputStream, outputStream, 8192));\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(createTempFile())\n+            .flatMap(dataSize -> shareFileAsyncClient.create(dataSize))\n+            .then(shareFileAsyncClient.uploadFromFile(TEMP_FILE.toString()))\n+            .then();\n+    }\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        shareFileClient.download(DEV_NULL);\n+    }\n+\n+    @Override\n+    public Mono<Void> runAsync() {\n+        return shareFileAsyncClient.download()\n+            .map(b -> {", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNzgwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547007806", "body": "```suggestion\r\n            cloudBlockBlob.upload(inputStream, options.getSize());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        cloudBlockBlob.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()), options.getSize());\n          \n          \n            \n                        cloudBlockBlob.upload(inputStream, options.getSize());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"28\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            cloudBlockBlob<span class=\"pl-k\">.</span>upload(<span class=\"pl-smi x x-first\">TestDataCreationHelper</span><span class=\"pl-k x\">.</span><span class=\"x\">createRandomInputStream(options</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getSize())</span>, options<span class=\"pl-k\">.</span>getSize());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"28\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            cloudBlockBlob<span class=\"pl-k\">.</span>upload(<span class=\"x x-first x-last\">inputStream</span>, options<span class=\"pl-k\">.</span>getSize());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mikeharder", "createdAt": "2020-12-22T00:58:18Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/blob/perf/UploadBlobTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.blob.perf;\n+\n+import java.io.IOException;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.RepeatingInputStream;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+\n+import com.microsoft.azure.storage.blob.perf.core.BlobTestBase;\n+import reactor.core.publisher.Mono;\n+\n+public class UploadBlobTest extends BlobTestBase<PerfStressOptions> {\n+    protected final RepeatingInputStream inputStream;\n+\n+    public UploadBlobTest(PerfStressOptions options) {\n+        super(options);\n+        inputStream = (RepeatingInputStream) TestDataCreationHelper.createRandomInputStream(options.getSize());\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            inputStream.reset();\n+            cloudBlockBlob.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()), options.getSize());", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwODE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r547008189", "body": "Isn't there a helper class for this?", "bodyText": "Isn't there a helper class for this?", "bodyHTML": "<p dir=\"auto\">Isn't there a helper class for this?</p>", "author": "mikeharder", "createdAt": "2020-12-22T00:59:42Z", "path": "sdk/storage/microsoft-azure-storage-perf/src/main/java/com/microsoft/azure/storage/file/share/perf/DownloadFileShareTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.storage.file.share.perf;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.perf.test.core.TestDataCreationHelper;\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.file.CloudFile;\n+import com.microsoft.azure.storage.file.share.perf.core.DirectoryTest;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.URISyntaxException;\n+import java.util.UUID;\n+\n+public class DownloadFileShareTest extends DirectoryTest<PerfStressOptions> {\n+    private static final OutputStream DEV_NULL = new NullOutputStream();\n+    private static final String FILE_NAME = \"perfstress-file-\" + UUID.randomUUID().toString();\n+\n+    private final CloudFile cloudFile;\n+\n+    public DownloadFileShareTest(PerfStressOptions options) {\n+        super(options);\n+        try {\n+            cloudFile = cloudFileDirectory.getFileReference(FILE_NAME);\n+        } catch (URISyntaxException | StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    // Required resource setup goes here, upload the file to be downloaded during tests.\n+\n+    @Override\n+    public Mono<Void> globalSetupAsync() {\n+        return super.globalSetupAsync()\n+            .then(Mono.fromCallable(() -> {\n+                try {\n+                    cloudFile.upload(TestDataCreationHelper.createRandomInputStream(options.getSize()),\n+                        options.getSize());\n+                    return 1;\n+                } catch (URISyntaxException | StorageException | IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            })).then();\n+    }\n+\n+\n+    // Perform the API call to be tested here\n+    @Override\n+    public void run() {\n+        try {\n+            cloudFile.download(DEV_NULL);\n+        } catch (StorageException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static class NullOutputStream extends OutputStream {", "originalCommit": "8967798443a94f1128b0c9acc9bec5bfe2d76b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e0d5046e2b7c5e4d6c2831b6a36ec235e77efe05", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0d5046e2b7c5e4d6c2831b6a36ec235e77efe05", "message": "Merge remote-tracking branch 'upstream/master' into add-storage-file-share-perf-test", "committedDate": "2021-03-12T02:01:09Z", "type": "commit"}, {"oid": "96f1a55e078f23c04799a72cbd1048a35a8ecb5e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/96f1a55e078f23c04799a72cbd1048a35a8ecb5e", "message": "Add microsoft-azure-storage-perf to parent pom.xml", "committedDate": "2021-03-29T05:07:43Z", "type": "commit"}, {"oid": "227e6b32d0491ef843bb9fef831efde1117a9e9d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/227e6b32d0491ef843bb9fef831efde1117a9e9d", "message": "Merge remote-tracking branch 'upstream/master' into add-storage-file-share-perf-test", "committedDate": "2021-03-31T14:51:44Z", "type": "commit"}, {"oid": "799d3b796021f75a22c20bf5ee0b1676ce61b2d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/799d3b796021f75a22c20bf5ee0b1676ce61b2d7", "message": "Merge remote-tracking branch 'upstream/master' into add-storage-file-share-perf-test", "committedDate": "2021-03-31T14:52:36Z", "type": "commit"}, {"oid": "ecfc4583aa53604b65c9650a715cf336ebc51c1e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ecfc4583aa53604b65c9650a715cf336ebc51c1e", "message": "update", "committedDate": "2021-03-31T21:27:55Z", "type": "commit"}, {"oid": "abce45f4e4041fef2f1a034306fdbe523108b0d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/abce45f4e4041fef2f1a034306fdbe523108b0d4", "message": "Merge branch 'add-storage-file-share-perf-test' of https://github.com/g2vinay/azure-sdk-for-java into add-storage-file-share-perf-test", "committedDate": "2021-03-31T21:32:39Z", "type": "commit"}, {"oid": "aef282a5249a186710ca78bd5e0671990c28a8e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aef282a5249a186710ca78bd5e0671990c28a8e3", "message": "update", "committedDate": "2021-03-31T22:17:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjAyODk4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17883#discussion_r612028989", "body": "Can this use the same (and simpler) pattern as DataLake?\r\n\r\nhttps://github.com/Azure/azure-sdk-for-java/pull/17883/files#diff-10b82805ef0ae91ec67e7271940bf4767256bb9e37a9833e7f27d343332eb40aR29", "bodyText": "Can this use the same (and simpler) pattern as DataLake?\nhttps://github.com/Azure/azure-sdk-for-java/pull/17883/files#diff-10b82805ef0ae91ec67e7271940bf4767256bb9e37a9833e7f27d343332eb40aR29", "bodyHTML": "<p dir=\"auto\">Can this use the same (and simpler) pattern as DataLake?</p>\n<p dir=\"auto\"><a href=\"https://github.com/Azure/azure-sdk-for-java/pull/17883/files#diff-10b82805ef0ae91ec67e7271940bf4767256bb9e37a9833e7f27d343332eb40aR29\">https://github.com/Azure/azure-sdk-for-java/pull/17883/files#diff-10b82805ef0ae91ec67e7271940bf4767256bb9e37a9833e7f27d343332eb40aR29</a></p>", "author": "mikeharder", "createdAt": "2021-04-13T00:02:45Z", "path": "sdk/storage/azure-storage-perf/src/main/java/com/azure/storage/file/share/perf/core/ShareTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.perf.core;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.file.share.ShareAsyncClient;\n+import com.azure.storage.file.share.ShareClient;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+public abstract class ShareTest<TOptions extends PerfStressOptions> extends ServiceTest<TOptions> {\n+    private static final String SHARE_NAME = \"perfstress-sharev11-\" + UUID.randomUUID().toString();\n+\n+    protected final ShareClient shareClient;\n+    protected final ShareAsyncClient shareAsyncClient;\n+\n+    public ShareTest(TOptions options) {\n+        super(options);\n+        // Setup the container clients\n+        String shareName = \"perfstress-sharev11-\" + UUID.randomUUID().toString();\n+        shareClient = shareServiceClient.getShareClient(shareName);\n+        shareAsyncClient = shareServiceAsyncClient.getShareAsyncClient(shareName);\n+    }\n+\n+    @Override\n+    public Mono<Void> setupAsync() {\n+        return super.setupAsync().then(Mono.defer(() -> {", "originalCommit": "aef282a5249a186710ca78bd5e0671990c28a8e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db82244024e1cc26f7642bf391936dab66cffbb1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/db82244024e1cc26f7642bf391936dab66cffbb1", "message": "update", "committedDate": "2021-05-04T21:57:53Z", "type": "commit"}, {"oid": "01d8214f1050f8f9ee1c313f7d123b4d40f983b1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/01d8214f1050f8f9ee1c313f7d123b4d40f983b1", "message": "Merge branch 'master' into add-storage-file-share-perf-test", "committedDate": "2021-05-04T22:01:02Z", "type": "commit"}, {"oid": "49f0aae44d6cbff78ac8611bddd47a45d91ef769", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49f0aae44d6cbff78ac8611bddd47a45d91ef769", "message": "Merge remote-tracking branch 'upstream/master' into add-storage-file-share-perf-test", "committedDate": "2021-05-05T21:17:22Z", "type": "commit"}, {"oid": "10fddbde9f46438a9e512db9c1d1ee846c541f96", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10fddbde9f46438a9e512db9c1d1ee846c541f96", "message": "update versions", "committedDate": "2021-05-05T21:43:27Z", "type": "commit"}, {"oid": "74e2f53606ea767d8864fdc39623b925750c3adb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/74e2f53606ea767d8864fdc39623b925750c3adb", "message": "Merge branch 'add-storage-file-share-perf-test' of https://github.com/g2vinay/azure-sdk-for-java into add-storage-file-share-perf-test", "committedDate": "2021-05-05T21:43:40Z", "type": "commit"}, {"oid": "4b78861260317e8945fad19a49b4bddb786078f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b78861260317e8945fad19a49b4bddb786078f8", "message": "update", "committedDate": "2021-05-05T22:06:39Z", "type": "commit"}, {"oid": "5a628856a9f479251949f8481dfc4e3270ae5bea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a628856a9f479251949f8481dfc4e3270ae5bea", "message": "fix checkstyle", "committedDate": "2021-05-05T23:23:36Z", "type": "commit"}]}