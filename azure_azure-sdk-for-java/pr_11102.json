{"pr_number": 11102, "pr_title": "Removed authorization header from cosmos client exception", "pr_author": "kushagraThapar", "pr_createdAt": "2020-05-12T21:10:34Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11102", "timeline": [{"oid": "31dbd911deeaa6dca7b6bd1d54927c5f18020d81", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31dbd911deeaa6dca7b6bd1d54927c5f18020d81", "message": "Removed authorization header from cosmos client exception", "committedDate": "2020-05-12T21:09:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODA5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11102#discussion_r424038090", "body": "This will create a new Map for the headers, and so you have to pay the additional cost of Map creation.\r\ncan we instead change the filtering when the message is logged:\r\n\r\nYou can have this in the CosmosClientException when the message is logged. this would help to pay the cost only if the message is logged.\r\n```java\r\n    @Override\r\n    public String toString() {\r\n        return getClass().getSimpleName() + \"{\" + \"error=\" + cosmosError + \", resourceAddress='\"\r\n                   + resourceAddress + '\\'' + \", statusCode=\" + statusCode + \", message=\" + getMessage()\r\n                   + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + filterSensitiveDate(responseHeaders) + \", requestHeaders=\"\r\n                   + filterSensitiveDate(requestHeaders) + '}';\r\n    }\r\n\r\n    private List<Map.Entry<String, String>> filterSensitiveDate(Map<String, String> requestHeaders) {\r\n        return requestHeaders.entrySet().stream().filter(entry -> !HttpConstants.HttpHeaders.AUTHORIZATION.equalsIgnoreCase(entry.getKey()))\r\n            .collect(Collectors.toList());\r\n    }\r\n```", "bodyText": "This will create a new Map for the headers, and so you have to pay the additional cost of Map creation.\ncan we instead change the filtering when the message is logged:\nYou can have this in the CosmosClientException when the message is logged. this would help to pay the cost only if the message is logged.\n    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"{\" + \"error=\" + cosmosError + \", resourceAddress='\"\n                   + resourceAddress + '\\'' + \", statusCode=\" + statusCode + \", message=\" + getMessage()\n                   + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + filterSensitiveDate(responseHeaders) + \", requestHeaders=\"\n                   + filterSensitiveDate(requestHeaders) + '}';\n    }\n\n    private List<Map.Entry<String, String>> filterSensitiveDate(Map<String, String> requestHeaders) {\n        return requestHeaders.entrySet().stream().filter(entry -> !HttpConstants.HttpHeaders.AUTHORIZATION.equalsIgnoreCase(entry.getKey()))\n            .collect(Collectors.toList());\n    }", "bodyHTML": "<p dir=\"auto\">This will create a new Map for the headers, and so you have to pay the additional cost of Map creation.<br>\ncan we instead change the filtering when the message is logged:</p>\n<p dir=\"auto\">You can have this in the CosmosClientException when the message is logged. this would help to pay the cost only if the message is logged.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Override\n    public String toString() {\n        return getClass().getSimpleName() + &quot;{&quot; + &quot;error=&quot; + cosmosError + &quot;, resourceAddress='&quot;\n                   + resourceAddress + '\\'' + &quot;, statusCode=&quot; + statusCode + &quot;, message=&quot; + getMessage()\n                   + &quot;, causeInfo=&quot; + causeInfo() + &quot;, responseHeaders=&quot; + filterSensitiveDate(responseHeaders) + &quot;, requestHeaders=&quot;\n                   + filterSensitiveDate(requestHeaders) + '}';\n    }\n\n    private List&lt;Map.Entry&lt;String, String&gt;&gt; filterSensitiveDate(Map&lt;String, String&gt; requestHeaders) {\n        return requestHeaders.entrySet().stream().filter(entry -&gt; !HttpConstants.HttpHeaders.AUTHORIZATION.equalsIgnoreCase(entry.getKey()))\n            .collect(Collectors.toList());\n    }\"><pre>    <span class=\"pl-k\">@Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> toString() {\n        <span class=\"pl-k\">return</span> getClass()<span class=\"pl-k\">.</span>getSimpleName() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> cosmosError <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, resourceAddress='<span class=\"pl-pds\">\"</span></span>\n                   <span class=\"pl-k\">+</span> resourceAddress <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\'</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, statusCode=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> statusCode <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, message=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> getMessage()\n                   <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, causeInfo=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> causeInfo() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, responseHeaders=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> filterSensitiveDate(responseHeaders) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, requestHeaders=<span class=\"pl-pds\">\"</span></span>\n                   <span class=\"pl-k\">+</span> filterSensitiveDate(requestHeaders) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>}<span class=\"pl-pds\">'</span></span>;\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">Map</span>.Entry&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span><span class=\"pl-k\">&gt;</span> filterSensitiveDate(<span class=\"pl-k\">Map&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;</span> requestHeaders) {\n        <span class=\"pl-k\">return</span> requestHeaders<span class=\"pl-k\">.</span>entrySet()<span class=\"pl-k\">.</span>stream()<span class=\"pl-k\">.</span>filter(entry <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">!</span><span class=\"pl-smi\">HttpConstants</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">HttpHeaders</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>AUTHORIZATION</span><span class=\"pl-k\">.</span>equalsIgnoreCase(entry<span class=\"pl-k\">.</span>getKey()))\n            .collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());\n    }</pre></div>", "author": "moderakh", "createdAt": "2020-05-12T21:15:15Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -226,7 +226,14 @@ public static boolean isEnableMultipleWriteLocations(DatabaseAccount account) {\n \n     public static <E extends CosmosClientException> void setRequestHeaders(CosmosClientException cosmosClientException,\n                                                                            Map<String, String> requestHeaders) {\n-        cosmosClientException.requestHeaders = requestHeaders;\n+        Map<String, String> requestHeadersMap = new HashMap<>();", "originalCommit": "31dbd911deeaa6dca7b6bd1d54927c5f18020d81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MDg3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11102#discussion_r424050877", "bodyText": "Make sense !", "author": "kushagraThapar", "createdAt": "2020-05-12T21:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzODA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzOTQ0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11102#discussion_r424039448", "body": "why not removing the auth header field directly from the requestHeaders rather than making a copy of it? For the auth entry we are suppose to re-populate that every time rather than reusing it so if there are failures because of it then we have other bugs to fix :-)\r\n", "bodyText": "why not removing the auth header field directly from the requestHeaders rather than making a copy of it? For the auth entry we are suppose to re-populate that every time rather than reusing it so if there are failures because of it then we have other bugs to fix :-)", "bodyHTML": "<p dir=\"auto\">why not removing the auth header field directly from the requestHeaders rather than making a copy of it? For the auth entry we are suppose to re-populate that every time rather than reusing it so if there are failures because of it then we have other bugs to fix :-)</p>", "author": "milismsft", "createdAt": "2020-05-12T21:18:08Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -226,7 +226,14 @@ public static boolean isEnableMultipleWriteLocations(DatabaseAccount account) {\n \n     public static <E extends CosmosClientException> void setRequestHeaders(CosmosClientException cosmosClientException,\n                                                                            Map<String, String> requestHeaders) {\n-        cosmosClientException.requestHeaders = requestHeaders;\n+        Map<String, String> requestHeadersMap = new HashMap<>();", "originalCommit": "31dbd911deeaa6dca7b6bd1d54927c5f18020d81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "91a14b4dcc8a2a7f5d2164d989365dc679422b45", "url": "https://github.com/Azure/azure-sdk-for-java/commit/91a14b4dcc8a2a7f5d2164d989365dc679422b45", "message": "Updated toString to filter sensitive data. Exposed rntbd module to jackson for testing", "committedDate": "2020-05-12T21:54:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3Nzc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11102#discussion_r424077757", "body": "We're still leaking the auth token; just because we override the toString(), it will not prevent someone trapping and dumping the exception object via an object mapper or some other serialization method which ignores the toString() override.\r\n\r\nThe initial fix that creates a copy of the request header map is a better one if we cannot reuse the original header while removing the sensitive header parts. I checked the code and we only invoke the respective setRequestHeaders() method in exceptional cases only; the only concern here is the memory hit which could go as high as 16k per each request header.", "bodyText": "We're still leaking the auth token; just because we override the toString(), it will not prevent someone trapping and dumping the exception object via an object mapper or some other serialization method which ignores the toString() override.\nThe initial fix that creates a copy of the request header map is a better one if we cannot reuse the original header while removing the sensitive header parts. I checked the code and we only invoke the respective setRequestHeaders() method in exceptional cases only; the only concern here is the memory hit which could go as high as 16k per each request header.", "bodyHTML": "<p dir=\"auto\">We're still leaking the auth token; just because we override the toString(), it will not prevent someone trapping and dumping the exception object via an object mapper or some other serialization method which ignores the toString() override.</p>\n<p dir=\"auto\">The initial fix that creates a copy of the request header map is a better one if we cannot reuse the original header while removing the sensitive header parts. I checked the code and we only invoke the respective setRequestHeaders() method in exceptional cases only; the only concern here is the memory hit which could go as high as 16k per each request header.</p>", "author": "milismsft", "createdAt": "2020-05-12T22:49:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientException.java", "diffHunk": "@@ -259,7 +261,7 @@ public String toString() {\n         return getClass().getSimpleName() + \"{\" + \"error=\" + cosmosError + \", resourceAddress='\"\n                    + resourceAddress + '\\'' + \", statusCode=\" + statusCode + \", message=\" + getMessage()\n                    + \", causeInfo=\" + causeInfo() + \", responseHeaders=\" + responseHeaders + \", requestHeaders=\"\n-                   + requestHeaders + '}';\n+                   + filterSensitiveData(requestHeaders) + '}';", "originalCommit": "91a14b4dcc8a2a7f5d2164d989365dc679422b45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}