{"pr_number": 770, "pr_title": "SE-9718 Adds a cache for resolving blobs by path", "pr_author": "jmuscireum", "pr_createdAt": "2020-06-04T07:06:11Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/770", "merge_commit": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "timeline": [{"oid": "a42bc67ef071f49eb541391ed3e3792b9ab89801", "url": "https://github.com/scireum/sirius-biz/commit/a42bc67ef071f49eb541391ed3e3792b9ab89801", "message": "Adds a cache for resolving blobs by path\n\nBecause S2 needs to resolve files for public viewing using the path,\nthis leads to a lot of database lookups. To counter this we now employ\na cache.\n\nFixes: SE-9718", "committedDate": "2020-06-04T06:35:12Z", "type": "commit"}, {"oid": "1ff2c509de602ab217e51254d48d72d8ab821de1", "url": "https://github.com/scireum/sirius-biz/commit/1ff2c509de602ab217e51254d48d72d8ab821de1", "message": "Moves the deletes into the abstract class\n\nThis allows the cache handling to happen in one place.\n\nFixes: SE-9718", "committedDate": "2020-06-04T07:01:09Z", "type": "commit"}, {"oid": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "url": "https://github.com/scireum/sirius-biz/commit/754b8a4b443a5273f4ec82304a3c9b17160a6071", "message": "Also clear the path cache when updating a blob\n\nThis might update the filename. Thus we need to clear the cache.\n\nFixes: SE-9718", "committedDate": "2020-06-04T07:01:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NTgwMQ==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435045801", "body": "shouldn't the bucket name be in here somewhere?", "bodyText": "shouldn't the bucket name be in here somewhere?", "bodyHTML": "<p dir=\"auto\">shouldn't the bucket name be in here somewhere?</p>", "author": "andyHa", "createdAt": "2020-06-04T07:25:33Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -298,6 +313,13 @@ public Directory getRoot(String tenantId) {\n         if (Strings.isEmpty(path)) {\n             return Optional.empty();\n         }\n+\n+        String cacheKey = tenantId + \"-\" + ensureRelativePath(path);", "originalCommit": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2593500d818c0c13aa4417fbd77693fb9135eb99", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..fd9c13c06 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -314,9 +314,13 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             return Optional.empty();\n         }\n \n-        String cacheKey = tenantId + \"-\" + ensureRelativePath(path);\n+        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, path),\n+                                                       ignored -> fetchByPath(tenantId, path)));\n+    }\n \n-        return Optional.ofNullable(blobByPathCache.get(cacheKey, ignored -> fetchByPath(tenantId, path)));\n+    @Nonnull\n+    private String determinePathCacheKey(String tenantId, String path) {\n+        return spaceName + \"-\" + tenantId + \"-\" + ensureRelativePath(path);\n     }\n \n     protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..eed2c6ce4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -314,9 +314,13 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             return Optional.empty();\n         }\n \n-        String cacheKey = tenantId + \"-\" + ensureRelativePath(path);\n+        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, path),\n+                                                       ignored -> fetchByPath(tenantId, path)));\n+    }\n \n-        return Optional.ofNullable(blobByPathCache.get(cacheKey, ignored -> fetchByPath(tenantId, path)));\n+    @Nonnull\n+    private String determinePathCacheKey(String tenantId, String path) {\n+        return spaceName + \"-\" + tenantId + \"-\" + ensureRelativePath(path);\n     }\n \n     protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n", "next_change": {"commit": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex eed2c6ce4..faf18df5c 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -310,21 +344,23 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Override\n     public Optional<? extends Blob> findByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             return Optional.empty();\n         }\n \n-        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, path),\n-                                                       ignored -> fetchByPath(tenantId, path)));\n+        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, sanitizedPath),\n+                                                       ignored -> fetchByPath(tenantId, sanitizedPath)));\n     }\n \n     @Nonnull\n     private String determinePathCacheKey(String tenantId, String path) {\n-        return spaceName + \"-\" + tenantId + \"-\" + ensureRelativePath(path);\n+        return spaceName + \"-\" + tenantId + \"-\" + path;\n     }\n \n     protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n-        String[] parts = ensureRelativePath(path).split(\"/\");\n+        String[] parts = path.split(\"/\");\n         Directory currentDirectory = getRoot(tenantId);\n         int index = 0;\n         while (currentDirectory != null && index < parts.length - 1) {\n", "next_change": {"commit": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex faf18df5c..b21693cea 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -344,23 +349,21 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Override\n     public Optional<? extends Blob> findByPath(String tenantId, String path) {\n-        String sanitizedPath = utils.sanitizePath(path);\n-\n-        if (Strings.isEmpty(sanitizedPath)) {\n+        if (Strings.isEmpty(path)) {\n             return Optional.empty();\n         }\n \n-        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, sanitizedPath),\n-                                                       ignored -> fetchByPath(tenantId, sanitizedPath)));\n+        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, path),\n+                                                       ignored -> fetchByPath(tenantId, path)));\n     }\n \n     @Nonnull\n     private String determinePathCacheKey(String tenantId, String path) {\n-        return spaceName + \"-\" + tenantId + \"-\" + path;\n+        return spaceName + \"-\" + tenantId + \"-\" + ensureRelativePath(path);\n     }\n \n     protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n-        String[] parts = path.split(\"/\");\n+        String[] parts = ensureRelativePath(path).split(\"/\");\n         Directory currentDirectory = getRoot(tenantId);\n         int index = 0;\n         while (currentDirectory != null && index < parts.length - 1) {\n", "next_change": {"commit": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex b21693cea..4144a4799 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -349,21 +344,23 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Override\n     public Optional<? extends Blob> findByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             return Optional.empty();\n         }\n \n-        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, path),\n-                                                       ignored -> fetchByPath(tenantId, path)));\n+        return Optional.ofNullable(blobByPathCache.get(determinePathCacheKey(tenantId, sanitizedPath),\n+                                                       ignored -> fetchByPath(tenantId, sanitizedPath)));\n     }\n \n     @Nonnull\n     private String determinePathCacheKey(String tenantId, String path) {\n-        return spaceName + \"-\" + tenantId + \"-\" + ensureRelativePath(path);\n+        return spaceName + \"-\" + tenantId + \"-\" + path;\n     }\n \n     protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n-        String[] parts = ensureRelativePath(path).split(\"/\");\n+        String[] parts = path.split(\"/\");\n         Directory currentDirectory = getRoot(tenantId);\n         int index = 0;\n         while (currentDirectory != null && index < parts.length - 1) {\n", "next_change": {"commit": "c64e21d197574bd98a82de1e968137d7149d867d", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 4144a4799..0a9b3de73 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -356,7 +389,7 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Nonnull\n     private String determinePathCacheKey(String tenantId, String path) {\n-        return spaceName + \"-\" + tenantId + \"-\" + path;\n+        return spaceName + \"-\" + tenantId + \"-\" + (useNormalizedNames ? path.toLowerCase() : path);\n     }\n \n     protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "message": "Merge commit", "committedDate": null}, {"oid": "d12274ebed161d63c809eaa5023f4ebcc9f1bd13", "committedDate": "2020-06-16 13:54:23 +0200", "message": "Fixes a typo."}, {"oid": "c5c9c7a7f96769a7fba428d24c6118dd13060613", "committedDate": "2020-06-16 13:58:33 +0200", "message": "Enables touch tracking for blobs."}, {"oid": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "committedDate": "2020-07-07 17:45:20 +0200", "message": "Fix an issue creating files in the storage"}, {"oid": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "committedDate": "2020-07-07 17:48:24 +0200", "message": "Fix a variable usage"}, {"oid": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "committedDate": "2020-07-08 13:31:17 +0200", "message": "Returns the raw object instead of cache contents"}, {"oid": "37b75939e79c0255f77e9cf34324a23f263905bc", "committedDate": "2020-07-09 16:37:10 +0200", "message": "Removes cached data to physical key"}, {"oid": "c71554d5589e9a26a26fab42f51a28610ebed159", "committedDate": "2020-07-09 16:37:40 +0200", "message": "Refactors duplicated code in a method"}, {"oid": "faa9e49cd43c123239886000752be47f595c6a3b", "committedDate": "2020-11-20 12:38:28 +0100", "message": "Fix the retry mechanism of variants"}, {"oid": "4bcddfcd163ff39bad13a15eca4a7dc6df722fd1", "committedDate": "2020-11-23 11:14:46 +0100", "message": "Uses proper exceptions and HTTP response codes to signal the conversion outcomes."}, {"oid": "fea6b64f7fba36b359dfb951344254a3c540c402", "committedDate": "2020-11-23 11:16:00 +0100", "message": "Uses a dedicated retry wait loop for optimistic locks and anther for waiting for conversion results."}, {"oid": "e524fd2ac911d7fd4f6654ef60a7664c58ccf692", "committedDate": "2020-11-24 20:42:34 +0100", "message": "Permits to control the sort order of blobs when shown in the VFS (layer3)."}, {"oid": "28a8e122aebcf12b54d58a244d4c18522aeab755", "committedDate": "2020-11-27 07:29:12 +0100", "message": "Fix invalid formatting syntax"}, {"oid": "6a9e37ddb2765b010aefdb335fd878aa62695a0a", "committedDate": "2020-12-05 09:22:44 +0100", "message": "Reveals the source of a converted image for debugging purposes."}, {"oid": "5cd5fef5312886a7cc031e34f59ee8675fb39e84", "committedDate": "2020-12-05 09:24:26 +0100", "message": "Waits up to 2s (instead of approx. 1500ms) for a conversion to be completed."}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "committedDate": "2020-12-07 08:37:24 +0100", "message": "Sanitize the paths in the blob storage space"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "committedDate": "2020-12-07 08:43:03 +0100", "message": "Ensure that newly created blobs are cached"}, {"oid": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "committedDate": "2020-12-07 13:12:34 +0100", "message": "Only marks a blob / variant delivery as long running if a conversion is required."}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "committedDate": "2020-12-08 14:01:14 +0100", "message": "Invalidate the old cache entry again before adding the new one"}, {"oid": "f4e2fc4613cd5d27bf47a53d49f83b060e384c61", "committedDate": "2020-12-08 14:10:16 +0100", "message": "Merge pull request #939 from scireum/jmu/SIRI-286-sanitize-paths"}, {"oid": "4f67da9919acdb64a1f2a889935c46eb91c87006", "committedDate": "2020-12-17 09:05:46 +0100", "message": "Uses a proper way to measure the conversion duration."}, {"oid": "b51df46d9949625db4eadffd5a3b6450c662ad57", "committedDate": "2020-12-20 16:28:14 +0100", "message": "Improves the metrics which are recorded for file conversions within the Storage engine."}, {"oid": "112eeeafcb20f2570e4d1fcc3e62bfd2eeb64a80", "committedDate": "2021-02-15 11:34:00 +0100", "message": "Implement a method to download a blob in a given variant"}, {"oid": "677e3d3f681e8413de25ac4d6f43ad89dbaf06b4", "committedDate": "2021-02-17 16:32:51 +0100", "message": "Try to delegate downloads of variants if the conversion is disabled"}, {"oid": "88a48ec33650eb1c9c427375ac69e291d4fab4c2", "committedDate": "2021-02-17 16:38:36 +0100", "message": "Remove a Nullable annotation"}, {"oid": "b052c6b24caaa0f24233595762522877799f2c92", "committedDate": "2021-03-07 21:51:39 +0100", "message": "Marks static part refs as nullable."}, {"oid": "0c58b7aa9c632fd49625479c68cce82c43806781", "committedDate": "2021-07-15 11:10:49 +0200", "message": "Adds the ability to purge the blobKeyToPhysicalKey from outside"}, {"oid": "883d0f4839005db1a1664c9e2b6ccfc3b7bbb06a", "committedDate": "2021-07-15 12:34:28 +0200", "message": "Instead of exposing the cache, purge it when deleting a variant entity"}, {"oid": "f1851da67335b48cb67671b7da5168a2171790b8", "committedDate": "2021-07-16 19:10:49 +0200", "message": "Applies sonarlint and IntelliJ inspection fixes."}, {"oid": "3da4a202f0e1c3f4641e3ea3b69b2a209e255a0c", "committedDate": "2021-08-26 14:16:18 +0200", "message": "Uses a proper name for a helper method."}, {"oid": "e84be0ca02d857b540ed47346b88932b34ccde4f", "committedDate": "2021-09-07 10:17:04 +0200", "message": "fix occurred typos"}, {"oid": "6fe77dd8719c5056fce4c03c52ce41c5f163212c", "committedDate": "2021-09-08 09:29:53 +0200", "message": "Minor code-cleanups and typo fixes."}, {"oid": "3204e5915c4d03a650e92616b1cf734ed91e74cc", "committedDate": "2021-09-08 10:27:01 +0200", "message": "Makes some internal method public accessible."}, {"oid": "3064b36bf63804568bc7af3c9c1ab01184e72916", "committedDate": "2021-09-08 10:41:05 +0200", "message": "Improves recording of failed conversion attempts."}, {"oid": "3ad85632bf7ef0f9dfd3d34a8be6b41fae18504a", "committedDate": "2021-09-08 10:41:33 +0200", "message": "Records events for blob conversions."}, {"oid": "d79d455d61f63eed1731f0900dcf0fb47487ed8c", "committedDate": "2021-09-08 10:45:15 +0200", "message": "Caches ultimately failed file conversions."}, {"oid": "ef92915b4ee1a195433a73c849b5ffa155042e52", "committedDate": "2021-09-10 10:06:22 +0200", "message": "Makes a field static so that it is properly injected."}, {"oid": "3f384761817d3eda43860481f76f6a44e28a098f", "committedDate": "2021-09-15 13:21:01 +0200", "message": "Uses a proper way to obtain the physical key within the URLBuilder."}, {"oid": "6be818cceea588906c4908296554bc251872ee89", "committedDate": "2021-10-12 18:37:07 +0200", "message": "Permits to return blobs into a different name with the same normalizedFilename."}, {"oid": "c64e21d197574bd98a82de1e968137d7149d867d", "committedDate": "2021-10-28 18:04:20 +0200", "message": "Operates path cache by normalized names if space does"}, {"oid": "ca262f9789e3ee96113eb3870a08c049b95aa4b8", "committedDate": "2021-11-30 17:29:13 +0100", "message": "Normalizes to Unicode NFC Form when sanitizing a path."}, {"oid": "eb16e0452e8ee56d2ba5d6e13a21b219d0b9a03c", "committedDate": "2021-12-14 11:24:29 +0100", "message": "Permits to read the retentionDays from a blob storage space"}, {"oid": "69b93d1c0e3222d3349874d3209bf154a577e94c", "committedDate": "2022-01-31 11:52:19 +0100", "message": "Retries delegating a conversion if a conversion host is down but multiple are available."}, {"oid": "901a6b808e2a52e71a4a5ae2af460b3d579d15ff", "committedDate": "2022-01-31 12:02:10 +0100", "message": "Ensures proper exception handling in case that no additional conversion hosts are available."}, {"oid": "cc6a40e1e7c7f6ba313c7cb394c1b098c622ec14", "committedDate": "2022-01-31 12:03:49 +0100", "message": "Removes a leftover temporary file in case of an error."}, {"oid": "ee891b9011acd5102665f99cb871556bc1ac3f01", "committedDate": "2022-02-04 11:34:42 +0100", "message": "Properly notes connectivyIssue on retry"}, {"oid": "bcbd81d5f76b0c3aa33a0ad7d4144b35b3211445", "committedDate": "2022-02-04 11:38:58 +0100", "message": "Extracts method"}, {"oid": "7777c08684e9f8f3e685ba5a89ff81c9f3be020d", "committedDate": "2022-02-04 11:57:41 +0100", "message": "Properly retries delegating blob download"}, {"oid": "4c8cb9973307a202162facd521af4affef890517", "committedDate": "2022-02-04 11:59:27 +0100", "message": "Seperates two constants which have the same value"}, {"oid": "a2f1d64c2435b6bfe6162e0293b7ece86c129d07", "committedDate": "2022-02-04 12:02:23 +0100", "message": "Actually also returns the result of the retry"}, {"oid": "b0cdfeb1d2f10ed8fd8a0ce50d19b5c41798a464", "committedDate": "2022-04-19 11:17:35 +0200", "message": "Fixes a StringIndexOutOfBoundsException exception"}, {"oid": "ccf766f3ae8844e3d34b355022883a872b2de127", "committedDate": "2022-04-19 12:13:13 +0200", "message": "Ignores InterruptedIOExceptions when uploading from stream"}, {"oid": "e5f9ca6887bab216bb5045367a3f309373007814", "committedDate": "2022-04-26 15:56:12 +0200", "message": "Throws exceptions even when not logging upload interrupt"}, {"oid": "8bd3d7a98721dcb4c0d727687596c5bdc7266e90", "committedDate": "2022-04-27 08:48:58 +0200", "message": "Merge pull request #1394 from scireum/feature/meg/SIRI-562"}, {"oid": "c4bde0e46c0cd521b2718ec0e8b63447222be418", "committedDate": "2022-06-18 12:46:51 +0200", "message": "Removes a premature translation."}, {"oid": "9fe46a7966805b80f613abe9c83929c7c1f4b41c", "committedDate": "2022-06-18 12:48:19 +0200", "message": "Fixes some JavaDoc typos."}, {"oid": "920e7475deab5c7d3fd717851276d3f819c95a88", "committedDate": "2022-06-28 21:19:53 +0200", "message": "Uses a blocking approach to deliver known large files."}, {"oid": "1f2a605fe0f04c568e090518dc2d0020263cb833", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Allows marking blobs as inconvertible if a conversion error occurs for a variant. This prevents unnecessary conversion retries, e.g. if the input file is not a supported file type."}, {"oid": "c2af5eea8d960b2d0abc52ee7d84b4e8ee57f271", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Code Style"}, {"oid": "3845f784c41d5abdfcc502857bb45781f1c1cbc6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only refreshes from db when retrying conversion"}, {"oid": "7ef99ba46232dab5a43ea9ecbc528d0ebca3a7b6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Extracts method and clarifies variable names"}, {"oid": "05bee62c619fa717baf25be1bbf9da6b205dbb48", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only caches and checks failures for the blob itself. No need to retry conversion for every other variant."}, {"oid": "82cf1ad9fe7a43fb5ea2119ae0d84253c7ba2d9a", "committedDate": "2022-12-12 20:33:35 +0100", "message": "Adds the capability to create variants of a blob by a newly introduced method"}, {"oid": "b4c6998295524742993d0aa58cbb13779956046a", "committedDate": "2022-12-14 22:41:39 +0100", "message": "Actually makes the findOrCreatVariant method blocking"}, {"oid": "c5c0a581bc5b318e5e405b2113247709852bb340", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Resolves TODOs. Inconvertible is now cached for the blob instead of individual variants."}, {"oid": "b7657b73671e378e7ddc8691ac77029ce11acd4c", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Inverts if to simplify code"}, {"oid": "fe29042a1af68e2040ed800b13dd3fb2dbe2ed43", "committedDate": "2022-12-16 13:32:02 +0100", "message": "Marks failure for Blob and Variant at the same time"}, {"oid": "05f4bfaeb4ccee7c0a85a5709a6b5e0597b67cc0", "committedDate": "2022-12-16 14:16:31 +0100", "message": "Also refreshes the blob when retrying after an optimistic lock error"}, {"oid": "bc184f240d830eac248f1122716233cab3660f09", "committedDate": "2023-01-09 16:56:18 +0100", "message": "Revert \"Actually makes the findOrCreatVariant method blocking\""}, {"oid": "9b181920a5cb474ebd2bffa16de6af89cde23123", "committedDate": "2023-01-09 17:58:20 +0100", "message": "Adds a new variant creation path which was designed for longer running conversions."}, {"oid": "46fb8f1cfe93000b2456eaaa1a1aac0bdeb00340", "committedDate": "2023-01-10 09:39:35 +0100", "message": "Removes the ensureVariantExists method since it is not used anymore."}, {"oid": "1a94418505fba3cc0c2ca53e6a0690336baf8527", "committedDate": "2023-01-10 13:19:02 +0100", "message": "Reverts marking blobs as inconvertible"}, {"oid": "e25cb94c36040b5696c19ad26bfe13e067b8625f", "committedDate": "2023-01-10 13:21:01 +0100", "message": "Propagates failed variant conversions to registered error handlers"}, {"oid": "81bc3a4de4e0396a17152408eff94c385cf77337", "committedDate": "2023-01-10 17:20:17 +0100", "message": "Fixes a bug which prevented the variants from being delivered/displayed due to an early null return"}, {"oid": "3d10fc2f5e8172e8f70e5478ca599bb78df0e09e", "committedDate": "2023-01-11 09:20:02 +0100", "message": "Moves error handler invocation directly to point of use"}, {"oid": "8fa47399e277f18f207feeca098e46352a4901ec", "committedDate": "2023-01-11 13:19:21 +0100", "message": "Fixes typo"}, {"oid": "3a36355103d816e824cf2a09901276810d320bc5", "committedDate": "2023-01-11 13:20:52 +0100", "message": "Improves javadoc"}, {"oid": "adfccd62fc5084da20db97a20214b09305976ca0", "committedDate": "2023-01-11 13:21:14 +0100", "message": "Merge remote-tracking branch 'origin/feature/mko/OX-9323' into feature/mko/OX-9323"}, {"oid": "74b38a0c7382c789776e2f1405d7e5609d6bfb05", "committedDate": "2023-01-11 13:33:27 +0100", "message": "Renames variable"}, {"oid": "5e05c3493d356fa9951937d66149cebb7c60b576", "committedDate": "2023-01-16 11:05:50 +0100", "message": "Merge pull request #1549 from scireum/feature/csc/SIRI-658_blobFlag"}, {"oid": "373790d59e845c7e86f6fb33fb5e933dbbe592e7", "committedDate": "2023-01-17 14:27:28 +0100", "message": "Makes the handler list static to ensure proper loading"}, {"oid": "95d52f9cd5a33188a5a9f7870854aaf4df2aee91", "committedDate": "2023-02-03 10:47:40 +0100", "message": "Fixes typos"}, {"oid": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "committedDate": "2023-03-30 17:12:04 +0200", "message": "Fixes and improves blob cache invalidation"}, {"oid": "0b047de23b1bd3cd06f80b57dee287521ec54a2b", "committedDate": "2023-03-31 10:15:34 +0200", "message": "Changes remove to convenience method"}, {"oid": "a2f660b08a00730eeb5f0d7e8b028e34d17bdc10", "committedDate": "2023-04-03 07:02:04 +0200", "message": "Properly clears cache in case of renamings"}, {"oid": "e27f6ad1930182e966802b958c496d082034369c", "committedDate": "2023-04-04 14:12:43 +0200", "message": "Fixes typos"}, {"oid": "6f8801b7c5afcb7c3cde0aedd5d2d49a49fe4dfe", "committedDate": "2023-04-04 14:14:39 +0200", "message": "Provides the input file to the conversion"}, {"oid": "fb4ad4c78300639008de522ecb7984ffa1023405", "committedDate": "2023-04-04 16:20:35 +0200", "message": "Prefers FileHandle instead of File"}, {"oid": "dd870523055bdef60ab261da4f8e676fe20a60f1", "committedDate": "2023-04-04 16:35:01 +0200", "message": "Fixes an NPE when no FileHandle was given"}, {"oid": "7dd724fbd252a16ed20c3efad91a6101490aa2da", "committedDate": "2023-04-14 11:16:16 +0200", "message": "Implements the formerly added method"}, {"oid": "b1f2d46f14df61e05ce3238e1238c38c19d7898b", "committedDate": "2023-04-20 14:07:05 +0200", "message": "Provides a simple way for inserting help/user assistance into backed pages."}, {"oid": "cd26a84debbc8797575b2c96730d5b7ae5b77539", "committedDate": "2023-05-09 14:35:04 +0200", "message": "Removes the re-throwing of the exception within the invokeConversionPipelineAsync method since it is not needed anymore"}, {"oid": "f4cc3ba1f130945e37028beb9a25dc812eb80893", "committedDate": "2023-05-12 15:16:00 +0200", "message": "Permits to read and set the read-only information"}, {"oid": "e9fd65525b45d2d73ad80cb304fa7b790c5dbcf0", "committedDate": "2023-05-15 13:33:59 +0200", "message": "Merge branch 'develop' into ili/read-only-files"}, {"oid": "093b5b8b70f95455947daa67c1d01a0ec6579788", "committedDate": "2023-05-17 17:55:06 +0200", "message": "Makes updateBlobReadOnlyFlag public"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NjQxMw==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435046413", "body": "looks redundant to the code above", "bodyText": "looks redundant to the code above", "bodyHTML": "<p dir=\"auto\">looks redundant to the code above</p>", "author": "andyHa", "createdAt": "2020-06-04T07:26:42Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -332,6 +354,12 @@ public Blob findOrCreateByPath(String tenantId, String path) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n+        String cacheKey = tenantId + \"-\" + ensureRelativePath(path);", "originalCommit": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2593500d818c0c13aa4417fbd77693fb9135eb99", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..fd9c13c06 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -354,9 +358,8 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String cacheKey = tenantId + \"-\" + ensureRelativePath(path);\n-\n-        return blobByPathCache.get(cacheKey, ignored -> fetchOrCreateByPath(tenantId, path));\n+        return blobByPathCache.get(determinePathCacheKey(tenantId, path),\n+                                   ignored -> fetchOrCreateByPath(tenantId, path));\n     }\n \n     protected Blob fetchOrCreateByPath(String tenantId, @Nonnull String path) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..eed2c6ce4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -354,9 +358,8 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String cacheKey = tenantId + \"-\" + ensureRelativePath(path);\n-\n-        return blobByPathCache.get(cacheKey, ignored -> fetchOrCreateByPath(tenantId, path));\n+        return blobByPathCache.get(determinePathCacheKey(tenantId, path),\n+                                   ignored -> fetchOrCreateByPath(tenantId, path));\n     }\n \n     protected Blob fetchOrCreateByPath(String tenantId, @Nonnull String path) {\n", "next_change": {"commit": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex eed2c6ce4..0259a7bcc 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -358,8 +373,14 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        return blobByPathCache.get(determinePathCacheKey(tenantId, path),\n-                                   ignored -> fetchOrCreateByPath(tenantId, path));\n+        String key = determinePathCacheKey(tenantId, path);\n+        Blob blob = blobByPathCache.get(key);\n+        if (blob == null) {\n+            blobByPathCache.remove(key);\n+            blob = blobByPathCache.get(determinePathCacheKey(tenantId, path),\n+                                       ignored -> fetchOrCreateByPath(tenantId, path));\n+        }\n+        return blob;\n     }\n \n     protected Blob fetchOrCreateByPath(String tenantId, @Nonnull String path) {\n", "next_change": {"commit": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 0259a7bcc..e23ed09ec 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -377,8 +377,7 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n             blobByPathCache.remove(key);\n-            blob = blobByPathCache.get(determinePathCacheKey(tenantId, path),\n-                                       ignored -> fetchOrCreateByPath(tenantId, path));\n+            blob = blobByPathCache.get(key, ignored -> fetchOrCreateByPath(tenantId, path));\n         }\n         return blob;\n     }\n", "next_change": {"commit": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex e23ed09ec..1ed3d8490 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -377,7 +377,7 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n             blobByPathCache.remove(key);\n-            blob = blobByPathCache.get(key, ignored -> fetchOrCreateByPath(tenantId, path));\n+            blob = fetchOrCreateByPath(tenantId, path);\n         }\n         return blob;\n     }\n", "next_change": {"commit": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 1ed3d8490..faf18df5c 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -369,21 +382,23 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String key = determinePathCacheKey(tenantId, path);\n+        String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n             blobByPathCache.remove(key);\n-            blob = fetchOrCreateByPath(tenantId, path);\n+            blob = fetchOrCreateByPath(tenantId, sanitizedPath);\n         }\n         return blob;\n     }\n \n     protected Blob fetchOrCreateByPath(String tenantId, @Nonnull String path) {\n-        String[] parts = ensureRelativePath(path).split(\"/\");\n+        String[] parts = path.split(\"/\");\n         Directory currentDirectory = getRoot(tenantId);\n         int index = 0;\n         while (index < parts.length - 1) {\n", "next_change": {"commit": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex faf18df5c..b21693cea 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -382,23 +393,21 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        String sanitizedPath = utils.sanitizePath(path);\n-\n-        if (Strings.isEmpty(sanitizedPath)) {\n+        if (Strings.isEmpty(path)) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String key = determinePathCacheKey(tenantId, sanitizedPath);\n+        String key = determinePathCacheKey(tenantId, path);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n             blobByPathCache.remove(key);\n-            blob = fetchOrCreateByPath(tenantId, sanitizedPath);\n+            blob = fetchOrCreateByPath(tenantId, path);\n         }\n         return blob;\n     }\n \n     protected Blob fetchOrCreateByPath(String tenantId, @Nonnull String path) {\n-        String[] parts = path.split(\"/\");\n+        String[] parts = ensureRelativePath(path).split(\"/\");\n         Directory currentDirectory = getRoot(tenantId);\n         int index = 0;\n         while (index < parts.length - 1) {\n", "next_change": {"commit": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex b21693cea..4144a4799 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -393,21 +382,26 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String key = determinePathCacheKey(tenantId, path);\n+        String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n+            // Ensure the cache entry is invalidated on all nodes\n             blobByPathCache.remove(key);\n-            blob = fetchOrCreateByPath(tenantId, path);\n+\n+            blob = fetchOrCreateByPath(tenantId, sanitizedPath);\n+            blobByPathCache.put(key, blob);\n         }\n         return blob;\n     }\n \n     protected Blob fetchOrCreateByPath(String tenantId, @Nonnull String path) {\n-        String[] parts = ensureRelativePath(path).split(\"/\");\n+        String[] parts = path.split(\"/\");\n         Directory currentDirectory = getRoot(tenantId);\n         int index = 0;\n         while (index < parts.length - 1) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "message": "Merge commit", "committedDate": null}, {"oid": "d12274ebed161d63c809eaa5023f4ebcc9f1bd13", "committedDate": "2020-06-16 13:54:23 +0200", "message": "Fixes a typo."}, {"oid": "c5c9c7a7f96769a7fba428d24c6118dd13060613", "committedDate": "2020-06-16 13:58:33 +0200", "message": "Enables touch tracking for blobs."}, {"oid": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "committedDate": "2020-07-07 17:45:20 +0200", "message": "Fix an issue creating files in the storage"}, {"oid": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "committedDate": "2020-07-07 17:48:24 +0200", "message": "Fix a variable usage"}, {"oid": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "committedDate": "2020-07-08 13:31:17 +0200", "message": "Returns the raw object instead of cache contents"}, {"oid": "37b75939e79c0255f77e9cf34324a23f263905bc", "committedDate": "2020-07-09 16:37:10 +0200", "message": "Removes cached data to physical key"}, {"oid": "c71554d5589e9a26a26fab42f51a28610ebed159", "committedDate": "2020-07-09 16:37:40 +0200", "message": "Refactors duplicated code in a method"}, {"oid": "faa9e49cd43c123239886000752be47f595c6a3b", "committedDate": "2020-11-20 12:38:28 +0100", "message": "Fix the retry mechanism of variants"}, {"oid": "4bcddfcd163ff39bad13a15eca4a7dc6df722fd1", "committedDate": "2020-11-23 11:14:46 +0100", "message": "Uses proper exceptions and HTTP response codes to signal the conversion outcomes."}, {"oid": "fea6b64f7fba36b359dfb951344254a3c540c402", "committedDate": "2020-11-23 11:16:00 +0100", "message": "Uses a dedicated retry wait loop for optimistic locks and anther for waiting for conversion results."}, {"oid": "e524fd2ac911d7fd4f6654ef60a7664c58ccf692", "committedDate": "2020-11-24 20:42:34 +0100", "message": "Permits to control the sort order of blobs when shown in the VFS (layer3)."}, {"oid": "28a8e122aebcf12b54d58a244d4c18522aeab755", "committedDate": "2020-11-27 07:29:12 +0100", "message": "Fix invalid formatting syntax"}, {"oid": "6a9e37ddb2765b010aefdb335fd878aa62695a0a", "committedDate": "2020-12-05 09:22:44 +0100", "message": "Reveals the source of a converted image for debugging purposes."}, {"oid": "5cd5fef5312886a7cc031e34f59ee8675fb39e84", "committedDate": "2020-12-05 09:24:26 +0100", "message": "Waits up to 2s (instead of approx. 1500ms) for a conversion to be completed."}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "committedDate": "2020-12-07 08:37:24 +0100", "message": "Sanitize the paths in the blob storage space"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "committedDate": "2020-12-07 08:43:03 +0100", "message": "Ensure that newly created blobs are cached"}, {"oid": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "committedDate": "2020-12-07 13:12:34 +0100", "message": "Only marks a blob / variant delivery as long running if a conversion is required."}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "committedDate": "2020-12-08 14:01:14 +0100", "message": "Invalidate the old cache entry again before adding the new one"}, {"oid": "f4e2fc4613cd5d27bf47a53d49f83b060e384c61", "committedDate": "2020-12-08 14:10:16 +0100", "message": "Merge pull request #939 from scireum/jmu/SIRI-286-sanitize-paths"}, {"oid": "4f67da9919acdb64a1f2a889935c46eb91c87006", "committedDate": "2020-12-17 09:05:46 +0100", "message": "Uses a proper way to measure the conversion duration."}, {"oid": "b51df46d9949625db4eadffd5a3b6450c662ad57", "committedDate": "2020-12-20 16:28:14 +0100", "message": "Improves the metrics which are recorded for file conversions within the Storage engine."}, {"oid": "112eeeafcb20f2570e4d1fcc3e62bfd2eeb64a80", "committedDate": "2021-02-15 11:34:00 +0100", "message": "Implement a method to download a blob in a given variant"}, {"oid": "677e3d3f681e8413de25ac4d6f43ad89dbaf06b4", "committedDate": "2021-02-17 16:32:51 +0100", "message": "Try to delegate downloads of variants if the conversion is disabled"}, {"oid": "88a48ec33650eb1c9c427375ac69e291d4fab4c2", "committedDate": "2021-02-17 16:38:36 +0100", "message": "Remove a Nullable annotation"}, {"oid": "b052c6b24caaa0f24233595762522877799f2c92", "committedDate": "2021-03-07 21:51:39 +0100", "message": "Marks static part refs as nullable."}, {"oid": "0c58b7aa9c632fd49625479c68cce82c43806781", "committedDate": "2021-07-15 11:10:49 +0200", "message": "Adds the ability to purge the blobKeyToPhysicalKey from outside"}, {"oid": "883d0f4839005db1a1664c9e2b6ccfc3b7bbb06a", "committedDate": "2021-07-15 12:34:28 +0200", "message": "Instead of exposing the cache, purge it when deleting a variant entity"}, {"oid": "f1851da67335b48cb67671b7da5168a2171790b8", "committedDate": "2021-07-16 19:10:49 +0200", "message": "Applies sonarlint and IntelliJ inspection fixes."}, {"oid": "3da4a202f0e1c3f4641e3ea3b69b2a209e255a0c", "committedDate": "2021-08-26 14:16:18 +0200", "message": "Uses a proper name for a helper method."}, {"oid": "e84be0ca02d857b540ed47346b88932b34ccde4f", "committedDate": "2021-09-07 10:17:04 +0200", "message": "fix occurred typos"}, {"oid": "6fe77dd8719c5056fce4c03c52ce41c5f163212c", "committedDate": "2021-09-08 09:29:53 +0200", "message": "Minor code-cleanups and typo fixes."}, {"oid": "3204e5915c4d03a650e92616b1cf734ed91e74cc", "committedDate": "2021-09-08 10:27:01 +0200", "message": "Makes some internal method public accessible."}, {"oid": "3064b36bf63804568bc7af3c9c1ab01184e72916", "committedDate": "2021-09-08 10:41:05 +0200", "message": "Improves recording of failed conversion attempts."}, {"oid": "3ad85632bf7ef0f9dfd3d34a8be6b41fae18504a", "committedDate": "2021-09-08 10:41:33 +0200", "message": "Records events for blob conversions."}, {"oid": "d79d455d61f63eed1731f0900dcf0fb47487ed8c", "committedDate": "2021-09-08 10:45:15 +0200", "message": "Caches ultimately failed file conversions."}, {"oid": "ef92915b4ee1a195433a73c849b5ffa155042e52", "committedDate": "2021-09-10 10:06:22 +0200", "message": "Makes a field static so that it is properly injected."}, {"oid": "3f384761817d3eda43860481f76f6a44e28a098f", "committedDate": "2021-09-15 13:21:01 +0200", "message": "Uses a proper way to obtain the physical key within the URLBuilder."}, {"oid": "6be818cceea588906c4908296554bc251872ee89", "committedDate": "2021-10-12 18:37:07 +0200", "message": "Permits to return blobs into a different name with the same normalizedFilename."}, {"oid": "c64e21d197574bd98a82de1e968137d7149d867d", "committedDate": "2021-10-28 18:04:20 +0200", "message": "Operates path cache by normalized names if space does"}, {"oid": "ca262f9789e3ee96113eb3870a08c049b95aa4b8", "committedDate": "2021-11-30 17:29:13 +0100", "message": "Normalizes to Unicode NFC Form when sanitizing a path."}, {"oid": "eb16e0452e8ee56d2ba5d6e13a21b219d0b9a03c", "committedDate": "2021-12-14 11:24:29 +0100", "message": "Permits to read the retentionDays from a blob storage space"}, {"oid": "69b93d1c0e3222d3349874d3209bf154a577e94c", "committedDate": "2022-01-31 11:52:19 +0100", "message": "Retries delegating a conversion if a conversion host is down but multiple are available."}, {"oid": "901a6b808e2a52e71a4a5ae2af460b3d579d15ff", "committedDate": "2022-01-31 12:02:10 +0100", "message": "Ensures proper exception handling in case that no additional conversion hosts are available."}, {"oid": "cc6a40e1e7c7f6ba313c7cb394c1b098c622ec14", "committedDate": "2022-01-31 12:03:49 +0100", "message": "Removes a leftover temporary file in case of an error."}, {"oid": "ee891b9011acd5102665f99cb871556bc1ac3f01", "committedDate": "2022-02-04 11:34:42 +0100", "message": "Properly notes connectivyIssue on retry"}, {"oid": "bcbd81d5f76b0c3aa33a0ad7d4144b35b3211445", "committedDate": "2022-02-04 11:38:58 +0100", "message": "Extracts method"}, {"oid": "7777c08684e9f8f3e685ba5a89ff81c9f3be020d", "committedDate": "2022-02-04 11:57:41 +0100", "message": "Properly retries delegating blob download"}, {"oid": "4c8cb9973307a202162facd521af4affef890517", "committedDate": "2022-02-04 11:59:27 +0100", "message": "Seperates two constants which have the same value"}, {"oid": "a2f1d64c2435b6bfe6162e0293b7ece86c129d07", "committedDate": "2022-02-04 12:02:23 +0100", "message": "Actually also returns the result of the retry"}, {"oid": "b0cdfeb1d2f10ed8fd8a0ce50d19b5c41798a464", "committedDate": "2022-04-19 11:17:35 +0200", "message": "Fixes a StringIndexOutOfBoundsException exception"}, {"oid": "ccf766f3ae8844e3d34b355022883a872b2de127", "committedDate": "2022-04-19 12:13:13 +0200", "message": "Ignores InterruptedIOExceptions when uploading from stream"}, {"oid": "e5f9ca6887bab216bb5045367a3f309373007814", "committedDate": "2022-04-26 15:56:12 +0200", "message": "Throws exceptions even when not logging upload interrupt"}, {"oid": "8bd3d7a98721dcb4c0d727687596c5bdc7266e90", "committedDate": "2022-04-27 08:48:58 +0200", "message": "Merge pull request #1394 from scireum/feature/meg/SIRI-562"}, {"oid": "c4bde0e46c0cd521b2718ec0e8b63447222be418", "committedDate": "2022-06-18 12:46:51 +0200", "message": "Removes a premature translation."}, {"oid": "9fe46a7966805b80f613abe9c83929c7c1f4b41c", "committedDate": "2022-06-18 12:48:19 +0200", "message": "Fixes some JavaDoc typos."}, {"oid": "920e7475deab5c7d3fd717851276d3f819c95a88", "committedDate": "2022-06-28 21:19:53 +0200", "message": "Uses a blocking approach to deliver known large files."}, {"oid": "1f2a605fe0f04c568e090518dc2d0020263cb833", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Allows marking blobs as inconvertible if a conversion error occurs for a variant. This prevents unnecessary conversion retries, e.g. if the input file is not a supported file type."}, {"oid": "c2af5eea8d960b2d0abc52ee7d84b4e8ee57f271", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Code Style"}, {"oid": "3845f784c41d5abdfcc502857bb45781f1c1cbc6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only refreshes from db when retrying conversion"}, {"oid": "7ef99ba46232dab5a43ea9ecbc528d0ebca3a7b6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Extracts method and clarifies variable names"}, {"oid": "05bee62c619fa717baf25be1bbf9da6b205dbb48", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only caches and checks failures for the blob itself. No need to retry conversion for every other variant."}, {"oid": "82cf1ad9fe7a43fb5ea2119ae0d84253c7ba2d9a", "committedDate": "2022-12-12 20:33:35 +0100", "message": "Adds the capability to create variants of a blob by a newly introduced method"}, {"oid": "b4c6998295524742993d0aa58cbb13779956046a", "committedDate": "2022-12-14 22:41:39 +0100", "message": "Actually makes the findOrCreatVariant method blocking"}, {"oid": "c5c0a581bc5b318e5e405b2113247709852bb340", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Resolves TODOs. Inconvertible is now cached for the blob instead of individual variants."}, {"oid": "b7657b73671e378e7ddc8691ac77029ce11acd4c", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Inverts if to simplify code"}, {"oid": "fe29042a1af68e2040ed800b13dd3fb2dbe2ed43", "committedDate": "2022-12-16 13:32:02 +0100", "message": "Marks failure for Blob and Variant at the same time"}, {"oid": "05f4bfaeb4ccee7c0a85a5709a6b5e0597b67cc0", "committedDate": "2022-12-16 14:16:31 +0100", "message": "Also refreshes the blob when retrying after an optimistic lock error"}, {"oid": "bc184f240d830eac248f1122716233cab3660f09", "committedDate": "2023-01-09 16:56:18 +0100", "message": "Revert \"Actually makes the findOrCreatVariant method blocking\""}, {"oid": "9b181920a5cb474ebd2bffa16de6af89cde23123", "committedDate": "2023-01-09 17:58:20 +0100", "message": "Adds a new variant creation path which was designed for longer running conversions."}, {"oid": "46fb8f1cfe93000b2456eaaa1a1aac0bdeb00340", "committedDate": "2023-01-10 09:39:35 +0100", "message": "Removes the ensureVariantExists method since it is not used anymore."}, {"oid": "1a94418505fba3cc0c2ca53e6a0690336baf8527", "committedDate": "2023-01-10 13:19:02 +0100", "message": "Reverts marking blobs as inconvertible"}, {"oid": "e25cb94c36040b5696c19ad26bfe13e067b8625f", "committedDate": "2023-01-10 13:21:01 +0100", "message": "Propagates failed variant conversions to registered error handlers"}, {"oid": "81bc3a4de4e0396a17152408eff94c385cf77337", "committedDate": "2023-01-10 17:20:17 +0100", "message": "Fixes a bug which prevented the variants from being delivered/displayed due to an early null return"}, {"oid": "3d10fc2f5e8172e8f70e5478ca599bb78df0e09e", "committedDate": "2023-01-11 09:20:02 +0100", "message": "Moves error handler invocation directly to point of use"}, {"oid": "8fa47399e277f18f207feeca098e46352a4901ec", "committedDate": "2023-01-11 13:19:21 +0100", "message": "Fixes typo"}, {"oid": "3a36355103d816e824cf2a09901276810d320bc5", "committedDate": "2023-01-11 13:20:52 +0100", "message": "Improves javadoc"}, {"oid": "adfccd62fc5084da20db97a20214b09305976ca0", "committedDate": "2023-01-11 13:21:14 +0100", "message": "Merge remote-tracking branch 'origin/feature/mko/OX-9323' into feature/mko/OX-9323"}, {"oid": "74b38a0c7382c789776e2f1405d7e5609d6bfb05", "committedDate": "2023-01-11 13:33:27 +0100", "message": "Renames variable"}, {"oid": "5e05c3493d356fa9951937d66149cebb7c60b576", "committedDate": "2023-01-16 11:05:50 +0100", "message": "Merge pull request #1549 from scireum/feature/csc/SIRI-658_blobFlag"}, {"oid": "373790d59e845c7e86f6fb33fb5e933dbbe592e7", "committedDate": "2023-01-17 14:27:28 +0100", "message": "Makes the handler list static to ensure proper loading"}, {"oid": "95d52f9cd5a33188a5a9f7870854aaf4df2aee91", "committedDate": "2023-02-03 10:47:40 +0100", "message": "Fixes typos"}, {"oid": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "committedDate": "2023-03-30 17:12:04 +0200", "message": "Fixes and improves blob cache invalidation"}, {"oid": "0b047de23b1bd3cd06f80b57dee287521ec54a2b", "committedDate": "2023-03-31 10:15:34 +0200", "message": "Changes remove to convenience method"}, {"oid": "a2f660b08a00730eeb5f0d7e8b028e34d17bdc10", "committedDate": "2023-04-03 07:02:04 +0200", "message": "Properly clears cache in case of renamings"}, {"oid": "e27f6ad1930182e966802b958c496d082034369c", "committedDate": "2023-04-04 14:12:43 +0200", "message": "Fixes typos"}, {"oid": "6f8801b7c5afcb7c3cde0aedd5d2d49a49fe4dfe", "committedDate": "2023-04-04 14:14:39 +0200", "message": "Provides the input file to the conversion"}, {"oid": "fb4ad4c78300639008de522ecb7984ffa1023405", "committedDate": "2023-04-04 16:20:35 +0200", "message": "Prefers FileHandle instead of File"}, {"oid": "dd870523055bdef60ab261da4f8e676fe20a60f1", "committedDate": "2023-04-04 16:35:01 +0200", "message": "Fixes an NPE when no FileHandle was given"}, {"oid": "7dd724fbd252a16ed20c3efad91a6101490aa2da", "committedDate": "2023-04-14 11:16:16 +0200", "message": "Implements the formerly added method"}, {"oid": "b1f2d46f14df61e05ce3238e1238c38c19d7898b", "committedDate": "2023-04-20 14:07:05 +0200", "message": "Provides a simple way for inserting help/user assistance into backed pages."}, {"oid": "cd26a84debbc8797575b2c96730d5b7ae5b77539", "committedDate": "2023-05-09 14:35:04 +0200", "message": "Removes the re-throwing of the exception within the invokeConversionPipelineAsync method since it is not needed anymore"}, {"oid": "f4cc3ba1f130945e37028beb9a25dc812eb80893", "committedDate": "2023-05-12 15:16:00 +0200", "message": "Permits to read and set the read-only information"}, {"oid": "e9fd65525b45d2d73ad80cb304fa7b790c5dbcf0", "committedDate": "2023-05-15 13:33:59 +0200", "message": "Merge branch 'develop' into ili/read-only-files"}, {"oid": "093b5b8b70f95455947daa67c1d01a0ec6579788", "committedDate": "2023-05-17 17:55:06 +0200", "message": "Makes updateBlobReadOnlyFlag public"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Njc2Nw==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435046767", "body": "is this intentionally exposed as public. the official way is Directory.delete()", "bodyText": "is this intentionally exposed as public. the official way is Directory.delete()", "bodyHTML": "<p dir=\"auto\">is this intentionally exposed as public. the official way is Directory.delete()</p>", "author": "andyHa", "createdAt": "2020-06-04T07:27:22Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -701,6 +730,24 @@ private void handleTenantMismatch(Object objectToModify, D newParent) {\n                         .handle();\n     }\n \n+    /**\n+     * Deletes the given directory.\n+     *\n+     * @param directory the directory to delete\n+     */\n+    public void deleteDirectory(D directory) {", "originalCommit": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjY2Nw==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435106667", "bodyText": "Otherwise it is not possible to call deleteDirectory from SQLDirectory and MongoDirectory.", "author": "jmuscireum", "createdAt": "2020-06-04T09:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Njc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNzMxNQ==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435117315", "bodyText": "k", "author": "andyHa", "createdAt": "2020-06-04T09:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Njc2Nw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "message": "Merge commit", "committedDate": null}, {"oid": "d12274ebed161d63c809eaa5023f4ebcc9f1bd13", "committedDate": "2020-06-16 13:54:23 +0200", "message": "Fixes a typo."}, {"oid": "c5c9c7a7f96769a7fba428d24c6118dd13060613", "committedDate": "2020-06-16 13:58:33 +0200", "message": "Enables touch tracking for blobs."}, {"oid": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "committedDate": "2020-07-07 17:45:20 +0200", "message": "Fix an issue creating files in the storage"}, {"oid": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "committedDate": "2020-07-07 17:48:24 +0200", "message": "Fix a variable usage"}, {"oid": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "committedDate": "2020-07-08 13:31:17 +0200", "message": "Returns the raw object instead of cache contents"}, {"oid": "37b75939e79c0255f77e9cf34324a23f263905bc", "committedDate": "2020-07-09 16:37:10 +0200", "message": "Removes cached data to physical key"}, {"oid": "c71554d5589e9a26a26fab42f51a28610ebed159", "committedDate": "2020-07-09 16:37:40 +0200", "message": "Refactors duplicated code in a method"}, {"oid": "faa9e49cd43c123239886000752be47f595c6a3b", "committedDate": "2020-11-20 12:38:28 +0100", "message": "Fix the retry mechanism of variants"}, {"oid": "4bcddfcd163ff39bad13a15eca4a7dc6df722fd1", "committedDate": "2020-11-23 11:14:46 +0100", "message": "Uses proper exceptions and HTTP response codes to signal the conversion outcomes."}, {"oid": "fea6b64f7fba36b359dfb951344254a3c540c402", "committedDate": "2020-11-23 11:16:00 +0100", "message": "Uses a dedicated retry wait loop for optimistic locks and anther for waiting for conversion results."}, {"oid": "e524fd2ac911d7fd4f6654ef60a7664c58ccf692", "committedDate": "2020-11-24 20:42:34 +0100", "message": "Permits to control the sort order of blobs when shown in the VFS (layer3)."}, {"oid": "28a8e122aebcf12b54d58a244d4c18522aeab755", "committedDate": "2020-11-27 07:29:12 +0100", "message": "Fix invalid formatting syntax"}, {"oid": "6a9e37ddb2765b010aefdb335fd878aa62695a0a", "committedDate": "2020-12-05 09:22:44 +0100", "message": "Reveals the source of a converted image for debugging purposes."}, {"oid": "5cd5fef5312886a7cc031e34f59ee8675fb39e84", "committedDate": "2020-12-05 09:24:26 +0100", "message": "Waits up to 2s (instead of approx. 1500ms) for a conversion to be completed."}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "committedDate": "2020-12-07 08:37:24 +0100", "message": "Sanitize the paths in the blob storage space"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "committedDate": "2020-12-07 08:43:03 +0100", "message": "Ensure that newly created blobs are cached"}, {"oid": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "committedDate": "2020-12-07 13:12:34 +0100", "message": "Only marks a blob / variant delivery as long running if a conversion is required."}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "committedDate": "2020-12-08 14:01:14 +0100", "message": "Invalidate the old cache entry again before adding the new one"}, {"oid": "f4e2fc4613cd5d27bf47a53d49f83b060e384c61", "committedDate": "2020-12-08 14:10:16 +0100", "message": "Merge pull request #939 from scireum/jmu/SIRI-286-sanitize-paths"}, {"oid": "4f67da9919acdb64a1f2a889935c46eb91c87006", "committedDate": "2020-12-17 09:05:46 +0100", "message": "Uses a proper way to measure the conversion duration."}, {"oid": "b51df46d9949625db4eadffd5a3b6450c662ad57", "committedDate": "2020-12-20 16:28:14 +0100", "message": "Improves the metrics which are recorded for file conversions within the Storage engine."}, {"oid": "112eeeafcb20f2570e4d1fcc3e62bfd2eeb64a80", "committedDate": "2021-02-15 11:34:00 +0100", "message": "Implement a method to download a blob in a given variant"}, {"oid": "677e3d3f681e8413de25ac4d6f43ad89dbaf06b4", "committedDate": "2021-02-17 16:32:51 +0100", "message": "Try to delegate downloads of variants if the conversion is disabled"}, {"oid": "88a48ec33650eb1c9c427375ac69e291d4fab4c2", "committedDate": "2021-02-17 16:38:36 +0100", "message": "Remove a Nullable annotation"}, {"oid": "b052c6b24caaa0f24233595762522877799f2c92", "committedDate": "2021-03-07 21:51:39 +0100", "message": "Marks static part refs as nullable."}, {"oid": "0c58b7aa9c632fd49625479c68cce82c43806781", "committedDate": "2021-07-15 11:10:49 +0200", "message": "Adds the ability to purge the blobKeyToPhysicalKey from outside"}, {"oid": "883d0f4839005db1a1664c9e2b6ccfc3b7bbb06a", "committedDate": "2021-07-15 12:34:28 +0200", "message": "Instead of exposing the cache, purge it when deleting a variant entity"}, {"oid": "f1851da67335b48cb67671b7da5168a2171790b8", "committedDate": "2021-07-16 19:10:49 +0200", "message": "Applies sonarlint and IntelliJ inspection fixes."}, {"oid": "3da4a202f0e1c3f4641e3ea3b69b2a209e255a0c", "committedDate": "2021-08-26 14:16:18 +0200", "message": "Uses a proper name for a helper method."}, {"oid": "e84be0ca02d857b540ed47346b88932b34ccde4f", "committedDate": "2021-09-07 10:17:04 +0200", "message": "fix occurred typos"}, {"oid": "6fe77dd8719c5056fce4c03c52ce41c5f163212c", "committedDate": "2021-09-08 09:29:53 +0200", "message": "Minor code-cleanups and typo fixes."}, {"oid": "3204e5915c4d03a650e92616b1cf734ed91e74cc", "committedDate": "2021-09-08 10:27:01 +0200", "message": "Makes some internal method public accessible."}, {"oid": "3064b36bf63804568bc7af3c9c1ab01184e72916", "committedDate": "2021-09-08 10:41:05 +0200", "message": "Improves recording of failed conversion attempts."}, {"oid": "3ad85632bf7ef0f9dfd3d34a8be6b41fae18504a", "committedDate": "2021-09-08 10:41:33 +0200", "message": "Records events for blob conversions."}, {"oid": "d79d455d61f63eed1731f0900dcf0fb47487ed8c", "committedDate": "2021-09-08 10:45:15 +0200", "message": "Caches ultimately failed file conversions."}, {"oid": "ef92915b4ee1a195433a73c849b5ffa155042e52", "committedDate": "2021-09-10 10:06:22 +0200", "message": "Makes a field static so that it is properly injected."}, {"oid": "3f384761817d3eda43860481f76f6a44e28a098f", "committedDate": "2021-09-15 13:21:01 +0200", "message": "Uses a proper way to obtain the physical key within the URLBuilder."}, {"oid": "6be818cceea588906c4908296554bc251872ee89", "committedDate": "2021-10-12 18:37:07 +0200", "message": "Permits to return blobs into a different name with the same normalizedFilename."}, {"oid": "c64e21d197574bd98a82de1e968137d7149d867d", "committedDate": "2021-10-28 18:04:20 +0200", "message": "Operates path cache by normalized names if space does"}, {"oid": "ca262f9789e3ee96113eb3870a08c049b95aa4b8", "committedDate": "2021-11-30 17:29:13 +0100", "message": "Normalizes to Unicode NFC Form when sanitizing a path."}, {"oid": "eb16e0452e8ee56d2ba5d6e13a21b219d0b9a03c", "committedDate": "2021-12-14 11:24:29 +0100", "message": "Permits to read the retentionDays from a blob storage space"}, {"oid": "69b93d1c0e3222d3349874d3209bf154a577e94c", "committedDate": "2022-01-31 11:52:19 +0100", "message": "Retries delegating a conversion if a conversion host is down but multiple are available."}, {"oid": "901a6b808e2a52e71a4a5ae2af460b3d579d15ff", "committedDate": "2022-01-31 12:02:10 +0100", "message": "Ensures proper exception handling in case that no additional conversion hosts are available."}, {"oid": "cc6a40e1e7c7f6ba313c7cb394c1b098c622ec14", "committedDate": "2022-01-31 12:03:49 +0100", "message": "Removes a leftover temporary file in case of an error."}, {"oid": "ee891b9011acd5102665f99cb871556bc1ac3f01", "committedDate": "2022-02-04 11:34:42 +0100", "message": "Properly notes connectivyIssue on retry"}, {"oid": "bcbd81d5f76b0c3aa33a0ad7d4144b35b3211445", "committedDate": "2022-02-04 11:38:58 +0100", "message": "Extracts method"}, {"oid": "7777c08684e9f8f3e685ba5a89ff81c9f3be020d", "committedDate": "2022-02-04 11:57:41 +0100", "message": "Properly retries delegating blob download"}, {"oid": "4c8cb9973307a202162facd521af4affef890517", "committedDate": "2022-02-04 11:59:27 +0100", "message": "Seperates two constants which have the same value"}, {"oid": "a2f1d64c2435b6bfe6162e0293b7ece86c129d07", "committedDate": "2022-02-04 12:02:23 +0100", "message": "Actually also returns the result of the retry"}, {"oid": "b0cdfeb1d2f10ed8fd8a0ce50d19b5c41798a464", "committedDate": "2022-04-19 11:17:35 +0200", "message": "Fixes a StringIndexOutOfBoundsException exception"}, {"oid": "ccf766f3ae8844e3d34b355022883a872b2de127", "committedDate": "2022-04-19 12:13:13 +0200", "message": "Ignores InterruptedIOExceptions when uploading from stream"}, {"oid": "e5f9ca6887bab216bb5045367a3f309373007814", "committedDate": "2022-04-26 15:56:12 +0200", "message": "Throws exceptions even when not logging upload interrupt"}, {"oid": "8bd3d7a98721dcb4c0d727687596c5bdc7266e90", "committedDate": "2022-04-27 08:48:58 +0200", "message": "Merge pull request #1394 from scireum/feature/meg/SIRI-562"}, {"oid": "c4bde0e46c0cd521b2718ec0e8b63447222be418", "committedDate": "2022-06-18 12:46:51 +0200", "message": "Removes a premature translation."}, {"oid": "9fe46a7966805b80f613abe9c83929c7c1f4b41c", "committedDate": "2022-06-18 12:48:19 +0200", "message": "Fixes some JavaDoc typos."}, {"oid": "920e7475deab5c7d3fd717851276d3f819c95a88", "committedDate": "2022-06-28 21:19:53 +0200", "message": "Uses a blocking approach to deliver known large files."}, {"oid": "1f2a605fe0f04c568e090518dc2d0020263cb833", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Allows marking blobs as inconvertible if a conversion error occurs for a variant. This prevents unnecessary conversion retries, e.g. if the input file is not a supported file type."}, {"oid": "c2af5eea8d960b2d0abc52ee7d84b4e8ee57f271", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Code Style"}, {"oid": "3845f784c41d5abdfcc502857bb45781f1c1cbc6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only refreshes from db when retrying conversion"}, {"oid": "7ef99ba46232dab5a43ea9ecbc528d0ebca3a7b6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Extracts method and clarifies variable names"}, {"oid": "05bee62c619fa717baf25be1bbf9da6b205dbb48", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only caches and checks failures for the blob itself. No need to retry conversion for every other variant."}, {"oid": "82cf1ad9fe7a43fb5ea2119ae0d84253c7ba2d9a", "committedDate": "2022-12-12 20:33:35 +0100", "message": "Adds the capability to create variants of a blob by a newly introduced method"}, {"oid": "b4c6998295524742993d0aa58cbb13779956046a", "committedDate": "2022-12-14 22:41:39 +0100", "message": "Actually makes the findOrCreatVariant method blocking"}, {"oid": "c5c0a581bc5b318e5e405b2113247709852bb340", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Resolves TODOs. Inconvertible is now cached for the blob instead of individual variants."}, {"oid": "b7657b73671e378e7ddc8691ac77029ce11acd4c", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Inverts if to simplify code"}, {"oid": "fe29042a1af68e2040ed800b13dd3fb2dbe2ed43", "committedDate": "2022-12-16 13:32:02 +0100", "message": "Marks failure for Blob and Variant at the same time"}, {"oid": "05f4bfaeb4ccee7c0a85a5709a6b5e0597b67cc0", "committedDate": "2022-12-16 14:16:31 +0100", "message": "Also refreshes the blob when retrying after an optimistic lock error"}, {"oid": "bc184f240d830eac248f1122716233cab3660f09", "committedDate": "2023-01-09 16:56:18 +0100", "message": "Revert \"Actually makes the findOrCreatVariant method blocking\""}, {"oid": "9b181920a5cb474ebd2bffa16de6af89cde23123", "committedDate": "2023-01-09 17:58:20 +0100", "message": "Adds a new variant creation path which was designed for longer running conversions."}, {"oid": "46fb8f1cfe93000b2456eaaa1a1aac0bdeb00340", "committedDate": "2023-01-10 09:39:35 +0100", "message": "Removes the ensureVariantExists method since it is not used anymore."}, {"oid": "1a94418505fba3cc0c2ca53e6a0690336baf8527", "committedDate": "2023-01-10 13:19:02 +0100", "message": "Reverts marking blobs as inconvertible"}, {"oid": "e25cb94c36040b5696c19ad26bfe13e067b8625f", "committedDate": "2023-01-10 13:21:01 +0100", "message": "Propagates failed variant conversions to registered error handlers"}, {"oid": "81bc3a4de4e0396a17152408eff94c385cf77337", "committedDate": "2023-01-10 17:20:17 +0100", "message": "Fixes a bug which prevented the variants from being delivered/displayed due to an early null return"}, {"oid": "3d10fc2f5e8172e8f70e5478ca599bb78df0e09e", "committedDate": "2023-01-11 09:20:02 +0100", "message": "Moves error handler invocation directly to point of use"}, {"oid": "8fa47399e277f18f207feeca098e46352a4901ec", "committedDate": "2023-01-11 13:19:21 +0100", "message": "Fixes typo"}, {"oid": "3a36355103d816e824cf2a09901276810d320bc5", "committedDate": "2023-01-11 13:20:52 +0100", "message": "Improves javadoc"}, {"oid": "adfccd62fc5084da20db97a20214b09305976ca0", "committedDate": "2023-01-11 13:21:14 +0100", "message": "Merge remote-tracking branch 'origin/feature/mko/OX-9323' into feature/mko/OX-9323"}, {"oid": "74b38a0c7382c789776e2f1405d7e5609d6bfb05", "committedDate": "2023-01-11 13:33:27 +0100", "message": "Renames variable"}, {"oid": "5e05c3493d356fa9951937d66149cebb7c60b576", "committedDate": "2023-01-16 11:05:50 +0100", "message": "Merge pull request #1549 from scireum/feature/csc/SIRI-658_blobFlag"}, {"oid": "373790d59e845c7e86f6fb33fb5e933dbbe592e7", "committedDate": "2023-01-17 14:27:28 +0100", "message": "Makes the handler list static to ensure proper loading"}, {"oid": "95d52f9cd5a33188a5a9f7870854aaf4df2aee91", "committedDate": "2023-02-03 10:47:40 +0100", "message": "Fixes typos"}, {"oid": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "committedDate": "2023-03-30 17:12:04 +0200", "message": "Fixes and improves blob cache invalidation"}, {"oid": "0b047de23b1bd3cd06f80b57dee287521ec54a2b", "committedDate": "2023-03-31 10:15:34 +0200", "message": "Changes remove to convenience method"}, {"oid": "a2f660b08a00730eeb5f0d7e8b028e34d17bdc10", "committedDate": "2023-04-03 07:02:04 +0200", "message": "Properly clears cache in case of renamings"}, {"oid": "e27f6ad1930182e966802b958c496d082034369c", "committedDate": "2023-04-04 14:12:43 +0200", "message": "Fixes typos"}, {"oid": "6f8801b7c5afcb7c3cde0aedd5d2d49a49fe4dfe", "committedDate": "2023-04-04 14:14:39 +0200", "message": "Provides the input file to the conversion"}, {"oid": "fb4ad4c78300639008de522ecb7984ffa1023405", "committedDate": "2023-04-04 16:20:35 +0200", "message": "Prefers FileHandle instead of File"}, {"oid": "dd870523055bdef60ab261da4f8e676fe20a60f1", "committedDate": "2023-04-04 16:35:01 +0200", "message": "Fixes an NPE when no FileHandle was given"}, {"oid": "7dd724fbd252a16ed20c3efad91a6101490aa2da", "committedDate": "2023-04-14 11:16:16 +0200", "message": "Implements the formerly added method"}, {"oid": "b1f2d46f14df61e05ce3238e1238c38c19d7898b", "committedDate": "2023-04-20 14:07:05 +0200", "message": "Provides a simple way for inserting help/user assistance into backed pages."}, {"oid": "cd26a84debbc8797575b2c96730d5b7ae5b77539", "committedDate": "2023-05-09 14:35:04 +0200", "message": "Removes the re-throwing of the exception within the invokeConversionPipelineAsync method since it is not needed anymore"}, {"oid": "f4cc3ba1f130945e37028beb9a25dc812eb80893", "committedDate": "2023-05-12 15:16:00 +0200", "message": "Permits to read and set the read-only information"}, {"oid": "e9fd65525b45d2d73ad80cb304fa7b790c5dbcf0", "committedDate": "2023-05-15 13:33:59 +0200", "message": "Merge branch 'develop' into ili/read-only-files"}, {"oid": "093b5b8b70f95455947daa67c1d01a0ec6579788", "committedDate": "2023-05-17 17:55:06 +0200", "message": "Makes updateBlobReadOnlyFlag public"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Njk5OA==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435046998", "body": "s.a. Blob.delete()", "bodyText": "s.a. Blob.delete()", "bodyHTML": "<p dir=\"auto\">s.a. Blob.delete()</p>", "author": "andyHa", "createdAt": "2020-06-04T07:27:45Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -770,6 +821,24 @@ public void move(B blob, @Nullable D newParent) {\n      */\n     protected abstract void updateBlobParent(B blob, D newParent);\n \n+    /**\n+     * Deletes the given blob.\n+     *\n+     * @param blob the blob to delete\n+     */\n+    public void delete(B blob) {", "originalCommit": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..73f726743 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -829,7 +960,7 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n     public void delete(B blob) {\n         markBlobAsDeleted(blob);\n \n-        blobByPathCache.clear();\n+        blobByPathCache.removeAll(REMOVE_BY_FILENAME, blob.getFilename());\n     }\n \n     /**\n", "next_change": null}]}, "commits_in_main": [{"oid": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "message": "Merge commit", "committedDate": null}, {"oid": "d12274ebed161d63c809eaa5023f4ebcc9f1bd13", "committedDate": "2020-06-16 13:54:23 +0200", "message": "Fixes a typo."}, {"oid": "c5c9c7a7f96769a7fba428d24c6118dd13060613", "committedDate": "2020-06-16 13:58:33 +0200", "message": "Enables touch tracking for blobs."}, {"oid": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "committedDate": "2020-07-07 17:45:20 +0200", "message": "Fix an issue creating files in the storage"}, {"oid": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "committedDate": "2020-07-07 17:48:24 +0200", "message": "Fix a variable usage"}, {"oid": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "committedDate": "2020-07-08 13:31:17 +0200", "message": "Returns the raw object instead of cache contents"}, {"oid": "37b75939e79c0255f77e9cf34324a23f263905bc", "committedDate": "2020-07-09 16:37:10 +0200", "message": "Removes cached data to physical key"}, {"oid": "c71554d5589e9a26a26fab42f51a28610ebed159", "committedDate": "2020-07-09 16:37:40 +0200", "message": "Refactors duplicated code in a method"}, {"oid": "faa9e49cd43c123239886000752be47f595c6a3b", "committedDate": "2020-11-20 12:38:28 +0100", "message": "Fix the retry mechanism of variants"}, {"oid": "4bcddfcd163ff39bad13a15eca4a7dc6df722fd1", "committedDate": "2020-11-23 11:14:46 +0100", "message": "Uses proper exceptions and HTTP response codes to signal the conversion outcomes."}, {"oid": "fea6b64f7fba36b359dfb951344254a3c540c402", "committedDate": "2020-11-23 11:16:00 +0100", "message": "Uses a dedicated retry wait loop for optimistic locks and anther for waiting for conversion results."}, {"oid": "e524fd2ac911d7fd4f6654ef60a7664c58ccf692", "committedDate": "2020-11-24 20:42:34 +0100", "message": "Permits to control the sort order of blobs when shown in the VFS (layer3)."}, {"oid": "28a8e122aebcf12b54d58a244d4c18522aeab755", "committedDate": "2020-11-27 07:29:12 +0100", "message": "Fix invalid formatting syntax"}, {"oid": "6a9e37ddb2765b010aefdb335fd878aa62695a0a", "committedDate": "2020-12-05 09:22:44 +0100", "message": "Reveals the source of a converted image for debugging purposes."}, {"oid": "5cd5fef5312886a7cc031e34f59ee8675fb39e84", "committedDate": "2020-12-05 09:24:26 +0100", "message": "Waits up to 2s (instead of approx. 1500ms) for a conversion to be completed."}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "committedDate": "2020-12-07 08:37:24 +0100", "message": "Sanitize the paths in the blob storage space"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "committedDate": "2020-12-07 08:43:03 +0100", "message": "Ensure that newly created blobs are cached"}, {"oid": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "committedDate": "2020-12-07 13:12:34 +0100", "message": "Only marks a blob / variant delivery as long running if a conversion is required."}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "committedDate": "2020-12-08 14:01:14 +0100", "message": "Invalidate the old cache entry again before adding the new one"}, {"oid": "f4e2fc4613cd5d27bf47a53d49f83b060e384c61", "committedDate": "2020-12-08 14:10:16 +0100", "message": "Merge pull request #939 from scireum/jmu/SIRI-286-sanitize-paths"}, {"oid": "4f67da9919acdb64a1f2a889935c46eb91c87006", "committedDate": "2020-12-17 09:05:46 +0100", "message": "Uses a proper way to measure the conversion duration."}, {"oid": "b51df46d9949625db4eadffd5a3b6450c662ad57", "committedDate": "2020-12-20 16:28:14 +0100", "message": "Improves the metrics which are recorded for file conversions within the Storage engine."}, {"oid": "112eeeafcb20f2570e4d1fcc3e62bfd2eeb64a80", "committedDate": "2021-02-15 11:34:00 +0100", "message": "Implement a method to download a blob in a given variant"}, {"oid": "677e3d3f681e8413de25ac4d6f43ad89dbaf06b4", "committedDate": "2021-02-17 16:32:51 +0100", "message": "Try to delegate downloads of variants if the conversion is disabled"}, {"oid": "88a48ec33650eb1c9c427375ac69e291d4fab4c2", "committedDate": "2021-02-17 16:38:36 +0100", "message": "Remove a Nullable annotation"}, {"oid": "b052c6b24caaa0f24233595762522877799f2c92", "committedDate": "2021-03-07 21:51:39 +0100", "message": "Marks static part refs as nullable."}, {"oid": "0c58b7aa9c632fd49625479c68cce82c43806781", "committedDate": "2021-07-15 11:10:49 +0200", "message": "Adds the ability to purge the blobKeyToPhysicalKey from outside"}, {"oid": "883d0f4839005db1a1664c9e2b6ccfc3b7bbb06a", "committedDate": "2021-07-15 12:34:28 +0200", "message": "Instead of exposing the cache, purge it when deleting a variant entity"}, {"oid": "f1851da67335b48cb67671b7da5168a2171790b8", "committedDate": "2021-07-16 19:10:49 +0200", "message": "Applies sonarlint and IntelliJ inspection fixes."}, {"oid": "3da4a202f0e1c3f4641e3ea3b69b2a209e255a0c", "committedDate": "2021-08-26 14:16:18 +0200", "message": "Uses a proper name for a helper method."}, {"oid": "e84be0ca02d857b540ed47346b88932b34ccde4f", "committedDate": "2021-09-07 10:17:04 +0200", "message": "fix occurred typos"}, {"oid": "6fe77dd8719c5056fce4c03c52ce41c5f163212c", "committedDate": "2021-09-08 09:29:53 +0200", "message": "Minor code-cleanups and typo fixes."}, {"oid": "3204e5915c4d03a650e92616b1cf734ed91e74cc", "committedDate": "2021-09-08 10:27:01 +0200", "message": "Makes some internal method public accessible."}, {"oid": "3064b36bf63804568bc7af3c9c1ab01184e72916", "committedDate": "2021-09-08 10:41:05 +0200", "message": "Improves recording of failed conversion attempts."}, {"oid": "3ad85632bf7ef0f9dfd3d34a8be6b41fae18504a", "committedDate": "2021-09-08 10:41:33 +0200", "message": "Records events for blob conversions."}, {"oid": "d79d455d61f63eed1731f0900dcf0fb47487ed8c", "committedDate": "2021-09-08 10:45:15 +0200", "message": "Caches ultimately failed file conversions."}, {"oid": "ef92915b4ee1a195433a73c849b5ffa155042e52", "committedDate": "2021-09-10 10:06:22 +0200", "message": "Makes a field static so that it is properly injected."}, {"oid": "3f384761817d3eda43860481f76f6a44e28a098f", "committedDate": "2021-09-15 13:21:01 +0200", "message": "Uses a proper way to obtain the physical key within the URLBuilder."}, {"oid": "6be818cceea588906c4908296554bc251872ee89", "committedDate": "2021-10-12 18:37:07 +0200", "message": "Permits to return blobs into a different name with the same normalizedFilename."}, {"oid": "c64e21d197574bd98a82de1e968137d7149d867d", "committedDate": "2021-10-28 18:04:20 +0200", "message": "Operates path cache by normalized names if space does"}, {"oid": "ca262f9789e3ee96113eb3870a08c049b95aa4b8", "committedDate": "2021-11-30 17:29:13 +0100", "message": "Normalizes to Unicode NFC Form when sanitizing a path."}, {"oid": "eb16e0452e8ee56d2ba5d6e13a21b219d0b9a03c", "committedDate": "2021-12-14 11:24:29 +0100", "message": "Permits to read the retentionDays from a blob storage space"}, {"oid": "69b93d1c0e3222d3349874d3209bf154a577e94c", "committedDate": "2022-01-31 11:52:19 +0100", "message": "Retries delegating a conversion if a conversion host is down but multiple are available."}, {"oid": "901a6b808e2a52e71a4a5ae2af460b3d579d15ff", "committedDate": "2022-01-31 12:02:10 +0100", "message": "Ensures proper exception handling in case that no additional conversion hosts are available."}, {"oid": "cc6a40e1e7c7f6ba313c7cb394c1b098c622ec14", "committedDate": "2022-01-31 12:03:49 +0100", "message": "Removes a leftover temporary file in case of an error."}, {"oid": "ee891b9011acd5102665f99cb871556bc1ac3f01", "committedDate": "2022-02-04 11:34:42 +0100", "message": "Properly notes connectivyIssue on retry"}, {"oid": "bcbd81d5f76b0c3aa33a0ad7d4144b35b3211445", "committedDate": "2022-02-04 11:38:58 +0100", "message": "Extracts method"}, {"oid": "7777c08684e9f8f3e685ba5a89ff81c9f3be020d", "committedDate": "2022-02-04 11:57:41 +0100", "message": "Properly retries delegating blob download"}, {"oid": "4c8cb9973307a202162facd521af4affef890517", "committedDate": "2022-02-04 11:59:27 +0100", "message": "Seperates two constants which have the same value"}, {"oid": "a2f1d64c2435b6bfe6162e0293b7ece86c129d07", "committedDate": "2022-02-04 12:02:23 +0100", "message": "Actually also returns the result of the retry"}, {"oid": "b0cdfeb1d2f10ed8fd8a0ce50d19b5c41798a464", "committedDate": "2022-04-19 11:17:35 +0200", "message": "Fixes a StringIndexOutOfBoundsException exception"}, {"oid": "ccf766f3ae8844e3d34b355022883a872b2de127", "committedDate": "2022-04-19 12:13:13 +0200", "message": "Ignores InterruptedIOExceptions when uploading from stream"}, {"oid": "e5f9ca6887bab216bb5045367a3f309373007814", "committedDate": "2022-04-26 15:56:12 +0200", "message": "Throws exceptions even when not logging upload interrupt"}, {"oid": "8bd3d7a98721dcb4c0d727687596c5bdc7266e90", "committedDate": "2022-04-27 08:48:58 +0200", "message": "Merge pull request #1394 from scireum/feature/meg/SIRI-562"}, {"oid": "c4bde0e46c0cd521b2718ec0e8b63447222be418", "committedDate": "2022-06-18 12:46:51 +0200", "message": "Removes a premature translation."}, {"oid": "9fe46a7966805b80f613abe9c83929c7c1f4b41c", "committedDate": "2022-06-18 12:48:19 +0200", "message": "Fixes some JavaDoc typos."}, {"oid": "920e7475deab5c7d3fd717851276d3f819c95a88", "committedDate": "2022-06-28 21:19:53 +0200", "message": "Uses a blocking approach to deliver known large files."}, {"oid": "1f2a605fe0f04c568e090518dc2d0020263cb833", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Allows marking blobs as inconvertible if a conversion error occurs for a variant. This prevents unnecessary conversion retries, e.g. if the input file is not a supported file type."}, {"oid": "c2af5eea8d960b2d0abc52ee7d84b4e8ee57f271", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Code Style"}, {"oid": "3845f784c41d5abdfcc502857bb45781f1c1cbc6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only refreshes from db when retrying conversion"}, {"oid": "7ef99ba46232dab5a43ea9ecbc528d0ebca3a7b6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Extracts method and clarifies variable names"}, {"oid": "05bee62c619fa717baf25be1bbf9da6b205dbb48", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only caches and checks failures for the blob itself. No need to retry conversion for every other variant."}, {"oid": "82cf1ad9fe7a43fb5ea2119ae0d84253c7ba2d9a", "committedDate": "2022-12-12 20:33:35 +0100", "message": "Adds the capability to create variants of a blob by a newly introduced method"}, {"oid": "b4c6998295524742993d0aa58cbb13779956046a", "committedDate": "2022-12-14 22:41:39 +0100", "message": "Actually makes the findOrCreatVariant method blocking"}, {"oid": "c5c0a581bc5b318e5e405b2113247709852bb340", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Resolves TODOs. Inconvertible is now cached for the blob instead of individual variants."}, {"oid": "b7657b73671e378e7ddc8691ac77029ce11acd4c", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Inverts if to simplify code"}, {"oid": "fe29042a1af68e2040ed800b13dd3fb2dbe2ed43", "committedDate": "2022-12-16 13:32:02 +0100", "message": "Marks failure for Blob and Variant at the same time"}, {"oid": "05f4bfaeb4ccee7c0a85a5709a6b5e0597b67cc0", "committedDate": "2022-12-16 14:16:31 +0100", "message": "Also refreshes the blob when retrying after an optimistic lock error"}, {"oid": "bc184f240d830eac248f1122716233cab3660f09", "committedDate": "2023-01-09 16:56:18 +0100", "message": "Revert \"Actually makes the findOrCreatVariant method blocking\""}, {"oid": "9b181920a5cb474ebd2bffa16de6af89cde23123", "committedDate": "2023-01-09 17:58:20 +0100", "message": "Adds a new variant creation path which was designed for longer running conversions."}, {"oid": "46fb8f1cfe93000b2456eaaa1a1aac0bdeb00340", "committedDate": "2023-01-10 09:39:35 +0100", "message": "Removes the ensureVariantExists method since it is not used anymore."}, {"oid": "1a94418505fba3cc0c2ca53e6a0690336baf8527", "committedDate": "2023-01-10 13:19:02 +0100", "message": "Reverts marking blobs as inconvertible"}, {"oid": "e25cb94c36040b5696c19ad26bfe13e067b8625f", "committedDate": "2023-01-10 13:21:01 +0100", "message": "Propagates failed variant conversions to registered error handlers"}, {"oid": "81bc3a4de4e0396a17152408eff94c385cf77337", "committedDate": "2023-01-10 17:20:17 +0100", "message": "Fixes a bug which prevented the variants from being delivered/displayed due to an early null return"}, {"oid": "3d10fc2f5e8172e8f70e5478ca599bb78df0e09e", "committedDate": "2023-01-11 09:20:02 +0100", "message": "Moves error handler invocation directly to point of use"}, {"oid": "8fa47399e277f18f207feeca098e46352a4901ec", "committedDate": "2023-01-11 13:19:21 +0100", "message": "Fixes typo"}, {"oid": "3a36355103d816e824cf2a09901276810d320bc5", "committedDate": "2023-01-11 13:20:52 +0100", "message": "Improves javadoc"}, {"oid": "adfccd62fc5084da20db97a20214b09305976ca0", "committedDate": "2023-01-11 13:21:14 +0100", "message": "Merge remote-tracking branch 'origin/feature/mko/OX-9323' into feature/mko/OX-9323"}, {"oid": "74b38a0c7382c789776e2f1405d7e5609d6bfb05", "committedDate": "2023-01-11 13:33:27 +0100", "message": "Renames variable"}, {"oid": "5e05c3493d356fa9951937d66149cebb7c60b576", "committedDate": "2023-01-16 11:05:50 +0100", "message": "Merge pull request #1549 from scireum/feature/csc/SIRI-658_blobFlag"}, {"oid": "373790d59e845c7e86f6fb33fb5e933dbbe592e7", "committedDate": "2023-01-17 14:27:28 +0100", "message": "Makes the handler list static to ensure proper loading"}, {"oid": "95d52f9cd5a33188a5a9f7870854aaf4df2aee91", "committedDate": "2023-02-03 10:47:40 +0100", "message": "Fixes typos"}, {"oid": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "committedDate": "2023-03-30 17:12:04 +0200", "message": "Fixes and improves blob cache invalidation"}, {"oid": "0b047de23b1bd3cd06f80b57dee287521ec54a2b", "committedDate": "2023-03-31 10:15:34 +0200", "message": "Changes remove to convenience method"}, {"oid": "a2f660b08a00730eeb5f0d7e8b028e34d17bdc10", "committedDate": "2023-04-03 07:02:04 +0200", "message": "Properly clears cache in case of renamings"}, {"oid": "e27f6ad1930182e966802b958c496d082034369c", "committedDate": "2023-04-04 14:12:43 +0200", "message": "Fixes typos"}, {"oid": "6f8801b7c5afcb7c3cde0aedd5d2d49a49fe4dfe", "committedDate": "2023-04-04 14:14:39 +0200", "message": "Provides the input file to the conversion"}, {"oid": "fb4ad4c78300639008de522ecb7984ffa1023405", "committedDate": "2023-04-04 16:20:35 +0200", "message": "Prefers FileHandle instead of File"}, {"oid": "dd870523055bdef60ab261da4f8e676fe20a60f1", "committedDate": "2023-04-04 16:35:01 +0200", "message": "Fixes an NPE when no FileHandle was given"}, {"oid": "7dd724fbd252a16ed20c3efad91a6101490aa2da", "committedDate": "2023-04-14 11:16:16 +0200", "message": "Implements the formerly added method"}, {"oid": "b1f2d46f14df61e05ce3238e1238c38c19d7898b", "committedDate": "2023-04-20 14:07:05 +0200", "message": "Provides a simple way for inserting help/user assistance into backed pages."}, {"oid": "cd26a84debbc8797575b2c96730d5b7ae5b77539", "committedDate": "2023-05-09 14:35:04 +0200", "message": "Removes the re-throwing of the exception within the invokeConversionPipelineAsync method since it is not needed anymore"}, {"oid": "f4cc3ba1f130945e37028beb9a25dc812eb80893", "committedDate": "2023-05-12 15:16:00 +0200", "message": "Permits to read and set the read-only information"}, {"oid": "e9fd65525b45d2d73ad80cb304fa7b790c5dbcf0", "committedDate": "2023-05-15 13:33:59 +0200", "message": "Merge branch 'develop' into ili/read-only-files"}, {"oid": "093b5b8b70f95455947daa67c1d01a0ec6579788", "committedDate": "2023-05-17 17:55:06 +0200", "message": "Makes updateBlobReadOnlyFlag public"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NzcyNA==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435047724", "body": "only if name changes?", "bodyText": "only if name changes?", "bodyHTML": "<p dir=\"auto\">only if name changes?</p>", "author": "andyHa", "createdAt": "2020-06-04T07:28:58Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -841,6 +912,8 @@ public void updateContent(B blob, @Nullable String filename, File file) {\n                 blob.fetchVariants().forEach(BlobVariant::delete);\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n+\n+            blobByPathCache.clear();", "originalCommit": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef0d3c450dd92b0018a36428753d172c45638030", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..eed2c6ce4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -913,7 +916,9 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n \n-            blobByPathCache.clear();\n+            if (Strings.isFilled(filename)) {\n+                blobByPathCache.clear();\n+            }\n         } catch (Exception e) {\n             try {\n                 getPhysicalSpace().delete(nextPhysicalId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..eed2c6ce4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -913,7 +916,9 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n \n-            blobByPathCache.clear();\n+            if (Strings.isFilled(filename)) {\n+                blobByPathCache.clear();\n+            }\n         } catch (Exception e) {\n             try {\n                 getPhysicalSpace().delete(nextPhysicalId);\n", "next_change": {"commit": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex eed2c6ce4..73f726743 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -910,15 +1130,14 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n         String nextPhysicalId = keyGenerator.generateId();\n         try {\n             getPhysicalSpace().upload(nextPhysicalId, file);\n+            blobKeyToPhysicalCache.remove(buildCacheLookupKey(blob.getBlobKey(), URLBuilder.VARIANT_RAW));\n             Optional<String> previousPhysicalId = updateBlob(blob, nextPhysicalId, file.length(), filename);\n             if (previousPhysicalId.isPresent()) {\n-                blob.fetchVariants().forEach(BlobVariant::delete);\n+                deleteBlobVariants(blob);\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n \n-            if (Strings.isFilled(filename)) {\n-                blobByPathCache.clear();\n-            }\n+            blobByPathCache.removeAll(REMOVE_BY_FILENAME, blob.getFilename());\n         } catch (Exception e) {\n             try {\n                 getPhysicalSpace().delete(nextPhysicalId);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "message": "Merge commit", "committedDate": null}, {"oid": "d12274ebed161d63c809eaa5023f4ebcc9f1bd13", "committedDate": "2020-06-16 13:54:23 +0200", "message": "Fixes a typo."}, {"oid": "c5c9c7a7f96769a7fba428d24c6118dd13060613", "committedDate": "2020-06-16 13:58:33 +0200", "message": "Enables touch tracking for blobs."}, {"oid": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "committedDate": "2020-07-07 17:45:20 +0200", "message": "Fix an issue creating files in the storage"}, {"oid": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "committedDate": "2020-07-07 17:48:24 +0200", "message": "Fix a variable usage"}, {"oid": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "committedDate": "2020-07-08 13:31:17 +0200", "message": "Returns the raw object instead of cache contents"}, {"oid": "37b75939e79c0255f77e9cf34324a23f263905bc", "committedDate": "2020-07-09 16:37:10 +0200", "message": "Removes cached data to physical key"}, {"oid": "c71554d5589e9a26a26fab42f51a28610ebed159", "committedDate": "2020-07-09 16:37:40 +0200", "message": "Refactors duplicated code in a method"}, {"oid": "faa9e49cd43c123239886000752be47f595c6a3b", "committedDate": "2020-11-20 12:38:28 +0100", "message": "Fix the retry mechanism of variants"}, {"oid": "4bcddfcd163ff39bad13a15eca4a7dc6df722fd1", "committedDate": "2020-11-23 11:14:46 +0100", "message": "Uses proper exceptions and HTTP response codes to signal the conversion outcomes."}, {"oid": "fea6b64f7fba36b359dfb951344254a3c540c402", "committedDate": "2020-11-23 11:16:00 +0100", "message": "Uses a dedicated retry wait loop for optimistic locks and anther for waiting for conversion results."}, {"oid": "e524fd2ac911d7fd4f6654ef60a7664c58ccf692", "committedDate": "2020-11-24 20:42:34 +0100", "message": "Permits to control the sort order of blobs when shown in the VFS (layer3)."}, {"oid": "28a8e122aebcf12b54d58a244d4c18522aeab755", "committedDate": "2020-11-27 07:29:12 +0100", "message": "Fix invalid formatting syntax"}, {"oid": "6a9e37ddb2765b010aefdb335fd878aa62695a0a", "committedDate": "2020-12-05 09:22:44 +0100", "message": "Reveals the source of a converted image for debugging purposes."}, {"oid": "5cd5fef5312886a7cc031e34f59ee8675fb39e84", "committedDate": "2020-12-05 09:24:26 +0100", "message": "Waits up to 2s (instead of approx. 1500ms) for a conversion to be completed."}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "committedDate": "2020-12-07 08:37:24 +0100", "message": "Sanitize the paths in the blob storage space"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "committedDate": "2020-12-07 08:43:03 +0100", "message": "Ensure that newly created blobs are cached"}, {"oid": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "committedDate": "2020-12-07 13:12:34 +0100", "message": "Only marks a blob / variant delivery as long running if a conversion is required."}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "committedDate": "2020-12-08 14:01:14 +0100", "message": "Invalidate the old cache entry again before adding the new one"}, {"oid": "f4e2fc4613cd5d27bf47a53d49f83b060e384c61", "committedDate": "2020-12-08 14:10:16 +0100", "message": "Merge pull request #939 from scireum/jmu/SIRI-286-sanitize-paths"}, {"oid": "4f67da9919acdb64a1f2a889935c46eb91c87006", "committedDate": "2020-12-17 09:05:46 +0100", "message": "Uses a proper way to measure the conversion duration."}, {"oid": "b51df46d9949625db4eadffd5a3b6450c662ad57", "committedDate": "2020-12-20 16:28:14 +0100", "message": "Improves the metrics which are recorded for file conversions within the Storage engine."}, {"oid": "112eeeafcb20f2570e4d1fcc3e62bfd2eeb64a80", "committedDate": "2021-02-15 11:34:00 +0100", "message": "Implement a method to download a blob in a given variant"}, {"oid": "677e3d3f681e8413de25ac4d6f43ad89dbaf06b4", "committedDate": "2021-02-17 16:32:51 +0100", "message": "Try to delegate downloads of variants if the conversion is disabled"}, {"oid": "88a48ec33650eb1c9c427375ac69e291d4fab4c2", "committedDate": "2021-02-17 16:38:36 +0100", "message": "Remove a Nullable annotation"}, {"oid": "b052c6b24caaa0f24233595762522877799f2c92", "committedDate": "2021-03-07 21:51:39 +0100", "message": "Marks static part refs as nullable."}, {"oid": "0c58b7aa9c632fd49625479c68cce82c43806781", "committedDate": "2021-07-15 11:10:49 +0200", "message": "Adds the ability to purge the blobKeyToPhysicalKey from outside"}, {"oid": "883d0f4839005db1a1664c9e2b6ccfc3b7bbb06a", "committedDate": "2021-07-15 12:34:28 +0200", "message": "Instead of exposing the cache, purge it when deleting a variant entity"}, {"oid": "f1851da67335b48cb67671b7da5168a2171790b8", "committedDate": "2021-07-16 19:10:49 +0200", "message": "Applies sonarlint and IntelliJ inspection fixes."}, {"oid": "3da4a202f0e1c3f4641e3ea3b69b2a209e255a0c", "committedDate": "2021-08-26 14:16:18 +0200", "message": "Uses a proper name for a helper method."}, {"oid": "e84be0ca02d857b540ed47346b88932b34ccde4f", "committedDate": "2021-09-07 10:17:04 +0200", "message": "fix occurred typos"}, {"oid": "6fe77dd8719c5056fce4c03c52ce41c5f163212c", "committedDate": "2021-09-08 09:29:53 +0200", "message": "Minor code-cleanups and typo fixes."}, {"oid": "3204e5915c4d03a650e92616b1cf734ed91e74cc", "committedDate": "2021-09-08 10:27:01 +0200", "message": "Makes some internal method public accessible."}, {"oid": "3064b36bf63804568bc7af3c9c1ab01184e72916", "committedDate": "2021-09-08 10:41:05 +0200", "message": "Improves recording of failed conversion attempts."}, {"oid": "3ad85632bf7ef0f9dfd3d34a8be6b41fae18504a", "committedDate": "2021-09-08 10:41:33 +0200", "message": "Records events for blob conversions."}, {"oid": "d79d455d61f63eed1731f0900dcf0fb47487ed8c", "committedDate": "2021-09-08 10:45:15 +0200", "message": "Caches ultimately failed file conversions."}, {"oid": "ef92915b4ee1a195433a73c849b5ffa155042e52", "committedDate": "2021-09-10 10:06:22 +0200", "message": "Makes a field static so that it is properly injected."}, {"oid": "3f384761817d3eda43860481f76f6a44e28a098f", "committedDate": "2021-09-15 13:21:01 +0200", "message": "Uses a proper way to obtain the physical key within the URLBuilder."}, {"oid": "6be818cceea588906c4908296554bc251872ee89", "committedDate": "2021-10-12 18:37:07 +0200", "message": "Permits to return blobs into a different name with the same normalizedFilename."}, {"oid": "c64e21d197574bd98a82de1e968137d7149d867d", "committedDate": "2021-10-28 18:04:20 +0200", "message": "Operates path cache by normalized names if space does"}, {"oid": "ca262f9789e3ee96113eb3870a08c049b95aa4b8", "committedDate": "2021-11-30 17:29:13 +0100", "message": "Normalizes to Unicode NFC Form when sanitizing a path."}, {"oid": "eb16e0452e8ee56d2ba5d6e13a21b219d0b9a03c", "committedDate": "2021-12-14 11:24:29 +0100", "message": "Permits to read the retentionDays from a blob storage space"}, {"oid": "69b93d1c0e3222d3349874d3209bf154a577e94c", "committedDate": "2022-01-31 11:52:19 +0100", "message": "Retries delegating a conversion if a conversion host is down but multiple are available."}, {"oid": "901a6b808e2a52e71a4a5ae2af460b3d579d15ff", "committedDate": "2022-01-31 12:02:10 +0100", "message": "Ensures proper exception handling in case that no additional conversion hosts are available."}, {"oid": "cc6a40e1e7c7f6ba313c7cb394c1b098c622ec14", "committedDate": "2022-01-31 12:03:49 +0100", "message": "Removes a leftover temporary file in case of an error."}, {"oid": "ee891b9011acd5102665f99cb871556bc1ac3f01", "committedDate": "2022-02-04 11:34:42 +0100", "message": "Properly notes connectivyIssue on retry"}, {"oid": "bcbd81d5f76b0c3aa33a0ad7d4144b35b3211445", "committedDate": "2022-02-04 11:38:58 +0100", "message": "Extracts method"}, {"oid": "7777c08684e9f8f3e685ba5a89ff81c9f3be020d", "committedDate": "2022-02-04 11:57:41 +0100", "message": "Properly retries delegating blob download"}, {"oid": "4c8cb9973307a202162facd521af4affef890517", "committedDate": "2022-02-04 11:59:27 +0100", "message": "Seperates two constants which have the same value"}, {"oid": "a2f1d64c2435b6bfe6162e0293b7ece86c129d07", "committedDate": "2022-02-04 12:02:23 +0100", "message": "Actually also returns the result of the retry"}, {"oid": "b0cdfeb1d2f10ed8fd8a0ce50d19b5c41798a464", "committedDate": "2022-04-19 11:17:35 +0200", "message": "Fixes a StringIndexOutOfBoundsException exception"}, {"oid": "ccf766f3ae8844e3d34b355022883a872b2de127", "committedDate": "2022-04-19 12:13:13 +0200", "message": "Ignores InterruptedIOExceptions when uploading from stream"}, {"oid": "e5f9ca6887bab216bb5045367a3f309373007814", "committedDate": "2022-04-26 15:56:12 +0200", "message": "Throws exceptions even when not logging upload interrupt"}, {"oid": "8bd3d7a98721dcb4c0d727687596c5bdc7266e90", "committedDate": "2022-04-27 08:48:58 +0200", "message": "Merge pull request #1394 from scireum/feature/meg/SIRI-562"}, {"oid": "c4bde0e46c0cd521b2718ec0e8b63447222be418", "committedDate": "2022-06-18 12:46:51 +0200", "message": "Removes a premature translation."}, {"oid": "9fe46a7966805b80f613abe9c83929c7c1f4b41c", "committedDate": "2022-06-18 12:48:19 +0200", "message": "Fixes some JavaDoc typos."}, {"oid": "920e7475deab5c7d3fd717851276d3f819c95a88", "committedDate": "2022-06-28 21:19:53 +0200", "message": "Uses a blocking approach to deliver known large files."}, {"oid": "1f2a605fe0f04c568e090518dc2d0020263cb833", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Allows marking blobs as inconvertible if a conversion error occurs for a variant. This prevents unnecessary conversion retries, e.g. if the input file is not a supported file type."}, {"oid": "c2af5eea8d960b2d0abc52ee7d84b4e8ee57f271", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Code Style"}, {"oid": "3845f784c41d5abdfcc502857bb45781f1c1cbc6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only refreshes from db when retrying conversion"}, {"oid": "7ef99ba46232dab5a43ea9ecbc528d0ebca3a7b6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Extracts method and clarifies variable names"}, {"oid": "05bee62c619fa717baf25be1bbf9da6b205dbb48", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only caches and checks failures for the blob itself. No need to retry conversion for every other variant."}, {"oid": "82cf1ad9fe7a43fb5ea2119ae0d84253c7ba2d9a", "committedDate": "2022-12-12 20:33:35 +0100", "message": "Adds the capability to create variants of a blob by a newly introduced method"}, {"oid": "b4c6998295524742993d0aa58cbb13779956046a", "committedDate": "2022-12-14 22:41:39 +0100", "message": "Actually makes the findOrCreatVariant method blocking"}, {"oid": "c5c0a581bc5b318e5e405b2113247709852bb340", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Resolves TODOs. Inconvertible is now cached for the blob instead of individual variants."}, {"oid": "b7657b73671e378e7ddc8691ac77029ce11acd4c", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Inverts if to simplify code"}, {"oid": "fe29042a1af68e2040ed800b13dd3fb2dbe2ed43", "committedDate": "2022-12-16 13:32:02 +0100", "message": "Marks failure for Blob and Variant at the same time"}, {"oid": "05f4bfaeb4ccee7c0a85a5709a6b5e0597b67cc0", "committedDate": "2022-12-16 14:16:31 +0100", "message": "Also refreshes the blob when retrying after an optimistic lock error"}, {"oid": "bc184f240d830eac248f1122716233cab3660f09", "committedDate": "2023-01-09 16:56:18 +0100", "message": "Revert \"Actually makes the findOrCreatVariant method blocking\""}, {"oid": "9b181920a5cb474ebd2bffa16de6af89cde23123", "committedDate": "2023-01-09 17:58:20 +0100", "message": "Adds a new variant creation path which was designed for longer running conversions."}, {"oid": "46fb8f1cfe93000b2456eaaa1a1aac0bdeb00340", "committedDate": "2023-01-10 09:39:35 +0100", "message": "Removes the ensureVariantExists method since it is not used anymore."}, {"oid": "1a94418505fba3cc0c2ca53e6a0690336baf8527", "committedDate": "2023-01-10 13:19:02 +0100", "message": "Reverts marking blobs as inconvertible"}, {"oid": "e25cb94c36040b5696c19ad26bfe13e067b8625f", "committedDate": "2023-01-10 13:21:01 +0100", "message": "Propagates failed variant conversions to registered error handlers"}, {"oid": "81bc3a4de4e0396a17152408eff94c385cf77337", "committedDate": "2023-01-10 17:20:17 +0100", "message": "Fixes a bug which prevented the variants from being delivered/displayed due to an early null return"}, {"oid": "3d10fc2f5e8172e8f70e5478ca599bb78df0e09e", "committedDate": "2023-01-11 09:20:02 +0100", "message": "Moves error handler invocation directly to point of use"}, {"oid": "8fa47399e277f18f207feeca098e46352a4901ec", "committedDate": "2023-01-11 13:19:21 +0100", "message": "Fixes typo"}, {"oid": "3a36355103d816e824cf2a09901276810d320bc5", "committedDate": "2023-01-11 13:20:52 +0100", "message": "Improves javadoc"}, {"oid": "adfccd62fc5084da20db97a20214b09305976ca0", "committedDate": "2023-01-11 13:21:14 +0100", "message": "Merge remote-tracking branch 'origin/feature/mko/OX-9323' into feature/mko/OX-9323"}, {"oid": "74b38a0c7382c789776e2f1405d7e5609d6bfb05", "committedDate": "2023-01-11 13:33:27 +0100", "message": "Renames variable"}, {"oid": "5e05c3493d356fa9951937d66149cebb7c60b576", "committedDate": "2023-01-16 11:05:50 +0100", "message": "Merge pull request #1549 from scireum/feature/csc/SIRI-658_blobFlag"}, {"oid": "373790d59e845c7e86f6fb33fb5e933dbbe592e7", "committedDate": "2023-01-17 14:27:28 +0100", "message": "Makes the handler list static to ensure proper loading"}, {"oid": "95d52f9cd5a33188a5a9f7870854aaf4df2aee91", "committedDate": "2023-02-03 10:47:40 +0100", "message": "Fixes typos"}, {"oid": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "committedDate": "2023-03-30 17:12:04 +0200", "message": "Fixes and improves blob cache invalidation"}, {"oid": "0b047de23b1bd3cd06f80b57dee287521ec54a2b", "committedDate": "2023-03-31 10:15:34 +0200", "message": "Changes remove to convenience method"}, {"oid": "a2f660b08a00730eeb5f0d7e8b028e34d17bdc10", "committedDate": "2023-04-03 07:02:04 +0200", "message": "Properly clears cache in case of renamings"}, {"oid": "e27f6ad1930182e966802b958c496d082034369c", "committedDate": "2023-04-04 14:12:43 +0200", "message": "Fixes typos"}, {"oid": "6f8801b7c5afcb7c3cde0aedd5d2d49a49fe4dfe", "committedDate": "2023-04-04 14:14:39 +0200", "message": "Provides the input file to the conversion"}, {"oid": "fb4ad4c78300639008de522ecb7984ffa1023405", "committedDate": "2023-04-04 16:20:35 +0200", "message": "Prefers FileHandle instead of File"}, {"oid": "dd870523055bdef60ab261da4f8e676fe20a60f1", "committedDate": "2023-04-04 16:35:01 +0200", "message": "Fixes an NPE when no FileHandle was given"}, {"oid": "7dd724fbd252a16ed20c3efad91a6101490aa2da", "committedDate": "2023-04-14 11:16:16 +0200", "message": "Implements the formerly added method"}, {"oid": "b1f2d46f14df61e05ce3238e1238c38c19d7898b", "committedDate": "2023-04-20 14:07:05 +0200", "message": "Provides a simple way for inserting help/user assistance into backed pages."}, {"oid": "cd26a84debbc8797575b2c96730d5b7ae5b77539", "committedDate": "2023-05-09 14:35:04 +0200", "message": "Removes the re-throwing of the exception within the invokeConversionPipelineAsync method since it is not needed anymore"}, {"oid": "f4cc3ba1f130945e37028beb9a25dc812eb80893", "committedDate": "2023-05-12 15:16:00 +0200", "message": "Permits to read and set the read-only information"}, {"oid": "e9fd65525b45d2d73ad80cb304fa7b790c5dbcf0", "committedDate": "2023-05-15 13:33:59 +0200", "message": "Merge branch 'develop' into ili/read-only-files"}, {"oid": "093b5b8b70f95455947daa67c1d01a0ec6579788", "committedDate": "2023-05-17 17:55:06 +0200", "message": "Makes updateBlobReadOnlyFlag public"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Nzc5MQ==", "url": "https://github.com/scireum/sirius-biz/pull/770#discussion_r435047791", "body": "s.a.", "bodyText": "s.a.", "bodyHTML": "<p dir=\"auto\">s.a.</p>", "author": "andyHa", "createdAt": "2020-06-04T07:29:05Z", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -891,6 +964,8 @@ public void updateContent(B blob, String filename, InputStream data, long conten\n                 blob.fetchVariants().forEach(BlobVariant::delete);\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n+\n+            blobByPathCache.clear();", "originalCommit": "754b8a4b443a5273f4ec82304a3c9b17160a6071", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef0d3c450dd92b0018a36428753d172c45638030", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..eed2c6ce4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -965,7 +970,9 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n \n-            blobByPathCache.clear();\n+            if (Strings.isFilled(filename)) {\n+                blobByPathCache.clear();\n+            }\n         } catch (Exception e) {\n             try {\n                 getPhysicalSpace().delete(nextPhysicalId);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex 69fc50f7d..eed2c6ce4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -965,7 +970,9 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n                 getPhysicalSpace().delete(previousPhysicalId.get());\n             }\n \n-            blobByPathCache.clear();\n+            if (Strings.isFilled(filename)) {\n+                blobByPathCache.clear();\n+            }\n         } catch (Exception e) {\n             try {\n                 getPhysicalSpace().delete(nextPhysicalId);\n", "next_change": {"commit": "ccf766f3ae8844e3d34b355022883a872b2de127", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex eed2c6ce4..d5dbcc8bb 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -979,6 +1186,10 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             } catch (Exception ex) {\n                 Exceptions.ignore(ex);\n             }\n+            if (e.getCause() instanceof InterruptedIOException) {\n+                Exceptions.ignore(e);\n+                return;\n+            }\n \n             throw Exceptions.handle()\n                             .to(StorageUtils.LOG)\n", "next_change": {"commit": "e5f9ca6887bab216bb5045367a3f309373007814", "changed_code": [{"header": "diff --git a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\nindex d5dbcc8bb..1b19181f4 100644\n--- a/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n+++ b/src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java\n", "chunk": "@@ -1186,9 +1186,13 @@ public abstract class BasicBlobStorageSpace<B extends Blob & OptimisticCreate, D\n             } catch (Exception ex) {\n                 Exceptions.ignore(ex);\n             }\n-            if (e.getCause() instanceof InterruptedIOException) {\n-                Exceptions.ignore(e);\n-                return;\n+            if (e instanceof InterruptedIOException || e.getCause() instanceof InterruptedIOException) {\n+                throw Exceptions.createHandled()\n+                                .error(e)\n+                                .withSystemErrorMessage(\"Layer 2: Interrupted updating contents of %s in %s: %s (%s)\",\n+                                                        blob.getBlobKey(),\n+                                                        spaceName)\n+                                .handle();\n             }\n \n             throw Exceptions.handle()\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "35de90282f6ff5dc2b43a410b3725adc9a062f59", "message": "Merge commit", "committedDate": null}, {"oid": "d12274ebed161d63c809eaa5023f4ebcc9f1bd13", "committedDate": "2020-06-16 13:54:23 +0200", "message": "Fixes a typo."}, {"oid": "c5c9c7a7f96769a7fba428d24c6118dd13060613", "committedDate": "2020-06-16 13:58:33 +0200", "message": "Enables touch tracking for blobs."}, {"oid": "4add31057d239f78b3aab4c91d0c97ccd7ba9847", "committedDate": "2020-07-07 17:45:20 +0200", "message": "Fix an issue creating files in the storage"}, {"oid": "f0c3a9e3992336aa1479b6f18b934f44a0232b61", "committedDate": "2020-07-07 17:48:24 +0200", "message": "Fix a variable usage"}, {"oid": "25a7efd6aa08a3bfd45c8ec1cd9be74eb06c7e26", "committedDate": "2020-07-08 13:31:17 +0200", "message": "Returns the raw object instead of cache contents"}, {"oid": "37b75939e79c0255f77e9cf34324a23f263905bc", "committedDate": "2020-07-09 16:37:10 +0200", "message": "Removes cached data to physical key"}, {"oid": "c71554d5589e9a26a26fab42f51a28610ebed159", "committedDate": "2020-07-09 16:37:40 +0200", "message": "Refactors duplicated code in a method"}, {"oid": "faa9e49cd43c123239886000752be47f595c6a3b", "committedDate": "2020-11-20 12:38:28 +0100", "message": "Fix the retry mechanism of variants"}, {"oid": "4bcddfcd163ff39bad13a15eca4a7dc6df722fd1", "committedDate": "2020-11-23 11:14:46 +0100", "message": "Uses proper exceptions and HTTP response codes to signal the conversion outcomes."}, {"oid": "fea6b64f7fba36b359dfb951344254a3c540c402", "committedDate": "2020-11-23 11:16:00 +0100", "message": "Uses a dedicated retry wait loop for optimistic locks and anther for waiting for conversion results."}, {"oid": "e524fd2ac911d7fd4f6654ef60a7664c58ccf692", "committedDate": "2020-11-24 20:42:34 +0100", "message": "Permits to control the sort order of blobs when shown in the VFS (layer3)."}, {"oid": "28a8e122aebcf12b54d58a244d4c18522aeab755", "committedDate": "2020-11-27 07:29:12 +0100", "message": "Fix invalid formatting syntax"}, {"oid": "6a9e37ddb2765b010aefdb335fd878aa62695a0a", "committedDate": "2020-12-05 09:22:44 +0100", "message": "Reveals the source of a converted image for debugging purposes."}, {"oid": "5cd5fef5312886a7cc031e34f59ee8675fb39e84", "committedDate": "2020-12-05 09:24:26 +0100", "message": "Waits up to 2s (instead of approx. 1500ms) for a conversion to be completed."}, {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1", "committedDate": "2020-12-07 08:37:24 +0100", "message": "Sanitize the paths in the blob storage space"}, {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48", "committedDate": "2020-12-07 08:43:03 +0100", "message": "Ensure that newly created blobs are cached"}, {"oid": "3bc93960f1f38eb550b1fb13a8bc24646a03e77a", "committedDate": "2020-12-07 13:12:34 +0100", "message": "Only marks a blob / variant delivery as long running if a conversion is required."}, {"oid": "d32fdbfe350e3f58a3d0cc441b701752f6167015", "committedDate": "2020-12-08 14:01:14 +0100", "message": "Invalidate the old cache entry again before adding the new one"}, {"oid": "f4e2fc4613cd5d27bf47a53d49f83b060e384c61", "committedDate": "2020-12-08 14:10:16 +0100", "message": "Merge pull request #939 from scireum/jmu/SIRI-286-sanitize-paths"}, {"oid": "4f67da9919acdb64a1f2a889935c46eb91c87006", "committedDate": "2020-12-17 09:05:46 +0100", "message": "Uses a proper way to measure the conversion duration."}, {"oid": "b51df46d9949625db4eadffd5a3b6450c662ad57", "committedDate": "2020-12-20 16:28:14 +0100", "message": "Improves the metrics which are recorded for file conversions within the Storage engine."}, {"oid": "112eeeafcb20f2570e4d1fcc3e62bfd2eeb64a80", "committedDate": "2021-02-15 11:34:00 +0100", "message": "Implement a method to download a blob in a given variant"}, {"oid": "677e3d3f681e8413de25ac4d6f43ad89dbaf06b4", "committedDate": "2021-02-17 16:32:51 +0100", "message": "Try to delegate downloads of variants if the conversion is disabled"}, {"oid": "88a48ec33650eb1c9c427375ac69e291d4fab4c2", "committedDate": "2021-02-17 16:38:36 +0100", "message": "Remove a Nullable annotation"}, {"oid": "b052c6b24caaa0f24233595762522877799f2c92", "committedDate": "2021-03-07 21:51:39 +0100", "message": "Marks static part refs as nullable."}, {"oid": "0c58b7aa9c632fd49625479c68cce82c43806781", "committedDate": "2021-07-15 11:10:49 +0200", "message": "Adds the ability to purge the blobKeyToPhysicalKey from outside"}, {"oid": "883d0f4839005db1a1664c9e2b6ccfc3b7bbb06a", "committedDate": "2021-07-15 12:34:28 +0200", "message": "Instead of exposing the cache, purge it when deleting a variant entity"}, {"oid": "f1851da67335b48cb67671b7da5168a2171790b8", "committedDate": "2021-07-16 19:10:49 +0200", "message": "Applies sonarlint and IntelliJ inspection fixes."}, {"oid": "3da4a202f0e1c3f4641e3ea3b69b2a209e255a0c", "committedDate": "2021-08-26 14:16:18 +0200", "message": "Uses a proper name for a helper method."}, {"oid": "e84be0ca02d857b540ed47346b88932b34ccde4f", "committedDate": "2021-09-07 10:17:04 +0200", "message": "fix occurred typos"}, {"oid": "6fe77dd8719c5056fce4c03c52ce41c5f163212c", "committedDate": "2021-09-08 09:29:53 +0200", "message": "Minor code-cleanups and typo fixes."}, {"oid": "3204e5915c4d03a650e92616b1cf734ed91e74cc", "committedDate": "2021-09-08 10:27:01 +0200", "message": "Makes some internal method public accessible."}, {"oid": "3064b36bf63804568bc7af3c9c1ab01184e72916", "committedDate": "2021-09-08 10:41:05 +0200", "message": "Improves recording of failed conversion attempts."}, {"oid": "3ad85632bf7ef0f9dfd3d34a8be6b41fae18504a", "committedDate": "2021-09-08 10:41:33 +0200", "message": "Records events for blob conversions."}, {"oid": "d79d455d61f63eed1731f0900dcf0fb47487ed8c", "committedDate": "2021-09-08 10:45:15 +0200", "message": "Caches ultimately failed file conversions."}, {"oid": "ef92915b4ee1a195433a73c849b5ffa155042e52", "committedDate": "2021-09-10 10:06:22 +0200", "message": "Makes a field static so that it is properly injected."}, {"oid": "3f384761817d3eda43860481f76f6a44e28a098f", "committedDate": "2021-09-15 13:21:01 +0200", "message": "Uses a proper way to obtain the physical key within the URLBuilder."}, {"oid": "6be818cceea588906c4908296554bc251872ee89", "committedDate": "2021-10-12 18:37:07 +0200", "message": "Permits to return blobs into a different name with the same normalizedFilename."}, {"oid": "c64e21d197574bd98a82de1e968137d7149d867d", "committedDate": "2021-10-28 18:04:20 +0200", "message": "Operates path cache by normalized names if space does"}, {"oid": "ca262f9789e3ee96113eb3870a08c049b95aa4b8", "committedDate": "2021-11-30 17:29:13 +0100", "message": "Normalizes to Unicode NFC Form when sanitizing a path."}, {"oid": "eb16e0452e8ee56d2ba5d6e13a21b219d0b9a03c", "committedDate": "2021-12-14 11:24:29 +0100", "message": "Permits to read the retentionDays from a blob storage space"}, {"oid": "69b93d1c0e3222d3349874d3209bf154a577e94c", "committedDate": "2022-01-31 11:52:19 +0100", "message": "Retries delegating a conversion if a conversion host is down but multiple are available."}, {"oid": "901a6b808e2a52e71a4a5ae2af460b3d579d15ff", "committedDate": "2022-01-31 12:02:10 +0100", "message": "Ensures proper exception handling in case that no additional conversion hosts are available."}, {"oid": "cc6a40e1e7c7f6ba313c7cb394c1b098c622ec14", "committedDate": "2022-01-31 12:03:49 +0100", "message": "Removes a leftover temporary file in case of an error."}, {"oid": "ee891b9011acd5102665f99cb871556bc1ac3f01", "committedDate": "2022-02-04 11:34:42 +0100", "message": "Properly notes connectivyIssue on retry"}, {"oid": "bcbd81d5f76b0c3aa33a0ad7d4144b35b3211445", "committedDate": "2022-02-04 11:38:58 +0100", "message": "Extracts method"}, {"oid": "7777c08684e9f8f3e685ba5a89ff81c9f3be020d", "committedDate": "2022-02-04 11:57:41 +0100", "message": "Properly retries delegating blob download"}, {"oid": "4c8cb9973307a202162facd521af4affef890517", "committedDate": "2022-02-04 11:59:27 +0100", "message": "Seperates two constants which have the same value"}, {"oid": "a2f1d64c2435b6bfe6162e0293b7ece86c129d07", "committedDate": "2022-02-04 12:02:23 +0100", "message": "Actually also returns the result of the retry"}, {"oid": "b0cdfeb1d2f10ed8fd8a0ce50d19b5c41798a464", "committedDate": "2022-04-19 11:17:35 +0200", "message": "Fixes a StringIndexOutOfBoundsException exception"}, {"oid": "ccf766f3ae8844e3d34b355022883a872b2de127", "committedDate": "2022-04-19 12:13:13 +0200", "message": "Ignores InterruptedIOExceptions when uploading from stream"}, {"oid": "e5f9ca6887bab216bb5045367a3f309373007814", "committedDate": "2022-04-26 15:56:12 +0200", "message": "Throws exceptions even when not logging upload interrupt"}, {"oid": "8bd3d7a98721dcb4c0d727687596c5bdc7266e90", "committedDate": "2022-04-27 08:48:58 +0200", "message": "Merge pull request #1394 from scireum/feature/meg/SIRI-562"}, {"oid": "c4bde0e46c0cd521b2718ec0e8b63447222be418", "committedDate": "2022-06-18 12:46:51 +0200", "message": "Removes a premature translation."}, {"oid": "9fe46a7966805b80f613abe9c83929c7c1f4b41c", "committedDate": "2022-06-18 12:48:19 +0200", "message": "Fixes some JavaDoc typos."}, {"oid": "920e7475deab5c7d3fd717851276d3f819c95a88", "committedDate": "2022-06-28 21:19:53 +0200", "message": "Uses a blocking approach to deliver known large files."}, {"oid": "1f2a605fe0f04c568e090518dc2d0020263cb833", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Allows marking blobs as inconvertible if a conversion error occurs for a variant. This prevents unnecessary conversion retries, e.g. if the input file is not a supported file type."}, {"oid": "c2af5eea8d960b2d0abc52ee7d84b4e8ee57f271", "committedDate": "2022-12-08 22:35:13 +0100", "message": "Code Style"}, {"oid": "3845f784c41d5abdfcc502857bb45781f1c1cbc6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only refreshes from db when retrying conversion"}, {"oid": "7ef99ba46232dab5a43ea9ecbc528d0ebca3a7b6", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Extracts method and clarifies variable names"}, {"oid": "05bee62c619fa717baf25be1bbf9da6b205dbb48", "committedDate": "2022-12-12 16:59:04 +0100", "message": "Only caches and checks failures for the blob itself. No need to retry conversion for every other variant."}, {"oid": "82cf1ad9fe7a43fb5ea2119ae0d84253c7ba2d9a", "committedDate": "2022-12-12 20:33:35 +0100", "message": "Adds the capability to create variants of a blob by a newly introduced method"}, {"oid": "b4c6998295524742993d0aa58cbb13779956046a", "committedDate": "2022-12-14 22:41:39 +0100", "message": "Actually makes the findOrCreatVariant method blocking"}, {"oid": "c5c0a581bc5b318e5e405b2113247709852bb340", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Resolves TODOs. Inconvertible is now cached for the blob instead of individual variants."}, {"oid": "b7657b73671e378e7ddc8691ac77029ce11acd4c", "committedDate": "2022-12-16 10:43:01 +0100", "message": "Inverts if to simplify code"}, {"oid": "fe29042a1af68e2040ed800b13dd3fb2dbe2ed43", "committedDate": "2022-12-16 13:32:02 +0100", "message": "Marks failure for Blob and Variant at the same time"}, {"oid": "05f4bfaeb4ccee7c0a85a5709a6b5e0597b67cc0", "committedDate": "2022-12-16 14:16:31 +0100", "message": "Also refreshes the blob when retrying after an optimistic lock error"}, {"oid": "bc184f240d830eac248f1122716233cab3660f09", "committedDate": "2023-01-09 16:56:18 +0100", "message": "Revert \"Actually makes the findOrCreatVariant method blocking\""}, {"oid": "9b181920a5cb474ebd2bffa16de6af89cde23123", "committedDate": "2023-01-09 17:58:20 +0100", "message": "Adds a new variant creation path which was designed for longer running conversions."}, {"oid": "46fb8f1cfe93000b2456eaaa1a1aac0bdeb00340", "committedDate": "2023-01-10 09:39:35 +0100", "message": "Removes the ensureVariantExists method since it is not used anymore."}, {"oid": "1a94418505fba3cc0c2ca53e6a0690336baf8527", "committedDate": "2023-01-10 13:19:02 +0100", "message": "Reverts marking blobs as inconvertible"}, {"oid": "e25cb94c36040b5696c19ad26bfe13e067b8625f", "committedDate": "2023-01-10 13:21:01 +0100", "message": "Propagates failed variant conversions to registered error handlers"}, {"oid": "81bc3a4de4e0396a17152408eff94c385cf77337", "committedDate": "2023-01-10 17:20:17 +0100", "message": "Fixes a bug which prevented the variants from being delivered/displayed due to an early null return"}, {"oid": "3d10fc2f5e8172e8f70e5478ca599bb78df0e09e", "committedDate": "2023-01-11 09:20:02 +0100", "message": "Moves error handler invocation directly to point of use"}, {"oid": "8fa47399e277f18f207feeca098e46352a4901ec", "committedDate": "2023-01-11 13:19:21 +0100", "message": "Fixes typo"}, {"oid": "3a36355103d816e824cf2a09901276810d320bc5", "committedDate": "2023-01-11 13:20:52 +0100", "message": "Improves javadoc"}, {"oid": "adfccd62fc5084da20db97a20214b09305976ca0", "committedDate": "2023-01-11 13:21:14 +0100", "message": "Merge remote-tracking branch 'origin/feature/mko/OX-9323' into feature/mko/OX-9323"}, {"oid": "74b38a0c7382c789776e2f1405d7e5609d6bfb05", "committedDate": "2023-01-11 13:33:27 +0100", "message": "Renames variable"}, {"oid": "5e05c3493d356fa9951937d66149cebb7c60b576", "committedDate": "2023-01-16 11:05:50 +0100", "message": "Merge pull request #1549 from scireum/feature/csc/SIRI-658_blobFlag"}, {"oid": "373790d59e845c7e86f6fb33fb5e933dbbe592e7", "committedDate": "2023-01-17 14:27:28 +0100", "message": "Makes the handler list static to ensure proper loading"}, {"oid": "95d52f9cd5a33188a5a9f7870854aaf4df2aee91", "committedDate": "2023-02-03 10:47:40 +0100", "message": "Fixes typos"}, {"oid": "ec1bf5e645e1971f448e54d6a9dcf4de6b0d692c", "committedDate": "2023-03-30 17:12:04 +0200", "message": "Fixes and improves blob cache invalidation"}, {"oid": "0b047de23b1bd3cd06f80b57dee287521ec54a2b", "committedDate": "2023-03-31 10:15:34 +0200", "message": "Changes remove to convenience method"}, {"oid": "a2f660b08a00730eeb5f0d7e8b028e34d17bdc10", "committedDate": "2023-04-03 07:02:04 +0200", "message": "Properly clears cache in case of renamings"}, {"oid": "e27f6ad1930182e966802b958c496d082034369c", "committedDate": "2023-04-04 14:12:43 +0200", "message": "Fixes typos"}, {"oid": "6f8801b7c5afcb7c3cde0aedd5d2d49a49fe4dfe", "committedDate": "2023-04-04 14:14:39 +0200", "message": "Provides the input file to the conversion"}, {"oid": "fb4ad4c78300639008de522ecb7984ffa1023405", "committedDate": "2023-04-04 16:20:35 +0200", "message": "Prefers FileHandle instead of File"}, {"oid": "dd870523055bdef60ab261da4f8e676fe20a60f1", "committedDate": "2023-04-04 16:35:01 +0200", "message": "Fixes an NPE when no FileHandle was given"}, {"oid": "7dd724fbd252a16ed20c3efad91a6101490aa2da", "committedDate": "2023-04-14 11:16:16 +0200", "message": "Implements the formerly added method"}, {"oid": "b1f2d46f14df61e05ce3238e1238c38c19d7898b", "committedDate": "2023-04-20 14:07:05 +0200", "message": "Provides a simple way for inserting help/user assistance into backed pages."}, {"oid": "cd26a84debbc8797575b2c96730d5b7ae5b77539", "committedDate": "2023-05-09 14:35:04 +0200", "message": "Removes the re-throwing of the exception within the invokeConversionPipelineAsync method since it is not needed anymore"}, {"oid": "f4cc3ba1f130945e37028beb9a25dc812eb80893", "committedDate": "2023-05-12 15:16:00 +0200", "message": "Permits to read and set the read-only information"}, {"oid": "e9fd65525b45d2d73ad80cb304fa7b790c5dbcf0", "committedDate": "2023-05-15 13:33:59 +0200", "message": "Merge branch 'develop' into ili/read-only-files"}, {"oid": "093b5b8b70f95455947daa67c1d01a0ec6579788", "committedDate": "2023-05-17 17:55:06 +0200", "message": "Makes updateBlobReadOnlyFlag public"}]}, {"oid": "2593500d818c0c13aa4417fbd77693fb9135eb99", "url": "https://github.com/scireum/sirius-biz/commit/2593500d818c0c13aa4417fbd77693fb9135eb99", "message": "Also use the space name inside the cache key\n\nThe space name needs to be part of the key, as there might be files\nwith the same path in different spaces.\n\nFixes: SE-9718", "committedDate": "2020-06-04T09:04:24Z", "type": "commit"}, {"oid": "ef0d3c450dd92b0018a36428753d172c45638030", "url": "https://github.com/scireum/sirius-biz/commit/ef0d3c450dd92b0018a36428753d172c45638030", "message": "Only clear the cache when updating a blob if the name was changed\n\nFixes: SE-9718", "committedDate": "2020-06-04T09:05:12Z", "type": "commit"}]}