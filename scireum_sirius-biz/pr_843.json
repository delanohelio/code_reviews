{"pr_number": 843, "pr_title": "Adds Import-/Export-Jobs concerning Archives (Only ZIP for now)", "pr_author": "fhaScireum", "pr_createdAt": "2020-08-19T12:27:34Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/843", "timeline": [{"oid": "138994afbdedee9673c8113d9b0918a980cc93cd", "url": "https://github.com/scireum/sirius-biz/commit/138994afbdedee9673c8113d9b0918a980cc93cd", "message": "Adds Import-/Export-Jobs concerning Archives (Only ZIP for now)\n\n- Fixes: OX-5983", "committedDate": "2020-08-19T12:27:02Z", "type": "commit"}, {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056", "url": "https://github.com/scireum/sirius-biz/commit/08a7c5659d53898c70ba9f5119d9d99582feb056", "message": "Changes execute method in super class to allow modifying the handling of a regular or archive file.\n\n- Fixes: OX-5983", "committedDate": "2020-08-20T06:54:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NTcxNQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473845715", "body": "Is it really prohibited to invoke close in that stream?", "bodyText": "Is it really prohibited to invoke close in that stream?", "bodyHTML": "<p dir=\"auto\">Is it really prohibited to invoke close in that stream?</p>", "author": "andyHa", "createdAt": "2020-08-20T10:09:51Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.apache.commons.io.output.CloseShieldOutputStream;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+/**\n+ * Provides an export job which writes multiple files into a single archive file.\n+ */\n+public abstract class ArchiveExportJob extends FileExportJob {\n+\n+    private ZipOutputStream zipOutputStream;\n+\n+    /**\n+     * Creates a new job which writes into the given destination.\n+     *\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param process              the context in which the process will be executed\n+     */\n+    protected ArchiveExportJob(FileOrDirectoryParameter destinationParameter, ProcessContext process) {\n+        super(destinationParameter, process);\n+    }\n+\n+    /**\n+     * Creates a new entry in the archive and returns its output stream.\n+     *\n+     * @param filename the name of the archived file\n+     * @return a new output stream that points to the created entry\n+     * @throws IOException in case the output stream couln't be created\n+     */\n+    @Nonnull\n+    protected OutputStream createNextArchiveEntry(String filename) throws IOException {\n+        if (zipOutputStream == null) {\n+            zipOutputStream = new ZipOutputStream(createOutputStream());\n+        }\n+\n+        ZipEntry zipEntry = new ZipEntry(filename);\n+        zipOutputStream.putNextEntry(zipEntry);\n+\n+        return new CloseShieldOutputStream(zipOutputStream);", "originalCommit": "08a7c5659d53898c70ba9f5119d9d99582feb056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1MTYwNQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473851605", "bodyText": "Yes, because the output stream is for the whole archive. #putNextEntry does not create a new output stream but only creates a new entry inside the archive that is being written to when writing to the stream.", "author": "fhaScireum", "createdAt": "2020-08-20T10:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NTcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NzM0OQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473847349", "body": "Why not search the stream on demand here - should greatly simplify the code and male getFile re usable for the same file", "bodyText": "Why not search the stream on demand here - should greatly simplify the code and male getFile re usable for the same file", "bodyHTML": "<p dir=\"auto\">Why not search the stream on demand here - should greatly simplify the code and male getFile re usable for the same file</p>", "author": "andyHa", "createdAt": "2020-08-20T10:11:50Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    /**\n+     * Contains the file name and input stream of all archive entries whose extensions can be handled.\n+     */\n+    private final Map<String, InputStream> entries = new HashMap<>();\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    protected void executeForSingleFile(FileHandle fileHandle) throws Exception {\n+        entries.put(fileHandle.getFile().getName(), fileHandle.getInputStream());\n+        importFiles();\n+    }\n+\n+    @Override\n+    protected void executeForArchive(FileHandle fileHandle) throws Exception {\n+        process.log(ProcessLog.info().withNLSKey(\"FileImportJob.importingZipFile\"));\n+\n+        try (ZipFile zipFile = new ZipFile(fileHandle.getFile())) {\n+            Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+\n+            int validArchiveEntries = 0;\n+\n+            while (zipEntries.hasMoreElements()) {\n+                ZipEntry zipEntry = zipEntries.nextElement();\n+\n+                if (!isHiddenFile(zipEntry.getName())\n+                    && canHandleFileExtension(Files.getFileExtension(zipEntry.getName()))) {\n+                    this.entries.put(zipEntry.getName(), zipFile.getInputStream(zipEntry));\n+                    validArchiveEntries++;\n+                }\n+            }\n+\n+            if (validArchiveEntries == 0) {\n+                throw Exceptions.createHandled().withNLSKey(\"FileImportJob.noZippedFileFound\").handle();\n+            }\n+\n+            importFiles();\n+        }\n+    }\n+\n+    /**\n+     * Imports data based on the open input streams.\n+     *\n+     * @throws Exception in case of an exception while importing\n+     */\n+    protected abstract void importFiles() throws Exception;\n+\n+    protected List<InputStream> getFiles() {\n+        return new ArrayList<>(entries.values());\n+    }\n+\n+    @Nullable\n+    protected InputStream getFile(String fileName, boolean isRequired) {", "originalCommit": "08a7c5659d53898c70ba9f5119d9d99582feb056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDY3NQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473854675", "bodyText": "I'll look into that.", "author": "fhaScireum", "createdAt": "2020-08-20T10:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NzM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0ODQ2NQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473848465", "body": "Shouldn\u2018t we rather throw/abort here - we acutally expect an archive with multiple files answay", "bodyText": "Shouldn\u2018t we rather throw/abort here - we acutally expect an archive with multiple files answay", "bodyHTML": "<p dir=\"auto\">Shouldn\u2018t we rather throw/abort here - we acutally expect an archive with multiple files answay</p>", "author": "andyHa", "createdAt": "2020-08-20T10:13:08Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    /**\n+     * Contains the file name and input stream of all archive entries whose extensions can be handled.\n+     */\n+    private final Map<String, InputStream> entries = new HashMap<>();\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    protected void executeForSingleFile(FileHandle fileHandle) throws Exception {\n+        entries.put(fileHandle.getFile().getName(), fileHandle.getInputStream());", "originalCommit": "08a7c5659d53898c70ba9f5119d9d99582feb056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1ODc1Mg==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473858752", "bodyText": "This might generate quite a few changes in the job structure further down, but will simplify the logic here. I'll change it and see how much refactoring is actually needed.", "author": "fhaScireum", "createdAt": "2020-08-20T10:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0ODQ2NQ=="}], "type": "inlineReview"}, {"oid": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa", "url": "https://github.com/scireum/sirius-biz/commit/624f835cb8926d6ade0dd49cf49b37ae65cf9baa", "message": "Directly open input streams when a file is requested. This allows for multiple reading of the same entry.\n\nAlso unifies naming scheme.\n\n- Fixes: OX-5983", "committedDate": "2020-08-20T12:59:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3NjQ4OQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473976489", "body": "JavaDoc", "bodyText": "JavaDoc", "bodyHTML": "<p dir=\"auto\">JavaDoc</p>", "author": "andyHa", "createdAt": "2020-08-20T13:32:19Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    private ZipFile zipFile;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        VirtualFile file = process.require(fileParameter);\n+\n+        if (canHandleFileExtension(file.fileExtension())) {\n+            try (FileHandle fileHandle = file.download()) {\n+                backupInputFile(file.name(), fileHandle);\n+                zipFile = new ZipFile(fileHandle.getFile());\n+                importEntries();\n+            }\n+        } else {\n+            throw Exceptions.createHandled().withNLSKey(\"FileImportJob.fileNotSupported\").handle();\n+        }\n+    }\n+\n+    protected abstract void importEntries() throws Exception;", "originalCommit": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MzM4NQ==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473973385", "body": "```suggestion\r\n        throw new UnsupportedOperationException();\r\n```\r\n? Dann knallts auch falls es doch mal aufgerufen wird", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // never called in overwritten execute method\n          \n          \n            \n                    throw new UnsupportedOperationException();\n          \n      \n    \n    \n  \n\n? Dann knallts auch falls es doch mal aufgerufen wird", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c x x-first\">//</span><span class=\"x x-last\"> never called in overwritten execute method</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">throw</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">UnsupportedOperationException</span><span class=\"x x-last\">();</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">? Dann knallts auch falls es doch mal aufgerufen wird</p>", "author": "qw3ry", "createdAt": "2020-08-20T13:29:27Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    private ZipFile zipFile;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        VirtualFile file = process.require(fileParameter);\n+\n+        if (canHandleFileExtension(file.fileExtension())) {\n+            try (FileHandle fileHandle = file.download()) {\n+                backupInputFile(file.name(), fileHandle);\n+                zipFile = new ZipFile(fileHandle.getFile());\n+                importEntries();\n+            }\n+        } else {\n+            throw Exceptions.createHandled().withNLSKey(\"FileImportJob.fileNotSupported\").handle();\n+        }\n+    }\n+\n+    protected abstract void importEntries() throws Exception;\n+\n+    /**\n+     * Fetches an entry from the archive and returns it's input stream.\n+     * <p>\n+     * Note, that previous opened input stream might get closed by performing this action.\n+     *\n+     * @param fileName   the name of the file to fetch\n+     * @param isRequired flag if the file is required\n+     * @return input stream for the requested file\n+     * @throws Exception in case of an exception during fetching or if the file wasn't found but is required\n+     */\n+    @Nullable\n+    protected InputStream fetchEntry(String fileName, boolean isRequired) throws Exception {\n+        Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+        while (zipEntries.hasMoreElements()) {\n+            ZipEntry zipEntry = zipEntries.nextElement();\n+\n+            if (Strings.areEqual(fileName, zipEntry.getName())) {\n+                return zipFile.getInputStream(zipEntry);\n+            }\n+        }\n+\n+        handleMissingFile(fileName, isRequired);\n+        return null;\n+    }\n+\n+    protected void handleMissingFile(String fileName, boolean isRequired) {\n+        if (isRequired) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"ArchiveImportJob.errorMsg.requiredFileMissing\")\n+                            .set(\"fileName\", fileName)\n+                            .handle();\n+        } else {\n+            process.log(ProcessLog.warn()\n+                                  .withNLSKey(\"ArchiveImportJob.errorMsg.optionalFileMissing\")\n+                                  .withContext(\"fileName\", fileName)\n+                                  .withMessageType(fileName));\n+        }\n+    }\n+\n+    /**\n+     * Checks if all given files are found in the archive.\n+     *\n+     * @param fileNamesToCheck all file names that should be inside the archive\n+     * @return <tt>true</tt> if the archive contains all the given files, <tt>false</tt> otherwise\n+     */\n+    protected boolean containsEntries(String... fileNamesToCheck) {\n+        ArrayList<? extends ZipEntry> zipEntries = Collections.list(zipFile.entries());\n+\n+        return Arrays.stream(fileNamesToCheck)\n+                     .allMatch(fileName -> zipEntries.stream().anyMatch(entry -> entry.getName().equals(fileName)));\n+    }\n+\n+    @Override\n+    protected final boolean canHandleFileExtension(@Nullable String fileExtension) {\n+        return \"zip\".equalsIgnoreCase(fileExtension);\n+    }\n+\n+    @Override\n+    protected void executeForStream(String filename, InputStream in) throws Exception {\n+        // never called in overwritten execute method", "originalCommit": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3NTg4Mw==", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473975883", "body": "```suggestion\r\n        return FILE_EXTENSION_ZIP.equalsIgnoreCase(fileExtension);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"zip\".equalsIgnoreCase(fileExtension);\n          \n          \n            \n                    return FILE_EXTENSION_ZIP.equalsIgnoreCase(fileExtension);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">zip</span><span class=\"pl-pds x x-last\">\"</span></span><span class=\"pl-k\">.</span>equalsIgnoreCase(fileExtension);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1 x x-first x-last\">FILE_EXTENSION_ZIP</span><span class=\"pl-k\">.</span>equalsIgnoreCase(fileExtension);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "qw3ry", "createdAt": "2020-08-20T13:31:45Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    private ZipFile zipFile;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        VirtualFile file = process.require(fileParameter);\n+\n+        if (canHandleFileExtension(file.fileExtension())) {\n+            try (FileHandle fileHandle = file.download()) {\n+                backupInputFile(file.name(), fileHandle);\n+                zipFile = new ZipFile(fileHandle.getFile());\n+                importEntries();\n+            }\n+        } else {\n+            throw Exceptions.createHandled().withNLSKey(\"FileImportJob.fileNotSupported\").handle();\n+        }\n+    }\n+\n+    protected abstract void importEntries() throws Exception;\n+\n+    /**\n+     * Fetches an entry from the archive and returns it's input stream.\n+     * <p>\n+     * Note, that previous opened input stream might get closed by performing this action.\n+     *\n+     * @param fileName   the name of the file to fetch\n+     * @param isRequired flag if the file is required\n+     * @return input stream for the requested file\n+     * @throws Exception in case of an exception during fetching or if the file wasn't found but is required\n+     */\n+    @Nullable\n+    protected InputStream fetchEntry(String fileName, boolean isRequired) throws Exception {\n+        Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+        while (zipEntries.hasMoreElements()) {\n+            ZipEntry zipEntry = zipEntries.nextElement();\n+\n+            if (Strings.areEqual(fileName, zipEntry.getName())) {\n+                return zipFile.getInputStream(zipEntry);\n+            }\n+        }\n+\n+        handleMissingFile(fileName, isRequired);\n+        return null;\n+    }\n+\n+    protected void handleMissingFile(String fileName, boolean isRequired) {\n+        if (isRequired) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"ArchiveImportJob.errorMsg.requiredFileMissing\")\n+                            .set(\"fileName\", fileName)\n+                            .handle();\n+        } else {\n+            process.log(ProcessLog.warn()\n+                                  .withNLSKey(\"ArchiveImportJob.errorMsg.optionalFileMissing\")\n+                                  .withContext(\"fileName\", fileName)\n+                                  .withMessageType(fileName));\n+        }\n+    }\n+\n+    /**\n+     * Checks if all given files are found in the archive.\n+     *\n+     * @param fileNamesToCheck all file names that should be inside the archive\n+     * @return <tt>true</tt> if the archive contains all the given files, <tt>false</tt> otherwise\n+     */\n+    protected boolean containsEntries(String... fileNamesToCheck) {\n+        ArrayList<? extends ZipEntry> zipEntries = Collections.list(zipFile.entries());\n+\n+        return Arrays.stream(fileNamesToCheck)\n+                     .allMatch(fileName -> zipEntries.stream().anyMatch(entry -> entry.getName().equals(fileName)));\n+    }\n+\n+    @Override\n+    protected final boolean canHandleFileExtension(@Nullable String fileExtension) {\n+        return \"zip\".equalsIgnoreCase(fileExtension);", "originalCommit": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b67fb40286516c440917fabadd53160f51ddefe", "url": "https://github.com/scireum/sirius-biz/commit/5b67fb40286516c440917fabadd53160f51ddefe", "message": "Adds missing javadoc and implements other requested changes from code reviews.\n\n- Fixes: OX-5983", "committedDate": "2020-08-20T13:40:40Z", "type": "commit"}]}