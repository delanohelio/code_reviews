{"pr_number": 6787, "pr_title": "Add class attributes to chunks", "pr_author": "melissa-barca", "pr_createdAt": "2020-05-01T00:56:20Z", "pr_url": "https://github.com/rstudio/rstudio/pull/6787", "merge_commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "timeline": [{"oid": "e284794bd5e6d18d0b7dad0ecddd9ca81946ceb3", "url": "https://github.com/rstudio/rstudio/commit/e284794bd5e6d18d0b7dad0ecddd9ca81946ceb3", "message": "fix issue where chunks weren't marked as initialized.\nAssign id attribute to chunks based on their label.", "committedDate": "2020-04-30T02:39:17Z", "type": "commit"}, {"oid": "d1228cd380efa3382b6705c4eb01341a6407da54", "url": "https://github.com/rstudio/rstudio/commit/d1228cd380efa3382b6705c4eb01341a6407da54", "message": "add css id validator to StringUtil and ensure chunks have valids ids.", "committedDate": "2020-04-30T23:07:02Z", "type": "commit"}, {"oid": "a9e6141045be99413d4c57a442a22f29ac775f09", "url": "https://github.com/rstudio/rstudio/commit/a9e6141045be99413d4c57a442a22f29ac775f09", "message": "add an id to the chunk output widget based on the chunk's label", "committedDate": "2020-05-01T00:22:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4ODk5Mw==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418588993", "body": "I think this regex would be more simply expressed with a leading `-?` (then it won't be necessary to duplicate the whole alphanumeric test)", "bodyText": "I think this regex would be more simply expressed with a leading -? (then it won't be necessary to duplicate the whole alphanumeric test)", "bodyHTML": "<p dir=\"auto\">I think this regex would be more simply expressed with a leading <code>-?</code> (then it won't be necessary to duplicate the whole alphanumeric test)</p>", "author": "jmcphers", "createdAt": "2020-05-01T15:21:33Z", "path": "src/gwt/src/org/rstudio/core/client/StringUtil.java", "diffHunk": "@@ -944,6 +944,40 @@ public static String getExtension(String string)\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an 'x'.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with 'x'\n+      Pattern pattern =\n+         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MTA1NQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418651055", "bodyText": "Ah good idea, that's much nicer.", "author": "melissa-barca", "createdAt": "2020-05-01T17:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4ODk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8cd475fc736aaa38ec192704ca69987327977119", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..0c8575854b 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -950,13 +950,12 @@ public class StringUtil\n       // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n       // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n       // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an 'x'.\n+      // If an invalid character is found, it is replaced with an underscore.\n       \n \n       // return the string if it's already valid,\n-      // otherwise replace invalid characters with 'x'\n-      Pattern pattern =\n-         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n       if (pattern.test(string))\n          return string;\n       else\n", "next_change": {"commit": "5878318a3dba42ca24508ec4d4a5a98e49eaa3ab", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 0c8575854b..62bb67461f 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -955,7 +955,7 @@ public class StringUtil\n \n       // return the string if it's already valid,\n       // otherwise replace invalid characters with '_'\n-      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n       if (pattern.test(string))\n          return string;\n       else\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..898d8260f0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -950,13 +950,12 @@ public class StringUtil\n       // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n       // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n       // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an 'x'.\n+      // If an invalid character is found, it is replaced with an underscore.\n       \n \n       // return the string if it's already valid,\n-      // otherwise replace invalid characters with 'x'\n-      Pattern pattern =\n-         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n       if (pattern.test(string))\n          return string;\n       else\n", "next_change": {"commit": "2486824b9a3ab4bdde679840f08089a057c19621", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 898d8260f0..433bc104c6 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,39 +944,6 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n-   public static String getCssIdentifier(String string)\n-   {\n-      // Each character must be one of the following:\n-      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n-      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n-      // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an underscore.\n-      \n-\n-      // return the string if it's already valid,\n-      // otherwise replace invalid characters with '_'\n-      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n-      if (pattern.test(string))\n-         return string;\n-      else\n-      {\n-         StringBuilder builder = new StringBuilder();\n-         for (int i = 0; i < string.length(); i++)\n-         {\n-            char c = string.charAt(i);\n-            if (c == '_' ||\n-                c > 0x00A0 ||\n-                (c >= 'a' && c <= 'z') ||\n-                (c >= 'A' && c <= 'Z') ||\n-                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n-               builder.append(c);\n-            else\n-               builder.append(\"_\");\n-         }\n-         return builder.toString();\n-      }\n-   }\n-\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": {"commit": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 433bc104c6..d8b283f5c0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,6 +947,39 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an underscore.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n+      if (pattern.test(string))\n+         return string;\n+      else\n+      {\n+         StringBuilder builder = new StringBuilder();\n+         for (int i = 0; i < string.length(); i++)\n+         {\n+            char c = string.charAt(i);\n+            if (c == '_' ||\n+                c > 0x00A0 ||\n+                (c >= 'a' && c <= 'z') ||\n+                (c >= 'A' && c <= 'Z') ||\n+                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n+               builder.append(c);\n+            else\n+               builder.append(\"_\");\n+         }\n+         return builder.toString();\n+      }\n+   }\n+\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "2486824b9a3ab4bdde679840f08089a057c19621", "committedDate": "2020-02-04 14:21:14 -0800", "message": "Merge branch 'master' into v1.4"}, {"oid": "045f07b934e43730b5c868f0de04676df9d6970e", "committedDate": "2020-03-18 16:13:12 -0400", "message": "more work on image dialog"}, {"oid": "87090095e526eb4cab3e4eb7d4eb724d52f9976a", "committedDate": "2020-04-13 16:38:23 -0700", "message": "add option for natural sorting in files pane"}, {"oid": "4591ba2a25006dc882d3b9c585beba5fda866d76", "committedDate": "2020-04-13 18:09:12 -0700", "message": "mechanical cleanup of some minor whitespace and Java styles"}, {"oid": "da44ab4454851a7992c7b74767a8fba3feb1db32", "committedDate": "2020-04-14 11:20:43 -0700", "message": "Merge pull request #6658 from rstudio/feature/natural-sort-order"}, {"oid": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "committedDate": "2020-05-04 13:13:13 -0500", "message": "Merge branch 'v1.3-patch'"}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "27d18e1f2dd168c7a4ff79294d365a3c572f8d2d", "committedDate": "2020-09-11 16:28:22 -0700", "message": "Fix JDK11 deprecation warnings when building GWT"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "4c850461da1058e0e87f949773d065e0b5088370", "committedDate": "2021-09-23 15:25:58 -0400", "message": "initial plumbing for yaml completions"}, {"oid": "8da2687ece359ed8cf85ca192d90383f27d749f0", "committedDate": "2021-11-16 12:11:14 -0500", "message": "feat(i18n):i18n-ify org.rstudio.core"}, {"oid": "ebcb2a7470a4cffe032b01b3c875b727c0e48379", "committedDate": "2021-11-16 12:11:15 -0500", "message": "feat(i18n):refactor properties and interface name to reflect package name"}, {"oid": "84ccc115504736428d5fa67ed9daccd2a76afbdf", "committedDate": "2021-11-22 11:58:58 -0500", "message": "fix(i18n): Implement PR changes; remove i18n from asserts and debug statements; Implement placeholders."}, {"oid": "3734e8c18ae2e9dc9afc5e9722f0e12aafafdc12", "committedDate": "2021-11-24 19:00:14 -0500", "message": "fix(i18n): Resolve PR requested changes"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "bb888d2a7838cf149b7f8b52a541ce9624f2c4ab", "committedDate": "2022-01-26 09:53:21 -0500", "message": "improved yaml completion filter"}, {"oid": "833fbf9ab538fc2b164800c0dd61c05bc00944f2", "committedDate": "2022-04-13 11:02:20 -0700", "message": "handle sequencing of setPendingQuit callback (#10964)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}, {"oid": "94769c0e0be9c13dff8001e40b06eb3f8545791a", "committedDate": "2022-10-04 09:35:43 -0700", "message": "optimize handling of console output / errors (#12077)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4OTQ2OQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418589469", "body": "I think we should replace with a `-` or `_` for readability reasons in the calling code; e.g., `exercise_six` is much easier to read than `exercisexsix`. ", "bodyText": "I think we should replace with a - or _ for readability reasons in the calling code; e.g., exercise_six is much easier to read than exercisexsix.", "bodyHTML": "<p dir=\"auto\">I think we should replace with a <code>-</code> or <code>_</code> for readability reasons in the calling code; e.g., <code>exercise_six</code> is much easier to read than <code>exercisexsix</code>.</p>", "author": "jmcphers", "createdAt": "2020-05-01T15:22:40Z", "path": "src/gwt/src/org/rstudio/core/client/StringUtil.java", "diffHunk": "@@ -944,6 +944,40 @@ public static String getExtension(String string)\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an 'x'.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with 'x'\n+      Pattern pattern =\n+         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      if (pattern.test(string))\n+         return string;\n+      else\n+      {\n+         StringBuilder builder = new StringBuilder();\n+         for (int i = 0; i < string.length(); i++)\n+         {\n+            char c = string.charAt(i);\n+            if (c == '_' ||\n+                c > 0x00A0 ||\n+                (c >= 'a' && c <= 'z') ||\n+                (c >= 'A' && c <= 'Z') ||\n+                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n+               builder.append(c);\n+            else\n+               builder.append(\"x\");", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MTkxMQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418651911", "bodyText": "Agreed - I didn't use a hyphen because it wouldn't protect against a string starting with -- but an underscore works!", "author": "melissa-barca", "createdAt": "2020-05-01T17:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4OTQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8cd475fc736aaa38ec192704ca69987327977119", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..0c8575854b 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -972,7 +971,7 @@ public class StringUtil\n                 (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n                builder.append(c);\n             else\n-               builder.append(\"x\");\n+               builder.append(\"_\");\n          }\n          return builder.toString();\n       }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..898d8260f0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -972,7 +971,7 @@ public class StringUtil\n                 (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n                builder.append(c);\n             else\n-               builder.append(\"x\");\n+               builder.append(\"_\");\n          }\n          return builder.toString();\n       }\n", "next_change": {"commit": "2486824b9a3ab4bdde679840f08089a057c19621", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 898d8260f0..433bc104c6 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,39 +944,6 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n-   public static String getCssIdentifier(String string)\n-   {\n-      // Each character must be one of the following:\n-      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n-      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n-      // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an underscore.\n-      \n-\n-      // return the string if it's already valid,\n-      // otherwise replace invalid characters with '_'\n-      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n-      if (pattern.test(string))\n-         return string;\n-      else\n-      {\n-         StringBuilder builder = new StringBuilder();\n-         for (int i = 0; i < string.length(); i++)\n-         {\n-            char c = string.charAt(i);\n-            if (c == '_' ||\n-                c > 0x00A0 ||\n-                (c >= 'a' && c <= 'z') ||\n-                (c >= 'A' && c <= 'Z') ||\n-                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n-               builder.append(c);\n-            else\n-               builder.append(\"_\");\n-         }\n-         return builder.toString();\n-      }\n-   }\n-\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": {"commit": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 433bc104c6..d8b283f5c0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,6 +947,39 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an underscore.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n+      if (pattern.test(string))\n+         return string;\n+      else\n+      {\n+         StringBuilder builder = new StringBuilder();\n+         for (int i = 0; i < string.length(); i++)\n+         {\n+            char c = string.charAt(i);\n+            if (c == '_' ||\n+                c > 0x00A0 ||\n+                (c >= 'a' && c <= 'z') ||\n+                (c >= 'A' && c <= 'Z') ||\n+                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n+               builder.append(c);\n+            else\n+               builder.append(\"_\");\n+         }\n+         return builder.toString();\n+      }\n+   }\n+\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "2486824b9a3ab4bdde679840f08089a057c19621", "committedDate": "2020-02-04 14:21:14 -0800", "message": "Merge branch 'master' into v1.4"}, {"oid": "045f07b934e43730b5c868f0de04676df9d6970e", "committedDate": "2020-03-18 16:13:12 -0400", "message": "more work on image dialog"}, {"oid": "87090095e526eb4cab3e4eb7d4eb724d52f9976a", "committedDate": "2020-04-13 16:38:23 -0700", "message": "add option for natural sorting in files pane"}, {"oid": "4591ba2a25006dc882d3b9c585beba5fda866d76", "committedDate": "2020-04-13 18:09:12 -0700", "message": "mechanical cleanup of some minor whitespace and Java styles"}, {"oid": "da44ab4454851a7992c7b74767a8fba3feb1db32", "committedDate": "2020-04-14 11:20:43 -0700", "message": "Merge pull request #6658 from rstudio/feature/natural-sort-order"}, {"oid": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "committedDate": "2020-05-04 13:13:13 -0500", "message": "Merge branch 'v1.3-patch'"}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "27d18e1f2dd168c7a4ff79294d365a3c572f8d2d", "committedDate": "2020-09-11 16:28:22 -0700", "message": "Fix JDK11 deprecation warnings when building GWT"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "4c850461da1058e0e87f949773d065e0b5088370", "committedDate": "2021-09-23 15:25:58 -0400", "message": "initial plumbing for yaml completions"}, {"oid": "8da2687ece359ed8cf85ca192d90383f27d749f0", "committedDate": "2021-11-16 12:11:14 -0500", "message": "feat(i18n):i18n-ify org.rstudio.core"}, {"oid": "ebcb2a7470a4cffe032b01b3c875b727c0e48379", "committedDate": "2021-11-16 12:11:15 -0500", "message": "feat(i18n):refactor properties and interface name to reflect package name"}, {"oid": "84ccc115504736428d5fa67ed9daccd2a76afbdf", "committedDate": "2021-11-22 11:58:58 -0500", "message": "fix(i18n): Implement PR changes; remove i18n from asserts and debug statements; Implement placeholders."}, {"oid": "3734e8c18ae2e9dc9afc5e9722f0e12aafafdc12", "committedDate": "2021-11-24 19:00:14 -0500", "message": "fix(i18n): Resolve PR requested changes"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "bb888d2a7838cf149b7f8b52a541ce9624f2c4ab", "committedDate": "2022-01-26 09:53:21 -0500", "message": "improved yaml completion filter"}, {"oid": "833fbf9ab538fc2b164800c0dd61c05bc00944f2", "committedDate": "2022-04-13 11:02:20 -0700", "message": "handle sequencing of setPendingQuit callback (#10964)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}, {"oid": "94769c0e0be9c13dff8001e40b06eb3f8545791a", "committedDate": "2022-10-04 09:35:43 -0700", "message": "optimize handling of console output / errors (#12077)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MDU1MA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418590550", "body": "We should use CSS class names rather than IDs, for two reasons:\r\n\r\n1. An element can only have one ID, but it can have multiple classes. So once we use the element's ID for this addressability feature, we can't use the ID for anything else.\r\n1. It is considered best practice for a document to have only one element with a given ID, but as chunk names can be duplicated we could also wind up with duplicate IDs. It's normal (and expected) for the same CSS class to be assigned to multiple elements.", "bodyText": "We should use CSS class names rather than IDs, for two reasons:\n\nAn element can only have one ID, but it can have multiple classes. So once we use the element's ID for this addressability feature, we can't use the ID for anything else.\nIt is considered best practice for a document to have only one element with a given ID, but as chunk names can be duplicated we could also wind up with duplicate IDs. It's normal (and expected) for the same CSS class to be assigned to multiple elements.", "bodyHTML": "<p dir=\"auto\">We should use CSS class names rather than IDs, for two reasons:</p>\n<ol dir=\"auto\">\n<li>An element can only have one ID, but it can have multiple classes. So once we use the element's ID for this addressability feature, we can't use the ID for anything else.</li>\n<li>It is considered best practice for a document to have only one element with a given ID, but as chunk names can be duplicated we could also wind up with duplicate IDs. It's normal (and expected) for the same CSS class to be assigned to multiple elements.</li>\n</ol>", "author": "jmcphers", "createdAt": "2020-05-01T15:25:02Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -242,6 +243,12 @@ public int getState()\n       return state_;\n    }\n \n+   public void setId(String id)\n+   {\n+      this.getElement().setPropertyString(\"id\",", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NjMzMQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418686331", "bodyText": "Ok, that makes sense. I've updated this.", "author": "melissa-barca", "createdAt": "2020-05-01T18:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MDU1MA=="}], "type": "inlineReview", "revised_code": {"commit": "8cd475fc736aaa38ec192704ca69987327977119", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex aaa3087476..4261086242 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -243,10 +244,24 @@ public class ChunkOutputWidget extends Composite\n       return state_;\n    }\n \n-   public void setId(String id)\n+   public void setLabelClass(String value)\n    {\n-      this.getElement().setPropertyString(\"id\",\n-                                          StringUtil.getCssIdentifier(id));\n+      // ensure value has the correct prefix\n+      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n+               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                                  CHUNK_OUTPUT_PREFIX +\n+                                  value);\n+      value = StringUtil.getCssIdentifier(value);\n+\n+      if (value != label_)\n+      {\n+         // if we've already added a label style, remove it\n+         if (!StringUtil.isNullOrEmpty(label_))\n+            this.removeStyleName(label_);\n+\n+         label_ = value;\n+         this.addStyleName(label_);\n+      }\n    }\n \n    public void setOptions(RmdChunkOptions options)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex aaa3087476..f99ac1d27d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -243,10 +244,24 @@ public class ChunkOutputWidget extends Composite\n       return state_;\n    }\n \n-   public void setId(String id)\n+   public void setLabelClass(String value)\n    {\n-      this.getElement().setPropertyString(\"id\",\n-                                          StringUtil.getCssIdentifier(id));\n+      // ensure value has the correct prefix\n+      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n+         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                            CHUNK_OUTPUT_PREFIX +\n+                            value);\n+      value = StringUtil.getCssIdentifier(value);\n+\n+      if (!StringUtil.equals(value, label_))\n+      {\n+         // if we've already added a label style, remove it\n+         if (!StringUtil.isNullOrEmpty(label_))\n+            this.removeStyleName(label_);\n+\n+         label_ = value;\n+         this.addStyleName(label_);\n+      }\n    }\n \n    public void setOptions(RmdChunkOptions options)\n", "next_change": {"commit": "9ec1294303792984a14be38be95a03834b80ac84", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex f99ac1d27d..5285722e7d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -244,23 +244,21 @@ public class ChunkOutputWidget extends Composite\n       return state_;\n    }\n \n-   public void setLabelClass(String value)\n+   public void setClassId(String value)\n    {\n-      // ensure value has the correct prefix\n-      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                            CHUNK_OUTPUT_PREFIX +\n-                            value);\n-      value = StringUtil.getCssIdentifier(value);\n+      if (StringUtil.isNullOrEmpty(value))\n+         value = ClassIds.CHUNK;\n+      else if (!value.startsWith(ClassIds.CHUNK_OUTPUT))\n+         value = new String(ClassIds.CHUNK_OUTPUT + \"_\" + ClassIds.idSafeString(value));\n \n-      if (!StringUtil.equals(value, label_))\n+      // The class ID will change if the Chunk's name changes so we need to clear any previous\n+      // class ids set here.\n+      if (!StringUtil.equals(ClassIds.idSafeString(value), classId_))\n       {\n-         // if we've already added a label style, remove it\n-         if (!StringUtil.isNullOrEmpty(label_))\n-            this.removeStyleName(label_);\n-\n-         label_ = value;\n-         this.addStyleName(label_);\n+         if (!StringUtil.isNullOrEmpty(classId_))\n+            ClassIds.removeClassId(this, classId_);\n+         classId_ = value;\n+         ClassIds.assignClassId(this, classId_);\n       }\n    }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "9ec1294303792984a14be38be95a03834b80ac84", "committedDate": "2020-05-30 18:19:43 -0700", "message": "Update the chunk widgets to use ClassId to manage their class names."}, {"oid": "2eb4b1840926ad98ed7c8f924c7be46e759b3c67", "committedDate": "2020-05-30 18:20:19 -0700", "message": "Merge pull request #7004 from rstudio/feature/cleanup-classes"}, {"oid": "3d90b2d61d1c2cc4f38c9c34bde30f6b216840e5", "committedDate": "2020-06-03 11:32:48 -0700", "message": "refactor Console-related events into single-file format"}, {"oid": "6a4496ce6325f59f796455f05f05acdd4e82f2dd", "committedDate": "2020-08-10 20:45:45 -0700", "message": "refactor chunk output for hosting in visual mode"}, {"oid": "21016bc5e93db4a569f83455d8e67f8a073f83b9", "committedDate": "2020-08-11 17:55:34 -0400", "message": "render html after chunk output"}, {"oid": "e4dad9a9d8ae75ef0f2fec61d274b18ee388d3f6", "committedDate": "2020-08-14 11:07:18 -0700", "message": "size chunk output naturally in visual mode"}, {"oid": "f6526a2ea57ee13358bd2c805c3e0597d0bd4ead", "committedDate": "2020-08-28 12:32:26 -0400", "message": "update parameters, pass chunkcode to callback, create callback iframe under chunk output"}, {"oid": "4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "committedDate": "2020-09-09 15:57:53 -0400", "message": "improve error handling and variable names"}, {"oid": "91788fc36e0be55b2d41fb55fe6bfe72f6a73d1b", "committedDate": "2020-09-16 18:56:12 -0400", "message": "Merge branch 'master' into feature/chunk-grading"}, {"oid": "3c3ee0a0cb0bd9187b25f78f4aab9490983e6756", "committedDate": "2020-09-21 14:50:01 -0700", "message": "use inverted images rather than CSS to theme chunk icons"}, {"oid": "5da39a6f066ec42b7a82c002ec29f17e46fc36f7", "committedDate": "2020-10-09 14:39:19 -0700", "message": "use normal font size for chunk outputs in visual mode"}, {"oid": "0e9ad2ffcf3cb2eb70f601d5a0bddce2bec89a44", "committedDate": "2020-10-13 18:07:18 -0400", "message": "forward wheel events from chunk callback output to ace editor"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "011d10e29dd1985701b8f53cf03c8df506702628", "committedDate": "2021-01-08 15:07:55 -0800", "message": "mechanical refactor, replace explicit type with <>"}, {"oid": "d4031398f170bf323a56c080d0fb8bc7028970c4", "committedDate": "2021-09-21 09:26:05 -0400", "message": "synchronize pm-ace-has-output on visibility change"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d306f84dc59835cea76d9b7e71a5cff015df246d", "committedDate": "2022-03-28 15:19:18 -0700", "message": "Move where events are added on chunks to maintain scrolling fix on pages (#10852)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MTAwMw==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418591003", "body": "This function would be a great candidate for a unit test.", "bodyText": "This function would be a great candidate for a unit test.", "bodyHTML": "<p dir=\"auto\">This function would be a great candidate for a unit test.</p>", "author": "jmcphers", "createdAt": "2020-05-01T15:26:03Z", "path": "src/gwt/src/org/rstudio/core/client/StringUtil.java", "diffHunk": "@@ -944,6 +944,40 @@ public static String getExtension(String string)\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyNzU4Mg==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418727582", "bodyText": "Added \ud83d\udc4d (I even found a tiny bug while adding it).", "author": "melissa-barca", "createdAt": "2020-05-01T20:38:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MTAwMw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "2486824b9a3ab4bdde679840f08089a057c19621", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..433bc104c6 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,40 +944,6 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n-   public static String getCssIdentifier(String string)\n-   {\n-      // Each character must be one of the following:\n-      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n-      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n-      // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an 'x'.\n-      \n-\n-      // return the string if it's already valid,\n-      // otherwise replace invalid characters with 'x'\n-      Pattern pattern =\n-         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n-      if (pattern.test(string))\n-         return string;\n-      else\n-      {\n-         StringBuilder builder = new StringBuilder();\n-         for (int i = 0; i < string.length(); i++)\n-         {\n-            char c = string.charAt(i);\n-            if (c == '_' ||\n-                c > 0x00A0 ||\n-                (c >= 'a' && c <= 'z') ||\n-                (c >= 'A' && c <= 'Z') ||\n-                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n-               builder.append(c);\n-            else\n-               builder.append(\"x\");\n-         }\n-         return builder.toString();\n-      }\n-   }\n-\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": {"commit": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 433bc104c6..d8b283f5c0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,6 +947,39 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an underscore.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n+      if (pattern.test(string))\n+         return string;\n+      else\n+      {\n+         StringBuilder builder = new StringBuilder();\n+         for (int i = 0; i < string.length(); i++)\n+         {\n+            char c = string.charAt(i);\n+            if (c == '_' ||\n+                c > 0x00A0 ||\n+                (c >= 'a' && c <= 'z') ||\n+                (c >= 'A' && c <= 'Z') ||\n+                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n+               builder.append(c);\n+            else\n+               builder.append(\"_\");\n+         }\n+         return builder.toString();\n+      }\n+   }\n+\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "2486824b9a3ab4bdde679840f08089a057c19621", "committedDate": "2020-02-04 14:21:14 -0800", "message": "Merge branch 'master' into v1.4"}, {"oid": "045f07b934e43730b5c868f0de04676df9d6970e", "committedDate": "2020-03-18 16:13:12 -0400", "message": "more work on image dialog"}, {"oid": "87090095e526eb4cab3e4eb7d4eb724d52f9976a", "committedDate": "2020-04-13 16:38:23 -0700", "message": "add option for natural sorting in files pane"}, {"oid": "4591ba2a25006dc882d3b9c585beba5fda866d76", "committedDate": "2020-04-13 18:09:12 -0700", "message": "mechanical cleanup of some minor whitespace and Java styles"}, {"oid": "da44ab4454851a7992c7b74767a8fba3feb1db32", "committedDate": "2020-04-14 11:20:43 -0700", "message": "Merge pull request #6658 from rstudio/feature/natural-sort-order"}, {"oid": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "committedDate": "2020-05-04 13:13:13 -0500", "message": "Merge branch 'v1.3-patch'"}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "27d18e1f2dd168c7a4ff79294d365a3c572f8d2d", "committedDate": "2020-09-11 16:28:22 -0700", "message": "Fix JDK11 deprecation warnings when building GWT"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "4c850461da1058e0e87f949773d065e0b5088370", "committedDate": "2021-09-23 15:25:58 -0400", "message": "initial plumbing for yaml completions"}, {"oid": "8da2687ece359ed8cf85ca192d90383f27d749f0", "committedDate": "2021-11-16 12:11:14 -0500", "message": "feat(i18n):i18n-ify org.rstudio.core"}, {"oid": "ebcb2a7470a4cffe032b01b3c875b727c0e48379", "committedDate": "2021-11-16 12:11:15 -0500", "message": "feat(i18n):refactor properties and interface name to reflect package name"}, {"oid": "84ccc115504736428d5fa67ed9daccd2a76afbdf", "committedDate": "2021-11-22 11:58:58 -0500", "message": "fix(i18n): Implement PR changes; remove i18n from asserts and debug statements; Implement placeholders."}, {"oid": "3734e8c18ae2e9dc9afc5e9722f0e12aafafdc12", "committedDate": "2021-11-24 19:00:14 -0500", "message": "fix(i18n): Resolve PR requested changes"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "bb888d2a7838cf149b7f8b52a541ce9624f2c4ab", "committedDate": "2022-01-26 09:53:21 -0500", "message": "improved yaml completion filter"}, {"oid": "833fbf9ab538fc2b164800c0dd61c05bc00944f2", "committedDate": "2022-04-13 11:02:20 -0700", "message": "handle sequencing of setPendingQuit callback (#10964)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}, {"oid": "94769c0e0be9c13dff8001e40b06eb3f8545791a", "committedDate": "2022-10-04 09:35:43 -0700", "message": "optimize handling of console output / errors (#12077)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MTE4MA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418591180", "body": "Realize you're just moving this, but adding a unit test for this would be helpful!", "bodyText": "Realize you're just moving this, but adding a unit test for this would be helpful!", "bodyHTML": "<p dir=\"auto\">Realize you're just moving this, but adding a unit test for this would be helpful!</p>", "author": "jmcphers", "createdAt": "2020-05-01T15:26:23Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java", "diffHunk": "@@ -55,6 +55,41 @@ public ChunkContextUi(TextEditingTarget target, int renderPass,\n       createToolbar(preambleRow);\n    }\n    \n+   // Public static methods ---------------------------------------------------\n+\n+   public static String extractChunkLabel(String extractedChunkHeader)", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NDIzNA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418754234", "bodyText": "Added.", "author": "melissa-barca", "createdAt": "2020-05-01T21:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MTE4MA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6c51cf9b7442ddfc2c911ac8e878e46f86e68fe4", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java\nindex 9f0092f10f..4a081bad92 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java\n", "chunk": "@@ -38,19 +36,16 @@ import org.rstudio.studio.client.workbench.views.source.editors.text.rmd.events.\n \n import com.google.gwt.core.client.JsArrayString;\n \n-public class ChunkContextUi implements ChunkContextToolbar.Host\n+public abstract class ChunkContextUi implements ChunkContextToolbar.Host\n {\n-   public ChunkContextUi(TextEditingTarget target, int renderPass, \n-         boolean dark, Scope chunk, PinnedLineWidget.Host lineWidgetHost)\n+   public ChunkContextUi(TextEditingTarget target, boolean dark, Scope chunk)\n    {\n       target_ = target;\n       chunk_ = chunk;\n       int preambleRow = chunk.getPreamble().getRow();\n       preambleRow_ = preambleRow;\n       isSetup_ = isSetupChunk(preambleRow);\n-      host_ = lineWidgetHost;\n       dark_ = dark;\n-      renderPass_ = renderPass;\n       engine_ = getEngine(preambleRow);\n       createToolbar(preambleRow);\n    }\n", "next_change": {"commit": "74b8b19fdc2106106bb05ef8614c9a52a2038f54", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java\nindex 4a081bad92..b118dc69ce 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUi.java\n", "chunk": "@@ -38,12 +38,15 @@ import com.google.gwt.core.client.JsArrayString;\n \n public abstract class ChunkContextUi implements ChunkContextToolbar.Host\n {\n-   public ChunkContextUi(TextEditingTarget target, boolean dark, Scope chunk)\n+   public ChunkContextUi(TextEditingTarget outerEditor, \n+                         Scope outerChunk,\n+                         DocDisplay innerEditor,\n+                         boolean dark)\n    {\n-      target_ = target;\n-      chunk_ = chunk;\n-      int preambleRow = chunk.getPreamble().getRow();\n-      preambleRow_ = preambleRow;\n+      outerEditor_ = outerEditor;\n+      outerChunk_ = outerChunk;\n+      innerEditor_ = innerEditor;\n+      int preambleRow = outerChunk.getPreamble().getRow();\n       isSetup_ = isSetupChunk(preambleRow);\n       dark_ = dark;\n       engine_ = getEngine(preambleRow);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "9ec1294303792984a14be38be95a03834b80ac84", "committedDate": "2020-05-30 18:19:43 -0700", "message": "Update the chunk widgets to use ClassId to manage their class names."}, {"oid": "2eb4b1840926ad98ed7c8f924c7be46e759b3c67", "committedDate": "2020-05-30 18:20:19 -0700", "message": "Merge pull request #7004 from rstudio/feature/cleanup-classes"}, {"oid": "6c51cf9b7442ddfc2c911ac8e878e46f86e68fe4", "committedDate": "2020-08-20 16:06:08 -0700", "message": "refactoring for drawing real chunk toolbars in visual mode"}, {"oid": "d6b74566495a7d9f256bd7d12ae3d2a0462202f1", "committedDate": "2020-08-24 16:24:50 -0700", "message": "use shared chunk execution toolbar"}, {"oid": "3f6804bd23e0eea4bd6e9fbccec60d5cc59985c2", "committedDate": "2020-08-25 16:24:24 -0700", "message": "ensure editor sync'ed before running chunks from toolbar"}, {"oid": "590b957e611898b98cfae51c11d7d970ab907544", "committedDate": "2020-08-26 10:21:41 -0700", "message": "clear definition when chunks are removed in visual mode"}, {"oid": "74b8b19fdc2106106bb05ef8614c9a52a2038f54", "committedDate": "2020-08-26 11:05:17 -0700", "message": "add support for editing chunk options via UI"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "ca311da5b1ab819312cfce7521c3a314d4ffd78e", "committedDate": "2021-06-06 09:55:38 -0400", "message": "initial work on qmd"}, {"oid": "4f1f30ecc605762a3f0208d40b9e97597801d37d", "committedDate": "2021-06-06 10:22:39 -0400", "message": "no options button in visual mode"}, {"oid": "bbf5295aa655968f27e990059ac09f802c7d24d1", "committedDate": "2021-06-07 13:36:14 -0400", "message": "remove qmd render work"}, {"oid": "e3c1eca5802d901b0ced605ae7700bbde848de96", "committedDate": "2021-06-07 13:39:51 -0400", "message": "qmd file type"}, {"oid": "931d598a4eadf130380853f6c9bdffd8ae241c55", "committedDate": "2021-09-22 14:27:52 -0700", "message": "declarative > imperative"}, {"oid": "966376000e308b92b47c2b84b6560d184b61b394", "committedDate": "2021-10-29 11:55:38 -0400", "message": "quarto render: prompt to install rmarkdown for knitr engine"}, {"oid": "65bc66bf8663a5eedecde8fba57e6aa835bde3c5", "committedDate": "2021-10-29 19:10:30 -0400", "message": "remove unused imports"}, {"oid": "2796e02ef717f802178653f645905a66af53413d", "committedDate": "2021-12-02 11:25:48 -0500", "message": "feat(i18n) workbench-views-source"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMTA0OQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418431049", "body": "I think you could re-use `chunkLabel` here. (I realize this is just coming up in the diff as part of the refactor but worth changing while you're in this code)", "bodyText": "I think you could re-use chunkLabel here. (I realize this is just coming up in the diff as part of the refactor but worth changing while you're in this code)", "bodyHTML": "<p dir=\"auto\">I think you could re-use <code>chunkLabel</code> here. (I realize this is just coming up in the diff as part of the refactor but worth changing while you're in this code)</p>", "author": "kevinushey", "createdAt": "2020-05-01T06:14:29Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java", "diffHunk": "@@ -194,9 +162,9 @@ else if (modeId == \"mode/rhtml\")\n       String extracted = match.getGroup(1);\n       chunkPreamble_ = extractChunkPreamble(extracted, modeId);\n       \n-      String chunkLabel = extractChunkLabel(extracted);\n+      String chunkLabel = ChunkContextUi.extractChunkLabel(extracted);\n       if (!StringUtil.isNullOrEmpty(chunkLabel))\n-         tbChunkLabel_.setText(extractChunkLabel(extracted));\n+         tbChunkLabel_.setText(ChunkContextUi.extractChunkLabel(extracted));", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NDc5MA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418754790", "bodyText": "You're right, I fixed this.", "author": "melissa-barca", "createdAt": "2020-05-01T21:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2c3d219fba5b56f32f6d0fa0b0c0c47a46ccc59f", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\nindex 822d1ff619..f0a49dd7b0 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\n", "chunk": "@@ -164,7 +164,7 @@ public class DefaultChunkOptionsPopupPanel extends ChunkOptionsPopupPanel\n       \n       String chunkLabel = ChunkContextUi.extractChunkLabel(extracted);\n       if (!StringUtil.isNullOrEmpty(chunkLabel))\n-         tbChunkLabel_.setText(ChunkContextUi.extractChunkLabel(extracted));\n+         tbChunkLabel_.setText(chunkLabel);\n       \n       // if we had a chunk label, then we want to navigate our cursor to\n       // the first comma in the chunk header; otherwise, we start at the\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\nindex 822d1ff619..f0a49dd7b0 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\n", "chunk": "@@ -164,7 +164,7 @@ public class DefaultChunkOptionsPopupPanel extends ChunkOptionsPopupPanel\n       \n       String chunkLabel = ChunkContextUi.extractChunkLabel(extracted);\n       if (!StringUtil.isNullOrEmpty(chunkLabel))\n-         tbChunkLabel_.setText(ChunkContextUi.extractChunkLabel(extracted));\n+         tbChunkLabel_.setText(chunkLabel);\n       \n       // if we had a chunk label, then we want to navigate our cursor to\n       // the first comma in the chunk header; otherwise, we start at the\n", "next_change": {"commit": "044e91ed6731f42b4acf91396b3d5a3215e794f4", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\nindex f0a49dd7b0..e5eaa72852 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/display/DefaultChunkOptionsPopupPanel.java\n", "chunk": "@@ -153,19 +155,21 @@ public class DefaultChunkOptionsPopupPanel extends ChunkOptionsPopupPanel\n          pattern = RegexUtil.RE_SWEAVE_CHUNK_BEGIN;\n       else if (modeId == \"mode/rhtml\")\n          pattern = RegexUtil.RE_RHTML_CHUNK_BEGIN;\n-      \n+      else if (modeId == \"mode/r\")\n+         pattern = RegexUtil.RE_EMBEDDED_R_CHUNK_BEGIN;\n+\n       if (pattern == null) return;\n-      \n+\n       Match match = pattern.match(line,  0);\n       if (match == null) return;\n-      \n+\n       String extracted = match.getGroup(1);\n       chunkPreamble_ = extractChunkPreamble(extracted, modeId);\n-      \n+\n       String chunkLabel = ChunkContextUi.extractChunkLabel(extracted);\n       if (!StringUtil.isNullOrEmpty(chunkLabel))\n          tbChunkLabel_.setText(chunkLabel);\n-      \n+\n       // if we had a chunk label, then we want to navigate our cursor to\n       // the first comma in the chunk header; otherwise, we start at the\n       // first space. this is done to accept chunk headers of the form\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "74b8b19fdc2106106bb05ef8614c9a52a2038f54", "committedDate": "2020-08-26 11:05:17 -0700", "message": "add support for editing chunk options via UI"}, {"oid": "e8e1ad52dfda97ec5f0116e033e8d4efbd9db01e", "committedDate": "2020-08-26 15:57:56 -0700", "message": "code cleanup; avoid double unwrap of output"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "011d10e29dd1985701b8f53cf03c8df506702628", "committedDate": "2021-01-08 15:07:55 -0800", "message": "mechanical refactor, replace explicit type with <>"}, {"oid": "044e91ed6731f42b4acf91396b3d5a3215e794f4", "committedDate": "2021-02-15 16:50:31 -0800", "message": "trivial whitespace cleanup"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMTM1NA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418431354", "body": "nit: as a matter of style, I think it's better to either always include braces on each branch of an if-else, or to never include them. (Otherwise it's easy to miss things in a refactor)", "bodyText": "nit: as a matter of style, I think it's better to either always include braces on each branch of an if-else, or to never include them. (Otherwise it's easy to miss things in a refactor)", "bodyHTML": "<p dir=\"auto\">nit: as a matter of style, I think it's better to either always include braces on each branch of an if-else, or to never include them. (Otherwise it's easy to miss things in a refactor)</p>", "author": "kevinushey", "createdAt": "2020-05-01T06:16:13Z", "path": "src/gwt/src/org/rstudio/core/client/StringUtil.java", "diffHunk": "@@ -944,6 +944,40 @@ public static String getExtension(String string)\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an 'x'.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with 'x'\n+      Pattern pattern =\n+         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      if (pattern.test(string))", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NTYzMQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418755631", "bodyText": "Hm, I tend to disagree with this. I try to write if statements so that the one liners are on top and rely on that to make them stand out.", "author": "melissa-barca", "createdAt": "2020-05-01T21:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "8cd475fc736aaa38ec192704ca69987327977119", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..0c8575854b 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -950,13 +950,12 @@ public class StringUtil\n       // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n       // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n       // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an 'x'.\n+      // If an invalid character is found, it is replaced with an underscore.\n       \n \n       // return the string if it's already valid,\n-      // otherwise replace invalid characters with 'x'\n-      Pattern pattern =\n-         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n       if (pattern.test(string))\n          return string;\n       else\n", "next_change": {"commit": "5878318a3dba42ca24508ec4d4a5a98e49eaa3ab", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 0c8575854b..62bb67461f 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -955,7 +955,7 @@ public class StringUtil\n \n       // return the string if it's already valid,\n       // otherwise replace invalid characters with '_'\n-      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n       if (pattern.test(string))\n          return string;\n       else\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex fed0a2a9a0..898d8260f0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -950,13 +950,12 @@ public class StringUtil\n       // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n       // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n       // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an 'x'.\n+      // If an invalid character is found, it is replaced with an underscore.\n       \n \n       // return the string if it's already valid,\n-      // otherwise replace invalid characters with 'x'\n-      Pattern pattern =\n-         Pattern.create(\"(^[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)|(^-[a-zA-Z][a-zA-Z0-9\\\\-\\\\_]+$)\");\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n       if (pattern.test(string))\n          return string;\n       else\n", "next_change": {"commit": "2486824b9a3ab4bdde679840f08089a057c19621", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 898d8260f0..433bc104c6 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,39 +944,6 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n-   public static String getCssIdentifier(String string)\n-   {\n-      // Each character must be one of the following:\n-      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n-      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n-      // This implementation considers escaped characters invalid.\n-      // If an invalid character is found, it is replaced with an underscore.\n-      \n-\n-      // return the string if it's already valid,\n-      // otherwise replace invalid characters with '_'\n-      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n-      if (pattern.test(string))\n-         return string;\n-      else\n-      {\n-         StringBuilder builder = new StringBuilder();\n-         for (int i = 0; i < string.length(); i++)\n-         {\n-            char c = string.charAt(i);\n-            if (c == '_' ||\n-                c > 0x00A0 ||\n-                (c >= 'a' && c <= 'z') ||\n-                (c >= 'A' && c <= 'Z') ||\n-                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n-               builder.append(c);\n-            else\n-               builder.append(\"_\");\n-         }\n-         return builder.toString();\n-      }\n-   }\n-\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": {"commit": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/core/client/StringUtil.java b/src/gwt/src/org/rstudio/core/client/StringUtil.java\nindex 433bc104c6..d8b283f5c0 100644\n--- a/src/gwt/src/org/rstudio/core/client/StringUtil.java\n+++ b/src/gwt/src/org/rstudio/core/client/StringUtil.java\n", "chunk": "@@ -944,6 +947,39 @@ public class StringUtil\n       return getExtension(string, 1);\n    }\n    \n+   public static String getCssIdentifier(String string)\n+   {\n+      // Each character must be one of the following:\n+      // alphanumeric, an ISO 10646 character U+00A0 or higher, a hyphen, or an underscore.\n+      // Identifiers cannot start with a hyphen, two hyphens, or a hyphen followed by a digit.\n+      // This implementation considers escaped characters invalid.\n+      // If an invalid character is found, it is replaced with an underscore.\n+      \n+\n+      // return the string if it's already valid,\n+      // otherwise replace invalid characters with '_'\n+      Pattern pattern = Pattern.create(\"(^-?[a-zA-Z_][a-zA-Z0-9\\\\-_]+$)\");\n+      if (pattern.test(string))\n+         return string;\n+      else\n+      {\n+         StringBuilder builder = new StringBuilder();\n+         for (int i = 0; i < string.length(); i++)\n+         {\n+            char c = string.charAt(i);\n+            if (c == '_' ||\n+                c > 0x00A0 ||\n+                (c >= 'a' && c <= 'z') ||\n+                (c >= 'A' && c <= 'Z') ||\n+                (i > 0 && (c == '-' || (c >= '0' && c <= '9'))))\n+               builder.append(c);\n+            else\n+               builder.append(\"_\");\n+         }\n+         return builder.toString();\n+      }\n+   }\n+\n    public static String getToken(String string,\n                                  int pos,\n                                  String tokenRegex,\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "2486824b9a3ab4bdde679840f08089a057c19621", "committedDate": "2020-02-04 14:21:14 -0800", "message": "Merge branch 'master' into v1.4"}, {"oid": "045f07b934e43730b5c868f0de04676df9d6970e", "committedDate": "2020-03-18 16:13:12 -0400", "message": "more work on image dialog"}, {"oid": "87090095e526eb4cab3e4eb7d4eb724d52f9976a", "committedDate": "2020-04-13 16:38:23 -0700", "message": "add option for natural sorting in files pane"}, {"oid": "4591ba2a25006dc882d3b9c585beba5fda866d76", "committedDate": "2020-04-13 18:09:12 -0700", "message": "mechanical cleanup of some minor whitespace and Java styles"}, {"oid": "da44ab4454851a7992c7b74767a8fba3feb1db32", "committedDate": "2020-04-14 11:20:43 -0700", "message": "Merge pull request #6658 from rstudio/feature/natural-sort-order"}, {"oid": "93d7ddbb75cb1134476b13c83874a07b571f6e6c", "committedDate": "2020-05-04 13:13:13 -0500", "message": "Merge branch 'v1.3-patch'"}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "27d18e1f2dd168c7a4ff79294d365a3c572f8d2d", "committedDate": "2020-09-11 16:28:22 -0700", "message": "Fix JDK11 deprecation warnings when building GWT"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "4c850461da1058e0e87f949773d065e0b5088370", "committedDate": "2021-09-23 15:25:58 -0400", "message": "initial plumbing for yaml completions"}, {"oid": "8da2687ece359ed8cf85ca192d90383f27d749f0", "committedDate": "2021-11-16 12:11:14 -0500", "message": "feat(i18n):i18n-ify org.rstudio.core"}, {"oid": "ebcb2a7470a4cffe032b01b3c875b727c0e48379", "committedDate": "2021-11-16 12:11:15 -0500", "message": "feat(i18n):refactor properties and interface name to reflect package name"}, {"oid": "84ccc115504736428d5fa67ed9daccd2a76afbdf", "committedDate": "2021-11-22 11:58:58 -0500", "message": "fix(i18n): Implement PR changes; remove i18n from asserts and debug statements; Implement placeholders."}, {"oid": "3734e8c18ae2e9dc9afc5e9722f0e12aafafdc12", "committedDate": "2021-11-24 19:00:14 -0500", "message": "fix(i18n): Resolve PR requested changes"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "bb888d2a7838cf149b7f8b52a541ce9624f2c4ab", "committedDate": "2022-01-26 09:53:21 -0500", "message": "improved yaml completion filter"}, {"oid": "833fbf9ab538fc2b164800c0dd61c05bc00944f2", "committedDate": "2022-04-13 11:02:20 -0700", "message": "handle sequencing of setPendingQuit callback (#10964)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}, {"oid": "94769c0e0be9c13dff8001e40b06eb3f8545791a", "committedDate": "2022-10-04 09:35:43 -0700", "message": "optimize handling of console output / errors (#12077)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMjQwNw==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418432407", "body": "nit: GWT element objects should have a `setId()` method, which does the same thing here but is more succinct", "bodyText": "nit: GWT element objects should have a setId() method, which does the same thing here but is more succinct", "bodyHTML": "<p dir=\"auto\">nit: GWT element objects should have a <code>setId()</code> method, which does the same thing here but is more succinct</p>", "author": "kevinushey", "createdAt": "2020-05-01T06:20:56Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java", "diffHunk": "@@ -106,6 +107,12 @@ public void setEngine(String engine)\n       chunkTypeLabel_.setText(engine);\n    }\n    \n+   public void setId(String id)\n+   {\n+      this.getElement().setPropertyString(\"id\",", "originalCommit": "a9e6141045be99413d4c57a442a22f29ac775f09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NTA4Ng==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418755086", "bodyText": "Ah, good to know. In the latest version this function no longer exists :)", "author": "melissa-barca", "createdAt": "2020-05-01T21:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMjQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "8cd475fc736aaa38ec192704ca69987327977119", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex 4f558e74e4..a1d7d3c037 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -107,10 +107,21 @@ public class ChunkContextToolbar extends Composite\n       chunkTypeLabel_.setText(engine);\n    }\n    \n-   public void setId(String id)\n+   public void setLabelClass(String value)\n    {\n-      this.getElement().setPropertyString(\"id\",\n-                                          StringUtil.getCssIdentifier(id));\n+      if (!value.startsWith(CHUNK_CLASS_PREFIX))\n+         value = new String(CHUNK_CLASS_PREFIX + value);\n+      value = StringUtil.getCssIdentifier(value);\n+\n+      if (value != label_)\n+      {\n+         // if we've already added a label style, remove it\n+         if (!StringUtil.isNullOrEmpty(label_))\n+            this.removeStyleName(label_);\n+\n+         label_ = value;\n+         this.addStyleName(label_);\n+      }\n    }\n \n    // Private methods ---------------------------------------------------------\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex 4f558e74e4..abb7f48f4c 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -107,10 +107,21 @@ public class ChunkContextToolbar extends Composite\n       chunkTypeLabel_.setText(engine);\n    }\n    \n-   public void setId(String id)\n+   public void setLabelClass(String value)\n    {\n-      this.getElement().setPropertyString(\"id\",\n-                                          StringUtil.getCssIdentifier(id));\n+      if (!value.startsWith(CHUNK_CLASS_PREFIX))\n+         value = new String(CHUNK_CLASS_PREFIX + value);\n+      value = StringUtil.getCssIdentifier(value);\n+\n+      if (!StringUtil.equals(value, label_))\n+      {\n+         // if we've already added a label style, remove it\n+         if (!StringUtil.isNullOrEmpty(label_))\n+            this.removeStyleName(label_);\n+\n+         label_ = value;\n+         this.addStyleName(label_);\n+      }\n    }\n \n    // Private methods ---------------------------------------------------------\n", "next_change": {"commit": "9ec1294303792984a14be38be95a03834b80ac84", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex abb7f48f4c..96fd82c0f5 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -107,20 +108,21 @@ public class ChunkContextToolbar extends Composite\n       chunkTypeLabel_.setText(engine);\n    }\n    \n-   public void setLabelClass(String value)\n+   public void setClassId(String value)\n    {\n-      if (!value.startsWith(CHUNK_CLASS_PREFIX))\n-         value = new String(CHUNK_CLASS_PREFIX + value);\n-      value = StringUtil.getCssIdentifier(value);\n+      if (StringUtil.isNullOrEmpty(value))\n+         value = ClassIds.CHUNK;\n+      else if (!value.startsWith(ClassIds.CHUNK))\n+         value = new String(ClassIds.CHUNK + \"_\" + ClassIds.idSafeString(value));\n \n-      if (!StringUtil.equals(value, label_))\n+      // The class ID will change if the Chunk's name changes so we need to remove any previous\n+      // class id set here.\n+      if (!StringUtil.equals(value, classId_))\n       {\n-         // if we've already added a label style, remove it\n-         if (!StringUtil.isNullOrEmpty(label_))\n-            this.removeStyleName(label_);\n-\n-         label_ = value;\n-         this.addStyleName(label_);\n+         if (!StringUtil.isNullOrEmpty(classId_))\n+            ClassIds.removeClassId(this, classId_);\n+         classId_ = value;\n+         ClassIds.assignClassId(this, classId_);\n       }\n    }\n \n", "next_change": {"commit": "044e91ed6731f42b4acf91396b3d5a3215e794f4", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex 96fd82c0f5..668308f816 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -127,7 +127,7 @@ public class ChunkContextToolbar extends Composite\n    }\n \n    // Private methods ---------------------------------------------------------\n-   \n+\n    private void initOptions(boolean dark)\n    {\n       options_.setResource(new ImageResource2x(\n", "next_change": {"commit": "ca311da5b1ab819312cfce7521c3a314d4ffd78e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex 668308f816..040056487c 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -125,6 +125,11 @@ public class ChunkContextToolbar extends Composite\n          ClassIds.assignClassId(this, classId_);\n       }\n    }\n+   \n+   public void setShowOptions(boolean show)\n+   {\n+      options_.setVisible(show);\n+   }\n \n    // Private methods ---------------------------------------------------------\n \n", "next_change": {"commit": "bbf5295aa655968f27e990059ac09f802c7d24d1", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex 040056487c..668308f816 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -125,11 +125,6 @@ public class ChunkContextToolbar extends Composite\n          ClassIds.assignClassId(this, classId_);\n       }\n    }\n-   \n-   public void setShowOptions(boolean show)\n-   {\n-      options_.setVisible(show);\n-   }\n \n    // Private methods ---------------------------------------------------------\n \n", "next_change": {"commit": "e3c1eca5802d901b0ced605ae7700bbde848de96", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\nindex 668308f816..040056487c 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextToolbar.java\n", "chunk": "@@ -125,6 +125,11 @@ public class ChunkContextToolbar extends Composite\n          ClassIds.assignClassId(this, classId_);\n       }\n    }\n+   \n+   public void setShowOptions(boolean show)\n+   {\n+      options_.setVisible(show);\n+   }\n \n    // Private methods ---------------------------------------------------------\n \n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "9ec1294303792984a14be38be95a03834b80ac84", "committedDate": "2020-05-30 18:19:43 -0700", "message": "Update the chunk widgets to use ClassId to manage their class names."}, {"oid": "2eb4b1840926ad98ed7c8f924c7be46e759b3c67", "committedDate": "2020-05-30 18:20:19 -0700", "message": "Merge pull request #7004 from rstudio/feature/cleanup-classes"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "044e91ed6731f42b4acf91396b3d5a3215e794f4", "committedDate": "2021-02-15 16:50:31 -0800", "message": "trivial whitespace cleanup"}, {"oid": "ca311da5b1ab819312cfce7521c3a314d4ffd78e", "committedDate": "2021-06-06 09:55:38 -0400", "message": "initial work on qmd"}, {"oid": "bbf5295aa655968f27e990059ac09f802c7d24d1", "committedDate": "2021-06-07 13:36:14 -0400", "message": "remove qmd render work"}, {"oid": "e3c1eca5802d901b0ced605ae7700bbde848de96", "committedDate": "2021-06-07 13:39:51 -0400", "message": "qmd file type"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"oid": "8cd475fc736aaa38ec192704ca69987327977119", "url": "https://github.com/rstudio/rstudio/commit/8cd475fc736aaa38ec192704ca69987327977119", "message": "fix chunk output label bug and improve code\n- replace invalid characters with _ instead of x\n- set chunks class with the label instead of id\n- fix issue where output labels weren't always refreshed", "committedDate": "2020-05-01T20:16:53Z", "type": "commit"}, {"oid": "5878318a3dba42ca24508ec4d4a5a98e49eaa3ab", "url": "https://github.com/rstudio/rstudio/commit/5878318a3dba42ca24508ec4d4a5a98e49eaa3ab", "message": "add chunk label unit tests", "committedDate": "2020-05-01T21:46:24Z", "type": "commit"}, {"oid": "525fa399e8d60ebe91efa3952fc3cb449a4c10c6", "url": "https://github.com/rstudio/rstudio/commit/525fa399e8d60ebe91efa3952fc3cb449a4c10c6", "message": "update copyright dates", "committedDate": "2020-05-01T21:50:50Z", "type": "commit"}, {"oid": "2c3d219fba5b56f32f6d0fa0b0c0c47a46ccc59f", "url": "https://github.com/rstudio/rstudio/commit/2c3d219fba5b56f32f6d0fa0b0c0c47a46ccc59f", "message": "use variable instead of recalling function", "committedDate": "2020-05-01T21:55:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NTAyOQ==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418755029", "body": "Nit: this needs indent fixed (should be 3 spaces)", "bodyText": "Nit: this needs indent fixed (should be 3 spaces)", "bodyHTML": "<p dir=\"auto\">Nit: this needs indent fixed (should be 3 spaces)</p>", "author": "jmcphers", "createdAt": "2020-05-01T21:56:40Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -242,6 +244,26 @@ public int getState()\n       return state_;\n    }\n \n+   public void setLabelClass(String value)\n+   {\n+      // ensure value has the correct prefix\n+      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n+               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +", "originalCommit": "525fa399e8d60ebe91efa3952fc3cb449a4c10c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODIyNg==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418778226", "bodyText": "Fixed", "author": "melissa-barca", "createdAt": "2020-05-01T23:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NTAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f4f60f41dac749a117a0404ac024439c6545ecca", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex db274ef595..f99ac1d27d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -248,12 +248,12 @@ public class ChunkOutputWidget extends Composite\n    {\n       // ensure value has the correct prefix\n       if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                                  CHUNK_OUTPUT_PREFIX +\n-                                  value);\n+         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                            CHUNK_OUTPUT_PREFIX +\n+                            value);\n       value = StringUtil.getCssIdentifier(value);\n \n-      if (value != label_)\n+      if (!StringUtil.equals(value, label_))\n       {\n          // if we've already added a label style, remove it\n          if (!StringUtil.isNullOrEmpty(label_))\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex db274ef595..f99ac1d27d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -248,12 +248,12 @@ public class ChunkOutputWidget extends Composite\n    {\n       // ensure value has the correct prefix\n       if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                                  CHUNK_OUTPUT_PREFIX +\n-                                  value);\n+         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                            CHUNK_OUTPUT_PREFIX +\n+                            value);\n       value = StringUtil.getCssIdentifier(value);\n \n-      if (value != label_)\n+      if (!StringUtil.equals(value, label_))\n       {\n          // if we've already added a label style, remove it\n          if (!StringUtil.isNullOrEmpty(label_))\n", "next_change": {"commit": "9ec1294303792984a14be38be95a03834b80ac84", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex f99ac1d27d..5285722e7d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -244,23 +244,21 @@ public class ChunkOutputWidget extends Composite\n       return state_;\n    }\n \n-   public void setLabelClass(String value)\n+   public void setClassId(String value)\n    {\n-      // ensure value has the correct prefix\n-      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                            CHUNK_OUTPUT_PREFIX +\n-                            value);\n-      value = StringUtil.getCssIdentifier(value);\n+      if (StringUtil.isNullOrEmpty(value))\n+         value = ClassIds.CHUNK;\n+      else if (!value.startsWith(ClassIds.CHUNK_OUTPUT))\n+         value = new String(ClassIds.CHUNK_OUTPUT + \"_\" + ClassIds.idSafeString(value));\n \n-      if (!StringUtil.equals(value, label_))\n+      // The class ID will change if the Chunk's name changes so we need to clear any previous\n+      // class ids set here.\n+      if (!StringUtil.equals(ClassIds.idSafeString(value), classId_))\n       {\n-         // if we've already added a label style, remove it\n-         if (!StringUtil.isNullOrEmpty(label_))\n-            this.removeStyleName(label_);\n-\n-         label_ = value;\n-         this.addStyleName(label_);\n+         if (!StringUtil.isNullOrEmpty(classId_))\n+            ClassIds.removeClassId(this, classId_);\n+         classId_ = value;\n+         ClassIds.assignClassId(this, classId_);\n       }\n    }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "9ec1294303792984a14be38be95a03834b80ac84", "committedDate": "2020-05-30 18:19:43 -0700", "message": "Update the chunk widgets to use ClassId to manage their class names."}, {"oid": "2eb4b1840926ad98ed7c8f924c7be46e759b3c67", "committedDate": "2020-05-30 18:20:19 -0700", "message": "Merge pull request #7004 from rstudio/feature/cleanup-classes"}, {"oid": "3d90b2d61d1c2cc4f38c9c34bde30f6b216840e5", "committedDate": "2020-06-03 11:32:48 -0700", "message": "refactor Console-related events into single-file format"}, {"oid": "6a4496ce6325f59f796455f05f05acdd4e82f2dd", "committedDate": "2020-08-10 20:45:45 -0700", "message": "refactor chunk output for hosting in visual mode"}, {"oid": "21016bc5e93db4a569f83455d8e67f8a073f83b9", "committedDate": "2020-08-11 17:55:34 -0400", "message": "render html after chunk output"}, {"oid": "e4dad9a9d8ae75ef0f2fec61d274b18ee388d3f6", "committedDate": "2020-08-14 11:07:18 -0700", "message": "size chunk output naturally in visual mode"}, {"oid": "f6526a2ea57ee13358bd2c805c3e0597d0bd4ead", "committedDate": "2020-08-28 12:32:26 -0400", "message": "update parameters, pass chunkcode to callback, create callback iframe under chunk output"}, {"oid": "4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "committedDate": "2020-09-09 15:57:53 -0400", "message": "improve error handling and variable names"}, {"oid": "91788fc36e0be55b2d41fb55fe6bfe72f6a73d1b", "committedDate": "2020-09-16 18:56:12 -0400", "message": "Merge branch 'master' into feature/chunk-grading"}, {"oid": "3c3ee0a0cb0bd9187b25f78f4aab9490983e6756", "committedDate": "2020-09-21 14:50:01 -0700", "message": "use inverted images rather than CSS to theme chunk icons"}, {"oid": "5da39a6f066ec42b7a82c002ec29f17e46fc36f7", "committedDate": "2020-10-09 14:39:19 -0700", "message": "use normal font size for chunk outputs in visual mode"}, {"oid": "0e9ad2ffcf3cb2eb70f601d5a0bddce2bec89a44", "committedDate": "2020-10-13 18:07:18 -0400", "message": "forward wheel events from chunk callback output to ace editor"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "011d10e29dd1985701b8f53cf03c8df506702628", "committedDate": "2021-01-08 15:07:55 -0800", "message": "mechanical refactor, replace explicit type with <>"}, {"oid": "d4031398f170bf323a56c080d0fb8bc7028970c4", "committedDate": "2021-09-21 09:26:05 -0400", "message": "synchronize pm-ace-has-output on visibility change"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d306f84dc59835cea76d9b7e71a5cff015df246d", "committedDate": "2022-03-28 15:19:18 -0700", "message": "Move where events are added on chunks to maintain scrolling fix on pages (#10852)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NTUzNw==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418755537", "body": "Nit: use StringUtil.equal for comparing strings. Believe it or not GWT has made breaking changes in `str1 == str2` in the past (in particular when one of them is null, it can throw an exception). ", "bodyText": "Nit: use StringUtil.equal for comparing strings. Believe it or not GWT has made breaking changes in str1 == str2 in the past (in particular when one of them is null, it can throw an exception).", "bodyHTML": "<p dir=\"auto\">Nit: use StringUtil.equal for comparing strings. Believe it or not GWT has made breaking changes in <code>str1 == str2</code> in the past (in particular when one of them is null, it can throw an exception).</p>", "author": "jmcphers", "createdAt": "2020-05-01T21:58:16Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -242,6 +244,26 @@ public int getState()\n       return state_;\n    }\n \n+   public void setLabelClass(String value)\n+   {\n+      // ensure value has the correct prefix\n+      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n+               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                                  CHUNK_OUTPUT_PREFIX +\n+                                  value);\n+      value = StringUtil.getCssIdentifier(value);\n+\n+      if (value != label_)", "originalCommit": "525fa399e8d60ebe91efa3952fc3cb449a4c10c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4f60f41dac749a117a0404ac024439c6545ecca", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex db274ef595..f99ac1d27d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -248,12 +248,12 @@ public class ChunkOutputWidget extends Composite\n    {\n       // ensure value has the correct prefix\n       if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                                  CHUNK_OUTPUT_PREFIX +\n-                                  value);\n+         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                            CHUNK_OUTPUT_PREFIX +\n+                            value);\n       value = StringUtil.getCssIdentifier(value);\n \n-      if (value != label_)\n+      if (!StringUtil.equals(value, label_))\n       {\n          // if we've already added a label style, remove it\n          if (!StringUtil.isNullOrEmpty(label_))\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex db274ef595..f99ac1d27d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -248,12 +248,12 @@ public class ChunkOutputWidget extends Composite\n    {\n       // ensure value has the correct prefix\n       if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-               value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                                  CHUNK_OUTPUT_PREFIX +\n-                                  value);\n+         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n+                            CHUNK_OUTPUT_PREFIX +\n+                            value);\n       value = StringUtil.getCssIdentifier(value);\n \n-      if (value != label_)\n+      if (!StringUtil.equals(value, label_))\n       {\n          // if we've already added a label style, remove it\n          if (!StringUtil.isNullOrEmpty(label_))\n", "next_change": {"commit": "9ec1294303792984a14be38be95a03834b80ac84", "changed_code": [{"header": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\nindex f99ac1d27d..5285722e7d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java\n", "chunk": "@@ -244,23 +244,21 @@ public class ChunkOutputWidget extends Composite\n       return state_;\n    }\n \n-   public void setLabelClass(String value)\n+   public void setClassId(String value)\n    {\n-      // ensure value has the correct prefix\n-      if (!value.startsWith(ChunkContextToolbar.CHUNK_CLASS_PREFIX + CHUNK_OUTPUT_PREFIX))\n-         value = new String(ChunkContextToolbar.CHUNK_CLASS_PREFIX +\n-                            CHUNK_OUTPUT_PREFIX +\n-                            value);\n-      value = StringUtil.getCssIdentifier(value);\n+      if (StringUtil.isNullOrEmpty(value))\n+         value = ClassIds.CHUNK;\n+      else if (!value.startsWith(ClassIds.CHUNK_OUTPUT))\n+         value = new String(ClassIds.CHUNK_OUTPUT + \"_\" + ClassIds.idSafeString(value));\n \n-      if (!StringUtil.equals(value, label_))\n+      // The class ID will change if the Chunk's name changes so we need to clear any previous\n+      // class ids set here.\n+      if (!StringUtil.equals(ClassIds.idSafeString(value), classId_))\n       {\n-         // if we've already added a label style, remove it\n-         if (!StringUtil.isNullOrEmpty(label_))\n-            this.removeStyleName(label_);\n-\n-         label_ = value;\n-         this.addStyleName(label_);\n+         if (!StringUtil.isNullOrEmpty(classId_))\n+            ClassIds.removeClassId(this, classId_);\n+         classId_ = value;\n+         ClassIds.assignClassId(this, classId_);\n       }\n    }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "9ec1294303792984a14be38be95a03834b80ac84", "committedDate": "2020-05-30 18:19:43 -0700", "message": "Update the chunk widgets to use ClassId to manage their class names."}, {"oid": "2eb4b1840926ad98ed7c8f924c7be46e759b3c67", "committedDate": "2020-05-30 18:20:19 -0700", "message": "Merge pull request #7004 from rstudio/feature/cleanup-classes"}, {"oid": "3d90b2d61d1c2cc4f38c9c34bde30f6b216840e5", "committedDate": "2020-06-03 11:32:48 -0700", "message": "refactor Console-related events into single-file format"}, {"oid": "6a4496ce6325f59f796455f05f05acdd4e82f2dd", "committedDate": "2020-08-10 20:45:45 -0700", "message": "refactor chunk output for hosting in visual mode"}, {"oid": "21016bc5e93db4a569f83455d8e67f8a073f83b9", "committedDate": "2020-08-11 17:55:34 -0400", "message": "render html after chunk output"}, {"oid": "e4dad9a9d8ae75ef0f2fec61d274b18ee388d3f6", "committedDate": "2020-08-14 11:07:18 -0700", "message": "size chunk output naturally in visual mode"}, {"oid": "f6526a2ea57ee13358bd2c805c3e0597d0bd4ead", "committedDate": "2020-08-28 12:32:26 -0400", "message": "update parameters, pass chunkcode to callback, create callback iframe under chunk output"}, {"oid": "4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "committedDate": "2020-09-09 15:57:53 -0400", "message": "improve error handling and variable names"}, {"oid": "91788fc36e0be55b2d41fb55fe6bfe72f6a73d1b", "committedDate": "2020-09-16 18:56:12 -0400", "message": "Merge branch 'master' into feature/chunk-grading"}, {"oid": "3c3ee0a0cb0bd9187b25f78f4aab9490983e6756", "committedDate": "2020-09-21 14:50:01 -0700", "message": "use inverted images rather than CSS to theme chunk icons"}, {"oid": "5da39a6f066ec42b7a82c002ec29f17e46fc36f7", "committedDate": "2020-10-09 14:39:19 -0700", "message": "use normal font size for chunk outputs in visual mode"}, {"oid": "0e9ad2ffcf3cb2eb70f601d5a0bddce2bec89a44", "committedDate": "2020-10-13 18:07:18 -0400", "message": "forward wheel events from chunk callback output to ace editor"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "011d10e29dd1985701b8f53cf03c8df506702628", "committedDate": "2021-01-08 15:07:55 -0800", "message": "mechanical refactor, replace explicit type with <>"}, {"oid": "d4031398f170bf323a56c080d0fb8bc7028970c4", "committedDate": "2021-09-21 09:26:05 -0400", "message": "synchronize pm-ace-has-output on visibility change"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d306f84dc59835cea76d9b7e71a5cff015df246d", "committedDate": "2022-03-28 15:19:18 -0700", "message": "Move where events are added on chunks to maintain scrolling fix on pages (#10852)"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjgyOA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418756828", "body": "Let's add a couple more here to increase code coverage -- maybe one in which there's no label, and another in which there are no options?\r\n\r\n```\r\n{r echo=TRUE}\r\n{r thisisalabel}\r\n```", "bodyText": "Let's add a couple more here to increase code coverage -- maybe one in which there's no label, and another in which there are no options?\n{r echo=TRUE}\n{r thisisalabel}", "bodyHTML": "<p dir=\"auto\">Let's add a couple more here to increase code coverage -- maybe one in which there's no label, and another in which there are no options?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{r echo=TRUE}\n{r thisisalabel}\"><pre><code>{r echo=TRUE}\n{r thisisalabel}\n</code></pre></div>", "author": "jmcphers", "createdAt": "2020-05-01T22:02:31Z", "path": "src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * ChunkContextUiTests.java\n+ *\n+ * Copyright (C) 2009-20 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.workbench.views.source.editors.text.rmd;\n+\n+import com.google.gwt.junit.client.GWTTestCase;\n+\n+\n+public class ChunkContextUiTests extends GWTTestCase\n+{\n+   @Override\n+   public String getModuleName()\n+   {\n+      return \"org.rstudio.studio.RStudioTests\";\n+   }\n+   \n+   public void testExtractChunkLabel()", "originalCommit": "525fa399e8d60ebe91efa3952fc3cb449a4c10c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODE4OA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418778188", "bodyText": "Updated", "author": "melissa-barca", "createdAt": "2020-05-01T23:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NjgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "f4f60f41dac749a117a0404ac024439c6545ecca", "changed_code": [{"header": "diff --git a/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java b/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java\nindex 29a9b5a46e..afff621cbb 100644\n--- a/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java\n+++ b/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java\n", "chunk": "@@ -27,8 +30,15 @@ public class ChunkContextUiTests extends GWTTestCase\n    \n    public void testExtractChunkLabel()\n    {\n-      String input = \"```{r testingChunks, echo=FALSE}\";\n-      String result = ChunkContextUi.extractChunkLabel(input);\n-      assertTrue(result.equals(\"testingChunks\"));\n+      List<Pair<String, String>> testList = new ArrayList<>();\n+      testList.add(new Pair<>(\"```{r echo=FALSE}\",        \"\"));\n+      testList.add(new Pair<>(\"```{r testingChunks}\",        \"testingChunks\"));\n+      testList.add(new Pair<>(\"```{r testingChunks, echo=FALSE}\",        \"testingChunks\"));\n+\n+      for (Pair<String, String> td  : testList)\n+      {\n+         String result = ChunkContextUi.extractChunkLabel(td.first);\n+         assertTrue(result.equals(td.second));\n+      }\n    }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java b/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java\nindex 29a9b5a46e..afff621cbb 100644\n--- a/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java\n+++ b/src/gwt/test/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/ChunkContextUiTests.java\n", "chunk": "@@ -27,8 +30,15 @@ public class ChunkContextUiTests extends GWTTestCase\n    \n    public void testExtractChunkLabel()\n    {\n-      String input = \"```{r testingChunks, echo=FALSE}\";\n-      String result = ChunkContextUi.extractChunkLabel(input);\n-      assertTrue(result.equals(\"testingChunks\"));\n+      List<Pair<String, String>> testList = new ArrayList<>();\n+      testList.add(new Pair<>(\"```{r echo=FALSE}\",        \"\"));\n+      testList.add(new Pair<>(\"```{r testingChunks}\",        \"testingChunks\"));\n+      testList.add(new Pair<>(\"```{r testingChunks, echo=FALSE}\",        \"testingChunks\"));\n+\n+      for (Pair<String, String> td  : testList)\n+      {\n+         String result = ChunkContextUi.extractChunkLabel(td.first);\n+         assertTrue(result.equals(td.second));\n+      }\n    }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NzQ3NA==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418757474", "body": "Nit: I think this might be frustrating to update since you have to remember to increase the pass count here whenever you add a pass below. How about just putting the input/expected values in arrays, and looping over the arrays?", "bodyText": "Nit: I think this might be frustrating to update since you have to remember to increase the pass count here whenever you add a pass below. How about just putting the input/expected values in arrays, and looping over the arrays?", "bodyHTML": "<p dir=\"auto\">Nit: I think this might be frustrating to update since you have to remember to increase the pass count here whenever you add a pass below. How about just putting the input/expected values in arrays, and looping over the arrays?</p>", "author": "jmcphers", "createdAt": "2020-05-01T22:04:37Z", "path": "src/gwt/test/org/rstudio/core/client/StringUtilTests.java", "diffHunk": "@@ -238,6 +238,40 @@ public void testConciseElapsedTime()\n       assertEquals(\"2:02:01:01\", days);\n    }\n   \n+   public void testGetCssIdentifier()\n+   {\n+      for (int pass = 0; pass < 5; pass++)", "originalCommit": "525fa399e8d60ebe91efa3952fc3cb449a4c10c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODE1Mw==", "url": "https://github.com/rstudio/rstudio/pull/6787#discussion_r418778153", "bodyText": "Updated!", "author": "melissa-barca", "createdAt": "2020-05-01T23:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1NzQ3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f4f60f41dac749a117a0404ac024439c6545ecca", "changed_code": [{"header": "diff --git a/src/gwt/test/org/rstudio/core/client/StringUtilTests.java b/src/gwt/test/org/rstudio/core/client/StringUtilTests.java\nindex 5a42c3c13c..f8a7a4c461 100644\n--- a/src/gwt/test/org/rstudio/core/client/StringUtilTests.java\n+++ b/src/gwt/test/org/rstudio/core/client/StringUtilTests.java\n", "chunk": "@@ -240,35 +242,17 @@ public class StringUtilTests extends GWTTestCase\n   \n    public void testGetCssIdentifier()\n    {\n-      for (int pass = 0; pass < 5; pass++)\n+      List<Pair<String, String>> testList = new ArrayList<>();\n+      testList.add(new Pair<>(\"4abc_bad\",        \"_abc_bad\"));\n+      testList.add(new Pair<>(\"--verybad\",       \"_-verybad\"));\n+      testList.add(new Pair<>(\"-2badagain?\",     \"_2badagain_\"));\n+      testList.add(new Pair<>(\"great342_-\u21b2\",     \"great342_-\u21b2\"));\n+      testList.add(new Pair<>(\"-_perfectlyfine\", \"-_perfectlyfine\"));\n+\n+      for (Pair<String, String> td  : testList)\n       {\n-         String input, expected, result;\n-         switch (pass) {\n-            case 0:\n-               input = \"-_perfectlyfine\";\n-               expected = input;\n-               break;\n-            case 1:\n-               input = \"--verybad\";\n-               expected = \"_-verybad\";\n-               break;\n-            case 2:\n-               input = \"-2badagain?\";\n-               expected = \"_2badagain_\";\n-               break;\n-            case 3:\n-               input = \"great342_-\u21b2\";\n-               expected = input;\n-               break;\n-            case 4:\n-               input = \"4abc_bad\";\n-               expected = \"_abc_bad\";\n-               break;\n-            default:\n-               input = expected  = \"\";\n-         }\n-         result = StringUtil.getCssIdentifier(input);\n-         assertTrue(StringUtil.equals(expected, result));\n+         String result = StringUtil.getCssIdentifier(td.first);\n+         assertTrue(StringUtil.equals(td.second, result));\n       }\n    }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "changed_code": [{"header": "diff --git a/src/gwt/test/org/rstudio/core/client/StringUtilTests.java b/src/gwt/test/org/rstudio/core/client/StringUtilTests.java\nindex 5a42c3c13c..f8a7a4c461 100644\n--- a/src/gwt/test/org/rstudio/core/client/StringUtilTests.java\n+++ b/src/gwt/test/org/rstudio/core/client/StringUtilTests.java\n", "chunk": "@@ -240,35 +242,17 @@ public class StringUtilTests extends GWTTestCase\n   \n    public void testGetCssIdentifier()\n    {\n-      for (int pass = 0; pass < 5; pass++)\n+      List<Pair<String, String>> testList = new ArrayList<>();\n+      testList.add(new Pair<>(\"4abc_bad\",        \"_abc_bad\"));\n+      testList.add(new Pair<>(\"--verybad\",       \"_-verybad\"));\n+      testList.add(new Pair<>(\"-2badagain?\",     \"_2badagain_\"));\n+      testList.add(new Pair<>(\"great342_-\u21b2\",     \"great342_-\u21b2\"));\n+      testList.add(new Pair<>(\"-_perfectlyfine\", \"-_perfectlyfine\"));\n+\n+      for (Pair<String, String> td  : testList)\n       {\n-         String input, expected, result;\n-         switch (pass) {\n-            case 0:\n-               input = \"-_perfectlyfine\";\n-               expected = input;\n-               break;\n-            case 1:\n-               input = \"--verybad\";\n-               expected = \"_-verybad\";\n-               break;\n-            case 2:\n-               input = \"-2badagain?\";\n-               expected = \"_2badagain_\";\n-               break;\n-            case 3:\n-               input = \"great342_-\u21b2\";\n-               expected = input;\n-               break;\n-            case 4:\n-               input = \"4abc_bad\";\n-               expected = \"_abc_bad\";\n-               break;\n-            default:\n-               input = expected  = \"\";\n-         }\n-         result = StringUtil.getCssIdentifier(input);\n-         assertTrue(StringUtil.equals(expected, result));\n+         String result = StringUtil.getCssIdentifier(td.first);\n+         assertTrue(StringUtil.equals(td.second, result));\n       }\n    }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "ac094f7dbeaae6cc3d4fc0c794b95e763387815e", "message": "Merge commit", "committedDate": null}, {"oid": "3fdda38e9a78a984a25c44e1672cf0869fad19cd", "committedDate": "2020-05-20 14:18:03 -0700", "message": "bulk update copyright dates for 2020"}, {"oid": "ddcd7191ec89c4da00e77afae7e9f27e61e87c36", "committedDate": "2021-01-03 21:03:43 -0800", "message": "bulk update copyright dates to 2021"}, {"oid": "8f85b6b8ed4e7db1ac167b2007d17e26c947e4fd", "committedDate": "2022-01-03 16:05:46 -0800", "message": "bump copyright to 2022"}, {"oid": "d48ff068d8c84716fc5836df19abeb8f44175f7b", "committedDate": "2022-09-13 13:22:13 -0400", "message": "Update copyright to Posit"}, {"oid": "fdfd3c23cf2889f5553cfc1ed49091b6d9d03430", "committedDate": "2022-09-13 13:22:15 -0400", "message": "Posit Software PBC"}, {"oid": "5ecd209673e476549955cc5c8b2f636269c61712", "committedDate": "2022-09-15 10:45:30 -0400", "message": "more rebranding copyright update"}]}, {"oid": "f4f60f41dac749a117a0404ac024439c6545ecca", "url": "https://github.com/rstudio/rstudio/commit/f4f60f41dac749a117a0404ac024439c6545ecca", "message": "improve unit tests", "committedDate": "2020-05-01T23:26:31Z", "type": "commit"}]}