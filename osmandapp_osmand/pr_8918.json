{"pr_number": 8918, "pr_title": "custom poi types cache db", "pr_author": "veliymolfar", "pr_createdAt": "2020-05-08T08:29:11Z", "pr_url": "https://github.com/osmandapp/OsmAnd/pull/8918", "merge_commit": "392d69dd66278e9a6417c03c03e7496a64554773", "timeline": [{"oid": "c02a7820fa41f1d5cc30f0e52015cd33be9a41ba", "url": "https://github.com/osmandapp/OsmAnd/commit/c02a7820fa41f1d5cc30f0e52015cd33be9a41ba", "message": "custom poi types cache db", "committedDate": "2020-05-08T08:29:36Z", "type": "commit"}, {"oid": "bb6980ff2db59b24dde5795532292b1cd57b6ae7", "url": "https://github.com/osmandapp/OsmAnd/commit/bb6980ff2db59b24dde5795532292b1cd57b6ae7", "message": "corrections", "committedDate": "2020-05-12T13:16:43Z", "type": "commit"}, {"oid": "165d1430e3e081d8b76c6a34bab6428647836861", "url": "https://github.com/osmandapp/OsmAnd/commit/165d1430e3e081d8b76c6a34bab6428647836861", "message": "refactor PoiHelper", "committedDate": "2020-05-12T14:39:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMTU4NA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425001584", "body": "Bad class naming, couldn't be part of PoiFiltersDBHelper and same db?", "bodyText": "Bad class naming, couldn't be part of PoiFiltersDBHelper and same db?", "bodyHTML": "<p dir=\"auto\">Bad class naming, couldn't be part of PoiFiltersDBHelper and same db?</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:33:43Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMjQ0NQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425002445", "body": "Bad link, Helpers/Serice connected to OsmAndApplication shouldn't use LocalIndexInfo/LocalIndexHelper which are UI classes at all. Static methods are also bad", "bodyText": "Bad link, Helpers/Serice connected to OsmAndApplication shouldn't use LocalIndexInfo/LocalIndexHelper which are UI classes at all. Static methods are also bad", "bodyHTML": "<p dir=\"auto\">Bad link, Helpers/Serice connected to OsmAndApplication shouldn't use LocalIndexInfo/LocalIndexHelper which are UI classes at all. Static methods are also bad</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:35:15Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMzA2MQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425003061", "body": "Shouldn't be async cause initialization of all maps is already async and it should be part of map initialization processes", "bodyText": "Shouldn't be async cause initialization of all maps is already async and it should be part of map initialization processes", "bodyHTML": "<p dir=\"auto\">Shouldn't be async cause initialization of all maps is already async and it should be part of map initialization processes</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:36:12Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwMzc4NA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425003784", "body": "BinaryMapIndexReader shouldn't use at all MapPoiTypes, looks like it was bad design from previous request.", "bodyText": "BinaryMapIndexReader shouldn't use at all MapPoiTypes, looks like it was bad design from previous request.", "bodyHTML": "<p dir=\"auto\">BinaryMapIndexReader shouldn't use at all MapPoiTypes, looks like it was bad design from previous request.</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:37:29Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {\n+\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n+\t\tfiles.clear();\n+\t\thelper.deleteFilesTable();\n+\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\tFile f = new File(info.getPathToData());\n+\t\t\thelper.addFile(f);\n+\t\t\tfiles.put(f.getName(), f.lastModified());\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate void initCategoriesFromFiles() {\n+\t\tapp.getPoiTypes().clearCreatedCategories();\n+\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n+\t\tfor (BinaryMapIndexReader r : currentFile) {\n+\t\t\ttry {\n+\t\t\t\tr.initCategories();", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNDc2Mg==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425004762", "body": "Bad naming - createdCategories?", "bodyText": "Bad naming - createdCategories?", "bodyHTML": "<p dir=\"auto\">Bad naming - createdCategories?</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:39:11Z", "path": "OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java", "diffHunk": "@@ -33,6 +33,7 @@\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n+\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzg5OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425007899", "bodyText": "This is not used at all, only temporarily to build new categories.", "author": "vshcherb", "createdAt": "2020-05-14T09:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNDc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex ef2e05d851..00f254c816 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n", "chunk": "@@ -33,7 +33,6 @@ public class MapPoiTypes {\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n-\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();\n \tprivate PoiCategory otherCategory;\n \tprivate PoiCategory otherMapCategory;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex ef2e05d851..00f254c816 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n", "chunk": "@@ -33,7 +33,6 @@ public class MapPoiTypes {\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n-\tprivate List<PoiCategory> createdCategories = new ArrayList<PoiCategory>();\n \tprivate PoiCategory otherCategory;\n \tprivate PoiCategory otherMapCategory;\n \n", "next_change": {"commit": "88a6d620803e19538e39cf24023c3c941a8dc307", "changed_code": [{"header": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex 00f254c816..4199abee89 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n", "chunk": "@@ -29,6 +29,7 @@ import java.util.TreeSet;\n \n \n public class MapPoiTypes {\n+\tprivate static final String OTHER_MAP_CATEGORY = \"Other\";\n \tprivate static MapPoiTypes DEFAULT_INSTANCE = null;\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n", "next_change": {"commit": "c20e096cdade8332c11e2c1114e68e999f196b57", "changed_code": [{"header": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex 4199abee89..be3644ab90 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n", "chunk": "@@ -34,6 +35,7 @@ public class MapPoiTypes {\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n+\tprivate Set<String> forbiddenKeyNames = new HashSet<>();\n \tprivate PoiCategory otherCategory;\n \tprivate PoiCategory otherMapCategory;\n \n", "next_change": {"commit": "b2fb7e7cfbf0ffe65ec4fbd06c91cb0a6e9d8b8d", "changed_code": [{"header": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex be3644ab90..f535af8610 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n", "chunk": "@@ -35,13 +35,14 @@ public class MapPoiTypes {\n \tprivate static final Log log = PlatformUtil.getLog(MapRenderingTypes.class);\n \tprivate String resourceName;\n \tprivate List<PoiCategory> categories = new ArrayList<PoiCategory>();\n-\tprivate Set<String> forbiddenKeyNames = new HashSet<>();\n+\tprivate Set<String> forbiddenTypes = new HashSet<>();\n \tprivate PoiCategory otherCategory;\n \tprivate PoiCategory otherMapCategory;\n \n \tpublic static final String WIKI_LANG = \"wiki_lang\";\n \tpublic static final String WIKI_PLACE = \"wiki_place\";\n \tpublic static final String OSM_WIKI_CATEGORY = \"osmwiki\";\n+\tpublic static final String SPEED_CAMERA = \"speed_camera\";\n \n \tprivate PoiTranslator poiTranslator = null;\n \tprivate boolean init;\n", "next_change": {"commit": "4949106c102b87425f427f1c80de8cecb4b06057", "changed_code": [{"header": "diff --git a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\nindex f535af8610..97aace3c25 100644\n--- a/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n+++ b/OsmAnd-java/src/main/java/net/osmand/osm/MapPoiTypes.java\n", "chunk": "@@ -44,6 +44,12 @@ public class MapPoiTypes {\n \tpublic static final String OSM_WIKI_CATEGORY = \"osmwiki\";\n \tpublic static final String SPEED_CAMERA = \"speed_camera\";\n \n+\tpublic static final String ROUTE_ARTICLE = \"route_article\";\n+\tpublic static final String ROUTE_ARTICLE_POINT = \"route_article_point\";\n+\tpublic static final String CATEGORY = \"category\";\n+\tpublic static final String ROUTE_TRACK = \"route_track\";\n+\tpublic static final String ROUTE_TRACK_POINT = \"route_track_point\";\n+\n \tprivate PoiTranslator poiTranslator = null;\n \tprivate boolean init;\n \tMap<String, PoiType> poiTypesByTag = new LinkedHashMap<String, PoiType>();\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}, {"oid": "43ba5d203f2ad210a35614d46576384b8549b689", "committedDate": "2020-05-20 12:15:07 +0300", "message": "Fix ConcurrentModificationException"}, {"oid": "49d346771cb8f824f32014da5a9cb3a4815761f7", "committedDate": "2020-05-20 12:33:10 +0300", "message": "Fix ConcurrentModificationException"}, {"oid": "0b5db53bc569b3b4a6cd09ef84c74a3dcc9b0d19", "committedDate": "2020-05-20 14:01:14 +0300", "message": "Fix ConcurrentModificationException"}, {"oid": "62c114f36e728ba6354bb36d4dc66f832e7afaf6", "committedDate": "2020-05-20 14:10:07 +0300", "message": "Fix ConcurrentModificationException"}, {"oid": "88a6d620803e19538e39cf24023c3c941a8dc307", "committedDate": "2020-05-22 14:58:05 +0200", "message": "Fix map poi types"}, {"oid": "61fe550b52adda8333dbbb069b406689ebd40eee", "committedDate": "2020-05-23 10:47:05 +0200", "message": "Fix concurrent modification exception on start"}, {"oid": "6cb52d9130df9829e7c5752d653ec4a38f91c99e", "committedDate": "2020-06-10 18:25:34 +0300", "message": "hide speed cameras poiTypes"}, {"oid": "1dd909b115972032b906cc698125970639f13a76", "committedDate": "2020-06-16 18:28:35 +0300", "message": "refactoring pr"}, {"oid": "05ffbdffaaca8fd0cb498fd28e487bf1989c028c", "committedDate": "2020-06-18 12:29:59 +0300", "message": "refactor speed camera restriction"}, {"oid": "c20e096cdade8332c11e2c1114e68e999f196b57", "committedDate": "2020-06-19 10:07:46 +0300", "message": "refactor speed cameras hiding"}, {"oid": "b2fb7e7cfbf0ffe65ec4fbd06c91cb0a6e9d8b8d", "committedDate": "2020-06-20 11:05:28 +0300", "message": "Refactor names"}, {"oid": "63f06c3d39319a7bb547f2f180db13648a3fa379", "committedDate": "2020-10-18 12:52:16 +0300", "message": "[bug] category names in user defined search converted to lowercase"}, {"oid": "2ab0c034c7bd469248d821165cb5d64fc2ef9df4", "committedDate": "2021-03-16 10:04:45 +0200", "message": "Fix #5958"}, {"oid": "4949106c102b87425f427f1c80de8cecb4b06057", "committedDate": "2021-10-12 17:49:42 +0300", "message": "Travel routes - fix types, added points"}, {"oid": "de044d1b92abd4eee4bcba149baa7779a6cf4956", "committedDate": "2021-10-16 21:00:38 +0300", "message": "Hide travel routes in search and poi overlay"}, {"oid": "cab92d512add7db286ac5746c8175476da556f1e", "committedDate": "2021-10-25 13:58:36 +0300", "message": "Fix wikipedia translations"}, {"oid": "f9201db00fe20ee3143917d6810c67a3e7b72ea1", "committedDate": "2021-11-25 18:23:33 +0300", "message": "Added all languages suffix for wikipedia category"}, {"oid": "172004633066c22fb56a8cfc7d616e86d6676821", "committedDate": "2022-01-25 00:39:20 +0500", "message": "Fix tag autocomplete #13532"}, {"oid": "9ddfabc74d9a13dac222fa292c8c05310607a93b", "committedDate": "2022-01-28 02:37:07 +0500", "message": "Fix tag autocomplete in OSM editing #10390"}, {"oid": "75934f80018d331a000e684950b7cc0ac2b4b705", "committedDate": "2022-06-02 20:20:52 +0300", "message": "Fix opengl animations"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNjI3NQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425006275", "body": "Wrong table design ", "bodyText": "Wrong table design", "bodyHTML": "<p dir=\"auto\">Wrong table design</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:41:30Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {\n+\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n+\t\tfiles.clear();\n+\t\thelper.deleteFilesTable();\n+\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\tFile f = new File(info.getPathToData());\n+\t\t\thelper.addFile(f);\n+\t\t\tfiles.put(f.getName(), f.lastModified());\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate void initCategoriesFromFiles() {\n+\t\tapp.getPoiTypes().clearCreatedCategories();\n+\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n+\t\tfor (BinaryMapIndexReader r : currentFile) {\n+\t\t\ttry {\n+\t\t\t\tr.initCategories();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n+\t\t\t}\n+\t\t}\n+\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n+\t}\n+\n+\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n+\t\tcategories.clear();\n+\t\thelper.deletePoiTypesTable();\n+\t\tfor (PoiCategory category : poiCategories) {\n+\t\t\thelper.addCategory(category);\n+\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n+\t\t}\n+\t\thelper.close();\n+\t}\n+\n+\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n+\t\tList<String> filters = new ArrayList<>();\n+\t\tfor (PoiType poiType : poiTypeList) {\n+\t\t\tfilters.add(poiType.getKeyName());\n+\t\t}\n+\t\treturn filters;\n+\t}\n+\n+\tpublic class PoiDbHelper {\n+\n+\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n+\t\tprivate static final int DATABASE_VERSION = 1;\n+\n+\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n+\t\tprivate static final String FILE_NAME = \"name\";\n+\t\tprivate static final String FILE_DATE = \"date\";\n+\n+\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n+\t\t\t\tFILES_TABLE_NAME + \" (\" +", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNzU3OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425007579", "body": "Probably this is not needed at all.", "bodyText": "Probably this is not needed at all.", "bodyHTML": "<p dir=\"auto\">Probably this is not needed at all.</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:43:32Z", "path": "OsmAnd/src/net/osmand/plus/AppInitializer.java", "diffHunk": "@@ -550,6 +539,7 @@ public void onCreateApplication() {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n+\t\tapp.poiHelper = startupInit(new PoiHelper(app), PoiHelper.class);", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex b4e108db79..379e2e7486 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -539,7 +546,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n-\t\tapp.poiHelper = startupInit(new PoiHelper(app), PoiHelper.class);\n \n \n \t\tinitOpeningHoursParser();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex b4e108db79..670d83510d 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -539,7 +462,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n-\t\tapp.poiHelper = startupInit(new PoiHelper(app), PoiHelper.class);\n \n \n \t\tinitOpeningHoursParser();\n", "next_change": {"commit": "291bed500b0a50dffa3c765d4452d212cedeb077", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 670d83510d..226d8b65db 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -462,7 +467,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n-\n+\t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "e130c12ab083bee557fec6d762418825dc206443", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 226d8b65db..8f13681d69 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -459,11 +458,14 @@ public class AppInitializer implements IProgress {\n \t\tapp.mapMarkersHelper = startupInit(new MapMarkersHelper(app), MapMarkersHelper.class);\n \t\tapp.searchUICore = startupInit(new QuickSearchHelper(app), QuickSearchHelper.class);\n \t\tapp.mapViewTrackingUtilities = startupInit(new MapViewTrackingUtilities(app), MapViewTrackingUtilities.class);\n-\t\tapp.travelDbHelper = new TravelDbHelper(app);\n+\n+\t\t//TODO cleanup after Travel migration complete\n+\t\tapp.travelHelper = TravelObfHelper.checkIfObfFileExists(app) ? new TravelObfHelper(app) : new TravelDbHelper(app);\n \t\tif (app.getSettings().SELECTED_TRAVEL_BOOK.get() != null) {\n-\t\t\tapp.travelDbHelper.initTravelBooks();\n+\t\t\tapp.travelHelper.initTravelBooks();\n \t\t}\n-\t\tapp.travelDbHelper = startupInit(app.travelDbHelper, TravelDbHelper.class);\n+\t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n+\n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n", "next_change": {"commit": "a2123755b7f9a67b28d85952b8a36382b8d74844", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 8f13681d69..3a75558fe5 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -459,11 +458,9 @@ public class AppInitializer implements IProgress {\n \t\tapp.searchUICore = startupInit(new QuickSearchHelper(app), QuickSearchHelper.class);\n \t\tapp.mapViewTrackingUtilities = startupInit(new MapViewTrackingUtilities(app), MapViewTrackingUtilities.class);\n \n-\t\t//TODO cleanup after Travel migration complete\n-\t\tapp.travelHelper = TravelObfHelper.checkIfObfFileExists(app) ? new TravelObfHelper(app) : new TravelDbHelper(app);\n-\t\tif (app.getSettings().SELECTED_TRAVEL_BOOK.get() != null) {\n-\t\t\tapp.travelHelper.initTravelBooks();\n-\t\t}\n+\t\t// TODOTRAVEL_OBF_HELPER check ResourceManager and use TravelObfHelper\n+\t\tapp.travelHelper = new TravelDbHelper(app);\n+\t\tapp.travelHelper.initializeDataOnAppStartup();\n \t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n \n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n", "next_change": {"commit": "11aeaef2c5a2e80c734c20f62dce28d1765ddda5", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 3a75558fe5..ecbd2293df 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -459,7 +460,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.mapViewTrackingUtilities = startupInit(new MapViewTrackingUtilities(app), MapViewTrackingUtilities.class);\n \n \t\t// TODOTRAVEL_OBF_HELPER check ResourceManager and use TravelObfHelper\n-\t\tapp.travelHelper = new TravelDbHelper(app);\n+\t\tapp.travelHelper = new TravelObfHelper(app); //new TravelDbHelper(app);\n \t\tapp.travelHelper.initializeDataOnAppStartup();\n \t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n \n", "next_change": {"commit": "621a18f1e49be5c5e408630a2614bee387618c1d", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex ecbd2293df..7bcbc5f1d5 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -460,7 +460,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.mapViewTrackingUtilities = startupInit(new MapViewTrackingUtilities(app), MapViewTrackingUtilities.class);\n \n \t\t// TODOTRAVEL_OBF_HELPER check ResourceManager and use TravelObfHelper\n-\t\tapp.travelHelper = new TravelObfHelper(app); //new TravelDbHelper(app);\n+\t\tapp.travelHelper = TravelObfHelper.checkIfObfFileExists(app) ? new TravelObfHelper(app) : new TravelDbHelper(app);\n \t\tapp.travelHelper.initializeDataOnAppStartup();\n \t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n \n", "next_change": {"commit": "29a57dc562c6004bd632537c0c9742a3e7b45e87", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 7bcbc5f1d5..00b5d2dc80 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -460,7 +460,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.mapViewTrackingUtilities = startupInit(new MapViewTrackingUtilities(app), MapViewTrackingUtilities.class);\n \n \t\t// TODOTRAVEL_OBF_HELPER check ResourceManager and use TravelObfHelper\n-\t\tapp.travelHelper = TravelObfHelper.checkIfObfFileExists(app) ? new TravelObfHelper(app) : new TravelDbHelper(app);\n+\t\tapp.travelHelper = !TravelDbHelper.checkIfDbFileExists(app) ? new TravelObfHelper(app) : new TravelDbHelper(app);\n \t\tapp.travelHelper.initializeDataOnAppStartup();\n \t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n \n", "next_change": {"commit": "704b9ab2993690110e80b7f802cd10757f639c7f", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 00b5d2dc80..52b8cc89dc 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -461,7 +461,6 @@ public class AppInitializer implements IProgress {\n \n \t\t// TODOTRAVEL_OBF_HELPER check ResourceManager and use TravelObfHelper\n \t\tapp.travelHelper = !TravelDbHelper.checkIfDbFileExists(app) ? new TravelObfHelper(app) : new TravelDbHelper(app);\n-\t\tapp.travelHelper.initializeDataOnAppStartup();\n \t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n \n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n", "next_change": {"commit": "802221dbc11881aceb09f18b4c828036182b7637", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 52b8cc89dc..424855f2a0 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -467,6 +468,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n+\t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "43f326e320cba34dd1357187ba43eb60d07fc484", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 424855f2a0..065c7aba2e 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -468,6 +469,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n+\t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n \n \t\tinitOpeningHoursParser();\n", "next_change": {"commit": "9453a14fe458e0f6931f05b0cbf51f8140b40d45", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 065c7aba2e..13b3102c93 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -471,6 +472,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n+\t\tapp.localeHelper = startupInit(new LocaleHelper(app), LocaleHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "14ce40ddda771171e91a267b4dff1809853d1587", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 13b3102c93..065c7aba2e 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -472,7 +471,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n-\t\tapp.localeHelper = startupInit(new LocaleHelper(app), LocaleHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "7218e7d4b589529690a231d2995093ae285619f0", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 065c7aba2e..7d3afbffcd 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -471,6 +472,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n+\t\tapp.itineraryHelper = startupInit(new ItineraryHelper(app), ItineraryHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "1629183994dd862336fd662c2aadada794503296", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 7d3afbffcd..d5afd31937 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -473,6 +474,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n \t\tapp.itineraryHelper = startupInit(new ItineraryHelper(app), ItineraryHelper.class);\n+\t\tapp.backupHelper = startupInit(new BackupHelper(app), BackupHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "eefe1a00ac229ee39c10ab3becaa33eeb0e520db", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex d5afd31937..07bb9084e8 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -473,7 +472,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n-\t\tapp.itineraryHelper = startupInit(new ItineraryHelper(app), ItineraryHelper.class);\n \t\tapp.backupHelper = startupInit(new BackupHelper(app), BackupHelper.class);\n \n \t\tinitOpeningHoursParser();\n", "next_change": {"commit": "02702af774b05611beca943a2af9cf260ade6b1c", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 07bb9084e8..2c0a995423 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -467,7 +475,8 @@ public class AppInitializer implements IProgress {\n \t\tapp.travelHelper = startupInit(app.travelHelper, TravelHelper.class);\n \n \t\tapp.lockHelper = startupInit(new LockHelper(app), LockHelper.class);\n-\t\tapp.settingsHelper = startupInit(new SettingsHelper(app), SettingsHelper.class);\n+\t\tapp.fileSettingsHelper = startupInit(new FileSettingsHelper(app), FileSettingsHelper.class);\n+\t\tapp.networkSettingsHelper = startupInit(new NetworkSettingsHelper(app), NetworkSettingsHelper.class);\n \t\tapp.quickActionRegistry = startupInit(new QuickActionRegistry(app.getSettings()), QuickActionRegistry.class);\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n", "next_change": {"commit": "5a0041161db6ac3324b09ac439932a57071e7afe", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 2c0a995423..9bb767d2eb 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -481,7 +482,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n-\t\tapp.backupHelper = startupInit(new BackupHelper(app), BackupHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "457a43dfdbeefe1bfa552fd31d1bcd70fd86343f", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 9bb767d2eb..bb9e4bc273 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -482,6 +435,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.osmOAuthHelper = startupInit(new OsmOAuthHelper(app), OsmOAuthHelper.class);\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n+\t\tapp.launcherShortcutsHelper = startupInit(new LauncherShortcutsHelper(app), LauncherShortcutsHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "3b2c0a659619d5a629d6e941729440412f32e5e0", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex bb9e4bc273..c3062b1ea2 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -436,6 +444,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.oprAuthHelper = startupInit(new OprAuthHelper(app), OprAuthHelper.class);\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n \t\tapp.launcherShortcutsHelper = startupInit(new LauncherShortcutsHelper(app), LauncherShortcutsHelper.class);\n+\t\tapp.gpsFilterHelper = startupInit(new GpsFilterHelper(app), GpsFilterHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "9747dbd0be81009d4fb7bd4128f14f45357b636f", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex c3062b1ea2..5f73f568f4 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -445,6 +446,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.onlineRoutingHelper = startupInit(new OnlineRoutingHelper(app), OnlineRoutingHelper.class);\n \t\tapp.launcherShortcutsHelper = startupInit(new LauncherShortcutsHelper(app), LauncherShortcutsHelper.class);\n \t\tapp.gpsFilterHelper = startupInit(new GpsFilterHelper(app), GpsFilterHelper.class);\n+\t\tapp.downloadTilesHelper = startupInit(new DownloadTilesHelper(app), DownloadTilesHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "e4d0c456bfa14c86e977b86b174d1dd51b8b7921", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 5f73f568f4..afb57ae399 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -447,6 +456,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.launcherShortcutsHelper = startupInit(new LauncherShortcutsHelper(app), LauncherShortcutsHelper.class);\n \t\tapp.gpsFilterHelper = startupInit(new GpsFilterHelper(app), GpsFilterHelper.class);\n \t\tapp.downloadTilesHelper = startupInit(new DownloadTilesHelper(app), DownloadTilesHelper.class);\n+\t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "06b66709b6cf63f1a3e2b753a3b555c2aa095e53", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex afb57ae399..4e85accbe5 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -459,6 +469,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n \n \t\tinitOpeningHoursParser();\n+\t\tcheckOpenGlAvailable();\n \t}\n \n \tprivate void initOpeningHoursParser() {\n", "next_change": {"commit": "4ad0760ca0d2eaf549083bb8aeb136a2d1ce450c", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 4e85accbe5..7b568aaa31 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -469,7 +468,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n \n \t\tinitOpeningHoursParser();\n-\t\tcheckOpenGlAvailable();\n \t}\n \n \tprivate void initOpeningHoursParser() {\n", "next_change": {"commit": "6b6af17f5d96bbcc0d0a41cfbf93e0cb4536966d", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 7b568aaa31..d218801005 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -466,6 +356,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.gpsFilterHelper = startupInit(new GpsFilterHelper(app), GpsFilterHelper.class);\n \t\tapp.downloadTilesHelper = startupInit(new DownloadTilesHelper(app), DownloadTilesHelper.class);\n \t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n+\t\tapp.weatherHelper = startupInit(new WeatherHelper(app), WeatherHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "1048df9f7f2dc5337f93a20e10625e07b8e1c20c", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex d218801005..7691f22de2 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -356,7 +467,6 @@ public class AppInitializer implements IProgress {\n \t\tapp.gpsFilterHelper = startupInit(new GpsFilterHelper(app), GpsFilterHelper.class);\n \t\tapp.downloadTilesHelper = startupInit(new DownloadTilesHelper(app), DownloadTilesHelper.class);\n \t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n-\t\tapp.weatherHelper = startupInit(new WeatherHelper(app), WeatherHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "3b98e86f77fcbb34c5c7443b5799e8cac9cc3f12", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 7691f22de2..7f4bb734f4 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -467,6 +356,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.gpsFilterHelper = startupInit(new GpsFilterHelper(app), GpsFilterHelper.class);\n \t\tapp.downloadTilesHelper = startupInit(new DownloadTilesHelper(app), DownloadTilesHelper.class);\n \t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n+\t\tapp.weatherHelper = startupInit(new WeatherHelper(app), WeatherHelper.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": {"commit": "83b2b1546e607f9734cf8281141f83bf3adcbb76", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/AppInitializer.java b/OsmAnd/src/net/osmand/plus/AppInitializer.java\nindex 7f4bb734f4..b196fb6f2a 100644\n--- a/OsmAnd/src/net/osmand/plus/AppInitializer.java\n+++ b/OsmAnd/src/net/osmand/plus/AppInitializer.java\n", "chunk": "@@ -357,6 +364,7 @@ public class AppInitializer implements IProgress {\n \t\tapp.downloadTilesHelper = startupInit(new DownloadTilesHelper(app), DownloadTilesHelper.class);\n \t\tapp.averageSpeedComputer = startupInit(new AverageSpeedComputer(app), AverageSpeedComputer.class);\n \t\tapp.weatherHelper = startupInit(new WeatherHelper(app), WeatherHelper.class);\n+\t\tapp.dialogManager = startupInit(new DialogManager(), DialogManager.class);\n \n \t\tinitOpeningHoursParser();\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}, {"oid": "f5f971874f8bffbb6471d905f699874519957f4f", "committedDate": "2020-05-19 13:28:19 +0200", "message": "Move settings to backend"}, {"oid": "1eda59acc7a35cb9cd3bc7c30561fbce7bf396d2", "committedDate": "2020-05-19 16:22:41 +0300", "message": "Move ApplicationMode to settings package"}, {"oid": "30eac3412f9aff9204bd9addfa362f6a987114ce", "committedDate": "2020-05-25 15:45:36 +0300", "message": "Fix several possible exceptions"}, {"oid": "6f5a4d5bba7e627d7978a3f9baac19300479beaa", "committedDate": "2020-05-26 12:27:27 +0300", "message": "Fix possible npe"}, {"oid": "1dd909b115972032b906cc698125970639f13a76", "committedDate": "2020-06-16 18:28:35 +0300", "message": "refactoring pr"}, {"oid": "05ffbdffaaca8fd0cb498fd28e487bf1989c028c", "committedDate": "2020-06-18 12:29:59 +0300", "message": "refactor speed camera restriction"}, {"oid": "c20e096cdade8332c11e2c1114e68e999f196b57", "committedDate": "2020-06-19 10:07:46 +0300", "message": "refactor speed cameras hiding"}, {"oid": "b2fb7e7cfbf0ffe65ec4fbd06c91cb0a6e9d8b8d", "committedDate": "2020-06-20 11:05:28 +0300", "message": "Refactor names"}, {"oid": "8cb4accc00fde7b3fc0ae6a34c046c725dd6ea7e", "committedDate": "2020-09-10 18:08:49 +0300", "message": "Added release links to the start dialog"}, {"oid": "df56eaa22601332a5682a1da9654feee1ee8de47", "committedDate": "2020-09-28 14:15:29 +0300", "message": "WIP huawei subscriptions"}, {"oid": "2867736814b406309807724440bd6af34654ad37", "committedDate": "2020-10-07 23:08:57 +0300", "message": "refactor OsmandSettings remove Enum"}, {"oid": "9923430ac32b87fa9a1d82b0dbf4539d48995c03", "committedDate": "2020-10-14 23:03:28 +0300", "message": "Move settings items to separate files"}, {"oid": "7038e260299a8f4ad184a1f2d744388d3048a4e1", "committedDate": "2020-11-03 18:34:49 +0200", "message": "Move MapMarkersHelper to mapmarkers package"}, {"oid": "befffb651109480e5d19fe55a4ff3202301fdc8c", "committedDate": "2020-11-11 23:49:20 +0100", "message": "Fix #10148"}, {"oid": "291bed500b0a50dffa3c765d4452d212cedeb077", "committedDate": "2020-11-12 16:43:33 +0200", "message": "Add OsmOAuthHelper"}, {"oid": "ef08e0b3a0bb78e5dc7453562e1c9c98a8e3a37b", "committedDate": "2020-11-13 10:44:30 +0200", "message": "Merge branch 'master' into upload-poi-note"}, {"oid": "e130c12ab083bee557fec6d762418825dc206443", "committedDate": "2020-11-23 12:32:54 +0200", "message": "Wikivoyage to OBF migration: Work in progress."}, {"oid": "4ee33c3e7c3e712f868126c46eb57fa567d3cfeb", "committedDate": "2020-12-07 18:18:07 +0200", "message": "Added release notes for 3.9 release"}, {"oid": "950a9cc8f8660b3f3d750391ddc1429d5dc38b34", "committedDate": "2020-12-08 13:22:23 +0300", "message": "Drop waking navigation service on alarm"}, {"oid": "a2123755b7f9a67b28d85952b8a36382b8d74844", "committedDate": "2020-12-09 18:38:56 +0100", "message": "Refactor travel db helper and delete travel obf helper to start from scratch"}, {"oid": "11aeaef2c5a2e80c734c20f62dce28d1765ddda5", "committedDate": "2020-12-10 16:42:09 +0200", "message": "starting obf helper"}, {"oid": "621a18f1e49be5c5e408630a2614bee387618c1d", "committedDate": "2020-12-15 10:53:46 +0200", "message": "resourse manager travel repositories aded"}, {"oid": "29a57dc562c6004bd632537c0c9742a3e7b45e87", "committedDate": "2020-12-15 15:22:10 +0200", "message": "check db file exists added"}, {"oid": "704b9ab2993690110e80b7f802cd10757f639c7f", "committedDate": "2020-12-16 21:12:36 +0200", "message": "Fix obf helper"}, {"oid": "398724c9ffbca4279b0bebf0c1c30c87eff7801f", "committedDate": "2020-12-17 17:44:24 +0200", "message": "Fix bookmarks"}, {"oid": "c8accc9ca19c94f0ae0ee15dc19c2dc090da2ce4", "committedDate": "2020-12-21 15:45:39 +0200", "message": "Fix #10346 (4) don't save application mode like last used when navigation started"}, {"oid": "802221dbc11881aceb09f18b4c828036182b7637", "committedDate": "2020-12-30 22:56:50 +0200", "message": "Online Routing UI - Add / Delete / Save in settings"}, {"oid": "43f326e320cba34dd1357187ba43eb60d07fc484", "committedDate": "2021-02-03 13:22:20 +0200", "message": "Add OpenPlaceReviewsPlugin"}, {"oid": "9453a14fe458e0f6931f05b0cbf51f8140b40d45", "committedDate": "2021-02-10 12:49:42 +0500", "message": "Add restart button after settings import if language was changed"}, {"oid": "14ce40ddda771171e91a267b4dff1809853d1587", "committedDate": "2021-02-14 13:41:30 +0500", "message": "Refactor to lighten OsmandApplication"}, {"oid": "e1b7175919a1d0d63a36b2ab790ae3a48d6dffc3", "committedDate": "2021-02-14 12:55:50 +0200", "message": "Small fixes"}, {"oid": "39c1d6b7f97ac0b398fd76f8f4bc86545505a458", "committedDate": "2021-03-11 05:56:22 +0200", "message": "many fixes"}, {"oid": "7218e7d4b589529690a231d2995093ae285619f0", "committedDate": "2021-03-15 11:18:02 +0200", "message": "Create ItineraryHelper"}, {"oid": "a40f802a7a4f4c609422eef60197e2be42065e54", "committedDate": "2021-03-15 12:23:40 +0200", "message": "Move markerGroups to ItineraryHelper"}, {"oid": "b107c430dfb5e969b41959e2d46ad7ba86f14a07", "committedDate": "2021-03-15 18:38:41 +0200", "message": "Merge pull request #11078 from osmandapp/osmand_live"}, {"oid": "1629183994dd862336fd662c2aadada794503296", "committedDate": "2021-04-20 20:53:39 +0300", "message": "Finished backup test activity"}, {"oid": "cb18d45e43c68ebb67f60761d1020a1786030e58", "committedDate": "2021-04-21 15:05:31 +0300", "message": "Revert \"Move markerGroups to ItineraryHelper\""}, {"oid": "eefe1a00ac229ee39c10ab3becaa33eeb0e520db", "committedDate": "2021-04-21 15:07:18 +0300", "message": "Revert \"Create ItineraryHelper\""}, {"oid": "256d634cdb2b2af83bb299e5b12af05d88a674dc", "committedDate": "2021-04-22 05:01:58 +0300", "message": "Rename markersHelper and move fragments to separate packages"}, {"oid": "a2b6faf94af19befca65856ccda9367f7de1c483", "committedDate": "2021-04-22 12:47:26 +0300", "message": "Revert renaming"}, {"oid": "c2bce7eac8c12d6b1d21a33427df147526b9cec3", "committedDate": "2021-04-26 11:33:04 +0300", "message": "Read itinerary.gpx"}, {"oid": "1c028645dc27fb5c0be73da9be4194d66aaaa0e2", "committedDate": "2021-04-27 07:43:04 +0300", "message": "Small fixes"}, {"oid": "02702af774b05611beca943a2af9cf260ade6b1c", "committedDate": "2021-05-28 17:53:08 +0300", "message": "Backup refactoring done"}, {"oid": "5a0041161db6ac3324b09ac439932a57071e7afe", "committedDate": "2021-06-14 15:35:08 +0300", "message": "Fix possible npe"}, {"oid": "56af5a5711d22ecdb5d0f42ce4ddd2f1d8aa5d17", "committedDate": "2021-07-07 13:28:12 +0300", "message": "Added links to 4.0 release"}, {"oid": "3acdfbe5cb1d6e608d508254c58651350522a8b1", "committedDate": "2021-07-09 15:59:57 +0300", "message": "Separate plugins \"enable\" and \"functional\" states"}, {"oid": "251fc96bae623377aa452d2b6bfcebf6131ccde2", "committedDate": "2021-07-12 20:26:17 +0300", "message": "Merge branch 'master' into PromoPlugins"}, {"oid": "6de8e7fcfe7596a46c6458949dacc771eacb4558", "committedDate": "2021-07-13 13:18:27 +0300", "message": "Rename methods"}, {"oid": "d400e83f7e20dfc32432a278d5d2bf9fbb867e57", "committedDate": "2021-08-29 22:52:51 +0300", "message": "Remove some outdated classes and unused methods"}, {"oid": "3ada83ad37f39a12f11c290eddbc96e63abba116", "committedDate": "2021-09-08 20:00:46 +0300", "message": "MapActivity and map layers refactored"}, {"oid": "f41ef670a3a666ddb3477124e97673b93cef7fa5", "committedDate": "2021-09-16 23:32:15 +0300", "message": "[WIP] Travel routes"}, {"oid": "4557836c074a0e7af713bbc426684c4d3de55ea8", "committedDate": "2021-09-23 02:12:02 +0500", "message": "Adjust TTS commpand player constructor and delete excessive class field"}, {"oid": "3e52f027509b92af2b64ed5d326576b40fef849d", "committedDate": "2021-09-23 05:30:54 +0500", "message": "Don't interact with Prolog-related voice config files and delete Prolog from CommandPlayer"}, {"oid": "5396b52c85cc0610ea5adde7bb41b063b649b53c", "committedDate": "2021-09-23 14:41:19 +0500", "message": "Merge TTSCommandPlayerImpl.java into JSTTSCommandPlayerImpl.java"}, {"oid": "1339b79867c76d9cb5049b6184e1058a5f0dfc76", "committedDate": "2021-09-24 05:14:47 +0500", "message": "Refactor Command Players and their initialization"}, {"oid": "588aa66f622618bd7a132ea81c2a5e3abd745975", "committedDate": "2021-09-24 12:06:25 +0500", "message": "Merge CommandPlayer interface into abstract class"}, {"oid": "662d8d7cfdc1321ba5fd8970f614fb9c16538280", "committedDate": "2021-10-04 14:54:55 +0300", "message": "Fix start nav from search / favs (AA)"}, {"oid": "df2661d8e8824fbc7c4901a416e2845ce5cdab74", "committedDate": "2021-10-12 15:51:06 +0300", "message": "Added release notes for 4.1"}, {"oid": "457a43dfdbeefe1bfa552fd31d1bcd70fd86343f", "committedDate": "2021-10-17 20:07:58 +0500", "message": "Fix #6555 Add launcher shortcuts"}, {"oid": "97b947d7879b1c14cdb1902b6e4eb66d3ff4c1d1", "committedDate": "2021-10-19 10:09:53 +0300", "message": "Merge branch 'master' into launcher_icon_shortcuts"}, {"oid": "cab92d512add7db286ac5746c8175476da556f1e", "committedDate": "2021-10-25 13:58:36 +0300", "message": "Fix wikipedia translations"}, {"oid": "3b2c0a659619d5a629d6e941729440412f32e5e0", "committedDate": "2021-11-02 20:22:08 +0500", "message": "Implement GPX-file filtering and drawing"}, {"oid": "f9201db00fe20ee3143917d6810c67a3e7b72ea1", "committedDate": "2021-11-25 18:23:33 +0300", "message": "Added all languages suffix for wikipedia category"}, {"oid": "80a8ecf5eca79b575d8e0076edf77cd0f5700c49", "committedDate": "2021-12-06 15:57:54 +0200", "message": "Check missing assets on app start"}, {"oid": "d1d898aea3d8a7cf66557b4ca8cfb92d68d9dd9a", "committedDate": "2021-12-07 16:55:16 +0500", "message": "Move plugin-related packages and classes to `net.osmand.plus.plugins`"}, {"oid": "9d3b3654673094df903d4d0fa5ad3206cd148167", "committedDate": "2021-12-07 17:12:28 +0500", "message": "Move NotificationHelper to `net.osmand.plus.notifications`"}, {"oid": "7202eaf9cf3e387296eec396958050a15be9d171", "committedDate": "2021-12-07 17:16:43 +0500", "message": "Move CustomRegion, LocalIndexInfo, LocalIndexHelper to `net.osmand.plus.download`"}, {"oid": "cc8c1e88d5d0d5c285dfec240f0ba9c1e4051cce", "committedDate": "2021-12-07 17:25:34 +0500", "message": "Move FavouritesDbHelper, FavoritesListFragment to `net.osmand.plus.myplaces`"}, {"oid": "00f2e88c50e62ae2d7d4aa5dd1962d7060e4221f", "committedDate": "2021-12-07 23:56:08 +0500", "message": "Move DisplayPointsGroupsHelper, GPXDatabase, GpxDbHelper, SavingTrackHelper, TrackDisplayHelper, GpxSelectionHelper, FilteredSelectedGpxFile, GpsFilterHelper to `net.osmand.plus.track.helpers`"}, {"oid": "627bb304b81b036eaa833ced11de2ec2a25ed830", "committedDate": "2021-12-08 00:06:53 +0500", "message": "Move AnalyticsHelper, CurrentPositionHelper, LauncherShortcutsHelper, TargetPointsHelper, OsmandBackupAgent to `net.osmand.plus.helpers`"}, {"oid": "47a19dc1880f4fae81f19d428df344ce9c3f19df", "committedDate": "2021-12-08 00:22:33 +0500", "message": "Move AndroidNetworkUtils, AndroidUtils, ColorUtilities, FileUtils, JsonUtils, OsmAndFormatter, PicassoUtils, UiUtilities to `net.osmand.plus.utils`"}, {"oid": "ec1506c00298482cc66733de53b8c098fc1d956c", "committedDate": "2021-12-08 01:45:50 +0500", "message": "Merge branch 'master' into project_structure"}, {"oid": "2c64d5505b471d7e4fd6d84e06d02e5305de16c9", "committedDate": "2021-12-14 11:23:01 +0200", "message": "Add support for avoid road files"}, {"oid": "fd94a44a45d5e47a0a87a791dbb1391b88cd3b5b", "committedDate": "2022-02-02 19:52:30 +0200", "message": "Add api to get string from resources"}, {"oid": "9f907ffe7b4bd79e4894426fd4b15b14225a16d2", "committedDate": "2022-02-11 19:04:58 +0200", "message": "Remove deprecated sqlite db"}, {"oid": "a64110cf99bfa683ef6a462a40a98fd1642862c7", "committedDate": "2022-02-16 18:59:43 +0200", "message": "Add FavouritesFileHelper and move FavoriteGroup to separate file"}, {"oid": "9747dbd0be81009d4fb7bd4128f14f45357b636f", "committedDate": "2022-02-21 17:51:45 +0500", "message": "Add tiles downloading progress screen"}, {"oid": "6cfebcfc058515724f7ea1806fbb91a8208c6cfe", "committedDate": "2022-02-21 17:37:01 +0200", "message": "Merge branch 'master' into download_tiles_redesign"}, {"oid": "b9cc8491fb990d0120378de941be535004bdac20", "committedDate": "2022-04-25 16:18:31 +0300", "message": "Added release notes for 4.2 release"}, {"oid": "635d042fe98149c1ac063a2d16554b1e23554e0f", "committedDate": "2022-05-13 12:06:15 +0200", "message": "Add links separate file"}, {"oid": "ce68e645670c3eb2820fcc31f07415c1c46ab1fb", "committedDate": "2022-05-23 18:17:19 +0300", "message": "Change check for android auto availability"}, {"oid": "e4d0c456bfa14c86e977b86b174d1dd51b8b7921", "committedDate": "2022-05-31 10:47:23 +0500", "message": "Add Average speed widget #11721"}, {"oid": "4fd06a52b96163b0562cc973b9f2a9dbf2227413", "committedDate": "2022-06-13 18:18:15 +0500", "message": "Fix not building route from link on fresh app start"}, {"oid": "684da28582895319abc9bb18cca350764b3bbcc0", "committedDate": "2022-06-14 23:36:39 +0500", "message": "Change update frequency description"}, {"oid": "329a9a77fbda9fe71c83cb05d729194fbf5e81f5", "committedDate": "2022-06-15 15:57:08 +0500", "message": "Change Live update time description #13595"}, {"oid": "7dede62c0f78fdbcb95d91fec7807c845911c03e", "committedDate": "2022-06-15 16:49:20 +0500", "message": "Merge branch 'r4.2' into live_update"}, {"oid": "45af634f9df275026c09562eb3fae7b201e9b172", "committedDate": "2022-06-24 14:33:12 +0300", "message": "Add GpxDisplayHelper"}, {"oid": "f1dcc4d7206c501d152bced637217b65cc20ff84", "committedDate": "2022-07-15 22:09:41 +0300", "message": "Clean redundant fields initialisation"}, {"oid": "4e025d0ef6df0b52003b6aa39e6658b0a5dfa4a5", "committedDate": "2022-07-15 23:07:36 +0300", "message": "Remove unnecessary final modifier from local variables"}, {"oid": "a884326b2b12ec51652535defb89a02f2caebcfa", "committedDate": "2022-07-15 23:31:20 +0300", "message": "Remove unnecessary class name with use of 'this'"}, {"oid": "975a45d91264726cf25b013d9de9a65b02da8ccd", "committedDate": "2022-09-20 11:45:51 +0300", "message": "Move SavingTrackHelper to monitoring plugin"}, {"oid": "ebdb41a3a14c4c86f7029fbba224c3d03897a6fd", "committedDate": "2022-09-26 19:27:19 +0300", "message": "Fix IndexOutOfBoundsException"}, {"oid": "6ead04964f0cea586f14c52e2d5d3032173727e8", "committedDate": "2022-09-30 14:46:08 +0300", "message": "Move static plugin methods to separate file PluginsHelper"}, {"oid": "18e9d44bd2f26d299f396baed38beaf27c5bc4a6", "committedDate": "2022-11-01 15:59:55 +0200", "message": "Enable opengl by default and create LogsHelper"}, {"oid": "77f651e03a9316b61fffb76a30a2718ce27e2b2d", "committedDate": "2022-11-02 12:34:24 +0200", "message": "Switch rendering engines without restarting the app"}, {"oid": "ee60590b69bea1fa5af0e0438b621d31f0e4f42a", "committedDate": "2022-11-02 16:58:03 +0200", "message": "Review fix"}, {"oid": "06b66709b6cf63f1a3e2b753a3b555c2aa095e53", "committedDate": "2022-11-09 20:49:14 +0600", "message": "Disable OpenGL rendering and hide rendering engine setting screen if OpenGL is not available #15627"}, {"oid": "4ad0760ca0d2eaf549083bb8aeb136a2d1ce450c", "committedDate": "2022-11-11 22:35:50 +0600", "message": "Fix 06b66709b6"}, {"oid": "86ef874783628335dcac5300a8f119ea0bc6d1db", "committedDate": "2022-11-18 19:05:40 +0600", "message": "Fix crash #15755"}, {"oid": "6b6af17f5d96bbcc0d0a41cfbf93e0cb4536966d", "committedDate": "2022-11-25 01:33:56 +0200", "message": "Weather improvements first part"}, {"oid": "1048df9f7f2dc5337f93a20e10625e07b8e1c20c", "committedDate": "2022-11-28 09:26:08 +0100", "message": "Safeguard no libs present"}, {"oid": "3b98e86f77fcbb34c5c7443b5799e8cac9cc3f12", "committedDate": "2022-11-28 20:38:36 +0200", "message": "Merge branch 'master' into weather_improvements"}, {"oid": "fe5d847b366e275c7ce8465942d39700b11a58db", "committedDate": "2022-11-29 09:33:01 +0100", "message": "clean fav file migration"}, {"oid": "1e914db55bf454028059704b99aeb6b3ef4dd4c0", "committedDate": "2022-11-30 20:15:20 +0100", "message": "Clean fav constants (no functional change)"}, {"oid": "e896b8aac6eee512f4c20be258448090f3f4c5ea", "committedDate": "2022-11-30 22:02:35 +0100", "message": "Remove obsolete restoreBackupForFavoritesFiles()"}, {"oid": "45cd9d9d5442202a329472988e238527ebba2688", "committedDate": "2022-12-08 13:01:15 +0200", "message": "Fix date format of GPX for old devices Android 6.0 and lower"}, {"oid": "da6ac219dd729de3caf9685f3bb6f91294de7c3a", "committedDate": "2022-12-13 18:04:17 +0200", "message": "Try to fix ForegroundServiceStartNotAllowedException"}, {"oid": "6295cdd1679b1503455dbdd83737dc9a6a1d14e3", "committedDate": "2022-12-25 20:37:19 +0300", "message": "Fix #15926"}, {"oid": "4d3bbed73fc5e106e88d8c88489709f823a289d2", "committedDate": "2022-12-27 17:26:27 +0200", "message": "Update AppInitializer.java"}, {"oid": "6c5c5a59d913629e9d35029f89f594181d34ba96", "committedDate": "2022-12-27 17:43:03 +0200", "message": "Fix crash counter for opengl"}, {"oid": "998a7642d813907c33004d97e149a5c4e238a3ea", "committedDate": "2022-12-28 16:04:56 +0200", "message": "Refactor GPX Utilities to make filer smaller"}, {"oid": "ceb50be4518b9f3452085e55b71a510cc87dc73e", "committedDate": "2023-01-09 13:59:59 +0200", "message": "Fix #16160"}, {"oid": "e6d146906f3c4b523926f85056228b25ac4372f5", "committedDate": "2023-01-09 16:20:53 +0200", "message": "Merge remote-tracking branch 'origin/r4.3'"}, {"oid": "4994316fdc78515c2b8d01ed90e132afe916262b", "committedDate": "2023-02-23 16:29:04 +0200", "message": "fixed 1869"}, {"oid": "83b2b1546e607f9734cf8281141f83bf3adcbb76", "committedDate": "2023-02-24 17:15:15 +0200", "message": "Implement DialogManager"}, {"oid": "0c7be2e28e1fbbc356c7c49f95e7093594af4dc7", "committedDate": "2023-03-07 18:29:49 +0200", "message": "FIx #16269"}, {"oid": "18f9a9ef7677191b0072655d7f6a1d6296f16406", "committedDate": "2023-03-12 13:03:24 +0200", "message": "Code cleanup"}, {"oid": "3c04f0a181bea264ba1328aba3df16a16e0937de", "committedDate": "2023-03-14 17:50:34 +0200", "message": "Merge pull request #16623 from osmandapp/fix_16269"}, {"oid": "0202aa2dd20a05fcdf1fb36bc5159ddd7ac05c51", "committedDate": "2023-03-24 01:08:06 +0200", "message": "Fix #16137 and #14422"}, {"oid": "d734a04d106e1b4fff53bee17b5f31f24bbce124", "committedDate": "2023-04-04 00:41:27 +0300", "message": "Code cleanup"}, {"oid": "ffda023c05b28aa23385b3eb6eec4ca34b5e2260", "committedDate": "2023-04-05 17:39:17 +0300", "message": "Merge branch 'r4.4' into fix_1869"}, {"oid": "4d0d69aa40d2bc2c9109984b0227ee552e01b830", "committedDate": "2023-04-10 00:20:56 +0300", "message": "Add ability to cancel track splitting tasks"}, {"oid": "aafb537c9f14907e3dce47619dcc95e7c9d11645", "committedDate": "2023-04-24 17:38:32 +0300", "message": "Separate tracks and favorites to different packages in my places"}, {"oid": "19eac4165d08e9706a86cddb7798acdc938ea835", "committedDate": "2023-04-25 21:35:36 +0300", "message": "Add TrackFolder for loading tracks items"}, {"oid": "148edff4855f4bb5194833237e6f48f1936b890c", "committedDate": "2023-05-01 19:22:08 +0300", "message": "Improve applying of map display position"}, {"oid": "839b422d0d112eedd8678f2690c5c2af52d11d34", "committedDate": "2023-05-02 11:40:05 +0300", "message": "Improve applying of map display position p.2"}, {"oid": "a8a23bbce878c5e8fb51702f0978ed89c74510d1", "committedDate": "2023-05-05 10:44:46 +0300", "message": "Remove unused imports"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTM1Mw==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425011353", "body": "List.contains ?", "bodyText": "List.contains ?", "bodyHTML": "<p dir=\"auto\">List.contains ?</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:49:38Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());\n+\t\t\t\t}\n+\t\t\t\tif (!filters.contains(s)) {", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMTY2MQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425011661", "body": "First create, then check?", "bodyText": "First create, then check?", "bodyHTML": "<p dir=\"auto\">First create, then check?</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:50:07Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI0OQ==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425012249", "body": "Should it be method part of POICategory to check?", "bodyText": "Should it be method part of POICategory to check?", "bodyHTML": "<p dir=\"auto\">Should it be method part of POICategory to check?</p>", "author": "vshcherb", "createdAt": "2020-05-14T09:50:57Z", "path": "OsmAnd/src/net/osmand/plus/poi/PoiHelper.java", "diffHunk": "@@ -0,0 +1,321 @@\n+package net.osmand.plus.poi;\n+\n+\n+import android.annotation.SuppressLint;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+\n+import net.osmand.PlatformUtil;\n+import net.osmand.binary.BinaryMapIndexReader;\n+import net.osmand.osm.MapPoiTypes;\n+import net.osmand.osm.PoiCategory;\n+import net.osmand.osm.PoiType;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.activities.LocalIndexHelper;\n+import net.osmand.plus.activities.LocalIndexInfo;\n+import net.osmand.plus.api.SQLiteAPI;\n+import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n+\n+import org.apache.commons.logging.Log;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class PoiHelper {\n+\n+\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n+\tprivate OsmandApplication app;\n+\tprivate PoiDbHelper helper;\n+\tprivate Map<String, Long> files;\n+\tprivate Map<String, List<String>> categories;\n+\n+\tpublic PoiHelper(OsmandApplication app) {\n+\t\tthis.app = app;\n+\t\thelper = new PoiDbHelper(app);\n+\t}\n+\n+\tpublic Map<String, Long> getFiles() {\n+\t\tif (files == null) {\n+\t\t\tfiles = helper.getFiles();\n+\t\t}\n+\t\treturn files;\n+\t}\n+\n+\tpublic Map<String, List<String>> getCategories() {\n+\t\tif (categories == null) {\n+\t\t\tcategories = helper.getCategories();\n+\t\t}\n+\t\treturn categories;\n+\t}\n+\n+\tpublic void readPoiTypesFromMap() {\n+\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n+\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n+\t\t\t@Override\n+\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n+\t\t\t}\n+\t\t});\n+\t\tMap<String, Long> savedFiles = getFiles();\n+\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n+\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n+\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\tString name = f.getName();\n+\t\t\t\tlong date = f.lastModified();\n+\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n+\t\t\t\t\tinitCategoriesFromFiles();\n+\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else {\n+\t\t\tinitCategoriesFromFiles();\n+\t\t\treplaceSavedFiles(localMapsIndexes);\n+\t\t\treturn;\n+\t\t}\n+\t\treadCategoriesFromDb();\n+\t}\n+\n+\t@SuppressLint(\"StaticFieldLeak\")\n+\tpublic void readPoiTypesFromMapAsync() {\n+\t\tnew AsyncTask<Void, Void, Void>() {\n+\n+\t\t\t@Override\n+\t\t\tprotected Void doInBackground(Void... voids) {\n+\t\t\t\tapp.getPoiTypes().init();\n+\t\t\t\treadPoiTypesFromMap();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n+\t}\n+\n+\tprivate void readCategoriesFromDb() {\n+\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n+\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n+\t\t\tfor (String s : entry.getValue()) {\n+\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n+\t\t\t\tList<String> filters = new ArrayList<>();\n+\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n+\t\t\t\t\tfilters.add(poi.getKeyName());", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI5OA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425012298", "bodyText": "getPoiTypeByKeyName?", "author": "vshcherb", "createdAt": "2020-05-14T09:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMjI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java b/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\ndeleted file mode 100644\nindex 9934d41ff8..0000000000\n--- a/OsmAnd/src/net/osmand/plus/poi/PoiHelper.java\n+++ /dev/null\n", "chunk": "@@ -1,321 +0,0 @@\n-package net.osmand.plus.poi;\n-\n-\n-import android.annotation.SuppressLint;\n-import android.os.AsyncTask;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.osmand.PlatformUtil;\n-import net.osmand.binary.BinaryMapIndexReader;\n-import net.osmand.osm.MapPoiTypes;\n-import net.osmand.osm.PoiCategory;\n-import net.osmand.osm.PoiType;\n-import net.osmand.plus.OsmandApplication;\n-import net.osmand.plus.activities.LocalIndexHelper;\n-import net.osmand.plus.activities.LocalIndexInfo;\n-import net.osmand.plus.api.SQLiteAPI;\n-import net.osmand.plus.download.ui.AbstractLoadLocalIndexTask;\n-\n-import org.apache.commons.logging.Log;\n-import org.json.JSONArray;\n-import org.json.JSONException;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class PoiHelper {\n-\n-\tprivate static final Log LOG = PlatformUtil.getLog(PoiHelper.class);\n-\tprivate OsmandApplication app;\n-\tprivate PoiDbHelper helper;\n-\tprivate Map<String, Long> files;\n-\tprivate Map<String, List<String>> categories;\n-\n-\tpublic PoiHelper(OsmandApplication app) {\n-\t\tthis.app = app;\n-\t\thelper = new PoiDbHelper(app);\n-\t}\n-\n-\tpublic Map<String, Long> getFiles() {\n-\t\tif (files == null) {\n-\t\t\tfiles = helper.getFiles();\n-\t\t}\n-\t\treturn files;\n-\t}\n-\n-\tpublic Map<String, List<String>> getCategories() {\n-\t\tif (categories == null) {\n-\t\t\tcategories = helper.getCategories();\n-\t\t}\n-\t\treturn categories;\n-\t}\n-\n-\tpublic void readPoiTypesFromMap() {\n-\t\tLocalIndexHelper localIndexHelper = new LocalIndexHelper(app);\n-\t\tList<LocalIndexInfo> localMapsIndexes = localIndexHelper.getLocalFullMaps(new AbstractLoadLocalIndexTask() {\n-\t\t\t@Override\n-\t\t\tpublic void loadFile(LocalIndexInfo... loaded) {\n-\t\t\t}\n-\t\t});\n-\t\tMap<String, Long> savedFiles = getFiles();\n-\t\tif (savedFiles.size() == localMapsIndexes.size()) {\n-\t\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\tString name = f.getName();\n-\t\t\t\tlong date = f.lastModified();\n-\t\t\t\tif (!savedFiles.containsKey(name) || savedFiles.get(name) != date) {\n-\t\t\t\t\tinitCategoriesFromFiles();\n-\t\t\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tinitCategoriesFromFiles();\n-\t\t\treplaceSavedFiles(localMapsIndexes);\n-\t\t\treturn;\n-\t\t}\n-\t\treadCategoriesFromDb();\n-\t}\n-\n-\t@SuppressLint(\"StaticFieldLeak\")\n-\tpublic void readPoiTypesFromMapAsync() {\n-\t\tnew AsyncTask<Void, Void, Void>() {\n-\n-\t\t\t@Override\n-\t\t\tprotected Void doInBackground(Void... voids) {\n-\t\t\t\tapp.getPoiTypes().init();\n-\t\t\t\treadPoiTypesFromMap();\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n-\t}\n-\n-\tprivate void readCategoriesFromDb() {\n-\t\tfor (Map.Entry<String, List<String>> entry : getCategories().entrySet()) {\n-\t\t\tPoiCategory poiCategory = app.getPoiTypes().getPoiCategoryByName(entry.getKey(), true);\n-\t\t\tfor (String s : entry.getValue()) {\n-\t\t\t\tPoiType poiType = new PoiType(MapPoiTypes.getDefault(), poiCategory, null, s);\n-\t\t\t\tList<String> filters = new ArrayList<>();\n-\t\t\t\tfor (PoiType poi : poiCategory.getPoiTypes()) {\n-\t\t\t\t\tfilters.add(poi.getKeyName());\n-\t\t\t\t}\n-\t\t\t\tif (!filters.contains(s)) {\n-\t\t\t\t\tpoiCategory.getPoiTypes().add(poiType);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void replaceSavedFiles(List<LocalIndexInfo> localMapsIndexes) {\n-\t\tfiles.clear();\n-\t\thelper.deleteFilesTable();\n-\t\tfor (LocalIndexInfo info : localMapsIndexes) {\n-\t\t\tFile f = new File(info.getPathToData());\n-\t\t\thelper.addFile(f);\n-\t\t\tfiles.put(f.getName(), f.lastModified());\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate void initCategoriesFromFiles() {\n-\t\tapp.getPoiTypes().clearCreatedCategories();\n-\t\tfinal BinaryMapIndexReader[] currentFile = app.getResourceManager().getPoiSearchFiles();\n-\t\tfor (BinaryMapIndexReader r : currentFile) {\n-\t\t\ttry {\n-\t\t\t\tr.initCategories();\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOG.error(\"Error while read poi types from map \" + e);\n-\t\t\t}\n-\t\t}\n-\t\treplaceSavedCategories(app.getPoiTypes().getCreatedCategories());\n-\t}\n-\n-\tprivate void replaceSavedCategories(List<PoiCategory> poiCategories) {\n-\t\tcategories.clear();\n-\t\thelper.deletePoiTypesTable();\n-\t\tfor (PoiCategory category : poiCategories) {\n-\t\t\thelper.addCategory(category);\n-\t\t\tcategories.put(category.getKeyName(), getSubCategoriesFilters(category.getPoiTypes()));\n-\t\t}\n-\t\thelper.close();\n-\t}\n-\n-\tprivate List<String> getSubCategoriesFilters(List<PoiType> poiTypeList) {\n-\t\tList<String> filters = new ArrayList<>();\n-\t\tfor (PoiType poiType : poiTypeList) {\n-\t\t\tfilters.add(poiType.getKeyName());\n-\t\t}\n-\t\treturn filters;\n-\t}\n-\n-\tpublic class PoiDbHelper {\n-\n-\t\tprivate static final String DATABASE_NAME = \"poi_types_cache\";\n-\t\tprivate static final int DATABASE_VERSION = 1;\n-\n-\t\tprivate static final String FILES_TABLE_NAME = \"files\";\n-\t\tprivate static final String FILE_NAME = \"name\";\n-\t\tprivate static final String FILE_DATE = \"date\";\n-\n-\t\tprivate static final String FILES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tFILES_TABLE_NAME + \" (\" +\n-\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\tFILE_DATE + \");\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_NAME = \"poi_types\";\n-\t\tprivate static final String POI_CATEGORY = \"category\";\n-\t\tprivate static final String POI_SUBCATEGORIES = \"subcategories\";\n-\n-\t\tprivate static final String POI_TYPES_TABLE_CREATE = \"CREATE TABLE \" +\n-\t\t\t\tPOI_TYPES_TABLE_NAME + \" (\" +\n-\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\tPOI_SUBCATEGORIES + \");\";\n-\n-\t\tprivate OsmandApplication context;\n-\t\tprivate SQLiteAPI.SQLiteConnection conn;\n-\n-\t\tPoiDbHelper(OsmandApplication context) {\n-\t\t\tthis.context = context;\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getWritableDatabase() {\n-\t\t\treturn openConnection(false);\n-\t\t}\n-\n-\t\tpublic void close() {\n-\t\t\tif (conn != null) {\n-\t\t\t\tconn.close();\n-\t\t\t\tconn = null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tpublic SQLiteAPI.SQLiteConnection getReadableDatabase() {\n-\t\t\treturn openConnection(true);\n-\t\t}\n-\n-\t\tprivate SQLiteAPI.SQLiteConnection openConnection(boolean readonly) {\n-\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, readonly);\n-\t\t\tif (conn.getVersion() < DATABASE_VERSION) {\n-\t\t\t\tif (readonly) {\n-\t\t\t\t\tconn.close();\n-\t\t\t\t\tconn = context.getSQLiteAPI().getOrCreateDatabase(DATABASE_NAME, false);\n-\t\t\t\t}\n-\t\t\t\tint version = conn.getVersion();\n-\t\t\t\tconn.setVersion(DATABASE_VERSION);\n-\t\t\t\tif (version == 0) {\n-\t\t\t\t\tonCreate(conn);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn conn;\n-\t\t}\n-\n-\t\tpublic void onCreate(SQLiteAPI.SQLiteConnection conn) {\n-\t\t\tconn.execSQL(FILES_TABLE_CREATE);\n-\t\t\tconn.execSQL(POI_TYPES_TABLE_CREATE);\n-\t\t}\n-\n-\t\tprotected void addFile(File f) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + FILES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{f.getName(), f.lastModified()});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deleteFilesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + FILES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void deletePoiTypesTable() {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"DELETE FROM \" + POI_TYPES_TABLE_NAME);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected void addCategory(PoiCategory poiCategory) {\n-\t\t\tSQLiteAPI.SQLiteConnection db = getReadableDatabase();\n-\t\t\tif (db != null) {\n-\t\t\t\tdb.execSQL(\"INSERT INTO \" + POI_TYPES_TABLE_NAME + \" VALUES (?, ?)\",\n-\t\t\t\t\t\tnew Object[]{poiCategory.getKeyName(), getSubCategoriesJson(poiCategory.getPoiTypes())});\n-\t\t\t}\n-\t\t}\n-\n-\t\tprotected Map<String, Long> getFiles() {\n-\t\t\tMap<String, Long> files = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tFILE_NAME + \", \" +\n-\t\t\t\t\t\tFILE_DATE +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tFILES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString fileName = query.getString(0);\n-\t\t\t\t\t\tLong date = query.getLong(1);\n-\t\t\t\t\t\tfiles.put(fileName, date);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn files;\n-\t\t}\n-\n-\t\tprotected Map<String, List<String>> getCategories() {\n-\t\t\tMap<String, List<String>> categories = new HashMap<>();\n-\t\t\tSQLiteAPI.SQLiteConnection conn = getReadableDatabase();\n-\t\t\tif (conn != null) {\n-\t\t\t\tSQLiteAPI.SQLiteCursor query = conn.rawQuery(\"SELECT \" +\n-\t\t\t\t\t\tPOI_CATEGORY + \", \" +\n-\t\t\t\t\t\tPOI_SUBCATEGORIES +\n-\t\t\t\t\t\t\" FROM \" +\n-\t\t\t\t\t\tPOI_TYPES_TABLE_NAME, null);\n-\t\t\t\tif (query != null && query.moveToFirst()) {\n-\t\t\t\t\tdo {\n-\t\t\t\t\t\tString categoryName = query.getString(0);\n-\t\t\t\t\t\tList<String> subCategories = getSubCategories(query.getString(1));\n-\t\t\t\t\t\tcategories.put(categoryName, subCategories);\n-\t\t\t\t\t} while (query.moveToNext());\n-\t\t\t\t}\n-\t\t\t\tif (query != null) {\n-\t\t\t\t\tquery.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tclose();\n-\t\t\treturn categories;\n-\t\t}\n-\n-\t\tprivate List<String> getSubCategories(@NonNull String json) {\n-\t\t\tList<String> subCategories = new ArrayList<>();\n-\t\t\ttry {\n-\t\t\t\tJSONArray jsonArray = new JSONArray(json);\n-\t\t\t\tfor (int i = 0; i < jsonArray.length(); i++) {\n-\t\t\t\t\tsubCategories.add(jsonArray.optString(i));\n-\t\t\t\t}\n-\t\t\t} catch (JSONException e) {\n-\t\t\t\tLOG.error(\"Error parsing subCategories json: \" + e);\n-\t\t\t}\n-\t\t\treturn subCategories;\n-\t\t}\n-\n-\t\tprivate String getSubCategoriesJson(@NonNull List<PoiType> poiTypes) {\n-\t\t\tJSONArray jsonArray = new JSONArray();\n-\t\t\tfor (PoiType subCategory : poiTypes) {\n-\t\t\t\tjsonArray.put(subCategory.getKeyName());\n-\t\t\t}\n-\t\t\treturn jsonArray.toString();\n-\t\t}\n-\t}\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDA1Mw==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r425020053", "body": "UI ?", "bodyText": "UI ?", "bodyHTML": "<p dir=\"auto\">UI ?</p>", "author": "vshcherb", "createdAt": "2020-05-14T10:03:30Z", "path": "OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java", "diffHunk": "@@ -632,6 +632,7 @@ protected void onPostExecute(String result) {\n \t\t\t} else {\n \t\t\t\ta.newDownloadIndexes();\n \t\t\t}\n+\t\t\tgetMyApplication().getPoiHelper().readPoiTypesFromMapAsync();", "originalCommit": "165d1430e3e081d8b76c6a34bab6428647836861", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a800d252053003f3f408d8b60319194fe31788a", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex d76ca7dc12..bbb0f694e9 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -632,7 +632,6 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \t\t\t} else {\n \t\t\t\ta.newDownloadIndexes();\n \t\t\t}\n-\t\t\tgetMyApplication().getPoiHelper().readPoiTypesFromMapAsync();\n \t\t}\n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex d76ca7dc12..bbb0f694e9 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -632,7 +632,6 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \t\t\t} else {\n \t\t\t\ta.newDownloadIndexes();\n \t\t\t}\n-\t\t\tgetMyApplication().getPoiHelper().readPoiTypesFromMapAsync();\n \t\t}\n \t}\n \n", "next_change": {"commit": "a0927452337049d62698b59a310c3241132aeaa9", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex bbb0f694e9..b0953cfb84 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -623,20 +421,20 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \t\t@Override\n \t\tprotected void onPostExecute(String result) {\n \t\t\ta.setProgressBarIndeterminateVisibility(false);\n-\t\t\tif(result != null && result.length() > 0) {\n+\t\t\tif (result != null && result.length() > 0) {\n \t\t\t\tToast.makeText(a, result, Toast.LENGTH_LONG).show();\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif (operation == RESTORE_OPERATION || operation == BACKUP_OPERATION || operation == CLEAR_TILES_OPERATION) {\n \t\t\t\ta.reloadLocalIndexes();\n \t\t\t} else {\n-\t\t\t\ta.newDownloadIndexes();\n+\t\t\t\ta.onUpdatedIndexesList();\n \t\t\t}\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void newDownloadIndexes() {\n+\tpublic void onUpdatedIndexesList() {\n \t\treloadData();\n \t}\n \n", "next_change": {"commit": "eaca4a4b32a5445df654b1bbe8d2e3241eba01e3", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex b0953cfb84..099e228fac 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -431,6 +447,74 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \t\t\t\ta.onUpdatedIndexesList();\n \t\t\t}\n \t\t}\n+\n+\t\t// Removing both Mapillary sources vector tiles and cached raster tile together\n+\t\tprivate void removeMapillarySources(LocalIndexInfo info) {\n+\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n+\t\t\tString mapilaryCache = TileSourceManager.getMapillaryCacheSource().getName();\n+\t\t\tString mapilaryVector = TileSourceManager.getMapillaryVectorSource().getName();\n+\t\t\tif (mapilaryVector.equals(src.getName()) || mapilaryCache.equals(src.getName())) {\n+\t\t\t\tFile current = new File(info.getPathToData());\n+\t\t\t\tFile parent = current.getParentFile();\n+\t\t\t\tif (parent == null) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tFile[] list = parent.listFiles();\n+\t\t\t\tif (list == null) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tboolean mapillaryCacheRemoved = false;\n+\t\t\t\tboolean mapillaryVectorRemoved = false;\n+\t\t\t\tfor (File f : list) {\n+\t\t\t\t\tString withoutExt = Algorithms.getFileNameWithoutExtension(f);\n+\t\t\t\t\tif (withoutExt.equals(mapilaryCache)) {\n+\t\t\t\t\t\tAlgorithms.removeAllFiles(f);\n+\t\t\t\t\t\tmapillaryCacheRemoved = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (withoutExt.equals(mapilaryVector)) {\n+\t\t\t\t\t\tAlgorithms.removeAllFiles(f);\n+\t\t\t\t\t\tmapillaryVectorRemoved = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (mapillaryVectorRemoved) {\n+\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(mapilaryVector);\n+\t\t\t\t}\n+\t\t\t\tif (mapillaryCacheRemoved) {\n+\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(mapilaryCache);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Clear tiles for both Mapillary sources together\n+\t\tprivate void clearMapillaryTiles(LocalIndexInfo info) {\n+\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n+\t\t\tITileSource mapilaryCache = TileSourceManager.getMapillaryCacheSource();\n+\t\t\tITileSource mapilaryVector = TileSourceManager.getMapillaryVectorSource();\n+\t\t\tif (src == mapilaryVector || src == mapilaryCache) {\n+\t\t\t\tFile current = new File(info.getPathToData());\n+\t\t\t\tFile parent = current.getParentFile();\n+\t\t\t\tif (parent == null) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tFile[] list = parent.listFiles();\n+\t\t\t\tif (list == null) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfor (File f : list) {\n+\t\t\t\t\tString withoutExt = Algorithms.getFileNameWithoutExtension(f);\n+\t\t\t\t\tif (withoutExt.equals(mapilaryCache.getName())) {\n+\t\t\t\t\t\tif (f.isDirectory() || Algorithms.getFileExtension(f).equals(IndexConstants.SQLITE_EXT)) {\n+\t\t\t\t\t\t\tmapilaryCache.deleteTiles(f.getPath());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (withoutExt.equals(mapilaryVector.getName())) {\n+\t\t\t\t\t\tif (f.isDirectory() || Algorithms.getFileExtension(f).equals(IndexConstants.SQLITE_EXT)) {\n+\t\t\t\t\t\t\tmapilaryVector.deleteTiles(f.getPath());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \t}\n \n \t@Override\n", "next_change": {"commit": "9867d5a6cc9ee1c5019cc4a091df95243b624698", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex 099e228fac..0b11c4d647 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -280,243 +277,6 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \n \t}\n \n-\n-\tpublic static class LocalIndexOperationTask extends AsyncTask<LocalIndexInfo, LocalIndexInfo, String> {\n-\t\tprotected static int DELETE_OPERATION = 1;\n-\t\tprotected static int BACKUP_OPERATION = 2;\n-\t\tprotected static int RESTORE_OPERATION = 3;\n-\t\tprotected static int CLEAR_TILES_OPERATION = 4;\n-\n-\t\tprivate final int operation;\n-\t\tprivate final DownloadActivity a;\n-\t\tprivate final LocalIndexesAdapter listAdapter;\n-\n-\t\tpublic LocalIndexOperationTask(DownloadActivity a, LocalIndexesAdapter listAdapter, int operation) {\n-\t\t\tthis.a = a;\n-\t\t\tthis.listAdapter = listAdapter;\n-\t\t\tthis.operation = operation;\n-\t\t}\n-\n-\t\tprivate boolean move(File from, File to) {\n-\t\t\tif (!to.getParentFile().exists()) {\n-\t\t\t\tto.getParentFile().mkdirs();\n-\t\t\t}\n-\t\t\treturn from.renameTo(to);\n-\t\t}\n-\n-\t\tprivate File getFileToBackup(LocalIndexInfo i) {\n-\t\t\tif (!i.isBackupedData()) {\n-\t\t\t\treturn new File(getMyApplication().getAppPath(IndexConstants.BACKUP_INDEX_DIR), i.getFileName());\n-\t\t\t}\n-\t\t\treturn new File(i.getPathToData());\n-\t\t}\n-\n-\t\tprivate OsmandApplication getMyApplication() {\n-\t\t\treturn (OsmandApplication) a.getApplication();\n-\t\t}\n-\n-\n-\t\tprivate File getFileToRestore(LocalIndexInfo i) {\n-\t\t\tif (i.isBackupedData()) {\n-\t\t\t\tFile parent = new File(i.getPathToData()).getParentFile();\n-\t\t\t\tif (i.getOriginalType() == LocalIndexType.MAP_DATA) {\n-\t\t\t\t\tif (i.getFileName().endsWith(IndexConstants.BINARY_ROAD_MAP_INDEX_EXT)) {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.ROADS_INDEX_DIR);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.MAPS_PATH);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TILES_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.TILES_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.SRTM_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.SRTM_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.WIKI_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.WIKI_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TRAVEL_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.WIKIVOYAGE_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TTS_VOICE_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.VOICE_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.VOICE_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.VOICE_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.FONT_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.FONT_INDEX_DIR);\n-\t\t\t\t}\n-\t\t\t\treturn new File(parent, i.getFileName());\n-\t\t\t}\n-\t\t\treturn new File(i.getPathToData());\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected String doInBackground(LocalIndexInfo... params) {\n-\t\t\tint count = 0;\n-\t\t\tint total = 0;\n-\t\t\tfor (LocalIndexInfo info : params) {\n-\t\t\t\tif (!isCancelled()) {\n-\t\t\t\t\tboolean successfull = false;\n-\t\t\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\t\t\tsuccessfull = Algorithms.removeAllFiles(f);\n-\n-\t\t\t\t\t\tif (InAppPurchaseHelper.isSubscribedToLiveUpdates(getMyApplication())) {\n-\t\t\t\t\t\t\tString fileNameWithoutExtension =\n-\t\t\t\t\t\t\t\t\tAlgorithms.getFileNameWithoutExtension(f);\n-\t\t\t\t\t\t\tIncrementalChangesManager changesManager =\n-\t\t\t\t\t\t\t\t\tgetMyApplication().getResourceManager().getChangesManager();\n-\t\t\t\t\t\t\tchangesManager.deleteUpdates(fileNameWithoutExtension);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(info.getFileName());\n-\t\t\t\t\t\t\tFile tShm = new File(f.getParentFile(), f.getName() + \"-shm\");\n-\t\t\t\t\t\t\tFile tWal = new File(f.getParentFile(), f.getName() + \"-wal\");\n-\t\t\t\t\t\t\tif (tShm.exists()) {\n-\t\t\t\t\t\t\t\tAlgorithms.removeAllFiles(tShm);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tif (tWal.exists()) {\n-\t\t\t\t\t\t\t\tAlgorithms.removeAllFiles(tWal);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tremoveMapillarySources(info);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (operation == RESTORE_OPERATION) {\n-\t\t\t\t\t\tsuccessfull = move(new File(info.getPathToData()), getFileToRestore(info));\n-\t\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\t\tinfo.setBackupedData(false);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (operation == BACKUP_OPERATION) {\n-\t\t\t\t\t\tsuccessfull = move(new File(info.getPathToData()), getFileToBackup(info));\n-\t\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\t\tinfo.setBackupedData(true);\n-\t\t\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(info.getFileName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (operation == CLEAR_TILES_OPERATION) {\n-\t\t\t\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n-\t\t\t\t\t\tif (src != null) {\n-\t\t\t\t\t\t\tsrc.deleteTiles(info.getPathToData());\n-\t\t\t\t\t\t\tclearMapillaryTiles(info);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\ttotal++;\n-\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\tcount++;\n-\t\t\t\t\t\tpublishProgress(info);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\ta.getDownloadThread().updateLoadedFiles();\n-\t\t\t}\n-\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\treturn a.getString(R.string.local_index_items_deleted, count, total);\n-\t\t\t} else if (operation == BACKUP_OPERATION) {\n-\t\t\t\treturn a.getString(R.string.local_index_items_backuped, count, total);\n-\t\t\t} else if (operation == RESTORE_OPERATION) {\n-\t\t\t\treturn a.getString(R.string.local_index_items_restored, count, total);\n-\t\t\t}\n-\n-\t\t\treturn \"\";\n-\t\t}\n-\n-\n-\t\t@Override\n-\t\tprotected void onProgressUpdate(LocalIndexInfo... values) {\n-\t\t\tif (listAdapter != null) {\n-\t\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\t\tlistAdapter.delete(values);\n-\t\t\t\t} else if (operation == BACKUP_OPERATION) {\n-\t\t\t\t\tlistAdapter.move(values, false);\n-\t\t\t\t} else if (operation == RESTORE_OPERATION) {\n-\t\t\t\t\tlistAdapter.move(values, true);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void onPreExecute() {\n-\t\t\ta.setProgressBarIndeterminateVisibility(true);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void onPostExecute(String result) {\n-\t\t\ta.setProgressBarIndeterminateVisibility(false);\n-\t\t\tif (result != null && result.length() > 0) {\n-\t\t\t\tToast.makeText(a, result, Toast.LENGTH_LONG).show();\n-\t\t\t}\n-\n-\t\t\tif (operation == RESTORE_OPERATION || operation == BACKUP_OPERATION || operation == CLEAR_TILES_OPERATION) {\n-\t\t\t\ta.reloadLocalIndexes();\n-\t\t\t} else {\n-\t\t\t\ta.onUpdatedIndexesList();\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Removing both Mapillary sources vector tiles and cached raster tile together\n-\t\tprivate void removeMapillarySources(LocalIndexInfo info) {\n-\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n-\t\t\tString mapilaryCache = TileSourceManager.getMapillaryCacheSource().getName();\n-\t\t\tString mapilaryVector = TileSourceManager.getMapillaryVectorSource().getName();\n-\t\t\tif (mapilaryVector.equals(src.getName()) || mapilaryCache.equals(src.getName())) {\n-\t\t\t\tFile current = new File(info.getPathToData());\n-\t\t\t\tFile parent = current.getParentFile();\n-\t\t\t\tif (parent == null) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tFile[] list = parent.listFiles();\n-\t\t\t\tif (list == null) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tboolean mapillaryCacheRemoved = false;\n-\t\t\t\tboolean mapillaryVectorRemoved = false;\n-\t\t\t\tfor (File f : list) {\n-\t\t\t\t\tString withoutExt = Algorithms.getFileNameWithoutExtension(f);\n-\t\t\t\t\tif (withoutExt.equals(mapilaryCache)) {\n-\t\t\t\t\t\tAlgorithms.removeAllFiles(f);\n-\t\t\t\t\t\tmapillaryCacheRemoved = true;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (withoutExt.equals(mapilaryVector)) {\n-\t\t\t\t\t\tAlgorithms.removeAllFiles(f);\n-\t\t\t\t\t\tmapillaryVectorRemoved = true;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (mapillaryVectorRemoved) {\n-\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(mapilaryVector);\n-\t\t\t\t}\n-\t\t\t\tif (mapillaryCacheRemoved) {\n-\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(mapilaryCache);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Clear tiles for both Mapillary sources together\n-\t\tprivate void clearMapillaryTiles(LocalIndexInfo info) {\n-\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n-\t\t\tITileSource mapilaryCache = TileSourceManager.getMapillaryCacheSource();\n-\t\t\tITileSource mapilaryVector = TileSourceManager.getMapillaryVectorSource();\n-\t\t\tif (src == mapilaryVector || src == mapilaryCache) {\n-\t\t\t\tFile current = new File(info.getPathToData());\n-\t\t\t\tFile parent = current.getParentFile();\n-\t\t\t\tif (parent == null) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tFile[] list = parent.listFiles();\n-\t\t\t\tif (list == null) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tfor (File f : list) {\n-\t\t\t\t\tString withoutExt = Algorithms.getFileNameWithoutExtension(f);\n-\t\t\t\t\tif (withoutExt.equals(mapilaryCache.getName())) {\n-\t\t\t\t\t\tif (f.isDirectory() || Algorithms.getFileExtension(f).equals(IndexConstants.SQLITE_EXT)) {\n-\t\t\t\t\t\t\tmapilaryCache.deleteTiles(f.getPath());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (withoutExt.equals(mapilaryVector.getName())) {\n-\t\t\t\t\t\tif (f.isDirectory() || Algorithms.getFileExtension(f).equals(IndexConstants.SQLITE_EXT)) {\n-\t\t\t\t\t\t\tmapilaryVector.deleteTiles(f.getPath());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Override\n \tpublic void onUpdatedIndexesList() {\n \t\treloadData();\n", "next_change": {"commit": "bdb5a7beca13c4324867d91d62188ea7afc00881", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex 0b11c4d647..82ad4e9a21 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -277,6 +283,230 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \n \t}\n \n+\n+\tpublic static class LocalIndexOperationTask extends AsyncTask<LocalIndexInfo, LocalIndexInfo, String> {\n+\t\tprotected static int DELETE_OPERATION = 1;\n+\t\tprotected static int BACKUP_OPERATION = 2;\n+\t\tprotected static int RESTORE_OPERATION = 3;\n+\t\tprotected static int CLEAR_TILES_OPERATION = 4;\n+\n+\t\tprivate final int operation;\n+\t\tprivate final DownloadActivity a;\n+\t\tprivate final LocalIndexesAdapter listAdapter;\n+\n+\t\tpublic LocalIndexOperationTask(DownloadActivity a, LocalIndexesAdapter listAdapter, int operation) {\n+\t\t\tthis.a = a;\n+\t\t\tthis.listAdapter = listAdapter;\n+\t\t\tthis.operation = operation;\n+\t\t}\n+\n+\t\tprivate boolean move(File from, File to) {\n+\t\t\tif (!to.getParentFile().exists()) {\n+\t\t\t\tto.getParentFile().mkdirs();\n+\t\t\t}\n+\t\t\treturn from.renameTo(to);\n+\t\t}\n+\n+\t\tprivate File getFileToBackup(LocalIndexInfo i) {\n+\t\t\tif (!i.isBackupedData()) {\n+\t\t\t\treturn new File(getMyApplication().getAppPath(IndexConstants.BACKUP_INDEX_DIR), i.getFileName());\n+\t\t\t}\n+\t\t\treturn new File(i.getPathToData());\n+\t\t}\n+\n+\t\tprivate OsmandApplication getMyApplication() {\n+\t\t\treturn (OsmandApplication) a.getApplication();\n+\t\t}\n+\n+\n+\t\tprivate File getFileToRestore(LocalIndexInfo i) {\n+\t\t\tString fileName = i.getFileName();\n+\t\t\tif (i.isBackupedData()) {\n+\t\t\t\tFile parent = new File(i.getPathToData()).getParentFile();\n+\t\t\t\tif (i.getOriginalType() == LocalIndexType.MAP_DATA) {\n+\t\t\t\t\tif (fileName.endsWith(IndexConstants.BINARY_ROAD_MAP_INDEX_EXT)) {\n+\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.ROADS_INDEX_DIR);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.MAPS_PATH);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TILES_DATA) {\n+\t\t\t\t\tif (fileName.endsWith(IndexConstants.HEIGHTMAP_SQLITE_EXT)) {\n+\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.HEIGHTMAP_INDEX_DIR);\n+\t\t\t\t\t} else if (fileName.endsWith(IndexConstants.TIF_EXT)) {\n+\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.GEOTIFF_DIR);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.TILES_INDEX_DIR);\n+\t\t\t\t\t}\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.SRTM_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.SRTM_INDEX_DIR);\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.WIKI_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.WIKI_INDEX_DIR);\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TRAVEL_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.WIKIVOYAGE_INDEX_DIR);\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TTS_VOICE_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.VOICE_INDEX_DIR);\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.VOICE_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.VOICE_INDEX_DIR);\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.FONT_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.FONT_INDEX_DIR);\n+\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.DEPTH_DATA) {\n+\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.NAUTICAL_INDEX_DIR);\n+\t\t\t\t}\n+\t\t\t\treturn new File(parent, fileName);\n+\t\t\t}\n+\t\t\treturn new File(i.getPathToData());\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String doInBackground(LocalIndexInfo... params) {\n+\t\t\tint count = 0;\n+\t\t\tint total = 0;\n+\t\t\tfor (LocalIndexInfo info : params) {\n+\t\t\t\tif (!isCancelled()) {\n+\t\t\t\t\tboolean successfull = false;\n+\t\t\t\t\tif (operation == DELETE_OPERATION) {\n+\t\t\t\t\t\tFile f = new File(info.getPathToData());\n+\t\t\t\t\t\tsuccessfull = Algorithms.removeAllFiles(f);\n+\n+\t\t\t\t\t\tif (InAppPurchaseHelper.isSubscribedToLiveUpdates(getMyApplication())) {\n+\t\t\t\t\t\t\tString fileNameWithoutExtension =\n+\t\t\t\t\t\t\t\t\tAlgorithms.getFileNameWithoutExtension(f);\n+\t\t\t\t\t\t\tIncrementalChangesManager changesManager =\n+\t\t\t\t\t\t\t\t\tgetMyApplication().getResourceManager().getChangesManager();\n+\t\t\t\t\t\t\tchangesManager.deleteUpdates(fileNameWithoutExtension);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (successfull) {\n+\t\t\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(info.getFileName());\n+\t\t\t\t\t\t\tFile tShm = new File(f.getParentFile(), f.getName() + \"-shm\");\n+\t\t\t\t\t\t\tFile tWal = new File(f.getParentFile(), f.getName() + \"-wal\");\n+\t\t\t\t\t\t\tif (tShm.exists()) {\n+\t\t\t\t\t\t\t\tAlgorithms.removeAllFiles(tShm);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (tWal.exists()) {\n+\t\t\t\t\t\t\t\tAlgorithms.removeAllFiles(tWal);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tclearMapillaryTiles(info);\n+\t\t\t\t\t\t\tclearHeightmapTiles(info);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (operation == RESTORE_OPERATION) {\n+\t\t\t\t\t\tsuccessfull = move(new File(info.getPathToData()), getFileToRestore(info));\n+\t\t\t\t\t\tif (successfull) {\n+\t\t\t\t\t\t\tinfo.setBackupedData(false);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (operation == BACKUP_OPERATION) {\n+\t\t\t\t\t\tsuccessfull = move(new File(info.getPathToData()), getFileToBackup(info));\n+\t\t\t\t\t\tif (successfull) {\n+\t\t\t\t\t\t\tinfo.setBackupedData(true);\n+\t\t\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(info.getFileName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (operation == CLEAR_TILES_OPERATION) {\n+\t\t\t\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n+\t\t\t\t\t\tif (src != null) {\n+\t\t\t\t\t\t\tsrc.deleteTiles(info.getPathToData());\n+\t\t\t\t\t\t\tclearMapillaryTiles(info);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\ttotal++;\n+\t\t\t\t\tif (successfull) {\n+\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\tpublishProgress(info);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (operation == DELETE_OPERATION) {\n+\t\t\t\ta.getDownloadThread().updateLoadedFiles();\n+\t\t\t}\n+\t\t\tif (operation == DELETE_OPERATION) {\n+\t\t\t\treturn a.getString(R.string.local_index_items_deleted, count, total);\n+\t\t\t} else if (operation == BACKUP_OPERATION) {\n+\t\t\t\treturn a.getString(R.string.local_index_items_backuped, count, total);\n+\t\t\t} else if (operation == RESTORE_OPERATION) {\n+\t\t\t\treturn a.getString(R.string.local_index_items_restored, count, total);\n+\t\t\t}\n+\n+\t\t\treturn \"\";\n+\t\t}\n+\n+\n+\t\t@Override\n+\t\tprotected void onProgressUpdate(LocalIndexInfo... values) {\n+\t\t\tif (listAdapter != null) {\n+\t\t\t\tif (operation == DELETE_OPERATION) {\n+\t\t\t\t\tlistAdapter.delete(values);\n+\t\t\t\t} else if (operation == BACKUP_OPERATION) {\n+\t\t\t\t\tlistAdapter.move(values, false);\n+\t\t\t\t} else if (operation == RESTORE_OPERATION) {\n+\t\t\t\t\tlistAdapter.move(values, true);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void onPreExecute() {\n+\t\t\ta.setProgressBarIndeterminateVisibility(true);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void onPostExecute(String result) {\n+\t\t\ta.setProgressBarIndeterminateVisibility(false);\n+\t\t\tif (result != null && result.length() > 0) {\n+\t\t\t\tToast.makeText(a, result, Toast.LENGTH_LONG).show();\n+\t\t\t}\n+\n+\t\t\tif (operation == RESTORE_OPERATION || operation == BACKUP_OPERATION || operation == CLEAR_TILES_OPERATION) {\n+\t\t\t\ta.reloadLocalIndexes();\n+\t\t\t} else {\n+\t\t\t\ta.onUpdatedIndexesList();\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Clear tiles for both Mapillary sources together\n+\t\tprivate void clearMapillaryTiles(LocalIndexInfo info) {\n+\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n+\t\t\tITileSource mapilaryCache = TileSourceManager.getMapillaryCacheSource();\n+\t\t\tITileSource mapilaryVector = TileSourceManager.getMapillaryVectorSource();\n+\t\t\tif (src != null && (mapilaryVector.getName().equals(src.getName()) || mapilaryCache.getName().equals(src.getName()))) {\n+\t\t\t\tFile current = new File(info.getPathToData());\n+\t\t\t\tFile parent = current.getParentFile();\n+\t\t\t\tif (parent == null) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tFile[] list = parent.listFiles();\n+\t\t\t\tif (list == null) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tfor (File f : list) {\n+\t\t\t\t\tString withoutExt = Algorithms.getFileNameWithoutExtension(f);\n+\t\t\t\t\tString sqliteExt = IndexConstants.SQLITE_EXT.replace(\".\", \"\");\n+\t\t\t\t\tITileSource cache = null;\n+\t\t\t\t\tif (withoutExt.equals(mapilaryCache.getName())) {\n+\t\t\t\t\t\tcache = mapilaryCache;\n+\t\t\t\t\t} else if (withoutExt.equals(mapilaryVector.getName())) {\n+\t\t\t\t\t\tcache = mapilaryVector;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (cache != null) {\n+\t\t\t\t\t\tif (f.isDirectory()) {\n+\t\t\t\t\t\t\tcache.deleteTiles(f.getPath());\n+\t\t\t\t\t\t} else if (Algorithms.getFileExtension(f).equals(sqliteExt)) {\n+\t\t\t\t\t\t\tSQLiteTileSource sqlTileSource = new SQLiteTileSource(getMyApplication(), f, TileSourceManager.getKnownSourceTemplates());\n+\t\t\t\t\t\t\tsqlTileSource.deleteTiles(f.getPath());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void clearHeightmapTiles(@NonNull LocalIndexInfo info) {\n+\t\t\tString filePath = info.getPathToData();\n+\t\t\tboolean heightmap = filePath.endsWith(IndexConstants.TIF_EXT);\n+\t\t\tMapRendererContext mapRendererContext = NativeCoreContext.getMapRendererContext();\n+\t\t\tif (heightmap && mapRendererContext != null) {\n+\t\t\t\tmapRendererContext.removeCachedHeightmapTiles(filePath);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \t@Override\n \tpublic void onUpdatedIndexesList() {\n \t\treloadData();\n", "next_change": {"commit": "a75ae7bb9967f7ee7c0102e30804fa5b8d8f9e61", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex 82ad4e9a21..75d0886bd3 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -283,230 +279,6 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \n \t}\n \n-\n-\tpublic static class LocalIndexOperationTask extends AsyncTask<LocalIndexInfo, LocalIndexInfo, String> {\n-\t\tprotected static int DELETE_OPERATION = 1;\n-\t\tprotected static int BACKUP_OPERATION = 2;\n-\t\tprotected static int RESTORE_OPERATION = 3;\n-\t\tprotected static int CLEAR_TILES_OPERATION = 4;\n-\n-\t\tprivate final int operation;\n-\t\tprivate final DownloadActivity a;\n-\t\tprivate final LocalIndexesAdapter listAdapter;\n-\n-\t\tpublic LocalIndexOperationTask(DownloadActivity a, LocalIndexesAdapter listAdapter, int operation) {\n-\t\t\tthis.a = a;\n-\t\t\tthis.listAdapter = listAdapter;\n-\t\t\tthis.operation = operation;\n-\t\t}\n-\n-\t\tprivate boolean move(File from, File to) {\n-\t\t\tif (!to.getParentFile().exists()) {\n-\t\t\t\tto.getParentFile().mkdirs();\n-\t\t\t}\n-\t\t\treturn from.renameTo(to);\n-\t\t}\n-\n-\t\tprivate File getFileToBackup(LocalIndexInfo i) {\n-\t\t\tif (!i.isBackupedData()) {\n-\t\t\t\treturn new File(getMyApplication().getAppPath(IndexConstants.BACKUP_INDEX_DIR), i.getFileName());\n-\t\t\t}\n-\t\t\treturn new File(i.getPathToData());\n-\t\t}\n-\n-\t\tprivate OsmandApplication getMyApplication() {\n-\t\t\treturn (OsmandApplication) a.getApplication();\n-\t\t}\n-\n-\n-\t\tprivate File getFileToRestore(LocalIndexInfo i) {\n-\t\t\tString fileName = i.getFileName();\n-\t\t\tif (i.isBackupedData()) {\n-\t\t\t\tFile parent = new File(i.getPathToData()).getParentFile();\n-\t\t\t\tif (i.getOriginalType() == LocalIndexType.MAP_DATA) {\n-\t\t\t\t\tif (fileName.endsWith(IndexConstants.BINARY_ROAD_MAP_INDEX_EXT)) {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.ROADS_INDEX_DIR);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.MAPS_PATH);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TILES_DATA) {\n-\t\t\t\t\tif (fileName.endsWith(IndexConstants.HEIGHTMAP_SQLITE_EXT)) {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.HEIGHTMAP_INDEX_DIR);\n-\t\t\t\t\t} else if (fileName.endsWith(IndexConstants.TIF_EXT)) {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.GEOTIFF_DIR);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.TILES_INDEX_DIR);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.SRTM_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.SRTM_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.WIKI_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.WIKI_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TRAVEL_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.WIKIVOYAGE_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.TTS_VOICE_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.VOICE_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.VOICE_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.VOICE_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.FONT_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.FONT_INDEX_DIR);\n-\t\t\t\t} else if (i.getOriginalType() == LocalIndexType.DEPTH_DATA) {\n-\t\t\t\t\tparent = getMyApplication().getAppPath(IndexConstants.NAUTICAL_INDEX_DIR);\n-\t\t\t\t}\n-\t\t\t\treturn new File(parent, fileName);\n-\t\t\t}\n-\t\t\treturn new File(i.getPathToData());\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected String doInBackground(LocalIndexInfo... params) {\n-\t\t\tint count = 0;\n-\t\t\tint total = 0;\n-\t\t\tfor (LocalIndexInfo info : params) {\n-\t\t\t\tif (!isCancelled()) {\n-\t\t\t\t\tboolean successfull = false;\n-\t\t\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\t\t\tFile f = new File(info.getPathToData());\n-\t\t\t\t\t\tsuccessfull = Algorithms.removeAllFiles(f);\n-\n-\t\t\t\t\t\tif (InAppPurchaseHelper.isSubscribedToLiveUpdates(getMyApplication())) {\n-\t\t\t\t\t\t\tString fileNameWithoutExtension =\n-\t\t\t\t\t\t\t\t\tAlgorithms.getFileNameWithoutExtension(f);\n-\t\t\t\t\t\t\tIncrementalChangesManager changesManager =\n-\t\t\t\t\t\t\t\t\tgetMyApplication().getResourceManager().getChangesManager();\n-\t\t\t\t\t\t\tchangesManager.deleteUpdates(fileNameWithoutExtension);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(info.getFileName());\n-\t\t\t\t\t\t\tFile tShm = new File(f.getParentFile(), f.getName() + \"-shm\");\n-\t\t\t\t\t\t\tFile tWal = new File(f.getParentFile(), f.getName() + \"-wal\");\n-\t\t\t\t\t\t\tif (tShm.exists()) {\n-\t\t\t\t\t\t\t\tAlgorithms.removeAllFiles(tShm);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tif (tWal.exists()) {\n-\t\t\t\t\t\t\t\tAlgorithms.removeAllFiles(tWal);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tclearMapillaryTiles(info);\n-\t\t\t\t\t\t\tclearHeightmapTiles(info);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (operation == RESTORE_OPERATION) {\n-\t\t\t\t\t\tsuccessfull = move(new File(info.getPathToData()), getFileToRestore(info));\n-\t\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\t\tinfo.setBackupedData(false);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (operation == BACKUP_OPERATION) {\n-\t\t\t\t\t\tsuccessfull = move(new File(info.getPathToData()), getFileToBackup(info));\n-\t\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\t\tinfo.setBackupedData(true);\n-\t\t\t\t\t\t\tgetMyApplication().getResourceManager().closeFile(info.getFileName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if (operation == CLEAR_TILES_OPERATION) {\n-\t\t\t\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n-\t\t\t\t\t\tif (src != null) {\n-\t\t\t\t\t\t\tsrc.deleteTiles(info.getPathToData());\n-\t\t\t\t\t\t\tclearMapillaryTiles(info);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\ttotal++;\n-\t\t\t\t\tif (successfull) {\n-\t\t\t\t\t\tcount++;\n-\t\t\t\t\t\tpublishProgress(info);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\ta.getDownloadThread().updateLoadedFiles();\n-\t\t\t}\n-\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\treturn a.getString(R.string.local_index_items_deleted, count, total);\n-\t\t\t} else if (operation == BACKUP_OPERATION) {\n-\t\t\t\treturn a.getString(R.string.local_index_items_backuped, count, total);\n-\t\t\t} else if (operation == RESTORE_OPERATION) {\n-\t\t\t\treturn a.getString(R.string.local_index_items_restored, count, total);\n-\t\t\t}\n-\n-\t\t\treturn \"\";\n-\t\t}\n-\n-\n-\t\t@Override\n-\t\tprotected void onProgressUpdate(LocalIndexInfo... values) {\n-\t\t\tif (listAdapter != null) {\n-\t\t\t\tif (operation == DELETE_OPERATION) {\n-\t\t\t\t\tlistAdapter.delete(values);\n-\t\t\t\t} else if (operation == BACKUP_OPERATION) {\n-\t\t\t\t\tlistAdapter.move(values, false);\n-\t\t\t\t} else if (operation == RESTORE_OPERATION) {\n-\t\t\t\t\tlistAdapter.move(values, true);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void onPreExecute() {\n-\t\t\ta.setProgressBarIndeterminateVisibility(true);\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void onPostExecute(String result) {\n-\t\t\ta.setProgressBarIndeterminateVisibility(false);\n-\t\t\tif (result != null && result.length() > 0) {\n-\t\t\t\tToast.makeText(a, result, Toast.LENGTH_LONG).show();\n-\t\t\t}\n-\n-\t\t\tif (operation == RESTORE_OPERATION || operation == BACKUP_OPERATION || operation == CLEAR_TILES_OPERATION) {\n-\t\t\t\ta.reloadLocalIndexes();\n-\t\t\t} else {\n-\t\t\t\ta.onUpdatedIndexesList();\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Clear tiles for both Mapillary sources together\n-\t\tprivate void clearMapillaryTiles(LocalIndexInfo info) {\n-\t\t\tITileSource src = (ITileSource) info.getAttachedObject();\n-\t\t\tITileSource mapilaryCache = TileSourceManager.getMapillaryCacheSource();\n-\t\t\tITileSource mapilaryVector = TileSourceManager.getMapillaryVectorSource();\n-\t\t\tif (src != null && (mapilaryVector.getName().equals(src.getName()) || mapilaryCache.getName().equals(src.getName()))) {\n-\t\t\t\tFile current = new File(info.getPathToData());\n-\t\t\t\tFile parent = current.getParentFile();\n-\t\t\t\tif (parent == null) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tFile[] list = parent.listFiles();\n-\t\t\t\tif (list == null) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tfor (File f : list) {\n-\t\t\t\t\tString withoutExt = Algorithms.getFileNameWithoutExtension(f);\n-\t\t\t\t\tString sqliteExt = IndexConstants.SQLITE_EXT.replace(\".\", \"\");\n-\t\t\t\t\tITileSource cache = null;\n-\t\t\t\t\tif (withoutExt.equals(mapilaryCache.getName())) {\n-\t\t\t\t\t\tcache = mapilaryCache;\n-\t\t\t\t\t} else if (withoutExt.equals(mapilaryVector.getName())) {\n-\t\t\t\t\t\tcache = mapilaryVector;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (cache != null) {\n-\t\t\t\t\t\tif (f.isDirectory()) {\n-\t\t\t\t\t\t\tcache.deleteTiles(f.getPath());\n-\t\t\t\t\t\t} else if (Algorithms.getFileExtension(f).equals(sqliteExt)) {\n-\t\t\t\t\t\t\tSQLiteTileSource sqlTileSource = new SQLiteTileSource(getMyApplication(), f, TileSourceManager.getKnownSourceTemplates());\n-\t\t\t\t\t\t\tsqlTileSource.deleteTiles(f.getPath());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate void clearHeightmapTiles(@NonNull LocalIndexInfo info) {\n-\t\t\tString filePath = info.getPathToData();\n-\t\t\tboolean heightmap = filePath.endsWith(IndexConstants.TIF_EXT);\n-\t\t\tMapRendererContext mapRendererContext = NativeCoreContext.getMapRendererContext();\n-\t\t\tif (heightmap && mapRendererContext != null) {\n-\t\t\t\tmapRendererContext.removeCachedHeightmapTiles(filePath);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n \t@Override\n \tpublic void onUpdatedIndexesList() {\n \t\treloadData();\n", "next_change": {"commit": "f4e5764e0b25b467832b48b9e2a493df28a2d0d3", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\nindex 75d0886bd3..bb6228e11c 100644\n--- a/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/ui/LocalIndexesFragment.java\n", "chunk": "@@ -281,6 +281,7 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment implement\n \n \t@Override\n \tpublic void onUpdatedIndexesList() {\n+\t\tselectedItems.clear();\n \t\treloadData();\n \t}\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}, {"oid": "30eac3412f9aff9204bd9addfa362f6a987114ce", "committedDate": "2020-05-25 15:45:36 +0300", "message": "Fix several possible exceptions"}, {"oid": "d254de8598df7352f13de38ede23560631866cb1", "committedDate": "2020-05-26 17:06:14 +0300", "message": "add/edit map source dialog redesign"}, {"oid": "6be3458ad3363a70a00138b61a11b2adc99f794c", "committedDate": "2020-05-27 09:59:47 +0300", "message": "Merge remote-tracking branch 'origin/master' into map_source_dialog_7658"}, {"oid": "2151028d2db0c8ed079aaade2adad04966a0d2f8", "committedDate": "2020-05-27 17:40:26 +0300", "message": "small refactor"}, {"oid": "f69dc384dc4b7652540458e0a7604a97b60480d8", "committedDate": "2020-05-28 11:43:03 +0300", "message": "refactor LocalIndexesFragment"}, {"oid": "0e93d406669788d3c3bad529d5deb6c3bee8f6f4", "committedDate": "2020-05-28 13:14:05 +0300", "message": "refactor renameFile"}, {"oid": "fac931e801cbc9ebe19b30b01576c40135283e5f", "committedDate": "2020-05-28 14:55:40 +0300", "message": "refactor SQLiteTileSource and FileUtils"}, {"oid": "3d6131cd65aaa163255e81a1b2f966ce2c78d38c", "committedDate": "2020-06-09 14:15:09 +0300", "message": "not show rename btn for TILES_DATA"}, {"oid": "83c99e01b7d3270f8ae02d5589b9cc42c8c454c3", "committedDate": "2020-08-07 13:28:48 +0300", "message": "Material theme (2)"}, {"oid": "9bed3254b6a7b9d1fc664102c23ea4f6547d49b7", "committedDate": "2020-08-11 16:52:54 -0400", "message": "Fix a bunch of deprecations"}, {"oid": "9792ff3414bd7c0ebe536d1046c6ddbc0c15f7a9", "committedDate": "2020-08-20 17:12:12 +0300", "message": "Fix Material Theme"}, {"oid": "9b287b81b3c8d9bea162aa532030c617788e97a4", "committedDate": "2020-11-06 14:23:37 +0200", "message": "Fix #9627 Long press opens 2 menus (Local Maps)"}, {"oid": "270e7e873d52d9ae30b7889e2a967d10d96cc8cb", "committedDate": "2020-11-19 15:17:52 -0500", "message": "Performance: 'Collection.toArray()' call style"}, {"oid": "643eaf3293105532bb0f1fd1034092774b7779b8", "committedDate": "2021-01-11 07:21:16 +0200", "message": "Add RenameFileBottomSheet"}, {"oid": "4b93539c255e9c9f9b9e5de12c36f0541d3cade3", "committedDate": "2021-03-01 22:10:09 +0500", "message": "Clean up and refactoring"}, {"oid": "1813a99da1c9ce0d0d5fccfa364df53c3ae9f746", "committedDate": "2021-04-05 19:21:17 +0300", "message": "add srtmf map download option p2"}, {"oid": "b14f62822bc31763285469eef2fb3dc706fb1cf2", "committedDate": "2021-04-09 19:48:17 +0300", "message": "add srtm map download option, refactoring p1"}, {"oid": "9368b7383a5647e285748c63a9db65bdd8d04b5f", "committedDate": "2021-04-12 20:14:27 +0300", "message": "Refactoring SRTMf download ui, part 1"}, {"oid": "1ec3189a86ed1b5e0467b832558453d9c5b272c6", "committedDate": "2021-04-13 00:42:16 +0300", "message": "refactoring p.2"}, {"oid": "4a6ab0c6bbf0531fe6874b06bb6e17164a50f7db", "committedDate": "2021-04-15 21:55:52 +0300", "message": "refactoring p.3"}, {"oid": "45be6b1919d2b8894db70ab0673bc4f87a6e6c33", "committedDate": "2021-04-16 12:04:19 +0300", "message": "refactoring p.4: save SrtmDownloadItem elements in MultipleDownloadItem"}, {"oid": "a0927452337049d62698b59a310c3241132aeaa9", "committedDate": "2021-06-18 02:59:29 +0500", "message": "Better naming"}, {"oid": "65a933ab95cb3680a2e1caba4abe8b3edfbf0ee9", "committedDate": "2021-07-07 14:21:32 +0300", "message": "Speedup backup status"}, {"oid": "be5216cd8d38887ea8d84752b1d2621ee7290f5d", "committedDate": "2021-08-09 22:44:02 +0300", "message": "Move getColor methods to separate class"}, {"oid": "c4461ba956bb57904150864f28f30a8d2656bf18", "committedDate": "2021-09-21 17:46:08 +0500", "message": "Allow selection of all TTS and downloaded recorded voices"}, {"oid": "63e4990b6d4843439f1c967f879ffc37d27692c4", "committedDate": "2021-09-21 19:33:23 +0500", "message": "Small refactoring to reduce checks"}, {"oid": "c0ac4e58193b95be4361315f2974b0c13024ef73", "committedDate": "2021-09-24 18:28:14 +0500", "message": "Fix #10664"}, {"oid": "602c6a5809fa5260c9f527bc5e5b689f887ff659", "committedDate": "2021-11-16 15:13:20 +0600", "message": "Accessibility content labeling fixes"}, {"oid": "6cfe33b29d921a16cac3fbad4f7dff15746cd6a4", "committedDate": "2021-11-30 08:25:56 +0500", "message": "Fix #13055 Capitalize toast for all languages"}, {"oid": "d1d898aea3d8a7cf66557b4ca8cfb92d68d9dd9a", "committedDate": "2021-12-07 16:55:16 +0500", "message": "Move plugin-related packages and classes to `net.osmand.plus.plugins`"}, {"oid": "22ed1fe832b96bf6f447c44ee4ea4274fe6120be", "committedDate": "2021-12-07 17:00:40 +0500", "message": "Move OsmandBaseExpandableListAdapter, OsmandListActivity to `net.osmand.plus.base`"}, {"oid": "c241bee06d974438725b578ef5430d7268a8311a", "committedDate": "2021-12-07 17:08:53 +0500", "message": "Move SQLiteTileSource to `net.osmand.plus.resources`"}, {"oid": "7202eaf9cf3e387296eec396958050a15be9d171", "committedDate": "2021-12-07 17:16:43 +0500", "message": "Move CustomRegion, LocalIndexInfo, LocalIndexHelper to `net.osmand.plus.download`"}, {"oid": "47a19dc1880f4fae81f19d428df344ce9c3f19df", "committedDate": "2021-12-08 00:22:33 +0500", "message": "Move AndroidNetworkUtils, AndroidUtils, ColorUtilities, FileUtils, JsonUtils, OsmAndFormatter, PicassoUtils, UiUtilities to `net.osmand.plus.utils`"}, {"oid": "079c80827b03de60644b9b2083527258bd575ed3", "committedDate": "2022-03-11 11:07:28 +0300", "message": "removed TTS files from download maps menu"}, {"oid": "50a8b145c0a30b146fc818f3feb6bd1767ea7631", "committedDate": "2022-03-11 14:48:58 +0300", "message": " boolean check fix"}, {"oid": "ddbefc27f7219fc6249a2d2283c08d9cb040f760", "committedDate": "2022-03-11 18:30:37 +0200", "message": "Refactor and simplify ContextMenuAdapter and related classes"}, {"oid": "7596d4e71af9f1969f2a7d1140c96c5dca8e9e3f", "committedDate": "2022-03-12 16:16:27 +0200", "message": "Refactor and simplify ContextMenuAdapter and related classes p.2"}, {"oid": "22ffb162a5f035a4a6e6fb03d5db00f9e3e24057", "committedDate": "2022-03-12 16:20:50 +0200", "message": "Improve packaging"}, {"oid": "d39ca43583442d88f4c88342709e1aaccf4d36e1", "committedDate": "2022-03-21 14:54:22 +0200", "message": "Rename packages"}, {"oid": "e49fc0479bae7df6e6a80c849bb2b8e9a1a4bd77", "committedDate": "2022-03-23 17:45:43 +0200", "message": "Refactor and simplify ContextMenuAdapter and related classes p.3"}, {"oid": "8df8cd23a3ca87a8f0aaecdf55e67e86ee204e82", "committedDate": "2022-06-28 10:23:01 +0300", "message": "Fix \u211614661"}, {"oid": "17ce0223c5aef235645b92bd0430f721496b091f", "committedDate": "2022-06-28 12:15:39 +0300", "message": "Review fixes"}, {"oid": "f1dcc4d7206c501d152bced637217b65cc20ff84", "committedDate": "2022-07-15 22:09:41 +0300", "message": "Clean redundant fields initialisation"}, {"oid": "4e025d0ef6df0b52003b6aa39e6658b0a5dfa4a5", "committedDate": "2022-07-15 23:07:36 +0300", "message": "Remove unnecessary final modifier from local variables"}, {"oid": "eaca4a4b32a5445df654b1bbe8d2e3241eba01e3", "committedDate": "2022-07-29 15:58:38 +0300", "message": "Clear Mapillary cache"}, {"oid": "2034b9a6d304784f83fd8fa7cc3204e8519585d4", "committedDate": "2022-08-01 12:16:08 +0300", "message": "Fix on/off, filters, set limit for lines rendering"}, {"oid": "3f29fe541d8b6e554d7ccb79e16d96b594f4f246", "committedDate": "2022-08-01 18:06:41 +0300", "message": "Fix review"}, {"oid": "bd0d2d4180059122624e0fac64e8188f7c06d582", "committedDate": "2022-08-01 18:14:16 +0300", "message": "Merge pull request #14955 from osmandapp/issue_1398"}, {"oid": "c505ae7fd9fb7ffc4ba1048f7e0bd6f80aa691e3", "committedDate": "2022-08-17 17:02:19 +0300", "message": "Fix possible npe with deletion of heatmaps"}, {"oid": "3c1cdc46040eb25741d09be4632e4799282aefdd", "committedDate": "2022-08-17 18:21:44 +0300", "message": "Add heightmaps to local downloads"}, {"oid": "29c3d285fd9a440f6866e2fff15efdeb43341abb", "committedDate": "2022-09-26 17:48:08 +0300", "message": "Implement support for new Nautical Depth maps"}, {"oid": "6ead04964f0cea586f14c52e2d5d3032173727e8", "committedDate": "2022-09-30 14:46:08 +0300", "message": "Move static plugin methods to separate file PluginsHelper"}, {"oid": "6c680cd81f4f1627b8cd252976ef064c6509a340", "committedDate": "2023-01-31 15:57:49 +0500", "message": "Add .tif support to UI osmandapp/OsmAnd-Issues#1592"}, {"oid": "9867d5a6cc9ee1c5019cc4a091df95243b624698", "committedDate": "2023-02-20 16:48:06 +0300", "message": "Offline weather API refactoring"}, {"oid": "bdb5a7beca13c4324867d91d62188ea7afc00881", "committedDate": "2023-03-14 14:41:33 +0500", "message": "[OpenGL] Support slope/hillshade from 3D maps osmandapp/OsmAnd-Issues#1849"}, {"oid": "a75ae7bb9967f7ee7c0102e30804fa5b8d8f9e61", "committedDate": "2023-03-20 17:17:41 +0200", "message": "Merge branch 'master' into OfflineWeatherAndroid"}, {"oid": "f4e5764e0b25b467832b48b9e2a493df28a2d0d3", "committedDate": "2023-04-11 18:50:39 +0300", "message": "Fix checkbox does not disappear when do the same action"}, {"oid": "a8a23bbce878c5e8fb51702f0978ed89c74510d1", "committedDate": "2023-05-05 10:44:46 +0300", "message": "Remove unused imports"}, {"oid": "c00846ba913124cbb14aa7eef9734c94b2f35cc4", "committedDate": "2023-05-09 03:07:16 +0300", "message": "#1964: Refactored using nightmode detection; update ui on noghtmode change"}, {"oid": "d1f67ec36e6fa19ba7ae5afc5c27e10292682b44", "committedDate": "2023-05-18 14:31:15 +0300", "message": "Add access to app, settings and nightMode from BaseOsmAndFragment"}, {"oid": "f774e1f6deae6837d105d2fbb57c724c7b3a23cd", "committedDate": "2023-05-21 15:50:45 +0300", "message": "Update \"Night Mode\" in the appropriate place"}]}, {"oid": "ccc98d8c8786f074fd9f7aaef05636384338fbd0", "url": "https://github.com/osmandapp/OsmAnd/commit/ccc98d8c8786f074fd9f7aaef05636384338fbd0", "message": "Merge branches 'create_custom_poi' and 'master' of https://github.com/osmandapp/Osmand into create_custom_poi", "committedDate": "2020-05-15T09:42:46Z", "type": "commit"}, {"oid": "3a800d252053003f3f408d8b60319194fe31788a", "url": "https://github.com/osmandapp/OsmAnd/commit/3a800d252053003f3f408d8b60319194fe31788a", "message": "refactor poi cache db", "committedDate": "2020-05-18T08:24:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjIwNA==", "url": "https://github.com/osmandapp/OsmAnd/pull/8918#discussion_r426612204", "body": "? \r\nIterate in the loop over and check each subtype, it should be faster", "bodyText": "?\nIterate in the loop over and check each subtype, it should be faster", "bodyHTML": "<p dir=\"auto\">?<br>\nIterate in the loop over and check each subtype, it should be faster</p>", "author": "vshcherb", "createdAt": "2020-05-18T13:08:03Z", "path": "OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java", "diffHunk": "@@ -9,27 +10,79 @@\n import net.osmand.binary.BinaryMapIndexReader.MapIndex;\n import net.osmand.binary.BinaryMapIndexReader.SearchPoiTypeFilter;\n import net.osmand.binary.BinaryMapIndexReader.SearchRequest;\n+import net.osmand.binary.BinaryMapPoiReaderAdapter;\n import net.osmand.data.Amenity;\n+import net.osmand.osm.MapPoiTypes;\n import net.osmand.osm.PoiCategory;\n+import net.osmand.plus.OsmandApplication;\n+import net.osmand.plus.poi.PoiFiltersHelper;\n import net.osmand.plus.resources.ResourceManager.BinaryMapReaderResource;\n import net.osmand.plus.resources.ResourceManager.BinaryMapReaderResourceType;\n import net.osmand.util.MapUtils;\n \n import org.apache.commons.logging.Log;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n public class AmenityIndexRepositoryBinary implements AmenityIndexRepository {\n \n \tprivate final static Log log = PlatformUtil.getLog(AmenityIndexRepositoryBinary.class);\n \tprivate BinaryMapReaderResource resource;\n+\tprivate MapPoiTypes poiTypes;\n+\tprivate Map<String, List<String>> poiCategories = new HashMap<>();\n \n-\tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource) {\n+\tpublic AmenityIndexRepositoryBinary(BinaryMapReaderResource resource, OsmandApplication app) {\n \t\tthis.resource = resource;\n+\t\tpoiTypes = app.getPoiTypes();\n+\t\tcheckCachedCategories(app.getPoiFilters());\n+\t}\n+\n+\tpublic Map<String, List<String>> getPoiCategories() {\n+\t\treturn poiCategories;\n+\t}\n+\n+\tprivate void checkCachedCategories(PoiFiltersHelper poiFiltersHelper) {\n+\t\tString fileName = resource.getFileName();\n+\t\tlong lastModified = resource.getFileLastModified();\n+\t\tPair<Long, Map<String, List<String>>> cache = poiFiltersHelper.getCacheByResourceName(fileName);\n+\t\tif (cache == null || cache.first != null && cache.first != lastModified) {\n+\t\t\ttry {\n+\t\t\t\tBinaryMapIndexReader reader = getOpenFile();\n+\t\t\t\tif (reader != null) {\n+\t\t\t\t\treader.initCategories();\n+\t\t\t\t\tList<BinaryMapPoiReaderAdapter.PoiRegion> regions = reader.getPoiIndexes();\n+\t\t\t\t\tfor (BinaryMapPoiReaderAdapter.PoiRegion region : regions) {\n+\t\t\t\t\t\tList<String> categories = region.getCategories();\n+\t\t\t\t\t\tList<List<String>> subCategories = region.getSubcategories();\n+\t\t\t\t\t\tfor (int i = 0; i < categories.size(); i++) {\n+\t\t\t\t\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categories.get(i));\n+\t\t\t\t\t\t\tSet<String> filters = new HashSet<>(subCategories.get(i));", "originalCommit": "3a800d252053003f3f408d8b60319194fe31788a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c906fcab5b28e7c000ad4bc0308f9e34e8d741b1", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java b/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\nindex 59d60a5872..930012f998 100644\n--- a/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\n+++ b/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\n", "chunk": "@@ -53,35 +51,54 @@ public class AmenityIndexRepositoryBinary implements AmenityIndexRepository {\n \t\tlong lastModified = resource.getFileLastModified();\n \t\tPair<Long, Map<String, List<String>>> cache = poiFiltersHelper.getCacheByResourceName(fileName);\n \t\tif (cache == null || cache.first != null && cache.first != lastModified) {\n+\t\t\tdeltaPoiCategories = new HashMap<>();\n \t\t\ttry {\n \t\t\t\tBinaryMapIndexReader reader = getOpenFile();\n \t\t\t\tif (reader != null) {\n \t\t\t\t\treader.initCategories();\n \t\t\t\t\tList<BinaryMapPoiReaderAdapter.PoiRegion> regions = reader.getPoiIndexes();\n \t\t\t\t\tfor (BinaryMapPoiReaderAdapter.PoiRegion region : regions) {\n-\t\t\t\t\t\tList<String> categories = region.getCategories();\n-\t\t\t\t\t\tList<List<String>> subCategories = region.getSubcategories();\n-\t\t\t\t\t\tfor (int i = 0; i < categories.size(); i++) {\n-\t\t\t\t\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categories.get(i));\n-\t\t\t\t\t\t\tSet<String> filters = new HashSet<>(subCategories.get(i));\n-\t\t\t\t\t\t\tList<String> keys = poiCategory.getPoiTypesKeys();\n-\t\t\t\t\t\t\tfilters.removeAll(keys);\n-\t\t\t\t\t\t\tif (!filters.isEmpty()) {\n-\t\t\t\t\t\t\t\tpoiCategories.put(categories.get(i), new ArrayList<>(filters));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tcalculateDeltaSubcategories(region);\n \t\t\t\t\t}\n \t\t\t\t\tif (cache == null) {\n-\t\t\t\t\t\tpoiFiltersHelper.insertCacheForResource(fileName, lastModified, poiCategories);\n+\t\t\t\t\t\tpoiFiltersHelper.insertCacheForResource(fileName, lastModified, deltaPoiCategories);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tpoiFiltersHelper.updateCacheForResource(fileName, lastModified, poiCategories);\n+\t\t\t\t\t\tpoiFiltersHelper.updateCacheForResource(fileName, lastModified, deltaPoiCategories);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tlog.error(\"Error initializing categories \", e);\n \t\t\t}\n \t\t} else if (cache.second != null) {\n-\t\t\tpoiCategories = cache.second;\n+\t\t\tdeltaPoiCategories = cache.second;\n+\t\t}\n+\t}\n+\n+\tprivate void calculateDeltaSubcategories(BinaryMapPoiReaderAdapter.PoiRegion region) {\n+\t\tList<String> categories = region.getCategories();\n+\t\tList<List<String>> subCategories = region.getSubcategories();\n+\t\tfor (int i = 0; i < categories.size(); i++) {\n+\t\t\tString categoryName = categories.get(i);\n+\n+\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categoryName);\n+\t\t\tList<String> deltaSubCategories = null;\n+\t\t\tfor (List<String> subList : subCategories) {\n+\t\t\t\tfor (String subCategory : subList) {\n+\t\t\t\t\tif (poiCategory.getPoiTypeByKeyName(subCategory) != null) {\n+\t\t\t\t\t\tif (deltaSubCategories == null) {\n+\t\t\t\t\t\t\tdeltaSubCategories = new ArrayList<>();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdeltaSubCategories.add(subCategory);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (deltaSubCategories != null) {\n+\t\t\t\tif(deltaPoiCategories.containsKey(categoryName)) {\n+\t\t\t\t\tdeltaPoiCategories.get(categoryName).addAll(deltaSubCategories);\n+\t\t\t\t} else {\n+\t\t\t\t\tdeltaPoiCategories.put(categoryName, deltaSubCategories);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "392d69dd66278e9a6417c03c03e7496a64554773", "changed_code": [{"header": "diff --git a/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java b/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\nindex 59d60a5872..930012f998 100644\n--- a/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\n+++ b/OsmAnd/src/net/osmand/plus/resources/AmenityIndexRepositoryBinary.java\n", "chunk": "@@ -53,35 +51,54 @@ public class AmenityIndexRepositoryBinary implements AmenityIndexRepository {\n \t\tlong lastModified = resource.getFileLastModified();\n \t\tPair<Long, Map<String, List<String>>> cache = poiFiltersHelper.getCacheByResourceName(fileName);\n \t\tif (cache == null || cache.first != null && cache.first != lastModified) {\n+\t\t\tdeltaPoiCategories = new HashMap<>();\n \t\t\ttry {\n \t\t\t\tBinaryMapIndexReader reader = getOpenFile();\n \t\t\t\tif (reader != null) {\n \t\t\t\t\treader.initCategories();\n \t\t\t\t\tList<BinaryMapPoiReaderAdapter.PoiRegion> regions = reader.getPoiIndexes();\n \t\t\t\t\tfor (BinaryMapPoiReaderAdapter.PoiRegion region : regions) {\n-\t\t\t\t\t\tList<String> categories = region.getCategories();\n-\t\t\t\t\t\tList<List<String>> subCategories = region.getSubcategories();\n-\t\t\t\t\t\tfor (int i = 0; i < categories.size(); i++) {\n-\t\t\t\t\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categories.get(i));\n-\t\t\t\t\t\t\tSet<String> filters = new HashSet<>(subCategories.get(i));\n-\t\t\t\t\t\t\tList<String> keys = poiCategory.getPoiTypesKeys();\n-\t\t\t\t\t\t\tfilters.removeAll(keys);\n-\t\t\t\t\t\t\tif (!filters.isEmpty()) {\n-\t\t\t\t\t\t\t\tpoiCategories.put(categories.get(i), new ArrayList<>(filters));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tcalculateDeltaSubcategories(region);\n \t\t\t\t\t}\n \t\t\t\t\tif (cache == null) {\n-\t\t\t\t\t\tpoiFiltersHelper.insertCacheForResource(fileName, lastModified, poiCategories);\n+\t\t\t\t\t\tpoiFiltersHelper.insertCacheForResource(fileName, lastModified, deltaPoiCategories);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tpoiFiltersHelper.updateCacheForResource(fileName, lastModified, poiCategories);\n+\t\t\t\t\t\tpoiFiltersHelper.updateCacheForResource(fileName, lastModified, deltaPoiCategories);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t} catch (IOException e) {\n \t\t\t\tlog.error(\"Error initializing categories \", e);\n \t\t\t}\n \t\t} else if (cache.second != null) {\n-\t\t\tpoiCategories = cache.second;\n+\t\t\tdeltaPoiCategories = cache.second;\n+\t\t}\n+\t}\n+\n+\tprivate void calculateDeltaSubcategories(BinaryMapPoiReaderAdapter.PoiRegion region) {\n+\t\tList<String> categories = region.getCategories();\n+\t\tList<List<String>> subCategories = region.getSubcategories();\n+\t\tfor (int i = 0; i < categories.size(); i++) {\n+\t\t\tString categoryName = categories.get(i);\n+\n+\t\t\tPoiCategory poiCategory = poiTypes.getPoiCategoryByName(categoryName);\n+\t\t\tList<String> deltaSubCategories = null;\n+\t\t\tfor (List<String> subList : subCategories) {\n+\t\t\t\tfor (String subCategory : subList) {\n+\t\t\t\t\tif (poiCategory.getPoiTypeByKeyName(subCategory) != null) {\n+\t\t\t\t\t\tif (deltaSubCategories == null) {\n+\t\t\t\t\t\t\tdeltaSubCategories = new ArrayList<>();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tdeltaSubCategories.add(subCategory);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (deltaSubCategories != null) {\n+\t\t\t\tif(deltaPoiCategories.containsKey(categoryName)) {\n+\t\t\t\t\tdeltaPoiCategories.get(categoryName).addAll(deltaSubCategories);\n+\t\t\t\t} else {\n+\t\t\t\t\tdeltaPoiCategories.put(categoryName, deltaSubCategories);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t}\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "392d69dd66278e9a6417c03c03e7496a64554773", "message": "Merge commit", "committedDate": null}, {"oid": "0682d3b3bcab4c4cbd57672160aa1b03441f0b0b", "committedDate": "2020-05-18 17:00:05 +0300", "message": "fix subCategories"}, {"oid": "ea9863991d4d3c85870dc71f5b6f48e398f329be", "committedDate": "2020-05-18 17:04:25 +0300", "message": "remove unused imports"}, {"oid": "7b03bf474b22f3d27a02f4b3ef4201c131b842d6", "committedDate": "2021-07-27 02:42:45 +0300", "message": "Add travel routes preferences"}, {"oid": "27b3f813e48b9a68d41b09607a95cbecfa19e5b5", "committedDate": "2021-07-27 13:16:30 +0300", "message": "Remove travel types"}, {"oid": "690198a740ce870fe6a434df974bb7b7d0f97fcc", "committedDate": "2021-08-26 00:23:03 +0300", "message": "Remove unused imports and methods"}, {"oid": "f41ef670a3a666ddb3477124e97673b93cef7fa5", "committedDate": "2021-09-16 23:32:15 +0300", "message": "[WIP] Travel routes"}, {"oid": "809640f126cf3472ad3e74fbf58d2f9ba44f5652", "committedDate": "2022-07-15 21:52:56 +0300", "message": "Fix missorted modifiers"}, {"oid": "bef177c5d7a415b747e377b7ff2cda844bb6c05f", "committedDate": "2022-07-15 22:06:47 +0300", "message": "Update final fields"}, {"oid": "4e025d0ef6df0b52003b6aa39e6658b0a5dfa4a5", "committedDate": "2022-07-15 23:07:36 +0300", "message": "Remove unnecessary final modifier from local variables"}]}, {"oid": "c906fcab5b28e7c000ad4bc0308f9e34e8d741b1", "url": "https://github.com/osmandapp/OsmAnd/commit/c906fcab5b28e7c000ad4bc0308f9e34e8d741b1", "message": "Small refactoring", "committedDate": "2020-05-18T13:20:30Z", "type": "commit"}]}