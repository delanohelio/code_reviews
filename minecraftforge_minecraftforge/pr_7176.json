{"pr_number": 7176, "pr_title": "[1.16] IForgeBlock#getToolModifiedState (Handling Axe, Hoe, and Shovel Right Click)", "pr_createdAt": "2020-07-26T05:37:27Z", "pr_url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176", "merge_commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTQ1OQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571459", "body": "Return the original state if you can't find a modified one, not null.", "bodyText": "Return the original state if you can't find a modified one, not null.", "bodyHTML": "<p dir=\"auto\">Return the original state if you can't find a modified one, not null.</p>", "author": "Lanse505", "createdAt": "2020-07-26T20:44:50Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,37 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();\n+    \tif(tool.contains(ToolType.AXE)) {\n+    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n+    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n+    \t}\n+    \tif(tool.contains(ToolType.HOE)) {\n+    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n+    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState != null) return modifiedState;\n+    \t}\n+    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n+    \t\treturn modifiedState;\n+    \t}\n+    \treturn null;", "originalCommit": "17947576efdc1ccd5c794c8eebe7aea41819960a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTcxOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571719", "bodyText": "The reason I return null is that AxeItem, HoeItem, and ShovelItem all check if the block isn't in the list by comparing the result to null.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T20:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTk4NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571984", "bodyText": "Hmm, that's fair enough.", "author": "Lanse505", "createdAt": "2020-07-26T20:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..6820873bf 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -890,37 +887,4 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param state The current state\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 6820873bf..38d9484f9 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -887,4 +890,37 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();\n+    \tif(tool.contains(ToolType.AXE)) {\n+    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n+    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n+    \t}\n+    \tif(tool.contains(ToolType.HOE)) {\n+    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n+    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState != null) return modifiedState;\n+    \t}\n+    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n+    \t\treturn modifiedState;\n+    \t}\n+    \treturn null;\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..120e5637c 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,20 +904,21 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n     {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n+    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n+    \tif(eventState != state) return eventState;\n+    \tif(toolTypes.contains(ToolType.AXE)) {\n     \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block == null && toolTypes.size() == 1) return null;\n     \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n     \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n+    \tif(toolTypes.contains(ToolType.HOE)) {\n     \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n     \t\tif(modifiedState != null) return modifiedState;\n     \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n     \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n     \t\treturn modifiedState;\n     \t}\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..8413392c7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,24 +901,8 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 8413392c7..0f407038d 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -903,6 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n     }\n }\n", "next_change": {"commit": "cf5eb295546d3f5ef59f699e9342b7b54728d39d", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0f407038d..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -906,8 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n-        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n-        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTU3NQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460571575", "body": "I'd say fire the event here, at the beginning and if it returns not the original state, then return that state.\r\nOtherwise continue.", "bodyText": "I'd say fire the event here, at the beginning and if it returns not the original state, then return that state.\nOtherwise continue.", "bodyHTML": "<p dir=\"auto\">I'd say fire the event here, at the beginning and if it returns not the original state, then return that state.<br>\nOtherwise continue.</p>", "author": "Lanse505", "createdAt": "2020-07-26T20:45:35Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,37 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();", "originalCommit": "17947576efdc1ccd5c794c8eebe7aea41819960a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Njk1MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460576951", "bodyText": "I've added the event.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3MTU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..6820873bf 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -890,37 +887,4 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param state The current state\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 6820873bf..38d9484f9 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -887,4 +890,37 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();\n+    \tif(tool.contains(ToolType.AXE)) {\n+    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n+    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n+    \t}\n+    \tif(tool.contains(ToolType.HOE)) {\n+    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n+    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState != null) return modifiedState;\n+    \t}\n+    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n+    \t\treturn modifiedState;\n+    \t}\n+    \treturn null;\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..120e5637c 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,20 +904,21 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n     {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n+    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n+    \tif(eventState != state) return eventState;\n+    \tif(toolTypes.contains(ToolType.AXE)) {\n     \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block == null && toolTypes.size() == 1) return null;\n     \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n     \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n+    \tif(toolTypes.contains(ToolType.HOE)) {\n     \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n     \t\tif(modifiedState != null) return modifiedState;\n     \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n     \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n     \t\treturn modifiedState;\n     \t}\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..8413392c7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,24 +901,8 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 8413392c7..0f407038d 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -903,6 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n     }\n }\n", "next_change": {"commit": "cf5eb295546d3f5ef59f699e9342b7b54728d39d", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0f407038d..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -906,8 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n-        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n-        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577087", "body": "There really should be a private final originalState, so there is always a clean reference to the originalState.", "bodyText": "There really should be a private final originalState, so there is always a clean reference to the originalState.", "bodyHTML": "<p dir=\"auto\">There really should be a private final originalState, so there is always a clean reference to the originalState.</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:44:33Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ1MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577450", "bodyText": "I extended BlockEvent, which holds a private final originalState.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ5Ng==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577496", "bodyText": "Ah fair enough, ignore me :P", "author": "Lanse505", "createdAt": "2020-07-26T21:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzY4OQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577689", "bodyText": "You can resolve this", "author": "Lanse505", "createdAt": "2020-07-26T21:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,47 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzE0OQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577149", "body": "Should probably just be state. (Nitpicky)", "bodyText": "Should probably just be state. (Nitpicky)", "bodyHTML": "<p dir=\"auto\">Should probably just be state. (Nitpicky)</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:44:58Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzUzNQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577535", "bodyText": "Referenced as finalState to know the diference between getState and getFinalState in code. However, I can change to state. (less nitpicky)", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYyNA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577624", "bodyText": "You can resolve this, it's valid since there is already a getState, setState, and original state things.", "author": "Lanse505", "createdAt": "2020-07-26T21:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,47 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzI3MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577271", "body": "All the getter lines are wrong formatting should be same line getters.\r\ni.e. \r\n```\r\npublic PlayerEntity getPlayer() { return player; }\r\n```", "bodyText": "All the getter lines are wrong formatting should be same line getters.\ni.e.\npublic PlayerEntity getPlayer() { return player; }", "bodyHTML": "<p dir=\"auto\">All the getter lines are wrong formatting should be same line getters.<br>\ni.e.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public PlayerEntity getPlayer() { return player; }\n\"><pre><code>public PlayerEntity getPlayer() { return player; }\n</code></pre></div>", "author": "Lanse505", "createdAt": "2020-07-26T21:46:23Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Nzg4MA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577880", "bodyText": "Most of the formatting for BlockEvent is incorrect then.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Nzk0MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577941", "bodyText": "I might be wrong, but that's how I've been told my triage in the past to format the getters/setters.", "author": "Lanse505", "createdAt": "2020-07-26T21:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,47 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM2Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577363", "body": "I'd say as above change it to state and getState and setState.", "bodyText": "I'd say as above change it to state and getState and setState.", "bodyHTML": "<p dir=\"auto\">I'd say as above change it to state and getState and setState.</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:47:29Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzU1Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577553", "bodyText": "You can resolve this", "author": "Lanse505", "createdAt": "2020-07-26T21:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYxOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577619", "bodyText": "Extends BlockEvent. Cannot use getState. Better to specify what it does though. Can rename setFinalState to setState though if still wanted.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,47 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577371", "body": "I'd say as above change it to state and getState and setState.", "bodyText": "I'd say as above change it to state and getState and setState.", "bodyHTML": "<p dir=\"auto\">I'd say as above change it to state and getState and setState.</p>", "author": "Lanse505", "createdAt": "2020-07-26T21:47:35Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +444,47 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()", "originalCommit": "659eb51679e339ae14693c20d2d72aeb3e88251d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzU1NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460577554", "bodyText": "You can resolve this", "author": "Lanse505", "createdAt": "2020-07-26T21:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODA4NQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460578085", "bodyText": "Extends BlockEvent. Cannot use getState. Better to specify what it does though.", "author": "ChampionAsh5357", "createdAt": "2020-07-26T21:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODEyOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r460578128", "bodyText": "once again, you can mark all of these comments as resolved now Champion :P", "author": "Lanse505", "createdAt": "2020-07-26T21:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,47 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n-\t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTM1OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461045358", "body": "Brackets should be on a new line, and four spaces should be used instead of using tabs.", "bodyText": "Brackets should be on a new line, and four spaces should be used instead of using tabs.", "bodyHTML": "<p dir=\"auto\">Brackets should be on a new line, and four spaces should be used instead of using tabs.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:17:18Z", "path": "src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package net.minecraftforge.debug.block;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.BlockEvent.BlockToolInteractEvent;\n+import net.minecraftforge.fml.common.Mod;\n+\n+@Mod(\"tool_interact_test\")\n+public class ToolInteractTest {", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\ndeleted file mode 100644\nindex 6d24c4b4a..000000000\n--- a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\n+++ /dev/null\n", "chunk": "@@ -1,34 +0,0 @@\n-package net.minecraftforge.debug.block;\n-\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-import net.minecraftforge.common.MinecraftForge;\n-import net.minecraftforge.event.world.BlockEvent.BlockToolInteractEvent;\n-import net.minecraftforge.fml.common.Mod;\n-\n-@Mod(\"tool_interact_test\")\n-public class ToolInteractTest {\n-\n-\tprivate static final Logger LOGGER = LogManager.getLogger();\n-\t\n-\tpublic ToolInteractTest() {\n-\t\tMinecraftForge.EVENT_BUS.addListener(this::onToolInteraction);\n-\t}\n-\t\n-\tprivate void onToolInteraction(final BlockToolInteractEvent event) {\n-\t\t//Test 1: No Changes, just test if event is called. State and Final State should be the same\n-\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n-\t\t\n-\t\t\n-\t\t//Test 2: Canceling, nothing in game should change\n-\t\t/*event.setCanceled(true);\n-\t\tLOGGER.info(\"Event has been canceled: {}\", event.isCanceled());\n-\t\t*/\n-\t\t\n-\t\t//Test 3: Altering\n-\t\t/*event.setFinalState(Blocks.ACACIA_FENCE.getDefaultState());\n-\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n-\t\t*/\n-\t}\n-}\n", "next_change": {"commit": "e5c9967874ba78aacc0af154475ad9a451263eee", "changed_code": [{"header": "diff --git a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\nnew file mode 100644\nindex 000000000..6d24c4b4a\n--- /dev/null\n+++ b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\n", "chunk": "@@ -0,0 +1,34 @@\n+package net.minecraftforge.debug.block;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.BlockEvent.BlockToolInteractEvent;\n+import net.minecraftforge.fml.common.Mod;\n+\n+@Mod(\"tool_interact_test\")\n+public class ToolInteractTest {\n+\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\t\n+\tpublic ToolInteractTest() {\n+\t\tMinecraftForge.EVENT_BUS.addListener(this::onToolInteraction);\n+\t}\n+\t\n+\tprivate void onToolInteraction(final BlockToolInteractEvent event) {\n+\t\t//Test 1: No Changes, just test if event is called. State and Final State should be the same\n+\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n+\t\t\n+\t\t\n+\t\t//Test 2: Canceling, nothing in game should change\n+\t\t/*event.setCanceled(true);\n+\t\tLOGGER.info(\"Event has been canceled: {}\", event.isCanceled());\n+\t\t*/\n+\t\t\n+\t\t//Test 3: Altering\n+\t\t/*event.setFinalState(Blocks.ACACIA_FENCE.getDefaultState());\n+\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n+\t\t*/\n+\t}\n+}\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\nindex 6d24c4b4a..a277c6f3b 100644\n--- a/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\n+++ b/src/test/java/net/minecraftforge/debug/block/ToolInteractTest.java\n", "chunk": "@@ -8,27 +8,29 @@ import net.minecraftforge.event.world.BlockEvent.BlockToolInteractEvent;\n import net.minecraftforge.fml.common.Mod;\n \n @Mod(\"tool_interact_test\")\n-public class ToolInteractTest {\n+public class ToolInteractTest\n+{\n \n-\tprivate static final Logger LOGGER = LogManager.getLogger();\n+    private static final Logger LOGGER = LogManager.getLogger();\n \t\n-\tpublic ToolInteractTest() {\n-\t\tMinecraftForge.EVENT_BUS.addListener(this::onToolInteraction);\n-\t}\n+    public ToolInteractTest()\n+    {\n+        MinecraftForge.EVENT_BUS.addListener(this::onToolInteraction);\n+    }\n \t\n-\tprivate void onToolInteraction(final BlockToolInteractEvent event) {\n-\t\t//Test 1: No Changes, just test if event is called. State and Final State should be the same\n-\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n-\t\t\n-\t\t\n-\t\t//Test 2: Canceling, nothing in game should change\n-\t\t/*event.setCanceled(true);\n-\t\tLOGGER.info(\"Event has been canceled: {}\", event.isCanceled());\n-\t\t*/\n-\t\t\n-\t\t//Test 3: Altering\n-\t\t/*event.setFinalState(Blocks.ACACIA_FENCE.getDefaultState());\n-\t\tLOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n-\t\t*/\n-\t}\n+    private void onToolInteraction(final BlockToolInteractEvent event)\n+    {\n+        //Test 1: No Changes, just test if event is called. State and Final State should be the same\n+        LOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n+\n+        //Test 2: Canceling, nothing in game should change\n+        /*event.setCanceled(true);\n+        LOGGER.info(\"Event has been canceled: {}\", event.isCanceled());\n+        */\n+\n+        //Test 3: Altering\n+        /*event.setFinalState(Blocks.ACACIA_FENCE.getDefaultState());\n+        LOGGER.info(\"BlockState {} is modified to {} at position {} by {} with {}\", event.getState(), event.getFinalState(), event.getPos(), event.getPlayer(), event.getHeldItemStack());\n+        */\n+    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTk5OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461045998", "body": "Brackets should be on a new line, and four spaces should be used instead of using tabs. This added event has a mix of tabs/spaces and also brackets on the same line some of which having the bracket the body and the closing bracket even being on the same line.", "bodyText": "Brackets should be on a new line, and four spaces should be used instead of using tabs. This added event has a mix of tabs/spaces and also brackets on the same line some of which having the bracket the body and the closing bracket even being on the same line.", "bodyHTML": "<p dir=\"auto\">Brackets should be on a new line, and four spaces should be used instead of using tabs. This added event has a mix of tabs/spaces and also brackets on the same line some of which having the bracket the body and the closing bracket even being on the same line.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:18:23Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +447,39 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -447,39 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjgwOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461046808", "body": "Brackets should be on a new line, and four spaces should be used instead of using tabs. Also change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "Brackets should be on a new line, and four spaces should be used instead of using tabs. Also change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">Brackets should be on a new line, and four spaces should be used instead of using tabs. Also change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:19:47Z", "path": "src/main/java/net/minecraftforge/event/ForgeEventFactory.java", "diffHunk": "@@ -358,6 +360,13 @@ public static int onHoeUse(ItemUseContext context)\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex e8e11e492..ce29c1dfc 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -360,13 +359,6 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n-    \n-    @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n-    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n-    \treturn event.getFinalState();\n-    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex ce29c1dfc..811bd5e15 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -359,6 +360,13 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack) {\n+    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack);\n+    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n+    \treturn event.getFinalState();\n+    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 811bd5e15..4424add9f 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -362,8 +363,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack);\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n+    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n     \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n     \treturn event.getFinalState();\n     }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 4424add9f..c2c6cec88 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,10 +363,10 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n-    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n-    \treturn event.getFinalState();\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n+        if(MinecraftForge.EVENT_BUS.post(event)) return null;\n+        return event.getFinalState();\n     }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n", "next_change": {"commit": "d676a99f1034d163b194cac9f0756f9ea0289593", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex c2c6cec88..8eb303711 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -365,8 +365,7 @@ public class ForgeEventFactory\n     @Nullable\n     public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n-        if(MinecraftForge.EVENT_BUS.post(event)) return null;\n-        return event.getFinalState();\n+        return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 8eb303711..99e3a682c 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +363,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Nzg2Nw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461047867", "body": "This should probably be like other events in format:\r\n```java\r\nreturn MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\r\n```", "bodyText": "This should probably be like other events in format:\nreturn MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();", "bodyHTML": "<p dir=\"auto\">This should probably be like other events in format:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-smi\">MinecraftForge</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>EVENT_BUS</span><span class=\"pl-k\">.</span>post(event) <span class=\"pl-k\">?</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">:</span> event<span class=\"pl-k\">.</span>getFinalState();</pre></div>", "author": "pupnewfster", "createdAt": "2020-07-27T17:21:30Z", "path": "src/main/java/net/minecraftforge/event/ForgeEventFactory.java", "diffHunk": "@@ -358,6 +360,13 @@ public static int onHoeUse(ItemUseContext context)\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n+    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n+    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n+    \treturn event.getFinalState();", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex e8e11e492..ce29c1dfc 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -360,13 +359,6 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n-    \n-    @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n-    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n-    \treturn event.getFinalState();\n-    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex ce29c1dfc..811bd5e15 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -359,6 +360,13 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack) {\n+    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack);\n+    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n+    \treturn event.getFinalState();\n+    }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 811bd5e15..4424add9f 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -362,8 +363,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack);\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n+    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n     \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n     \treturn event.getFinalState();\n     }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 4424add9f..c2c6cec88 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,10 +363,10 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-    \tBlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolTypes);\n-    \tif(MinecraftForge.EVENT_BUS.post(event)) return null;\n-    \treturn event.getFinalState();\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n+        if(MinecraftForge.EVENT_BUS.post(event)) return null;\n+        return event.getFinalState();\n     }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n", "next_change": {"commit": "d676a99f1034d163b194cac9f0756f9ea0289593", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex c2c6cec88..8eb303711 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -365,8 +365,7 @@ public class ForgeEventFactory\n     @Nullable\n     public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n-        if(MinecraftForge.EVENT_BUS.post(event)) return null;\n-        return event.getFinalState();\n+        return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n \n     public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 8eb303711..99e3a682c 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +363,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODc1Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461048753", "body": "This line is a mix of spaces and tabs, and should only be spaces.", "bodyText": "This line is a mix of spaces and tabs, and should only be spaces.", "bodyHTML": "<p dir=\"auto\">This line is a mix of spaces and tabs, and should only be spaces.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:22:57Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..81b2a0078 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -779,39 +778,4 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n-    }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolTypes The tool types to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 81b2a0078..555a4b764 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -778,4 +778,21 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 555a4b764..34b54c15b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -793,6 +794,24 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n     }\n }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..96467cb1e 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -810,8 +792,8 @@ public interface IForgeBlockState\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n+        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 96467cb1e..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -794,6 +794,7 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n+        return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MDc5OA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461050798", "body": "The implementation of this method is a mess of spaces and tabs, should be all tabs. Brackets should be on their own lines and there should be a space after the if statements before the parenthesis. Also change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "The implementation of this method is a mess of spaces and tabs, should be all tabs. Brackets should be on their own lines and there should be a space after the if statements before the parenthesis. Also change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">The implementation of this method is a mess of spaces and tabs, should be all tabs. Brackets should be on their own lines and there should be a space after the if statements before the parenthesis. Also change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:26:20Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,38 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..6820873bf 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -890,38 +887,4 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param state The current state\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 6820873bf..38d9484f9 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -887,4 +890,37 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();\n+    \tif(tool.contains(ToolType.AXE)) {\n+    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n+    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n+    \t}\n+    \tif(tool.contains(ToolType.HOE)) {\n+    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n+    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState != null) return modifiedState;\n+    \t}\n+    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n+    \t\treturn modifiedState;\n+    \t}\n+    \treturn null;\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..120e5637c 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,20 +904,21 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n     {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n+    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n+    \tif(eventState != state) return eventState;\n+    \tif(toolTypes.contains(ToolType.AXE)) {\n     \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block == null && toolTypes.size() == 1) return null;\n     \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n     \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n+    \tif(toolTypes.contains(ToolType.HOE)) {\n     \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n     \t\tif(modifiedState != null) return modifiedState;\n     \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n     \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n     \t\treturn modifiedState;\n     \t}\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..8413392c7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,24 +901,8 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 8413392c7..0f407038d 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -903,6 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n     }\n }\n", "next_change": {"commit": "cf5eb295546d3f5ef59f699e9342b7b54728d39d", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0f407038d..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -906,8 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n-        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n-        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODQzOA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461058438", "body": "This should list it as an example (`For example: Used to determine...`), as mods can add other tool types so these are not the only cases that may exist.", "bodyText": "This should list it as an example (For example: Used to determine...), as mods can add other tool types so these are not the only cases that may exist.", "bodyHTML": "<p dir=\"auto\">This should list it as an example (<code>For example: Used to determine...</code>), as mods can add other tool types so these are not the only cases that may exist.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:39:29Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +447,39 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -447,39 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODU2Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461058563", "body": "This should list it as an example (`For example: Used to determine...`), as mods can add other tool types so these are not the only cases that may exist.", "bodyText": "This should list it as an example (For example: Used to determine...), as mods can add other tool types so these are not the only cases that may exist.", "bodyHTML": "<p dir=\"auto\">This should list it as an example (<code>For example: Used to determine...</code>), as mods can add other tool types so these are not the only cases that may exist.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:39:43Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java", "diffHunk": "@@ -887,4 +890,38 @@ default boolean shouldDisplayFluidOverlay(BlockState state, IBlockDisplayReader\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..6820873bf 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -890,38 +887,4 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param state The current state\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 6820873bf..38d9484f9 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -887,4 +890,37 @@ public interface IForgeBlock\n     {\n         return state.getBlock() instanceof BreakableBlock || state.getBlock() instanceof LeavesBlock;\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param state The current state\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \tSet<ToolType> tool = stack.getToolTypes();\n+    \tif(tool.contains(ToolType.AXE)) {\n+    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n+    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n+    \t}\n+    \tif(tool.contains(ToolType.HOE)) {\n+    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n+    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState != null) return modifiedState;\n+    \t}\n+    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n+    \t\treturn modifiedState;\n+    \t}\n+    \treturn null;\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 38d9484f9..120e5637c 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,20 +904,21 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n     {\n-    \tSet<ToolType> tool = stack.getToolTypes();\n-    \tif(tool.contains(ToolType.AXE)) {\n+    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n+    \tif(eventState != state) return eventState;\n+    \tif(toolTypes.contains(ToolType.AXE)) {\n     \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && tool.size() == 1) return null;\n+    \t\tif(block == null && toolTypes.size() == 1) return null;\n     \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n     \t}\n-    \tif(tool.contains(ToolType.HOE)) {\n+    \tif(toolTypes.contains(ToolType.HOE)) {\n     \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && tool.size() == 1) return null;\n+    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n     \t\tif(modifiedState != null) return modifiedState;\n     \t}\n-    \tif(tool.contains(ToolType.SHOVEL)) {\n+    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n     \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n     \t\treturn modifiedState;\n     \t}\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 120e5637c..8413392c7 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -904,24 +901,8 @@ public interface IForgeBlock\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \tBlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolTypes);\n-    \tif(eventState != state) return eventState;\n-    \tif(toolTypes.contains(ToolType.AXE)) {\n-    \t\tBlock block = AxeItem.BLOCK_STRIPPING_MAP.get(state.getBlock());\n-    \t\tif(block == null && toolTypes.size() == 1) return null;\n-    \t\tif(block != null) return block.getDefaultState().with(RotatedPillarBlock.AXIS, state.get(RotatedPillarBlock.AXIS));\n-    \t}\n-    \tif(toolTypes.contains(ToolType.HOE)) {\n-    \t\tBlockState modifiedState = HoeItem.HOE_LOOKUP.get(state.getBlock());\n-    \t\tif(modifiedState == null && toolTypes.size() == 1) return null;\n-    \t\tif(modifiedState != null) return modifiedState;\n-    \t}\n-    \tif(toolTypes.contains(ToolType.SHOVEL)) {\n-    \t\tBlockState modifiedState = ShovelItem.SHOVEL_LOOKUP.get(state.getBlock());\n-    \t\treturn modifiedState;\n-    \t}\n-    \treturn null;\n+    default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n+        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 8413392c7..0f407038d 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -903,6 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return net.minecraftforge.event.ForgeEventFactory.onToolUse(state, world, pos, player, stack, toolType);\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n     }\n }\n", "next_change": {"commit": "cf5eb295546d3f5ef59f699e9342b7b54728d39d", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\nindex 0f407038d..dd23d2f22 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java\n", "chunk": "@@ -906,8 +906,8 @@ public interface IForgeBlock\n     @Nullable\n     default BlockState getToolModifiedState(BlockState state, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state, world, pos, player, stack);\n-        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state, world, pos, player, stack);\n-        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state, world, pos, player, stack) : null;\n+        if (toolType == ToolType.AXE) return AxeItem.getAxeStrippingState(state);\n+        else if(toolType == ToolType.HOE) return HoeItem.getHoeTillingState(state);\n+        else return toolType == ToolType.SHOVEL ? ShovelItem.getShovelPathingState(state) : null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODgwMQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461058801", "body": "This should list it as an example (`For example: Used to determine...`), as mods can add other tool types so these are not the only cases that may exist.", "bodyText": "This should list it as an example (For example: Used to determine...), as mods can add other tool types so these are not the only cases that may exist.", "bodyHTML": "<p dir=\"auto\">This should list it as an example (<code>For example: Used to determine...</code>), as mods can add other tool types so these are not the only cases that may exist.</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:40:08Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..81b2a0078 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -779,39 +778,4 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n-    }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolTypes The tool types to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 81b2a0078..555a4b764 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -778,4 +778,21 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 555a4b764..34b54c15b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -793,6 +794,24 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n     }\n }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..96467cb1e 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -810,8 +792,8 @@ public interface IForgeBlockState\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n+        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 96467cb1e..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -794,6 +794,7 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n+        return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2ODIyOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461068229", "body": "This method should be removed (see my main comment for more info)", "bodyText": "This method should be removed (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">This method should be removed (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:56:40Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..81b2a0078 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -779,39 +778,4 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n-    }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolTypes The tool types to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 81b2a0078..555a4b764 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -778,4 +778,21 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 555a4b764..34b54c15b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -793,6 +794,24 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n     }\n }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..96467cb1e 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -810,8 +792,8 @@ public interface IForgeBlockState\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n+        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 96467cb1e..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -794,6 +794,7 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n+        return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2ODQ5NA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461068494", "body": "Change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "Change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">Change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:57:09Z", "path": "src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java", "diffHunk": "@@ -778,4 +779,39 @@ default boolean shouldDisplayFluidOverlay(IBlockDisplayReader world, BlockPos po\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..81b2a0078 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -779,39 +778,4 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n-    {\n-    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n-    }\n-    \n-    /**\n-     * Returns the state that this block should transform into when right clicked by a tool.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * Return null if vanilla behavior should be disabled.\n-     *\n-     * @param world The world\n-     * @param pos The block position in world\n-     * @param player The player clicking the block\n-     * @param stack The stack being used by the player\n-     * @param toolTypes The tool types to be considered when performing the action\n-     * @return The resulting state after the action has been performed\n-     */\n-    @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n-    {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n-    }\n }\n", "next_change": {"commit": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 81b2a0078..555a4b764 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -778,4 +778,21 @@ public interface IForgeBlockState\n     {\n         return getBlockState().getBlock().shouldDisplayFluidOverlay(getBlockState(), world, pos, fluidState);\n     }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 555a4b764..34b54c15b 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -793,6 +794,24 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack);\n+    \treturn getToolModifiedState(world, pos, player, stack, stack.getToolTypes());\n+    }\n+    \n+    /**\n+     * Returns the state that this block should transform into when right clicked by a tool.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * Return null if vanilla behavior should be disabled.\n+     *\n+     * @param world The world\n+     * @param pos The block position in world\n+     * @param player The player clicking the block\n+     * @param stack The stack being used by the player\n+     * @param toolTypes The tool types to be considered when performing the action\n+     * @return The resulting state after the action has been performed\n+     */\n+    @Nullable\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    {\n+    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n     }\n }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 34b54c15b..96467cb1e 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -810,8 +792,8 @@ public interface IForgeBlockState\n      * @return The resulting state after the action has been performed\n      */\n     @Nullable\n-    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes)\n+    default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-    \treturn getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolTypes);\n+        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\nindex 96467cb1e..46791f24a 100644\n--- a/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n+++ b/src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java\n", "chunk": "@@ -794,6 +794,7 @@ public interface IForgeBlockState\n     @Nullable\n     default BlockState getToolModifiedState(World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n-        return getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n+        BlockState eventState = net.minecraftforge.event.ForgeEventFactory.onToolUse(getBlockState(), world, pos, player, stack, toolType);\n+        return eventState != getBlockState() ? eventState : getBlockState().getBlock().getToolModifiedState(getBlockState(), world, pos, player, stack, toolType);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2ODk1MQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461068951", "body": "Change `Set<ToolType> toolTypes` to `ToolType toolType` (see my main comment for more info)", "bodyText": "Change Set<ToolType> toolTypes to ToolType toolType (see my main comment for more info)", "bodyHTML": "<p dir=\"auto\">Change <code>Set&lt;ToolType&gt; toolTypes</code> to <code>ToolType toolType</code> (see my main comment for more info)</p>", "author": "pupnewfster", "createdAt": "2020-07-27T17:57:57Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +447,39 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n+    \tprivate BlockState state;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {", "originalCommit": "b54e9b6764c65e68cbcdaf61fd9596b9b7af026c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..c27550af6 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -447,39 +444,4 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n-    \n-    /**\n-     * Fired when when this block is right clicked by a tool to change its state.\n-     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n-     * \n-     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n-     * from changing the block's state.\n-     */\n-    @Cancelable\n-    public static class BlockToolInteractEvent extends BlockEvent\n-    {\n-\n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n-\t\t}\n-\t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n-    }\n }\n", "next_change": {"commit": "c4a1be60458009067fff7fa9ced097c52aa36756", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex c27550af6..6f37e2c26 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -444,4 +444,47 @@ public class BlockEvent extends Event\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+    \tprivate final PlayerEntity player;\n+    \tprivate final ItemStack stack;\n+    \tprivate BlockState finalState;\n+    \t\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\t\tsuper(world, pos, originalState);\n+\t\t\tthis.player = player;\n+\t\t\tthis.stack = stack;\n+\t\t\tthis.finalState = originalState;\n+\t\t}\n+\t\t\n+\t\tpublic PlayerEntity getPlayer()\n+\t\t{\n+\t\t\treturn player;\n+\t\t}\n+\t\t\n+\t\tpublic ItemStack getHeldItemStack()\n+\t\t{\n+\t\t\treturn stack;\n+\t\t}\n+\t\t\n+\t\tpublic void setFinalState(BlockState finalState)\n+\t\t{\n+\t\t\tthis.finalState = finalState;\n+\t\t}\n+\t\t\n+\t\tpublic BlockState getFinalState()\n+\t\t{\n+\t\t\treturn finalState;\n+\t\t}\n+    }\n }\n", "next_change": {"commit": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 6f37e2c26..1ce16d465 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,33 +458,21 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n-    \tprivate BlockState finalState;\n+    \tprivate BlockState state;\n     \t\n \t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n-\t\t\tthis.finalState = originalState;\n+\t\t\tthis.state = originalState;\n \t\t}\n \t\t\n-\t\tpublic PlayerEntity getPlayer()\n-\t\t{\n-\t\t\treturn player;\n-\t\t}\n+\t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n-\t\tpublic ItemStack getHeldItemStack()\n-\t\t{\n-\t\t\treturn stack;\n-\t\t}\n+\t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n-\t\tpublic void setFinalState(BlockState finalState)\n-\t\t{\n-\t\t\tthis.finalState = finalState;\n-\t\t}\n+\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n-\t\tpublic BlockState getFinalState()\n-\t\t{\n-\t\t\treturn finalState;\n-\t\t}\n+\t\tpublic BlockState getFinalState() { return state; }\n     }\n }\n", "next_change": {"commit": "03258da7da7918acc457f7731f22b3f587a7efcf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 1ce16d465..95b2a4ff3 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -458,19 +461,23 @@ public class BlockEvent extends Event\n \n     \tprivate final PlayerEntity player;\n     \tprivate final ItemStack stack;\n+    \tprivate final Set<ToolType> toolTypes;\n     \tprivate BlockState state;\n     \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack) {\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n \t\t\tsuper(world, pos, originalState);\n \t\t\tthis.player = player;\n \t\t\tthis.stack = stack;\n \t\t\tthis.state = originalState;\n+\t\t\tthis.toolTypes = toolTypes;\n \t\t}\n \t\t\n \t\tpublic PlayerEntity getPlayer() { return player; }\n \t\t\n \t\tpublic ItemStack getHeldItemStack() { return stack; }\n \t\t\n+\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n+\t\t\n \t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n \t\t\n \t\tpublic BlockState getFinalState() { return state; }\n", "next_change": {"commit": "7c9621db05f97367f3571443c43458863c08367b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex 95b2a4ff3..dda4a0dfc 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -459,27 +457,43 @@ public class BlockEvent extends Event\n     public static class BlockToolInteractEvent extends BlockEvent\n     {\n \n-    \tprivate final PlayerEntity player;\n-    \tprivate final ItemStack stack;\n-    \tprivate final Set<ToolType> toolTypes;\n-    \tprivate BlockState state;\n-    \t\n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, Set<ToolType> toolTypes) {\n-\t\t\tsuper(world, pos, originalState);\n-\t\t\tthis.player = player;\n-\t\t\tthis.stack = stack;\n-\t\t\tthis.state = originalState;\n-\t\t\tthis.toolTypes = toolTypes;\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n \t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n \t\t\n-\t\tpublic PlayerEntity getPlayer() { return player; }\n-\t\t\n-\t\tpublic ItemStack getHeldItemStack() { return stack; }\n-\t\t\n-\t\tpublic Set<ToolType> getToolTypes() { return Collections.unmodifiableSet(toolTypes); }\n-\t\t\n-\t\tpublic void setFinalState(BlockState finalState) { this.state = finalState; }\n-\t\t\n-\t\tpublic BlockState getFinalState() { return state; }\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }\n     }\n }\n", "next_change": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"oid": "3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3c8aea63d6e60143d8561484eb3b25e3025cd5ae", "message": "AxeStrippingMapRegistry and Example\n\nSwitched single stripping map for a stripping map registry similar to how brewing is done.\n\nImplement a system that fits into the current state of the Minecraft code.\n\nDetermine resultant state based on BlockState input and use some simple property copiers to match the data.", "committedDate": "2020-07-27T21:43:00Z", "type": "commit"}, {"oid": "a4b9b84d7f213f1c5059979411f349958abcff2d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/a4b9b84d7f213f1c5059979411f349958abcff2d", "message": "Update mods.toml", "committedDate": "2020-07-27T21:43:23Z", "type": "commit"}, {"oid": "e5ae443ea1a07a975d09ae9352198622a8c9ae2e", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e5ae443ea1a07a975d09ae9352198622a8c9ae2e", "message": "Generics fix\n\nIncorrectly ordered them such that the input could extend the output and not vice versa. Fixes this issue.", "committedDate": "2020-07-27T21:43:24Z", "type": "commit"}, {"oid": "83d614585b348ebfc12ec09f1c90e53ebd305c9d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/83d614585b348ebfc12ec09f1c90e53ebd305c9d", "message": "Fix test case", "committedDate": "2020-07-27T21:43:24Z", "type": "commit"}, {"oid": "0c9f81486f4f957b7cb4e8f66852a2b4435f451b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/0c9f81486f4f957b7cb4e8f66852a2b4435f451b", "message": "Remove Original Solution\n\nRemove stripping registry framework in place for new one", "committedDate": "2020-07-27T21:43:38Z", "type": "commit"}, {"oid": "a5880b08911a9f6e67484e2342d2f00b0ded20e8", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/a5880b08911a9f6e67484e2342d2f00b0ded20e8", "message": "IForgeBlock Implementation\n\nHooks into all three tools.", "committedDate": "2020-07-27T21:43:39Z", "type": "commit"}, {"oid": "c4a1be60458009067fff7fa9ced097c52aa36756", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/c4a1be60458009067fff7fa9ced097c52aa36756", "message": "Added event hook BlockToolInteractEvent", "committedDate": "2020-07-27T21:43:39Z", "type": "commit"}, {"oid": "e5c9967874ba78aacc0af154475ad9a451263eee", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/e5c9967874ba78aacc0af154475ad9a451263eee", "message": "Added Test Mod to verify event", "committedDate": "2020-07-27T21:43:57Z", "type": "commit"}, {"oid": "83aa6ebb347772c5f2453b98565cd6b9173382cc", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/83aa6ebb347772c5f2453b98565cd6b9173382cc", "message": "finalState -> state and setter/getter one line\n\nExtends BlockEvent so the other reviews are subject for review", "committedDate": "2020-07-27T21:43:58Z", "type": "commit"}, {"oid": "03258da7da7918acc457f7731f22b3f587a7efcf", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/03258da7da7918acc457f7731f22b3f587a7efcf", "message": "Added specific ToolType implementation\n\nAllows the user to specify which tooltypes to consider when using their custom tool.", "committedDate": "2020-07-27T21:43:58Z", "type": "commit"}, {"oid": "7c9621db05f97367f3571443c43458863c08367b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/7c9621db05f97367f3571443c43458863c08367b", "message": "Format Fixes and Reinventions of Static Helpers\n\nHopefully fixed all formatting errors?\n\nSet<ToolType> -> ToolType\n\nAxe, Hoe, Shovel now have static helpers\n\nUseHoeEvent now deprecated, deprecate onHoeUse?\n\nBlockToolInteractEvent needs to be either left alone to alter vanilla behavior or ported to a generic item use event somehow.", "committedDate": "2020-07-27T21:43:59Z", "type": "commit"}, {"oid": "d676a99f1034d163b194cac9f0756f9ea0289593", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/d676a99f1034d163b194cac9f0756f9ea0289593", "message": "Ternary Operator Fix\n\nUpdated ForgeEventFactory::onToolUse to include ternary operator.", "committedDate": "2020-07-27T21:44:00Z", "type": "commit"}, {"oid": "d676a99f1034d163b194cac9f0756f9ea0289593", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/d676a99f1034d163b194cac9f0756f9ea0289593", "message": "Ternary Operator Fix\n\nUpdated ForgeEventFactory::onToolUse to include ternary operator.", "committedDate": "2020-07-27T21:44:00Z", "type": "forcePushed"}, {"oid": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "message": "Merge remote-tracking branch 'upstream/1.16.x' into 1.16.x-stripping", "committedDate": "2020-07-28T17:25:43Z", "type": "commit"}, {"oid": "9441236193199acfd436dca27b5c5f34aee4fa64", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/9441236193199acfd436dca27b5c5f34aee4fa64", "message": "Update mods.toml\n\nExactly what it says to get the test mod loading.", "committedDate": "2020-07-28T17:33:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1ODkxOQ==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461758919", "body": "The spacing of this class is still rather screwed up and I believe is a mixture of tabs and spaces", "bodyText": "The spacing of this class is still rather screwed up and I believe is a mixture of tabs and spaces", "bodyHTML": "<p dir=\"auto\">The spacing of this class is still rather screwed up and I believe is a mixture of tabs and spaces</p>", "author": "pupnewfster", "createdAt": "2020-07-28T17:42:18Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +445,55 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)", "originalCommit": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1OTE2Mw==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461759163", "body": "Bracket should be on the next line", "bodyText": "Bracket should be on the next line", "bodyHTML": "<p dir=\"auto\">Bracket should be on the next line</p>", "author": "pupnewfster", "createdAt": "2020-07-28T17:42:42Z", "path": "src/main/java/net/minecraftforge/event/ForgeEventFactory.java", "diffHunk": "@@ -359,6 +361,12 @@ public static int onHoeUse(ItemUseContext context)\n         }\n         return 0;\n     }\n+    \n+    @Nullable\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {", "originalCommit": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 8eb303711..99e3a682c 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +363,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0984777c9872d617d93e94b23ca47017e21bacbf", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 8eb303711..35d3b1f9d 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +365,8 @@ public class ForgeEventFactory\n     }\n     \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType) {\n+    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n", "next_change": {"commit": "fe43088c96cf65c6793260eae96416871a9eb8f2", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 35d3b1f9d..0430157d1 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -363,7 +365,7 @@ public class ForgeEventFactory\n         }\n         return 0;\n     }\n-    \n+\n     @Nullable\n     public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n     {\n", "next_change": {"commit": "be5446b91c17a3dbed880028741c430610bd59f1", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 0430157d1..cb4778fab 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -354,32 +348,32 @@ public class ForgeEventFactory\n \n     //TODO: 1.17 Remove\n     @Deprecated\n-    public static int onHoeUse(ItemUseContext context)\n+    public static int onHoeUse(UseOnContext context)\n     {\n         UseHoeEvent event = new UseHoeEvent(context);\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            context.getItem().damageItem(1, context.getPlayer(), player -> player.sendBreakAnimation(context.getHand()));\n+            context.getItemInHand().hurtAndBreak(1, context.getPlayer(), player -> player.broadcastBreakEvent(context.getHand()));\n             return 1;\n         }\n         return 0;\n     }\n \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, World world, BlockPos pos, PlayerEntity player, ItemStack stack, ToolType toolType)\n+    public static BlockState onToolUse(BlockState originalState, Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n     {\n         BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n \n-    public static int onApplyBonemeal(@Nonnull PlayerEntity player, @Nonnull World world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n+    public static int onApplyBonemeal(@Nonnull Player player, @Nonnull Level world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n         BonemealEvent event = new BonemealEvent(player, world, pos, state, stack);\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (!world.isRemote)\n+            if (!world.isClientSide)\n                 stack.shrink(1);\n             return 1;\n         }\n", "next_change": {"commit": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex cb4778fab..4f354df1f 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -361,19 +359,19 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static BlockState onToolUse(BlockState originalState, Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)\n+    public static BlockState onToolUse(BlockState originalState, Level level, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)\n     {\n-        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);\n+        BlockToolInteractEvent event = new BlockToolInteractEvent(level, pos, originalState, player, stack, toolAction);\n         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();\n     }\n \n-    public static int onApplyBonemeal(@Nonnull Player player, @Nonnull Level world, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n+    public static int onApplyBonemeal(@Nonnull Player player, @Nonnull Level level, @Nonnull BlockPos pos, @Nonnull BlockState state, @Nonnull ItemStack stack)\n     {\n-        BonemealEvent event = new BonemealEvent(player, world, pos, state, stack);\n+        BonemealEvent event = new BonemealEvent(player, level, pos, state, stack);\n         if (MinecraftForge.EVENT_BUS.post(event)) return -1;\n         if (event.getResult() == Result.ALLOW)\n         {\n-            if (!world.isClientSide)\n+            if (!level.isClientSide)\n                 stack.shrink(1);\n             return 1;\n         }\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 4f354df1f..62316c7b9 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -379,7 +341,7 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level level, @Nonnull ItemStack stack, @Nullable HitResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@NotNull Player player, @NotNull Level level, @NotNull ItemStack stack, @Nullable HitResult target)\n     {\n         FillBucketEvent event = new FillBucketEvent(player, stack, level, target);\n         if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex cb4778fab..4f354df1f 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -381,9 +379,9 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level world, @Nonnull ItemStack stack, @Nullable HitResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level level, @Nonnull ItemStack stack, @Nullable HitResult target)\n     {\n-        FillBucketEvent event = new FillBucketEvent(player, stack, world, target);\n+        FillBucketEvent event = new FillBucketEvent(player, stack, level, target);\n         if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n \n         if (event.getResult() == Result.ALLOW)\n", "next_change": {"commit": "4ed9117799b44611fe978c0de8f5c483df600191", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\nindex 4f354df1f..62316c7b9 100644\n--- a/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n+++ b/src/main/java/net/minecraftforge/event/ForgeEventFactory.java\n", "chunk": "@@ -379,7 +341,7 @@ public class ForgeEventFactory\n     }\n \n     @Nullable\n-    public static InteractionResultHolder<ItemStack> onBucketUse(@Nonnull Player player, @Nonnull Level level, @Nonnull ItemStack stack, @Nullable HitResult target)\n+    public static InteractionResultHolder<ItemStack> onBucketUse(@NotNull Player player, @NotNull Level level, @NotNull ItemStack stack, @Nullable HitResult target)\n     {\n         FillBucketEvent event = new FillBucketEvent(player, stack, level, target);\n         if (MinecraftForge.EVENT_BUS.post(event)) return new InteractionResultHolder<ItemStack>(InteractionResult.FAIL, stack);\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0984777c9872d617d93e94b23ca47017e21bacbf", "message": "Merge commit", "committedDate": null}, {"oid": "fe43088c96cf65c6793260eae96416871a9eb8f2", "committedDate": "2020-08-13 00:35:08 -0700", "message": "Initial 1.16.2 Update"}, {"oid": "680c4062f49c07eb1b53a39ade89df217f7b2223", "committedDate": "2020-08-14 12:04:17 -0700", "message": "Fix creating nether portals."}, {"oid": "a5aca97e315cefc451d24f802a839e72c362b56c", "committedDate": "2020-08-18 22:47:38 -0700", "message": "Removed HarvestDropsEvent (#7193)"}, {"oid": "e3db4297631b9477dff388c35d6e2ec6e5747714", "committedDate": "2020-08-21 11:37:43 -0700", "message": "[1.16] ForgeEventFactory#canCreateFluidSource reintroduced (#7181)"}, {"oid": "fc000fe913b6d4c2f14476d3df301513f51f6653", "committedDate": "2020-08-21 11:53:37 -0700", "message": "Replace EntityHeight event with EntitySize event (#6858)"}, {"oid": "c75eb9e7cfbdcde418f1a20175883cf61f10d900", "committedDate": "2020-09-10 12:01:45 -0700", "message": "1.16.3 Update Also included a bunch of warning cleanups."}, {"oid": "53eedb0f102bb1d8cf9432fae891730481206bce", "committedDate": "2020-10-29 01:11:57 +0100", "message": "Update forge mappings to 20201028-1.16.3 (#7435)"}, {"oid": "b64f4780c5f951da2eb46aed78590cdbb3220700", "committedDate": "2020-12-28 12:03:11 -0800", "message": "Add new LivingConversionEvent to control mobs turning into other mobs. (#7386)"}, {"oid": "a95b968c1397a1597d4a6228d8e1abce6495570e", "committedDate": "2021-03-09 14:21:48 -0800", "message": "Regenerate patches with relative headers. This should lower conflicts in future PRs. Convert Forge to use Official mappings. Mojang released their obfuscation mappings but we have not used them up until now due to wanting to get their license to be more explicitly permissive. It is clear that their intent is to allow us to use their names for developing mods like this. See the full wording, and our interpretation here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md"}, {"oid": "55f29764f84dd0819cc46821b91a2542b1fc4e98", "committedDate": "2021-03-10 23:41:00 +0100", "message": "Bulk update license year, and use replacement variable so that the current year is always used."}, {"oid": "53c039680c356062c870b1c9ed321481812a944e", "committedDate": "2021-03-15 14:08:40 -0700", "message": "Fix wrong eye height when entity size changes (esp. baby animals) (#7628)"}, {"oid": "80feb0aeb2214b49e217fe956653a1a6becd6819", "committedDate": "2021-03-29 18:05:13 -0700", "message": "Add generic EntityTeleportEvent (#7694)"}, {"oid": "77d41023b53be8339519737532440c0d68e59aef", "committedDate": "2021-05-17 13:17:01 -0700", "message": "Add an event similar to PlayerEvent.NameFormat but for the name shown in the tab list. (#7740)"}, {"oid": "f9b894ecbf5d04194b58f98a92312fe401f6beed", "committedDate": "2021-07-16 17:37:41 -0700", "message": "Add IRecipeType parameter to burn time hooks (#7771)"}, {"oid": "6663f23e13c863f60793bdaa678c16c7f5d9eea3", "committedDate": "2021-07-16 19:41:51 -0700", "message": "Add Fishing bobber projectile impact event (#7842)"}, {"oid": "be5446b91c17a3dbed880028741c430610bd59f1", "committedDate": "2021-07-22 19:57:02 +0100", "message": "Update to 1.17"}, {"oid": "30cfd848d8181e6711d45b5a932dde9e89094398", "committedDate": "2021-07-29 19:10:35 -0700", "message": "Remove Generic from ProjectileImpactEvent (#7959)"}, {"oid": "10b51f257fc0ea2318580f4064f4bba4d5511ab9", "committedDate": "2021-08-10 15:45:08 -0700", "message": "Redesign the tool system to rely on the new vanilla tags. (#7970)"}, {"oid": "675bf8bde2a58fd69f6baea334fc6d72f30f7ef5", "committedDate": "2021-09-08 10:39:27 -0700", "message": "Added PlayerPermissionChangedEvent(#8023)"}, {"oid": "b2dbe9de51d6b03cb0badd79e97e9d9e26b25b36", "committedDate": "2021-09-18 14:58:27 -0700", "message": "Fix inverted hooks for PermissionsChangedEvent (#8089)"}, {"oid": "40a174310d9eaf31e089f18b66a26d45c96d5587", "committedDate": "2021-11-30 17:42:18 +0000", "message": "Initial port to 1.18"}, {"oid": "a9237cff750549a272933e230b5f2b55a90d87f5", "committedDate": "2022-02-22 14:18:52 -0800", "message": "Fix Mob Spawner logic with CustomSpawnRules. Closes #8398"}, {"oid": "104daf8ef080e9dc02a939d43e1160ec4cf7183b", "committedDate": "2022-02-28 13:41:23 -0800", "message": "Update license headers to compact SPDX format. License has not changed, this is just more compact and doesn't include years. Bump version for RB."}, {"oid": "34291c1fb26d78b83755ca5b6a92cf1cf0ca1e11", "committedDate": "2022-03-01 18:59:37 +0000", "message": "1.18.x Omnibus (#8239)"}, {"oid": "425eff39ff46affdceb0bcbe0738c24b72f707e3", "committedDate": "2022-03-01 14:16:46 -0800", "message": "Update to 1.18.2"}, {"oid": "41c88f6e5263b542250b6b9a7338800ddb8569b7", "committedDate": "2022-03-06 14:42:58 +0000", "message": "Provide access to the haveTime supplier in WorldTickEvent and ServerTickEvent (#8470)"}, {"oid": "df3c7ce19aceaacec1aee31c3c0125fdd4409de2", "committedDate": "2022-03-06 14:57:14 +0000", "message": "Pass server resources to reload listener event (#8493)"}, {"oid": "7d79f0d581b6fff11acf7ed3d2f8b8de9751e3a9", "committedDate": "2022-04-12 09:43:20 -0700", "message": "Add use context and simulate flag to getToolModifiedState, enabled HOE_TILL action. (#8557)"}, {"oid": "c1874bb5ab10a5585ebb445da74cca08514aacf5", "committedDate": "2022-04-13 20:42:00 -0700", "message": "Amend license header to include contributors and apply to FML subprojects (#8525)"}, {"oid": "4ed9117799b44611fe978c0de8f5c483df600191", "committedDate": "2022-06-07 15:31:26 -0500", "message": "Forge 1.19"}, {"oid": "0ec4c34a34a713190ae74ee238cf6356215cf5f6", "committedDate": "2022-06-12 23:36:25 +0100", "message": "[1.19.x] Add CommandBuildContext to Register Command Events (#8716)"}, {"oid": "22668ad2c26000c6c6d02fdecb70247a5d3c72b7", "committedDate": "2022-06-27 20:45:35 -0700", "message": "Add MinecraftServer reference to ServerTickEvent (#8765)"}, {"oid": "9b962c8ff067e0bd4a3adfc506c796bf7c4026a4", "committedDate": "2022-06-27 21:09:23 -0700", "message": "Fire ChunkWatchEvents after sending packets (#8747)"}, {"oid": "4d074f0a1ef1d774786b4f1e1e3e827a9bf576e0", "committedDate": "2022-07-07 18:34:51 -0400", "message": "[1.19.X] Client code cleanup, updates, and other refactors (#8786)"}, {"oid": "b8b40e1f547c16df1d8914a707e338057a7497bd", "committedDate": "2022-07-11 18:27:48 -0700", "message": "[1.19.x] Apply general renames, A SRG is provided for modders. (#8840)"}, {"oid": "06d9d89f98d6ab2bc889af9ff13fa701da562622", "committedDate": "2022-08-05 09:29:02 -0700", "message": "Re-add PotentialSpawns event (#8712)"}, {"oid": "874ff1bba21f02e00e421792f8b01cb766f55bf3", "committedDate": "2022-08-05 11:21:14 -0700", "message": "Add an event for when the chunk ticket level is updated (#8909)"}, {"oid": "db14cbb0e0bdae22a6917b7eb63c80a4d8205a77", "committedDate": "2022-09-03 20:17:16 +0100", "message": "[1.19.X] Adding more precise events for Advancements (#8360)"}, {"oid": "1c31f42dae16f051a9d538f551e6afb801f15711", "committedDate": "2022-09-08 16:11:59 +0100", "message": "[1.19.x] Added event for growing fungus (#8981)"}, {"oid": "1a2207b3b2aa4f2694d61f5124abe968ba1c794e", "committedDate": "2022-11-08 12:17:18 -0800", "message": "Add HitResult to `EntityTeleportEvent$EnderPearl` (#9135)"}, {"oid": "8255d7aed3c44129bb08b7b5961f0e9fe3a5a121", "committedDate": "2022-12-08 01:45:22 -0600", "message": "Forge 1.19.3"}, {"oid": "e6c7958456097b7796394ec2f57649faf09814ca", "committedDate": "2022-12-12 10:23:32 -0800", "message": "Simplify tree grower patches (#9209)"}, {"oid": "4d57a1bec6d6db3fa57f59461791d4b60a55d47e", "committedDate": "2023-01-23 11:47:00 -0800", "message": "Fire TickEvent.LevelTickEvent on ClientLevel tick (#9299)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2MDEyMA==", "url": "https://github.com/MinecraftForge/MinecraftForge/pull/7176#discussion_r461760120", "body": "It probably would be nice to java doc all the methods in this event, but at the very least these two methods should have an explanation of what they do.", "bodyText": "It probably would be nice to java doc all the methods in this event, but at the very least these two methods should have an explanation of what they do.", "bodyHTML": "<p dir=\"auto\">It probably would be nice to java doc all the methods in this event, but at the very least these two methods should have an explanation of what they do.</p>", "author": "pupnewfster", "createdAt": "2020-07-28T17:44:19Z", "path": "src/main/java/net/minecraftforge/event/world/BlockEvent.java", "diffHunk": "@@ -444,4 +445,55 @@ public PortalSpawnEvent(IWorld world, BlockPos pos, BlockState state, NetherPort\n             return size;\n         }\n     }\n+    \n+    /**\n+     * Fired when when this block is right clicked by a tool to change its state.\n+     * For example: Used to determine if an axe can strip, a shovel can path, or a hoe can till.\n+     * \n+     * This event is {@link Cancelable}. If canceled, this will prevent the tool\n+     * from changing the block's state.\n+     */\n+    @Cancelable\n+    public static class BlockToolInteractEvent extends BlockEvent\n+    {\n+\n+        private final PlayerEntity player;\n+        private final ItemStack stack;\n+        private final ToolType toolType;\n+        private BlockState state;\n+\n+\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+\t    {\n+\t\t    super(world, pos, originalState);\n+\t\t    this.player = player;\n+\t\t    this.stack = stack;\n+\t\t    this.state = originalState;\n+\t\t    this.toolType = toolType;\n+\t\t}\n+\n+\t    public PlayerEntity getPlayer()\n+\t    { \n+\t        return player;\n+\t    }\n+\t\t\n+\t    public ItemStack getHeldItemStack()\n+\t    {\n+\t        return stack;\n+\t    }\n+\n+\t    public ToolType getToolType()\n+\t    {\n+\t        return toolType;\n+\t    }\n+\n+\t    public void setFinalState(BlockState finalState)\n+\t    {\n+\t        this.state = finalState;\n+\t    }\n+\n+\t    public BlockState getFinalState()\n+\t    {\n+\t        return state;\n+\t    }", "originalCommit": "3f93a32e91333e5d6cc70300dbc00e6bddf60e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "changed_code": [{"header": "diff --git a/src/main/java/net/minecraftforge/event/world/BlockEvent.java b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\nindex dda4a0dfc..95a024c70 100644\n--- a/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n+++ b/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n", "chunk": "@@ -462,38 +462,51 @@ public class BlockEvent extends Event\n         private final ToolType toolType;\n         private BlockState state;\n \n-\t\tpublic BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n-\t    {\n-\t\t    super(world, pos, originalState);\n-\t\t    this.player = player;\n-\t\t    this.stack = stack;\n-\t\t    this.state = originalState;\n-\t\t    this.toolType = toolType;\n-\t\t}\n-\n-\t    public PlayerEntity getPlayer()\n-\t    { \n-\t        return player;\n-\t    }\n-\t\t\n-\t    public ItemStack getHeldItemStack()\n-\t    {\n-\t        return stack;\n-\t    }\n+        public BlockToolInteractEvent(IWorld world, BlockPos pos, BlockState originalState, PlayerEntity player, ItemStack stack, ToolType toolType)\n+        {\n+            super(world, pos, originalState);\n+            this.player = player;\n+            this.stack = stack;\n+            this.state = originalState;\n+            this.toolType = toolType;\n+        }\n \n-\t    public ToolType getToolType()\n-\t    {\n-\t        return toolType;\n-\t    }\n+        /**Gets the player using the tool.*/\n+        public PlayerEntity getPlayer()\n+        {\n+            return player;\n+        }\n \n-\t    public void setFinalState(BlockState finalState)\n-\t    {\n-\t        this.state = finalState;\n+        /**Gets the tool being used.*/\n+        public ItemStack getHeldItemStack()\n+        {\n+            return stack;\n \t    }\n \n-\t    public BlockState getFinalState()\n-\t    {\n-\t        return state;\n-\t    }\n+        /**Gets the current type of the tool being compared against.*/\n+        public ToolType getToolType()\n+        {\n+            return toolType;\n+        }\n+\n+        /**\n+         * Sets the transformed state after tool use.\n+         * If not set, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public void setFinalState(BlockState finalState)\n+        {\n+            this.state = finalState;\n+        }\n+\n+        /**\n+         * Gets the transformed state after tool use.\n+         * If setFinalState not called, will return the original state.\n+         * This will be bypassed if canceled returning null instead.\n+         * */\n+        public BlockState getFinalState()\n+        {\n+            return state;\n+        }\n     }\n }\n", "next_change": null}]}}, {"oid": "6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/6b9dcbd2013465156488121aa5c1ae2ed08efe1b", "message": "Statics and Formats and Restructures, Oh my!\n\nMade individual tool references public and called in IForgeBlock.\n\nMoved event call to IForgeBlockState to prevent removal.\n\nFixed a bunch of formatting errors hopefully...\n\nAdded JavaDocs for all methods in BlockToolInteractEvent.", "committedDate": "2020-07-28T19:35:49Z", "type": "commit"}, {"oid": "df0b611169de0d59770dfea53f90ae6c01397133", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/df0b611169de0d59770dfea53f90ae6c01397133", "message": "Deprecate ForgeEventFactory::onHoeUse\n\nDeprecating references of UseHoeEvent.", "committedDate": "2020-07-28T19:39:06Z", "type": "commit"}, {"oid": "cf5eb295546d3f5ef59f699e9342b7b54728d39d", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/cf5eb295546d3f5ef59f699e9342b7b54728d39d", "message": "Remove useless parameters\n\nThis should've happened earlier, I forgot to...oops.\n\nAll static helpers are reduced to only the state parameter.", "committedDate": "2020-07-28T20:11:08Z", "type": "commit"}, {"oid": "2f07d5bbbb85fd57d6ded20eb5a2114693805118", "url": "https://github.com/MinecraftForge/MinecraftForge/commit/2f07d5bbbb85fd57d6ded20eb5a2114693805118", "message": "Merge branch '1.16.x' into 1.16.x-stripping", "committedDate": "2020-08-03T23:48:41Z", "type": "commit"}]}