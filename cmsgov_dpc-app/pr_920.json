{"pr_number": 920, "pr_title": "DPC-556 allows clients to set the _outputFormat parameter on a /Group/$export request to ndjson or application/json. ", "pr_author": "richbraman", "pr_createdAt": "2020-07-21T19:00:27Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/920", "timeline": [{"oid": "9495f434ff9fcdf0767c4ad51ec2fedfe5a48f44", "url": "https://github.com/CMSgov/dpc-app/commit/9495f434ff9fcdf0767c4ad51ec2fedfe5a48f44", "message": "add application/ndjson and ndjson as acceptable _outputFormat parameter values", "committedDate": "2020-07-21T17:57:27Z", "type": "commit"}, {"oid": "dfa206eca9fd31f16fb88bfd0abf17111801dd3c", "url": "https://github.com/CMSgov/dpc-app/commit/dfa206eca9fd31f16fb88bfd0abf17111801dd3c", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-07-29T00:27:39Z", "type": "commit"}, {"oid": "dbc67fd145cf1c63b34d276f6b4718bd2797f955", "url": "https://github.com/CMSgov/dpc-app/commit/dbc67fd145cf1c63b34d276f6b4718bd2797f955", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-07-29T16:09:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzc4Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/920#discussion_r462423782", "body": "```suggestion\r\n        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, or NDJSON\r\n        if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\r\n            throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJON, or NDJSON\n          \n          \n            \n                    if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\n          \n          \n            \n                        throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson','application/ndjson', or 'ndjson' \");\n          \n          \n            \n                    // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, or NDJSON\n          \n          \n            \n                    if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\n          \n          \n            \n                        throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> _outputFormat only supports FHIR_NDJSON, <span class=\"x x-first x-last\">APPLICATION_NDJON</span>, or NDJSON</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>isNotEmpty(outputFormat) <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-k\">!</span><span class=\"pl-c1\">FHIR_NDJSON</span><span class=\"pl-k\">.</span>equals(outputFormat) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">APPLICATION_NDJSON</span><span class=\"pl-k\">.</span>equals(outputFormat) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">NDJSON</span><span class=\"pl-k\">.</span>equals(outputFormat) )) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BadRequestException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'_outputFormat' query parameter must be 'application/fhir+ndjson','application/ndjson', or 'ndjson' <span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> _outputFormat only supports FHIR_NDJSON, <span class=\"x x-first x-last\">APPLICATION_NDJSON</span>, or NDJSON</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span>isNotEmpty(outputFormat) <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-k\">!</span><span class=\"pl-c1\">FHIR_NDJSON</span><span class=\"pl-k\">.</span>equals(outputFormat) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">APPLICATION_NDJSON</span><span class=\"pl-k\">.</span>equals(outputFormat) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span><span class=\"pl-c1\">NDJSON</span><span class=\"pl-k\">.</span>equals(outputFormat) )) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BadRequestException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'_outputFormat' query parameter must be 'application/fhir+ndjson',<span class=\"x x-first x-last\"> </span>'application/ndjson', or 'ndjson' <span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "em1", "createdAt": "2020-07-29T16:18:57Z", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -351,10 +353,10 @@ private OffsetDateTime handleSinceQueryParam(String since) {\n      *\n      * @param outputFormat param to check\n      */\n-    private static void checkExportRequest(String outputFormat, String headerPrefer) {\n-        // _outputFormat only supports FHIR_NDJSON\n-        if (StringUtils.isNotEmpty(outputFormat) && !FHIR_NDJSON.equals(outputFormat)) {\n-            throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson'\");\n+    private static void checkExportRequest(String outputFormat String headerPrefer) {\n+        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJON, or NDJSON\n+        if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\n+            throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson','application/ndjson', or 'ndjson' \");", "originalCommit": "dbc67fd145cf1c63b34d276f6b4718bd2797f955", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyNTU1NA==", "url": "https://github.com/CMSgov/dpc-app/pull/920#discussion_r462425554", "bodyText": "is the constant wrong in the declaration", "author": "richbraman", "createdAt": "2020-07-29T16:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a3db99d147b88d833a30287f907af2efb576d238", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex a5bfa3a7..09468e97 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -354,9 +354,9 @@ public class GroupResource extends AbstractGroupResource {\n      * @param outputFormat param to check\n      */\n     private static void checkExportRequest(String outputFormat String headerPrefer) {\n-        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJON, or NDJSON\n+        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, or NDJSON\n         if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\n-            throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson','application/ndjson', or 'ndjson' \");\n+            throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n         }\n         if (headerPrefer==null || StringUtils.isEmpty(headerPrefer)){\n             throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n", "next_change": {"commit": "175b477b6efb03c76bae440cf0bb932986d80ad9", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex 09468e97..5c76d11b 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -353,7 +357,7 @@ public class GroupResource extends AbstractGroupResource {\n      *\n      * @param outputFormat param to check\n      */\n-    private static void checkExportRequest(String outputFormat String headerPrefer) {\n+    private static void checkExportRequest(String outputFormat, String headerPrefer) {\n         // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, or NDJSON\n         if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\n             throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n", "next_change": {"commit": "af8a4cbfb4b8b51f09314e6bef6123a97b325d00", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex 5c76d11b..a6e545c4 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -359,9 +359,10 @@ public class GroupResource extends AbstractGroupResource {\n      */\n     private static void checkExportRequest(String outputFormat, String headerPrefer) {\n         // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, or NDJSON\n-        if (StringUtils.isNotEmpty(outputFormat) && (!FHIR_NDJSON.equals(outputFormat) && !APPLICATION_NDJSON.equals(outputFormat) && !NDJSON.equals(outputFormat) )) {\n+        if (!StringUtils.equalsAny(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n             throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n         }\n+\n         if (headerPrefer==null || StringUtils.isEmpty(headerPrefer)){\n             throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n         }\n", "next_change": {"commit": "5721302cf46db1c21b13cb51cc2529419e1c2444", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex a6e545c4..de6d383f 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -357,19 +361,33 @@ public class GroupResource extends AbstractGroupResource {\n      *\n      * @param outputFormat param to check\n      */\n-    private static void checkExportRequest(String outputFormat, String headerPrefer) {\n-        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, or NDJSON\n+    private static void checkExportRequest(String outputFormat, List<Pair<String, String>> headers) {\n+        checkOutputFormat(outputFormat);\n+        checkRequestHeaders(headers);\n+    }\n+\n+    private static void checkOutputFormat(String outputFormat) {\n+        // _outputFormat only supports FHIR_NDJSON\n         if (!StringUtils.equalsAny(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n             throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n         }\n+    }\n \n-        if (headerPrefer==null || StringUtils.isEmpty(headerPrefer)){\n-            throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n-        }\n-        if (StringUtils.isNotEmpty(headerPrefer) && !headerPrefer.equals(\"respond-async\")) {\n-            throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n-        }\n-\n+    private static void checkRequestHeaders(List<Pair<String, String>> headers) {\n+        headers.stream()\n+                .peek(header -> {\n+                    if (header.getRight() == null) {\n+                        throw new BadRequestException(\"The \" + header.getLeft() + \" header is required\");\n+                    }\n+                })\n+                .forEach(pair -> {\n+                    if (pair.getLeft().equals(\"Prefer\") && !pair.getRight().equals(\"respond-async\")) {\n+                        throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n+                    }\n+                    if (pair.getLeft().equals(\"Accept\") && !pair.getRight().equals(FHIR_JSON)) {\n+                        throw new BadRequestException(\"The 'Accept' header must be \" + FHIR_JSON);\n+                    }\n+                });\n     }\n \n     private List<String> fetchPatientMBIs(String groupID) {\n", "next_change": {"commit": "400f5750b422bbf06c3d3f86adf5ebc95a733240", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex de6d383f..98603e54 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -361,33 +357,18 @@ public class GroupResource extends AbstractGroupResource {\n      *\n      * @param outputFormat param to check\n      */\n-    private static void checkExportRequest(String outputFormat, List<Pair<String, String>> headers) {\n-        checkOutputFormat(outputFormat);\n-        checkRequestHeaders(headers);\n-    }\n-\n-    private static void checkOutputFormat(String outputFormat) {\n-        // _outputFormat only supports FHIR_NDJSON\n-        if (!StringUtils.equalsAny(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n+    private static void checkExportRequest(String outputFormat, String headerPrefer) {\n+        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, NDJSON\n+        if (!StringUtils.equalsAnyIgnoreCase(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n             throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n         }\n-    }\n+        if (headerPrefer==null || StringUtils.isEmpty(headerPrefer)){\n+            throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n+        }\n+        if (StringUtils.isNotEmpty(headerPrefer) && !headerPrefer.equals(\"respond-async\")) {\n+            throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n+        }\n \n-    private static void checkRequestHeaders(List<Pair<String, String>> headers) {\n-        headers.stream()\n-                .peek(header -> {\n-                    if (header.getRight() == null) {\n-                        throw new BadRequestException(\"The \" + header.getLeft() + \" header is required\");\n-                    }\n-                })\n-                .forEach(pair -> {\n-                    if (pair.getLeft().equals(\"Prefer\") && !pair.getRight().equals(\"respond-async\")) {\n-                        throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n-                    }\n-                    if (pair.getLeft().equals(\"Accept\") && !pair.getRight().equals(FHIR_JSON)) {\n-                        throw new BadRequestException(\"The 'Accept' header must be \" + FHIR_JSON);\n-                    }\n-                });\n     }\n \n     private List<String> fetchPatientMBIs(String groupID) {\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "a3db99d147b88d833a30287f907af2efb576d238", "url": "https://github.com/CMSgov/dpc-app/commit/a3db99d147b88d833a30287f907af2efb576d238", "message": "Update dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n\nCo-authored-by: Emily Hart <1923441+embh@users.noreply.github.com>", "committedDate": "2020-07-29T16:22:00Z", "type": "commit"}, {"oid": "9df012a6d4a2ec43f376a1e8c8ec963da71e860f", "url": "https://github.com/CMSgov/dpc-app/commit/9df012a6d4a2ec43f376a1e8c8ec963da71e860f", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-10-16T15:25:58Z", "type": "commit"}, {"oid": "175b477b6efb03c76bae440cf0bb932986d80ad9", "url": "https://github.com/CMSgov/dpc-app/commit/175b477b6efb03c76bae440cf0bb932986d80ad9", "message": "add unit test", "committedDate": "2020-10-16T18:51:13Z", "type": "commit"}, {"oid": "085e9f8aae3827e12052c3379063283091eda1d3", "url": "https://github.com/CMSgov/dpc-app/commit/085e9f8aae3827e12052c3379063283091eda1d3", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-10-20T05:50:37Z", "type": "commit"}, {"oid": "af8a4cbfb4b8b51f09314e6bef6123a97b325d00", "url": "https://github.com/CMSgov/dpc-app/commit/af8a4cbfb4b8b51f09314e6bef6123a97b325d00", "message": "simplify logic and add more tests", "committedDate": "2020-10-20T15:57:13Z", "type": "commit"}, {"oid": "5721302cf46db1c21b13cb51cc2529419e1c2444", "url": "https://github.com/CMSgov/dpc-app/commit/5721302cf46db1c21b13cb51cc2529419e1c2444", "message": "Merge branch 'master' into rb/DPC-556\n\n# Conflicts:\n#\tdpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n#\tdpc-api/src/test/java/gov/cms/dpc/api/resources/v1/GroupResourceUnitTest.java", "committedDate": "2020-10-20T21:28:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2MTU3Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/920#discussion_r509361572", "body": "Should they be case insensitive? ", "bodyText": "Should they be case insensitive?", "bodyHTML": "<p dir=\"auto\">Should they be case insensitive?</p>", "author": "MrMorie", "createdAt": "2020-10-21T14:57:55Z", "path": "dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java", "diffHunk": "@@ -369,8 +368,8 @@ private static void checkExportRequest(String outputFormat, List<Pair<String, St\n \n     private static void checkOutputFormat(String outputFormat) {\n         // _outputFormat only supports FHIR_NDJSON\n-        if (StringUtils.isNotEmpty(outputFormat) && !FHIR_NDJSON.equals(outputFormat)) {\n-            throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson'\");\n+        if (!StringUtils.equalsAny(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {", "originalCommit": "5721302cf46db1c21b13cb51cc2529419e1c2444", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NTY3Nw==", "url": "https://github.com/CMSgov/dpc-app/pull/920#discussion_r509385677", "bodyText": "good point... i think they should. Same is true for the checkRequestHeaders method I merged in yesterday.", "author": "jonfulk", "createdAt": "2020-10-21T15:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM2MTU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "122af11f3749e12b758939baeeaee4a72d2792aa", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex de6d383f..b578588a 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -367,8 +367,8 @@ public class GroupResource extends AbstractGroupResource {\n     }\n \n     private static void checkOutputFormat(String outputFormat) {\n-        // _outputFormat only supports FHIR_NDJSON\n-        if (!StringUtils.equalsAny(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n+        // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, NDJSON\n+        if (!StringUtils.equalsAnyIgnoreCase(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n             throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n         }\n     }\n", "next_change": {"commit": "400f5750b422bbf06c3d3f86adf5ebc95a733240", "changed_code": [{"header": "diff --git a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\nindex b578588a..98603e54 100644\n--- a/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n+++ b/dpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n", "chunk": "@@ -361,33 +357,18 @@ public class GroupResource extends AbstractGroupResource {\n      *\n      * @param outputFormat param to check\n      */\n-    private static void checkExportRequest(String outputFormat, List<Pair<String, String>> headers) {\n-        checkOutputFormat(outputFormat);\n-        checkRequestHeaders(headers);\n-    }\n-\n-    private static void checkOutputFormat(String outputFormat) {\n+    private static void checkExportRequest(String outputFormat, String headerPrefer) {\n         // _outputFormat only supports FHIR_NDJSON, APPLICATION_NDJSON, NDJSON\n         if (!StringUtils.equalsAnyIgnoreCase(outputFormat, FHIR_NDJSON, APPLICATION_NDJSON, NDJSON)) {\n             throw new BadRequestException(\"'_outputFormat' query parameter must be 'application/fhir+ndjson', 'application/ndjson', or 'ndjson' \");\n         }\n-    }\n+        if (headerPrefer==null || StringUtils.isEmpty(headerPrefer)){\n+            throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n+        }\n+        if (StringUtils.isNotEmpty(headerPrefer) && !headerPrefer.equals(\"respond-async\")) {\n+            throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n+        }\n \n-    private static void checkRequestHeaders(List<Pair<String, String>> headers) {\n-        headers.stream()\n-                .peek(header -> {\n-                    if (header.getRight() == null) {\n-                        throw new BadRequestException(\"The \" + header.getLeft() + \" header is required\");\n-                    }\n-                })\n-                .forEach(pair -> {\n-                    if (pair.getLeft().equals(\"Prefer\") && !pair.getRight().equals(\"respond-async\")) {\n-                        throw new BadRequestException(\"The 'Prefer' header must be 'respond-async'\");\n-                    }\n-                    if (pair.getLeft().equals(\"Accept\") && !pair.getRight().equals(FHIR_JSON)) {\n-                        throw new BadRequestException(\"The 'Accept' header must be \" + FHIR_JSON);\n-                    }\n-                });\n     }\n \n     private List<String> fetchPatientMBIs(String groupID) {\n", "next_change": null}]}}]}}, {"oid": "122af11f3749e12b758939baeeaee4a72d2792aa", "url": "https://github.com/CMSgov/dpc-app/commit/122af11f3749e12b758939baeeaee4a72d2792aa", "message": "ignore case", "committedDate": "2020-10-21T23:19:44Z", "type": "commit"}, {"oid": "400f5750b422bbf06c3d3f86adf5ebc95a733240", "url": "https://github.com/CMSgov/dpc-app/commit/400f5750b422bbf06c3d3f86adf5ebc95a733240", "message": "Merge branch 'master' into rb/DPC-556\n\n# Conflicts:\n#\tdpc-api/src/main/java/gov/cms/dpc/api/resources/v1/GroupResource.java\n#\tdpc-api/src/test/java/gov/cms/dpc/api/resources/v1/GroupResourceUnitTest.java", "committedDate": "2020-10-23T03:42:09Z", "type": "commit"}, {"oid": "e6f2bafa0f4966d4885bcb1aa8a25973ceeabc15", "url": "https://github.com/CMSgov/dpc-app/commit/e6f2bafa0f4966d4885bcb1aa8a25973ceeabc15", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-10-27T15:09:03Z", "type": "commit"}, {"oid": "14739d4ade890e684cda480494e1f56f9e9a7da9", "url": "https://github.com/CMSgov/dpc-app/commit/14739d4ade890e684cda480494e1f56f9e9a7da9", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-10-29T14:38:45Z", "type": "commit"}, {"oid": "4f183c05826a34d83feea30a6b3086d8afed059a", "url": "https://github.com/CMSgov/dpc-app/commit/4f183c05826a34d83feea30a6b3086d8afed059a", "message": "Merge branch 'master' into rb/DPC-556", "committedDate": "2020-10-29T15:46:46Z", "type": "commit"}, {"oid": "460284c0d40d23517bd54ce8b8ef7e7f6f7a10cb", "url": "https://github.com/CMSgov/dpc-app/commit/460284c0d40d23517bd54ce8b8ef7e7f6f7a10cb", "message": "Merge branch 'master' into rb/DPC-556\n\n# Conflicts:\n#\tdpc-api/src/test/java/gov/cms/dpc/api/resources/v1/GroupResourceUnitTest.java", "committedDate": "2020-10-30T14:33:28Z", "type": "commit"}]}