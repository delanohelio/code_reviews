{"pr_number": 342, "pr_title": "New check: Missing bridge structure (#341)", "pr_author": "ladwlo", "pr_createdAt": "2020-08-18T08:50:47Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/342", "timeline": [{"oid": "6ec52e367e73e015ee6c02cc895afe7724ab7a57", "url": "https://github.com/osmlab/atlas-checks/commit/6ec52e367e73e015ee6c02cc895afe7724ab7a57", "message": "Making Sonar happy", "committedDate": "2020-08-18T11:12:06Z", "type": "forcePushed"}, {"oid": "97b1d67f8bd444bd2794b7134c83085825c1cef8", "url": "https://github.com/osmlab/atlas-checks/commit/97b1d67f8bd444bd2794b7134c83085825c1cef8", "message": "New check: Missing bridge structure (#341)", "committedDate": "2020-08-18T12:28:31Z", "type": "commit"}, {"oid": "97b1d67f8bd444bd2794b7134c83085825c1cef8", "url": "https://github.com/osmlab/atlas-checks/commit/97b1d67f8bd444bd2794b7134c83085825c1cef8", "message": "New check: Missing bridge structure (#341)", "committedDate": "2020-08-18T12:28:31Z", "type": "forcePushed"}, {"oid": "8b02cf1c0d72c14e09512d616377c8e0513db69b", "url": "https://github.com/osmlab/atlas-checks/commit/8b02cf1c0d72c14e09512d616377c8e0513db69b", "message": "No duplicate flagging of bidirectional Ways", "committedDate": "2020-08-19T09:48:10Z", "type": "commit"}, {"oid": "18f541dfd96dda5b189ea244b71dcee2dd02f5ab", "url": "https://github.com/osmlab/atlas-checks/commit/18f541dfd96dda5b189ea244b71dcee2dd02f5ab", "message": "Replacing Atlas ID in the violation info with OSM ID", "committedDate": "2020-08-19T09:51:32Z", "type": "commit"}, {"oid": "2bff8038d5957264cd3dd0d0a98d3fc91073d416", "url": "https://github.com/osmlab/atlas-checks/commit/2bff8038d5957264cd3dd0d0a98d3fc91073d416", "message": "Updating documentation", "committedDate": "2020-08-19T09:54:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2ODc3MQ==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473368771", "body": "This could be:\r\n```suggestion\r\n        return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);\r\n```", "bodyText": "This could be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n          \n          \n            \n                    return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());\n          \n          \n            \n                    return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);", "bodyHTML": "<p dir=\"auto\">This could be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">String</span>&gt;</span> bridgeTag <span class=\"pl-k\">=</span> object<span class=\"pl-k\">.</span>getTag(<span class=\"pl-c1\">BRIDGE_TAG</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> bridgeTag<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yes<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>equals(bridgeTag<span class=\"pl-k\">.</span>get());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Validators</span><span class=\"pl-k\">.</span>isOfType(object, <span class=\"pl-smi\">BridgeTag</span><span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">BridgeTag</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>YES</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Bentleysb", "createdAt": "2020-08-19T22:03:50Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());", "originalCommit": "2bff8038d5957264cd3dd0d0a98d3fc91073d416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxODY1Mg==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473718652", "bodyText": "Done. Thanks for the hint!", "author": "ladwlo", "createdAt": "2020-08-20T07:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM2ODc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3MDY2NA==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r473370664", "body": "This could be:\r\n```suggestion\r\n        return Validators.hasValuesFor(object, RailwayTag.class);\r\n```", "bodyText": "This could be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return object.getTag(RAILWAY_TAG).isPresent();\n          \n          \n            \n                    return Validators.hasValuesFor(object, RailwayTag.class);", "bodyHTML": "<p dir=\"auto\">This could be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"x x-first\">object</span><span class=\"pl-k x\">.</span><span class=\"x\">getTag(</span><span class=\"pl-c1 x\">RAILWAY_TAG</span><span class=\"x\">)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isPresent(</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi x x-first\">Validators</span><span class=\"pl-k x\">.</span><span class=\"x\">hasValuesFor(object, </span><span class=\"pl-smi x\">RailwayTag</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">class</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Bentleysb", "createdAt": "2020-08-19T22:06:21Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String RAILWAY_TAG = \"railway\";\n+    public static final String BRIDGE_TAG = \"bridge\";\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeTag = object.getTag(BRIDGE_TAG);\n+        return bridgeTag.isPresent() && \"yes\".equals(bridgeTag.get());\n+    }\n+\n+    private boolean isMajorHighway(final AtlasObject object)\n+    {\n+        return MAJOR_HIGHWAYS.contains(((Edge) object).highwayTag());\n+    }\n+\n+    private boolean isRailway(final AtlasObject object)\n+    {\n+        return object.getTag(RAILWAY_TAG).isPresent();", "originalCommit": "2bff8038d5957264cd3dd0d0a98d3fc91073d416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "url": "https://github.com/osmlab/atlas-checks/commit/80b9402ec3b0baaedd215623c4140755f9f8b1ef", "message": "Adding MapRoulette challenge; minor refactoring to accommodate code review comments", "committedDate": "2020-08-20T07:47:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NjAwNQ==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474066005", "body": "nit: Since there is only a single instruction, you can use Collections.singletonList instead of Arrays.asList.", "bodyText": "nit: Since there is only a single instruction, you can use Collections.singletonList instead of Arrays.asList.", "bodyHTML": "<p dir=\"auto\">nit: Since there is only a single instruction, you can use Collections.singletonList instead of Arrays.asList.</p>", "author": "sayas01", "createdAt": "2020-08-20T15:21:55Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(", "originalCommit": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2OTg4NQ==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474069885", "body": "Looks like the RailwayTag class already has a public method isRailway which could be leveraged here like: RailwayTag.isRailway()", "bodyText": "Looks like the RailwayTag class already has a public method isRailway which could be leveraged here like: RailwayTag.isRailway()", "bodyHTML": "<p dir=\"auto\">Looks like the RailwayTag class already has a public method isRailway which could be leveraged here like: RailwayTag.isRailway()</p>", "author": "sayas01", "createdAt": "2020-08-20T15:27:44Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));", "originalCommit": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NDE4Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474074183", "body": "One other way to check this would be to use Validators class. Predicate can be declared as a constant at the top like:\r\n`private static final Predicate<AtlasObject> MAJOR_HIGHWAYS = object -> Validators.isOfType(\r\n            object, Highway.class, HighwayTag.MOTORWAY,\r\n            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY)`", "bodyText": "One other way to check this would be to use Validators class. Predicate can be declared as a constant at the top like:\nprivate static final Predicate<AtlasObject> MAJOR_HIGHWAYS = object -> Validators.isOfType( object, Highway.class, HighwayTag.MOTORWAY, HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY)", "bodyHTML": "<p dir=\"auto\">One other way to check this would be to use Validators class. Predicate can be declared as a constant at the top like:<br>\n<code>private static final Predicate&lt;AtlasObject&gt; MAJOR_HIGHWAYS = object -&gt; Validators.isOfType( object, Highway.class, HighwayTag.MOTORWAY, HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY)</code></p>", "author": "sayas01", "createdAt": "2020-08-20T15:32:38Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())\n+        {\n+            return Optional\n+                    .of(createFlag(object, getLocalizedInstruction(0, object.getOsmIdentifier())));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<String> getFallbackInstructions()\n+    {\n+        return FALLBACK_INSTRUCTIONS;\n+    }\n+\n+    private boolean isGenericBridge(final AtlasObject object)\n+    {\n+        return Validators.isOfType(object, BridgeTag.class, BridgeTag.YES);\n+    }\n+\n+    private boolean isMajorHighway(final AtlasObject object)\n+    {\n+        return MAJOR_HIGHWAYS.contains(((Edge) object).highwayTag());", "originalCommit": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTk2Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474075963", "body": "nit: Could clean this class up by static importing TestAtlas.*.", "bodyText": "nit: Could clean this class up by static importing TestAtlas.*.", "bodyHTML": "<p dir=\"auto\">nit: Could clean this class up by static importing TestAtlas.*.</p>", "author": "sayas01", "createdAt": "2020-08-20T15:34:21Z", "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTestRule.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import org.openstreetmap.atlas.geography.atlas.Atlas;\n+import org.openstreetmap.atlas.utilities.testing.CoreTestRule;\n+import org.openstreetmap.atlas.utilities.testing.TestAtlas;\n+\n+/**\n+ * Test atlases for {@link BridgeDetailedInfoCheckTest}\n+ *\n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheckTestRule extends CoreTestRule\n+{\n+\n+    // short bridge\n+    private static final String LOC_1 = \"47.222,-122.444\";\n+    private static final String LOC_2 = \"47.225,-122.441\";\n+    // long bridge\n+    private static final String LOC_3 = \"47.111,-122.666\";\n+    private static final String LOC_4 = \"47.115,-122.661\";\n+\n+    @TestAtlas(\n+            // nodes\n+            nodes = { @TestAtlas.Node(coordinates = @TestAtlas.Loc(value = LOC_3)),", "originalCommit": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NjcwNw==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474076707", "body": "Love the extensive unit testing!! \ud83d\udcaf ", "bodyText": "Love the extensive unit testing!! \ud83d\udcaf", "bodyHTML": "<p dir=\"auto\">Love the extensive unit testing!! <g-emoji class=\"g-emoji\" alias=\"100\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png\">\ud83d\udcaf</g-emoji></p>", "author": "sayas01", "createdAt": "2020-08-20T15:35:03Z", "path": "src/test/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheckTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.openstreetmap.atlas.checks.configuration.ConfigurationResolver;\n+import org.openstreetmap.atlas.checks.validation.verifier.ConsumerBasedExpectedCheckVerifier;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+\n+/**\n+ * Tests for {@link BridgeDetailedInfoCheck}\n+ *\n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheckTest", "originalCommit": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4Mjg0Ng==", "url": "https://github.com/osmlab/atlas-checks/pull/342#discussion_r474082846", "body": "Could use bridgeStructureTag.isEmpty() instead.", "bodyText": "Could use bridgeStructureTag.isEmpty() instead.", "bodyHTML": "<p dir=\"auto\">Could use bridgeStructureTag.isEmpty() instead.</p>", "author": "sayas01", "createdAt": "2020-08-20T15:41:10Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/tag/BridgeDetailedInfoCheck.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.openstreetmap.atlas.checks.validation.tag;\n+\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.openstreetmap.atlas.checks.base.BaseCheck;\n+import org.openstreetmap.atlas.checks.flag.CheckFlag;\n+import org.openstreetmap.atlas.geography.atlas.items.AtlasObject;\n+import org.openstreetmap.atlas.geography.atlas.items.Edge;\n+import org.openstreetmap.atlas.tags.BridgeTag;\n+import org.openstreetmap.atlas.tags.HighwayTag;\n+import org.openstreetmap.atlas.tags.RailwayTag;\n+import org.openstreetmap.atlas.tags.annotations.validation.Validators;\n+import org.openstreetmap.atlas.utilities.configuration.Configuration;\n+import org.openstreetmap.atlas.utilities.scalars.Distance;\n+\n+/**\n+ * Flags railway and major highway bridges which are longer than configured minimum and have\n+ * unspecified structure. This is a port of Osmose check 7012.\n+ * \n+ * @author ladwlo\n+ */\n+public class BridgeDetailedInfoCheck extends BaseCheck<Long>\n+{\n+\n+    private static final long serialVersionUID = -8915653487119336836L;\n+\n+    private static final EnumSet<HighwayTag> MAJOR_HIGHWAYS = EnumSet.of(HighwayTag.MOTORWAY,\n+            HighwayTag.TRUNK, HighwayTag.PRIMARY, HighwayTag.SECONDARY);\n+    private static final Double MINIMUM_LENGTH = 500.0;\n+    public static final String BRIDGE_STRUCTURE_TAG = \"bridge:structure\";\n+    private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(\n+            \"The length of this bridge (OSM ID: {0,number,#}) makes it deserve more details than just 'bridge=yes'. Add an appropriate 'bridge=*' or 'bridge:structure=*' tag.\");\n+    private final Distance minimumLength;\n+\n+    /**\n+     * The default constructor that must be supplied. The Atlas Checks framework will generate the\n+     * checks with this constructor, supplying a configuration that can be used to adjust any\n+     * parameters that the check uses during operation.\n+     *\n+     * @param configuration\n+     *            the JSON configuration for this check\n+     */\n+    public BridgeDetailedInfoCheck(final Configuration configuration)\n+    {\n+        super(configuration);\n+        this.minimumLength = configurationValue(configuration, \"bridge.length.minimum.meters\",\n+                MINIMUM_LENGTH, Distance::meters);\n+    }\n+\n+    /**\n+     * This function will validate if the supplied atlas object is valid for the check.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return {@code true} if this object should be checked\n+     */\n+    @Override\n+    public boolean validCheckForObject(final AtlasObject object)\n+    {\n+        // only master edges shall be flagged to avoid duplicate flags on the same OSM Way\n+        return object instanceof Edge && ((Edge) object).isMasterEdge() && isGenericBridge(object)\n+                && (isRailway(object) || isMajorHighway(object));\n+    }\n+\n+    /**\n+     * This is the actual function that will check to see whether the object needs to be flagged.\n+     *\n+     * @param object\n+     *            the atlas object supplied by the Atlas-Checks framework for evaluation\n+     * @return an optional {@link CheckFlag} object that\n+     */\n+    @Override\n+    protected Optional<CheckFlag> flag(final AtlasObject object)\n+    {\n+        final Optional<String> bridgeStructureTag = object.getTag(BRIDGE_STRUCTURE_TAG);\n+        if (((Edge) object).length().isGreaterThan(this.minimumLength)\n+                && !bridgeStructureTag.isPresent())", "originalCommit": "80b9402ec3b0baaedd215623c4140755f9f8b1ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "01919b2ee27252c28512a4af201b1a6c2270da1f", "url": "https://github.com/osmlab/atlas-checks/commit/01919b2ee27252c28512a4af201b1a6c2270da1f", "message": "More refactoring after code review", "committedDate": "2020-08-20T16:39:51Z", "type": "commit"}, {"oid": "e3aa08c376e1f57d56d541bc608e9f52e09da68c", "url": "https://github.com/osmlab/atlas-checks/commit/e3aa08c376e1f57d56d541bc608e9f52e09da68c", "message": "Reverting accidentally changed 'enabled' flags", "committedDate": "2020-08-20T16:40:17Z", "type": "commit"}, {"oid": "4d386245f963d5257dcc8f896af60be797880b31", "url": "https://github.com/osmlab/atlas-checks/commit/4d386245f963d5257dcc8f896af60be797880b31", "message": "Fixing one more checkstyle problem", "committedDate": "2020-08-20T16:53:12Z", "type": "commit"}]}