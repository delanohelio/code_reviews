{"pr_number": 263, "pr_title": "[LineCrossingWaterBody] Expand waterbody definition and add flaggable items configurables", "pr_author": "seancoulter", "pr_createdAt": "2020-02-20T18:25:34Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/263", "merge_commit": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "timeline": [{"oid": "bf076f1627ba865d74e45c860b8278faa20208f9", "url": "https://github.com/osmlab/atlas-checks/commit/bf076f1627ba865d74e45c860b8278faa20208f9", "message": "lcwb update to flag intersecting buildings", "committedDate": "2020-02-06T20:53:46Z", "type": "commit"}, {"oid": "37c6a16bbdb97b989280c10e9557f9708789e5bb", "url": "https://github.com/osmlab/atlas-checks/commit/37c6a16bbdb97b989280c10e9557f9708789e5bb", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-10T19:07:24Z", "type": "commit"}, {"oid": "e96b8701e37fbaee34ecf31cc417f6fcda63ae19", "url": "https://github.com/osmlab/atlas-checks/commit/e96b8701e37fbaee34ecf31cc417f6fcda63ae19", "message": "small fixes; update instruction", "committedDate": "2020-02-10T19:07:50Z", "type": "commit"}, {"oid": "1c2d6d90b2f9f7c4ff48dbc756354f6257c96270", "url": "https://github.com/osmlab/atlas-checks/commit/1c2d6d90b2f9f7c4ff48dbc756354f6257c96270", "message": "LCWB add switch for flagging specific lineItems", "committedDate": "2020-02-12T23:22:37Z", "type": "commit"}, {"oid": "03ee4149f24306f2ea39f8127377d1cfa2342e0f", "url": "https://github.com/osmlab/atlas-checks/commit/03ee4149f24306f2ea39f8127377d1cfa2342e0f", "message": "nonoffending building tags; introduce level tag", "committedDate": "2020-02-13T19:03:58Z", "type": "commit"}, {"oid": "59c2dd670132220c66446a74b212cf26bcb4fb00", "url": "https://github.com/osmlab/atlas-checks/commit/59c2dd670132220c66446a74b212cf26bcb4fb00", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-13T19:05:57Z", "type": "commit"}, {"oid": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "url": "https://github.com/osmlab/atlas-checks/commit/a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-20T18:07:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MjgzNQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r382292835", "body": "nit: If we can move all of these validations into a method and call it from here will have increase readability and easy to test.", "bodyText": "nit: If we can move all of these validations into a method and call it from here will have increase readability and easy to test.", "bodyHTML": "<p dir=\"auto\">nit: If we can move all of these validations into a method and call it from here will have increase readability and easy to test.</p>", "author": "smaheshwaram", "createdAt": "2020-02-20T22:25:41Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -146,23 +221,43 @@ private static boolean isBoundary(final AtlasEntity crossingLine)\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n+        this.filterOffendingLineItems = this.configurationValue(configuration,\n+                \"intersectingLineItems.filter\", DEFAULT_OFFENDING_LINEITEM_FILTER);\n     }\n \n     @Override\n     public boolean validCheckForObject(final AtlasObject object)\n     {\n-        return TypePredicates.IS_AREA.test(object) && TagPredicates.IS_WATER_BODY.test(object);\n+        // We only consider water body areas, not linear water bodies\n+        return TypePredicates.IS_AREA.test(object) && !INVALID_WATER_BODY_TAGS.test(object)\n+                && VALID_WATER_BODY_TAGS.test(object);\n     }\n \n     @Override\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        // First retrieve the crossing edges and lines\n+        // First retrieve the crossing edges, lines, buildings\n         final Area objectAsArea = (Area) object;\n         final Polygon areaAsPolygon = objectAsArea.asPolygon();\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> crossingLinearItems = new MultiIterable<>(\n-                atlas.edgesIntersecting(areaAsPolygon), atlas.linesIntersecting(areaAsPolygon));\n+        final Iterable<AtlasItem> allCrossingItems = this.filterOffendingLineItems\n+                // If we're only looking for crossing buildings/railways/streets\n+                ? new MultiIterable<>(\n+                        atlas.lineItemsIntersecting(areaAsPolygon,\n+                                lineItem -> (lineItem instanceof Edge\n+                                        && HIGHWAY_TYPE_TO_FLAG.test((Edge) lineItem)", "originalCommit": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyMzM1MA==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r384223350", "bodyText": "Yup, good thinking", "author": "seancoulter", "createdAt": "2020-02-26T01:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MjgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "64567e38d1df7ea8cc99122403e26ad68a40a32a", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b6d8afe..168ec6a 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -240,24 +236,17 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n         final Area objectAsArea = (Area) object;\n         final Polygon areaAsPolygon = objectAsArea.asPolygon();\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> allCrossingItems = this.filterOffendingLineItems\n-                // If we're only looking for crossing buildings/railways/streets\n+\n+        final Iterable<AtlasItem> allCrossingItems = this.flagBuildings\n                 ? new MultiIterable<>(\n                         atlas.lineItemsIntersecting(areaAsPolygon,\n-                                lineItem -> (lineItem instanceof Edge\n-                                        && HIGHWAY_TYPE_TO_FLAG.test((Edge) lineItem)\n-                                        || IS_OFFENDER.test(lineItem))\n-                                        && lineItem.intersects(areaAsPolygon)\n-                                        && (!Validators.hasValuesFor(lineItem, BridgeTag.class)\n-                                                || Validators.isOfType(lineItem, BridgeTag.class,\n-                                                        BridgeTag.NO))\n-                                        && LevelTag.areOnSameLevel(object, lineItem)),\n+                                lineItem -> isOffendingLineItem(object, areaAsPolygon)\n+                                        .test(lineItem)),\n                         atlas.areasIntersecting(areaAsPolygon,\n                                 area -> IS_BUILDING.test(area) && !NONOFFENDING_BUILDINGS.test(area)\n                                         && LevelTag.areOnSameLevel(object, area)))\n-                // If we're interested in all crossing line items\n-                : new MultiIterable<>(atlas.edgesIntersecting(areaAsPolygon),\n-                        atlas.linesIntersecting(areaAsPolygon));\n+                : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(areaAsPolygon,\n+                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)));\n \n         // Assume there is no invalid crossing\n         boolean hasInvalidCrossings = false;\n", "next_change": {"commit": "0207257af3d6610c5b428b119846dbab53f7c457", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 168ec6a..fc03654 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -236,14 +224,13 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n         final Area objectAsArea = (Area) object;\n         final Polygon areaAsPolygon = objectAsArea.asPolygon();\n         final Atlas atlas = object.getAtlas();\n-\n         final Iterable<AtlasItem> allCrossingItems = this.flagBuildings\n-                ? new MultiIterable<>(\n-                        atlas.lineItemsIntersecting(areaAsPolygon,\n-                                lineItem -> isOffendingLineItem(object, areaAsPolygon)\n-                                        .test(lineItem)),\n+                ? new MultiIterable<>(atlas.lineItemsIntersecting(\n+                        areaAsPolygon,\n+                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)),\n                         atlas.areasIntersecting(areaAsPolygon,\n-                                area -> IS_BUILDING.test(area) && !NONOFFENDING_BUILDINGS.test(area)\n+                                area -> BuildingTag.isBuilding(area)\n+                                        && !NONOFFENDING_BUILDINGS.test(area)\n                                         && LevelTag.areOnSameLevel(object, area)))\n                 : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(areaAsPolygon,\n                         lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)));\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b6d8afe..80dbb53 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -234,30 +218,23 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     }\n \n     @Override\n+    @SuppressWarnings(\"S2293\")\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n         // First retrieve the crossing edges, lines, buildings\n         final Area objectAsArea = (Area) object;\n         final Polygon areaAsPolygon = objectAsArea.asPolygon();\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> allCrossingItems = this.filterOffendingLineItems\n-                // If we're only looking for crossing buildings/railways/streets\n-                ? new MultiIterable<>(\n-                        atlas.lineItemsIntersecting(areaAsPolygon,\n-                                lineItem -> (lineItem instanceof Edge\n-                                        && HIGHWAY_TYPE_TO_FLAG.test((Edge) lineItem)\n-                                        || IS_OFFENDER.test(lineItem))\n-                                        && lineItem.intersects(areaAsPolygon)\n-                                        && (!Validators.hasValuesFor(lineItem, BridgeTag.class)\n-                                                || Validators.isOfType(lineItem, BridgeTag.class,\n-                                                        BridgeTag.NO))\n-                                        && LevelTag.areOnSameLevel(object, lineItem)),\n+        final Iterable<AtlasItem> allCrossingItems = this.flagBuildings\n+                ? new MultiIterable<>(atlas.lineItemsIntersecting(\n+                        areaAsPolygon,\n+                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)),\n                         atlas.areasIntersecting(areaAsPolygon,\n-                                area -> IS_BUILDING.test(area) && !NONOFFENDING_BUILDINGS.test(area)\n+                                area -> BuildingTag.isBuilding(area)\n+                                        && !NONOFFENDING_BUILDINGS.test(area)\n                                         && LevelTag.areOnSameLevel(object, area)))\n-                // If we're interested in all crossing line items\n-                : new MultiIterable<>(atlas.edgesIntersecting(areaAsPolygon),\n-                        atlas.linesIntersecting(areaAsPolygon));\n+                : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(areaAsPolygon,\n+                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)));\n \n         // Assume there is no invalid crossing\n         boolean hasInvalidCrossings = false;\n", "next_change": {"commit": "b0489ead2783eea9ffe95af4080fd0d61221f42b", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 80dbb53..132ae43 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -212,66 +217,67 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     @Override\n     public boolean validCheckForObject(final AtlasObject object)\n     {\n-        // We only consider water body areas, not linear water bodies\n-        return TypePredicates.IS_AREA.test(object) && !INVALID_WATER_BODY_TAGS.test(object)\n+        // We only consider water body areas or multipolygon relations that are not at borders, not\n+        // linear water bodies\n+        return (TypePredicates.IS_AREA.test(object) || (object instanceof Relation\n+                && object.getTag(SyntheticRelationMemberAdded.KEY).isEmpty()\n+                && ((Relation) object).isMultiPolygon())) && !INVALID_WATER_BODY_TAGS.test(object)\n                 && VALID_WATER_BODY_TAGS.test(object);\n     }\n \n     @Override\n-    @SuppressWarnings(\"S2293\")\n+    @SuppressWarnings(\"squid:S2293\")\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        // First retrieve the crossing edges, lines, buildings\n-        final Area objectAsArea = (Area) object;\n-        final Polygon areaAsPolygon = objectAsArea.asPolygon();\n+        // First convert the waterbody to a GeometricSurface for use in querying\n+        final GeometricSurface waterbody = object instanceof Area ? ((Area) object).asPolygon()\n+                : new RelationOrAreaToMultiPolygonConverter().convert((Relation) object);\n+        // Then retrieve the invalid crossing edges, lines, buildings\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> allCrossingItems = this.flagBuildings\n-                ? new MultiIterable<>(atlas.lineItemsIntersecting(\n-                        areaAsPolygon,\n-                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)),\n-                        atlas.areasIntersecting(areaAsPolygon,\n+        final Iterable<AtlasItem> invalidCrossingItems = this.flagBuildings\n+                ? new MultiIterable<>(atlas.lineItemsIntersecting(waterbody,\n+                        lineItem -> isOffendingLineItem(object, waterbody).test(lineItem)\n+                                && !this.canCrossWaterBody(lineItem)\n+                                && !this.intersectionsAreExplicit(waterbody, lineItem)),\n+                        atlas.areasIntersecting(waterbody,\n                                 area -> BuildingTag.isBuilding(area)\n                                         && !NONOFFENDING_BUILDINGS.test(area)\n                                         && LevelTag.areOnSameLevel(object, area)))\n-                : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(areaAsPolygon,\n-                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)));\n+                : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(waterbody,\n+                        lineItem -> isOffendingLineItem(object, waterbody).test(lineItem)\n+                                && !this.canCrossWaterBody(lineItem)\n+                                && !this.intersectionsAreExplicit(waterbody, lineItem)));\n \n-        // Assume there is no invalid crossing\n-        boolean hasInvalidCrossings = false;\n+        // This waterbody has no invalid crossings\n+        if (!invalidCrossingItems.iterator().hasNext())\n+        {\n+            return Optional.empty();\n+        }\n \n-        // Still let's create a flag in case of an invalid crossing\n         final CheckFlag newFlag = new CheckFlag(getTaskIdentifier(object));\n         newFlag.addObject(object);\n         newFlag.addInstruction(this.getLocalizedInstruction(0, object.getOsmIdentifier()));\n \n+        // Only record an OSM id as crossing once in the instruction\n+        final Set<Long> recordedOsmIds = new HashSet<>();\n         // Go through crossing items and collect invalid crossings\n         // NOTE: Due to way sectioning same OSM way could be marked multiple times here. However,\n         // MapRoulette will display way-sectioned edges in case there is an invalid crossing.\n         // Therefore, if an OSM way crosses a water body multiple times in separate edges, then\n         // each edge will be marked explicitly.\n-        for (final AtlasItem crossingItem : allCrossingItems)\n+        for (final AtlasItem crossingItem : invalidCrossingItems)\n         {\n-            // Flag all buildings or if line item, check if it can actually cross\n-            if (crossingItem instanceof Area || !this.canCrossWaterBody(crossingItem)\n-                    && !IntersectionUtilities.haveExplicitLocationsForIntersections(areaAsPolygon,\n-                            (LineItem) crossingItem))\n+            // Update the flag\n+            newFlag.addObject(crossingItem);\n+            if (!recordedOsmIds.contains(crossingItem.getOsmIdentifier()))\n             {\n-                // Update the flag\n-                newFlag.addObject(crossingItem);\n                 newFlag.addInstruction(this.getLocalizedInstruction(\n                         crossingItem instanceof Area ? 2 : 1, crossingItem.getOsmIdentifier()));\n-                // Set indicator to make sure we return invalid crossings\n-                hasInvalidCrossings = true;\n+                recordedOsmIds.add(crossingItem.getOsmIdentifier());\n             }\n         }\n \n-        // If there is an invalid crossing, return the previously created flag\n-        if (hasInvalidCrossings)\n-        {\n-            return Optional.of(newFlag);\n-        }\n-\n-        return Optional.empty();\n+        return Optional.of(newFlag);\n     }\n \n     @Override\n", "next_change": {"commit": "0932b19f679665631d67a16547b52d0672229b2f", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 132ae43..c7f0301 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -276,7 +313,6 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n                 recordedOsmIds.add(crossingItem.getOsmIdentifier());\n             }\n         }\n-\n         return Optional.of(newFlag);\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "message": "Merge commit", "committedDate": null}, {"oid": "b0489ead2783eea9ffe95af4080fd0d61221f42b", "committedDate": "2020-04-20 20:25:34 -0700", "message": "LCWB update - multi polygon relation waterbodies (#282)"}, {"oid": "50748afb4af624c662efb0e9051fe1ad32536ca7", "committedDate": "2020-05-13 14:55:48 -0700", "message": "LCWB enhancement - borders,ferries,fords (#287)"}, {"oid": "c132828cdc543524798e19dada9bc9c9f500b8fe", "committedDate": "2020-07-22 11:39:50 -0700", "message": "LineCrossingWaterbodyCheck performance improvements (#326)"}, {"oid": "5be577e407c3433cabc5868f998b46f2ee98c09c", "committedDate": "2020-09-04 10:55:41 -0700", "message": "Replace some non-inclusive language (#354)"}, {"oid": "72fd85356005120954b4aea76ee08bddf4effcc9", "committedDate": "2020-09-21 10:16:30 -0700", "message": "CHECKSTYLE: Ensure methods have `this` qualifier (#359)"}, {"oid": "0932b19f679665631d67a16547b52d0672229b2f", "committedDate": "2021-03-08 09:12:37 -0800", "message": "Adding intersection locations to each flag.  (#515)"}, {"oid": "2cbea41292cfa93d3ce8da0ab23ec2b6210b4bfe", "committedDate": "2021-03-10 12:24:49 -0800", "message": "Fixes to LineCrossingWaterBodyCheck (#513)"}, {"oid": "4547c1bfe8ac6daa98030f59c06adeb6343b3c96", "committedDate": "2021-07-14 14:49:35 -0700", "message": "lineCrossingWaterBodyCheck adding handling for footway, bridleway, steps, corridor, path (#571)"}, {"oid": "fae12687decd809cd99fb2d5489d3143c6315a58", "committedDate": "2021-08-25 14:24:17 -0700", "message": "multi -> geom (#606)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5ODk1Mw==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r382298953", "body": "Wondering if we can move these to json file and do validation here will be good. It's just my opinion. Please use your better judgement.", "bodyText": "Wondering if we can move these to json file and do validation here will be good. It's just my opinion. Please use your better judgement.", "bodyHTML": "<p dir=\"auto\">Wondering if we can move these to json file and do validation here will be good. It's just my opinion. Please use your better judgement.</p>", "author": "smaheshwaram", "createdAt": "2020-02-20T22:40:13Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -66,6 +72,75 @@\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\";\n     private static final TaggableFilter CAN_CROSS_WATER_BODY_FILTER = TaggableFilter\n             .forDefinition(CAN_CROSS_WATER_BODY_TAGS);\n+    private static final String OFFENDING_LINEITEMS = \"railway->rail,narrow_gauge,preserved,subway,disused,monorail,tram,light_rail,funicular,construction,miniature\";\n+    private static final TaggableFilter IS_OFFENDER = TaggableFilter\n+            .forDefinition(OFFENDING_LINEITEMS);\n+    // Whether we should flag buildings that cross waterbodies\n+    private static final Predicate<Edge> HIGHWAY_TYPE_TO_FLAG = object -> object.highwayTag()\n+            .isMoreImportantThanOrEqualTo(HighwayTag.PATH)\n+            && Validators.isNotOfType(object, HighwayTag.class, HighwayTag.BUS_GUIDEWAY);\n+    // Whether we should limit flags to only streets, buildings, and railways\n+    private static final boolean DEFAULT_OFFENDING_LINEITEM_FILTER = false;\n+    private boolean filterOffendingLineItems;\n+    // Assume the object is an area based on atlas call\n+    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators\n+            .isNotOfType(object, BuildingTag.class, BuildingTag.NO);\n+    private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n+    private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n+            .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n+\n+    private static final String WATER_BODY_TAGS =\n+            // Lakes\n+            \"natural->spring,hot_spring&name->*\" + \"|natural->lake,pond\" + \"|water:type->lake\"\n+                    + \"|landuse->pond\" + \"|water->lake,pond,oxbow,salt_lake\" +\n+\n+                    // Rivers\n+                    \"|natural->stream\"\n+                    + \"|water->canal,river,lock,moat,riverbank,creek,stream,stream_pool\"\n+                    + \"|waterway->river,riverbank,brook,ditch,stream,creek,canal,derelict_canal\"\n+                    + \"|stream->*\" + \"|waterway->drain&name->*\" + \"|water->drain&name->*\" +\n+\n+                    // Reservoirs\n+                    \"|water->reservoir\" + \"|water->dam&natural->water\" + \"|landuse->reservoir\"\n+                    + \"|natural->reservoir\" + \"|seamark:type->dam&natural->water\" +\n+\n+                    // Miscellaneous\n+                    \"|natural->water\" + \"|waterway->water\" + \"|water->water,perennial\"\n+                    + \"|landuse->water\" +\n+\n+                    // Wetlands\n+                    \"|wetland->tidalflat,reedbed\" + \"|water->tidalflat,reedbed\"\n+                    + \"|natural->tidalflat,reedbed\" +\n+\n+                    // Lagoons\n+                    \"|natural->lagoon\" + \"|water->lagoon\" + \"|waterway->lagoon\" +\n+\n+                    // Intermittent/Dry lakes\n+                    \"|intermittent->dry\" + \"|seasonal->dry\" + \"|natural->dry_lake\" +\n+\n+                    // Unique\n+                    \"|waterway->billabong,navigablechannel,river;stream,reservoir\";\n+    private static final TaggableFilter VALID_WATER_BODY_TAGS = TaggableFilter\n+            .forDefinition(WATER_BODY_TAGS);\n+\n+    private static final String WATER_BODY_EXCLUDE_TAGS = \"natural->dock,water_point,floodway,spillway,wastewater,waterhole\"\n+            + \"|waterway->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,culvert,dam,waterfall,fish_pass,dry_dock,construction,boat_lift,weir,breakwater,boatyard\"", "originalCommit": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5be577e407c3433cabc5868f998b46f2ee98c09c", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b6d8afe..e320c19 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -122,7 +126,6 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n                     \"|waterway->billabong,navigablechannel,river;stream,reservoir\";\n     private static final TaggableFilter VALID_WATER_BODY_TAGS = TaggableFilter\n             .forDefinition(WATER_BODY_TAGS);\n-\n     private static final String WATER_BODY_EXCLUDE_TAGS = \"natural->dock,water_point,floodway,spillway,wastewater,waterhole\"\n             + \"|waterway->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,culvert,dam,waterfall,fish_pass,dry_dock,construction,boat_lift,weir,breakwater,boatyard\"\n             + \"|water->lock_gate,dock,water_point,floodway,spillway,wastewater,waterhole,pool,reflecting_pool,swimming_pool,salt_pool,fountain,tank,fish_pass\"\n", "next_change": null}]}, "commits_in_main": [{"oid": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "message": "Merge commit", "committedDate": null}, {"oid": "b0489ead2783eea9ffe95af4080fd0d61221f42b", "committedDate": "2020-04-20 20:25:34 -0700", "message": "LCWB update - multi polygon relation waterbodies (#282)"}, {"oid": "50748afb4af624c662efb0e9051fe1ad32536ca7", "committedDate": "2020-05-13 14:55:48 -0700", "message": "LCWB enhancement - borders,ferries,fords (#287)"}, {"oid": "c132828cdc543524798e19dada9bc9c9f500b8fe", "committedDate": "2020-07-22 11:39:50 -0700", "message": "LineCrossingWaterbodyCheck performance improvements (#326)"}, {"oid": "5be577e407c3433cabc5868f998b46f2ee98c09c", "committedDate": "2020-09-04 10:55:41 -0700", "message": "Replace some non-inclusive language (#354)"}, {"oid": "72fd85356005120954b4aea76ee08bddf4effcc9", "committedDate": "2020-09-21 10:16:30 -0700", "message": "CHECKSTYLE: Ensure methods have `this` qualifier (#359)"}, {"oid": "0932b19f679665631d67a16547b52d0672229b2f", "committedDate": "2021-03-08 09:12:37 -0800", "message": "Adding intersection locations to each flag.  (#515)"}, {"oid": "2cbea41292cfa93d3ce8da0ab23ec2b6210b4bfe", "committedDate": "2021-03-10 12:24:49 -0800", "message": "Fixes to LineCrossingWaterBodyCheck (#513)"}, {"oid": "4547c1bfe8ac6daa98030f59c06adeb6343b3c96", "committedDate": "2021-07-14 14:49:35 -0700", "message": "lineCrossingWaterBodyCheck adding handling for footway, bridleway, steps, corridor, path (#571)"}, {"oid": "fae12687decd809cd99fb2d5489d3143c6315a58", "committedDate": "2021-08-25 14:24:17 -0700", "message": "multi -> geom (#606)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5Nzc0OQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r383397749", "body": "Rather than having this as a boolean switch, perhaps it would be more useful to have the configurable be a taggable filter. That way the user could easily select whatever lines they liked to be flagged.", "bodyText": "Rather than having this as a boolean switch, perhaps it would be more useful to have the configurable be a taggable filter. That way the user could easily select whatever lines they liked to be flagged.", "bodyHTML": "<p dir=\"auto\">Rather than having this as a boolean switch, perhaps it would be more useful to have the configurable be a taggable filter. That way the user could easily select whatever lines they liked to be flagged.</p>", "author": "Bentleysb", "createdAt": "2020-02-24T17:12:19Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -146,23 +221,43 @@ private static boolean isBoundary(final AtlasEntity crossingLine)\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n+        this.filterOffendingLineItems = this.configurationValue(configuration,", "originalCommit": "a717bcf6a3ff62d5224c289c0c9e1784c3cba7b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyMzIyMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r384223221", "bodyText": "Agreed. Done", "author": "seancoulter", "createdAt": "2020-02-26T01:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5Nzc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "64567e38d1df7ea8cc99122403e26ad68a40a32a", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b6d8afe..168ec6a 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -221,8 +216,9 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n-        this.filterOffendingLineItems = this.configurationValue(configuration,\n-                \"intersectingLineItems.filter\", DEFAULT_OFFENDING_LINEITEM_FILTER);\n+        this.lineItemsOffending = TaggableFilter\n+                .forDefinition(this.configurationValue(configuration, \"lineItems.offending\", \"\"));\n+        this.flagBuildings = this.configurationValue(configuration, \"buildings.flag\", false);\n     }\n \n     @Override\n", "next_change": {"commit": "934245d2a859c10f34e090306ef72324da05ba7a", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 168ec6a..fee16a6 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -219,6 +200,15 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n         this.lineItemsOffending = TaggableFilter\n                 .forDefinition(this.configurationValue(configuration, \"lineItems.offending\", \"\"));\n         this.flagBuildings = this.configurationValue(configuration, \"buildings.flag\", false);\n+        this.canCrossWaterBodyFilter = TaggableFilter.forDefinition(this.configurationValue(\n+                configuration, \"lineItems.non_offending\", DEFAULT_CAN_CROSS_WATER_BODY_TAGS));\n+        this.highwayMinimum = Enum.valueOf(HighwayTag.class,\n+                this.configurationValue(configuration, \"highway.minimum\", DEFAULT_HIGHWAY_MINIMUM)\n+                        .toUpperCase());\n+        this.highwaysExclude = this\n+                .configurationValue(configuration, \"highways.exclude\", DEFAULT_HIGHWAYS_EXCLUDE)\n+                .stream().map(element -> Enum.valueOf(HighwayTag.class, element.toUpperCase()))\n+                .collect(Collectors.toList());\n     }\n \n     @Override\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b6d8afe..80dbb53 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -221,8 +195,18 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     public LineCrossingWaterBodyCheck(final Configuration configuration)\n     {\n         super(configuration);\n-        this.filterOffendingLineItems = this.configurationValue(configuration,\n-                \"intersectingLineItems.filter\", DEFAULT_OFFENDING_LINEITEM_FILTER);\n+        this.lineItemsOffending = TaggableFilter\n+                .forDefinition(this.configurationValue(configuration, \"lineItems.offending\", \"\"));\n+        this.flagBuildings = this.configurationValue(configuration, \"buildings.flag\", false);\n+        this.canCrossWaterBodyFilter = TaggableFilter.forDefinition(this.configurationValue(\n+                configuration, \"lineItems.non_offending\", DEFAULT_CAN_CROSS_WATER_BODY_TAGS));\n+        this.highwayMinimum = Enum.valueOf(HighwayTag.class,\n+                this.configurationValue(configuration, \"highway.minimum\", DEFAULT_HIGHWAY_MINIMUM)\n+                        .toUpperCase());\n+        this.highwaysExclude = this\n+                .configurationValue(configuration, \"highways.exclude\", DEFAULT_HIGHWAYS_EXCLUDE)\n+                .stream().map(element -> Enum.valueOf(HighwayTag.class, element.toUpperCase()))\n+                .collect(Collectors.toList());\n     }\n \n     @Override\n", "next_change": {"commit": "b0489ead2783eea9ffe95af4080fd0d61221f42b", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 80dbb53..132ae43 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -212,66 +217,67 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     @Override\n     public boolean validCheckForObject(final AtlasObject object)\n     {\n-        // We only consider water body areas, not linear water bodies\n-        return TypePredicates.IS_AREA.test(object) && !INVALID_WATER_BODY_TAGS.test(object)\n+        // We only consider water body areas or multipolygon relations that are not at borders, not\n+        // linear water bodies\n+        return (TypePredicates.IS_AREA.test(object) || (object instanceof Relation\n+                && object.getTag(SyntheticRelationMemberAdded.KEY).isEmpty()\n+                && ((Relation) object).isMultiPolygon())) && !INVALID_WATER_BODY_TAGS.test(object)\n                 && VALID_WATER_BODY_TAGS.test(object);\n     }\n \n     @Override\n-    @SuppressWarnings(\"S2293\")\n+    @SuppressWarnings(\"squid:S2293\")\n     protected Optional<CheckFlag> flag(final AtlasObject object)\n     {\n-        // First retrieve the crossing edges, lines, buildings\n-        final Area objectAsArea = (Area) object;\n-        final Polygon areaAsPolygon = objectAsArea.asPolygon();\n+        // First convert the waterbody to a GeometricSurface for use in querying\n+        final GeometricSurface waterbody = object instanceof Area ? ((Area) object).asPolygon()\n+                : new RelationOrAreaToMultiPolygonConverter().convert((Relation) object);\n+        // Then retrieve the invalid crossing edges, lines, buildings\n         final Atlas atlas = object.getAtlas();\n-        final Iterable<AtlasItem> allCrossingItems = this.flagBuildings\n-                ? new MultiIterable<>(atlas.lineItemsIntersecting(\n-                        areaAsPolygon,\n-                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)),\n-                        atlas.areasIntersecting(areaAsPolygon,\n+        final Iterable<AtlasItem> invalidCrossingItems = this.flagBuildings\n+                ? new MultiIterable<>(atlas.lineItemsIntersecting(waterbody,\n+                        lineItem -> isOffendingLineItem(object, waterbody).test(lineItem)\n+                                && !this.canCrossWaterBody(lineItem)\n+                                && !this.intersectionsAreExplicit(waterbody, lineItem)),\n+                        atlas.areasIntersecting(waterbody,\n                                 area -> BuildingTag.isBuilding(area)\n                                         && !NONOFFENDING_BUILDINGS.test(area)\n                                         && LevelTag.areOnSameLevel(object, area)))\n-                : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(areaAsPolygon,\n-                        lineItem -> isOffendingLineItem(object, areaAsPolygon).test(lineItem)));\n+                : new MultiIterable<AtlasItem>(atlas.lineItemsIntersecting(waterbody,\n+                        lineItem -> isOffendingLineItem(object, waterbody).test(lineItem)\n+                                && !this.canCrossWaterBody(lineItem)\n+                                && !this.intersectionsAreExplicit(waterbody, lineItem)));\n \n-        // Assume there is no invalid crossing\n-        boolean hasInvalidCrossings = false;\n+        // This waterbody has no invalid crossings\n+        if (!invalidCrossingItems.iterator().hasNext())\n+        {\n+            return Optional.empty();\n+        }\n \n-        // Still let's create a flag in case of an invalid crossing\n         final CheckFlag newFlag = new CheckFlag(getTaskIdentifier(object));\n         newFlag.addObject(object);\n         newFlag.addInstruction(this.getLocalizedInstruction(0, object.getOsmIdentifier()));\n \n+        // Only record an OSM id as crossing once in the instruction\n+        final Set<Long> recordedOsmIds = new HashSet<>();\n         // Go through crossing items and collect invalid crossings\n         // NOTE: Due to way sectioning same OSM way could be marked multiple times here. However,\n         // MapRoulette will display way-sectioned edges in case there is an invalid crossing.\n         // Therefore, if an OSM way crosses a water body multiple times in separate edges, then\n         // each edge will be marked explicitly.\n-        for (final AtlasItem crossingItem : allCrossingItems)\n+        for (final AtlasItem crossingItem : invalidCrossingItems)\n         {\n-            // Flag all buildings or if line item, check if it can actually cross\n-            if (crossingItem instanceof Area || !this.canCrossWaterBody(crossingItem)\n-                    && !IntersectionUtilities.haveExplicitLocationsForIntersections(areaAsPolygon,\n-                            (LineItem) crossingItem))\n+            // Update the flag\n+            newFlag.addObject(crossingItem);\n+            if (!recordedOsmIds.contains(crossingItem.getOsmIdentifier()))\n             {\n-                // Update the flag\n-                newFlag.addObject(crossingItem);\n                 newFlag.addInstruction(this.getLocalizedInstruction(\n                         crossingItem instanceof Area ? 2 : 1, crossingItem.getOsmIdentifier()));\n-                // Set indicator to make sure we return invalid crossings\n-                hasInvalidCrossings = true;\n+                recordedOsmIds.add(crossingItem.getOsmIdentifier());\n             }\n         }\n \n-        // If there is an invalid crossing, return the previously created flag\n-        if (hasInvalidCrossings)\n-        {\n-            return Optional.of(newFlag);\n-        }\n-\n-        return Optional.empty();\n+        return Optional.of(newFlag);\n     }\n \n     @Override\n", "next_change": {"commit": "0932b19f679665631d67a16547b52d0672229b2f", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 132ae43..c7f0301 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -276,7 +313,6 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n                 recordedOsmIds.add(crossingItem.getOsmIdentifier());\n             }\n         }\n-\n         return Optional.of(newFlag);\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "message": "Merge commit", "committedDate": null}, {"oid": "b0489ead2783eea9ffe95af4080fd0d61221f42b", "committedDate": "2020-04-20 20:25:34 -0700", "message": "LCWB update - multi polygon relation waterbodies (#282)"}, {"oid": "50748afb4af624c662efb0e9051fe1ad32536ca7", "committedDate": "2020-05-13 14:55:48 -0700", "message": "LCWB enhancement - borders,ferries,fords (#287)"}, {"oid": "c132828cdc543524798e19dada9bc9c9f500b8fe", "committedDate": "2020-07-22 11:39:50 -0700", "message": "LineCrossingWaterbodyCheck performance improvements (#326)"}, {"oid": "5be577e407c3433cabc5868f998b46f2ee98c09c", "committedDate": "2020-09-04 10:55:41 -0700", "message": "Replace some non-inclusive language (#354)"}, {"oid": "72fd85356005120954b4aea76ee08bddf4effcc9", "committedDate": "2020-09-21 10:16:30 -0700", "message": "CHECKSTYLE: Ensure methods have `this` qualifier (#359)"}, {"oid": "0932b19f679665631d67a16547b52d0672229b2f", "committedDate": "2021-03-08 09:12:37 -0800", "message": "Adding intersection locations to each flag.  (#515)"}, {"oid": "2cbea41292cfa93d3ce8da0ab23ec2b6210b4bfe", "committedDate": "2021-03-10 12:24:49 -0800", "message": "Fixes to LineCrossingWaterBodyCheck (#513)"}, {"oid": "4547c1bfe8ac6daa98030f59c06adeb6343b3c96", "committedDate": "2021-07-14 14:49:35 -0700", "message": "lineCrossingWaterBodyCheck adding handling for footway, bridleway, steps, corridor, path (#571)"}, {"oid": "fae12687decd809cd99fb2d5489d3143c6315a58", "committedDate": "2021-08-25 14:24:17 -0700", "message": "multi -> geom (#606)"}]}, {"oid": "64567e38d1df7ea8cc99122403e26ad68a40a32a", "url": "https://github.com/osmlab/atlas-checks/commit/64567e38d1df7ea8cc99122403e26ad68a40a32a", "message": "LCWB add more unit tests; make tags configurable", "committedDate": "2020-02-26T01:05:04Z", "type": "commit"}, {"oid": "934245d2a859c10f34e090306ef72324da05ba7a", "url": "https://github.com/osmlab/atlas-checks/commit/934245d2a859c10f34e090306ef72324da05ba7a", "message": "LCWB add more configurables", "committedDate": "2020-02-26T02:32:00Z", "type": "commit"}, {"oid": "6812677f5d9a9a75834b43561776c12725ba694e", "url": "https://github.com/osmlab/atlas-checks/commit/6812677f5d9a9a75834b43561776c12725ba694e", "message": "LCWB javadoc nit", "committedDate": "2020-02-26T19:26:13Z", "type": "commit"}, {"oid": "351ca48b845e4f2d72cf2cbe1150682fa820a00d", "url": "https://github.com/osmlab/atlas-checks/commit/351ca48b845e4f2d72cf2cbe1150682fa820a00d", "message": "spotlessApply", "committedDate": "2020-02-26T20:23:21Z", "type": "commit"}, {"oid": "76ea87da2701a0ee790d368a88d456aa61de7a73", "url": "https://github.com/osmlab/atlas-checks/commit/76ea87da2701a0ee790d368a88d456aa61de7a73", "message": "Merge branch 'dev' into lcwbUpdates", "committedDate": "2020-02-26T20:38:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwOTcxMQ==", "url": "https://github.com/osmlab/atlas-checks/pull/263#discussion_r385309711", "body": "Any reason to use this instead of BuildingTag.isBuilding()?", "bodyText": "Any reason to use this instead of BuildingTag.isBuilding()?", "bodyHTML": "<p dir=\"auto\">Any reason to use this instead of BuildingTag.isBuilding()?</p>", "author": "Bentleysb", "createdAt": "2020-02-27T19:01:53Z", "path": "src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java", "diffHunk": "@@ -35,56 +40,102 @@\n import org.openstreetmap.atlas.utilities.configuration.Configuration;\n \n /**\n- * Flags line items (edges or lines) that are crossing water bodies invalidly.\n+ * Flags line items (edges or lines) and optionally buildings that are crossing water bodies\n+ * invalidly. Configurable values and\n  * {@code LineCrossingWaterBodyCheck#canCrossWaterBody(AtlasItem)} and\n- * {@code Utilities#haveExplicitLocationsForIntersections(Polygon, AtlasItem)} is used to decide\n+ * {@code Utilities#haveExplicitLocationsForIntersections(Polygon, AtlasItem)} are used to decide\n  * whether a crossing is valid or not.\n  *\n  * @author mertk\n  * @author savannahostrowski\n  * @author sayana_saithu\n+ * @author seancoulter\n  */\n public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n {\n     private static final String LINEAR_INSTRUCTION = \"Linear item {0,number,#} is crossing water body invalidly.\";\n+    private static final String BUILDING_INSTRUCTION = \"Building item {0,number,#} is intersecting water body invalidly.\";\n     private static final String WATERBODY_INSTRUCTION = \"The water body with id {0,number,#} has invalid crossings.\";\n     private static final List<String> FALLBACK_INSTRUCTIONS = Arrays.asList(WATERBODY_INSTRUCTION,\n-            LINEAR_INSTRUCTION);\n+            LINEAR_INSTRUCTION, BUILDING_INSTRUCTION);\n     private static final String ADDRESS_PREFIX_KEY = \"addr\";\n     // Whitelist for line tags\n-\n     private static final Set<String> VALID_LINE_TAGS = Stream.of(NotesTag.KEY, SourceTag.KEY,\n             NaturalTag.KEY, PlaceTag.KEY, AdministrativeLevelTag.KEY).collect(Collectors.toSet());\n     // Whitelisted tags filter for multipolygon relations. Multipolygon relations with these tags\n-    // are\n-    // expected to cross water bodies.\n+    // are expected to cross water bodies.\n     private static final TaggableFilter VALID_RELATIONS_TAG_FILTER = TaggableFilter\n             .forDefinition(\"natural->*|place->*|landuse->*|waterway->*|admin_level->*|boundary->*\");\n-    private static final String CAN_CROSS_WATER_BODY_TAGS = \"waterway->*|boundary->*|landuse->*|\"\n+    private static final String DEFAULT_CAN_CROSS_WATER_BODY_TAGS = \"waterway->*|boundary->*|landuse->*|\"\n             + \"bridge->yes,viaduct,aqueduct,boardwalk,covered,low_water_crossing,movable,suspension|tunnel->yes,culvert,building_passage|\"\n             + \"embankment->yes|location->underwater,underground|power->line,minor_line|\"\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|ford->yes|winter_road->yes|snowmobile->yes|ski->yes\";\n-    private static final TaggableFilter CAN_CROSS_WATER_BODY_FILTER = TaggableFilter\n-            .forDefinition(CAN_CROSS_WATER_BODY_TAGS);\n-    private static final long serialVersionUID = 6048659185833217159L;\n+    private TaggableFilter canCrossWaterBodyFilter;\n+    private TaggableFilter lineItemsOffending;\n+    private boolean flagBuildings;\n+    private static final String DEFAULT_HIGHWAY_MINIMUM = \"TOLL_GANTRY\";\n+    private HighwayTag highwayMinimum;\n+    private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n+    private List<HighwayTag> highwaysExclude;\n+    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators", "originalCommit": "76ea87da2701a0ee790d368a88d456aa61de7a73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0207257af3d6610c5b428b119846dbab53f7c457", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b72fd6a..fc03654 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -77,8 +77,6 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     private HighwayTag highwayMinimum;\n     private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n     private List<HighwayTag> highwaysExclude;\n-    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators\n-            .isNotOfType(object, BuildingTag.class, BuildingTag.NO);\n     private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n     private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n             .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex b72fd6a..80dbb53 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -77,8 +77,6 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     private HighwayTag highwayMinimum;\n     private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n     private List<HighwayTag> highwaysExclude;\n-    private static final Predicate<AtlasObject> IS_BUILDING = object -> Validators\n-            .isNotOfType(object, BuildingTag.class, BuildingTag.NO);\n     private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n     private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n             .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n", "next_change": {"commit": "50748afb4af624c662efb0e9051fe1ad32536ca7", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 80dbb53..e5bc583 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -80,6 +91,8 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n     private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n     private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n             .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n+    private static final String DEFAULT_VALID_INTERSECTING_NODE = \"ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal\";\n+    private final TaggableFilter intersectingNodesNonoffending;\n \n     private static final String WATER_BODY_TAGS =\n             // Lakes\n", "next_change": {"commit": "c132828cdc543524798e19dada9bc9c9f500b8fe", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex e5bc583..2d6440a 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -81,19 +84,26 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n             + \"embankment->yes|location->underwater,underground|power->line,minor_line|\"\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|winter_road->yes|snowmobile->yes|ski->yes|\"\n             + \"ford->!no&ford->*\";\n-    private TaggableFilter canCrossWaterBodyFilter;\n-    private TaggableFilter lineItemsOffending;\n-    private boolean flagBuildings;\n+    private final TaggableFilter canCrossWaterBodyFilter;\n+    private final TaggableFilter lineItemsOffending;\n+    private final boolean flagBuildings;\n     private static final String DEFAULT_HIGHWAY_MINIMUM = \"TOLL_GANTRY\";\n-    private HighwayTag highwayMinimum;\n+    private final HighwayTag highwayMinimum;\n     private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n-    private List<HighwayTag> highwaysExclude;\n+    private final List<HighwayTag> highwaysExclude;\n     private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n     private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n             .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n     private static final String DEFAULT_VALID_INTERSECTING_NODE = \"ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal\";\n     private final TaggableFilter intersectingNodesNonoffending;\n \n+    private static final long SHAPEPOINTS_MIN_DEFAULT = 1;\n+    private static final long SHAPEPOINTS_MAX_DEFAULT = 5000;\n+    private final long shapepointsMin;\n+    private final long shapepointsMax;\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LineCrossingWaterBodyCheck.class);\n+\n     private static final String WATER_BODY_TAGS =\n             // Lakes\n             \"natural->spring,hot_spring&name->*\" + \"|natural->lake,pond\" + \"|water:type->lake\"\n", "next_change": {"commit": "5be577e407c3433cabc5868f998b46f2ee98c09c", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex 2d6440a..e320c19 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -84,26 +84,15 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n             + \"embankment->yes|location->underwater,underground|power->line,minor_line|\"\n             + \"man_made->pier,breakwater,embankment,groyne,dyke,pipeline|route->ferry|highway->proposed,construction|ice_road->yes|winter_road->yes|snowmobile->yes|ski->yes|\"\n             + \"ford->!no&ford->*\";\n-    private final TaggableFilter canCrossWaterBodyFilter;\n-    private final TaggableFilter lineItemsOffending;\n-    private final boolean flagBuildings;\n     private static final String DEFAULT_HIGHWAY_MINIMUM = \"TOLL_GANTRY\";\n-    private final HighwayTag highwayMinimum;\n     private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n-    private final List<HighwayTag> highwaysExclude;\n     private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n     private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n             .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n     private static final String DEFAULT_VALID_INTERSECTING_NODE = \"ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal\";\n-    private final TaggableFilter intersectingNodesNonoffending;\n-\n     private static final long SHAPEPOINTS_MIN_DEFAULT = 1;\n     private static final long SHAPEPOINTS_MAX_DEFAULT = 5000;\n-    private final long shapepointsMin;\n-    private final long shapepointsMax;\n-\n     private static final Logger logger = LoggerFactory.getLogger(LineCrossingWaterBodyCheck.class);\n-\n     private static final String WATER_BODY_TAGS =\n             // Lakes\n             \"natural->spring,hot_spring&name->*\" + \"|natural->lake,pond\" + \"|water:type->lake\"\n", "next_change": {"commit": "2cbea41292cfa93d3ce8da0ab23ec2b6210b4bfe", "changed_code": [{"header": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\nindex e320c19..b43c783 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/validation/intersections/LineCrossingWaterBodyCheck.java\n", "chunk": "@@ -86,10 +88,10 @@ public class LineCrossingWaterBodyCheck extends BaseCheck<Long>\n             + \"ford->!no&ford->*\";\n     private static final String DEFAULT_HIGHWAY_MINIMUM = \"TOLL_GANTRY\";\n     private static final List<String> DEFAULT_HIGHWAYS_EXCLUDE = Collections.emptyList();\n-    private static final String BUILDING_TAGS_DO_NOT_FLAG = \"public_transport->station,aerialway=station\";\n+    private static final String BUILDING_TAGS_DO_NOT_FLAG = \"waterway->dam|public_transport->station,platform|aerialway->station\";\n     private static final TaggableFilter NONOFFENDING_BUILDINGS = TaggableFilter\n             .forDefinition(BUILDING_TAGS_DO_NOT_FLAG);\n-    private static final String DEFAULT_VALID_INTERSECTING_NODE = \"ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal\";\n+    private static final String DEFAULT_VALID_INTERSECTING_NODE = \"ferry->!no&ferry->*|ford->!no&ford->*|leisure->slipway|amenity->ferry_terminal\";\n     private static final long SHAPEPOINTS_MIN_DEFAULT = 1;\n     private static final long SHAPEPOINTS_MAX_DEFAULT = 5000;\n     private static final Logger logger = LoggerFactory.getLogger(LineCrossingWaterBodyCheck.class);\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0e6f13a1d2c1b9d33b1645229e82eae2e2dd1d8f", "message": "Merge commit", "committedDate": null}, {"oid": "b0489ead2783eea9ffe95af4080fd0d61221f42b", "committedDate": "2020-04-20 20:25:34 -0700", "message": "LCWB update - multi polygon relation waterbodies (#282)"}, {"oid": "50748afb4af624c662efb0e9051fe1ad32536ca7", "committedDate": "2020-05-13 14:55:48 -0700", "message": "LCWB enhancement - borders,ferries,fords (#287)"}, {"oid": "c132828cdc543524798e19dada9bc9c9f500b8fe", "committedDate": "2020-07-22 11:39:50 -0700", "message": "LineCrossingWaterbodyCheck performance improvements (#326)"}, {"oid": "5be577e407c3433cabc5868f998b46f2ee98c09c", "committedDate": "2020-09-04 10:55:41 -0700", "message": "Replace some non-inclusive language (#354)"}, {"oid": "72fd85356005120954b4aea76ee08bddf4effcc9", "committedDate": "2020-09-21 10:16:30 -0700", "message": "CHECKSTYLE: Ensure methods have `this` qualifier (#359)"}, {"oid": "0932b19f679665631d67a16547b52d0672229b2f", "committedDate": "2021-03-08 09:12:37 -0800", "message": "Adding intersection locations to each flag.  (#515)"}, {"oid": "2cbea41292cfa93d3ce8da0ab23ec2b6210b4bfe", "committedDate": "2021-03-10 12:24:49 -0800", "message": "Fixes to LineCrossingWaterBodyCheck (#513)"}, {"oid": "4547c1bfe8ac6daa98030f59c06adeb6343b3c96", "committedDate": "2021-07-14 14:49:35 -0700", "message": "lineCrossingWaterBodyCheck adding handling for footway, bridleway, steps, corridor, path (#571)"}, {"oid": "fae12687decd809cd99fb2d5489d3143c6315a58", "committedDate": "2021-08-25 14:24:17 -0700", "message": "multi -> geom (#606)"}]}, {"oid": "0207257af3d6610c5b428b119846dbab53f7c457", "url": "https://github.com/osmlab/atlas-checks/commit/0207257af3d6610c5b428b119846dbab53f7c457", "message": "LCWB use isBuilding()", "committedDate": "2020-02-27T19:52:13Z", "type": "commit"}, {"oid": "100e2d467ecfab9697e64074cdb3b6d4aeea9bde", "url": "https://github.com/osmlab/atlas-checks/commit/100e2d467ecfab9697e64074cdb3b6d4aeea9bde", "message": "Merge https://github.com/osmlab/atlas-checks into lcwbUpdates", "committedDate": "2020-02-27T19:52:41Z", "type": "commit"}, {"oid": "da023d2d3d4790663bb767b7afa9f5cf562ce3f8", "url": "https://github.com/osmlab/atlas-checks/commit/da023d2d3d4790663bb767b7afa9f5cf562ce3f8", "message": "Merge branch 'lcwbUpdates' of https://github.com/seancoulter/atlas-checks into lcwbUpdates", "committedDate": "2020-02-27T19:53:10Z", "type": "commit"}, {"oid": "a9ec53f593205e8ab72b81207fdd4c78ddd22a93", "url": "https://github.com/osmlab/atlas-checks/commit/a9ec53f593205e8ab72b81207fdd4c78ddd22a93", "message": "Merge branch 'dev' into lcwbUpdates", "committedDate": "2020-03-02T18:58:09Z", "type": "commit"}, {"oid": "ce13f75e82746a74bc6200ff3eca4b5643a8ab6a", "url": "https://github.com/osmlab/atlas-checks/commit/ce13f75e82746a74bc6200ff3eca4b5643a8ab6a", "message": "LCWB warning suppression", "committedDate": "2020-03-02T19:18:25Z", "type": "commit"}, {"oid": "fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "url": "https://github.com/osmlab/atlas-checks/commit/fbf20679bbd1b2e43d9e66078fe56c1c5eeeb269", "message": "Merge branch 'lcwbUpdates' of https://github.com/seancoulter/atlas-checks into lcwbUpdates", "committedDate": "2020-03-02T19:18:56Z", "type": "commit"}]}