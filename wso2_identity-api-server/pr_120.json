{"pr_number": 120, "pr_title": "Add IDP template management REST API", "pr_author": "mevan-karu", "pr_createdAt": "2020-03-20T09:36:35Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/120", "timeline": [{"oid": "fda30e80c54a0bb958b3a1991cb4795e66530e3c", "url": "https://github.com/wso2/identity-api-server/commit/fda30e80c54a0bb958b3a1991cb4795e66530e3c", "message": "Add IDP template management API implementation", "committedDate": "2020-03-20T10:24:33Z", "type": "forcePushed"}, {"oid": "55e4107bcc2b479b4c64e3aea9e2018623b189be", "url": "https://github.com/wso2/identity-api-server/commit/55e4107bcc2b479b4c64e3aea9e2018623b189be", "message": "Add IDP template management API implementation", "committedDate": "2020-03-20T11:06:18Z", "type": "forcePushed"}, {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "url": "https://github.com/wso2/identity-api-server/commit/9c010b44fac3776bc9a15f289dce7c527487d9cd", "message": "Add IDP template management API implementation", "committedDate": "2020-03-20T11:08:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDU4Ng==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395600586", "body": "use standard comment format. add space after // and add fullstop at end.", "bodyText": "use standard comment format. add space after // and add fullstop at end.", "bodyHTML": "<p dir=\"auto\">use standard comment format. add space after // and add fullstop at end.</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:22:08Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -61,6 +62,11 @@\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n+    //IdP template property keys", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 79b8a7ea1..2b020d3ff 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -62,7 +62,7 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n-    //IdP template property keys\n+    // IdP template property keys\n     public static final String PROP_CATEGORY = \"category\";\n     public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n \n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 2b020d3ff..0ed43fb17 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -62,11 +61,6 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n-    // IdP template property keys\n-    public static final String PROP_CATEGORY = \"category\";\n-    public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n-\n-\n     /**\n      * Enum for error messages.\n      */\n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 0ed43fb17..87075746f 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -61,6 +63,11 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n+    // IdP template property keys\n+    public static final String PROP_CATEGORY = \"category\";\n+    public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n+\n+\n     /**\n      * Enum for error messages.\n      */\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTA5OQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601099", "body": "add fullstop", "bodyText": "add fullstop", "bodyHTML": "<p dir=\"auto\">add fullstop</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:23:15Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java", "diffHunk": "@@ -67,4 +69,24 @@ public static void setClaimMetadataManagementService(\n \n         IdentityProviderServiceHolder.claimMetadataManagementService = claimMetadataManagementService;\n     }\n+\n+    /**\n+     * Set TemplateManager osgi service.\n+     *\n+     * @param templateManager TemplateManager service\n+     */\n+    public static void setTemplateManager(TemplateManager templateManager) {\n+\n+        IdentityProviderServiceHolder.templateManager = templateManager;\n+    }\n+\n+    /**\n+     * Get TemplateManager osgi service", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex b90fa9cf2..d0f358d8a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service\n+     * Get TemplateManager osgi service.\n      *\n      * @return TemplateManager\n      */\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex d0f358d8a..b90fa9cf2 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service.\n+     * Get TemplateManager osgi service\n      *\n      * @return TemplateManager\n      */\n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex b90fa9cf2..d0f358d8a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service\n+     * Get TemplateManager osgi service.\n      *\n      * @return TemplateManager\n      */\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTE5NQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601195", "body": "add license header", "bodyText": "add license header", "bodyHTML": "<p dir=\"auto\">add license header</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:23:29Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.wso2.carbon.identity.api.server.idp.common.factory;", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex ea060c728..fc62e1cc7 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,3 +1,21 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex fc62e1cc7..ea060c728 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,21 +1,3 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- * WSO2 Inc. licenses this file to you under the Apache License,\n- * Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex ea060c728..fc62e1cc7 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,3 +1,21 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMjMyNQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395602325", "body": "let's use a sample filter for the templates in the example", "bodyText": "let's use a sample filter for the templates in the example", "bodyHTML": "<p dir=\"auto\">let's use a sample filter for the templates in the example</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:25:56Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 3372b47b7..ca0bf8189 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -830,7 +830,7 @@ public class ServerIdpManagementService {\n      *\n      * @param limit      Items per page.\n      * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n      * @return  List of identity templates.\n      */\n     public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex ca0bf8189..2e1cdac14 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -825,244 +808,7 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    /**\n-     * Retrieve the list of IDP templates.\n-     *\n-     * @param limit      Items per page.\n-     * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n-     * @return  List of identity templates.\n-     */\n-    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            List<Template> templateList = templateManager.listTemplates(\n-                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n-            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n-        }\n-    }\n-\n-    /**\n-     * Get an identity provider template identified by resource ID.\n-     *\n-     * @param templateId IDP template Id\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n-\n-        try {\n-            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n-            if (idpTemplate == null) {\n-                throw handleException(Response.Status.NOT_FOUND,\n-                        Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-            }\n-            return createIDPTemplateResponse(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n-                    templateId);\n-        } catch (IOException e) {\n-            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Update IDP template.\n-     *\n-     * @param identityProviderTemplate Updated IDP template\n-     */\n-    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n-                    identityProviderTemplate.getId());\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Create a new IDP template.\n-     *\n-     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            return templateManager.addTemplateResource(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        }\n-    }\n-\n-    /**\n-     * Delete a IDP template identified by resource Id.\n-     *\n-     * @param templateId Id of the IDP template\n-     */\n-    public void deleteIDPTemplate(String templateId) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            templateManager.deleteTemplateById(templateId);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n-                    templateId);\n-        }\n-    }\n-\n-//  Private utility Methods.\n-\n-    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n-            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n-\n-        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n-        if (!CollectionUtils.isEmpty(templateInfoList)) {\n-            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n-            for (Template idpTemplate: templateInfoList) {\n-                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n-                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n-                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n-                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n-                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n-                idpTemplateListItem.setSelf(\n-                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT +\n-                        \"/%s\",\n-                                idpTemplate.getTemplateId())).toString());\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n-                    } else {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n-                    }\n-                }\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-                    idpTemplateListItem.setDisplayOrder(\n-                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-                }\n-                idpTemplates.add(idpTemplateListItem);\n-            }\n-            idpTemplateListResponse.setTemplates(idpTemplates);\n-            idpTemplateListResponse.setCount(idpTemplates.size());\n-        } else {\n-            idpTemplateListResponse.setCount(0);\n-        }\n-        limit = (limit == null) ? 0 : limit;\n-        offset = (offset == null) ? 0 : offset;\n-        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n-        idpTemplateListResponse.setStartIndex(offset + 1);\n-        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n-                limit, offset, templateInfoList.size(), filter));\n-        return idpTemplateListResponse;\n-    }\n-\n-    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n-\n-        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n-        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n-        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n-        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n-        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n-            } else {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n-            }\n-        }\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-            idpTemplateResponse.setDisplayOrder(\n-                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-        }\n-        if (idpTemplate.getTemplateScript() != null) {\n-            ObjectMapper mapper = new ObjectMapper();\n-            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n-                    IdentityProviderPOSTRequest.class);\n-            idpTemplateResponse.setIdp(idp);\n-        }\n-        return idpTemplateResponse;\n-    }\n-\n-    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n-\n-        Template identityProviderTemplate = new Template();\n-\n-        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n-        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n-        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n-        identityProviderTemplate.setTenantId(IdentityTenantUtil\n-                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n-        Map<String, String> properties = new HashMap<>();\n-        if (idpTemplate.getCategory() != null) {\n-            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n-        }\n-        if (idpTemplate.getDisplayOrder() != null) {\n-            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n-        }\n-        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n-        identityProviderTemplate.setPropertiesMap(properties);\n-        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n-        return identityProviderTemplate;\n-    }\n-\n-    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n-                                                String data) {\n-\n-        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n-\n-        Response.Status status;\n-\n-        if (e instanceof TemplateManagementClientException) {\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-            status = Response.Status.BAD_REQUEST;\n-        } else if (e instanceof TemplateManagementServerException) {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                if (StringUtils.equals(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode(),\n-                        errorCode)) {\n-                    status = Response.Status.NOT_FOUND;\n-                }\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-        } else {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        return new APIError(status, errorResponse);\n-    }\n-\n-    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        return mapper.writeValueAsString(idpTemplate);\n-    }\n+    // Private utility Methods.\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 2e1cdac14..55a6e3122 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -808,7 +826,234 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.\n+\n+    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n+            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n+\n+        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n+        if (!CollectionUtils.isEmpty(templateInfoList)) {\n+            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n+            for (Template idpTemplate: templateInfoList) {\n+                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n+                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n+                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n+                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n+                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n+                idpTemplateListItem.setSelf(\n+                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT\n+                                        + IDP_TEMPLATE_PATH_COMPONENT + \"/%s\",\n+                                idpTemplate.getTemplateId())).toString());\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n+                    } else {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n+                    }\n+                }\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+                    idpTemplateListItem.setDisplayOrder(\n+                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+                }\n+                idpTemplates.add(idpTemplateListItem);\n+            }\n+            idpTemplateListResponse.setTemplates(idpTemplates);\n+            idpTemplateListResponse.setCount(idpTemplates.size());\n+        } else {\n+            idpTemplateListResponse.setCount(0);\n+        }\n+        limit = (limit == null) ? 0 : limit;\n+        offset = (offset == null) ? 0 : offset;\n+        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n+        idpTemplateListResponse.setStartIndex(offset + 1);\n+        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n+                limit, offset, templateInfoList.size(), filter));\n+        return idpTemplateListResponse;\n+    }\n+\n+    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n+\n+        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n+        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n+        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n+        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n+        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n+            } else {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n+            }\n+        }\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+            idpTemplateResponse.setDisplayOrder(\n+                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+        }\n+        if (idpTemplate.getTemplateScript() != null) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n+                    IdentityProviderPOSTRequest.class);\n+            idpTemplateResponse.setIdp(idp);\n+        }\n+        return idpTemplateResponse;\n+    }\n+\n+    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n+\n+        Template identityProviderTemplate = new Template();\n+\n+        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n+        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n+        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n+        identityProviderTemplate.setTenantId(IdentityTenantUtil\n+                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n+        Map<String, String> properties = new HashMap<>();\n+        if (idpTemplate.getCategory() != null) {\n+            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n+        }\n+        if (idpTemplate.getDisplayOrder() != null) {\n+            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n+        }\n+        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n+        identityProviderTemplate.setPropertiesMap(properties);\n+        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n+        return identityProviderTemplate;\n+    }\n+\n+    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n+                                                String data) {\n+\n+        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n+\n+        Response.Status status;\n+\n+        if (e instanceof TemplateManagementClientException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.BAD_REQUEST;\n+        } else if (e instanceof TemplateManagementServerException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        } else {\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        }\n+\n+        return new APIError(status, errorResponse);\n+    }\n+\n+    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(idpTemplate);\n+    }\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395603985", "body": "check whether idpTemplate is null. If null, send 404 not found.", "bodyText": "check whether idpTemplate is null. If null, send 404 not found.", "bodyHTML": "<p dir=\"auto\">check whether idpTemplate is null. If null, send 404 not found.</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:29:26Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxODQwNg==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r396018406", "bodyText": "TemplateManager throws an exception when resource is not found. So this is handled at handleTemplateMgtException method. Is it necessary to handle the null in here also?", "author": "mevan-karu", "createdAt": "2020-03-21T18:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzUyMw==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r396207523", "bodyText": "Then it is fine. However you need to map the error code of that exception to http 404 in https://github.com/wso2/identity-rest-dispatcher/blob/master/components/org.wso2.carbon.identity.api.dispatcher/src/main/resources/ErrorMappings.properties", "author": "emswbandara", "createdAt": "2020-03-23T04:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 3372b47b7..ca0bf8189 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -855,6 +855,10 @@ public class ServerIdpManagementService {\n \n         try {\n             Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            if (idpTemplate == null) {\n+                throw handleException(Response.Status.NOT_FOUND,\n+                        Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+            }\n             return createIDPTemplateResponse(idpTemplate);\n         } catch (TemplateManagementException e) {\n             throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n", "next_change": {"commit": "ab4346edaecc6f7aeb5498d1804ebdac3ba430d5", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex ca0bf8189..c1f8f2515 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -855,10 +855,6 @@ public class ServerIdpManagementService {\n \n         try {\n             Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n-            if (idpTemplate == null) {\n-                throw handleException(Response.Status.NOT_FOUND,\n-                        Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-            }\n             return createIDPTemplateResponse(idpTemplate);\n         } catch (TemplateManagementException e) {\n             throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex c1f8f2515..2e1cdac14 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -825,240 +808,7 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    /**\n-     * Retrieve the list of IDP templates.\n-     *\n-     * @param limit      Items per page.\n-     * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n-     * @return  List of identity templates.\n-     */\n-    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            List<Template> templateList = templateManager.listTemplates(\n-                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n-            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n-        }\n-    }\n-\n-    /**\n-     * Get an identity provider template identified by resource ID.\n-     *\n-     * @param templateId IDP template Id\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n-\n-        try {\n-            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n-            return createIDPTemplateResponse(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n-                    templateId);\n-        } catch (IOException e) {\n-            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Update IDP template.\n-     *\n-     * @param identityProviderTemplate Updated IDP template\n-     */\n-    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n-                    identityProviderTemplate.getId());\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Create a new IDP template.\n-     *\n-     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            return templateManager.addTemplateResource(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        }\n-    }\n-\n-    /**\n-     * Delete a IDP template identified by resource Id.\n-     *\n-     * @param templateId Id of the IDP template\n-     */\n-    public void deleteIDPTemplate(String templateId) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            templateManager.deleteTemplateById(templateId);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n-                    templateId);\n-        }\n-    }\n-\n-//  Private utility Methods.\n-\n-    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n-            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n-\n-        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n-        if (!CollectionUtils.isEmpty(templateInfoList)) {\n-            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n-            for (Template idpTemplate: templateInfoList) {\n-                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n-                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n-                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n-                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n-                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n-                idpTemplateListItem.setSelf(\n-                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT +\n-                        \"/%s\",\n-                                idpTemplate.getTemplateId())).toString());\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n-                    } else {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n-                    }\n-                }\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-                    idpTemplateListItem.setDisplayOrder(\n-                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-                }\n-                idpTemplates.add(idpTemplateListItem);\n-            }\n-            idpTemplateListResponse.setTemplates(idpTemplates);\n-            idpTemplateListResponse.setCount(idpTemplates.size());\n-        } else {\n-            idpTemplateListResponse.setCount(0);\n-        }\n-        limit = (limit == null) ? 0 : limit;\n-        offset = (offset == null) ? 0 : offset;\n-        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n-        idpTemplateListResponse.setStartIndex(offset + 1);\n-        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n-                limit, offset, templateInfoList.size(), filter));\n-        return idpTemplateListResponse;\n-    }\n-\n-    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n-\n-        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n-        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n-        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n-        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n-        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n-            } else {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n-            }\n-        }\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-            idpTemplateResponse.setDisplayOrder(\n-                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-        }\n-        if (idpTemplate.getTemplateScript() != null) {\n-            ObjectMapper mapper = new ObjectMapper();\n-            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n-                    IdentityProviderPOSTRequest.class);\n-            idpTemplateResponse.setIdp(idp);\n-        }\n-        return idpTemplateResponse;\n-    }\n-\n-    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n-\n-        Template identityProviderTemplate = new Template();\n-\n-        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n-        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n-        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n-        identityProviderTemplate.setTenantId(IdentityTenantUtil\n-                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n-        Map<String, String> properties = new HashMap<>();\n-        if (idpTemplate.getCategory() != null) {\n-            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n-        }\n-        if (idpTemplate.getDisplayOrder() != null) {\n-            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n-        }\n-        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n-        identityProviderTemplate.setPropertiesMap(properties);\n-        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n-        return identityProviderTemplate;\n-    }\n-\n-    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n-                                                String data) {\n-\n-        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n-\n-        Response.Status status;\n-\n-        if (e instanceof TemplateManagementClientException) {\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-            status = Response.Status.BAD_REQUEST;\n-        } else if (e instanceof TemplateManagementServerException) {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                if (StringUtils.equals(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode(),\n-                        errorCode)) {\n-                    status = Response.Status.NOT_FOUND;\n-                }\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-        } else {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        return new APIError(status, errorResponse);\n-    }\n-\n-    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        return mapper.writeValueAsString(idpTemplate);\n-    }\n+    // Private utility Methods.\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 2e1cdac14..55a6e3122 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -808,7 +826,234 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.\n+\n+    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n+            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n+\n+        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n+        if (!CollectionUtils.isEmpty(templateInfoList)) {\n+            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n+            for (Template idpTemplate: templateInfoList) {\n+                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n+                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n+                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n+                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n+                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n+                idpTemplateListItem.setSelf(\n+                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT\n+                                        + IDP_TEMPLATE_PATH_COMPONENT + \"/%s\",\n+                                idpTemplate.getTemplateId())).toString());\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n+                    } else {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n+                    }\n+                }\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+                    idpTemplateListItem.setDisplayOrder(\n+                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+                }\n+                idpTemplates.add(idpTemplateListItem);\n+            }\n+            idpTemplateListResponse.setTemplates(idpTemplates);\n+            idpTemplateListResponse.setCount(idpTemplates.size());\n+        } else {\n+            idpTemplateListResponse.setCount(0);\n+        }\n+        limit = (limit == null) ? 0 : limit;\n+        offset = (offset == null) ? 0 : offset;\n+        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n+        idpTemplateListResponse.setStartIndex(offset + 1);\n+        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n+                limit, offset, templateInfoList.size(), filter));\n+        return idpTemplateListResponse;\n+    }\n+\n+    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n+\n+        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n+        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n+        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n+        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n+        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n+            } else {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n+            }\n+        }\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+            idpTemplateResponse.setDisplayOrder(\n+                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+        }\n+        if (idpTemplate.getTemplateScript() != null) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n+                    IdentityProviderPOSTRequest.class);\n+            idpTemplateResponse.setIdp(idp);\n+        }\n+        return idpTemplateResponse;\n+    }\n+\n+    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n+\n+        Template identityProviderTemplate = new Template();\n+\n+        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n+        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n+        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n+        identityProviderTemplate.setTenantId(IdentityTenantUtil\n+                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n+        Map<String, String> properties = new HashMap<>();\n+        if (idpTemplate.getCategory() != null) {\n+            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n+        }\n+        if (idpTemplate.getDisplayOrder() != null) {\n+            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n+        }\n+        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n+        identityProviderTemplate.setPropertiesMap(properties);\n+        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n+        return identityProviderTemplate;\n+    }\n+\n+    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n+                                                String data) {\n+\n+        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n+\n+        Response.Status status;\n+\n+        if (e instanceof TemplateManagementClientException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.BAD_REQUEST;\n+        } else if (e instanceof TemplateManagementServerException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        } else {\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        }\n+\n+        return new APIError(status, errorResponse);\n+    }\n+\n+    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(idpTemplate);\n+    }\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwNTE3NA==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395605174", "body": "status should be 200 ok in update requests", "bodyText": "status should be 200 ok in update requests", "bodyHTML": "<p dir=\"auto\">status should be 200 ok in update requests</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:31:49Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java", "diffHunk": "@@ -185,6 +216,14 @@ public Response updateFederatedAuthenticator(String identityProviderId, String f\n                 .build();\n     }\n \n+    @Override\n+    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n+            identityProviderTemplatePOSTRequest) {\n+\n+        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n+        return Response.noContent().build();", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex ee2556624..25c1a7aa0 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -221,7 +221,7 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n             identityProviderTemplatePOSTRequest) {\n \n         idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n-        return Response.noContent().build();\n+        return Response.ok().build();\n     }\n \n     @Override\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex 25c1a7aa0..fd88b80c9 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -216,14 +185,6 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n                 .build();\n     }\n \n-    @Override\n-    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n-            identityProviderTemplatePOSTRequest) {\n-\n-        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n-        return Response.ok().build();\n-    }\n-\n     @Override\n     public Response updateJITConfig(String identityProviderId, JustInTimeProvisioning justInTimeProvisioning) {\n \n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex fd88b80c9..25c1a7aa0 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -185,6 +216,14 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n                 .build();\n     }\n \n+    @Override\n+    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n+            identityProviderTemplatePOSTRequest) {\n+\n+        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n+        return Response.ok().build();\n+    }\n+\n     @Override\n     public Response updateJITConfig(String identityProviderId, JustInTimeProvisioning justInTimeProvisioning) {\n \n", "next_change": null}]}}]}}]}}, {"oid": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "url": "https://github.com/wso2/identity-api-server/commit/c93c4a546ba4bba18b228e5980ffb704fd40d70b", "message": "Add IDP template management API implementation", "committedDate": "2020-03-21T18:57:11Z", "type": "forcePushed"}, {"oid": "ab4346edaecc6f7aeb5498d1804ebdac3ba430d5", "url": "https://github.com/wso2/identity-api-server/commit/ab4346edaecc6f7aeb5498d1804ebdac3ba430d5", "message": "Add IDP template management API implementation", "committedDate": "2020-03-23T04:51:01Z", "type": "forcePushed"}, {"oid": "0dd0e863df402e1171eae5c34027ea4a976d95ca", "url": "https://github.com/wso2/identity-api-server/commit/0dd0e863df402e1171eae5c34027ea4a976d95ca", "message": "Add IDP template management API implementation", "committedDate": "2020-03-23T05:08:16Z", "type": "forcePushed"}, {"oid": "1904c3de02493b8e2bdfee8d1ae1002f85c3dc76", "url": "https://github.com/wso2/identity-api-server/commit/1904c3de02493b8e2bdfee8d1ae1002f85c3dc76", "message": "Add IDP template management API implementation", "committedDate": "2020-03-24T13:48:05Z", "type": "forcePushed"}, {"oid": "7c6eb010aa4802a2ca0f2d7bf8f8e5a24bd90303", "url": "https://github.com/wso2/identity-api-server/commit/7c6eb010aa4802a2ca0f2d7bf8f8e5a24bd90303", "message": "Add IDP template management API implementation", "committedDate": "2020-03-24T14:03:47Z", "type": "forcePushed"}, {"oid": "2a84cb9a54652cf0066b39951bc4ca0e6f16ea64", "url": "https://github.com/wso2/identity-api-server/commit/2a84cb9a54652cf0066b39951bc4ca0e6f16ea64", "message": "Add IDP template management API implementation", "committedDate": "2020-03-24T16:23:24Z", "type": "forcePushed"}, {"oid": "135504a02ef2b01fe125a36a66c01ff2fed632d1", "url": "https://github.com/wso2/identity-api-server/commit/135504a02ef2b01fe125a36a66c01ff2fed632d1", "message": "Add IDP template management API implementation", "committedDate": "2020-03-25T07:58:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAxOQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r397929019", "body": "change the code generator to have 2020", "bodyText": "change the code generator to have 2020", "bodyHTML": "<p dir=\"auto\">change the code generator to have 2020</p>", "author": "thanujalk", "createdAt": "2020-03-25T15:07:18Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "135504a02ef2b01fe125a36a66c01ff2fed632d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1b57e32b32d5e4d4c1361283e29c98e7b02da41", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\nindex f30b1caed..91b5dd40a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n-* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n", "next_change": null}]}}, {"oid": "c1b57e32b32d5e4d4c1361283e29c98e7b02da41", "url": "https://github.com/wso2/identity-api-server/commit/c1b57e32b32d5e4d4c1361283e29c98e7b02da41", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T05:24:32Z", "type": "forcePushed"}, {"oid": "8540919879a10c2f4b9585f09b966cb65507143d", "url": "https://github.com/wso2/identity-api-server/commit/8540919879a10c2f4b9585f09b966cb65507143d", "message": "Add TemplateManager service", "committedDate": "2020-03-27T05:26:57Z", "type": "commit"}, {"oid": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "url": "https://github.com/wso2/identity-api-server/commit/0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T05:26:57Z", "type": "forcePushed"}, {"oid": "0b7e7e33c9c727094ea60b4b0e41166145e409d4", "url": "https://github.com/wso2/identity-api-server/commit/0b7e7e33c9c727094ea60b4b0e41166145e409d4", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T07:03:56Z", "type": "forcePushed"}, {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c", "url": "https://github.com/wso2/identity-api-server/commit/88fa5194c446519ca9e55e036bffa47996a7f78c", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T07:06:51Z", "type": "commit"}, {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c", "url": "https://github.com/wso2/identity-api-server/commit/88fa5194c446519ca9e55e036bffa47996a7f78c", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T07:06:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjY3Nw==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r432686677", "body": "Missing the doc comment. Check other places as well.", "bodyText": "Missing the doc comment. Check other places as well.", "bodyHTML": "<p dir=\"auto\">Missing the doc comment. Check other places as well.</p>", "author": "NipuniBhagya", "createdAt": "2020-05-29T19:19:34Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+\n+    private String value;\n+\n+    CategoryEnum(String v) {\n+        value = v;\n+    }\n+\n+    public String value() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(value);\n+    }\n+\n+    public static CategoryEnum fromValue(String value) {\n+        for (CategoryEnum b : CategoryEnum.values()) {\n+            if (b.value.equals(value)) {\n+                return b;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Unexpected value '\" + value + \"'\");\n+    }\n+}\n+\n+    private CategoryEnum category;\n+    private Integer displayOrder;\n+    private IdentityProviderPOSTRequest idp;\n+\n+    /**\n+    **/\n+    public IdentityProviderTemplate id(String id) {\n+\n+        this.id = id;\n+        return this;\n+    }\n+    \n+    @ApiModelProperty(example = \"123e4567-e89b-12d3-a456-556642440000\", value = \"\")\n+    @JsonProperty(\"id\")\n+    @Valid\n+    public String getId() {\n+        return id;\n+    }\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    /**", "originalCommit": "88fa5194c446519ca9e55e036bffa47996a7f78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyMzkyNA==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464223924", "bodyText": "Fixed with #191", "author": "mevan-karu", "createdAt": "2020-08-03T06:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjY3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzc5Nw==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r432803797", "body": "Let's remove this unnecessary line.", "bodyText": "Let's remove this unnecessary line.", "bodyHTML": "<p dir=\"auto\">Let's remove this unnecessary line.</p>", "author": "NipuniBhagya", "createdAt": "2020-05-30T02:56:46Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+", "originalCommit": "88fa5194c446519ca9e55e036bffa47996a7f78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNDAwOQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464224009", "bodyText": "Fixed with #191", "author": "mevan-karu", "createdAt": "2020-08-03T06:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzc5Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMTU0NQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r462801545", "body": "This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.", "bodyText": "This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.", "bodyHTML": "<p dir=\"auto\">This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.</p>", "author": "ruwanta", "createdAt": "2020-07-30T07:26:29Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +826,234 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.", "originalCommit": "88fa5194c446519ca9e55e036bffa47996a7f78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNDAzNA==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464224034", "bodyText": "Fixed with #191", "author": "mevan-karu", "createdAt": "2020-08-03T06:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMTU0NQ=="}], "type": "inlineReview", "revised_code": null}]}