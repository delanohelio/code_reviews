{"pr_number": 120, "pr_title": "Add IDP template management REST API", "pr_author": "mevan-karu", "pr_createdAt": "2020-03-20T09:36:35Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/120", "merge_commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "timeline": [{"oid": "fda30e80c54a0bb958b3a1991cb4795e66530e3c", "url": "https://github.com/wso2/identity-api-server/commit/fda30e80c54a0bb958b3a1991cb4795e66530e3c", "message": "Add IDP template management API implementation", "committedDate": "2020-03-20T10:24:33Z", "type": "forcePushed"}, {"oid": "55e4107bcc2b479b4c64e3aea9e2018623b189be", "url": "https://github.com/wso2/identity-api-server/commit/55e4107bcc2b479b4c64e3aea9e2018623b189be", "message": "Add IDP template management API implementation", "committedDate": "2020-03-20T11:06:18Z", "type": "forcePushed"}, {"oid": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "url": "https://github.com/wso2/identity-api-server/commit/9c010b44fac3776bc9a15f289dce7c527487d9cd", "message": "Add IDP template management API implementation", "committedDate": "2020-03-20T11:08:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMDU4Ng==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395600586", "body": "use standard comment format. add space after // and add fullstop at end.", "bodyText": "use standard comment format. add space after // and add fullstop at end.", "bodyHTML": "<p dir=\"auto\">use standard comment format. add space after // and add fullstop at end.</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:22:08Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java", "diffHunk": "@@ -61,6 +62,11 @@\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n+    //IdP template property keys", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 79b8a7ea1..2b020d3ff 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -62,7 +62,7 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n-    //IdP template property keys\n+    // IdP template property keys\n     public static final String PROP_CATEGORY = \"category\";\n     public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n \n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 2b020d3ff..0ed43fb17 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -62,11 +61,6 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n-    // IdP template property keys\n-    public static final String PROP_CATEGORY = \"category\";\n-    public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n-\n-\n     /**\n      * Enum for error messages.\n      */\n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 0ed43fb17..87075746f 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -61,6 +63,11 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n+    // IdP template property keys\n+    public static final String PROP_CATEGORY = \"category\";\n+    public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n+\n+\n     /**\n      * Enum for error messages.\n      */\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 79b8a7ea1..87075746f 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -62,7 +63,7 @@ public class Constants {\n     public static final String FEDERATED_AUTHENTICATORS = \"federatedAuthenticators\";\n     public static final String PROVISIONING = \"provisioning\";\n \n-    //IdP template property keys\n+    // IdP template property keys\n     public static final String PROP_CATEGORY = \"category\";\n     public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n \n", "next_change": {"commit": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 87075746f..93e7d1e6c 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -67,6 +71,15 @@ public class Constants {\n     public static final String PROP_CATEGORY = \"category\";\n     public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n \n+    // IdP Template Search.\n+    public static final List<String> SEARCH_KEYS = Collections.unmodifiableList(Arrays.asList(\"description\", \"image\",\n+            \"category\", \"displayOrder\"));\n+    public static final String SEARCH_KEY_NAME = \"name\";\n+    public static final String SEARCH_KEY_NAME_INTERNAL = \"resourceName\";\n+    public static final String ATTR_KEY = \"attributeKey\";\n+    public static final String ATTR_VALUE = \"attributeValue\";\n+    public static final String TEMPLATE_TYPE_KEY = \"resourceTypeName\";\n+    public static final String TENANT_DOMAIN_KEY = \"tenantDomain\";\n \n     /**\n      * Enum for error messages.\n", "next_change": {"commit": "8f008d62ea44d737f9ce7b03fcc8512b3399a5b4", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 93e7d1e6c..809960a15 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -70,16 +70,23 @@ public class Constants {\n     // IdP template property keys\n     public static final String PROP_CATEGORY = \"category\";\n     public static final String PROP_DISPLAY_ORDER = \"displayOrder\";\n+    public static final String PROP_SERVICES = \"services\";\n+\n+    // IdP template services\n+    public static final String SERV_AUTHENTICATION = \"authentication\";\n+    public static final String SERV_PROVISIONING = \"provisioning\";\n \n     // IdP Template Search.\n     public static final List<String> SEARCH_KEYS = Collections.unmodifiableList(Arrays.asList(\"description\", \"image\",\n-            \"category\", \"displayOrder\"));\n+            \"category\", \"displayOrder\", \"services\"));\n     public static final String SEARCH_KEY_NAME = \"name\";\n+    public static final String SEARCH_KEY_SERVICES = \"services\";\n     public static final String SEARCH_KEY_NAME_INTERNAL = \"resourceName\";\n     public static final String ATTR_KEY = \"attributeKey\";\n     public static final String ATTR_VALUE = \"attributeValue\";\n     public static final String TEMPLATE_TYPE_KEY = \"resourceTypeName\";\n     public static final String TENANT_DOMAIN_KEY = \"tenantDomain\";\n+    public static final String SEARCH_VALUE_AUTHENTICATION_PROVISIONING = SERV_PROVISIONING + \",\" + SERV_AUTHENTICATION;\n \n     /**\n      * Enum for error messages.\n", "next_change": {"commit": "ebdbf53277a1cd559e0994be18397cd71512bed6", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 809960a15..c76baf809 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -93,9 +93,28 @@ public class Constants {\n      */\n     public enum ErrorMessage {\n \n+        // Client errors starting from 600xx.\n+        ERROR_CODE_IDP_NOT_FOUND(\"60002\", \"Resource not found.\", \"Unable to find a resource matching the provided \" +\n+                \"identity provider identifier %s.\"),\n         ERROR_CODE_ERROR_LISTING_IDPS(\"60021\",\n                 \"Unable to list existing identity providers.\",\n                 \"Server encountered an error while listing the identity providers.\"),\n+        ERROR_CODE_AUTHENTICATOR_NOT_FOUND_FOR_IDP(\"60022\",\n+                \"Resource not found.\",\n+                \"Unable to find federated authenticator with identifier %s.\"),\n+        ERROR_CODE_CONNECTOR_NOT_FOUND_FOR_IDP(\"60023\", \"Resource not found.\", \"Unable to find outbound provisioning \" +\n+                \"connector identifier %s.\"),\n+        ERROR_CODE_INVALID_LOCAL_CLAIM_ID(\"60024\",\n+                \"Invalid claim uri.\",\n+                \"Invalid claim uri %s provided in claim config.\"),\n+        ERROR_CODE_INVALID_INPUT(\"60025\", \"Invalid input.\", \"One of the given inputs is invalid.\"),\n+        ERROR_CODE_INVALID_SAML_METADATA(\"60026\", \"Invalid SAML metadata.\", \"SAML metadata is invalid/empty.\"),\n+        ERROR_CODE_INVALID_DEFAULT_AUTHENTICATOR(\"60027\", \"Invalid default authenticator ID\",\n+                \"Provided value for the default authenticator ID is invalid.\"),\n+        ERROR_CODE_INVALID_DEFAULT_OUTBOUND_CONNECTOR(\"60027\", \"Invalid default outbound connector ID\",\n+                \"Provided value for the default outbound connector ID is invalid.\"),\n+\n+        // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n                 \"Unable to add identity provider.\",\n                 \"Server encountered an error while adding the identity provider.\"),\n", "next_change": {"commit": "2c3696c54006ec7b3b5415bf4a4f9365d5e5ac81", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex c76baf809..32c531859 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -113,6 +113,9 @@ public class Constants {\n                 \"Provided value for the default authenticator ID is invalid.\"),\n         ERROR_CODE_INVALID_DEFAULT_OUTBOUND_CONNECTOR(\"60027\", \"Invalid default outbound connector ID\",\n                 \"Provided value for the default outbound connector ID is invalid.\"),\n+        ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60028\", \"Unable to update Outbound \" +\n+                \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n+                \"for connector : %s\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "b845597e3a3eba162465ff7648b6cee3fccdf71d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 32c531859..5552fbd9f 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -111,9 +111,9 @@ public class Constants {\n         ERROR_CODE_INVALID_SAML_METADATA(\"60026\", \"Invalid SAML metadata.\", \"SAML metadata is invalid/empty.\"),\n         ERROR_CODE_INVALID_DEFAULT_AUTHENTICATOR(\"60027\", \"Invalid default authenticator ID\",\n                 \"Provided value for the default authenticator ID is invalid.\"),\n-        ERROR_CODE_INVALID_DEFAULT_OUTBOUND_CONNECTOR(\"60027\", \"Invalid default outbound connector ID\",\n+        ERROR_CODE_INVALID_DEFAULT_OUTBOUND_CONNECTOR(\"60028\", \"Invalid default outbound connector ID\",\n                 \"Provided value for the default outbound connector ID is invalid.\"),\n-        ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60028\", \"Unable to update Outbound \" +\n+        ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n \n", "next_change": {"commit": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 5552fbd9f..900919599 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -116,6 +116,16 @@ public class Constants {\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n+                \"User ID claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n+                \"Role claim URI: %s does not match with the claim mappings\"),\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n+                \"One or more local claim URIs does not exist\"),\n+        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n+                \"User ID claim URI is not a local claim for tenant: %s\"),\n+        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60033\", \"Invalid role claim URI\",\n+                \"Role claim URI is not a local claim for tenant: %s\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 900919599..0de83dd0b 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -124,7 +124,7 @@ public class Constants {\n                 \"One or more local claim URIs does not exist\"),\n         ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n                 \"User ID claim URI is not a local claim for tenant: %s\"),\n-        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60033\", \"Invalid role claim URI\",\n+        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60034\", \"Invalid role claim URI\",\n                 \"Role claim URI is not a local claim for tenant: %s\"),\n \n         // Server Error starting from 650xx.\n", "next_change": {"commit": "f44b32e0efda15349b0bbf3d014763ee0b8297ad", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 0de83dd0b..db153aa45 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -121,7 +121,7 @@ public class Constants {\n         ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n                 \"Role claim URI: %s does not match with the claim mappings\"),\n         ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n-                \"One or more local claim URIs does not exist\"),\n+                \"One or more local claim URIs do not exist\"),\n         ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n                 \"User ID claim URI is not a local claim for tenant: %s\"),\n         ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60034\", \"Invalid role claim URI\",\n", "next_change": {"commit": "0d758b5bfff01a26c5caa8d68cf92ad084d86927", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex db153aa45..2897e175b 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -116,9 +116,9 @@ public class Constants {\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n-        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"IDP-60030\", \"Invalid user ID claim URI\",\n                 \"User ID claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"IDP-60031\", \"Invalid role claim URI\",\n                 \"Role claim URI: %s does not match with the claim mappings\"),\n         ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n                 \"One or more local claim URIs do not exist\"),\n", "next_change": {"commit": "df8b215863dd218feb39b0c90897e7a3b3001dde", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 2897e175b..0da42666b 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -116,16 +117,18 @@ public class Constants {\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n-        ERROR_CODE_INVALID_USER_CLAIM_URI(\"IDP-60030\", \"Invalid user ID claim URI\",\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n                 \"User ID claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"IDP-60031\", \"Invalid role claim URI\",\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n                 \"Role claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"60032\", \"Invalid claim URI\",\n                 \"One or more local claim URIs do not exist\"),\n-        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n+        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"60033\", \"Invalid user ID claim URI\",\n                 \"User ID claim URI is not a local claim for tenant: %s\"),\n-        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60034\", \"Invalid role claim URI\",\n+        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"60034\", \"Invalid role claim URI\",\n                 \"Role claim URI is not a local claim for tenant: %s\"),\n+        ERROR_CODE_INVALID_CERTIFICATE_FORMAT(\"60035\", \"Invalid IDP certificate format.\",\n+                \"One or more IDP certificate formats are invalid\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "21cf435357aca9e0247581d2f275dccc04e1c862", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 0da42666b..22c6a60dc 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -117,18 +117,19 @@ public class Constants {\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n-        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"IDP-60030\", \"Invalid user ID claim URI\",\n                 \"User ID claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"IDP-60031\", \"Invalid role claim URI\",\n                 \"Role claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"60032\", \"Invalid claim URI\",\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n                 \"One or more local claim URIs do not exist\"),\n-        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"60033\", \"Invalid user ID claim URI\",\n+        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n                 \"User ID claim URI is not a local claim for tenant: %s\"),\n-        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"60034\", \"Invalid role claim URI\",\n+        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60034\", \"Invalid role claim URI\",\n                 \"Role claim URI is not a local claim for tenant: %s\"),\n-        ERROR_CODE_INVALID_CERTIFICATE_FORMAT(\"60035\", \"Invalid IDP certificate format.\",\n-                \"One or more IDP certificate formats are invalid\"),\n+        ERROR_CODE_IDP_LIMIT_REACHED(\"60035\",\n+                \"Unable to create an identity provider.\",\n+                \"Maximum number of allowed identity providers have been reached.\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "46e6f8f4b64f5f2e443bba19a65b4af759ccf933", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 22c6a60dc..bddb43fb0 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -117,19 +117,21 @@ public class Constants {\n         ERROR_CODE_OUTBOUND_PROVISIONING_CONFIG_NOT_FOUND(\"60029\", \"Unable to update Outbound \" +\n                 \"Provisioning Connector\", \"Outbound Provisioning Connector properties have not specified \" +\n                 \"for connector : %s\"),\n-        ERROR_CODE_INVALID_USER_CLAIM_URI(\"IDP-60030\", \"Invalid user ID claim URI\",\n+        ERROR_CODE_INVALID_USER_CLAIM_URI(\"60030\", \"Invalid user ID claim URI\",\n                 \"User ID claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"IDP-60031\", \"Invalid role claim URI\",\n+        ERROR_CODE_INVALID_ROLE_CLAIM_URI(\"60031\", \"Invalid role claim URI\",\n                 \"Role claim URI: %s does not match with the claim mappings\"),\n-        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"IDP-60032\", \"Invalid claim URI\",\n+        ERROR_CODE_NOT_EXISTING_CLAIM_URI(\"60032\", \"Invalid claim URI\",\n                 \"One or more local claim URIs do not exist\"),\n-        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"IDP-60033\", \"Invlaid user ID claim URI\",\n+        ERROR_CODE_NOT_EXISTING_USER_CLAIM_URI(\"60033\", \"Invalid user ID claim URI\",\n                 \"User ID claim URI is not a local claim for tenant: %s\"),\n-        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"IDP-60034\", \"Invalid role claim URI\",\n+        ERROR_CODE_NOT_EXISTING_ROLE_CLAIM_URI(\"60034\", \"Invalid role claim URI\",\n                 \"Role claim URI is not a local claim for tenant: %s\"),\n         ERROR_CODE_IDP_LIMIT_REACHED(\"60035\",\n                 \"Unable to create an identity provider.\",\n                 \"Maximum number of allowed identity providers have been reached.\"),\n+        ERROR_CODE_INVALID_CERTIFICATE_FORMAT(\"60036\", \"Invalid IDP certificate format.\",\n+                \"One or more IDP certificate formats are invalid\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "5756231f95d54d6b060ce55ae7889bc10646c47b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex bddb43fb0..f84a9838f 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -132,6 +136,8 @@ public class Constants {\n                 \"Maximum number of allowed identity providers have been reached.\"),\n         ERROR_CODE_INVALID_CERTIFICATE_FORMAT(\"60036\", \"Invalid IDP certificate format.\",\n                 \"One or more IDP certificate formats are invalid\"),\n+        ERROR_CODE_INVALID_OIDC_SCOPES(\"60037\", \"Duplicate OIDC Scopes.\",\n+                \"Cannot set scopes in both Scopes and Additional Query Parameters.\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "9067ad415d4b19bc51c4758f44f2c107b651f562", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex f84a9838f..a46b66399 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -137,7 +137,8 @@ public class Constants {\n         ERROR_CODE_INVALID_CERTIFICATE_FORMAT(\"60036\", \"Invalid IDP certificate format.\",\n                 \"One or more IDP certificate formats are invalid\"),\n         ERROR_CODE_INVALID_OIDC_SCOPES(\"60037\", \"Duplicate OIDC Scopes.\",\n-                \"Cannot set scopes in both Scopes and Additional Query Parameters.\"),\n+                \"Cannot set scopes in both Scopes and Additional Query Parameters.\" +\n+                        \" Please use Scopes field to set scopes.\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "d81babde2b5568a45327e1ad96a89b39fb52a683", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex a46b66399..85b6f5400 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -136,7 +136,7 @@ public class Constants {\n                 \"Maximum number of allowed identity providers have been reached.\"),\n         ERROR_CODE_INVALID_CERTIFICATE_FORMAT(\"60036\", \"Invalid IDP certificate format.\",\n                 \"One or more IDP certificate formats are invalid\"),\n-        ERROR_CODE_INVALID_OIDC_SCOPES(\"60037\", \"Duplicate OIDC Scopes.\",\n+        ERROR_CODE_DUPLICATE_OIDC_SCOPES(\"60037\", \"Duplicate OIDC Scopes.\",\n                 \"Cannot set scopes in both Scopes and Additional Query Parameters.\" +\n                         \" Please use Scopes field to set scopes.\"),\n \n", "next_change": {"commit": "9d77f8e49d117b669f2f81813cc59caf7d379c6a", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 85b6f5400..0aca3a7c6 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -139,6 +139,8 @@ public class Constants {\n         ERROR_CODE_DUPLICATE_OIDC_SCOPES(\"60037\", \"Duplicate OIDC Scopes.\",\n                 \"Cannot set scopes in both Scopes and Additional Query Parameters.\" +\n                         \" Please use Scopes field to set scopes.\"),\n+        ERROR_CODE_INVALID_OIDC_SCOPES(\"60038\", \"Invalid OIDC Scopes.\",\n+                \"Scopes must contain 'openid'.\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": {"commit": "d60eb2a4545ac578adb9ba8e7c52db4cf1aabdd6", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 0aca3a7c6..94629f145 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -138,7 +138,7 @@ public class Constants {\n                 \"One or more IDP certificate formats are invalid\"),\n         ERROR_CODE_DUPLICATE_OIDC_SCOPES(\"60037\", \"Duplicate OIDC Scopes.\",\n                 \"Cannot set scopes in both Scopes and Additional Query Parameters.\" +\n-                        \" Please use Scopes field to set scopes.\"),\n+                        \" Recommend to use Scopes field.\"),\n         ERROR_CODE_INVALID_OIDC_SCOPES(\"60038\", \"Invalid OIDC Scopes.\",\n                 \"Scopes must contain 'openid'.\"),\n \n", "next_change": {"commit": "be5e9ca66df8ff260ab9bd5463d7e7eafcbbd767", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\nindex 94629f145..99673b78a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/Constants.java\n", "chunk": "@@ -141,6 +142,9 @@ public class Constants {\n                         \" Recommend to use Scopes field.\"),\n         ERROR_CODE_INVALID_OIDC_SCOPES(\"60038\", \"Invalid OIDC Scopes.\",\n                 \"Scopes must contain 'openid'.\"),\n+        ERROR_CODE_ERROR_LISTING_TRUSTED_TOKEN_ISSUERS(\"60021\",\n+                \"Unable to list existing trusted token issuers.\",\n+                \"Server encountered an error while listing the trusted token issuers.\"),\n \n         // Server Error starting from 650xx.\n         ERROR_CODE_ERROR_ADDING_IDP(\"65002\",\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "committedDate": "2020-04-10 10:55:54 +0530", "message": "Add support for filtering in application/idp templates"}, {"oid": "8ed107988f2e63530fef3b9859177b11901deb63", "committedDate": "2020-04-10 14:24:05 +0530", "message": "Add services attribute for IdP template listing"}, {"oid": "8f008d62ea44d737f9ce7b03fcc8512b3399a5b4", "committedDate": "2020-04-16 11:23:02 +0530", "message": "Introduce services attribute for IDP template filtering"}, {"oid": "23174b7184e119ef9bc06fa736e93d64adc1b86d", "committedDate": "2020-04-29 17:51:04 +0530", "message": "Add PUT operation support for federated-authenticators and outbound-connectors paths in IDP REST API"}, {"oid": "ebdbf53277a1cd559e0994be18397cd71512bed6", "committedDate": "2020-10-16 13:29:24 +0530", "message": "Refactoring Error constants as server error and client errors"}, {"oid": "2c3696c54006ec7b3b5415bf4a4f9365d5e5ac81", "committedDate": "2020-10-16 13:30:12 +0530", "message": "[Fix] Conflicts"}, {"oid": "b845597e3a3eba162465ff7648b6cee3fccdf71d", "committedDate": "2020-10-16 13:31:52 +0530", "message": "Removing duplicate error codes"}, {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "committedDate": "2020-10-20 14:35:02 +0530", "message": "Validate input values when updating IDP claims config"}, {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "committedDate": "2020-10-20 20:51:21 +0530", "message": "Addressing comments"}, {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad", "committedDate": "2020-10-20 23:29:57 +0530", "message": "Refactoring validation logic"}, {"oid": "0d758b5bfff01a26c5caa8d68cf92ad084d86927", "committedDate": "2020-10-21 11:09:18 +0530", "message": "Refactoring validation logic and improving error codes"}, {"oid": "acaaa35775c5750383c229aab9f32418121d1e5f", "committedDate": "2020-12-07 22:34:48 +0530", "message": "Check for duplicate properties in IDP create request."}, {"oid": "ee586248913444df590fd66d0d02a749a38296e3", "committedDate": "2021-01-28 13:09:05 +0530", "message": "return templateId in IDP get, create, patch response"}, {"oid": "df8b215863dd218feb39b0c90897e7a3b3001dde", "committedDate": "2021-06-26 18:41:20 +0530", "message": "Add certificate format validation"}, {"oid": "21cf435357aca9e0247581d2f275dccc04e1c862", "committedDate": "2021-07-01 20:27:58 +0530", "message": "Improve error handling"}, {"oid": "46e6f8f4b64f5f2e443bba19a65b4af759ccf933", "committedDate": "2021-07-03 10:41:50 +0530", "message": "Merge branch 'master' into master"}, {"oid": "a06b67212e132001411ebf010181a76a988d606c", "committedDate": "2021-07-27 14:49:28 +0530", "message": "Add IDP issuer name in IDP REST API"}, {"oid": "3b9423420148150ab22f0f1c07466018831de2d2", "committedDate": "2021-07-27 20:10:49 +0530", "message": "Add patch update for IDP issuer name"}, {"oid": "5756231f95d54d6b060ce55ae7889bc10646c47b", "committedDate": "2022-09-09 14:48:44 +0530", "message": "throw exception if scopes are configured in both Scopes and Additional Query Params"}, {"oid": "8e2d931430fb48b792dbc0b95744b322ead4c5db", "committedDate": "2022-09-09 15:03:50 +0530", "message": "fix mistake in declaration"}, {"oid": "9067ad415d4b19bc51c4758f44f2c107b651f562", "committedDate": "2022-09-20 16:23:58 +0530", "message": "change error type to bad request"}, {"oid": "d81babde2b5568a45327e1ad96a89b39fb52a683", "committedDate": "2022-09-28 17:54:18 +0530", "message": "change error code name"}, {"oid": "9d77f8e49d117b669f2f81813cc59caf7d379c6a", "committedDate": "2022-09-28 18:29:50 +0530", "message": "validate if scopes contain `openid`"}, {"oid": "d60eb2a4545ac578adb9ba8e7c52db4cf1aabdd6", "committedDate": "2022-09-29 09:12:30 +0530", "message": "change duplicate scopes error message"}, {"oid": "4a66d0c8d1a988575b2fcca7b417e2153f1c5faa", "committedDate": "2022-09-29 11:59:11 +0530", "message": "add Scopes and commonAuthQueryParams constants to IdentityApplicationConstants"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}, {"oid": "25cc9050973616ff37dcfe9e13e8b20afcf9e8ab", "committedDate": "2023-04-04 14:48:15 +0530", "message": "Add export and import APIs for IDP"}, {"oid": "de8667cbeb493779c821a6572e29294c782f3d8a", "committedDate": "2023-04-06 16:36:24 +0530", "message": "Modify logic of getting media type from file type"}, {"oid": "390272a82e5e2c7786abdfbd05b0ce5e22fbb84b", "committedDate": "2023-04-06 17:13:18 +0530", "message": "Fix findbug issues"}, {"oid": "df23144fe750d81d7c01330d3e58587b7e4a52ac", "committedDate": "2023-05-12 09:32:55 +0530", "message": "Merge branch 'master' of https://github.com/wso2/identity-api-server into idp-groups-endpoint"}, {"oid": "64ce5b1b9e92b612659e6fc745675f84f11ccf8e", "committedDate": "2023-05-12 19:00:23 +0530", "message": "Address review comments"}, {"oid": "be5e9ca66df8ff260ab9bd5463d7e7eafcbbd767", "committedDate": "2023-05-24 13:09:52 +0530", "message": "Add trusted token issuers path"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTA5OQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601099", "body": "add fullstop", "bodyText": "add fullstop", "bodyHTML": "<p dir=\"auto\">add fullstop</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:23:15Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java", "diffHunk": "@@ -67,4 +69,24 @@ public static void setClaimMetadataManagementService(\n \n         IdentityProviderServiceHolder.claimMetadataManagementService = claimMetadataManagementService;\n     }\n+\n+    /**\n+     * Set TemplateManager osgi service.\n+     *\n+     * @param templateManager TemplateManager service\n+     */\n+    public static void setTemplateManager(TemplateManager templateManager) {\n+\n+        IdentityProviderServiceHolder.templateManager = templateManager;\n+    }\n+\n+    /**\n+     * Get TemplateManager osgi service", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex b90fa9cf2..d0f358d8a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service\n+     * Get TemplateManager osgi service.\n      *\n      * @return TemplateManager\n      */\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex d0f358d8a..b90fa9cf2 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service.\n+     * Get TemplateManager osgi service\n      *\n      * @return TemplateManager\n      */\n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex b90fa9cf2..d0f358d8a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service\n+     * Get TemplateManager osgi service.\n      *\n      * @return TemplateManager\n      */\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\nindex b90fa9cf2..d0f358d8a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/IdentityProviderServiceHolder.java\n", "chunk": "@@ -81,7 +81,7 @@ public class IdentityProviderServiceHolder {\n     }\n \n     /**\n-     * Get TemplateManager osgi service\n+     * Get TemplateManager osgi service.\n      *\n      * @return TemplateManager\n      */\n", "next_change": null}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTE5NQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395601195", "body": "add license header", "bodyText": "add license header", "bodyHTML": "<p dir=\"auto\">add license header</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:23:29Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.wso2.carbon.identity.api.server.idp.common.factory;", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex ea060c728..fc62e1cc7 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,3 +1,21 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex fc62e1cc7..ea060c728 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,21 +1,3 @@\n-/*\n- * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- * WSO2 Inc. licenses this file to you under the Apache License,\n- * Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex ea060c728..fc62e1cc7 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,3 +1,21 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\nindex ea060c728..fc62e1cc7 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.common/src/main/java/org/wso2/carbon/identity/api/server/idp/common/factory/TemplateMgtOSGIServiceFactory.java\n", "chunk": "@@ -1,3 +1,21 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.carbon.identity.api.server.idp.common.factory;\n \n import org.springframework.beans.factory.config.AbstractFactoryBean;\n", "next_change": null}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMjMyNQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395602325", "body": "let's use a sample filter for the templates in the example", "bodyText": "let's use a sample filter for the templates in the example", "bodyHTML": "<p dir=\"auto\">let's use a sample filter for the templates in the example</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:25:56Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 3372b47b7..ca0bf8189 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -830,7 +830,7 @@ public class ServerIdpManagementService {\n      *\n      * @param limit      Items per page.\n      * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n      * @return  List of identity templates.\n      */\n     public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex ca0bf8189..2e1cdac14 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -825,244 +808,7 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    /**\n-     * Retrieve the list of IDP templates.\n-     *\n-     * @param limit      Items per page.\n-     * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n-     * @return  List of identity templates.\n-     */\n-    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            List<Template> templateList = templateManager.listTemplates(\n-                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n-            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n-        }\n-    }\n-\n-    /**\n-     * Get an identity provider template identified by resource ID.\n-     *\n-     * @param templateId IDP template Id\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n-\n-        try {\n-            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n-            if (idpTemplate == null) {\n-                throw handleException(Response.Status.NOT_FOUND,\n-                        Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-            }\n-            return createIDPTemplateResponse(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n-                    templateId);\n-        } catch (IOException e) {\n-            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Update IDP template.\n-     *\n-     * @param identityProviderTemplate Updated IDP template\n-     */\n-    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n-                    identityProviderTemplate.getId());\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Create a new IDP template.\n-     *\n-     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            return templateManager.addTemplateResource(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        }\n-    }\n-\n-    /**\n-     * Delete a IDP template identified by resource Id.\n-     *\n-     * @param templateId Id of the IDP template\n-     */\n-    public void deleteIDPTemplate(String templateId) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            templateManager.deleteTemplateById(templateId);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n-                    templateId);\n-        }\n-    }\n-\n-//  Private utility Methods.\n-\n-    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n-            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n-\n-        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n-        if (!CollectionUtils.isEmpty(templateInfoList)) {\n-            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n-            for (Template idpTemplate: templateInfoList) {\n-                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n-                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n-                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n-                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n-                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n-                idpTemplateListItem.setSelf(\n-                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT +\n-                        \"/%s\",\n-                                idpTemplate.getTemplateId())).toString());\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n-                    } else {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n-                    }\n-                }\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-                    idpTemplateListItem.setDisplayOrder(\n-                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-                }\n-                idpTemplates.add(idpTemplateListItem);\n-            }\n-            idpTemplateListResponse.setTemplates(idpTemplates);\n-            idpTemplateListResponse.setCount(idpTemplates.size());\n-        } else {\n-            idpTemplateListResponse.setCount(0);\n-        }\n-        limit = (limit == null) ? 0 : limit;\n-        offset = (offset == null) ? 0 : offset;\n-        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n-        idpTemplateListResponse.setStartIndex(offset + 1);\n-        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n-                limit, offset, templateInfoList.size(), filter));\n-        return idpTemplateListResponse;\n-    }\n-\n-    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n-\n-        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n-        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n-        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n-        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n-        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n-            } else {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n-            }\n-        }\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-            idpTemplateResponse.setDisplayOrder(\n-                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-        }\n-        if (idpTemplate.getTemplateScript() != null) {\n-            ObjectMapper mapper = new ObjectMapper();\n-            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n-                    IdentityProviderPOSTRequest.class);\n-            idpTemplateResponse.setIdp(idp);\n-        }\n-        return idpTemplateResponse;\n-    }\n-\n-    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n-\n-        Template identityProviderTemplate = new Template();\n-\n-        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n-        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n-        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n-        identityProviderTemplate.setTenantId(IdentityTenantUtil\n-                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n-        Map<String, String> properties = new HashMap<>();\n-        if (idpTemplate.getCategory() != null) {\n-            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n-        }\n-        if (idpTemplate.getDisplayOrder() != null) {\n-            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n-        }\n-        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n-        identityProviderTemplate.setPropertiesMap(properties);\n-        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n-        return identityProviderTemplate;\n-    }\n-\n-    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n-                                                String data) {\n-\n-        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n-\n-        Response.Status status;\n-\n-        if (e instanceof TemplateManagementClientException) {\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-            status = Response.Status.BAD_REQUEST;\n-        } else if (e instanceof TemplateManagementServerException) {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                if (StringUtils.equals(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode(),\n-                        errorCode)) {\n-                    status = Response.Status.NOT_FOUND;\n-                }\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-        } else {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        return new APIError(status, errorResponse);\n-    }\n-\n-    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        return mapper.writeValueAsString(idpTemplate);\n-    }\n+    // Private utility Methods.\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 2e1cdac14..55a6e3122 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -808,7 +826,234 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.\n+\n+    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n+            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n+\n+        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n+        if (!CollectionUtils.isEmpty(templateInfoList)) {\n+            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n+            for (Template idpTemplate: templateInfoList) {\n+                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n+                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n+                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n+                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n+                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n+                idpTemplateListItem.setSelf(\n+                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT\n+                                        + IDP_TEMPLATE_PATH_COMPONENT + \"/%s\",\n+                                idpTemplate.getTemplateId())).toString());\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n+                    } else {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n+                    }\n+                }\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+                    idpTemplateListItem.setDisplayOrder(\n+                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+                }\n+                idpTemplates.add(idpTemplateListItem);\n+            }\n+            idpTemplateListResponse.setTemplates(idpTemplates);\n+            idpTemplateListResponse.setCount(idpTemplates.size());\n+        } else {\n+            idpTemplateListResponse.setCount(0);\n+        }\n+        limit = (limit == null) ? 0 : limit;\n+        offset = (offset == null) ? 0 : offset;\n+        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n+        idpTemplateListResponse.setStartIndex(offset + 1);\n+        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n+                limit, offset, templateInfoList.size(), filter));\n+        return idpTemplateListResponse;\n+    }\n+\n+    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n+\n+        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n+        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n+        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n+        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n+        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n+            } else {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n+            }\n+        }\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+            idpTemplateResponse.setDisplayOrder(\n+                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+        }\n+        if (idpTemplate.getTemplateScript() != null) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n+                    IdentityProviderPOSTRequest.class);\n+            idpTemplateResponse.setIdp(idp);\n+        }\n+        return idpTemplateResponse;\n+    }\n+\n+    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n+\n+        Template identityProviderTemplate = new Template();\n+\n+        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n+        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n+        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n+        identityProviderTemplate.setTenantId(IdentityTenantUtil\n+                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n+        Map<String, String> properties = new HashMap<>();\n+        if (idpTemplate.getCategory() != null) {\n+            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n+        }\n+        if (idpTemplate.getDisplayOrder() != null) {\n+            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n+        }\n+        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n+        identityProviderTemplate.setPropertiesMap(properties);\n+        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n+        return identityProviderTemplate;\n+    }\n+\n+    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n+                                                String data) {\n+\n+        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n+\n+        Response.Status status;\n+\n+        if (e instanceof TemplateManagementClientException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.BAD_REQUEST;\n+        } else if (e instanceof TemplateManagementServerException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        } else {\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        }\n+\n+        return new APIError(status, errorResponse);\n+    }\n+\n+    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(idpTemplate);\n+    }\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 3372b47b7..55a6e3122 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -830,7 +831,7 @@ public class ServerIdpManagementService {\n      *\n      * @param limit      Items per page.\n      * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n      * @return  List of identity templates.\n      */\n     public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n", "next_change": {"commit": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 55a6e3122..cbf2153d2 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -829,23 +838,154 @@ public class ServerIdpManagementService {\n     /**\n      * Retrieve the list of IDP templates.\n      *\n-     * @param limit      Items per page.\n-     * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n-     * @return  List of identity templates.\n+     * @param limit         Items per page.\n+     * @param offset        Offset.\n+     * @param searchContext Search Criteria. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return List of identity templates.\n      */\n-    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, SearchContext\n+            searchContext) {\n \n         try {\n             TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n             List<Template> templateList = templateManager.listTemplates(\n-                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n-            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset, getSearchCondition\n+                            (TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), ContextLoader\n+                                    .getTenantDomainFromContext(), searchContext));\n+            return createIDPTemplateListResponse(templateList, offset, limit, searchContext.getSearchExpression());\n         } catch (TemplateManagementException e) {\n             throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n         }\n     }\n \n+    /**\n+     * Retrieve search condition from @{SearchContext}.\n+     *\n+     * @param templateType  Template type.\n+     * @param tenantDomain  Tenant domain.\n+     * @param searchContext Search context.\n+     * @return  Condition.\n+     */\n+    private Condition getSearchCondition(String templateType, String tenantDomain, SearchContext searchContext) {\n+\n+        if (searchContext != null) {\n+            SearchCondition<ResourceSearchBean> searchCondition = searchContext.getCondition(ResourceSearchBean.class);\n+            if (searchCondition != null) {\n+                Condition result = buildSearchCondition(searchCondition);\n+                List<Condition> list = new ArrayList<>();\n+                Condition typeCondition = new PrimitiveCondition(Constants.TEMPLATE_TYPE_KEY, EQUALS, templateType\n+                );\n+                Condition tenantCondition = new PrimitiveCondition(Constants.TENANT_DOMAIN_KEY, EQUALS, tenantDomain\n+                );\n+                if (result instanceof ComplexCondition) {\n+                    list = ((ComplexCondition) result).getConditions();\n+                    list.add(typeCondition);\n+                    list.add(tenantCondition);\n+                } else if (result instanceof PrimitiveCondition) {\n+                    list.add(result);\n+                    list.add(typeCondition);\n+                    list.add(tenantCondition);\n+                }\n+                return new ComplexCondition(getComplexOperatorFromOdata(ConditionType.AND),\n+                        list);\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Search condition parsed from the search expression is invalid.\");\n+                }\n+            }\n+        } else {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Cannot find a valid search context.\");\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private Condition buildSearchCondition(SearchCondition searchCondition) {\n+\n+        if (!(searchCondition.getStatement() == null)) {\n+            PrimitiveStatement primitiveStatement = searchCondition.getStatement();\n+\n+            if (Constants.SEARCH_KEYS.contains(primitiveStatement.getProperty())) {\n+                List<Condition> list = new ArrayList<>();\n+                Condition attrKeyCondition = new PrimitiveCondition(Constants.ATTR_KEY, EQUALS, primitiveStatement\n+                        .getProperty());\n+                Condition attrValueCondition = new PrimitiveCondition(Constants.ATTR_VALUE,\n+                        getPrimitiveOperatorFromOdata(primitiveStatement.getCondition()), primitiveStatement\n+                        .getValue());\n+                list.add(attrKeyCondition);\n+                list.add(attrValueCondition);\n+                return new ComplexCondition(getComplexOperatorFromOdata(ConditionType.AND),\n+                        list);\n+            } else if (Constants.SEARCH_KEY_NAME.equals(primitiveStatement.getProperty())) {\n+                return new PrimitiveCondition(\n+                        Constants.SEARCH_KEY_NAME_INTERNAL, getPrimitiveOperatorFromOdata(primitiveStatement\n+                        .getCondition()), primitiveStatement.getValue());\n+            } else {\n+                throw handleException(Response.Status.BAD_REQUEST,\n+                        Constants.ErrorMessage.ERROR_CODE_ERROR_INVALID_SEARCH_FILTER, null);\n+            }\n+        } else {\n+            List<Condition> conditions = new ArrayList<>();\n+            for (Object condition : searchCondition.getSearchConditions()) {\n+                Condition buildCondition = buildSearchCondition((SearchCondition) condition);\n+                conditions.add(buildCondition);\n+            }\n+            return new ComplexCondition(getComplexOperatorFromOdata(searchCondition.getConditionType()), conditions);\n+        }\n+    }\n+\n+    private org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType.PrimitiveOperator\n+    getPrimitiveOperatorFromOdata(org.apache.cxf.jaxrs.ext.search.ConditionType odataConditionType) {\n+\n+        org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType.PrimitiveOperator\n+                primitiveConditionType = null;\n+        switch (odataConditionType) {\n+            case EQUALS:\n+                primitiveConditionType = EQUALS;\n+                break;\n+            case GREATER_OR_EQUALS:\n+                primitiveConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant\n+                        .ConditionType.PrimitiveOperator.GREATER_OR_EQUALS;\n+                break;\n+            case LESS_OR_EQUALS:\n+                primitiveConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant\n+                        .ConditionType.PrimitiveOperator.LESS_OR_EQUALS;\n+                break;\n+            case GREATER_THAN:\n+                primitiveConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant\n+                        .ConditionType.PrimitiveOperator.GREATER_THAN;\n+                break;\n+            case NOT_EQUALS:\n+                primitiveConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant\n+                        .ConditionType.PrimitiveOperator.NOT_EQUALS;\n+                break;\n+            case LESS_THAN:\n+                primitiveConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant\n+                        .ConditionType.PrimitiveOperator.LESS_THAN;\n+                break;\n+        }\n+        return primitiveConditionType;\n+    }\n+\n+    private org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType.ComplexOperator\n+    getComplexOperatorFromOdata(org.apache.cxf.jaxrs.ext.search.ConditionType odataConditionType) {\n+\n+        org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType.ComplexOperator\n+                complexConditionType = null;\n+        switch (odataConditionType) {\n+            case OR:\n+                complexConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType\n+                        .ComplexOperator.OR;\n+                break;\n+            case AND:\n+                complexConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType\n+                        .ComplexOperator.AND;\n+                break;\n+        }\n+        return complexConditionType;\n+    }\n+\n     /**\n      * Get an identity provider template identified by resource ID.\n      *\n", "next_change": {"commit": "8a3dcc205543e5fcad997b9d2ab3d2f2e116f7a5", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex cbf2153d2..19e96ed4d 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -982,6 +1083,9 @@ public class ServerIdpManagementService {\n                 complexConditionType = org.wso2.carbon.identity.configuration.mgt.core.search.constant.ConditionType\n                         .ComplexOperator.AND;\n                 break;\n+            default:\n+                throw handleException(Response.Status.BAD_REQUEST,\n+                        Constants.ErrorMessage.ERROR_CODE_ERROR_INVALID_SEARCH_FILTER, null);\n         }\n         return complexConditionType;\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "committedDate": "2020-04-10 10:55:54 +0530", "message": "Add support for filtering in application/idp templates"}, {"oid": "8ed107988f2e63530fef3b9859177b11901deb63", "committedDate": "2020-04-10 14:24:05 +0530", "message": "Add services attribute for IdP template listing"}, {"oid": "8f008d62ea44d737f9ce7b03fcc8512b3399a5b4", "committedDate": "2020-04-16 11:23:02 +0530", "message": "Introduce services attribute for IDP template filtering"}, {"oid": "29a591129dc0f5d35af1accbac0646a69c8f1150", "committedDate": "2020-04-21 18:01:56 +0530", "message": "Fix incorrect constant used in populateIDPListResponse"}, {"oid": "23174b7184e119ef9bc06fa736e93d64adc1b86d", "committedDate": "2020-04-29 17:51:04 +0530", "message": "Add PUT operation support for federated-authenticators and outbound-connectors paths in IDP REST API"}, {"oid": "48043e2761bb791060eef71ceaa75e99faff7a8a", "committedDate": "2020-05-05 09:11:07 +0530", "message": "Add patch add/remove support for IDP certificates"}, {"oid": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "committedDate": "2020-08-03 12:14:09 +0530", "message": "Fix review comments in PR"}, {"oid": "4298dc079cb0697bd6dd8d2b285b151c9f48fb77", "committedDate": "2020-10-13 09:19:05 +0530", "message": "[FIX] Wrong response when invalid input is provided for IDP metadata endpoint"}, {"oid": "8a3dcc205543e5fcad997b9d2ab3d2f2e116f7a5", "committedDate": "2020-10-14 13:36:50 +0530", "message": "Fix findbugs issues"}, {"oid": "2c3696c54006ec7b3b5415bf4a4f9365d5e5ac81", "committedDate": "2020-10-16 13:30:12 +0530", "message": "[Fix] Conflicts"}, {"oid": "01cbdd3cf931b3b7f9a211289b9cb99cc7c874a5", "committedDate": "2020-10-19 16:51:18 +0530", "message": "[FIX] Not cloning IDP cache object"}, {"oid": "cc0c0b0b3fef2862ba4f1b8fcef8d1296cb22335", "committedDate": "2020-10-19 21:41:29 +0530", "message": "Merge pull request #191 from mevan-karu/review_fix"}, {"oid": "fe85c408f7d4304d914aa85e313ad04994b0629c", "committedDate": "2020-10-20 07:33:46 +0530", "message": "Merge pull request #213 from somindatommy/fixing_9952"}, {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "committedDate": "2020-10-20 14:35:02 +0530", "message": "Validate input values when updating IDP claims config"}, {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d", "committedDate": "2020-10-20 15:36:06 +0530", "message": "[FIX] Formatting issue"}, {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "committedDate": "2020-10-20 20:51:21 +0530", "message": "Addressing comments"}, {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad", "committedDate": "2020-10-20 23:29:57 +0530", "message": "Refactoring validation logic"}, {"oid": "0d758b5bfff01a26c5caa8d68cf92ad084d86927", "committedDate": "2020-10-21 11:09:18 +0530", "message": "Refactoring validation logic and improving error codes"}, {"oid": "4598d7c6a224cfae18b15f298c210f06d411fbe6", "committedDate": "2020-12-07 13:34:15 +0530", "message": "Format error messages in exception flows."}, {"oid": "acaaa35775c5750383c229aab9f32418121d1e5f", "committedDate": "2020-12-07 22:34:48 +0530", "message": "Check for duplicate properties in IDP create request."}, {"oid": "ee586248913444df590fd66d0d02a749a38296e3", "committedDate": "2021-01-28 13:09:05 +0530", "message": "return templateId in IDP get, create, patch response"}, {"oid": "180de268c1077ddd98b1d578e92c2cb28286973d", "committedDate": "2021-01-28 13:09:05 +0530", "message": "set templateId as a first class attribute"}, {"oid": "0c4e4a1287e7270c07b16d978e6d302fd1c3f0f5", "committedDate": "2021-02-05 14:24:09 +0530", "message": "Fix idp certificate issue when adding more than one certificate"}, {"oid": "b90c7e74630005707e7432b927a56cd50b3111d3", "committedDate": "2021-06-25 20:00:20 +0530", "message": "Add improvement to return tags when authenticators are fetched."}, {"oid": "df8b215863dd218feb39b0c90897e7a3b3001dde", "committedDate": "2021-06-26 18:41:20 +0530", "message": "Add certificate format validation"}, {"oid": "21cf435357aca9e0247581d2f275dccc04e1c862", "committedDate": "2021-07-01 20:27:58 +0530", "message": "Improve error handling"}, {"oid": "0706bf7f11016903c9c965e5a4adaab7ff1f2a78", "committedDate": "2021-07-02 13:23:24 +0530", "message": "Merge branch 'master' into tags"}, {"oid": "46e6f8f4b64f5f2e443bba19a65b4af759ccf933", "committedDate": "2021-07-03 10:41:50 +0530", "message": "Merge branch 'master' into master"}, {"oid": "a06b67212e132001411ebf010181a76a988d606c", "committedDate": "2021-07-27 14:49:28 +0530", "message": "Add IDP issuer name in IDP REST API"}, {"oid": "3b9423420148150ab22f0f1c07466018831de2d2", "committedDate": "2021-07-27 20:10:49 +0530", "message": "Add patch update for IDP issuer name"}, {"oid": "001df64ae278a1e6a5282e984df163e981dff05d", "committedDate": "2021-08-24 22:56:35 +0530", "message": "fix issues in idp patch operation"}, {"oid": "ea605519540df1c806f13a8126aca4bb24335921", "committedDate": "2021-08-24 23:14:26 +0530", "message": "fix formatting"}, {"oid": "01fce73094eaadd461941bbe8e4da02c38f7e950", "committedDate": "2021-08-24 23:40:13 +0530", "message": "fix formatting"}, {"oid": "6bfe9b67bd63ebc5e4c6cf8b1bce66a0e8fa055a", "committedDate": "2021-08-25 12:16:46 +0530", "message": "Refactor code"}, {"oid": "399ea0ece590df4f3a2e759b98e0db39a138d88c", "committedDate": "2021-08-25 12:19:38 +0530", "message": "Refactor code"}, {"oid": "4b8716bf7c0736e2da6ce85cafd3720d52c5459c", "committedDate": "2021-08-25 12:53:39 +0530", "message": "Refactor code"}, {"oid": "caa578240a2909c210fd9a56d4fb009c68ada1a2", "committedDate": "2021-08-25 13:18:34 +0530", "message": "Refactor code"}, {"oid": "09f3229140aafd1be017f4b7fc893017b27b69cd", "committedDate": "2021-09-08 11:03:08 +0530", "message": "IDP patch ADD and REMOVE operations added for certificates and JWKS URI."}, {"oid": "a5b15b76c91da11938720d08279c6366de1999ff", "committedDate": "2021-09-30 13:48:48 +0530", "message": "Update error codes of IDP Management REST API"}, {"oid": "7f1d2116f43f18be8e3adfd9b2bf50812f950e0d", "committedDate": "2021-09-30 13:48:48 +0530", "message": "Update error codes of IDP Management REST API"}, {"oid": "a1ea3a1ca3f42cbabae0c96b06985e3fa0a756b9", "committedDate": "2021-10-01 13:00:29 +0530", "message": "Fix issues in idp patch non existing property"}, {"oid": "6b17264995093bc2d93df3fe33ed8c901d688c9e", "committedDate": "2021-10-04 10:20:13 +0530", "message": "Refactor error codes"}, {"oid": "91fc338dbde6fd37655ef66f81132c0b2529a9fe", "committedDate": "2021-10-04 14:01:25 +0530", "message": "Refactor error codes"}, {"oid": "0769d48de84df1c3c9f0da925fd06423c2bd3b3f", "committedDate": "2021-10-04 17:34:17 +0530", "message": "Refactor error codes"}, {"oid": "46118827e1dd2f4f148283a0fa8c694aa3483067", "committedDate": "2021-11-10 09:20:03 +0530", "message": "Validate enabling Proxy mode when federated IDP is already configured along with MFA for an application"}, {"oid": "b972be0ee36d7da9cf762360fce6c8cb7afaf1ec", "committedDate": "2021-12-22 08:00:38 +0530", "message": "Revert \"Validate enabling Proxy mode when federated IDP is already configured along with MFA for an application\""}, {"oid": "2a3a6d748af804cf3eaea18e97e6dadf980aabe2", "committedDate": "2022-01-11 16:55:10 +0530", "message": "Fixing logging server error codes for client errors issue"}, {"oid": "33231b3645c317e8cbbe7d2eaf7f6e7ef6e0f90a", "committedDate": "2022-01-12 11:22:06 +0530", "message": "Handeling scenarios when errorcode of exception is null"}, {"oid": "36b853516eca0fe639013987c2acd3f27dc5aa70", "committedDate": "2022-01-12 12:02:26 +0530", "message": "Revert exception changes"}, {"oid": "289b319d05f32acc031a80ced3f7fd1878a6493f", "committedDate": "2022-01-12 12:05:59 +0530", "message": "Revert exception changes"}, {"oid": "4ca91f2c1e0d418b25681fd2253c7925a940154c", "committedDate": "2022-01-18 10:46:11 +0530", "message": "Fixing default userstore in idpResponse"}, {"oid": "a7e97e0e1fb7ad81c8d6b491f1a8f2e4ed07c85f", "committedDate": "2022-01-20 14:11:40 +0530", "message": "Fix for the test failure in addIdp"}, {"oid": "b0d47895222389aff4b444bb8479246c616ed9d7", "committedDate": "2022-05-13 14:04:04 +0530", "message": "Address commits of merged PRs"}, {"oid": "73539e35f505fbb661c85c0c72af4218d3f80599", "committedDate": "2022-06-17 10:35:12 +0530", "message": "Fix UnknownFormatConversionException"}, {"oid": "2a1277ebbfdf5be717cec0c4dc3fc3039f78e44e", "committedDate": "2022-06-24 18:33:08 +0530", "message": "Resolve the issue in adding IDP Issuer Name using a PATCH request."}, {"oid": "5756231f95d54d6b060ce55ae7889bc10646c47b", "committedDate": "2022-09-09 14:48:44 +0530", "message": "throw exception if scopes are configured in both Scopes and Additional Query Params"}, {"oid": "9067ad415d4b19bc51c4758f44f2c107b651f562", "committedDate": "2022-09-20 16:23:58 +0530", "message": "change error type to bad request"}, {"oid": "d81babde2b5568a45327e1ad96a89b39fb52a683", "committedDate": "2022-09-28 17:54:18 +0530", "message": "change error code name"}, {"oid": "9d77f8e49d117b669f2f81813cc59caf7d379c6a", "committedDate": "2022-09-28 18:29:50 +0530", "message": "validate if scopes contain `openid`"}, {"oid": "4a8ff771ec778dc99adb02d6e09c24d24a676466", "committedDate": "2022-09-29 12:17:15 +0530", "message": "add Scopes and commonAuthQueryParams constants to IdentityApplicationConstants"}, {"oid": "1eec896dee89c07be297f6dfe31dff3f4f3f9824", "committedDate": "2022-09-29 17:30:46 +0530", "message": "fix suggestions"}, {"oid": "674fa8e5c99a0e75e17519972586d59a66b82fbe", "committedDate": "2022-09-29 18:31:15 +0530", "message": "fix lint error"}, {"oid": "d8a36306c4cf2825209efa9024e81a3dfb41b0a4", "committedDate": "2022-10-17 07:42:41 +0530", "message": "Introduce parameter to enable/disable associate local user when provisioing."}, {"oid": "f879eb79654130f9d097a0a0af6bd69b54c0c043", "committedDate": "2023-02-09 13:59:46 +0530", "message": "support attribute sync for OIDC_IDP (#420)"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}, {"oid": "d0b0824c751e1e01e07cede367c36517de33c385", "committedDate": "2023-04-02 22:55:38 +0530", "message": "Address review comments - Change Groups response as a list of idpgroup objects - return idp-group-id"}, {"oid": "25cc9050973616ff37dcfe9e13e8b20afcf9e8ab", "committedDate": "2023-04-04 14:48:15 +0530", "message": "Add export and import APIs for IDP"}, {"oid": "de8667cbeb493779c821a6572e29294c782f3d8a", "committedDate": "2023-04-06 16:36:24 +0530", "message": "Modify logic of getting media type from file type"}, {"oid": "390272a82e5e2c7786abdfbd05b0ce5e22fbb84b", "committedDate": "2023-04-06 17:13:18 +0530", "message": "Fix findbug issues"}, {"oid": "16564d7f53814e7bc7251d67ab5a9751c8c0f986", "committedDate": "2023-04-11 13:04:03 +0530", "message": "Modify secret masking logic"}, {"oid": "9eec8a4b9fd74d3390ff312a2cbcd2f2176b9b71", "committedDate": "2023-04-11 15:59:22 +0530", "message": "Fix importing existing idp issue"}, {"oid": "2806b4e077af35cb1f9dd6dbdd979b29b02748ac", "committedDate": "2023-04-12 10:33:20 +0530", "message": "Minor formatting changes"}, {"oid": "89481e5730363af1d56210c6f0741a388b8593d5", "committedDate": "2023-04-12 12:22:53 +0530", "message": "Change exportSecrets data type to boolean"}, {"oid": "6a0bd2617ad55773261f381c450238f2e33d4c20", "committedDate": "2023-04-13 09:41:59 +0530", "message": "Refactor api paths to a common format 'file'"}, {"oid": "7ea0e1d2f7d129791ce760adc732459fa229c147", "committedDate": "2023-04-17 17:59:27 +0530", "message": "Update framework version"}, {"oid": "b1c1326cfdc4915de2cde7f9cd0cf7f7929610d4", "committedDate": "2023-04-18 23:19:30 +0530", "message": "remove secrets from provisioning"}, {"oid": "ddd493deb313a31b410dd813ae84bcffef7ca8ad", "committedDate": "2023-05-08 06:58:30 +0530", "message": "Add api support to export and update resident idp"}, {"oid": "2271eff97b1c8445bb84f4b5acbc124b32622692", "committedDate": "2023-05-09 10:29:33 +0530", "message": "Remove secrets from idp properties"}, {"oid": "e115eafe3302290eb8374bf269bd6ecb1f5944c3", "committedDate": "2023-05-10 08:54:04 +0530", "message": "Remove transient fields from IDP yaml string"}, {"oid": "4105560dfead21112e0fb84ce5995ff5340d8be8", "committedDate": "2023-05-10 17:36:16 +0530", "message": "Add comments and minor changes"}, {"oid": "df23144fe750d81d7c01330d3e58587b7e4a52ac", "committedDate": "2023-05-12 09:32:55 +0530", "message": "Merge branch 'master' of https://github.com/wso2/identity-api-server into idp-groups-endpoint"}, {"oid": "1641b889221f10b1a13f907b15f3e188218ad88a", "committedDate": "2023-05-12 18:36:37 +0530", "message": "Update components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java"}, {"oid": "64ce5b1b9e92b612659e6fc745675f84f11ccf8e", "committedDate": "2023-05-12 19:00:23 +0530", "message": "Address review comments"}, {"oid": "be5e9ca66df8ff260ab9bd5463d7e7eafcbbd767", "committedDate": "2023-05-24 13:09:52 +0530", "message": "Add trusted token issuers path"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395603985", "body": "check whether idpTemplate is null. If null, send 404 not found.", "bodyText": "check whether idpTemplate is null. If null, send 404 not found.", "bodyHTML": "<p dir=\"auto\">check whether idpTemplate is null. If null, send 404 not found.</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:29:26Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +825,240 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"isEnabled\" eq \"true\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxODQwNg==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r396018406", "bodyText": "TemplateManager throws an exception when resource is not found. So this is handled at handleTemplateMgtException method. Is it necessary to handle the null in here also?", "author": "mevan-karu", "createdAt": "2020-03-21T18:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNzUyMw==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r396207523", "bodyText": "Then it is fine. However you need to map the error code of that exception to http 404 in https://github.com/wso2/identity-rest-dispatcher/blob/master/components/org.wso2.carbon.identity.api.dispatcher/src/main/resources/ErrorMappings.properties", "author": "emswbandara", "createdAt": "2020-03-23T04:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 3372b47b7..ca0bf8189 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -855,6 +855,10 @@ public class ServerIdpManagementService {\n \n         try {\n             Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            if (idpTemplate == null) {\n+                throw handleException(Response.Status.NOT_FOUND,\n+                        Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+            }\n             return createIDPTemplateResponse(idpTemplate);\n         } catch (TemplateManagementException e) {\n             throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n", "next_change": {"commit": "ab4346edaecc6f7aeb5498d1804ebdac3ba430d5", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex ca0bf8189..c1f8f2515 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -855,10 +855,6 @@ public class ServerIdpManagementService {\n \n         try {\n             Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n-            if (idpTemplate == null) {\n-                throw handleException(Response.Status.NOT_FOUND,\n-                        Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-            }\n             return createIDPTemplateResponse(idpTemplate);\n         } catch (TemplateManagementException e) {\n             throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex c1f8f2515..2e1cdac14 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -825,240 +808,7 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    /**\n-     * Retrieve the list of IDP templates.\n-     *\n-     * @param limit      Items per page.\n-     * @param offset     Offset.\n-     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n-     * @return  List of identity templates.\n-     */\n-    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            List<Template> templateList = templateManager.listTemplates(\n-                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n-            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n-        }\n-    }\n-\n-    /**\n-     * Get an identity provider template identified by resource ID.\n-     *\n-     * @param templateId IDP template Id\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n-\n-        try {\n-            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n-            return createIDPTemplateResponse(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n-                    templateId);\n-        } catch (IOException e) {\n-            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Update IDP template.\n-     *\n-     * @param identityProviderTemplate Updated IDP template\n-     */\n-    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n-                    identityProviderTemplate.getId());\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n-        }\n-    }\n-\n-    /**\n-     * Create a new IDP template.\n-     *\n-     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n-     * @return IdentityProviderTemplateResponse\n-     */\n-    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n-            return templateManager.addTemplateResource(idpTemplate);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        } catch (JsonProcessingException e) {\n-            throw handleException(Response.Status.BAD_REQUEST,\n-                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n-        }\n-    }\n-\n-    /**\n-     * Delete a IDP template identified by resource Id.\n-     *\n-     * @param templateId Id of the IDP template\n-     */\n-    public void deleteIDPTemplate(String templateId) {\n-\n-        try {\n-            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n-            templateManager.deleteTemplateById(templateId);\n-        } catch (TemplateManagementException e) {\n-            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n-                    templateId);\n-        }\n-    }\n-\n-//  Private utility Methods.\n-\n-    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n-            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n-\n-        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n-        if (!CollectionUtils.isEmpty(templateInfoList)) {\n-            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n-            for (Template idpTemplate: templateInfoList) {\n-                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n-                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n-                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n-                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n-                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n-                idpTemplateListItem.setSelf(\n-                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT +\n-                        \"/%s\",\n-                                idpTemplate.getTemplateId())).toString());\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n-                    } else {\n-                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n-                    }\n-                }\n-                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-                    idpTemplateListItem.setDisplayOrder(\n-                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-                }\n-                idpTemplates.add(idpTemplateListItem);\n-            }\n-            idpTemplateListResponse.setTemplates(idpTemplates);\n-            idpTemplateListResponse.setCount(idpTemplates.size());\n-        } else {\n-            idpTemplateListResponse.setCount(0);\n-        }\n-        limit = (limit == null) ? 0 : limit;\n-        offset = (offset == null) ? 0 : offset;\n-        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n-        idpTemplateListResponse.setStartIndex(offset + 1);\n-        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n-                limit, offset, templateInfoList.size(), filter));\n-        return idpTemplateListResponse;\n-    }\n-\n-    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n-\n-        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n-        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n-        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n-        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n-        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n-            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n-                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n-            } else {\n-                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n-            }\n-        }\n-        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n-            idpTemplateResponse.setDisplayOrder(\n-                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n-        }\n-        if (idpTemplate.getTemplateScript() != null) {\n-            ObjectMapper mapper = new ObjectMapper();\n-            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n-                    IdentityProviderPOSTRequest.class);\n-            idpTemplateResponse.setIdp(idp);\n-        }\n-        return idpTemplateResponse;\n-    }\n-\n-    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n-\n-        Template identityProviderTemplate = new Template();\n-\n-        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n-        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n-        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n-        identityProviderTemplate.setTenantId(IdentityTenantUtil\n-                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n-        Map<String, String> properties = new HashMap<>();\n-        if (idpTemplate.getCategory() != null) {\n-            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n-        }\n-        if (idpTemplate.getDisplayOrder() != null) {\n-            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n-        }\n-        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n-        identityProviderTemplate.setPropertiesMap(properties);\n-        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n-        return identityProviderTemplate;\n-    }\n-\n-    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n-                                                String data) {\n-\n-        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n-\n-        Response.Status status;\n-\n-        if (e instanceof TemplateManagementClientException) {\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-            status = Response.Status.BAD_REQUEST;\n-        } else if (e instanceof TemplateManagementServerException) {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-            if (e.getErrorCode() != null) {\n-                String errorCode = e.getErrorCode();\n-                if (StringUtils.equals(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode(),\n-                        errorCode)) {\n-                    status = Response.Status.NOT_FOUND;\n-                }\n-                errorCode =\n-                        errorCode.contains(org.wso2.carbon.identity.api.server.common.Constants.ERROR_CODE_DELIMITER) ?\n-                                errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n-                errorResponse.setCode(errorCode);\n-            }\n-            errorResponse.setDescription(e.getMessage());\n-        } else {\n-            status = Response.Status.INTERNAL_SERVER_ERROR;\n-        }\n-\n-        return new APIError(status, errorResponse);\n-    }\n-\n-    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-        return mapper.writeValueAsString(idpTemplate);\n-    }\n+    // Private utility Methods.\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 2e1cdac14..55a6e3122 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -808,7 +826,234 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.\n+\n+    private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n+            List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n+\n+        IdentityProviderTemplateListResponse idpTemplateListResponse = new IdentityProviderTemplateListResponse();\n+        if (!CollectionUtils.isEmpty(templateInfoList)) {\n+            List<IdentityProviderTemplateListItem> idpTemplates = new ArrayList<>();\n+            for (Template idpTemplate: templateInfoList) {\n+                IdentityProviderTemplateListItem idpTemplateListItem = new IdentityProviderTemplateListItem();\n+                idpTemplateListItem.setId(idpTemplate.getTemplateId());\n+                idpTemplateListItem.setDescription(idpTemplate.getDescription());\n+                idpTemplateListItem.setName(idpTemplate.getTemplateName());\n+                idpTemplateListItem.setImage(idpTemplate.getImageUrl());\n+                idpTemplateListItem.setSelf(\n+                        ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT + IDP_PATH_COMPONENT\n+                                        + IDP_TEMPLATE_PATH_COMPONENT + \"/%s\",\n+                                idpTemplate.getTemplateId())).toString());\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+                    if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                            IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.CUSTOM);\n+                    } else {\n+                        idpTemplateListItem.setCategory(IdentityProviderTemplateListItem.CategoryEnum.DEFAULT);\n+                    }\n+                }\n+                if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+                    idpTemplateListItem.setDisplayOrder(\n+                            Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+                }\n+                idpTemplates.add(idpTemplateListItem);\n+            }\n+            idpTemplateListResponse.setTemplates(idpTemplates);\n+            idpTemplateListResponse.setCount(idpTemplates.size());\n+        } else {\n+            idpTemplateListResponse.setCount(0);\n+        }\n+        limit = (limit == null) ? 0 : limit;\n+        offset = (offset == null) ? 0 : offset;\n+        idpTemplateListResponse.setTotalResults(templateInfoList.size());\n+        idpTemplateListResponse.setStartIndex(offset + 1);\n+        idpTemplateListResponse.setLinks(createLinks(V1_API_PATH_COMPONENT + IDP_TEMPLATE_PATH_COMPONENT,\n+                limit, offset, templateInfoList.size(), filter));\n+        return idpTemplateListResponse;\n+    }\n+\n+    private IdentityProviderTemplate createIDPTemplateResponse(Template idpTemplate) throws IOException {\n+\n+        IdentityProviderTemplate idpTemplateResponse = new IdentityProviderTemplate();\n+        idpTemplateResponse.setId(idpTemplate.getTemplateId());\n+        idpTemplateResponse.setName(idpTemplate.getTemplateName());\n+        idpTemplateResponse.setDescription(idpTemplate.getDescription());\n+        idpTemplateResponse.setImage(idpTemplate.getImageUrl());\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_CATEGORY)) {\n+            if (idpTemplate.getPropertiesMap().get(PROP_CATEGORY) ==\n+                    IdentityProviderTemplateListItem.CategoryEnum.CUSTOM.toString()) {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.CUSTOM);\n+            } else {\n+                idpTemplateResponse.setCategory(IdentityProviderTemplate.CategoryEnum.DEFAULT);\n+            }\n+        }\n+        if (idpTemplate.getPropertiesMap().containsKey(PROP_DISPLAY_ORDER)) {\n+            idpTemplateResponse.setDisplayOrder(\n+                    Integer.valueOf(idpTemplate.getPropertiesMap().get(PROP_DISPLAY_ORDER)));\n+        }\n+        if (idpTemplate.getTemplateScript() != null) {\n+            ObjectMapper mapper = new ObjectMapper();\n+            IdentityProviderPOSTRequest idp = mapper.readValue(idpTemplate.getTemplateScript(),\n+                    IdentityProviderPOSTRequest.class);\n+            idpTemplateResponse.setIdp(idp);\n+        }\n+        return idpTemplateResponse;\n+    }\n+\n+    private Template generateIDPTemplate(IdentityProviderTemplate idpTemplate) throws JsonProcessingException {\n+\n+        Template identityProviderTemplate = new Template();\n+\n+        identityProviderTemplate.setTemplateName(idpTemplate.getName());\n+        identityProviderTemplate.setDescription(idpTemplate.getDescription());\n+        identityProviderTemplate.setImageUrl(idpTemplate.getImage());\n+        identityProviderTemplate.setTenantId(IdentityTenantUtil\n+                .getTenantId(ContextLoader.getTenantDomainFromContext()));\n+        Map<String, String> properties = new HashMap<>();\n+        if (idpTemplate.getCategory() != null) {\n+            properties.put(PROP_CATEGORY, idpTemplate.getCategory().toString());\n+        }\n+        if (idpTemplate.getDisplayOrder() != null) {\n+            properties.put(PROP_DISPLAY_ORDER, String.valueOf(idpTemplate.getDisplayOrder()));\n+        }\n+        identityProviderTemplate.setTemplateType(TemplateMgtConstants.TemplateType.IDP_TEMPLATE);\n+        identityProviderTemplate.setPropertiesMap(properties);\n+        identityProviderTemplate.setTemplateScript(createIDPTemplateScript(idpTemplate.getIdp()));\n+        return identityProviderTemplate;\n+    }\n+\n+    private APIError handleTemplateMgtException(TemplateManagementException e, Constants.ErrorMessage errorEnum,\n+                                                String data) {\n+\n+        ErrorResponse errorResponse = getErrorBuilder(errorEnum, data).build(log, e, errorEnum.getDescription());\n+\n+        Response.Status status;\n+\n+        if (e instanceof TemplateManagementClientException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.BAD_REQUEST;\n+        } else if (e instanceof TemplateManagementServerException) {\n+            if (e.getErrorCode() != null) {\n+                String errorCode = e.getErrorCode();\n+                errorCode = errorCode.contains(TEMPLATE_MGT_ERROR_CODE_DELIMITER) ?\n+                        errorCode : Constants.IDP_MANAGEMENT_PREFIX + errorCode;\n+                errorResponse.setCode(errorCode);\n+            }\n+            errorResponse.setDescription(e.getMessage());\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        } else {\n+            status = Response.Status.INTERNAL_SERVER_ERROR;\n+        }\n+\n+        return new APIError(status, errorResponse);\n+    }\n+\n+    private String createIDPTemplateScript(IdentityProviderPOSTRequest idpTemplate) throws JsonProcessingException {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.writeValueAsString(idpTemplate);\n+    }\n \n     private ConnectedApps createConnectedAppsResponse(String resourceId, ConnectedAppsResult connectedAppsResult) {\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "committedDate": "2020-04-10 10:55:54 +0530", "message": "Add support for filtering in application/idp templates"}, {"oid": "8ed107988f2e63530fef3b9859177b11901deb63", "committedDate": "2020-04-10 14:24:05 +0530", "message": "Add services attribute for IdP template listing"}, {"oid": "8f008d62ea44d737f9ce7b03fcc8512b3399a5b4", "committedDate": "2020-04-16 11:23:02 +0530", "message": "Introduce services attribute for IDP template filtering"}, {"oid": "29a591129dc0f5d35af1accbac0646a69c8f1150", "committedDate": "2020-04-21 18:01:56 +0530", "message": "Fix incorrect constant used in populateIDPListResponse"}, {"oid": "23174b7184e119ef9bc06fa736e93d64adc1b86d", "committedDate": "2020-04-29 17:51:04 +0530", "message": "Add PUT operation support for federated-authenticators and outbound-connectors paths in IDP REST API"}, {"oid": "48043e2761bb791060eef71ceaa75e99faff7a8a", "committedDate": "2020-05-05 09:11:07 +0530", "message": "Add patch add/remove support for IDP certificates"}, {"oid": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "committedDate": "2020-08-03 12:14:09 +0530", "message": "Fix review comments in PR"}, {"oid": "4298dc079cb0697bd6dd8d2b285b151c9f48fb77", "committedDate": "2020-10-13 09:19:05 +0530", "message": "[FIX] Wrong response when invalid input is provided for IDP metadata endpoint"}, {"oid": "8a3dcc205543e5fcad997b9d2ab3d2f2e116f7a5", "committedDate": "2020-10-14 13:36:50 +0530", "message": "Fix findbugs issues"}, {"oid": "2c3696c54006ec7b3b5415bf4a4f9365d5e5ac81", "committedDate": "2020-10-16 13:30:12 +0530", "message": "[Fix] Conflicts"}, {"oid": "01cbdd3cf931b3b7f9a211289b9cb99cc7c874a5", "committedDate": "2020-10-19 16:51:18 +0530", "message": "[FIX] Not cloning IDP cache object"}, {"oid": "cc0c0b0b3fef2862ba4f1b8fcef8d1296cb22335", "committedDate": "2020-10-19 21:41:29 +0530", "message": "Merge pull request #191 from mevan-karu/review_fix"}, {"oid": "fe85c408f7d4304d914aa85e313ad04994b0629c", "committedDate": "2020-10-20 07:33:46 +0530", "message": "Merge pull request #213 from somindatommy/fixing_9952"}, {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "committedDate": "2020-10-20 14:35:02 +0530", "message": "Validate input values when updating IDP claims config"}, {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d", "committedDate": "2020-10-20 15:36:06 +0530", "message": "[FIX] Formatting issue"}, {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "committedDate": "2020-10-20 20:51:21 +0530", "message": "Addressing comments"}, {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad", "committedDate": "2020-10-20 23:29:57 +0530", "message": "Refactoring validation logic"}, {"oid": "0d758b5bfff01a26c5caa8d68cf92ad084d86927", "committedDate": "2020-10-21 11:09:18 +0530", "message": "Refactoring validation logic and improving error codes"}, {"oid": "4598d7c6a224cfae18b15f298c210f06d411fbe6", "committedDate": "2020-12-07 13:34:15 +0530", "message": "Format error messages in exception flows."}, {"oid": "acaaa35775c5750383c229aab9f32418121d1e5f", "committedDate": "2020-12-07 22:34:48 +0530", "message": "Check for duplicate properties in IDP create request."}, {"oid": "ee586248913444df590fd66d0d02a749a38296e3", "committedDate": "2021-01-28 13:09:05 +0530", "message": "return templateId in IDP get, create, patch response"}, {"oid": "180de268c1077ddd98b1d578e92c2cb28286973d", "committedDate": "2021-01-28 13:09:05 +0530", "message": "set templateId as a first class attribute"}, {"oid": "0c4e4a1287e7270c07b16d978e6d302fd1c3f0f5", "committedDate": "2021-02-05 14:24:09 +0530", "message": "Fix idp certificate issue when adding more than one certificate"}, {"oid": "b90c7e74630005707e7432b927a56cd50b3111d3", "committedDate": "2021-06-25 20:00:20 +0530", "message": "Add improvement to return tags when authenticators are fetched."}, {"oid": "df8b215863dd218feb39b0c90897e7a3b3001dde", "committedDate": "2021-06-26 18:41:20 +0530", "message": "Add certificate format validation"}, {"oid": "21cf435357aca9e0247581d2f275dccc04e1c862", "committedDate": "2021-07-01 20:27:58 +0530", "message": "Improve error handling"}, {"oid": "0706bf7f11016903c9c965e5a4adaab7ff1f2a78", "committedDate": "2021-07-02 13:23:24 +0530", "message": "Merge branch 'master' into tags"}, {"oid": "46e6f8f4b64f5f2e443bba19a65b4af759ccf933", "committedDate": "2021-07-03 10:41:50 +0530", "message": "Merge branch 'master' into master"}, {"oid": "a06b67212e132001411ebf010181a76a988d606c", "committedDate": "2021-07-27 14:49:28 +0530", "message": "Add IDP issuer name in IDP REST API"}, {"oid": "3b9423420148150ab22f0f1c07466018831de2d2", "committedDate": "2021-07-27 20:10:49 +0530", "message": "Add patch update for IDP issuer name"}, {"oid": "001df64ae278a1e6a5282e984df163e981dff05d", "committedDate": "2021-08-24 22:56:35 +0530", "message": "fix issues in idp patch operation"}, {"oid": "ea605519540df1c806f13a8126aca4bb24335921", "committedDate": "2021-08-24 23:14:26 +0530", "message": "fix formatting"}, {"oid": "01fce73094eaadd461941bbe8e4da02c38f7e950", "committedDate": "2021-08-24 23:40:13 +0530", "message": "fix formatting"}, {"oid": "6bfe9b67bd63ebc5e4c6cf8b1bce66a0e8fa055a", "committedDate": "2021-08-25 12:16:46 +0530", "message": "Refactor code"}, {"oid": "399ea0ece590df4f3a2e759b98e0db39a138d88c", "committedDate": "2021-08-25 12:19:38 +0530", "message": "Refactor code"}, {"oid": "4b8716bf7c0736e2da6ce85cafd3720d52c5459c", "committedDate": "2021-08-25 12:53:39 +0530", "message": "Refactor code"}, {"oid": "caa578240a2909c210fd9a56d4fb009c68ada1a2", "committedDate": "2021-08-25 13:18:34 +0530", "message": "Refactor code"}, {"oid": "09f3229140aafd1be017f4b7fc893017b27b69cd", "committedDate": "2021-09-08 11:03:08 +0530", "message": "IDP patch ADD and REMOVE operations added for certificates and JWKS URI."}, {"oid": "a5b15b76c91da11938720d08279c6366de1999ff", "committedDate": "2021-09-30 13:48:48 +0530", "message": "Update error codes of IDP Management REST API"}, {"oid": "7f1d2116f43f18be8e3adfd9b2bf50812f950e0d", "committedDate": "2021-09-30 13:48:48 +0530", "message": "Update error codes of IDP Management REST API"}, {"oid": "a1ea3a1ca3f42cbabae0c96b06985e3fa0a756b9", "committedDate": "2021-10-01 13:00:29 +0530", "message": "Fix issues in idp patch non existing property"}, {"oid": "6b17264995093bc2d93df3fe33ed8c901d688c9e", "committedDate": "2021-10-04 10:20:13 +0530", "message": "Refactor error codes"}, {"oid": "91fc338dbde6fd37655ef66f81132c0b2529a9fe", "committedDate": "2021-10-04 14:01:25 +0530", "message": "Refactor error codes"}, {"oid": "0769d48de84df1c3c9f0da925fd06423c2bd3b3f", "committedDate": "2021-10-04 17:34:17 +0530", "message": "Refactor error codes"}, {"oid": "46118827e1dd2f4f148283a0fa8c694aa3483067", "committedDate": "2021-11-10 09:20:03 +0530", "message": "Validate enabling Proxy mode when federated IDP is already configured along with MFA for an application"}, {"oid": "b972be0ee36d7da9cf762360fce6c8cb7afaf1ec", "committedDate": "2021-12-22 08:00:38 +0530", "message": "Revert \"Validate enabling Proxy mode when federated IDP is already configured along with MFA for an application\""}, {"oid": "2a3a6d748af804cf3eaea18e97e6dadf980aabe2", "committedDate": "2022-01-11 16:55:10 +0530", "message": "Fixing logging server error codes for client errors issue"}, {"oid": "33231b3645c317e8cbbe7d2eaf7f6e7ef6e0f90a", "committedDate": "2022-01-12 11:22:06 +0530", "message": "Handeling scenarios when errorcode of exception is null"}, {"oid": "36b853516eca0fe639013987c2acd3f27dc5aa70", "committedDate": "2022-01-12 12:02:26 +0530", "message": "Revert exception changes"}, {"oid": "289b319d05f32acc031a80ced3f7fd1878a6493f", "committedDate": "2022-01-12 12:05:59 +0530", "message": "Revert exception changes"}, {"oid": "4ca91f2c1e0d418b25681fd2253c7925a940154c", "committedDate": "2022-01-18 10:46:11 +0530", "message": "Fixing default userstore in idpResponse"}, {"oid": "a7e97e0e1fb7ad81c8d6b491f1a8f2e4ed07c85f", "committedDate": "2022-01-20 14:11:40 +0530", "message": "Fix for the test failure in addIdp"}, {"oid": "b0d47895222389aff4b444bb8479246c616ed9d7", "committedDate": "2022-05-13 14:04:04 +0530", "message": "Address commits of merged PRs"}, {"oid": "73539e35f505fbb661c85c0c72af4218d3f80599", "committedDate": "2022-06-17 10:35:12 +0530", "message": "Fix UnknownFormatConversionException"}, {"oid": "2a1277ebbfdf5be717cec0c4dc3fc3039f78e44e", "committedDate": "2022-06-24 18:33:08 +0530", "message": "Resolve the issue in adding IDP Issuer Name using a PATCH request."}, {"oid": "5756231f95d54d6b060ce55ae7889bc10646c47b", "committedDate": "2022-09-09 14:48:44 +0530", "message": "throw exception if scopes are configured in both Scopes and Additional Query Params"}, {"oid": "9067ad415d4b19bc51c4758f44f2c107b651f562", "committedDate": "2022-09-20 16:23:58 +0530", "message": "change error type to bad request"}, {"oid": "d81babde2b5568a45327e1ad96a89b39fb52a683", "committedDate": "2022-09-28 17:54:18 +0530", "message": "change error code name"}, {"oid": "9d77f8e49d117b669f2f81813cc59caf7d379c6a", "committedDate": "2022-09-28 18:29:50 +0530", "message": "validate if scopes contain `openid`"}, {"oid": "4a8ff771ec778dc99adb02d6e09c24d24a676466", "committedDate": "2022-09-29 12:17:15 +0530", "message": "add Scopes and commonAuthQueryParams constants to IdentityApplicationConstants"}, {"oid": "1eec896dee89c07be297f6dfe31dff3f4f3f9824", "committedDate": "2022-09-29 17:30:46 +0530", "message": "fix suggestions"}, {"oid": "674fa8e5c99a0e75e17519972586d59a66b82fbe", "committedDate": "2022-09-29 18:31:15 +0530", "message": "fix lint error"}, {"oid": "d8a36306c4cf2825209efa9024e81a3dfb41b0a4", "committedDate": "2022-10-17 07:42:41 +0530", "message": "Introduce parameter to enable/disable associate local user when provisioing."}, {"oid": "f879eb79654130f9d097a0a0af6bd69b54c0c043", "committedDate": "2023-02-09 13:59:46 +0530", "message": "support attribute sync for OIDC_IDP (#420)"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}, {"oid": "d0b0824c751e1e01e07cede367c36517de33c385", "committedDate": "2023-04-02 22:55:38 +0530", "message": "Address review comments - Change Groups response as a list of idpgroup objects - return idp-group-id"}, {"oid": "25cc9050973616ff37dcfe9e13e8b20afcf9e8ab", "committedDate": "2023-04-04 14:48:15 +0530", "message": "Add export and import APIs for IDP"}, {"oid": "de8667cbeb493779c821a6572e29294c782f3d8a", "committedDate": "2023-04-06 16:36:24 +0530", "message": "Modify logic of getting media type from file type"}, {"oid": "390272a82e5e2c7786abdfbd05b0ce5e22fbb84b", "committedDate": "2023-04-06 17:13:18 +0530", "message": "Fix findbug issues"}, {"oid": "16564d7f53814e7bc7251d67ab5a9751c8c0f986", "committedDate": "2023-04-11 13:04:03 +0530", "message": "Modify secret masking logic"}, {"oid": "9eec8a4b9fd74d3390ff312a2cbcd2f2176b9b71", "committedDate": "2023-04-11 15:59:22 +0530", "message": "Fix importing existing idp issue"}, {"oid": "2806b4e077af35cb1f9dd6dbdd979b29b02748ac", "committedDate": "2023-04-12 10:33:20 +0530", "message": "Minor formatting changes"}, {"oid": "89481e5730363af1d56210c6f0741a388b8593d5", "committedDate": "2023-04-12 12:22:53 +0530", "message": "Change exportSecrets data type to boolean"}, {"oid": "6a0bd2617ad55773261f381c450238f2e33d4c20", "committedDate": "2023-04-13 09:41:59 +0530", "message": "Refactor api paths to a common format 'file'"}, {"oid": "7ea0e1d2f7d129791ce760adc732459fa229c147", "committedDate": "2023-04-17 17:59:27 +0530", "message": "Update framework version"}, {"oid": "b1c1326cfdc4915de2cde7f9cd0cf7f7929610d4", "committedDate": "2023-04-18 23:19:30 +0530", "message": "remove secrets from provisioning"}, {"oid": "ddd493deb313a31b410dd813ae84bcffef7ca8ad", "committedDate": "2023-05-08 06:58:30 +0530", "message": "Add api support to export and update resident idp"}, {"oid": "2271eff97b1c8445bb84f4b5acbc124b32622692", "committedDate": "2023-05-09 10:29:33 +0530", "message": "Remove secrets from idp properties"}, {"oid": "e115eafe3302290eb8374bf269bd6ecb1f5944c3", "committedDate": "2023-05-10 08:54:04 +0530", "message": "Remove transient fields from IDP yaml string"}, {"oid": "4105560dfead21112e0fb84ce5995ff5340d8be8", "committedDate": "2023-05-10 17:36:16 +0530", "message": "Add comments and minor changes"}, {"oid": "df23144fe750d81d7c01330d3e58587b7e4a52ac", "committedDate": "2023-05-12 09:32:55 +0530", "message": "Merge branch 'master' of https://github.com/wso2/identity-api-server into idp-groups-endpoint"}, {"oid": "1641b889221f10b1a13f907b15f3e188218ad88a", "committedDate": "2023-05-12 18:36:37 +0530", "message": "Update components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java"}, {"oid": "64ce5b1b9e92b612659e6fc745675f84f11ccf8e", "committedDate": "2023-05-12 19:00:23 +0530", "message": "Address review comments"}, {"oid": "be5e9ca66df8ff260ab9bd5463d7e7eafcbbd767", "committedDate": "2023-05-24 13:09:52 +0530", "message": "Add trusted token issuers path"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwNTE3NA==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r395605174", "body": "status should be 200 ok in update requests", "bodyText": "status should be 200 ok in update requests", "bodyHTML": "<p dir=\"auto\">status should be 200 ok in update requests</p>", "author": "emswbandara", "createdAt": "2020-03-20T12:31:49Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java", "diffHunk": "@@ -185,6 +216,14 @@ public Response updateFederatedAuthenticator(String identityProviderId, String f\n                 .build();\n     }\n \n+    @Override\n+    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n+            identityProviderTemplatePOSTRequest) {\n+\n+        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n+        return Response.noContent().build();", "originalCommit": "9c010b44fac3776bc9a15f289dce7c527487d9cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex ee2556624..25c1a7aa0 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -221,7 +221,7 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n             identityProviderTemplatePOSTRequest) {\n \n         idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n-        return Response.noContent().build();\n+        return Response.ok().build();\n     }\n \n     @Override\n", "next_change": {"commit": "8540919879a10c2f4b9585f09b966cb65507143d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex 25c1a7aa0..fd88b80c9 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -216,14 +185,6 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n                 .build();\n     }\n \n-    @Override\n-    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n-            identityProviderTemplatePOSTRequest) {\n-\n-        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n-        return Response.ok().build();\n-    }\n-\n     @Override\n     public Response updateJITConfig(String identityProviderId, JustInTimeProvisioning justInTimeProvisioning) {\n \n", "next_change": {"commit": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex fd88b80c9..25c1a7aa0 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -185,6 +216,14 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n                 .build();\n     }\n \n+    @Override\n+    public Response updateIDPTemplate(String templateId, IdentityProviderTemplate\n+            identityProviderTemplatePOSTRequest) {\n+\n+        idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n+        return Response.ok().build();\n+    }\n+\n     @Override\n     public Response updateJITConfig(String identityProviderId, JustInTimeProvisioning justInTimeProvisioning) {\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\nindex ee2556624..25c1a7aa0 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/impl/IdentityProvidersApiServiceImpl.java\n", "chunk": "@@ -221,7 +221,7 @@ public class IdentityProvidersApiServiceImpl implements IdentityProvidersApiServ\n             identityProviderTemplatePOSTRequest) {\n \n         idpManagementService.updateIDPTemplate(templateId, identityProviderTemplatePOSTRequest);\n-        return Response.noContent().build();\n+        return Response.ok().build();\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "committedDate": "2020-04-10 10:55:54 +0530", "message": "Add support for filtering in application/idp templates"}, {"oid": "23174b7184e119ef9bc06fa736e93d64adc1b86d", "committedDate": "2020-04-29 17:51:04 +0530", "message": "Add PUT operation support for federated-authenticators and outbound-connectors paths in IDP REST API"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}, {"oid": "d0b0824c751e1e01e07cede367c36517de33c385", "committedDate": "2023-04-02 22:55:38 +0530", "message": "Address review comments - Change Groups response as a list of idpgroup objects - return idp-group-id"}, {"oid": "25cc9050973616ff37dcfe9e13e8b20afcf9e8ab", "committedDate": "2023-04-04 14:48:15 +0530", "message": "Add export and import APIs for IDP"}, {"oid": "6a0bd2617ad55773261f381c450238f2e33d4c20", "committedDate": "2023-04-13 09:41:59 +0530", "message": "Refactor api paths to a common format 'file'"}, {"oid": "ddd493deb313a31b410dd813ae84bcffef7ca8ad", "committedDate": "2023-05-08 06:58:30 +0530", "message": "Add api support to export and update resident idp"}, {"oid": "df23144fe750d81d7c01330d3e58587b7e4a52ac", "committedDate": "2023-05-12 09:32:55 +0530", "message": "Merge branch 'master' of https://github.com/wso2/identity-api-server into idp-groups-endpoint"}]}, {"oid": "c93c4a546ba4bba18b228e5980ffb704fd40d70b", "url": "https://github.com/wso2/identity-api-server/commit/c93c4a546ba4bba18b228e5980ffb704fd40d70b", "message": "Add IDP template management API implementation", "committedDate": "2020-03-21T18:57:11Z", "type": "forcePushed"}, {"oid": "ab4346edaecc6f7aeb5498d1804ebdac3ba430d5", "url": "https://github.com/wso2/identity-api-server/commit/ab4346edaecc6f7aeb5498d1804ebdac3ba430d5", "message": "Add IDP template management API implementation", "committedDate": "2020-03-23T04:51:01Z", "type": "forcePushed"}, {"oid": "0dd0e863df402e1171eae5c34027ea4a976d95ca", "url": "https://github.com/wso2/identity-api-server/commit/0dd0e863df402e1171eae5c34027ea4a976d95ca", "message": "Add IDP template management API implementation", "committedDate": "2020-03-23T05:08:16Z", "type": "forcePushed"}, {"oid": "1904c3de02493b8e2bdfee8d1ae1002f85c3dc76", "url": "https://github.com/wso2/identity-api-server/commit/1904c3de02493b8e2bdfee8d1ae1002f85c3dc76", "message": "Add IDP template management API implementation", "committedDate": "2020-03-24T13:48:05Z", "type": "forcePushed"}, {"oid": "7c6eb010aa4802a2ca0f2d7bf8f8e5a24bd90303", "url": "https://github.com/wso2/identity-api-server/commit/7c6eb010aa4802a2ca0f2d7bf8f8e5a24bd90303", "message": "Add IDP template management API implementation", "committedDate": "2020-03-24T14:03:47Z", "type": "forcePushed"}, {"oid": "2a84cb9a54652cf0066b39951bc4ca0e6f16ea64", "url": "https://github.com/wso2/identity-api-server/commit/2a84cb9a54652cf0066b39951bc4ca0e6f16ea64", "message": "Add IDP template management API implementation", "committedDate": "2020-03-24T16:23:24Z", "type": "forcePushed"}, {"oid": "135504a02ef2b01fe125a36a66c01ff2fed632d1", "url": "https://github.com/wso2/identity-api-server/commit/135504a02ef2b01fe125a36a66c01ff2fed632d1", "message": "Add IDP template management API implementation", "committedDate": "2020-03-25T07:58:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTAxOQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r397929019", "body": "change the code generator to have 2020", "bodyText": "change the code generator to have 2020", "bodyHTML": "<p dir=\"auto\">change the code generator to have 2020</p>", "author": "thanujalk", "createdAt": "2020-03-25T15:07:18Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "135504a02ef2b01fe125a36a66c01ff2fed632d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1b57e32b32d5e4d4c1361283e29c98e7b02da41", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\nindex f30b1caed..91b5dd40a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n-* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\nindex f30b1caed..91b5dd40a 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n", "chunk": "@@ -1,5 +1,5 @@\n /*\n-* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n", "next_change": {"commit": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\nindex 91b5dd40a..9f60d7ddb 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n", "chunk": "@@ -1,18 +1,20 @@\n /*\n-* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-* Licensed under the Apache License, Version 2.0 (the \"License\");\n-* you may not use this file except in compliance with the License.\n-* You may obtain a copy of the License at\n-*\n-* http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing, software\n-* distributed under the License is distributed on an \"AS IS\" BASIS,\n-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-* See the License for the specific language governing permissions and\n-* limitations under the License.\n-*/\n+ * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).\n+ *\n+ * WSO2 LLC. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n \n package org.wso2.carbon.identity.api.server.idp.v1.model;\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "committedDate": "2020-08-03 12:14:09 +0530", "message": "Fix review comments in PR"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}]}, {"oid": "c1b57e32b32d5e4d4c1361283e29c98e7b02da41", "url": "https://github.com/wso2/identity-api-server/commit/c1b57e32b32d5e4d4c1361283e29c98e7b02da41", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T05:24:32Z", "type": "forcePushed"}, {"oid": "8540919879a10c2f4b9585f09b966cb65507143d", "url": "https://github.com/wso2/identity-api-server/commit/8540919879a10c2f4b9585f09b966cb65507143d", "message": "Add TemplateManager service", "committedDate": "2020-03-27T05:26:57Z", "type": "commit"}, {"oid": "0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "url": "https://github.com/wso2/identity-api-server/commit/0d89aaa0e3e0444d315df5a548ba2d2c13a39102", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T05:26:57Z", "type": "forcePushed"}, {"oid": "0b7e7e33c9c727094ea60b4b0e41166145e409d4", "url": "https://github.com/wso2/identity-api-server/commit/0b7e7e33c9c727094ea60b4b0e41166145e409d4", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T07:03:56Z", "type": "forcePushed"}, {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c", "url": "https://github.com/wso2/identity-api-server/commit/88fa5194c446519ca9e55e036bffa47996a7f78c", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T07:06:51Z", "type": "commit"}, {"oid": "88fa5194c446519ca9e55e036bffa47996a7f78c", "url": "https://github.com/wso2/identity-api-server/commit/88fa5194c446519ca9e55e036bffa47996a7f78c", "message": "Add IDP template management API implementation", "committedDate": "2020-03-27T07:06:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjY3Nw==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r432686677", "body": "Missing the doc comment. Check other places as well.", "bodyText": "Missing the doc comment. Check other places as well.", "bodyHTML": "<p dir=\"auto\">Missing the doc comment. Check other places as well.</p>", "author": "NipuniBhagya", "createdAt": "2020-05-29T19:19:34Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+\n+    private String value;\n+\n+    CategoryEnum(String v) {\n+        value = v;\n+    }\n+\n+    public String value() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.valueOf(value);\n+    }\n+\n+    public static CategoryEnum fromValue(String value) {\n+        for (CategoryEnum b : CategoryEnum.values()) {\n+            if (b.value.equals(value)) {\n+                return b;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Unexpected value '\" + value + \"'\");\n+    }\n+}\n+\n+    private CategoryEnum category;\n+    private Integer displayOrder;\n+    private IdentityProviderPOSTRequest idp;\n+\n+    /**\n+    **/\n+    public IdentityProviderTemplate id(String id) {\n+\n+        this.id = id;\n+        return this;\n+    }\n+    \n+    @ApiModelProperty(example = \"123e4567-e89b-12d3-a456-556642440000\", value = \"\")\n+    @JsonProperty(\"id\")\n+    @Valid\n+    public String getId() {\n+        return id;\n+    }\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    /**", "originalCommit": "88fa5194c446519ca9e55e036bffa47996a7f78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyMzkyNA==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464223924", "bodyText": "Fixed with #191", "author": "mevan-karu", "createdAt": "2020-08-03T06:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NjY3Nw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\nindex 91b5dd40a..158bbd5dc 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n", "chunk": "@@ -91,7 +94,11 @@ public enum CategoryEnum {\n     }\n \n     /**\n-    **/\n+     * Set IDP name in IDP template object.\n+     *\n+     * @param name IDP name.\n+     * @return IdentityProviderTemplate.\n+     */\n     public IdentityProviderTemplate name(String name) {\n \n         this.name = name;\n", "next_change": null}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "committedDate": "2020-08-03 12:14:09 +0530", "message": "Fix review comments in PR"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzc5Nw==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r432803797", "body": "Let's remove this unnecessary line.", "bodyText": "Let's remove this unnecessary line.", "bodyHTML": "<p dir=\"auto\">Let's remove this unnecessary line.</p>", "author": "NipuniBhagya", "createdAt": "2020-05-30T02:56:46Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+* Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+* Licensed under the Apache License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+*\n+* http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+\n+package org.wso2.carbon.identity.api.server.idp.v1.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import org.wso2.carbon.identity.api.server.idp.v1.model.IdentityProviderPOSTRequest;\n+import javax.validation.constraints.*;\n+\n+\n+import io.swagger.annotations.*;\n+import java.util.Objects;\n+import javax.validation.Valid;\n+import javax.xml.bind.annotation.*;\n+\n+public class IdentityProviderTemplate  {\n+  \n+    private String id;\n+    private String name;\n+    private String description;\n+    private String image;\n+\n+@XmlType(name=\"CategoryEnum\")\n+@XmlEnum(String.class)\n+public enum CategoryEnum {\n+\n+    @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n+\n+", "originalCommit": "88fa5194c446519ca9e55e036bffa47996a7f78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNDAwOQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464224009", "bodyText": "Fixed with #191", "author": "mevan-karu", "createdAt": "2020-08-03T06:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzc5Nw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\nindex 91b5dd40a..158bbd5dc 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/gen/java/org/wso2/carbon/identity/api/server/idp/v1/model/IdentityProviderTemplate.java\n", "chunk": "@@ -42,7 +42,6 @@ public enum CategoryEnum {\n \n     @XmlEnumValue(\"DEFAULT\") DEFAULT(String.valueOf(\"DEFAULT\")), @XmlEnumValue(\"CUSTOM\") CUSTOM(String.valueOf(\"CUSTOM\"));\n \n-\n     private String value;\n \n     CategoryEnum(String v) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "committedDate": "2020-08-03 12:14:09 +0530", "message": "Fix review comments in PR"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMTU0NQ==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r462801545", "body": "This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.", "bodyText": "This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.", "bodyHTML": "<p dir=\"auto\">This type of comment is not the normal convention. Ideally each method needs to have the comment explaining it is a utility and what it is for.</p>", "author": "ruwanta", "createdAt": "2020-07-30T07:26:29Z", "path": "components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java", "diffHunk": "@@ -808,7 +826,234 @@ public ConnectedApps getConnectedApps(String resourceId, Integer limit, Integer\n         }\n     }\n \n-    // Private utility Methods.\n+    /**\n+     * Retrieve the list of IDP templates.\n+     *\n+     * @param limit      Items per page.\n+     * @param offset     Offset.\n+     * @param filter     Filter string. E.g. filter=\"name\" sw \"google\" and \"category\" eq \"DEFAULT\"\n+     * @return  List of identity templates.\n+     */\n+    public IdentityProviderTemplateListResponse getIDPTemplates(Integer limit, Integer offset, String filter) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            List<Template> templateList = templateManager.listTemplates(\n+                    TemplateMgtConstants.TemplateType.IDP_TEMPLATE.toString(), limit, offset);\n+            return createIDPTemplateListResponse(templateList, offset, limit, filter);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_LISTING_IDP_TEMPLATES, null);\n+        }\n+    }\n+\n+    /**\n+     * Get an identity provider template identified by resource ID.\n+     *\n+     * @param templateId IDP template Id\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public IdentityProviderTemplate getIDPTemplate(String templateId) {\n+\n+        try {\n+            Template idpTemplate = IdentityProviderServiceHolder.getTemplateManager().getTemplateById(templateId);\n+            return createIDPTemplateResponse(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE,\n+                    templateId);\n+        } catch (IOException e) {\n+            throw handleException(Response.Status.INTERNAL_SERVER_ERROR,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_RETRIEVING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Update IDP template.\n+     *\n+     * @param identityProviderTemplate Updated IDP template\n+     */\n+    public void updateIDPTemplate(String templateId, IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            IdentityProviderServiceHolder.getTemplateManager().updateTemplateById(templateId, idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE,\n+                    identityProviderTemplate.getId());\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_UPDATING_IDP_TEMPLATE, templateId);\n+        }\n+    }\n+\n+    /**\n+     * Create a new IDP template.\n+     *\n+     * @param identityProviderTemplate identityProviderTemplatePOSTRequest\n+     * @return IdentityProviderTemplateResponse\n+     */\n+    public String createIDPTemplate(IdentityProviderTemplate identityProviderTemplate) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            Template idpTemplate = generateIDPTemplate(identityProviderTemplate);\n+            return templateManager.addTemplate(idpTemplate);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        } catch (JsonProcessingException e) {\n+            throw handleException(Response.Status.BAD_REQUEST,\n+                    Constants.ErrorMessage.ERROR_CODE_ERROR_ADDING_IDP_TEMPLATE, null);\n+        }\n+    }\n+\n+    /**\n+     * Delete a IDP template identified by resource Id.\n+     *\n+     * @param templateId Id of the IDP template\n+     */\n+    public void deleteIDPTemplate(String templateId) {\n+\n+        try {\n+            TemplateManager templateManager = IdentityProviderServiceHolder.getTemplateManager();\n+            templateManager.deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateMgtException(e, Constants.ErrorMessage.ERROR_CODE_ERROR_DELETING_IDP_TEMPLATE,\n+                    templateId);\n+        }\n+    }\n+\n+//  Private utility Methods.", "originalCommit": "88fa5194c446519ca9e55e036bffa47996a7f78c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNDAzNA==", "url": "https://github.com/wso2/identity-api-server/pull/120#discussion_r464224034", "bodyText": "Fixed with #191", "author": "mevan-karu", "createdAt": "2020-08-03T06:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwMTU0NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex 55a6e3122..e8f878bfa 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -921,8 +1139,15 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-//  Private utility Methods.\n-\n+    /**\n+     * Create the IDP template list response.\n+     *\n+     * @param templateInfoList  List of IDP templates.\n+     * @param offset            Offset.\n+     * @param limit             Limit.\n+     * @param filter            IDP template filter.\n+     * @return {@link IdentityProviderTemplateListResponse}\n+     */\n     private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n             List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n \n", "next_change": {"commit": "4298dc079cb0697bd6dd8d2b285b151c9f48fb77", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex e8f878bfa..ca76ddddf 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -1139,15 +1159,8 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-    /**\n-     * Create the IDP template list response.\n-     *\n-     * @param templateInfoList  List of IDP templates.\n-     * @param offset            Offset.\n-     * @param limit             Limit.\n-     * @param filter            IDP template filter.\n-     * @return {@link IdentityProviderTemplateListResponse}\n-     */\n+//  Private utility Methods.\n+\n     private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n             List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n \n", "next_change": {"commit": "cc0c0b0b3fef2862ba4f1b8fcef8d1296cb22335", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\nindex ca76ddddf..001840d38 100644\n--- a/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n+++ b/components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java\n", "chunk": "@@ -1159,8 +1165,15 @@ public class ServerIdpManagementService {\n         }\n     }\n \n-//  Private utility Methods.\n-\n+    /**\n+     * Create the IDP template list response.\n+     *\n+     * @param templateInfoList  List of IDP templates.\n+     * @param offset            Offset.\n+     * @param limit             Limit.\n+     * @param filter            IDP template filter.\n+     * @return {@link IdentityProviderTemplateListResponse}\n+     */\n     private IdentityProviderTemplateListResponse createIDPTemplateListResponse(\n             List<Template> templateInfoList, Integer offset, Integer limit, String filter) {\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "9305b4b888fb6fa63c6bf7cf9f86d6c40fa40928", "message": "Merge commit", "committedDate": null}, {"oid": "d0445cc0936d13bb17875278dd67a71ecc0121fe", "committedDate": "2020-04-10 10:55:54 +0530", "message": "Add support for filtering in application/idp templates"}, {"oid": "8ed107988f2e63530fef3b9859177b11901deb63", "committedDate": "2020-04-10 14:24:05 +0530", "message": "Add services attribute for IdP template listing"}, {"oid": "8f008d62ea44d737f9ce7b03fcc8512b3399a5b4", "committedDate": "2020-04-16 11:23:02 +0530", "message": "Introduce services attribute for IDP template filtering"}, {"oid": "29a591129dc0f5d35af1accbac0646a69c8f1150", "committedDate": "2020-04-21 18:01:56 +0530", "message": "Fix incorrect constant used in populateIDPListResponse"}, {"oid": "23174b7184e119ef9bc06fa736e93d64adc1b86d", "committedDate": "2020-04-29 17:51:04 +0530", "message": "Add PUT operation support for federated-authenticators and outbound-connectors paths in IDP REST API"}, {"oid": "48043e2761bb791060eef71ceaa75e99faff7a8a", "committedDate": "2020-05-05 09:11:07 +0530", "message": "Add patch add/remove support for IDP certificates"}, {"oid": "17d14faf9cb30e45dc372347f701ecf2667dcb44", "committedDate": "2020-08-03 12:14:09 +0530", "message": "Fix review comments in PR"}, {"oid": "4298dc079cb0697bd6dd8d2b285b151c9f48fb77", "committedDate": "2020-10-13 09:19:05 +0530", "message": "[FIX] Wrong response when invalid input is provided for IDP metadata endpoint"}, {"oid": "8a3dcc205543e5fcad997b9d2ab3d2f2e116f7a5", "committedDate": "2020-10-14 13:36:50 +0530", "message": "Fix findbugs issues"}, {"oid": "2c3696c54006ec7b3b5415bf4a4f9365d5e5ac81", "committedDate": "2020-10-16 13:30:12 +0530", "message": "[Fix] Conflicts"}, {"oid": "01cbdd3cf931b3b7f9a211289b9cb99cc7c874a5", "committedDate": "2020-10-19 16:51:18 +0530", "message": "[FIX] Not cloning IDP cache object"}, {"oid": "cc0c0b0b3fef2862ba4f1b8fcef8d1296cb22335", "committedDate": "2020-10-19 21:41:29 +0530", "message": "Merge pull request #191 from mevan-karu/review_fix"}, {"oid": "fe85c408f7d4304d914aa85e313ad04994b0629c", "committedDate": "2020-10-20 07:33:46 +0530", "message": "Merge pull request #213 from somindatommy/fixing_9952"}, {"oid": "cf89cbfe61738f04e0bf4d2ab0a71b117dde4c19", "committedDate": "2020-10-20 14:35:02 +0530", "message": "Validate input values when updating IDP claims config"}, {"oid": "90ef844c9f65a7ca50719a01ca71e8c70a3d319d", "committedDate": "2020-10-20 15:36:06 +0530", "message": "[FIX] Formatting issue"}, {"oid": "ee3ee198465d08f2d8a69a1ddcc4f5a61588dbc7", "committedDate": "2020-10-20 20:51:21 +0530", "message": "Addressing comments"}, {"oid": "f44b32e0efda15349b0bbf3d014763ee0b8297ad", "committedDate": "2020-10-20 23:29:57 +0530", "message": "Refactoring validation logic"}, {"oid": "0d758b5bfff01a26c5caa8d68cf92ad084d86927", "committedDate": "2020-10-21 11:09:18 +0530", "message": "Refactoring validation logic and improving error codes"}, {"oid": "4598d7c6a224cfae18b15f298c210f06d411fbe6", "committedDate": "2020-12-07 13:34:15 +0530", "message": "Format error messages in exception flows."}, {"oid": "acaaa35775c5750383c229aab9f32418121d1e5f", "committedDate": "2020-12-07 22:34:48 +0530", "message": "Check for duplicate properties in IDP create request."}, {"oid": "ee586248913444df590fd66d0d02a749a38296e3", "committedDate": "2021-01-28 13:09:05 +0530", "message": "return templateId in IDP get, create, patch response"}, {"oid": "180de268c1077ddd98b1d578e92c2cb28286973d", "committedDate": "2021-01-28 13:09:05 +0530", "message": "set templateId as a first class attribute"}, {"oid": "0c4e4a1287e7270c07b16d978e6d302fd1c3f0f5", "committedDate": "2021-02-05 14:24:09 +0530", "message": "Fix idp certificate issue when adding more than one certificate"}, {"oid": "b90c7e74630005707e7432b927a56cd50b3111d3", "committedDate": "2021-06-25 20:00:20 +0530", "message": "Add improvement to return tags when authenticators are fetched."}, {"oid": "df8b215863dd218feb39b0c90897e7a3b3001dde", "committedDate": "2021-06-26 18:41:20 +0530", "message": "Add certificate format validation"}, {"oid": "21cf435357aca9e0247581d2f275dccc04e1c862", "committedDate": "2021-07-01 20:27:58 +0530", "message": "Improve error handling"}, {"oid": "0706bf7f11016903c9c965e5a4adaab7ff1f2a78", "committedDate": "2021-07-02 13:23:24 +0530", "message": "Merge branch 'master' into tags"}, {"oid": "46e6f8f4b64f5f2e443bba19a65b4af759ccf933", "committedDate": "2021-07-03 10:41:50 +0530", "message": "Merge branch 'master' into master"}, {"oid": "a06b67212e132001411ebf010181a76a988d606c", "committedDate": "2021-07-27 14:49:28 +0530", "message": "Add IDP issuer name in IDP REST API"}, {"oid": "3b9423420148150ab22f0f1c07466018831de2d2", "committedDate": "2021-07-27 20:10:49 +0530", "message": "Add patch update for IDP issuer name"}, {"oid": "001df64ae278a1e6a5282e984df163e981dff05d", "committedDate": "2021-08-24 22:56:35 +0530", "message": "fix issues in idp patch operation"}, {"oid": "ea605519540df1c806f13a8126aca4bb24335921", "committedDate": "2021-08-24 23:14:26 +0530", "message": "fix formatting"}, {"oid": "01fce73094eaadd461941bbe8e4da02c38f7e950", "committedDate": "2021-08-24 23:40:13 +0530", "message": "fix formatting"}, {"oid": "6bfe9b67bd63ebc5e4c6cf8b1bce66a0e8fa055a", "committedDate": "2021-08-25 12:16:46 +0530", "message": "Refactor code"}, {"oid": "399ea0ece590df4f3a2e759b98e0db39a138d88c", "committedDate": "2021-08-25 12:19:38 +0530", "message": "Refactor code"}, {"oid": "4b8716bf7c0736e2da6ce85cafd3720d52c5459c", "committedDate": "2021-08-25 12:53:39 +0530", "message": "Refactor code"}, {"oid": "caa578240a2909c210fd9a56d4fb009c68ada1a2", "committedDate": "2021-08-25 13:18:34 +0530", "message": "Refactor code"}, {"oid": "09f3229140aafd1be017f4b7fc893017b27b69cd", "committedDate": "2021-09-08 11:03:08 +0530", "message": "IDP patch ADD and REMOVE operations added for certificates and JWKS URI."}, {"oid": "a5b15b76c91da11938720d08279c6366de1999ff", "committedDate": "2021-09-30 13:48:48 +0530", "message": "Update error codes of IDP Management REST API"}, {"oid": "7f1d2116f43f18be8e3adfd9b2bf50812f950e0d", "committedDate": "2021-09-30 13:48:48 +0530", "message": "Update error codes of IDP Management REST API"}, {"oid": "a1ea3a1ca3f42cbabae0c96b06985e3fa0a756b9", "committedDate": "2021-10-01 13:00:29 +0530", "message": "Fix issues in idp patch non existing property"}, {"oid": "6b17264995093bc2d93df3fe33ed8c901d688c9e", "committedDate": "2021-10-04 10:20:13 +0530", "message": "Refactor error codes"}, {"oid": "91fc338dbde6fd37655ef66f81132c0b2529a9fe", "committedDate": "2021-10-04 14:01:25 +0530", "message": "Refactor error codes"}, {"oid": "0769d48de84df1c3c9f0da925fd06423c2bd3b3f", "committedDate": "2021-10-04 17:34:17 +0530", "message": "Refactor error codes"}, {"oid": "46118827e1dd2f4f148283a0fa8c694aa3483067", "committedDate": "2021-11-10 09:20:03 +0530", "message": "Validate enabling Proxy mode when federated IDP is already configured along with MFA for an application"}, {"oid": "b972be0ee36d7da9cf762360fce6c8cb7afaf1ec", "committedDate": "2021-12-22 08:00:38 +0530", "message": "Revert \"Validate enabling Proxy mode when federated IDP is already configured along with MFA for an application\""}, {"oid": "2a3a6d748af804cf3eaea18e97e6dadf980aabe2", "committedDate": "2022-01-11 16:55:10 +0530", "message": "Fixing logging server error codes for client errors issue"}, {"oid": "33231b3645c317e8cbbe7d2eaf7f6e7ef6e0f90a", "committedDate": "2022-01-12 11:22:06 +0530", "message": "Handeling scenarios when errorcode of exception is null"}, {"oid": "36b853516eca0fe639013987c2acd3f27dc5aa70", "committedDate": "2022-01-12 12:02:26 +0530", "message": "Revert exception changes"}, {"oid": "289b319d05f32acc031a80ced3f7fd1878a6493f", "committedDate": "2022-01-12 12:05:59 +0530", "message": "Revert exception changes"}, {"oid": "4ca91f2c1e0d418b25681fd2253c7925a940154c", "committedDate": "2022-01-18 10:46:11 +0530", "message": "Fixing default userstore in idpResponse"}, {"oid": "a7e97e0e1fb7ad81c8d6b491f1a8f2e4ed07c85f", "committedDate": "2022-01-20 14:11:40 +0530", "message": "Fix for the test failure in addIdp"}, {"oid": "b0d47895222389aff4b444bb8479246c616ed9d7", "committedDate": "2022-05-13 14:04:04 +0530", "message": "Address commits of merged PRs"}, {"oid": "73539e35f505fbb661c85c0c72af4218d3f80599", "committedDate": "2022-06-17 10:35:12 +0530", "message": "Fix UnknownFormatConversionException"}, {"oid": "2a1277ebbfdf5be717cec0c4dc3fc3039f78e44e", "committedDate": "2022-06-24 18:33:08 +0530", "message": "Resolve the issue in adding IDP Issuer Name using a PATCH request."}, {"oid": "5756231f95d54d6b060ce55ae7889bc10646c47b", "committedDate": "2022-09-09 14:48:44 +0530", "message": "throw exception if scopes are configured in both Scopes and Additional Query Params"}, {"oid": "9067ad415d4b19bc51c4758f44f2c107b651f562", "committedDate": "2022-09-20 16:23:58 +0530", "message": "change error type to bad request"}, {"oid": "d81babde2b5568a45327e1ad96a89b39fb52a683", "committedDate": "2022-09-28 17:54:18 +0530", "message": "change error code name"}, {"oid": "9d77f8e49d117b669f2f81813cc59caf7d379c6a", "committedDate": "2022-09-28 18:29:50 +0530", "message": "validate if scopes contain `openid`"}, {"oid": "4a8ff771ec778dc99adb02d6e09c24d24a676466", "committedDate": "2022-09-29 12:17:15 +0530", "message": "add Scopes and commonAuthQueryParams constants to IdentityApplicationConstants"}, {"oid": "1eec896dee89c07be297f6dfe31dff3f4f3f9824", "committedDate": "2022-09-29 17:30:46 +0530", "message": "fix suggestions"}, {"oid": "674fa8e5c99a0e75e17519972586d59a66b82fbe", "committedDate": "2022-09-29 18:31:15 +0530", "message": "fix lint error"}, {"oid": "d8a36306c4cf2825209efa9024e81a3dfb41b0a4", "committedDate": "2022-10-17 07:42:41 +0530", "message": "Introduce parameter to enable/disable associate local user when provisioing."}, {"oid": "f879eb79654130f9d097a0a0af6bd69b54c0c043", "committedDate": "2023-02-09 13:59:46 +0530", "message": "support attribute sync for OIDC_IDP (#420)"}, {"oid": "4b5a4f3bc3e7c8f94de7519d1512c71979f4da14", "committedDate": "2023-03-29 12:23:00 +0530", "message": "Add groups endpoint to IdP management API"}, {"oid": "d0b0824c751e1e01e07cede367c36517de33c385", "committedDate": "2023-04-02 22:55:38 +0530", "message": "Address review comments - Change Groups response as a list of idpgroup objects - return idp-group-id"}, {"oid": "25cc9050973616ff37dcfe9e13e8b20afcf9e8ab", "committedDate": "2023-04-04 14:48:15 +0530", "message": "Add export and import APIs for IDP"}, {"oid": "de8667cbeb493779c821a6572e29294c782f3d8a", "committedDate": "2023-04-06 16:36:24 +0530", "message": "Modify logic of getting media type from file type"}, {"oid": "390272a82e5e2c7786abdfbd05b0ce5e22fbb84b", "committedDate": "2023-04-06 17:13:18 +0530", "message": "Fix findbug issues"}, {"oid": "16564d7f53814e7bc7251d67ab5a9751c8c0f986", "committedDate": "2023-04-11 13:04:03 +0530", "message": "Modify secret masking logic"}, {"oid": "9eec8a4b9fd74d3390ff312a2cbcd2f2176b9b71", "committedDate": "2023-04-11 15:59:22 +0530", "message": "Fix importing existing idp issue"}, {"oid": "2806b4e077af35cb1f9dd6dbdd979b29b02748ac", "committedDate": "2023-04-12 10:33:20 +0530", "message": "Minor formatting changes"}, {"oid": "89481e5730363af1d56210c6f0741a388b8593d5", "committedDate": "2023-04-12 12:22:53 +0530", "message": "Change exportSecrets data type to boolean"}, {"oid": "6a0bd2617ad55773261f381c450238f2e33d4c20", "committedDate": "2023-04-13 09:41:59 +0530", "message": "Refactor api paths to a common format 'file'"}, {"oid": "7ea0e1d2f7d129791ce760adc732459fa229c147", "committedDate": "2023-04-17 17:59:27 +0530", "message": "Update framework version"}, {"oid": "b1c1326cfdc4915de2cde7f9cd0cf7f7929610d4", "committedDate": "2023-04-18 23:19:30 +0530", "message": "remove secrets from provisioning"}, {"oid": "ddd493deb313a31b410dd813ae84bcffef7ca8ad", "committedDate": "2023-05-08 06:58:30 +0530", "message": "Add api support to export and update resident idp"}, {"oid": "2271eff97b1c8445bb84f4b5acbc124b32622692", "committedDate": "2023-05-09 10:29:33 +0530", "message": "Remove secrets from idp properties"}, {"oid": "e115eafe3302290eb8374bf269bd6ecb1f5944c3", "committedDate": "2023-05-10 08:54:04 +0530", "message": "Remove transient fields from IDP yaml string"}, {"oid": "4105560dfead21112e0fb84ce5995ff5340d8be8", "committedDate": "2023-05-10 17:36:16 +0530", "message": "Add comments and minor changes"}, {"oid": "df23144fe750d81d7c01330d3e58587b7e4a52ac", "committedDate": "2023-05-12 09:32:55 +0530", "message": "Merge branch 'master' of https://github.com/wso2/identity-api-server into idp-groups-endpoint"}, {"oid": "1641b889221f10b1a13f907b15f3e188218ad88a", "committedDate": "2023-05-12 18:36:37 +0530", "message": "Update components/org.wso2.carbon.identity.api.server.idp/org.wso2.carbon.identity.api.server.idp.v1/src/main/java/org/wso2/carbon/identity/api/server/idp/v1/core/ServerIdpManagementService.java"}, {"oid": "64ce5b1b9e92b612659e6fc745675f84f11ccf8e", "committedDate": "2023-05-12 19:00:23 +0530", "message": "Address review comments"}, {"oid": "be5e9ca66df8ff260ab9bd5463d7e7eafcbbd767", "committedDate": "2023-05-24 13:09:52 +0530", "message": "Add trusted token issuers path"}]}]}