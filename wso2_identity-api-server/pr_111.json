{"pr_number": 111, "pr_title": "Improve Userstore API getAllUserstore list endpoint with addtional query param called 'attributes'", "pr_createdAt": "2020-03-02T11:10:38Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/111", "merge_commit": "cf5d997d8452af269f00c8b585d68cdc8214787a", "timeline": [{"oid": "18eb823b23f443ba5854195de18405b515116492", "url": "https://github.com/wso2/identity-api-server/commit/18eb823b23f443ba5854195de18405b515116492", "message": "fix https://github.com/wso2/product-is/issues/7811", "committedDate": "2020-03-02T10:48:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0ODkyNA==", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r386348924", "body": "let's use requiredAttributes for consistency. We are following that in IDP, APP etc.", "bodyText": "let's use requiredAttributes for consistency. We are following that in IDP, APP etc.", "bodyHTML": "<p dir=\"auto\">let's use requiredAttributes for consistency. We are following that in IDP, APP etc.</p>", "author": "emswbandara", "createdAt": "2020-03-02T11:52:05Z", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java", "diffHunk": "@@ -130,9 +134,9 @@ public Response getAvailableUserStoreTypes() {\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n     })\n-    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort) {\n+    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"attributes\") String attributes) {", "originalCommit": "18eb823b23f443ba5854195de18405b515116492", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTIwNw==", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r387439207", "bodyText": "addressed", "author": "sarubi", "createdAt": "2020-03-04T04:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0ODkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ebb4377e7950245c78b637d8eb4bf917902b46fe", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\nindex b7f489806..dec3d48cc 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n", "chunk": "@@ -129,7 +129,7 @@ public class UserstoresApi  {\n     }, tags={ \"User Store\", })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Successful response.\", response = UserStoreListResponse.class, responseContainer = \"List\"),\n-        @ApiResponse(code = 401, message = \"Unauthorized.\", response = Error.class),\n+        @ApiResponse(code = 401, message = \"Unauthorized.\", response = Void.class),\n         @ApiResponse(code = 404, message = \"The specified resource is not found.\", response = Error.class),\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n", "next_change": {"commit": "2a125ba95b66c540f5c69014ba9923fd515dc56d", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\nindex dec3d48cc..82a3d4a8b 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n", "chunk": "@@ -134,9 +134,9 @@ public class UserstoresApi  {\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n     })\n-    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"attributes\") String attributes) {\n+    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"requiredAttributes\") String requiredAttributes) {\n \n-        return delegate.getSecondaryUserStores(limit,  offset,  filter,  sort,  attributes );\n+        return delegate.getSecondaryUserStores(limit,  offset,  filter,  sort,  requiredAttributes );\n     }\n \n     @Valid\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cf5d997d8452af269f00c8b585d68cdc8214787a", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\nindex b7f489806..82a3d4a8b 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n", "chunk": "@@ -129,14 +129,14 @@ public class UserstoresApi  {\n     }, tags={ \"User Store\", })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"Successful response.\", response = UserStoreListResponse.class, responseContainer = \"List\"),\n-        @ApiResponse(code = 401, message = \"Unauthorized.\", response = Error.class),\n+        @ApiResponse(code = 401, message = \"Unauthorized.\", response = Void.class),\n         @ApiResponse(code = 404, message = \"The specified resource is not found.\", response = Error.class),\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n     })\n-    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"attributes\") String attributes) {\n+    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"requiredAttributes\") String requiredAttributes) {\n \n-        return delegate.getSecondaryUserStores(limit,  offset,  filter,  sort,  attributes );\n+        return delegate.getSecondaryUserStores(limit,  offset,  filter,  sort,  requiredAttributes );\n     }\n \n     @Valid\n", "next_change": {"commit": "f143a7f058c2e823075cb0264d37712a3b6068e7", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\nindex 82a3d4a8b..f1efa61d7 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n", "chunk": "@@ -134,7 +157,7 @@ public class UserstoresApi  {\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class),\n         @ApiResponse(code = 501, message = \"Not Implemented.\", response = Error.class)\n     })\n-    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrival of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"requiredAttributes\") String requiredAttributes) {\n+    public Response getSecondaryUserStores(    @Valid@ApiParam(value = \"maximum number of records to return\")  @QueryParam(\"limit\") Integer limit,     @Valid@ApiParam(value = \"number of records to skip for pagination\")  @QueryParam(\"offset\") Integer offset,     @Valid@ApiParam(value = \"Condition to filter the retrieval of records.\")  @QueryParam(\"filter\") String filter,     @Valid@ApiParam(value = \"Define the order of how the retrieved records should be sorted.\")  @QueryParam(\"sort\") String sort,     @Valid@ApiParam(value = \"Define set of user store attributes (as comma separated) to be returned.\")  @QueryParam(\"requiredAttributes\") String requiredAttributes) {\n \n         return delegate.getSecondaryUserStores(limit,  offset,  filter,  sort,  requiredAttributes );\n     }\n", "next_change": {"commit": "a7520cb9f5000589c8a250dafd3ec048b268dc71", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\nindex f1efa61d7..72f37271a 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n", "chunk": "@@ -162,6 +164,29 @@ public class UserstoresApi  {\n         return delegate.getSecondaryUserStores(limit,  offset,  filter,  sort,  requiredAttributes );\n     }\n \n+    @Valid\n+    @GET\n+    @Path(\"/meta/types/{type-id}/attributes\")\n+    \n+    @Produces({ \"application/json\" })\n+    @ApiOperation(value = \"Retrieve the meta attributes of a user store of a given user store type.\", notes = \"This API provides the capability to retrieve the attribute mappings of a given user store type   <b>Permission required:</b>  *_/permission/admin \", response = UserStoreAttributeMapping.class, authorizations = {\n+        @Authorization(value = \"BasicAuth\"),\n+        @Authorization(value = \"OAuth2\", scopes = {\n+            \n+        })\n+    }, tags={ \"Meta\", })\n+    @ApiResponses(value = { \n+        @ApiResponse(code = 200, message = \"Successful Response.\", response = UserStoreAttributeMapping.class),\n+        @ApiResponse(code = 400, message = \"Invalid input request.\", response = Error.class),\n+        @ApiResponse(code = 401, message = \"Unauthorized.\", response = Void.class),\n+        @ApiResponse(code = 404, message = \"The specified resource is not found.\", response = Error.class),\n+        @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class)\n+    })\n+    public Response getUserStoreAttributeMappings(@ApiParam(value = \"Id of the user store type\",required=true) @PathParam(\"type-id\") String typeId,     @Valid@ApiParam(value = \"Whether to exlcude the identity claim mappings from userstore attributes.\")  @QueryParam(\"excludeIdentityClaimMappings\") Boolean excludeIdentityClaimMappings) {\n+\n+        return delegate.getUserStoreAttributeMappings(typeId,  excludeIdentityClaimMappings );\n+    }\n+\n     @Valid\n     @GET\n     @Path(\"/{userstore-domain-id}\")\n", "next_change": {"commit": "327c54a4916d21f67d319ca648d5b06542e70021", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\nindex 72f37271a..d6ecdbe87 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/gen/java/org/wso2/carbon/identity/api/server/userstore/v1/UserstoresApi.java\n", "chunk": "@@ -182,9 +182,9 @@ public class UserstoresApi  {\n         @ApiResponse(code = 404, message = \"The specified resource is not found.\", response = Error.class),\n         @ApiResponse(code = 500, message = \"Internal Server Error.\", response = Error.class)\n     })\n-    public Response getUserStoreAttributeMappings(@ApiParam(value = \"Id of the user store type\",required=true) @PathParam(\"type-id\") String typeId,     @Valid@ApiParam(value = \"Whether to exlcude the identity claim mappings from userstore attributes.\")  @QueryParam(\"excludeIdentityClaimMappings\") Boolean excludeIdentityClaimMappings) {\n+    public Response getUserStoreAttributeMappings(@ApiParam(value = \"Id of the user store type\",required=true) @PathParam(\"type-id\") String typeId,     @Valid@ApiParam(value = \"Whether to include the identity claim mappings with userstore attributes.\")  @QueryParam(\"includeIdentityClaimMappings\") Boolean includeIdentityClaimMappings) {\n \n-        return delegate.getUserStoreAttributeMappings(typeId,  excludeIdentityClaimMappings );\n+        return delegate.getUserStoreAttributeMappings(typeId,  includeIdentityClaimMappings );\n     }\n \n     @Valid\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "cf5d997d8452af269f00c8b585d68cdc8214787a", "message": "Merge commit", "committedDate": null}, {"oid": "44fc7abacee19ccf15ae00247454e48e800997fb", "committedDate": "2020-03-22 22:21:53 +0530", "message": "Modify user store meta endpoint to give metadata of particular userstore type"}, {"oid": "1858735d552af847784bd640d2346186216cbb6f", "committedDate": "2020-03-25 11:51:11 +0530", "message": "Change swagger definition in /userstores/meta/types/{type-id}"}, {"oid": "41499de87bafd2457b378c5d1b5c5879133349ae", "committedDate": "2020-05-15 10:07:55 +0530", "message": "Add new API to retrieve Primary Userstore configs"}, {"oid": "f143a7f058c2e823075cb0264d37712a3b6068e7", "committedDate": "2020-12-17 14:34:59 +0530", "message": "Add gen file changes"}, {"oid": "84a324a0de0f7f29ec7f50f18f9d9c757a5f90df", "committedDate": "2021-08-13 16:35:11 +0530", "message": "Support claim attribute mappings in bulk"}, {"oid": "be28229f28da4dbcec6cda2519e021faba6599f4", "committedDate": "2021-08-16 12:03:54 +0530", "message": "Api to get userstore attribute mappings"}, {"oid": "c731518fd0ea44d2d06c025d044e611144704e10", "committedDate": "2021-08-16 15:29:19 +0530", "message": "Refactored code"}, {"oid": "7f0bfe5584c9357004b425a29d2dd92c67460788", "committedDate": "2021-08-16 17:45:43 +0530", "message": "Refactored code"}, {"oid": "bb69a555adeb7a208d59cf3d2cbf6a8ef742e683", "committedDate": "2021-08-16 17:59:47 +0530", "message": "Merge pull request #301 from Thisara-Welmilla/update-claim-mappings"}, {"oid": "7e8f3773019badb87462d1900f4cebb18b85feed", "committedDate": "2021-09-06 12:17:35 +0530", "message": "Address review comments in old PRs"}, {"oid": "a7520cb9f5000589c8a250dafd3ec048b268dc71", "committedDate": "2021-09-21 22:50:31 +0530", "message": "Improve userstore attributes api to exclude identity claim mappings"}, {"oid": "327c54a4916d21f67d319ca648d5b06542e70021", "committedDate": "2021-09-23 22:09:34 +0530", "message": "Improve userstore attributes API"}, {"oid": "ab767b659804e7f2d2e066639860b5ce2ecea917", "committedDate": "2021-09-27 20:23:24 +0530", "message": "Improve code in userstore apis"}, {"oid": "36fec3852511b6a714639a1cac4ee771749511b6", "committedDate": "2021-10-07 18:35:09 +0530", "message": "Improve userstore attribute mappings api"}]}, {"oid": "71dff54bc0b0f570e7d001da574bd1eb85353e39", "url": "https://github.com/wso2/identity-api-server/commit/71dff54bc0b0f570e7d001da574bd1eb85353e39", "message": "rename attributes param to requiredAttributes", "committedDate": "2020-03-03T09:23:09Z", "type": "commit"}, {"oid": "ebb4377e7950245c78b637d8eb4bf917902b46fe", "url": "https://github.com/wso2/identity-api-server/commit/ebb4377e7950245c78b637d8eb4bf917902b46fe", "message": "fix https://github.com/wso2/product-is/issues/7823 issue for user store api", "committedDate": "2020-03-03T12:09:44Z", "type": "commit"}, {"oid": "2a125ba95b66c540f5c69014ba9923fd515dc56d", "url": "https://github.com/wso2/identity-api-server/commit/2a125ba95b66c540f5c69014ba9923fd515dc56d", "message": "regenerate userstore REST API with requiredAttributes.", "committedDate": "2020-03-04T04:06:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTIwNg==", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r387445206", "body": "Shall we move this separator to a constant file?", "bodyText": "Shall we move this separator to a constant file?", "bodyHTML": "<p dir=\"auto\">Shall we move this separator to a constant file?</p>", "author": "Kanapriya", "createdAt": "2020-03-04T04:38:08Z", "path": "components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java", "diffHunk": "@@ -447,11 +450,37 @@ private UserStoreDTO createUserStoreDTO(UserStoreReq userStoreReq) {\n             userStoreList.setSelf(ContextLoader.buildURIForBody(String.format(V1_API_PATH_COMPONENT +\n                             UserStoreConstants.USER_STORE_PATH_COMPONENT + \"/%s\",\n                     base64URLEncodeId(jsonObject.getDomainId()))).toString());\n+\n+            if (StringUtils.isNotBlank(requiredAttributes)) {\n+                String[] requiredAttributesArray = requiredAttributes.split(\",\");", "originalCommit": "2a125ba95b66c540f5c69014ba9923fd515dc56d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMjk1Mw==", "url": "https://github.com/wso2/identity-api-server/pull/111#discussion_r388732953", "bodyText": "fixed", "author": "sarubi", "createdAt": "2020-03-06T06:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NTIwNg=="}], "type": "inlineReview", "revised_code": {"commit": "0833a3947a4e050cbe305c98b05edadb0f41f206", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\nindex 3a23d2b6e..190a62abf 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n", "chunk": "@@ -452,7 +453,7 @@ public class ServerUserStoreService {\n                     base64URLEncodeId(jsonObject.getDomainId()))).toString());\n \n             if (StringUtils.isNotBlank(requiredAttributes)) {\n-                String[] requiredAttributesArray = requiredAttributes.split(\",\");\n+                String[] requiredAttributesArray = requiredAttributes.split(REGEX_COMMA);\n                 addUserstoreProperties(jsonObject, userStoreList, Arrays.asList(requiredAttributesArray));\n             }\n             userStoreListResponseToAdd.add(userStoreList);\n", "next_change": {"commit": "8813a6513fe8b1a52a1560eb39de5678446cfa93", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\nindex 190a62abf..3a23d2b6e 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n", "chunk": "@@ -453,7 +452,7 @@ public class ServerUserStoreService {\n                     base64URLEncodeId(jsonObject.getDomainId()))).toString());\n \n             if (StringUtils.isNotBlank(requiredAttributes)) {\n-                String[] requiredAttributesArray = requiredAttributes.split(REGEX_COMMA);\n+                String[] requiredAttributesArray = requiredAttributes.split(\",\");\n                 addUserstoreProperties(jsonObject, userStoreList, Arrays.asList(requiredAttributesArray));\n             }\n             userStoreListResponseToAdd.add(userStoreList);\n", "next_change": {"commit": "1a70562399f8cf696ada1963bb26a2abe7cec0aa", "changed_code": [{"header": "diff --git a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\nindex 3a23d2b6e..190a62abf 100644\n--- a/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n+++ b/components/org.wso2.carbon.identity.api.server.userstore/org.wso2.carbon.identity.api.server.userstore.v1/src/main/java/org/wso2/carbon/identity/api/server/userstore/v1/core/ServerUserStoreService.java\n", "chunk": "@@ -452,7 +453,7 @@ public class ServerUserStoreService {\n                     base64URLEncodeId(jsonObject.getDomainId()))).toString());\n \n             if (StringUtils.isNotBlank(requiredAttributes)) {\n-                String[] requiredAttributesArray = requiredAttributes.split(\",\");\n+                String[] requiredAttributesArray = requiredAttributes.split(REGEX_COMMA);\n                 addUserstoreProperties(jsonObject, userStoreList, Arrays.asList(requiredAttributesArray));\n             }\n             userStoreListResponseToAdd.add(userStoreList);\n", "next_change": null}]}}]}}]}}, {"oid": "0833a3947a4e050cbe305c98b05edadb0f41f206", "url": "https://github.com/wso2/identity-api-server/commit/0833a3947a4e050cbe305c98b05edadb0f41f206", "message": "Refactored", "committedDate": "2020-03-06T06:30:36Z", "type": "commit"}, {"oid": "8813a6513fe8b1a52a1560eb39de5678446cfa93", "url": "https://github.com/wso2/identity-api-server/commit/8813a6513fe8b1a52a1560eb39de5678446cfa93", "message": "fix merge conflicts", "committedDate": "2020-03-20T14:22:35Z", "type": "commit"}, {"oid": "1a70562399f8cf696ada1963bb26a2abe7cec0aa", "url": "https://github.com/wso2/identity-api-server/commit/1a70562399f8cf696ada1963bb26a2abe7cec0aa", "message": "Merge remote-tracking branch 'my-public/user-store-api-attribute-param' into user-store-api-attribute-param", "committedDate": "2020-03-20T14:25:43Z", "type": "commit"}]}