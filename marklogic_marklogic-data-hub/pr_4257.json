{"pr_number": 4257, "pr_title": "DHFPROD-5211: Migrate entities <5.3 to 5.3 for hub central", "pr_author": "rahulvudutala", "pr_createdAt": "2020-07-22T00:38:52Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4257", "merge_commit": "cabdbe6ed56f418365407683da8545832afea647", "timeline": [{"oid": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "url": "https://github.com/marklogic/marklogic-data-hub/commit/8886a9fdc108f3ce19b177dc27b107404c7807c3", "message": "DHFPROD-5211: Migrate entities datahub<5.3 to 5.3 for hub central", "committedDate": "2020-07-22T04:08:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDIxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458730217", "body": "Let's not add a method to this interface. We get almost no value out of the interfaces, except that we imply that the interface will stay constant for someone that wants to use the DHF Java API directly - but we provide no support for that other than publishing the javadocs. Just add the method to EntityManagerImpl and call that directly in the migration class. ", "bodyText": "Let's not add a method to this interface. We get almost no value out of the interfaces, except that we imply that the interface will stay constant for someone that wants to use the DHF Java API directly - but we provide no support for that other than publishing the javadocs. Just add the method to EntityManagerImpl and call that directly in the migration class.", "bodyHTML": "<p dir=\"auto\">Let's not add a method to this interface. We get almost no value out of the interfaces, except that we imply that the interface will stay constant for someone that wants to use the DHF Java API directly - but we provide no support for that other than publishing the javadocs. Just add the method to EntityManagerImpl and call that directly in the migration class.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:42:06Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java", "diffHunk": "@@ -75,6 +81,8 @@\n \n     List<HubEntity> getEntities();\n \n+    List<JsonNode> getEntitiesJsonNode();", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\nindex 0214af56b..0147027d8 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\n", "chunk": "@@ -81,8 +75,6 @@ public interface EntityManager {\n \n     List<HubEntity> getEntities();\n \n-    List<JsonNode> getEntitiesJsonNode();\n-\n     List<HubEntity> getEntities(Boolean extendSubEntities);\n \n     @Deprecated(since = \"DHF 5.3.0; use ModelsService instead\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\nindex 0214af56b..0147027d8 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\n", "chunk": "@@ -81,8 +75,6 @@ public interface EntityManager {\n \n     List<HubEntity> getEntities();\n \n-    List<JsonNode> getEntitiesJsonNode();\n-\n     List<HubEntity> getEntities(Boolean extendSubEntities);\n \n     @Deprecated(since = \"DHF 5.3.0; use ModelsService instead\")\n", "next_change": {"commit": "33a948ba3159288c055c3e7af08ef19dcc508cc6", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\nindex 0147027d8..e04b69b59 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/EntityManager.java\n", "chunk": "@@ -77,7 +68,7 @@ public interface EntityManager {\n \n     List<HubEntity> getEntities(Boolean extendSubEntities);\n \n-    @Deprecated(since = \"DHF 5.3.0; use ModelsService instead\")\n+    @Deprecated // since DHF 5.3.0; use ModelsService instead\n     HubEntity saveEntity(HubEntity entity, Boolean rename) throws IOException;\n \n     void deleteEntity(String entity) throws IOException;\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "7100522405e0a00e3d09ccf1e69817c094f63e0c", "committedDate": "2020-08-11 11:22:53 -0700", "message": "DHFPROD-5712: Removing hubGenerateExplorerOptions task"}, {"oid": "814c648427f8bb8e12ceea1793e882ceaa58700d", "committedDate": "2021-02-03 09:18:44 -0800", "message": "DHFPROD-6536: Update Copyright in datahub repository from 2020 to 2021"}, {"oid": "33a948ba3159288c055c3e7af08ef19dcc508cc6", "committedDate": "2021-02-04 19:07:22 -0800", "message": "DHFPROD-6646: Reverting DHF to Java 8"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDQxOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458730418", "body": "Just make this EntityManagerImpl so you can access the method in it. ", "bodyText": "Just make this EntityManagerImpl so you can access the method in it.", "bodyHTML": "<p dir=\"auto\">Just make this EntityManagerImpl so you can access the method in it.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:42:29Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -17,11 +14,15 @@ import java.io.IOException;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n \n public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n     private HubConfig hubConfig;\n-    private EntityManager entityManager;\n+    private EntityManagerImpl entityManager;\n     private FlowMigrator flowMigrator;\n     private ObjectMapper mapper = new ObjectMapper();\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -1,27 +1,27 @@\n package com.marklogic.hub.hubcentral.migration;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.ObjectWriter;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.marklogic.client.ext.helper.LoggingObject;\n-import com.marklogic.hub.EntityManager;\n import com.marklogic.hub.HubConfig;\n import com.marklogic.hub.HubProject;\n-import com.marklogic.hub.entity.DefinitionType;\n-import com.marklogic.hub.entity.HubEntity;\n import com.marklogic.hub.impl.EntityManagerImpl;\n \n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n-import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n \n public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n     private HubConfig hubConfig;\n-    private EntityManager entityManager;\n+    private EntityManagerImpl entityManager;\n     private FlowMigrator flowMigrator;\n     private ObjectMapper mapper = new ObjectMapper();\n \n", "next_change": {"commit": "898490009104878dd3b6320cdab7f40153d8ce0d", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nsimilarity index 72%\nrename from marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nrename to marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nindex 332bb41ea..a373261a2 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\n", "chunk": "@@ -7,53 +7,59 @@ import com.marklogic.client.ext.helper.LoggingObject;\n import com.marklogic.hub.HubConfig;\n import com.marklogic.hub.HubProject;\n import com.marklogic.hub.impl.EntityManagerImpl;\n+import org.apache.commons.io.FileUtils;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import java.nio.file.Path;\n+import java.util.*;\n import java.util.stream.Stream;\n \n-public class HubCentralMigrator extends LoggingObject {\n+public class HubCentralConverter extends LoggingObject {\n+\n     private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n     private HubConfig hubConfig;\n-    private EntityManagerImpl entityManager;\n-    private FlowMigrator flowMigrator;\n+    private FlowConverter flowConverter;\n     private ObjectMapper mapper = new ObjectMapper();\n \n-    public HubCentralMigrator(HubConfig hubConfig) {\n+    public HubCentralConverter(HubConfig hubConfig) {\n         this.hubConfig = hubConfig;\n-        this.entityManager = new EntityManagerImpl(hubConfig);\n-        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+        this.flowConverter = new FlowConverter(this.hubConfig);\n     }\n \n     /**\n-     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     * Convert the entity model, flow and mapping files in a user's local project.\n+     * Does not make any changes to what's stored in MarkLogic.\n      */\n-    public void migrateUserArtifacts() {\n-        flowMigrator.migrateFlows();\n-        migrateEntityModels();\n+    public void convertUserArtifacts() {\n+        flowConverter.convertFlows();\n+        convertEntityModels();\n     }\n \n     /**\n-     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     * Convert the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n      */\n-    protected void migrateEntityModels() {\n+    protected void convertEntityModels() {\n         HubProject hubProject = hubConfig.getHubProject();\n         final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n         if (!entityModelsDir.exists()) {\n-            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            logger.warn(\"No entities directory exists, so no entity models will be converted\");\n             return;\n         }\n \n-        logger.warn(\"Beginning migration of entity models in entities directory\");\n+        logger.warn(\"Beginning conversion of entity models in entities directory\");\n+\n+        Path convertedEntitiesPath = hubProject.getProjectDir().resolve(\"converted-entities\");\n+        try {\n+            convertedEntitiesPath.toFile().mkdirs();\n+            FileUtils.copyDirectory(entityModelsDir, convertedEntitiesPath.toFile());\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Couldn't convert entity models as backing up models failed : \" + e.getMessage(), e);\n+        }\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n-        boolean atLeastOneEntityModelWasMigrated = false;\n+        boolean atLeastOneEntityModelWasConverted = false;\n         File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n \n         for (File entityModelDef : entityModelDefs) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDg4MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458730880", "body": "Just call this directly in migrateUserArtifacts, the extra method adds a level of indirection without any benefit. ", "bodyText": "Just call this directly in migrateUserArtifacts, the extra method adds a level of indirection without any benefit.", "bodyHTML": "<p dir=\"auto\">Just call this directly in migrateUserArtifacts, the extra method adds a level of indirection without any benefit.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:43:28Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -35,15 +36,8 @@ public class HubCentralMigrator extends LoggingObject {\n      * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n      */\n     public void migrateUserArtifacts() {\n-        migrateFlows();\n-        migrateEntityModels();\n-    }\n-\n-    /**\n-     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n-     */\n-    protected void migrateFlows() {\n         flowMigrator.migrateFlows();\n+        migrateEntityModels();\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -35,15 +35,8 @@ public class HubCentralMigrator extends LoggingObject {\n      * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n      */\n     public void migrateUserArtifacts() {\n-        migrateFlows();\n-        migrateEntityModels();\n-    }\n-\n-    /**\n-     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n-     */\n-    protected void migrateFlows() {\n         flowMigrator.migrateFlows();\n+        migrateEntityModels();\n     }\n \n     /**\n", "next_change": {"commit": "898490009104878dd3b6320cdab7f40153d8ce0d", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nsimilarity index 72%\nrename from marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nrename to marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nindex 332bb41ea..a373261a2 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\n", "chunk": "@@ -7,53 +7,59 @@ import com.marklogic.client.ext.helper.LoggingObject;\n import com.marklogic.hub.HubConfig;\n import com.marklogic.hub.HubProject;\n import com.marklogic.hub.impl.EntityManagerImpl;\n+import org.apache.commons.io.FileUtils;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n+import java.nio.file.Path;\n+import java.util.*;\n import java.util.stream.Stream;\n \n-public class HubCentralMigrator extends LoggingObject {\n+public class HubCentralConverter extends LoggingObject {\n+\n     private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n     private HubConfig hubConfig;\n-    private EntityManagerImpl entityManager;\n-    private FlowMigrator flowMigrator;\n+    private FlowConverter flowConverter;\n     private ObjectMapper mapper = new ObjectMapper();\n \n-    public HubCentralMigrator(HubConfig hubConfig) {\n+    public HubCentralConverter(HubConfig hubConfig) {\n         this.hubConfig = hubConfig;\n-        this.entityManager = new EntityManagerImpl(hubConfig);\n-        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+        this.flowConverter = new FlowConverter(this.hubConfig);\n     }\n \n     /**\n-     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     * Convert the entity model, flow and mapping files in a user's local project.\n+     * Does not make any changes to what's stored in MarkLogic.\n      */\n-    public void migrateUserArtifacts() {\n-        flowMigrator.migrateFlows();\n-        migrateEntityModels();\n+    public void convertUserArtifacts() {\n+        flowConverter.convertFlows();\n+        convertEntityModels();\n     }\n \n     /**\n-     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     * Convert the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n      */\n-    protected void migrateEntityModels() {\n+    protected void convertEntityModels() {\n         HubProject hubProject = hubConfig.getHubProject();\n         final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n         if (!entityModelsDir.exists()) {\n-            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            logger.warn(\"No entities directory exists, so no entity models will be converted\");\n             return;\n         }\n \n-        logger.warn(\"Beginning migration of entity models in entities directory\");\n+        logger.warn(\"Beginning conversion of entity models in entities directory\");\n+\n+        Path convertedEntitiesPath = hubProject.getProjectDir().resolve(\"converted-entities\");\n+        try {\n+            convertedEntitiesPath.toFile().mkdirs();\n+            FileUtils.copyDirectory(entityModelsDir, convertedEntitiesPath.toFile());\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Couldn't convert entity models as backing up models failed : \" + e.getMessage(), e);\n+        }\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n-        boolean atLeastOneEntityModelWasMigrated = false;\n+        boolean atLeastOneEntityModelWasConverted = false;\n         File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n \n         for (File entityModelDef : entityModelDefs) {\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMTQ3MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458731471", "body": "We can't assume that anything is valid about the entity models in a user's project. So verify that info exists first, then title exists. If neither exists, then log a warning that it couldn't be found and thus the entity model could not be migrated, and move on to the next entity. ", "bodyText": "We can't assume that anything is valid about the entity models in a user's project. So verify that info exists first, then title exists. If neither exists, then log a warning that it couldn't be found and thus the entity model could not be migrated, and move on to the next entity.", "bodyHTML": "<p dir=\"auto\">We can't assume that anything is valid about the entity models in a user's project. So verify that info exists first, then title exists. If neither exists, then log a warning that it couldn't be found and thus the entity model could not be migrated, and move on to the next entity.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:44:40Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -62,34 +56,45 @@ public class HubCentralMigrator extends LoggingObject {\n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n             ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n-                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n                     writer.writeValue(entityModelFile, entityModelNode);\n                     logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n                     logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n                 }\n", "next_change": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -90,13 +99,12 @@ public class HubCentralMigrator extends LoggingObject {\n                 });\n                 entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n                     atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -61,63 +54,124 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n-\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMTcxMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458731712", "body": "Same thing here - check to make sure things exist first, and if not, log a warning and move on. ", "bodyText": "Same thing here - check to make sure things exist first, and if not, log a warning and move on.", "bodyHTML": "<p dir=\"auto\">Same thing here - check to make sure things exist first, and if not, log a warning and move on.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:45:06Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -62,34 +56,45 @@ public class HubCentralMigrator extends LoggingObject {\n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n             ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n-                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n                     writer.writeValue(entityModelFile, entityModelNode);\n                     logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n                     logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n                 }\n", "next_change": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -90,13 +99,12 @@ public class HubCentralMigrator extends LoggingObject {\n                 });\n                 entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n                     atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -61,63 +54,124 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n-\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMzQxNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458733415", "body": "Need to support pathRangeIndex as well. ", "bodyText": "Need to support pathRangeIndex as well.", "bodyHTML": "<p dir=\"auto\">Need to support pathRangeIndex as well.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:48:23Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -62,34 +56,45 @@ public class HubCentralMigrator extends LoggingObject {\n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n             ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n-                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n                     writer.writeValue(entityModelFile, entityModelNode);\n                     logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n                     logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n                 }\n", "next_change": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -90,13 +99,12 @@ public class HubCentralMigrator extends LoggingObject {\n                 });\n                 entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n                     atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -61,63 +54,124 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n-\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNDMwNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458734305", "body": "I believe you need a \"has\" check on \"$ref\" first - I just did a quick check, and an NPE is thrown on asText() if \"$ref\" doesn't exist. ", "bodyText": "I believe you need a \"has\" check on \"$ref\" first - I just did a quick check, and an NPE is thrown on asText() if \"$ref\" doesn't exist.", "bodyHTML": "<p dir=\"auto\">I believe you need a \"has\" check on \"$ref\" first - I just did a quick check, and an NPE is thrown on asText() if \"$ref\" doesn't exist.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:50:12Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                elementRangeIndex.removeAll(rangeIndex);\n+                rangeIndex.addAll(elementRangeIndex);\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if(rangeIndex.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    }\n+\n+    private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n+        // check for simple structured type property or simple relationship property\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -98,26 +103,61 @@ public class HubCentralMigrator extends LoggingObject {\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n     protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": {"commit": "1cd1fecc6edd1793201189105f49c449728fb515", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..3ef7fcebc 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -157,7 +157,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -61,63 +54,124 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n-\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNDYzMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458734632", "body": "Same thing here - be very pessimistic about things not existing. Also check for pathRangeIndex. ", "bodyText": "Same thing here - be very pessimistic about things not existing. Also check for pathRangeIndex.", "bodyHTML": "<p dir=\"auto\">Same thing here - be very pessimistic about things not existing. Also check for pathRangeIndex.</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:50:50Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                elementRangeIndex.removeAll(rangeIndex);\n+                rangeIndex.addAll(elementRangeIndex);\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if(rangeIndex.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -98,26 +103,61 @@ public class HubCentralMigrator extends LoggingObject {\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n     protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": {"commit": "1cd1fecc6edd1793201189105f49c449728fb515", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..3ef7fcebc 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -157,7 +157,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -61,63 +54,124 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n-\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNTUzNg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458735536", "body": "For the warning, let's do:\r\n\r\n```\r\nPlease examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays now have \"facetable\":true in their property definition.\r\n```", "bodyText": "For the warning, let's do:\nPlease examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays now have \"facetable\":true in their property definition.", "bodyHTML": "<p dir=\"auto\">For the warning, let's do:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays now have &quot;facetable&quot;:true in their property definition.\"><pre><code>Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays now have \"facetable\":true in their property definition.\n</code></pre></div>", "author": "rjrudin", "createdAt": "2020-07-22T11:52:38Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.EntityManager;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.entity.DefinitionType;\n+import com.marklogic.hub.entity.HubEntity;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private HubConfig hubConfig;\n+    private EntityManager entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateFlows() {\n+        flowMigrator.migrateFlows();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+            if(entityModelRequiresMigration(entityModelNode)) {\n+                atLeastOneEntityModelWasMigrated = true;\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                elementRangeIndex.removeAll(rangeIndex);\n+                rangeIndex.addAll(elementRangeIndex);\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if(rangeIndex.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..96d637818 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -98,26 +103,61 @@ public class HubCentralMigrator extends LoggingObject {\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n     protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": {"commit": "1cd1fecc6edd1793201189105f49c449728fb515", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..3ef7fcebc 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -157,7 +157,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 4f512e228..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -61,63 +54,124 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getEntitiesJsonNode()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-            if(entityModelRequiresMigration(entityModelNode)) {\n-                atLeastOneEntityModelWasMigrated = true;\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n-\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n-                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n \n                 List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n                 List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n-                elementRangeIndex.removeAll(rangeIndex);\n-                rangeIndex.addAll(elementRangeIndex);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n \n                 entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n-                    if(rangeIndex.contains(propertyName)) {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n                         ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n-                        if(!isStructuredTypeProperty(entityPropertyNode)) {\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n                             entityPropertyNode.put(\"facetable\", true);\n                         }\n                     }\n                 });\n-                entityTypeNode.remove(Arrays.asList(\"elementRangeIndex\", \"rangeIndex\"));\n+                entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + EntityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n+                    atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n         if (atLeastOneEntityModelWasMigrated) {\n             logger.warn(\"Finished migrating entity models.\");\n-            logger.warn(\"Please examine the migrated entities and check the entity type properties defined as element range indexes and path range indexes are having facetable set to true\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n             logger.warn(\"No entity models required migration, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        String firstLevelEntityTypeName= entityModelNode.get(\"info\").get(\"title\").asText();\n-        entityModelNode= (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n-        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null;\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n         // check for simple structured type property or simple relationship property\n-        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\").asText() != null) {\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n             return true;\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if(entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczNTgyOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r458735828", "body": "You can just call getAllEntities, right? No need for a new method? ", "bodyText": "You can just call getAllEntities, right? No need for a new method?", "bodyHTML": "<p dir=\"auto\">You can just call getAllEntities, right? No need for a new method?</p>", "author": "rjrudin", "createdAt": "2020-07-22T11:53:15Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java", "diffHunk": "@@ -491,6 +490,10 @@ protected void addSubProperties(HubEntity entity, List<HubEntity> entityDefiniti\n         return getEntities(Boolean.FALSE);\n     }\n \n+    public List<JsonNode> getEntitiesJsonNode() {", "originalCommit": "8886a9fdc108f3ce19b177dc27b107404c7807c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex d040b5bcd..5def1220e 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -490,10 +491,6 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n         return getEntities(Boolean.FALSE);\n     }\n \n-    public List<JsonNode> getEntitiesJsonNode() {\n-        return getAllEntities();\n-    }\n-\n     @Override\n     public List<HubEntity> getEntities(Boolean extendSubEntities) {\n         List<HubEntity> entities = new ArrayList<>();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex d040b5bcd..c40d61ea5 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -490,10 +491,6 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n         return getEntities(Boolean.FALSE);\n     }\n \n-    public List<JsonNode> getEntitiesJsonNode() {\n-        return getAllEntities();\n-    }\n-\n     @Override\n     public List<HubEntity> getEntities(Boolean extendSubEntities) {\n         List<HubEntity> entities = new ArrayList<>();\n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "cd2fa8610d7bae66b3cffe06094f0f005892162b", "committedDate": "2020-08-06 05:30:41 -0700", "message": "DHFPROD-5626: Fixing path expressions for entity models"}, {"oid": "a3e08cf33d3dbf0c2535e376c8e43a43440455b4", "committedDate": "2020-08-10 08:53:56 -0700", "message": "DHFPROD-5692: hubDeployAsDeveloper now generates indexes and PII files"}, {"oid": "58f7e8b59220938d3362c33170e1a1ec9d045eb4", "committedDate": "2020-08-10 08:58:54 -0700", "message": "DHFPROD-5132: Filter out external references in mapping"}, {"oid": "7100522405e0a00e3d09ccf1e69817c094f63e0c", "committedDate": "2020-08-11 11:22:53 -0700", "message": "DHFPROD-5712: Removing hubGenerateExplorerOptions task"}, {"oid": "4d60b2ec830d84ffb9d420ab8566c7f9851d771d", "committedDate": "2020-09-11 14:12:31 -0700", "message": "DHFPROD-5691: Fix outstanding issues found by coverity static scan"}, {"oid": "b2c34a6941a4ff9b93e72c3cdd15498d8ee37476", "committedDate": "2021-01-14 21:37:43 -0800", "message": "DHFPROD-6474: Generating and Deploying search options during datahub deployment"}, {"oid": "814c648427f8bb8e12ceea1793e882ceaa58700d", "committedDate": "2021-02-03 09:18:44 -0800", "message": "DHFPROD-6536: Update Copyright in datahub repository from 2020 to 2021"}, {"oid": "33a948ba3159288c055c3e7af08ef19dcc508cc6", "committedDate": "2021-02-04 19:07:22 -0800", "message": "DHFPROD-6646: Reverting DHF to Java 8"}, {"oid": "48006847893e3687f4ee34ccc1a064888e15076b", "committedDate": "2021-08-30 10:37:38 -0700", "message": "DHFPROD-7719: Using a \"module override\" approach to show entity props"}, {"oid": "7a912faf7e6cb119c3b538e929cdd1da14f8df43", "committedDate": "2022-06-13 16:22:47 -0700", "message": "DHFPROD-8962: Stabilize test performance"}, {"oid": "701a77ac990321712fb8464fc1182415df76261a", "committedDate": "2022-08-02 06:10:39 -0700", "message": "DHFPROD-8109: Ordering protected path files by name."}, {"oid": "543b3ea0d86971ef74aa8edce4b277e47c925e0e", "committedDate": "2022-12-20 09:43:59 -0800", "message": "DHFPROD-9697: Surface invalid model messages in mlLoadModules"}, {"oid": "5dbe2952873f04cd85ac1b072d701af346ecca52", "committedDate": "2023-01-23 12:00:47 -0800", "message": "DHFPROD-9814: Performance items"}, {"oid": "7c0b25e7cc9027622948534fd3162ba80bf367c9", "committedDate": "2023-02-14 14:24:42 -0800", "message": "DHFPROD-9493: Address coverity report items"}, {"oid": "e134e0ded271fea42ec64156c307b0b6e69f2702", "committedDate": "2023-04-04 11:58:44 -0700", "message": "DHFPROD-9754: Update core tests to work with mjs files"}, {"oid": "9b1debf4ef4fa63e249992911592d57398c2677c", "committedDate": "2023-06-01 17:24:56 -0700", "message": "DHFPROD-10258: Ingestion performance changes with XQuery MLCP transform"}]}, {"oid": "7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7d91a658f5ffc85cbe6bb15aafbc75c8e7d21dae", "message": "Code review changes", "committedDate": "2020-07-23T01:32:39Z", "type": "forcePushed"}, {"oid": "69c5c9f80029ddb398df73d380d46d449196833c", "url": "https://github.com/marklogic/marklogic-data-hub/commit/69c5c9f80029ddb398df73d380d46d449196833c", "message": "DHFPROD-5211: Migrate entities datahub<5.3 to 5.3 for hub central", "committedDate": "2020-07-23T01:36:56Z", "type": "forcePushed"}, {"oid": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59", "url": "https://github.com/marklogic/marklogic-data-hub/commit/06140aad6463887bcb8bf48d5f1edd7cf0aa9c59", "message": "DHFPROD-5211: Migrate entities datahub<5.3 to 5.3 for hub central", "committedDate": "2020-07-23T01:44:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzc0Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459413746", "body": "This is good - and logging the cause for each issue is good too. ", "bodyText": "This is good - and logging the cause for each issue is good too.", "bodyHTML": "<p dir=\"auto\">This is good - and logging the cause for each issue is good too.</p>", "author": "rjrudin", "createdAt": "2020-07-23T12:33:28Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {", "originalCommit": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -120,30 +128,35 @@ public class HubCentralMigrator extends LoggingObject {\n                 entityModelNode.get(\"pathRangeIndex\") != null;\n     }\n \n-    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n         if (!entityModelNode.has(\"info\")) {\n-            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (!entityModelNode.get(\"info\").has(\"title\")) {\n-            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n-            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n         String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n         if (!entityModelNode.has(\"definitions\")) {\n-            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"definitions\").get(title) == null) {\n-            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n             return false;\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -120,30 +128,35 @@ public class HubCentralMigrator extends LoggingObject {\n                 entityModelNode.get(\"pathRangeIndex\") != null;\n     }\n \n-    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n         if (!entityModelNode.has(\"info\")) {\n-            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (!entityModelNode.get(\"info\").has(\"title\")) {\n-            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n-            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n         String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n         if (!entityModelNode.has(\"definitions\")) {\n-            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"definitions\").get(title) == null) {\n-            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n             return false;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNDIyOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459414229", "body": "Going to be a little picky here - I think it's worth verifying that for each property, it both exists and the array has size of 1 or more. That's because I think it's common for entity definitions to be stubbed out with empty arrays. No need to process those. ", "bodyText": "Going to be a little picky here - I think it's worth verifying that for each property, it both exists and the array has size of 1 or more. That's because I think it's common for entity definitions to be stubbed out with empty arrays. No need to process those.", "bodyHTML": "<p dir=\"auto\">Going to be a little picky here - I think it's worth verifying that for each property, it both exists and the array has size of 1 or more. That's because I think it's common for entity definitions to be stubbed out with empty arrays. No need to process those.</p>", "author": "rjrudin", "createdAt": "2020-07-23T12:34:24Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||", "originalCommit": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTUxOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459641518", "bodyText": "All the entity properties are iterated over to see if an entityPropertyName exist in one of the index arrays. So if something which is in an index array and not defined in entityTypeProperties will not cause an issue and the index arrays are deleted after adding facetable properties.\nIf the array is empty (size is 0), we delete those arrays on migration. (Since we dont want those references existing after migration)", "author": "rahulvudutala", "createdAt": "2020-07-23T18:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNDIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -110,8 +118,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        if (!entityModelValidForMigration(entityModelNode)) {\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n             return false;\n         }\n         String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n", "next_change": null}, {"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -120,30 +128,35 @@ public class HubCentralMigrator extends LoggingObject {\n                 entityModelNode.get(\"pathRangeIndex\") != null;\n     }\n \n-    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n         if (!entityModelNode.has(\"info\")) {\n-            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (!entityModelNode.get(\"info\").has(\"title\")) {\n-            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n-            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n         String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n         if (!entityModelNode.has(\"definitions\")) {\n-            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"definitions\").get(title) == null) {\n-            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n             return false;\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -110,8 +118,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n-        if (!entityModelValidForMigration(entityModelNode)) {\n+    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n             return false;\n         }\n         String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n", "next_change": {"commit": "898490009104878dd3b6320cdab7f40153d8ce0d", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nsimilarity index 72%\nrename from marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nrename to marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nindex 332bb41ea..a373261a2 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\n", "chunk": "@@ -101,25 +107,25 @@ public class HubCentralMigrator extends LoggingObject {\n \n                 try {\n                     writer.writeValue(entityModelDef, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n-                    atLeastOneEntityModelWasMigrated = true;\n+                    logger.warn(format(\"Entity Model '%s' was successfully converted\", entityModelDef));\n+                    atLeastOneEntityModelWasConverted = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' conversion failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n-        if (atLeastOneEntityModelWasMigrated) {\n-            logger.warn(\"Finished migrating entity models.\");\n+        if (atLeastOneEntityModelWasConverted) {\n+            logger.warn(\"Finished converting entity models.\");\n             logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n                     \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n-            logger.warn(\"No entity models required migration, so no project files were modified\");\n+            logger.warn(\"No entity models required conversion, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n-        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+    protected boolean entityModelRequiresConversion(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForConversion(fileName, entityModelNode)) {\n             return false;\n         }\n         String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n", "next_change": null}, {"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nsimilarity index 72%\nrename from marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nrename to marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nindex 332bb41ea..a373261a2 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\n", "chunk": "@@ -128,30 +134,30 @@ public class HubCentralMigrator extends LoggingObject {\n                 entityModelNode.get(\"pathRangeIndex\") != null;\n     }\n \n-    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+    protected boolean entityModelValidForConversion(String fileName, ObjectNode entityModelNode) {\n         if (entityModelNode == null) {\n-            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be converted\", fileName));\n             return false;\n         }\n \n         if (!entityModelNode.has(\"info\")) {\n-            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be converted\", fileName));\n             return false;\n         }\n \n         if (!entityModelNode.get(\"info\").has(\"title\")) {\n-            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be converted\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n-            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be converted\", fileName));\n             return false;\n         }\n         String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n         if (!entityModelNode.has(\"definitions\")) {\n-            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be converted\", fileName));\n             return false;\n         }\n \n", "next_change": null}]}}, {"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -120,30 +128,35 @@ public class HubCentralMigrator extends LoggingObject {\n                 entityModelNode.get(\"pathRangeIndex\") != null;\n     }\n \n-    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+    protected boolean entityModelValidForMigration(String fileName, ObjectNode entityModelNode) {\n+        if (entityModelNode == null) {\n+            logger.warn(format(\"No content exist in the entity model definition %s and can not be migrated\", fileName));\n+            return false;\n+        }\n+\n         if (!entityModelNode.has(\"info\")) {\n-            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            logger.warn(format(\"Info doesn't exist in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (!entityModelNode.get(\"info\").has(\"title\")) {\n-            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title doesn't exist in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n-            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            logger.warn(format(\"Title is empty in the entity model definition %s in the info and can not be migrated\", fileName));\n             return false;\n         }\n         String title = entityModelNode.get(\"info\").get(\"title\").asText();\n \n         if (!entityModelNode.has(\"definitions\")) {\n-            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            logger.warn(format(\"No definitions found in the entity model definition %s and can not be migrated\", fileName));\n             return false;\n         }\n \n         if (entityModelNode.get(\"definitions\").get(title) == null) {\n-            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            logger.warn(format(\"entityType with title %s does not exist in the entity model definition %s\", title, fileName));\n             return false;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNjU5Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459416592", "body": "We unfortunately need null checks on both \"datatype\" and \"items\" here - one may exist, but the other doesn't. We just can't trust that anything about a user's entity definition is valid (I've seen a few support tickets recently where entity models can't be loaded, and the cause is completely invalid ES syntax). ", "bodyText": "We unfortunately need null checks on both \"datatype\" and \"items\" here - one may exist, but the other doesn't. We just can't trust that anything about a user's entity definition is valid (I've seen a few support tickets recently where entity models can't be loaded, and the cause is completely invalid ES syntax).", "bodyHTML": "<p dir=\"auto\">We unfortunately need null checks on both \"datatype\" and \"items\" here - one may exist, but the other doesn't. We just can't trust that anything about a user's entity definition is valid (I've seen a few support tickets recently where entity models can't be loaded, and the cause is completely invalid ES syntax).</p>", "author": "rjrudin", "createdAt": "2020-07-23T12:38:28Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n+                try {\n+                    writer.writeValue(entityModelFile, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    atLeastOneEntityModelWasMigrated = true;\n+                } catch (IOException e) {\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                }\n+            }\n+        }\n+\n+        if (atLeastOneEntityModelWasMigrated) {\n+            logger.warn(\"Finished migrating entity models.\");\n+            logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n+                    \"now have \\\"facetable\\\":true in their property definition.\\n\");\n+        } else {\n+            logger.warn(\"No entity models required migration, so no project files were modified\");\n+        }\n+    }\n+\n+    protected boolean entityModelRequiresMigration(ObjectNode entityModelNode) {\n+        if (!entityModelValidForMigration(entityModelNode)) {\n+            return false;\n+        }\n+        String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n+        entityModelNode = (ObjectNode) entityModelNode.get(\"definitions\").get(firstLevelEntityTypeName);\n+        return entityModelNode.get(\"rangeIndex\") != null || entityModelNode.get(\"elementRangeIndex\") != null ||\n+                entityModelNode.get(\"pathRangeIndex\") != null;\n+    }\n+\n+    protected boolean entityModelValidForMigration(ObjectNode entityModelNode) {\n+        if (!entityModelNode.has(\"info\")) {\n+            logger.warn(\"Info doesn't exist for the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (!entityModelNode.get(\"info\").has(\"title\")) {\n+            logger.warn(\"Title doesn't exist for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"info\").get(\"title\") == null || entityModelNode.get(\"info\").get(\"title\").asText().isEmpty()) {\n+            logger.warn(\"Title is empty for the entity model in the info and can not be migrated\");\n+            return false;\n+        }\n+        String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+\n+        if (!entityModelNode.has(\"definitions\")) {\n+            logger.warn(\"No definitions found in the entity model and can not be migrated\");\n+            return false;\n+        }\n+\n+        if (entityModelNode.get(\"definitions\").get(title) == null) {\n+            logger.warn(format(\"entityType with title %s does not exist in the entityModel\", title));\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private boolean isStructuredTypeProperty(ObjectNode entityPropertyNode) {\n+        // check for simple structured type property or simple relationship property\n+        if (entityPropertyNode.get(\"datatype\") == null && entityPropertyNode.get(\"$ref\") != null) {\n+            return true;\n+        }\n+\n+        // check if structured type or relationship type property with array datatype\n+        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {", "originalCommit": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1cd1fecc6edd1793201189105f49c449728fb515", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..3ef7fcebc 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -157,7 +157,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -157,7 +170,8 @@ public class HubCentralMigrator extends LoggingObject {\n         }\n \n         // check if structured type or relationship type property with array datatype\n-        if (entityPropertyNode.get(\"datatype\").asText().equals(\"array\") && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n+        if (entityPropertyNode.get(\"datatype\") != null && entityPropertyNode.get(\"datatype\").asText().equals(\"array\") &&\n+                entityPropertyNode.get(\"items\") != null && entityPropertyNode.get(\"items\").get(\"$ref\") != null) {\n             return true;\n         }\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNzU1NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r459417554", "body": "Another problem I thought of is that a user may very well have an entity model file with invalid JSON in it. Have seen it happen in support tickets. So we need for \"getAllEntities\" to account for a file being bad. I think modifying that to try/catch an error on each file - instead of throwing it - is a good idea (it'll be beneficial to the current clients of this method too). ", "bodyText": "Another problem I thought of is that a user may very well have an entity model file with invalid JSON in it. Have seen it happen in support tickets. So we need for \"getAllEntities\" to account for a file being bad. I think modifying that to try/catch an error on each file - instead of throwing it - is a good idea (it'll be beneficial to the current clients of this method too).", "bodyHTML": "<p dir=\"auto\">Another problem I thought of is that a user may very well have an entity model file with invalid JSON in it. Have seen it happen in support tickets. So we need for \"getAllEntities\" to account for a file being bad. I think modifying that to try/catch an error on each file - instead of throwing it - is a good idea (it'll be beneficial to the current clients of this method too).</p>", "author": "rjrudin", "createdAt": "2020-07-23T12:40:12Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {", "originalCommit": "06140aad6463887bcb8bf48d5f1edd7cf0aa9c59", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -55,11 +54,21 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getAllEntities()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-\n-            if (entityModelRequiresMigration(entityModelNode)) {\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 96d637818..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -55,11 +54,21 @@ public class HubCentralMigrator extends LoggingObject {\n \n         ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n         boolean atLeastOneEntityModelWasMigrated = false;\n+        File[] entityModelDefs = entityModelsDir.listFiles((dir, name) -> name.endsWith(EntityManagerImpl.ENTITY_FILE_EXTENSION));\n+\n+        for (File entityModelDef : entityModelDefs) {\n+            ObjectNode entityModelNode = null;\n+            String fileName = entityModelDef.getName();\n+            try {\n+                FileInputStream fileInputStream = new FileInputStream(entityModelDef);\n+                entityModelNode = (ObjectNode) mapper.readTree(fileInputStream);\n+                fileInputStream.close();\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model definition as malformed JSON content is found\", fileName));\n+                logger.error(e.getMessage());\n+            }\n \n-        for (JsonNode entityModel : entityManager.getAllEntities()) {\n-            ObjectNode entityModelNode = (ObjectNode) entityModel;\n-\n-            if (entityModelRequiresMigration(entityModelNode)) {\n+            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n \n", "next_change": {"commit": "898490009104878dd3b6320cdab7f40153d8ce0d", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nsimilarity index 72%\nrename from marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nrename to marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nindex 332bb41ea..a373261a2 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\n", "chunk": "@@ -68,7 +74,7 @@ public class HubCentralMigrator extends LoggingObject {\n                 logger.error(e.getMessage());\n             }\n \n-            if (entityModelRequiresMigration(fileName, entityModelNode)) {\n+            if (entityModelRequiresConversion(fileName, entityModelNode)) {\n                 String title = entityModelNode.get(\"info\").get(\"title\").asText();\n                 ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"oid": "1cd1fecc6edd1793201189105f49c449728fb515", "url": "https://github.com/marklogic/marklogic-data-hub/commit/1cd1fecc6edd1793201189105f49c449728fb515", "message": "DHFPROD-5211: Migrate entities datahub<5.3 to 5.3 for hub central", "committedDate": "2020-07-23T19:47:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNDMyMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r460034323", "body": "This makes me nervous here, because we don't have a guarantee that this will overwrite the file that the entity was read from. The risk is that we write a new file and now the old file and migrated file both exist, and the user is then confused about what happened. \r\n\r\nFor this reason, I think it's better to not use getAllEntities() from EntityManagerImpl. Instead, just do listFiles (and filter on name endsWith \".entity.json\") on the entities dir and iterate over the list of files. That way, you know you're overwriting the correct File. ", "bodyText": "This makes me nervous here, because we don't have a guarantee that this will overwrite the file that the entity was read from. The risk is that we write a new file and now the old file and migrated file both exist, and the user is then confused about what happened.\nFor this reason, I think it's better to not use getAllEntities() from EntityManagerImpl. Instead, just do listFiles (and filter on name endsWith \".entity.json\") on the entities dir and iterate over the list of files. That way, you know you're overwriting the correct File.", "bodyHTML": "<p dir=\"auto\">This makes me nervous here, because we don't have a guarantee that this will overwrite the file that the entity was read from. The risk is that we write a new file and now the old file and migrated file both exist, and the user is then confused about what happened.</p>\n<p dir=\"auto\">For this reason, I think it's better to not use getAllEntities() from EntityManagerImpl. Instead, just do listFiles (and filter on name endsWith \".entity.json\") on the entities dir and iterate over the list of files. That way, you know you're overwriting the correct File.</p>", "author": "rjrudin", "createdAt": "2020-07-24T12:55:04Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.marklogic.hub.hubcentral.migration;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.client.ext.helper.LoggingObject;\n+import com.marklogic.hub.HubConfig;\n+import com.marklogic.hub.HubProject;\n+import com.marklogic.hub.impl.EntityManagerImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+public class HubCentralMigrator extends LoggingObject {\n+    private static final List<String> removableIndexArrays = Arrays.asList(\"elementRangeIndex\", \"rangeIndex\", \"pathRangeIndex\");\n+    private HubConfig hubConfig;\n+    private EntityManagerImpl entityManager;\n+    private FlowMigrator flowMigrator;\n+    private ObjectMapper mapper = new ObjectMapper();\n+\n+    public HubCentralMigrator(HubConfig hubConfig) {\n+        this.hubConfig = hubConfig;\n+        this.entityManager = new EntityManagerImpl(hubConfig);\n+        this.flowMigrator = new FlowMigrator(this.hubConfig);\n+    }\n+\n+    /**\n+     * Migrate the entity model, flow and mapping files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    public void migrateUserArtifacts() {\n+        flowMigrator.migrateFlows();\n+        migrateEntityModels();\n+    }\n+\n+    /**\n+     * Migrate the entity model files in a user's local project. Does not make any changes to what's stored in MarkLogic.\n+     */\n+    protected void migrateEntityModels() {\n+        HubProject hubProject = hubConfig.getHubProject();\n+        final File entityModelsDir = hubProject.getHubEntitiesDir().toFile();\n+        if (!entityModelsDir.exists()) {\n+            logger.warn(\"No entities directory exists, so no entity models will be migrated\");\n+            return;\n+        }\n+\n+        logger.warn(\"Beginning migration of entity models in entities directory\");\n+\n+        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();\n+        boolean atLeastOneEntityModelWasMigrated = false;\n+\n+        for (JsonNode entityModel : entityManager.getAllEntities()) {\n+            ObjectNode entityModelNode = (ObjectNode) entityModel;\n+\n+            if (entityModelRequiresMigration(entityModelNode)) {\n+                String title = entityModelNode.get(\"info\").get(\"title\").asText();\n+                ObjectNode entityTypeNode = (ObjectNode) entityModelNode.get(\"definitions\").get(title);\n+\n+                List<String> elementRangeIndex = mapper.convertValue(entityTypeNode.get(\"elementRangeIndex\"), ArrayList.class);\n+                elementRangeIndex = elementRangeIndex == null ? new ArrayList<>() : elementRangeIndex;\n+                List<String> rangeIndex = mapper.convertValue(entityTypeNode.get(\"rangeIndex\"), ArrayList.class);\n+                rangeIndex = rangeIndex == null ? new ArrayList<>() : rangeIndex;\n+                List<String> pathRangeIndex = mapper.convertValue(entityTypeNode.get(\"pathRangeIndex\"), ArrayList.class);\n+                pathRangeIndex = pathRangeIndex == null ? new ArrayList<>() : pathRangeIndex;\n+                Set<String> mergedIndexArrays = new HashSet<>();\n+                Stream.of(elementRangeIndex, rangeIndex, pathRangeIndex).forEach(mergedIndexArrays::addAll);\n+\n+                ObjectNode entityTypePropertiesNode = (ObjectNode) entityTypeNode.get(\"properties\");\n+                if (entityTypePropertiesNode == null) {\n+                    logger.warn(\"entityTypePropertiesNode is null\");\n+                    entityTypeNode.remove(removableIndexArrays);\n+                    atLeastOneEntityModelWasMigrated = true;\n+                    continue;\n+                }\n+\n+                entityTypePropertiesNode.fieldNames().forEachRemaining(propertyName -> {\n+                    if (mergedIndexArrays.contains(propertyName)) {\n+                        ObjectNode entityPropertyNode = (ObjectNode) entityTypePropertiesNode.get(propertyName);\n+                        if (!isStructuredTypeProperty(entityPropertyNode)) {\n+                            entityPropertyNode.put(\"facetable\", true);\n+                        }\n+                    }\n+                });\n+                entityTypeNode.remove(removableIndexArrays);\n+\n+                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();", "originalCommit": "1cd1fecc6edd1793201189105f49c449728fb515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 3ef7fcebc..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -90,13 +99,12 @@ public class HubCentralMigrator extends LoggingObject {\n                 });\n                 entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n                     atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nindex 3ef7fcebc..332bb41ea 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n", "chunk": "@@ -90,13 +99,12 @@ public class HubCentralMigrator extends LoggingObject {\n                 });\n                 entityTypeNode.remove(removableIndexArrays);\n \n-                File entityModelFile = Paths.get(hubProject.getHubEntitiesDir().toString(), title + entityManager.ENTITY_FILE_EXTENSION).toFile();\n                 try {\n-                    writer.writeValue(entityModelFile, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelFile));\n+                    writer.writeValue(entityModelDef, entityModelNode);\n+                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n                     atLeastOneEntityModelWasMigrated = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelFile, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n", "next_change": {"commit": "898490009104878dd3b6320cdab7f40153d8ce0d", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nsimilarity index 72%\nrename from marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\nrename to marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\nindex 332bb41ea..a373261a2 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/migration/HubCentralMigrator.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/hubcentral/conversion/HubCentralConverter.java\n", "chunk": "@@ -101,25 +107,25 @@ public class HubCentralMigrator extends LoggingObject {\n \n                 try {\n                     writer.writeValue(entityModelDef, entityModelNode);\n-                    logger.warn(format(\"Entity Model '%s' was successfully migrated\", entityModelDef));\n-                    atLeastOneEntityModelWasMigrated = true;\n+                    logger.warn(format(\"Entity Model '%s' was successfully converted\", entityModelDef));\n+                    atLeastOneEntityModelWasConverted = true;\n                 } catch (IOException e) {\n-                    logger.error(format(\"Entity Model '%s' migration failed; cause: %s\", entityModelDef, e.getMessage()), e);\n+                    logger.error(format(\"Entity Model '%s' conversion failed; cause: %s\", entityModelDef, e.getMessage()), e);\n                 }\n             }\n         }\n \n-        if (atLeastOneEntityModelWasMigrated) {\n-            logger.warn(\"Finished migrating entity models.\");\n+        if (atLeastOneEntityModelWasConverted) {\n+            logger.warn(\"Finished converting entity models.\");\n             logger.warn(\"Please examine your entity model files to verify that properties that were listed in the rangeIndex, pathRangeIndex, or elementRangeIndex arrays \" +\n                     \"now have \\\"facetable\\\":true in their property definition.\\n\");\n         } else {\n-            logger.warn(\"No entity models required migration, so no project files were modified\");\n+            logger.warn(\"No entity models required conversion, so no project files were modified\");\n         }\n     }\n \n-    protected boolean entityModelRequiresMigration(String fileName, ObjectNode entityModelNode) {\n-        if (!entityModelValidForMigration(fileName, entityModelNode)) {\n+    protected boolean entityModelRequiresConversion(String fileName, ObjectNode entityModelNode) {\n+        if (!entityModelValidForConversion(fileName, entityModelNode)) {\n             return false;\n         }\n         String firstLevelEntityTypeName = entityModelNode.get(\"info\").get(\"title\").asText();\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "d720aa98c15ccff5785a6a23dddec10f46c9ecc6", "committedDate": "2020-07-29 09:12:36 -0700", "message": "DHFPROD-5279: Tweaks to HC migration process"}, {"oid": "898490009104878dd3b6320cdab7f40153d8ce0d", "committedDate": "2020-08-18 17:12:15 -0700", "message": "DHFPROD-5767: Renaming \"migrate\" to \"convert\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNjAxOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4257#discussion_r460036019", "body": "I think this is another reason not to use getAllEntities() - I don't think we want legacy entities included. According to our docs - https://docs.marklogic.com/datahub/upgrade.html - hubUpdate will move legacy entities to the ./entities directory. But in case there's anything left in the legacy entities directory, we don't want to touch those files. ", "bodyText": "I think this is another reason not to use getAllEntities() - I don't think we want legacy entities included. According to our docs - https://docs.marklogic.com/datahub/upgrade.html - hubUpdate will move legacy entities to the ./entities directory. But in case there's anything left in the legacy entities directory, we don't want to touch those files.", "bodyHTML": "<p dir=\"auto\">I think this is another reason not to use getAllEntities() - I don't think we want legacy entities included. According to our docs - <a href=\"https://docs.marklogic.com/datahub/upgrade.html\" rel=\"nofollow\">https://docs.marklogic.com/datahub/upgrade.html</a> - hubUpdate will move legacy entities to the ./entities directory. But in case there's anything left in the legacy entities directory, we don't want to touch those files.</p>", "author": "rjrudin", "createdAt": "2020-07-24T12:58:30Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java", "diffHunk": "@@ -244,22 +244,22 @@ private HubModuleManager getPropsMgr() {\n         return new HubModuleManager(timestampFile);\n     }\n \n-    private List<JsonNode> getAllEntities() {\n+    public List<JsonNode> getAllEntities() {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());", "originalCommit": "1cd1fecc6edd1793201189105f49c449728fb515", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex b88efdab5..c40d61ea5 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -244,7 +244,7 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n         return new HubModuleManager(timestampFile);\n     }\n \n-    public List<JsonNode> getAllEntities() {\n+    private List<JsonNode> getAllEntities() {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());\n         Path entitiesPath = hubConfig.getHubEntitiesDir();\n         File[] entityDefs = entitiesPath.toFile().listFiles(pathname -> pathname.toString().endsWith(ENTITY_FILE_EXTENSION) && !pathname.isHidden());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "cabdbe6ed56f418365407683da8545832afea647", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex b88efdab5..c40d61ea5 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -244,7 +244,7 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n         return new HubModuleManager(timestampFile);\n     }\n \n-    public List<JsonNode> getAllEntities() {\n+    private List<JsonNode> getAllEntities() {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());\n         Path entitiesPath = hubConfig.getHubEntitiesDir();\n         File[] entityDefs = entitiesPath.toFile().listFiles(pathname -> pathname.toString().endsWith(ENTITY_FILE_EXTENSION) && !pathname.isHidden());\n", "next_change": {"commit": "7100522405e0a00e3d09ccf1e69817c094f63e0c", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex c40d61ea5..be49fb7c5 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -232,18 +184,12 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n                     }\n                 }\n             }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+        } catch (Exception e) {\n+            logger.error(\"Unable to generate database index files for entity properties; cause: \" + e.getMessage(), e);\n         }\n         return false;\n     }\n \n-\n-    private HubModuleManager getPropsMgr() {\n-        String timestampFile = hubConfig.getHubProject().getUserModulesDeployTimestampFile();\n-        return new HubModuleManager(timestampFile);\n-    }\n-\n     private List<JsonNode> getAllEntities() {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());\n         Path entitiesPath = hubConfig.getHubEntitiesDir();\n", "next_change": {"commit": "701a77ac990321712fb8464fc1182415df76261a", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex be49fb7c5..018674ba9 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -194,6 +195,11 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());\n         Path entitiesPath = hubConfig.getHubEntitiesDir();\n         File[] entityDefs = entitiesPath.toFile().listFiles(pathname -> pathname.toString().endsWith(ENTITY_FILE_EXTENSION) && !pathname.isHidden());\n+        Arrays.sort(entityDefs, new Comparator<File>() {\n+            public int compare(File a, File b) {\n+                return a.getName().compareTo(b.getName());\n+            }\n+        });\n         if (entityDefs != null) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             for (File entityDef : entityDefs) {\n", "next_change": {"commit": "7c0b25e7cc9027622948534fd3162ba80bf367c9", "changed_code": [{"header": "diff --git a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\nindex 018674ba9..a4923ae8e 100644\n--- a/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n+++ b/marklogic-data-hub/src/main/java/com/marklogic/hub/impl/EntityManagerImpl.java\n", "chunk": "@@ -195,22 +194,21 @@ public class EntityManagerImpl extends LoggingObject implements EntityManager {\n         List<JsonNode> entities = new ArrayList<>(getAllLegacyEntities());\n         Path entitiesPath = hubConfig.getHubEntitiesDir();\n         File[] entityDefs = entitiesPath.toFile().listFiles(pathname -> pathname.toString().endsWith(ENTITY_FILE_EXTENSION) && !pathname.isHidden());\n+        if (entityDefs == null) {\n+            return entities;\n+        }\n         Arrays.sort(entityDefs, new Comparator<File>() {\n             public int compare(File a, File b) {\n                 return a.getName().compareTo(b.getName());\n             }\n         });\n-        if (entityDefs != null) {\n-            ObjectMapper objectMapper = new ObjectMapper();\n-            for (File entityDef : entityDefs) {\n-                try {\n-                    FileInputStream fileInputStream = new FileInputStream(entityDef);\n-                    entities.add(objectMapper.readTree(fileInputStream));\n-                    fileInputStream.close();\n-                } catch (IOException e) {\n-                    logger.warn(format(\"Ignoring %s entity model as malformed JSON content is found\", entityDef.getName()));\n-                    logger.error(e.getMessage());\n-                }\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        for (File entityDef : entityDefs) {\n+            try (FileInputStream fileInputStream = new FileInputStream(entityDef)) {\n+                entities.add(objectMapper.readTree(fileInputStream));\n+            } catch (IOException e) {\n+                logger.warn(format(\"Ignoring %s entity model as malformed JSON content is found\", entityDef.getName()));\n+                logger.error(e.getMessage());\n             }\n         }\n         return entities;\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "cabdbe6ed56f418365407683da8545832afea647", "message": "Merge commit", "committedDate": null}, {"oid": "cd2fa8610d7bae66b3cffe06094f0f005892162b", "committedDate": "2020-08-06 05:30:41 -0700", "message": "DHFPROD-5626: Fixing path expressions for entity models"}, {"oid": "a3e08cf33d3dbf0c2535e376c8e43a43440455b4", "committedDate": "2020-08-10 08:53:56 -0700", "message": "DHFPROD-5692: hubDeployAsDeveloper now generates indexes and PII files"}, {"oid": "58f7e8b59220938d3362c33170e1a1ec9d045eb4", "committedDate": "2020-08-10 08:58:54 -0700", "message": "DHFPROD-5132: Filter out external references in mapping"}, {"oid": "7100522405e0a00e3d09ccf1e69817c094f63e0c", "committedDate": "2020-08-11 11:22:53 -0700", "message": "DHFPROD-5712: Removing hubGenerateExplorerOptions task"}, {"oid": "4d60b2ec830d84ffb9d420ab8566c7f9851d771d", "committedDate": "2020-09-11 14:12:31 -0700", "message": "DHFPROD-5691: Fix outstanding issues found by coverity static scan"}, {"oid": "b2c34a6941a4ff9b93e72c3cdd15498d8ee37476", "committedDate": "2021-01-14 21:37:43 -0800", "message": "DHFPROD-6474: Generating and Deploying search options during datahub deployment"}, {"oid": "814c648427f8bb8e12ceea1793e882ceaa58700d", "committedDate": "2021-02-03 09:18:44 -0800", "message": "DHFPROD-6536: Update Copyright in datahub repository from 2020 to 2021"}, {"oid": "33a948ba3159288c055c3e7af08ef19dcc508cc6", "committedDate": "2021-02-04 19:07:22 -0800", "message": "DHFPROD-6646: Reverting DHF to Java 8"}, {"oid": "48006847893e3687f4ee34ccc1a064888e15076b", "committedDate": "2021-08-30 10:37:38 -0700", "message": "DHFPROD-7719: Using a \"module override\" approach to show entity props"}, {"oid": "7a912faf7e6cb119c3b538e929cdd1da14f8df43", "committedDate": "2022-06-13 16:22:47 -0700", "message": "DHFPROD-8962: Stabilize test performance"}, {"oid": "701a77ac990321712fb8464fc1182415df76261a", "committedDate": "2022-08-02 06:10:39 -0700", "message": "DHFPROD-8109: Ordering protected path files by name."}, {"oid": "543b3ea0d86971ef74aa8edce4b277e47c925e0e", "committedDate": "2022-12-20 09:43:59 -0800", "message": "DHFPROD-9697: Surface invalid model messages in mlLoadModules"}, {"oid": "5dbe2952873f04cd85ac1b072d701af346ecca52", "committedDate": "2023-01-23 12:00:47 -0800", "message": "DHFPROD-9814: Performance items"}, {"oid": "7c0b25e7cc9027622948534fd3162ba80bf367c9", "committedDate": "2023-02-14 14:24:42 -0800", "message": "DHFPROD-9493: Address coverity report items"}, {"oid": "e134e0ded271fea42ec64156c307b0b6e69f2702", "committedDate": "2023-04-04 11:58:44 -0700", "message": "DHFPROD-9754: Update core tests to work with mjs files"}, {"oid": "9b1debf4ef4fa63e249992911592d57398c2677c", "committedDate": "2023-06-01 17:24:56 -0700", "message": "DHFPROD-10258: Ingestion performance changes with XQuery MLCP transform"}]}, {"oid": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "url": "https://github.com/marklogic/marklogic-data-hub/commit/900c1ab11f9b018fb5194836b5a403a0aea680a1", "message": "DHFPROD-5211: Migrate entities datahub<5.3 to 5.3 for hub central", "committedDate": "2020-07-24T16:41:47Z", "type": "commit"}, {"oid": "900c1ab11f9b018fb5194836b5a403a0aea680a1", "url": "https://github.com/marklogic/marklogic-data-hub/commit/900c1ab11f9b018fb5194836b5a403a0aea680a1", "message": "DHFPROD-5211: Migrate entities datahub<5.3 to 5.3 for hub central", "committedDate": "2020-07-24T16:41:47Z", "type": "forcePushed"}]}