{"pr_number": 3490, "pr_title": "DHFPROD-4104:Middle tier for flow/step CRUD", "pr_author": "srinathgit", "pr_createdAt": "2020-01-22T20:47:50Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3490", "merge_commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "timeline": [{"oid": "debddd817ed8b27d2a5879c82bfd9b41fc7b5a81", "url": "https://github.com/marklogic/marklogic-data-hub/commit/debddd817ed8b27d2a5879c82bfd9b41fc7b5a81", "message": "updating version to 5.3-snapshots", "committedDate": "2020-01-22T18:07:35Z", "type": "commit"}, {"oid": "7015cd1db1b32de99d1e1af6514ddb21ddbc0c2c", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7015cd1db1b32de99d1e1af6514ddb21ddbc0c2c", "message": "updated task and version", "committedDate": "2020-01-22T18:07:35Z", "type": "commit"}, {"oid": "1831bb8bd04510d83f33db6e4f52f293885ed091", "url": "https://github.com/marklogic/marklogic-data-hub/commit/1831bb8bd04510d83f33db6e4f52f293885ed091", "message": "Updating target branch from develop to feature/5.3.0", "committedDate": "2020-01-22T18:07:35Z", "type": "commit"}, {"oid": "280ae3c61dbb9972f6d79961321bc41f9ef3ad8f", "url": "https://github.com/marklogic/marklogic-data-hub/commit/280ae3c61dbb9972f6d79961321bc41f9ef3ad8f", "message": "DHFPROD-3984: Add data services for artifacts (#3417)", "committedDate": "2020-01-22T18:27:51Z", "type": "commit"}, {"oid": "6eb1bfc28ae31563b15fbd43b63d0908da5a02f0", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6eb1bfc28ae31563b15fbd43b63d0908da5a02f0", "message": "DHFPROD-3974: Changes for new UI install (#3450)", "committedDate": "2020-01-22T18:37:01Z", "type": "commit"}, {"oid": "5b597566eaaa5434f08b81f78f6fdaf8b61bea5d", "url": "https://github.com/marklogic/marklogic-data-hub/commit/5b597566eaaa5434f08b81f78f6fdaf8b61bea5d", "message": "DHFPROD-4166: Move one-ui to marklogic data hub", "committedDate": "2020-01-22T18:37:01Z", "type": "commit"}, {"oid": "f659b3e33d4f77d0971bbaebd1f5c33a5b666e50", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f659b3e33d4f77d0971bbaebd1f5c33a5b666e50", "message": "DHFPROD-4104:Use DS to perform flow/step CRUD operations (#3476)", "committedDate": "2020-01-22T18:37:02Z", "type": "commit"}, {"oid": "0caab273d445ff8aefa2c62a37c40041cb6afdfa", "url": "https://github.com/marklogic/marklogic-data-hub/commit/0caab273d445ff8aefa2c62a37c40041cb6afdfa", "message": "DHFPROD-4166: Bring in latest changes from one-ui", "committedDate": "2020-01-22T18:37:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzQ2Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369807462", "body": "we can remove @EnableAsync for the implmentation.", "bodyText": "we can remove @EnableAsync for the implmentation.", "bodyHTML": "<p dir=\"auto\">we can remove <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/EnableAsync/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/EnableAsync\">@EnableAsync</a> for the implmentation.</p>", "author": "hao1st", "createdAt": "2020-01-22T21:16:11Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTIzOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369871238", "bodyText": "That sounds right. Also, if we did need it, I think a comment would be very helpful. Spring annotations can be powerful, but they often beg the question - why is this annotation here?", "author": "rjrudin", "createdAt": "2020-01-23T00:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 1393e658a..2b65b44e9 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -16,20 +16,16 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.marklogic.hub.curation.services.FlowManagerService;\n-import com.marklogic.hub.error.DataHubProjectException;\n import com.marklogic.hub.flow.Flow;\n-import com.marklogic.hub.oneui.exceptions.DataHubException;\n import com.marklogic.hub.oneui.models.StepModel;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.scheduling.annotation.EnableAsync;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.*;\n \n @Controller\n @RequestMapping(\"/api/flows\")\n-@EnableAsync\n public class FlowController {\n \n     @Autowired\n", "next_change": null}]}, "revised_code_in_main": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 1393e658a..2b65b44e9 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -16,20 +16,16 @@\n package com.marklogic.hub.curation.controllers;\n \n import com.marklogic.hub.curation.services.FlowManagerService;\n-import com.marklogic.hub.error.DataHubProjectException;\n import com.marklogic.hub.flow.Flow;\n-import com.marklogic.hub.oneui.exceptions.DataHubException;\n import com.marklogic.hub.oneui.models.StepModel;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.scheduling.annotation.EnableAsync;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.*;\n \n @Controller\n @RequestMapping(\"/api/flows\")\n-@EnableAsync\n public class FlowController {\n \n     @Autowired\n", "next_change": {"commit": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 2b65b44e9..0a72aba83 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -24,6 +24,8 @@ import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.*;\n \n+import java.util.List;\n+\n @Controller\n @RequestMapping(\"/api/flows\")\n public class FlowController {\n", "next_change": {"commit": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 0a72aba83..4fe37f1e4 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -30,6 +34,8 @@ import java.util.List;\n @RequestMapping(\"/api/flows\")\n public class FlowController {\n \n+    @Autowired\n+    HubConfigSession hubConfig;\n     @Autowired\n     private FlowManagerService flowManagerService;\n \n", "next_change": {"commit": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 4fe37f1e4..80fce5a2a 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -36,75 +42,75 @@ public class FlowController {\n \n     @Autowired\n     HubConfigSession hubConfig;\n-    @Autowired\n-    private FlowManagerService flowManagerService;\n+\n+    private FlowManagerService lastFlowManagerService = null;\n \n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlows() {\n-        List<Flow> flows = flowManagerService.getFlows();\n+        List<Flow> flows = getFlowManagerService().getFlows();\n         return new ResponseEntity<>(flows, HttpStatus.OK);\n     }\n \n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow = flowManagerService.createFlow(flowJson);\n+        Flow flow = getFlowManagerService().createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow = flowManagerService.updateFlow(flowJson);\n+        Flow flow = getFlowManagerService().updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow = flowManagerService.getFlow(flowName);\n+        Flow flow = getFlowManagerService().getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        flowManagerService.deleteFlow(flowName);\n+        getFlowManagerService().deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n     @ResponseBody\n     public List<StepModel> getSteps(@PathVariable String flowName) {\n-        return flowManagerService.getSteps(flowName);\n+        return getFlowManagerService().getSteps(flowName);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        StepModel stepModel = flowManagerService.getStep(flowName, stepId);\n+        StepModel stepModel = getFlowManagerService().getStep(flowName, stepId);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @RequestParam(value = \"stepOrder\", required = false) Integer stepOrder, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, stepOrder, null, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, stepOrder, null, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @PathVariable String stepId, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, null, stepId, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, null, stepId, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        flowManagerService.deleteStep(flowName, stepId);\n+        getFlowManagerService().deleteStep(flowName, stepId);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n", "next_change": {"commit": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 80fce5a2a..48d448406 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -43,74 +67,108 @@ public class FlowController {\n     @Autowired\n     HubConfigSession hubConfig;\n \n-    private FlowManagerService lastFlowManagerService = null;\n-\n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlows() {\n-        List<Flow> flows = getFlowManagerService().getFlows();\n+        List<Flow> flows = getFlowManager().getFlows();\n         return new ResponseEntity<>(flows, HttpStatus.OK);\n     }\n \n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n-    public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow = getFlowManagerService().createFlow(flowJson);\n-        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    public Flow createFlow(@RequestBody String flowJson) {\n+        FlowManager flowManager = getFlowManager();\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+\n+        if (flowManager.isFlowExisted(flowName)) {\n+            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n+        }\n+        flow = new FlowImpl();\n+        flow.setName(flowName);\n+\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow = getFlowManagerService().updateFlow(flowJson);\n+        Flow flow = updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow = getFlowManagerService().getFlow(flowName);\n+        Flow flow = getFlowManager().getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        getFlowManagerService().deleteFlow(flowName);\n+        getFlowManager().deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n     @ResponseBody\n     public List<StepModel> getSteps(@PathVariable String flowName) {\n-        return getFlowManagerService().getSteps(flowName);\n+        return getStepsToWebModel(flowName);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n-    public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        StepModel stepModel = getFlowManagerService().getStep(flowName, stepId);\n-        return new ResponseEntity<>(stepModel, HttpStatus.OK);\n+    public StepModel getStep(@PathVariable String flowName, @PathVariable String stepId) {\n+        FlowManager flowManager = getFlowManager();\n+        Flow flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new NotFoundException(flowName + \" not found.\");\n+        }\n+\n+        Step step = flow.getStep(getStepKeyInStepMap(flow, stepId));\n+        if (step == null) {\n+            throw new NotFoundException(stepId + \" not found.\");\n+        }\n+\n+        return transformStepToWebModel(step);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @RequestParam(value = \"stepOrder\", required = false) Integer stepOrder, @RequestBody String stepJson) {\n-        StepModel stepModel = getFlowManagerService().createStep(flowName, stepOrder, null, stepJson);\n+        StepModel stepModel = createStep(flowName, stepOrder, null, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @PathVariable String stepId, @RequestBody String stepJson) {\n-        StepModel stepModel = getFlowManagerService().createStep(flowName, null, stepId, stepJson);\n+        StepModel stepModel = createStep(flowName, null, stepId, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        getFlowManagerService().deleteStep(flowName, stepId);\n+        FlowManager flowManager = getFlowManager();\n+        Flow flow = flowManager.getFlow(flowName);\n+        String key = getStepKeyInStepMap(flow, stepId);\n+\n+        if (StringUtils.isEmpty(key)) {\n+            throw new BadRequestException(\"Invalid Step Id\");\n+        }\n+\n+        try {\n+            flowManager.deleteStep(flow, key);\n+        }\n+        catch (DataHubProjectException e) {\n+            throw new NotFoundException(e.getMessage());\n+        }\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 2b65b44e9..0a72aba83 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -31,6 +33,13 @@ public class FlowController {\n     @Autowired\n     private FlowManagerService flowManagerService;\n \n+    @RequestMapping(method = RequestMethod.GET)\n+    @ResponseBody\n+    public ResponseEntity<?> getFlows() {\n+        List<Flow> flows = flowManagerService.getFlows();\n+        return new ResponseEntity<>(flows, HttpStatus.OK);\n+    }\n+\n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n", "next_change": {"commit": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 0a72aba83..80fce5a2a 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -31,75 +41,135 @@ import java.util.List;\n public class FlowController {\n \n     @Autowired\n-    private FlowManagerService flowManagerService;\n+    HubConfigSession hubConfig;\n+\n+    private FlowManagerService lastFlowManagerService = null;\n \n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlows() {\n-        List<Flow> flows = flowManagerService.getFlows();\n+        List<Flow> flows = getFlowManagerService().getFlows();\n         return new ResponseEntity<>(flows, HttpStatus.OK);\n     }\n \n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow = flowManagerService.createFlow(flowJson);\n+        Flow flow = getFlowManagerService().createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow = flowManagerService.updateFlow(flowJson);\n+        Flow flow = getFlowManagerService().updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow = flowManagerService.getFlow(flowName);\n+        Flow flow = getFlowManagerService().getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        flowManagerService.deleteFlow(flowName);\n+        getFlowManagerService().deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n     @ResponseBody\n     public List<StepModel> getSteps(@PathVariable String flowName) {\n-        return flowManagerService.getSteps(flowName);\n+        return getFlowManagerService().getSteps(flowName);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        StepModel stepModel = flowManagerService.getStep(flowName, stepId);\n+        StepModel stepModel = getFlowManagerService().getStep(flowName, stepId);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @RequestParam(value = \"stepOrder\", required = false) Integer stepOrder, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, stepOrder, null, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, stepOrder, null, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @PathVariable String stepId, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, null, stepId, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, null, stepId, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        flowManagerService.deleteStep(flowName, stepId);\n+        getFlowManagerService().deleteStep(flowName, stepId);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return linkArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName, @PathVariable String artifactVersion) {\n+        JsonNode newFlow = getArtifactService().linkToStepOptions(flowName, stepId, artifactType, artifactName, artifactVersion);\n+        // only updating local, since the artifact service updated the flow in MarkLogic\n+        getFlowManagerService().updateFlow(newFlow.toString(), true);\n+        return new ResponseEntity<>(newFlow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.DELETE)\n+    @ResponseBody\n+    public ResponseEntity<?> removeLinkToArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return removeLinkToArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.DELETE)\n+    @ResponseBody\n+    public ResponseEntity<?> removeLinkToArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName, @PathVariable String artifactVersion) {\n+        JsonNode newFlow = getArtifactService().removeLinkToStepOptions(flowName, stepId, artifactType, artifactName, artifactVersion);\n+        // only updating local, since the artifact service updated the flow in MarkLogic\n+        getFlowManagerService().updateFlow(newFlow.toString(), true);\n+        return new ResponseEntity<>(newFlow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/run\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> runFlow(@PathVariable String flowName, @RequestBody(required = false) List<String> steps) {\n+        RunFlowResponse flow = getFlowManagerService().runFlow(flowName, steps);\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/stop\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> stopFlow(@PathVariable String flowName) {\n+        Flow flow = getFlowManagerService().stop(flowName);\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    protected ArtifactService getArtifactService() {\n+        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n+        return ArtifactService.on(dataServicesClient);\n+    }\n+\n+    private FlowManagerService getFlowManagerService() {\n+        lastFlowManagerService = new FlowManagerService(this.hubConfig.getHubConfigImpl());\n+        return lastFlowManagerService;\n+    }\n+\n+    // protected method for testing\n+    protected FlowManagerService getLastFlowManagerService() {\n+        return lastFlowManagerService;\n+    }\n }\n", "next_change": {"commit": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 80fce5a2a..48d448406 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -163,13 +238,246 @@ public class FlowController {\n         return ArtifactService.on(dataServicesClient);\n     }\n \n-    private FlowManagerService getFlowManagerService() {\n-        lastFlowManagerService = new FlowManagerService(this.hubConfig.getHubConfigImpl());\n-        return lastFlowManagerService;\n+\n+    public Flow updateFlow(String flowJson) {\n+        return updateFlow(flowJson, false);\n+    }\n+\n+    public Flow updateFlow(String flowJson, boolean onlyUpdateLocal) {\n+        FlowManager flowManager = getFlowManager();\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        if (onlyUpdateLocal) {\n+            flowManager.saveLocalFlow(flow);\n+        } else {\n+            flowManager.saveFlow(flow);\n+        }\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);\n+\n+            JSONUtils.trimText(jsonObject, \"separator\");\n+        }\n+        catch (IOException e) {\n+            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n+        }\n+\n+        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n+            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n+        }\n+        return jsonObject;\n+    }\n+\n+    private String getStepKeyInStepMap(Flow flow, String stepId) {\n+        if (flow == null || StringUtils.isEmpty(stepId)) {\n+            return null;\n+        }\n+\n+        // Split on the last occurrence of \"-\"\n+        String[] stepStr = stepId.split(\"-(?!.*-)\");\n+\n+        if (stepStr.length == 2) {\n+            String name = stepStr[0];\n+            String type = stepStr[1];\n+            String[] key = new String[1];\n+\n+            flow.getSteps().forEach((k, v) -> {\n+                if (name.equals(v.getName()) && type.equalsIgnoreCase(v.getStepDefinitionType().toString())) {\n+                    key[0] = k;\n+                }\n+            });\n+            return key[0];\n+        }\n+        return null;\n+    }\n+\n+    public StepModel createStep(String flowName, Integer stepOrder, String stepId, String stringStep) {\n+        FlowManager flowManager = getFlowManager();\n+        StepModel stepModel;\n+        JsonNode stepJson;\n+        Flow flow = flowManager.getFlow(flowName);\n+        Step existingStep = flow.getStep(getStepKeyInStepMap(flow, stepId));\n+\n+        if (existingStep == null && !StringUtils.isEmpty(stepId)) {\n+            throw new NotFoundException(\"Step \" + stepId + \" Not Found\");\n+        }\n+\n+        try {\n+            stepJson = JSONObject.readInput(stringStep);\n+\n+            JSONUtils.trimText(stepJson, \"separator\");\n+\n+            stepModel = StepModel.fromJson(stepJson);\n+        }\n+        catch (IOException e) {\n+            throw new BadRequestException(\"Error parsing JSON\");\n+        }\n+\n+        if (stepModel == null) {\n+            throw new BadRequestException();\n+        }\n+\n+        Step step = StepModel.transformToCoreStepModel(stepModel, stepJson);\n+\n+        if (step.getStepDefinitionType() == null) {\n+            throw new BadRequestException(\"Invalid Step Definition Type\");\n+        }\n+\n+        if (step.getStepDefinitionName() == null) {\n+            throw new BadRequestException(\"Invalid Step Definition Name\");\n+        }\n+\n+        if (stepId != null) {\n+            if (!stepId.equals(step.getName() + \"-\" + step.getStepDefinitionType())) {\n+                throw new BadRequestException(\"Changing step name or step type not supported.\");\n+            }\n+        }\n+        if(!EnumUtils.isValidEnumIgnoreCase(StepDefinition.StepDefinitionType.class, step.getStepDefinitionType().toString())) {\n+            throw new BadRequestException(\"Invalid Step Type\");\n+        }\n+\n+        step = upsertStepDefinition(stepModel, step);\n+\n+        Map<String, Step> currSteps = flow.getSteps();\n+        if (stepId != null) {\n+            String key = getStepKeyInStepMap(flow, stepId);\n+            if (StringUtils.isNotEmpty(key)) {\n+                currSteps.put(key, step);\n+            }\n+            flow.setSteps(currSteps);\n+        }\n+        else {\n+            if (stepOrder == null || stepOrder > currSteps.size()) {\n+                currSteps.put(String.valueOf(currSteps.size() + 1), step);\n+            }\n+            else {\n+                Map<String, Step> newSteps = new LinkedHashMap<>();\n+                final Integer[] count = {1};\n+                Step finalStep = step;\n+                currSteps.values().forEach(s -> {\n+                    if (count[0].equals(stepOrder)) {\n+                        newSteps.put(String.valueOf(count[0]++), finalStep);\n+                    }\n+                    newSteps.put(String.valueOf(count[0]), s);\n+                    ++count[0];\n+                });\n+                flow.setSteps(newSteps);\n+            }\n+        }\n+\n+        if (existingStep != null && existingStep.isEqual(step)) {\n+            return transformStepToWebModel(existingStep);\n+        }\n+\n+        flowManager.saveFlow(flow);\n+        return transformStepToWebModel(step);\n+    }\n+\n+    private List<StepModel> getStepsToWebModel(String flowName) {\n+        Flow flow =  getFlowManager().getFlow(flowName);\n+        Map<String, Step> stepMap = flow.getSteps();\n+\n+        List<StepModel> stepModelList = new ArrayList<>();\n+        for (String key : stepMap.keySet()) {\n+            Step step = stepMap.get(key);\n+            StepModel stepModel = transformStepToWebModel(step);\n+            stepModelList.add(stepModel);\n+        }\n+\n+        return stepModelList;\n+    }\n+\n+    /*\n+The core and web models for steps are different, webModel has 'modulePath' which provides the uri of the main.sjs\n+whereas it is not present in the core step model. Hence the following 2 transform methods additionally are meant to\n+set modulePaths in 'StepModel' and 'StepDefinition' .\n+ */\n+    private StepModel transformStepToWebModel(Step step) {\n+        StepModel stepModel = StepModel.transformToWebStepModel(step);\n+        StepDefinition stepDef = getStepDefinitionManager().getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n+        stepModel.setModulePath(stepDef.getModulePath());\n+        return stepModel;\n+    }\n+\n+    private Step upsertStepDefinition(StepModel stepModel, Step step) {\n+        StepDefinitionManager stepDefinitionManager = getStepDefinitionManager();\n+        if (stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType()) != null) {\n+            String stepType = step.getStepDefinitionType().toString().toLowerCase();\n+            if(step.getStepDefinitionName().equalsIgnoreCase(\"default-\" + stepType) || \"entity-services-mapping\".equalsIgnoreCase(step.getStepDefinitionName())) {\n+                step = mergeDefaultStepDefinitionIntoStep(stepModel, step);\n+            }\n+            else {\n+                StepDefinition oldStepDefinition = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n+                StepDefinition stepDefinition = transformFromStep(oldStepDefinition, step, stepModel);\n+                stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            }\n+        }\n+        else {\n+            String stepDefName = step.getStepDefinitionName();\n+            StepDefinition.StepDefinitionType stepDefType = step.getStepDefinitionType();\n+            String modulePath = \"/custom-modules/\" + stepDefType.toString().toLowerCase() + \"/\" + stepDefName + \"/main.sjs\";\n+\n+            StepDefinition stepDefinition = StepDefinition.create(stepDefName, stepDefType);\n+            stepDefinition = transformFromStep(stepDefinition, step, stepModel);\n+\n+            getScaffolding().createCustomModule(stepDefName, stepDefType.toString());\n+            stepDefinition.setModulePath(modulePath);\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+        }\n+        return step;\n+    }\n+\n+    private StepDefinition transformFromStep(StepDefinition stepDefinition, Step step, StepModel stepModel) {\n+        StepDefinition newStepDefinition = stepDefinition.transformFromStep(stepDefinition, step);\n+        newStepDefinition.setModulePath(stepModel.getModulePath());\n+        return newStepDefinition;\n+    }\n+\n+    private Step mergeDefaultStepDefinitionIntoStep(StepModel stepModel, Step step) {\n+        String stepType = step.getStepDefinitionType().toString().toLowerCase();\n+        StepDefinition defaultStepDefinition = getDefaultStepDefinitionFromResources(\"hub-internal-artifacts/step-definitions/\" + stepType + \"/marklogic/\"+ step.getStepDefinitionName() +\".step.json\", step.getStepDefinitionType());\n+        Step defaultStep = defaultStepDefinition.transformToStep(step.getName(), defaultStepDefinition, new Step());\n+        return StepModel.mergeFields(stepModel, defaultStep, step);\n+    }\n+\n+    private StepDefinition getDefaultStepDefinitionFromResources(String resourcePath, StepDefinition.StepDefinitionType stepDefinitionType) {\n+        try (InputStream in = FlowController.class.getClassLoader().getResourceAsStream(resourcePath)) {\n+            JSONObject jsonObject = new JSONObject(IOUtils.toString(in));\n+            StepDefinition defaultStep = StepDefinition.create(stepDefinitionType.toString(), stepDefinitionType);\n+            defaultStep.deserialize(jsonObject.jsonNode());\n+            return defaultStep;\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected Scaffolding getScaffolding() {\n+        return new ScaffoldingImpl(this.hubConfig.getHubConfigImpl());\n+    }\n+\n+    protected StepDefinitionManagerImpl getStepDefinitionManager() {\n+        return new StepDefinitionManagerImpl(this.hubConfig.getHubConfigImpl());\n+    }\n+\n+    protected FlowManager getFlowManager() {\n+        return new FlowManagerImpl(this.hubConfig.getHubConfigImpl());\n     }\n \n-    // protected method for testing\n-    protected FlowManagerService getLastFlowManagerService() {\n-        return lastFlowManagerService;\n+    protected FlowRunnerImpl getFlowRunner() {\n+        return new FlowRunnerImpl(this.hubConfig.getHubConfigImpl());\n     }\n }\n", "next_change": {"commit": "e0636c8b693e578003c938a0c794109041f65122", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 48d448406..0804cce29 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -477,7 +477,7 @@ set modulePaths in 'StepModel' and 'StepDefinition' .\n         return new FlowManagerImpl(this.hubConfig.getHubConfigImpl());\n     }\n \n-    protected FlowRunnerImpl getFlowRunner() {\n+    protected FlowRunnerImpl newFlowRunner() {\n         return new FlowRunnerImpl(this.hubConfig.getHubConfigImpl());\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4222:Create endpoints for getting all flows, all steps in a flow"}, {"oid": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps"}, {"oid": "a1c31a11c432f263c2fe29a3f9f9c8fdec957d71", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Move in flow run logic (#3578)"}, {"oid": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-4544: Make FlowRunner compatible with session based HubConfig"}, {"oid": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Ensure OneUI Flow Run changes don't break legacy code"}, {"oid": "e0636c8b693e578003c938a0c794109041f65122", "committedDate": "2020-04-02 11:37:03 -0700", "message": "DHFPROD-4692: Improved test framework for one-ui"}, {"oid": "87c8ade01c0b4e4cb2127e62b1e040b078f9e876", "committedDate": "2020-04-07 12:47:08 -0700", "message": "DHFPROD-4686:Update copyright"}, {"oid": "b188250dc05a70cb2f4d21c458184e6caa01de44", "committedDate": "2020-04-09 13:20:15 -0700", "message": "DHFPROD-4666: Rename one-ui to marklogic-data-hub-central"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTg1NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369871855", "body": "Shouldn't the service throw a useful exception here if the payload is invalid? The controller should be as thin as possible, just passing inputs and outputs around. I think all of these methods should roughly be:\r\n\r\n    return new ResponseEntity<>(service.createFlow(flowJson, false), HttpStatus.OK);\r\n", "bodyText": "Shouldn't the service throw a useful exception here if the payload is invalid? The controller should be as thin as possible, just passing inputs and outputs around. I think all of these methods should roughly be:\nreturn new ResponseEntity<>(service.createFlow(flowJson, false), HttpStatus.OK);", "bodyHTML": "<p dir=\"auto\">Shouldn't the service throw a useful exception here if the payload is invalid? The controller should be as thin as possible, just passing inputs and outputs around. I think all of these methods should roughly be:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"return new ResponseEntity&lt;&gt;(service.createFlow(flowJson, false), HttpStatus.OK);\"><pre><code>return new ResponseEntity&lt;&gt;(service.createFlow(flowJson, false), HttpStatus.OK);\n</code></pre></div>", "author": "rjrudin", "createdAt": "2020-01-23T00:03:21Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync\n+public class FlowController {\n+\n+    @Autowired\n+    private FlowManagerService flowManagerService;\n+\n+    @RequestMapping(method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n+        Flow flow;\n+        try {\n+            flow = flowManagerService.createFlow(flowJson, false);", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 1393e658a..2b65b44e9 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -38,50 +34,28 @@ public class FlowController {\n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, false);\n-            if (flow == null) {\n-                throw new DataHubException(\"Flow request payload is invalid.\");\n-            }\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, true);\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.getFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        try {\n-            flowManagerService.deleteFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        flowManagerService.deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 1393e658a..2b65b44e9 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -38,50 +34,28 @@ public class FlowController {\n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, false);\n-            if (flow == null) {\n-                throw new DataHubException(\"Flow request payload is invalid.\");\n-            }\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, true);\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.getFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        try {\n-            flowManagerService.deleteFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        flowManagerService.deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n", "next_change": {"commit": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 2b65b44e9..0a72aba83 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -58,6 +67,13 @@ public class FlowController {\n         flowManagerService.deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n+\n+    @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n+    @ResponseBody\n+    public List<StepModel> getSteps(@PathVariable String flowName) {\n+        return flowManagerService.getSteps(flowName);\n+    }\n+\n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n", "next_change": {"commit": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 0a72aba83..80fce5a2a 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -31,75 +41,135 @@ import java.util.List;\n public class FlowController {\n \n     @Autowired\n-    private FlowManagerService flowManagerService;\n+    HubConfigSession hubConfig;\n+\n+    private FlowManagerService lastFlowManagerService = null;\n \n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlows() {\n-        List<Flow> flows = flowManagerService.getFlows();\n+        List<Flow> flows = getFlowManagerService().getFlows();\n         return new ResponseEntity<>(flows, HttpStatus.OK);\n     }\n \n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow = flowManagerService.createFlow(flowJson);\n+        Flow flow = getFlowManagerService().createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow = flowManagerService.updateFlow(flowJson);\n+        Flow flow = getFlowManagerService().updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow = flowManagerService.getFlow(flowName);\n+        Flow flow = getFlowManagerService().getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        flowManagerService.deleteFlow(flowName);\n+        getFlowManagerService().deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n     @ResponseBody\n     public List<StepModel> getSteps(@PathVariable String flowName) {\n-        return flowManagerService.getSteps(flowName);\n+        return getFlowManagerService().getSteps(flowName);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        StepModel stepModel = flowManagerService.getStep(flowName, stepId);\n+        StepModel stepModel = getFlowManagerService().getStep(flowName, stepId);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @RequestParam(value = \"stepOrder\", required = false) Integer stepOrder, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, stepOrder, null, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, stepOrder, null, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @PathVariable String stepId, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, null, stepId, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, null, stepId, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        flowManagerService.deleteStep(flowName, stepId);\n+        getFlowManagerService().deleteStep(flowName, stepId);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return linkArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName, @PathVariable String artifactVersion) {\n+        JsonNode newFlow = getArtifactService().linkToStepOptions(flowName, stepId, artifactType, artifactName, artifactVersion);\n+        // only updating local, since the artifact service updated the flow in MarkLogic\n+        getFlowManagerService().updateFlow(newFlow.toString(), true);\n+        return new ResponseEntity<>(newFlow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.DELETE)\n+    @ResponseBody\n+    public ResponseEntity<?> removeLinkToArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return removeLinkToArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.DELETE)\n+    @ResponseBody\n+    public ResponseEntity<?> removeLinkToArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName, @PathVariable String artifactVersion) {\n+        JsonNode newFlow = getArtifactService().removeLinkToStepOptions(flowName, stepId, artifactType, artifactName, artifactVersion);\n+        // only updating local, since the artifact service updated the flow in MarkLogic\n+        getFlowManagerService().updateFlow(newFlow.toString(), true);\n+        return new ResponseEntity<>(newFlow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/run\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> runFlow(@PathVariable String flowName, @RequestBody(required = false) List<String> steps) {\n+        RunFlowResponse flow = getFlowManagerService().runFlow(flowName, steps);\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/stop\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> stopFlow(@PathVariable String flowName) {\n+        Flow flow = getFlowManagerService().stop(flowName);\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    protected ArtifactService getArtifactService() {\n+        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n+        return ArtifactService.on(dataServicesClient);\n+    }\n+\n+    private FlowManagerService getFlowManagerService() {\n+        lastFlowManagerService = new FlowManagerService(this.hubConfig.getHubConfigImpl());\n+        return lastFlowManagerService;\n+    }\n+\n+    // protected method for testing\n+    protected FlowManagerService getLastFlowManagerService() {\n+        return lastFlowManagerService;\n+    }\n }\n", "next_change": {"commit": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 80fce5a2a..48d448406 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -163,13 +238,246 @@ public class FlowController {\n         return ArtifactService.on(dataServicesClient);\n     }\n \n-    private FlowManagerService getFlowManagerService() {\n-        lastFlowManagerService = new FlowManagerService(this.hubConfig.getHubConfigImpl());\n-        return lastFlowManagerService;\n+\n+    public Flow updateFlow(String flowJson) {\n+        return updateFlow(flowJson, false);\n+    }\n+\n+    public Flow updateFlow(String flowJson, boolean onlyUpdateLocal) {\n+        FlowManager flowManager = getFlowManager();\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        if (onlyUpdateLocal) {\n+            flowManager.saveLocalFlow(flow);\n+        } else {\n+            flowManager.saveFlow(flow);\n+        }\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);\n+\n+            JSONUtils.trimText(jsonObject, \"separator\");\n+        }\n+        catch (IOException e) {\n+            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n+        }\n+\n+        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n+            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n+        }\n+        return jsonObject;\n+    }\n+\n+    private String getStepKeyInStepMap(Flow flow, String stepId) {\n+        if (flow == null || StringUtils.isEmpty(stepId)) {\n+            return null;\n+        }\n+\n+        // Split on the last occurrence of \"-\"\n+        String[] stepStr = stepId.split(\"-(?!.*-)\");\n+\n+        if (stepStr.length == 2) {\n+            String name = stepStr[0];\n+            String type = stepStr[1];\n+            String[] key = new String[1];\n+\n+            flow.getSteps().forEach((k, v) -> {\n+                if (name.equals(v.getName()) && type.equalsIgnoreCase(v.getStepDefinitionType().toString())) {\n+                    key[0] = k;\n+                }\n+            });\n+            return key[0];\n+        }\n+        return null;\n+    }\n+\n+    public StepModel createStep(String flowName, Integer stepOrder, String stepId, String stringStep) {\n+        FlowManager flowManager = getFlowManager();\n+        StepModel stepModel;\n+        JsonNode stepJson;\n+        Flow flow = flowManager.getFlow(flowName);\n+        Step existingStep = flow.getStep(getStepKeyInStepMap(flow, stepId));\n+\n+        if (existingStep == null && !StringUtils.isEmpty(stepId)) {\n+            throw new NotFoundException(\"Step \" + stepId + \" Not Found\");\n+        }\n+\n+        try {\n+            stepJson = JSONObject.readInput(stringStep);\n+\n+            JSONUtils.trimText(stepJson, \"separator\");\n+\n+            stepModel = StepModel.fromJson(stepJson);\n+        }\n+        catch (IOException e) {\n+            throw new BadRequestException(\"Error parsing JSON\");\n+        }\n+\n+        if (stepModel == null) {\n+            throw new BadRequestException();\n+        }\n+\n+        Step step = StepModel.transformToCoreStepModel(stepModel, stepJson);\n+\n+        if (step.getStepDefinitionType() == null) {\n+            throw new BadRequestException(\"Invalid Step Definition Type\");\n+        }\n+\n+        if (step.getStepDefinitionName() == null) {\n+            throw new BadRequestException(\"Invalid Step Definition Name\");\n+        }\n+\n+        if (stepId != null) {\n+            if (!stepId.equals(step.getName() + \"-\" + step.getStepDefinitionType())) {\n+                throw new BadRequestException(\"Changing step name or step type not supported.\");\n+            }\n+        }\n+        if(!EnumUtils.isValidEnumIgnoreCase(StepDefinition.StepDefinitionType.class, step.getStepDefinitionType().toString())) {\n+            throw new BadRequestException(\"Invalid Step Type\");\n+        }\n+\n+        step = upsertStepDefinition(stepModel, step);\n+\n+        Map<String, Step> currSteps = flow.getSteps();\n+        if (stepId != null) {\n+            String key = getStepKeyInStepMap(flow, stepId);\n+            if (StringUtils.isNotEmpty(key)) {\n+                currSteps.put(key, step);\n+            }\n+            flow.setSteps(currSteps);\n+        }\n+        else {\n+            if (stepOrder == null || stepOrder > currSteps.size()) {\n+                currSteps.put(String.valueOf(currSteps.size() + 1), step);\n+            }\n+            else {\n+                Map<String, Step> newSteps = new LinkedHashMap<>();\n+                final Integer[] count = {1};\n+                Step finalStep = step;\n+                currSteps.values().forEach(s -> {\n+                    if (count[0].equals(stepOrder)) {\n+                        newSteps.put(String.valueOf(count[0]++), finalStep);\n+                    }\n+                    newSteps.put(String.valueOf(count[0]), s);\n+                    ++count[0];\n+                });\n+                flow.setSteps(newSteps);\n+            }\n+        }\n+\n+        if (existingStep != null && existingStep.isEqual(step)) {\n+            return transformStepToWebModel(existingStep);\n+        }\n+\n+        flowManager.saveFlow(flow);\n+        return transformStepToWebModel(step);\n+    }\n+\n+    private List<StepModel> getStepsToWebModel(String flowName) {\n+        Flow flow =  getFlowManager().getFlow(flowName);\n+        Map<String, Step> stepMap = flow.getSteps();\n+\n+        List<StepModel> stepModelList = new ArrayList<>();\n+        for (String key : stepMap.keySet()) {\n+            Step step = stepMap.get(key);\n+            StepModel stepModel = transformStepToWebModel(step);\n+            stepModelList.add(stepModel);\n+        }\n+\n+        return stepModelList;\n+    }\n+\n+    /*\n+The core and web models for steps are different, webModel has 'modulePath' which provides the uri of the main.sjs\n+whereas it is not present in the core step model. Hence the following 2 transform methods additionally are meant to\n+set modulePaths in 'StepModel' and 'StepDefinition' .\n+ */\n+    private StepModel transformStepToWebModel(Step step) {\n+        StepModel stepModel = StepModel.transformToWebStepModel(step);\n+        StepDefinition stepDef = getStepDefinitionManager().getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n+        stepModel.setModulePath(stepDef.getModulePath());\n+        return stepModel;\n+    }\n+\n+    private Step upsertStepDefinition(StepModel stepModel, Step step) {\n+        StepDefinitionManager stepDefinitionManager = getStepDefinitionManager();\n+        if (stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType()) != null) {\n+            String stepType = step.getStepDefinitionType().toString().toLowerCase();\n+            if(step.getStepDefinitionName().equalsIgnoreCase(\"default-\" + stepType) || \"entity-services-mapping\".equalsIgnoreCase(step.getStepDefinitionName())) {\n+                step = mergeDefaultStepDefinitionIntoStep(stepModel, step);\n+            }\n+            else {\n+                StepDefinition oldStepDefinition = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n+                StepDefinition stepDefinition = transformFromStep(oldStepDefinition, step, stepModel);\n+                stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            }\n+        }\n+        else {\n+            String stepDefName = step.getStepDefinitionName();\n+            StepDefinition.StepDefinitionType stepDefType = step.getStepDefinitionType();\n+            String modulePath = \"/custom-modules/\" + stepDefType.toString().toLowerCase() + \"/\" + stepDefName + \"/main.sjs\";\n+\n+            StepDefinition stepDefinition = StepDefinition.create(stepDefName, stepDefType);\n+            stepDefinition = transformFromStep(stepDefinition, step, stepModel);\n+\n+            getScaffolding().createCustomModule(stepDefName, stepDefType.toString());\n+            stepDefinition.setModulePath(modulePath);\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+        }\n+        return step;\n+    }\n+\n+    private StepDefinition transformFromStep(StepDefinition stepDefinition, Step step, StepModel stepModel) {\n+        StepDefinition newStepDefinition = stepDefinition.transformFromStep(stepDefinition, step);\n+        newStepDefinition.setModulePath(stepModel.getModulePath());\n+        return newStepDefinition;\n+    }\n+\n+    private Step mergeDefaultStepDefinitionIntoStep(StepModel stepModel, Step step) {\n+        String stepType = step.getStepDefinitionType().toString().toLowerCase();\n+        StepDefinition defaultStepDefinition = getDefaultStepDefinitionFromResources(\"hub-internal-artifacts/step-definitions/\" + stepType + \"/marklogic/\"+ step.getStepDefinitionName() +\".step.json\", step.getStepDefinitionType());\n+        Step defaultStep = defaultStepDefinition.transformToStep(step.getName(), defaultStepDefinition, new Step());\n+        return StepModel.mergeFields(stepModel, defaultStep, step);\n+    }\n+\n+    private StepDefinition getDefaultStepDefinitionFromResources(String resourcePath, StepDefinition.StepDefinitionType stepDefinitionType) {\n+        try (InputStream in = FlowController.class.getClassLoader().getResourceAsStream(resourcePath)) {\n+            JSONObject jsonObject = new JSONObject(IOUtils.toString(in));\n+            StepDefinition defaultStep = StepDefinition.create(stepDefinitionType.toString(), stepDefinitionType);\n+            defaultStep.deserialize(jsonObject.jsonNode());\n+            return defaultStep;\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected Scaffolding getScaffolding() {\n+        return new ScaffoldingImpl(this.hubConfig.getHubConfigImpl());\n+    }\n+\n+    protected StepDefinitionManagerImpl getStepDefinitionManager() {\n+        return new StepDefinitionManagerImpl(this.hubConfig.getHubConfigImpl());\n+    }\n+\n+    protected FlowManager getFlowManager() {\n+        return new FlowManagerImpl(this.hubConfig.getHubConfigImpl());\n     }\n \n-    // protected method for testing\n-    protected FlowManagerService getLastFlowManagerService() {\n-        return lastFlowManagerService;\n+    protected FlowRunnerImpl getFlowRunner() {\n+        return new FlowRunnerImpl(this.hubConfig.getHubConfigImpl());\n     }\n }\n", "next_change": {"commit": "e0636c8b693e578003c938a0c794109041f65122", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 48d448406..0804cce29 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -477,7 +477,7 @@ set modulePaths in 'StepModel' and 'StepDefinition' .\n         return new FlowManagerImpl(this.hubConfig.getHubConfigImpl());\n     }\n \n-    protected FlowRunnerImpl getFlowRunner() {\n+    protected FlowRunnerImpl newFlowRunner() {\n         return new FlowRunnerImpl(this.hubConfig.getHubConfigImpl());\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4222:Create endpoints for getting all flows, all steps in a flow"}, {"oid": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps"}, {"oid": "a1c31a11c432f263c2fe29a3f9f9c8fdec957d71", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Move in flow run logic (#3578)"}, {"oid": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-4544: Make FlowRunner compatible with session based HubConfig"}, {"oid": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Ensure OneUI Flow Run changes don't break legacy code"}, {"oid": "e0636c8b693e578003c938a0c794109041f65122", "committedDate": "2020-04-02 11:37:03 -0700", "message": "DHFPROD-4692: Improved test framework for one-ui"}, {"oid": "87c8ade01c0b4e4cb2127e62b1e040b078f9e876", "committedDate": "2020-04-07 12:47:08 -0700", "message": "DHFPROD-4686:Update copyright"}, {"oid": "b188250dc05a70cb2f4d21c458184e6caa01de44", "committedDate": "2020-04-09 13:20:15 -0700", "message": "DHFPROD-4666: Rename one-ui to marklogic-data-hub-central"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTk4NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369871984", "body": "Same thing here, createFlow should throw a useful exception. There shouldn't be any need for the controller to do anything other than call the service method. ", "bodyText": "Same thing here, createFlow should throw a useful exception. There shouldn't be any need for the controller to do anything other than call the service method.", "bodyHTML": "<p dir=\"auto\">Same thing here, createFlow should throw a useful exception. There shouldn't be any need for the controller to do anything other than call the service method.</p>", "author": "rjrudin", "createdAt": "2020-01-23T00:03:49Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.marklogic.hub.curation.services.FlowManagerService;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.*;\n+\n+@Controller\n+@RequestMapping(\"/api/flows\")\n+@EnableAsync\n+public class FlowController {\n+\n+    @Autowired\n+    private FlowManagerService flowManagerService;\n+\n+    @RequestMapping(method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n+        Flow flow;\n+        try {\n+            flow = flowManagerService.createFlow(flowJson, false);\n+            if (flow == null) {\n+                throw new DataHubException(\"Flow request payload is invalid.\");\n+            }\n+        } catch (Exception dpe) {\n+            throw new DataHubException(dpe.getMessage());\n+        }\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n+    @ResponseBody\n+    public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n+        Flow flow;\n+        try {\n+            flow = flowManagerService.createFlow(flowJson, true);", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 1393e658a..2b65b44e9 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -38,50 +34,28 @@ public class FlowController {\n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, false);\n-            if (flow == null) {\n-                throw new DataHubException(\"Flow request payload is invalid.\");\n-            }\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, true);\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.getFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        try {\n-            flowManagerService.deleteFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        flowManagerService.deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 1393e658a..2b65b44e9 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -38,50 +34,28 @@ public class FlowController {\n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, false);\n-            if (flow == null) {\n-                throw new DataHubException(\"Flow request payload is invalid.\");\n-            }\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.createFlow(flowJson, true);\n-        } catch (Exception dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow;\n-        try {\n-            flow = flowManagerService.getFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        Flow flow = flowManagerService.getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        try {\n-            flowManagerService.deleteFlow(flowName);\n-        } catch (DataHubProjectException dpe) {\n-            throw new DataHubException(dpe.getMessage());\n-        }\n+        flowManagerService.deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n", "next_change": {"commit": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 2b65b44e9..0a72aba83 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -58,6 +67,13 @@ public class FlowController {\n         flowManagerService.deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n+\n+    @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n+    @ResponseBody\n+    public List<StepModel> getSteps(@PathVariable String flowName) {\n+        return flowManagerService.getSteps(flowName);\n+    }\n+\n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n", "next_change": {"commit": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 0a72aba83..80fce5a2a 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -31,75 +41,135 @@ import java.util.List;\n public class FlowController {\n \n     @Autowired\n-    private FlowManagerService flowManagerService;\n+    HubConfigSession hubConfig;\n+\n+    private FlowManagerService lastFlowManagerService = null;\n \n     @RequestMapping(method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlows() {\n-        List<Flow> flows = flowManagerService.getFlows();\n+        List<Flow> flows = getFlowManagerService().getFlows();\n         return new ResponseEntity<>(flows, HttpStatus.OK);\n     }\n \n     @RequestMapping(method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createFlow(@RequestBody String flowJson) {\n-        Flow flow = flowManagerService.createFlow(flowJson);\n+        Flow flow = getFlowManagerService().createFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> updateFlow(@PathVariable String flowName, @RequestBody String flowJson) {\n-        Flow flow = flowManagerService.updateFlow(flowJson);\n+        Flow flow = getFlowManagerService().updateFlow(flowJson);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getFlow(@PathVariable String flowName) {\n-        Flow flow = flowManagerService.getFlow(flowName);\n+        Flow flow = getFlowManagerService().getFlow(flowName);\n         return new ResponseEntity<>(flow, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteFlow(@PathVariable String flowName) {\n-        flowManagerService.deleteFlow(flowName);\n+        getFlowManagerService().deleteFlow(flowName);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.GET)\n     @ResponseBody\n     public List<StepModel> getSteps(@PathVariable String flowName) {\n-        return flowManagerService.getSteps(flowName);\n+        return getFlowManagerService().getSteps(flowName);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.GET)\n     @ResponseBody\n     public ResponseEntity<?> getStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        StepModel stepModel = flowManagerService.getStep(flowName, stepId);\n+        StepModel stepModel = getFlowManagerService().getStep(flowName, stepId);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps\", method = RequestMethod.POST)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @RequestParam(value = \"stepOrder\", required = false) Integer stepOrder, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, stepOrder, null, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, stepOrder, null, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.PUT)\n     @ResponseBody\n     public ResponseEntity<?> createStep(@PathVariable String flowName, @PathVariable String stepId, @RequestBody String stepJson) {\n-        StepModel stepModel = flowManagerService.createStep(flowName, null, stepId, stepJson);\n+        StepModel stepModel = getFlowManagerService().createStep(flowName, null, stepId, stepJson);\n         return new ResponseEntity<>(stepModel, HttpStatus.OK);\n     }\n \n     @RequestMapping(value = \"/{flowName}/steps/{stepId}\", method = RequestMethod.DELETE)\n     @ResponseBody\n     public ResponseEntity<?> deleteStep(@PathVariable String flowName, @PathVariable String stepId) {\n-        flowManagerService.deleteStep(flowName, stepId);\n+        getFlowManagerService().deleteStep(flowName, stepId);\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return linkArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName, @PathVariable String artifactVersion) {\n+        JsonNode newFlow = getArtifactService().linkToStepOptions(flowName, stepId, artifactType, artifactName, artifactVersion);\n+        // only updating local, since the artifact service updated the flow in MarkLogic\n+        getFlowManagerService().updateFlow(newFlow.toString(), true);\n+        return new ResponseEntity<>(newFlow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.DELETE)\n+    @ResponseBody\n+    public ResponseEntity<?> removeLinkToArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return removeLinkToArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.DELETE)\n+    @ResponseBody\n+    public ResponseEntity<?> removeLinkToArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName, @PathVariable String artifactVersion) {\n+        JsonNode newFlow = getArtifactService().removeLinkToStepOptions(flowName, stepId, artifactType, artifactName, artifactVersion);\n+        // only updating local, since the artifact service updated the flow in MarkLogic\n+        getFlowManagerService().updateFlow(newFlow.toString(), true);\n+        return new ResponseEntity<>(newFlow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/run\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> runFlow(@PathVariable String flowName, @RequestBody(required = false) List<String> steps) {\n+        RunFlowResponse flow = getFlowManagerService().runFlow(flowName, steps);\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/stop\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> stopFlow(@PathVariable String flowName) {\n+        Flow flow = getFlowManagerService().stop(flowName);\n+        return new ResponseEntity<>(flow, HttpStatus.OK);\n+    }\n+\n+    protected ArtifactService getArtifactService() {\n+        DatabaseClient dataServicesClient = hubConfig.newStagingClient(null);\n+        return ArtifactService.on(dataServicesClient);\n+    }\n+\n+    private FlowManagerService getFlowManagerService() {\n+        lastFlowManagerService = new FlowManagerService(this.hubConfig.getHubConfigImpl());\n+        return lastFlowManagerService;\n+    }\n+\n+    // protected method for testing\n+    protected FlowManagerService getLastFlowManagerService() {\n+        return lastFlowManagerService;\n+    }\n }\n", "next_change": {"commit": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 80fce5a2a..48d448406 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -163,13 +238,246 @@ public class FlowController {\n         return ArtifactService.on(dataServicesClient);\n     }\n \n-    private FlowManagerService getFlowManagerService() {\n-        lastFlowManagerService = new FlowManagerService(this.hubConfig.getHubConfigImpl());\n-        return lastFlowManagerService;\n+\n+    public Flow updateFlow(String flowJson) {\n+        return updateFlow(flowJson, false);\n+    }\n+\n+    public Flow updateFlow(String flowJson, boolean onlyUpdateLocal) {\n+        FlowManager flowManager = getFlowManager();\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        if (onlyUpdateLocal) {\n+            flowManager.saveLocalFlow(flow);\n+        } else {\n+            flowManager.saveFlow(flow);\n+        }\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);\n+\n+            JSONUtils.trimText(jsonObject, \"separator\");\n+        }\n+        catch (IOException e) {\n+            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n+        }\n+\n+        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n+            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n+        }\n+        return jsonObject;\n+    }\n+\n+    private String getStepKeyInStepMap(Flow flow, String stepId) {\n+        if (flow == null || StringUtils.isEmpty(stepId)) {\n+            return null;\n+        }\n+\n+        // Split on the last occurrence of \"-\"\n+        String[] stepStr = stepId.split(\"-(?!.*-)\");\n+\n+        if (stepStr.length == 2) {\n+            String name = stepStr[0];\n+            String type = stepStr[1];\n+            String[] key = new String[1];\n+\n+            flow.getSteps().forEach((k, v) -> {\n+                if (name.equals(v.getName()) && type.equalsIgnoreCase(v.getStepDefinitionType().toString())) {\n+                    key[0] = k;\n+                }\n+            });\n+            return key[0];\n+        }\n+        return null;\n+    }\n+\n+    public StepModel createStep(String flowName, Integer stepOrder, String stepId, String stringStep) {\n+        FlowManager flowManager = getFlowManager();\n+        StepModel stepModel;\n+        JsonNode stepJson;\n+        Flow flow = flowManager.getFlow(flowName);\n+        Step existingStep = flow.getStep(getStepKeyInStepMap(flow, stepId));\n+\n+        if (existingStep == null && !StringUtils.isEmpty(stepId)) {\n+            throw new NotFoundException(\"Step \" + stepId + \" Not Found\");\n+        }\n+\n+        try {\n+            stepJson = JSONObject.readInput(stringStep);\n+\n+            JSONUtils.trimText(stepJson, \"separator\");\n+\n+            stepModel = StepModel.fromJson(stepJson);\n+        }\n+        catch (IOException e) {\n+            throw new BadRequestException(\"Error parsing JSON\");\n+        }\n+\n+        if (stepModel == null) {\n+            throw new BadRequestException();\n+        }\n+\n+        Step step = StepModel.transformToCoreStepModel(stepModel, stepJson);\n+\n+        if (step.getStepDefinitionType() == null) {\n+            throw new BadRequestException(\"Invalid Step Definition Type\");\n+        }\n+\n+        if (step.getStepDefinitionName() == null) {\n+            throw new BadRequestException(\"Invalid Step Definition Name\");\n+        }\n+\n+        if (stepId != null) {\n+            if (!stepId.equals(step.getName() + \"-\" + step.getStepDefinitionType())) {\n+                throw new BadRequestException(\"Changing step name or step type not supported.\");\n+            }\n+        }\n+        if(!EnumUtils.isValidEnumIgnoreCase(StepDefinition.StepDefinitionType.class, step.getStepDefinitionType().toString())) {\n+            throw new BadRequestException(\"Invalid Step Type\");\n+        }\n+\n+        step = upsertStepDefinition(stepModel, step);\n+\n+        Map<String, Step> currSteps = flow.getSteps();\n+        if (stepId != null) {\n+            String key = getStepKeyInStepMap(flow, stepId);\n+            if (StringUtils.isNotEmpty(key)) {\n+                currSteps.put(key, step);\n+            }\n+            flow.setSteps(currSteps);\n+        }\n+        else {\n+            if (stepOrder == null || stepOrder > currSteps.size()) {\n+                currSteps.put(String.valueOf(currSteps.size() + 1), step);\n+            }\n+            else {\n+                Map<String, Step> newSteps = new LinkedHashMap<>();\n+                final Integer[] count = {1};\n+                Step finalStep = step;\n+                currSteps.values().forEach(s -> {\n+                    if (count[0].equals(stepOrder)) {\n+                        newSteps.put(String.valueOf(count[0]++), finalStep);\n+                    }\n+                    newSteps.put(String.valueOf(count[0]), s);\n+                    ++count[0];\n+                });\n+                flow.setSteps(newSteps);\n+            }\n+        }\n+\n+        if (existingStep != null && existingStep.isEqual(step)) {\n+            return transformStepToWebModel(existingStep);\n+        }\n+\n+        flowManager.saveFlow(flow);\n+        return transformStepToWebModel(step);\n+    }\n+\n+    private List<StepModel> getStepsToWebModel(String flowName) {\n+        Flow flow =  getFlowManager().getFlow(flowName);\n+        Map<String, Step> stepMap = flow.getSteps();\n+\n+        List<StepModel> stepModelList = new ArrayList<>();\n+        for (String key : stepMap.keySet()) {\n+            Step step = stepMap.get(key);\n+            StepModel stepModel = transformStepToWebModel(step);\n+            stepModelList.add(stepModel);\n+        }\n+\n+        return stepModelList;\n+    }\n+\n+    /*\n+The core and web models for steps are different, webModel has 'modulePath' which provides the uri of the main.sjs\n+whereas it is not present in the core step model. Hence the following 2 transform methods additionally are meant to\n+set modulePaths in 'StepModel' and 'StepDefinition' .\n+ */\n+    private StepModel transformStepToWebModel(Step step) {\n+        StepModel stepModel = StepModel.transformToWebStepModel(step);\n+        StepDefinition stepDef = getStepDefinitionManager().getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n+        stepModel.setModulePath(stepDef.getModulePath());\n+        return stepModel;\n+    }\n+\n+    private Step upsertStepDefinition(StepModel stepModel, Step step) {\n+        StepDefinitionManager stepDefinitionManager = getStepDefinitionManager();\n+        if (stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType()) != null) {\n+            String stepType = step.getStepDefinitionType().toString().toLowerCase();\n+            if(step.getStepDefinitionName().equalsIgnoreCase(\"default-\" + stepType) || \"entity-services-mapping\".equalsIgnoreCase(step.getStepDefinitionName())) {\n+                step = mergeDefaultStepDefinitionIntoStep(stepModel, step);\n+            }\n+            else {\n+                StepDefinition oldStepDefinition = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n+                StepDefinition stepDefinition = transformFromStep(oldStepDefinition, step, stepModel);\n+                stepDefinitionManager.saveStepDefinition(stepDefinition);\n+            }\n+        }\n+        else {\n+            String stepDefName = step.getStepDefinitionName();\n+            StepDefinition.StepDefinitionType stepDefType = step.getStepDefinitionType();\n+            String modulePath = \"/custom-modules/\" + stepDefType.toString().toLowerCase() + \"/\" + stepDefName + \"/main.sjs\";\n+\n+            StepDefinition stepDefinition = StepDefinition.create(stepDefName, stepDefType);\n+            stepDefinition = transformFromStep(stepDefinition, step, stepModel);\n+\n+            getScaffolding().createCustomModule(stepDefName, stepDefType.toString());\n+            stepDefinition.setModulePath(modulePath);\n+            stepDefinitionManager.saveStepDefinition(stepDefinition);\n+        }\n+        return step;\n+    }\n+\n+    private StepDefinition transformFromStep(StepDefinition stepDefinition, Step step, StepModel stepModel) {\n+        StepDefinition newStepDefinition = stepDefinition.transformFromStep(stepDefinition, step);\n+        newStepDefinition.setModulePath(stepModel.getModulePath());\n+        return newStepDefinition;\n+    }\n+\n+    private Step mergeDefaultStepDefinitionIntoStep(StepModel stepModel, Step step) {\n+        String stepType = step.getStepDefinitionType().toString().toLowerCase();\n+        StepDefinition defaultStepDefinition = getDefaultStepDefinitionFromResources(\"hub-internal-artifacts/step-definitions/\" + stepType + \"/marklogic/\"+ step.getStepDefinitionName() +\".step.json\", step.getStepDefinitionType());\n+        Step defaultStep = defaultStepDefinition.transformToStep(step.getName(), defaultStepDefinition, new Step());\n+        return StepModel.mergeFields(stepModel, defaultStep, step);\n+    }\n+\n+    private StepDefinition getDefaultStepDefinitionFromResources(String resourcePath, StepDefinition.StepDefinitionType stepDefinitionType) {\n+        try (InputStream in = FlowController.class.getClassLoader().getResourceAsStream(resourcePath)) {\n+            JSONObject jsonObject = new JSONObject(IOUtils.toString(in));\n+            StepDefinition defaultStep = StepDefinition.create(stepDefinitionType.toString(), stepDefinitionType);\n+            defaultStep.deserialize(jsonObject.jsonNode());\n+            return defaultStep;\n+        }\n+        catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected Scaffolding getScaffolding() {\n+        return new ScaffoldingImpl(this.hubConfig.getHubConfigImpl());\n+    }\n+\n+    protected StepDefinitionManagerImpl getStepDefinitionManager() {\n+        return new StepDefinitionManagerImpl(this.hubConfig.getHubConfigImpl());\n+    }\n+\n+    protected FlowManager getFlowManager() {\n+        return new FlowManagerImpl(this.hubConfig.getHubConfigImpl());\n     }\n \n-    // protected method for testing\n-    protected FlowManagerService getLastFlowManagerService() {\n-        return lastFlowManagerService;\n+    protected FlowRunnerImpl getFlowRunner() {\n+        return new FlowRunnerImpl(this.hubConfig.getHubConfigImpl());\n     }\n }\n", "next_change": {"commit": "e0636c8b693e578003c938a0c794109041f65122", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\nindex 48d448406..0804cce29 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java\n", "chunk": "@@ -477,7 +477,7 @@ set modulePaths in 'StepModel' and 'StepDefinition' .\n         return new FlowManagerImpl(this.hubConfig.getHubConfigImpl());\n     }\n \n-    protected FlowRunnerImpl getFlowRunner() {\n+    protected FlowRunnerImpl newFlowRunner() {\n         return new FlowRunnerImpl(this.hubConfig.getHubConfigImpl());\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4222:Create endpoints for getting all flows, all steps in a flow"}, {"oid": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps"}, {"oid": "a1c31a11c432f263c2fe29a3f9f9c8fdec957d71", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Move in flow run logic (#3578)"}, {"oid": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-4544: Make FlowRunner compatible with session based HubConfig"}, {"oid": "d5016d412d4abbe42af0bc553ea54b3fb12c4a0b", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Ensure OneUI Flow Run changes don't break legacy code"}, {"oid": "e0636c8b693e578003c938a0c794109041f65122", "committedDate": "2020-04-02 11:37:03 -0700", "message": "DHFPROD-4692: Improved test framework for one-ui"}, {"oid": "87c8ade01c0b4e4cb2127e62b1e040b078f9e876", "committedDate": "2020-04-07 12:47:08 -0700", "message": "DHFPROD-4686:Update copyright"}, {"oid": "b188250dc05a70cb2f4d21c458184e6caa01de44", "committedDate": "2020-04-09 13:20:15 -0700", "message": "DHFPROD-4666: Rename one-ui to marklogic-data-hub-central"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI5MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369872291", "body": "What's the point of using JSONObject? Why not just accept a JsonNode instead? The Spring controller can convert the RequestBody automatically into a JsonNode as well. That will cut out a lot of code and make for a richer method interface, as createFlow(JsonNode) is better than createFlow(String). ", "bodyText": "What's the point of using JSONObject? Why not just accept a JsonNode instead? The Spring controller can convert the RequestBody automatically into a JsonNode as well. That will cut out a lot of code and make for a richer method interface, as createFlow(JsonNode) is better than createFlow(String).", "bodyHTML": "<p dir=\"auto\">What's the point of using JSONObject? Why not just accept a JsonNode instead? The Spring controller can convert the RequestBody automatically into a JsonNode as well. That will cut out a lot of code and make for a richer method interface, as createFlow(JsonNode) is better than createFlow(String).</p>", "author": "rjrudin", "createdAt": "2020-01-23T00:05:11Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwODg4OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r370308888", "bodyText": "JSONObject (com.marklogic.hub.util.json) is a utility class that is composed of JsonNode  and has a bunch of other utility methods", "author": "srinathgit", "createdAt": "2020-01-23T19:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MjI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\nindex 1464f3a40..8999e8f19 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n", "chunk": "@@ -38,7 +38,40 @@ public class FlowManagerService {\n     @Autowired\n     private Scaffolding scaffolding;\n \n-    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+    public Flow updateFlow(String flowJson) {\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    public Flow createFlow(String flowJson) {\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+\n+        if (flowManager.isFlowExisted(flowName)) {\n+            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n+        }\n+        flow = new FlowImpl();\n+        flow.setName(flowName);\n+\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n         JSONObject jsonObject;\n         try {\n             jsonObject = new JSONObject(flowJson);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\nindex 1464f3a40..8999e8f19 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n", "chunk": "@@ -38,7 +38,40 @@ public class FlowManagerService {\n     @Autowired\n     private Scaffolding scaffolding;\n \n-    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+    public Flow updateFlow(String flowJson) {\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    public Flow createFlow(String flowJson) {\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+\n+        if (flowManager.isFlowExisted(flowName)) {\n+            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n+        }\n+        flow = new FlowImpl();\n+        flow.setName(flowName);\n+\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n         JSONObject jsonObject;\n         try {\n             jsonObject = new JSONObject(flowJson);\n", "next_change": {"commit": "e0636c8b693e578003c938a0c794109041f65122", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\ndeleted file mode 100644\nindex 8999e8f19..000000000\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ /dev/null\n", "chunk": "@@ -1,302 +0,0 @@\n-package com.marklogic.hub.curation.services;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.hub.FlowManager;\n-import com.marklogic.hub.StepDefinitionManager;\n-import com.marklogic.hub.error.DataHubProjectException;\n-import com.marklogic.hub.oneui.exceptions.DataHubException;\n-import com.marklogic.hub.flow.Flow;\n-import com.marklogic.hub.flow.impl.FlowImpl;\n-import com.marklogic.hub.oneui.models.StepModel;\n-import com.marklogic.hub.scaffold.Scaffolding;\n-import com.marklogic.hub.step.StepDefinition;\n-import com.marklogic.hub.step.impl.Step;\n-import com.marklogic.hub.util.json.JSONObject;\n-import com.marklogic.hub.util.json.JSONUtils;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.EnumUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.BadRequestException;\n-import javax.ws.rs.NotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-@Service\n-public class FlowManagerService {\n-\n-    @Autowired\n-    private FlowManager flowManager;\n-\n-    @Autowired\n-    private StepDefinitionManager stepDefinitionManager;\n-\n-    @Autowired\n-    private Scaffolding scaffolding;\n-\n-    public Flow updateFlow(String flowJson) {\n-        //for PUT updating\n-        JSONObject jsonObject = processPayload(flowJson);\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-        flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n-                \"is made which is prohibited \");\n-        }\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n-    }\n-\n-    public Flow createFlow(String flowJson) {\n-        JSONObject jsonObject = processPayload(flowJson);\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-\n-        if (flowManager.isFlowExisted(flowName)) {\n-            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n-        }\n-        flow = new FlowImpl();\n-        flow.setName(flowName);\n-\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n-    }\n-\n-    private JSONObject processPayload(String flowJson) {\n-        JSONObject jsonObject;\n-        try {\n-            jsonObject = new JSONObject(flowJson);\n-\n-            JSONUtils.trimText(jsonObject, \"separator\");\n-        }\n-        catch (IOException e) {\n-            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n-        }\n-\n-        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n-            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n-        }\n-        return jsonObject;\n-    }\n-\n-    public Flow getFlow(String flowName) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new NotFoundException(flowName + \" not found!\");\n-        }\n-        return flow;\n-    }\n-\n-    public void deleteFlow(String flowName) {\n-        flowManager.deleteFlow(flowName);\n-    }\n-\n-    public StepModel getStep(String flowName, String stepId) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new NotFoundException(flowName + \" not found.\");\n-        }\n-\n-        Step step = flow.getStep(getStepKeyInStepMap(flow, stepId));\n-        if (step == null) {\n-            throw new NotFoundException(stepId + \" not found.\");\n-        }\n-\n-        return transformStepToWebModel(step);\n-    }\n-\n-    public StepModel createStep(String flowName, Integer stepOrder, String stepId, String stringStep) {\n-        StepModel stepModel;\n-        JsonNode stepJson;\n-        Flow flow = flowManager.getFlow(flowName);\n-        Step existingStep = flow.getStep(getStepKeyInStepMap(flow, stepId));\n-\n-        if (existingStep == null && !StringUtils.isEmpty(stepId)) {\n-            throw new NotFoundException(\"Step \" + stepId + \" Not Found\");\n-        }\n-\n-        try {\n-            stepJson = JSONObject.readInput(stringStep);\n-\n-            JSONUtils.trimText(stepJson, \"separator\");\n-\n-            stepModel = StepModel.fromJson(stepJson);\n-        }\n-        catch (IOException e) {\n-            throw new BadRequestException(\"Error parsing JSON\");\n-        }\n-\n-        if (stepModel == null) {\n-            throw new BadRequestException();\n-        }\n-\n-        Step step = StepModel.transformToCoreStepModel(stepModel, stepJson);\n-\n-        if (step.getStepDefinitionType() == null) {\n-            throw new BadRequestException(\"Invalid Step Definition Type\");\n-        }\n-\n-        if (step.getStepDefinitionName() == null) {\n-            throw new BadRequestException(\"Invalid Step Definition Name\");\n-        }\n-\n-        if (stepId != null) {\n-            if (!stepId.equals(step.getName() + \"-\" + step.getStepDefinitionType())) {\n-                throw new BadRequestException(\"Changing step name or step type not supported.\");\n-            }\n-        }\n-        if(!EnumUtils.isValidEnumIgnoreCase(StepDefinition.StepDefinitionType.class, step.getStepDefinitionType().toString())) {\n-            throw new BadRequestException(\"Invalid Step Type\");\n-        }\n-\n-        step = upsertStepDefinition(stepModel, step);\n-\n-        Map<String, Step> currSteps = flow.getSteps();\n-        if (stepId != null) {\n-            String key = getStepKeyInStepMap(flow, stepId);\n-            if (StringUtils.isNotEmpty(key)) {\n-                currSteps.put(key, step);\n-            }\n-            flow.setSteps(currSteps);\n-        }\n-        else {\n-            if (stepOrder == null || stepOrder > currSteps.size()) {\n-                currSteps.put(String.valueOf(currSteps.size() + 1), step);\n-            }\n-            else {\n-                Map<String, Step> newSteps = new LinkedHashMap<>();\n-                final Integer[] count = {1};\n-                Step finalStep = step;\n-                currSteps.values().forEach(s -> {\n-                    if (count[0].equals(stepOrder)) {\n-                        newSteps.put(String.valueOf(count[0]++), finalStep);\n-                    }\n-                    newSteps.put(String.valueOf(count[0]), s);\n-                    ++count[0];\n-                });\n-                flow.setSteps(newSteps);\n-            }\n-        }\n-\n-        if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n-        }\n-\n-        flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private Step mergeDefaultStepDefinitionIntoStep(StepModel stepModel, Step step) {\n-        String stepType = step.getStepDefinitionType().toString().toLowerCase();\n-        StepDefinition defaultStepDefinition = getDefaultStepDefinitionFromResources(\"hub-internal-artifacts/step-definitions/\" + stepType + \"/marklogic/\"+ step.getStepDefinitionName() +\".step.json\", step.getStepDefinitionType());\n-        Step defaultStep = defaultStepDefinition.transformToStep(step.getName(), defaultStepDefinition, new Step());\n-        return StepModel.mergeFields(stepModel, defaultStep, step);\n-    }\n-\n-    private Step upsertStepDefinition(StepModel stepModel, Step step) {\n-        if (stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType()) != null) {\n-            String stepType = step.getStepDefinitionType().toString().toLowerCase();\n-            if(step.getStepDefinitionName().equalsIgnoreCase(\"default-\" + stepType) || \"entity-services-mapping\".equalsIgnoreCase(step.getStepDefinitionName())) {\n-                step = mergeDefaultStepDefinitionIntoStep(stepModel, step);\n-            }\n-            else {\n-                StepDefinition oldStepDefinition = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n-                StepDefinition stepDefinition = transformFromStep(oldStepDefinition, step, stepModel);\n-                stepDefinitionManager.saveStepDefinition(stepDefinition);\n-            }\n-        }\n-        else {\n-            String stepDefName = step.getStepDefinitionName();\n-            StepDefinition.StepDefinitionType stepDefType = step.getStepDefinitionType();\n-            String modulePath = \"/custom-modules/\" + stepDefType.toString().toLowerCase() + \"/\" + stepDefName + \"/main.sjs\";\n-\n-            StepDefinition stepDefinition = StepDefinition.create(stepDefName, stepDefType);\n-            stepDefinition = transformFromStep(stepDefinition, step, stepModel);\n-\n-            scaffolding.createCustomModule(stepDefName, stepDefType.toString());\n-            stepDefinition.setModulePath(modulePath);\n-            stepDefinitionManager.saveStepDefinition(stepDefinition);\n-        }\n-        return step;\n-    }\n-\n-    public void deleteStep(String flowName, String stepId) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        String key = getStepKeyInStepMap(flow, stepId);\n-\n-        if (StringUtils.isEmpty(key)) {\n-            throw new BadRequestException(\"Invalid Step Id\");\n-        }\n-\n-        try {\n-            flowManager.deleteStep(flow, key);\n-        }\n-        catch (DataHubProjectException e) {\n-            throw new NotFoundException(e.getMessage());\n-        }\n-    }\n-\n-    /*\n-    The core and web models for steps are different, webModel has 'modulePath' which provides the uri of the main.sjs\n-    whereas it is not present in the core step model. Hence the following 2 transform methods additionally are meant to\n-    set modulePaths in 'StepModel' and 'StepDefinition' .\n-     */\n-    private StepModel transformStepToWebModel(Step step) {\n-        StepModel stepModel = StepModel.transformToWebStepModel(step);\n-        StepDefinition stepDef = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n-        stepModel.setModulePath(stepDef.getModulePath());\n-        return stepModel;\n-    }\n-\n-    private StepDefinition transformFromStep(StepDefinition stepDefinition, Step step, StepModel stepModel) {\n-        StepDefinition newStepDefinition = stepDefinition.transformFromStep(stepDefinition, step);\n-        newStepDefinition.setModulePath(stepModel.getModulePath());\n-        return newStepDefinition;\n-    }\n-\n-    private String getStepKeyInStepMap(Flow flow, String stepId) {\n-        if (flow == null || StringUtils.isEmpty(stepId)) {\n-            return null;\n-        }\n-\n-        // Split on the last occurrence of \"-\"\n-        String[] stepStr = stepId.split(\"-(?!.*-)\");\n-\n-        if (stepStr.length == 2) {\n-            String name = stepStr[0];\n-            String type = stepStr[1];\n-            String[] key = new String[1];\n-\n-            flow.getSteps().forEach((k, v) -> {\n-                if (name.equals(v.getName()) && type.equalsIgnoreCase(v.getStepDefinitionType().toString())) {\n-                    key[0] = k;\n-                }\n-            });\n-            return key[0];\n-        }\n-        return null;\n-    }\n-\n-    private StepDefinition getDefaultStepDefinitionFromResources(String resourcePath, StepDefinition.StepDefinitionType stepDefinitionType) {\n-        try (InputStream in = FlowManagerService.class.getClassLoader().getResourceAsStream(resourcePath)) {\n-            JSONObject jsonObject = new JSONObject(IOUtils.toString(in));\n-            StepDefinition defaultStep = StepDefinition.create(stepDefinitionType.toString(), stepDefinitionType);\n-            defaultStep.deserialize(jsonObject.jsonNode());\n-            return defaultStep;\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4222:Create endpoints for getting all flows, all steps in a flow"}, {"oid": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps"}, {"oid": "a1c31a11c432f263c2fe29a3f9f9c8fdec957d71", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Move in flow run logic (#3578)"}, {"oid": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-4544: Make FlowRunner compatible with session based HubConfig"}, {"oid": "e0636c8b693e578003c938a0c794109041f65122", "committedDate": "2020-04-02 11:37:03 -0700", "message": "DHFPROD-4692: Improved test framework for one-ui"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3Mjg1MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369872851", "body": "This all seems logic that would go into the DS endpoint. @aebadirad What are your thoughts on that? That would require calling ML first. But it would get rid of a ton of code in Java and move it into a more interesting DS endpoint that can see if the flow exists already, and create it if not or update it otherwise. ", "bodyText": "This all seems logic that would go into the DS endpoint. @aebadirad What are your thoughts on that? That would require calling ML first. But it would get rid of a ton of code in Java and move it into a more interesting DS endpoint that can see if the flow exists already, and create it if not or update it otherwise.", "bodyHTML": "<p dir=\"auto\">This all seems logic that would go into the DS endpoint. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/aebadirad/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aebadirad\">@aebadirad</a> What are your thoughts on that? That would require calling ML first. But it would get rid of a ton of code in Java and move it into a more interesting DS endpoint that can see if the flow exists already, and create it if not or update it otherwise.</p>", "author": "rjrudin", "createdAt": "2020-01-23T00:07:19Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+        JSONObject jsonObject;\n+        try {\n+            jsonObject = new JSONObject(flowJson);\n+\n+            JSONUtils.trimText(jsonObject, \"separator\");\n+        }\n+        catch (IOException e) {\n+            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n+        }\n+\n+        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n+            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n+        }\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        if (!isFlowPresent) {", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\nindex 1464f3a40..8999e8f19 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n", "chunk": "@@ -52,26 +85,7 @@ public class FlowManagerService {\n         if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n             throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n         }\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-        if (!isFlowPresent) {\n-            if (flowManager.isFlowExisted(flowName)) {\n-                throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n-            }\n-            flow = new FlowImpl();\n-            flow.setName(flowName);\n-        }\n-        else {\n-            //for PUT updating\n-            flow = flowManager.getFlow(flowName);\n-            if (flow == null) {\n-                throw new DataHubException(\"Changing flow name not supported.\");\n-            }\n-        }\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n+        return jsonObject;\n     }\n \n     public Flow getFlow(String flowName) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\nindex 1464f3a40..8999e8f19 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n", "chunk": "@@ -52,26 +85,7 @@ public class FlowManagerService {\n         if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n             throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n         }\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-        if (!isFlowPresent) {\n-            if (flowManager.isFlowExisted(flowName)) {\n-                throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n-            }\n-            flow = new FlowImpl();\n-            flow.setName(flowName);\n-        }\n-        else {\n-            //for PUT updating\n-            flow = flowManager.getFlow(flowName);\n-            if (flow == null) {\n-                throw new DataHubException(\"Changing flow name not supported.\");\n-            }\n-        }\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n+        return jsonObject;\n     }\n \n     public Flow getFlow(String flowName) {\n", "next_change": {"commit": "e0636c8b693e578003c938a0c794109041f65122", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\ndeleted file mode 100644\nindex 8999e8f19..000000000\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ /dev/null\n", "chunk": "@@ -1,302 +0,0 @@\n-package com.marklogic.hub.curation.services;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.hub.FlowManager;\n-import com.marklogic.hub.StepDefinitionManager;\n-import com.marklogic.hub.error.DataHubProjectException;\n-import com.marklogic.hub.oneui.exceptions.DataHubException;\n-import com.marklogic.hub.flow.Flow;\n-import com.marklogic.hub.flow.impl.FlowImpl;\n-import com.marklogic.hub.oneui.models.StepModel;\n-import com.marklogic.hub.scaffold.Scaffolding;\n-import com.marklogic.hub.step.StepDefinition;\n-import com.marklogic.hub.step.impl.Step;\n-import com.marklogic.hub.util.json.JSONObject;\n-import com.marklogic.hub.util.json.JSONUtils;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.EnumUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.BadRequestException;\n-import javax.ws.rs.NotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-@Service\n-public class FlowManagerService {\n-\n-    @Autowired\n-    private FlowManager flowManager;\n-\n-    @Autowired\n-    private StepDefinitionManager stepDefinitionManager;\n-\n-    @Autowired\n-    private Scaffolding scaffolding;\n-\n-    public Flow updateFlow(String flowJson) {\n-        //for PUT updating\n-        JSONObject jsonObject = processPayload(flowJson);\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-        flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n-                \"is made which is prohibited \");\n-        }\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n-    }\n-\n-    public Flow createFlow(String flowJson) {\n-        JSONObject jsonObject = processPayload(flowJson);\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-\n-        if (flowManager.isFlowExisted(flowName)) {\n-            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n-        }\n-        flow = new FlowImpl();\n-        flow.setName(flowName);\n-\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n-    }\n-\n-    private JSONObject processPayload(String flowJson) {\n-        JSONObject jsonObject;\n-        try {\n-            jsonObject = new JSONObject(flowJson);\n-\n-            JSONUtils.trimText(jsonObject, \"separator\");\n-        }\n-        catch (IOException e) {\n-            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n-        }\n-\n-        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n-            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n-        }\n-        return jsonObject;\n-    }\n-\n-    public Flow getFlow(String flowName) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new NotFoundException(flowName + \" not found!\");\n-        }\n-        return flow;\n-    }\n-\n-    public void deleteFlow(String flowName) {\n-        flowManager.deleteFlow(flowName);\n-    }\n-\n-    public StepModel getStep(String flowName, String stepId) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new NotFoundException(flowName + \" not found.\");\n-        }\n-\n-        Step step = flow.getStep(getStepKeyInStepMap(flow, stepId));\n-        if (step == null) {\n-            throw new NotFoundException(stepId + \" not found.\");\n-        }\n-\n-        return transformStepToWebModel(step);\n-    }\n-\n-    public StepModel createStep(String flowName, Integer stepOrder, String stepId, String stringStep) {\n-        StepModel stepModel;\n-        JsonNode stepJson;\n-        Flow flow = flowManager.getFlow(flowName);\n-        Step existingStep = flow.getStep(getStepKeyInStepMap(flow, stepId));\n-\n-        if (existingStep == null && !StringUtils.isEmpty(stepId)) {\n-            throw new NotFoundException(\"Step \" + stepId + \" Not Found\");\n-        }\n-\n-        try {\n-            stepJson = JSONObject.readInput(stringStep);\n-\n-            JSONUtils.trimText(stepJson, \"separator\");\n-\n-            stepModel = StepModel.fromJson(stepJson);\n-        }\n-        catch (IOException e) {\n-            throw new BadRequestException(\"Error parsing JSON\");\n-        }\n-\n-        if (stepModel == null) {\n-            throw new BadRequestException();\n-        }\n-\n-        Step step = StepModel.transformToCoreStepModel(stepModel, stepJson);\n-\n-        if (step.getStepDefinitionType() == null) {\n-            throw new BadRequestException(\"Invalid Step Definition Type\");\n-        }\n-\n-        if (step.getStepDefinitionName() == null) {\n-            throw new BadRequestException(\"Invalid Step Definition Name\");\n-        }\n-\n-        if (stepId != null) {\n-            if (!stepId.equals(step.getName() + \"-\" + step.getStepDefinitionType())) {\n-                throw new BadRequestException(\"Changing step name or step type not supported.\");\n-            }\n-        }\n-        if(!EnumUtils.isValidEnumIgnoreCase(StepDefinition.StepDefinitionType.class, step.getStepDefinitionType().toString())) {\n-            throw new BadRequestException(\"Invalid Step Type\");\n-        }\n-\n-        step = upsertStepDefinition(stepModel, step);\n-\n-        Map<String, Step> currSteps = flow.getSteps();\n-        if (stepId != null) {\n-            String key = getStepKeyInStepMap(flow, stepId);\n-            if (StringUtils.isNotEmpty(key)) {\n-                currSteps.put(key, step);\n-            }\n-            flow.setSteps(currSteps);\n-        }\n-        else {\n-            if (stepOrder == null || stepOrder > currSteps.size()) {\n-                currSteps.put(String.valueOf(currSteps.size() + 1), step);\n-            }\n-            else {\n-                Map<String, Step> newSteps = new LinkedHashMap<>();\n-                final Integer[] count = {1};\n-                Step finalStep = step;\n-                currSteps.values().forEach(s -> {\n-                    if (count[0].equals(stepOrder)) {\n-                        newSteps.put(String.valueOf(count[0]++), finalStep);\n-                    }\n-                    newSteps.put(String.valueOf(count[0]), s);\n-                    ++count[0];\n-                });\n-                flow.setSteps(newSteps);\n-            }\n-        }\n-\n-        if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n-        }\n-\n-        flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private Step mergeDefaultStepDefinitionIntoStep(StepModel stepModel, Step step) {\n-        String stepType = step.getStepDefinitionType().toString().toLowerCase();\n-        StepDefinition defaultStepDefinition = getDefaultStepDefinitionFromResources(\"hub-internal-artifacts/step-definitions/\" + stepType + \"/marklogic/\"+ step.getStepDefinitionName() +\".step.json\", step.getStepDefinitionType());\n-        Step defaultStep = defaultStepDefinition.transformToStep(step.getName(), defaultStepDefinition, new Step());\n-        return StepModel.mergeFields(stepModel, defaultStep, step);\n-    }\n-\n-    private Step upsertStepDefinition(StepModel stepModel, Step step) {\n-        if (stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType()) != null) {\n-            String stepType = step.getStepDefinitionType().toString().toLowerCase();\n-            if(step.getStepDefinitionName().equalsIgnoreCase(\"default-\" + stepType) || \"entity-services-mapping\".equalsIgnoreCase(step.getStepDefinitionName())) {\n-                step = mergeDefaultStepDefinitionIntoStep(stepModel, step);\n-            }\n-            else {\n-                StepDefinition oldStepDefinition = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n-                StepDefinition stepDefinition = transformFromStep(oldStepDefinition, step, stepModel);\n-                stepDefinitionManager.saveStepDefinition(stepDefinition);\n-            }\n-        }\n-        else {\n-            String stepDefName = step.getStepDefinitionName();\n-            StepDefinition.StepDefinitionType stepDefType = step.getStepDefinitionType();\n-            String modulePath = \"/custom-modules/\" + stepDefType.toString().toLowerCase() + \"/\" + stepDefName + \"/main.sjs\";\n-\n-            StepDefinition stepDefinition = StepDefinition.create(stepDefName, stepDefType);\n-            stepDefinition = transformFromStep(stepDefinition, step, stepModel);\n-\n-            scaffolding.createCustomModule(stepDefName, stepDefType.toString());\n-            stepDefinition.setModulePath(modulePath);\n-            stepDefinitionManager.saveStepDefinition(stepDefinition);\n-        }\n-        return step;\n-    }\n-\n-    public void deleteStep(String flowName, String stepId) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        String key = getStepKeyInStepMap(flow, stepId);\n-\n-        if (StringUtils.isEmpty(key)) {\n-            throw new BadRequestException(\"Invalid Step Id\");\n-        }\n-\n-        try {\n-            flowManager.deleteStep(flow, key);\n-        }\n-        catch (DataHubProjectException e) {\n-            throw new NotFoundException(e.getMessage());\n-        }\n-    }\n-\n-    /*\n-    The core and web models for steps are different, webModel has 'modulePath' which provides the uri of the main.sjs\n-    whereas it is not present in the core step model. Hence the following 2 transform methods additionally are meant to\n-    set modulePaths in 'StepModel' and 'StepDefinition' .\n-     */\n-    private StepModel transformStepToWebModel(Step step) {\n-        StepModel stepModel = StepModel.transformToWebStepModel(step);\n-        StepDefinition stepDef = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n-        stepModel.setModulePath(stepDef.getModulePath());\n-        return stepModel;\n-    }\n-\n-    private StepDefinition transformFromStep(StepDefinition stepDefinition, Step step, StepModel stepModel) {\n-        StepDefinition newStepDefinition = stepDefinition.transformFromStep(stepDefinition, step);\n-        newStepDefinition.setModulePath(stepModel.getModulePath());\n-        return newStepDefinition;\n-    }\n-\n-    private String getStepKeyInStepMap(Flow flow, String stepId) {\n-        if (flow == null || StringUtils.isEmpty(stepId)) {\n-            return null;\n-        }\n-\n-        // Split on the last occurrence of \"-\"\n-        String[] stepStr = stepId.split(\"-(?!.*-)\");\n-\n-        if (stepStr.length == 2) {\n-            String name = stepStr[0];\n-            String type = stepStr[1];\n-            String[] key = new String[1];\n-\n-            flow.getSteps().forEach((k, v) -> {\n-                if (name.equals(v.getName()) && type.equalsIgnoreCase(v.getStepDefinitionType().toString())) {\n-                    key[0] = k;\n-                }\n-            });\n-            return key[0];\n-        }\n-        return null;\n-    }\n-\n-    private StepDefinition getDefaultStepDefinitionFromResources(String resourcePath, StepDefinition.StepDefinitionType stepDefinitionType) {\n-        try (InputStream in = FlowManagerService.class.getClassLoader().getResourceAsStream(resourcePath)) {\n-            JSONObject jsonObject = new JSONObject(IOUtils.toString(in));\n-            StepDefinition defaultStep = StepDefinition.create(stepDefinitionType.toString(), stepDefinitionType);\n-            defaultStep.deserialize(jsonObject.jsonNode());\n-            return defaultStep;\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4222:Create endpoints for getting all flows, all steps in a flow"}, {"oid": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps"}, {"oid": "a1c31a11c432f263c2fe29a3f9f9c8fdec957d71", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Move in flow run logic (#3578)"}, {"oid": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-4544: Make FlowRunner compatible with session based HubConfig"}, {"oid": "e0636c8b693e578003c938a0c794109041f65122", "committedDate": "2020-04-02 11:37:03 -0700", "message": "DHFPROD-4692: Improved test framework for one-ui"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3Mjk3OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369872979", "body": "I would think the client shouldn't have to tell the service whether the flow exists yet or not - the service should know how to figure that out. The client just wants to say - here's my JSON, please save it. ", "bodyText": "I would think the client shouldn't have to tell the service whether the flow exists yet or not - the service should know how to figure that out. The client just wants to say - here's my JSON, please save it.", "bodyHTML": "<p dir=\"auto\">I would think the client shouldn't have to tell the service whether the flow exists yet or not - the service should know how to figure that out. The client just wants to say - here's my JSON, please save it.</p>", "author": "rjrudin", "createdAt": "2020-01-23T00:07:51Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.StepDefinitionManager;\n+import com.marklogic.hub.error.DataHubProjectException;\n+import com.marklogic.hub.oneui.exceptions.DataHubException;\n+import com.marklogic.hub.flow.Flow;\n+import com.marklogic.hub.flow.impl.FlowImpl;\n+import com.marklogic.hub.oneui.models.StepModel;\n+import com.marklogic.hub.scaffold.Scaffolding;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+import com.marklogic.hub.util.json.JSONUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.EnumUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.NotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+@Service\n+public class FlowManagerService {\n+\n+    @Autowired\n+    private FlowManager flowManager;\n+\n+    @Autowired\n+    private StepDefinitionManager stepDefinitionManager;\n+\n+    @Autowired\n+    private Scaffolding scaffolding;\n+\n+    public Flow createFlow(String flowJson, boolean isFlowPresent) {", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\nindex 1464f3a40..8999e8f19 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n", "chunk": "@@ -38,7 +38,40 @@ public class FlowManagerService {\n     @Autowired\n     private Scaffolding scaffolding;\n \n-    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+    public Flow updateFlow(String flowJson) {\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    public Flow createFlow(String flowJson) {\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+\n+        if (flowManager.isFlowExisted(flowName)) {\n+            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n+        }\n+        flow = new FlowImpl();\n+        flow.setName(flowName);\n+\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n         JSONObject jsonObject;\n         try {\n             jsonObject = new JSONObject(flowJson);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\nindex 1464f3a40..8999e8f19 100644\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n", "chunk": "@@ -38,7 +38,40 @@ public class FlowManagerService {\n     @Autowired\n     private Scaffolding scaffolding;\n \n-    public Flow createFlow(String flowJson, boolean isFlowPresent) {\n+    public Flow updateFlow(String flowJson) {\n+        //for PUT updating\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+        flow = flowManager.getFlow(flowName);\n+        if (flow == null) {\n+            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n+                \"is made which is prohibited \");\n+        }\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    public Flow createFlow(String flowJson) {\n+        JSONObject jsonObject = processPayload(flowJson);\n+\n+        String flowName = jsonObject.getString(\"name\");\n+        Flow flow;\n+\n+        if (flowManager.isFlowExisted(flowName)) {\n+            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n+        }\n+        flow = new FlowImpl();\n+        flow.setName(flowName);\n+\n+        flow.deserialize(jsonObject.jsonNode());\n+        flowManager.saveFlow(flow);\n+        return flow;\n+    }\n+\n+    private JSONObject processPayload(String flowJson) {\n         JSONObject jsonObject;\n         try {\n             jsonObject = new JSONObject(flowJson);\n", "next_change": {"commit": "e0636c8b693e578003c938a0c794109041f65122", "changed_code": [{"header": "diff --git a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java b/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\ndeleted file mode 100644\nindex 8999e8f19..000000000\n--- a/one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java\n+++ /dev/null\n", "chunk": "@@ -1,302 +0,0 @@\n-package com.marklogic.hub.curation.services;\n-\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.marklogic.hub.FlowManager;\n-import com.marklogic.hub.StepDefinitionManager;\n-import com.marklogic.hub.error.DataHubProjectException;\n-import com.marklogic.hub.oneui.exceptions.DataHubException;\n-import com.marklogic.hub.flow.Flow;\n-import com.marklogic.hub.flow.impl.FlowImpl;\n-import com.marklogic.hub.oneui.models.StepModel;\n-import com.marklogic.hub.scaffold.Scaffolding;\n-import com.marklogic.hub.step.StepDefinition;\n-import com.marklogic.hub.step.impl.Step;\n-import com.marklogic.hub.util.json.JSONObject;\n-import com.marklogic.hub.util.json.JSONUtils;\n-import org.apache.commons.io.IOUtils;\n-import org.apache.commons.lang3.EnumUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.BadRequestException;\n-import javax.ws.rs.NotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-@Service\n-public class FlowManagerService {\n-\n-    @Autowired\n-    private FlowManager flowManager;\n-\n-    @Autowired\n-    private StepDefinitionManager stepDefinitionManager;\n-\n-    @Autowired\n-    private Scaffolding scaffolding;\n-\n-    public Flow updateFlow(String flowJson) {\n-        //for PUT updating\n-        JSONObject jsonObject = processPayload(flowJson);\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-        flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new DataHubException(\"Either the flow \"+ flowName +\" doesn't exist or an attempt to change flow name \" +\n-                \"is made which is prohibited \");\n-        }\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n-    }\n-\n-    public Flow createFlow(String flowJson) {\n-        JSONObject jsonObject = processPayload(flowJson);\n-\n-        String flowName = jsonObject.getString(\"name\");\n-        Flow flow;\n-\n-        if (flowManager.isFlowExisted(flowName)) {\n-            throw new DataHubException(\"A Flow with \" + flowName + \" already exists.\");\n-        }\n-        flow = new FlowImpl();\n-        flow.setName(flowName);\n-\n-        flow.deserialize(jsonObject.jsonNode());\n-        flowManager.saveFlow(flow);\n-        return flow;\n-    }\n-\n-    private JSONObject processPayload(String flowJson) {\n-        JSONObject jsonObject;\n-        try {\n-            jsonObject = new JSONObject(flowJson);\n-\n-            JSONUtils.trimText(jsonObject, \"separator\");\n-        }\n-        catch (IOException e) {\n-            throw new DataHubException(\"Unable to parse flow json string : \" + e.getMessage());\n-        }\n-\n-        if (!jsonObject.isExist(\"name\") || StringUtils.isEmpty(jsonObject.getString(\"name\"))) {\n-            throw new BadRequestException(\"Flow Name not provided. Flow Name is required.\");\n-        }\n-        return jsonObject;\n-    }\n-\n-    public Flow getFlow(String flowName) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new NotFoundException(flowName + \" not found!\");\n-        }\n-        return flow;\n-    }\n-\n-    public void deleteFlow(String flowName) {\n-        flowManager.deleteFlow(flowName);\n-    }\n-\n-    public StepModel getStep(String flowName, String stepId) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        if (flow == null) {\n-            throw new NotFoundException(flowName + \" not found.\");\n-        }\n-\n-        Step step = flow.getStep(getStepKeyInStepMap(flow, stepId));\n-        if (step == null) {\n-            throw new NotFoundException(stepId + \" not found.\");\n-        }\n-\n-        return transformStepToWebModel(step);\n-    }\n-\n-    public StepModel createStep(String flowName, Integer stepOrder, String stepId, String stringStep) {\n-        StepModel stepModel;\n-        JsonNode stepJson;\n-        Flow flow = flowManager.getFlow(flowName);\n-        Step existingStep = flow.getStep(getStepKeyInStepMap(flow, stepId));\n-\n-        if (existingStep == null && !StringUtils.isEmpty(stepId)) {\n-            throw new NotFoundException(\"Step \" + stepId + \" Not Found\");\n-        }\n-\n-        try {\n-            stepJson = JSONObject.readInput(stringStep);\n-\n-            JSONUtils.trimText(stepJson, \"separator\");\n-\n-            stepModel = StepModel.fromJson(stepJson);\n-        }\n-        catch (IOException e) {\n-            throw new BadRequestException(\"Error parsing JSON\");\n-        }\n-\n-        if (stepModel == null) {\n-            throw new BadRequestException();\n-        }\n-\n-        Step step = StepModel.transformToCoreStepModel(stepModel, stepJson);\n-\n-        if (step.getStepDefinitionType() == null) {\n-            throw new BadRequestException(\"Invalid Step Definition Type\");\n-        }\n-\n-        if (step.getStepDefinitionName() == null) {\n-            throw new BadRequestException(\"Invalid Step Definition Name\");\n-        }\n-\n-        if (stepId != null) {\n-            if (!stepId.equals(step.getName() + \"-\" + step.getStepDefinitionType())) {\n-                throw new BadRequestException(\"Changing step name or step type not supported.\");\n-            }\n-        }\n-        if(!EnumUtils.isValidEnumIgnoreCase(StepDefinition.StepDefinitionType.class, step.getStepDefinitionType().toString())) {\n-            throw new BadRequestException(\"Invalid Step Type\");\n-        }\n-\n-        step = upsertStepDefinition(stepModel, step);\n-\n-        Map<String, Step> currSteps = flow.getSteps();\n-        if (stepId != null) {\n-            String key = getStepKeyInStepMap(flow, stepId);\n-            if (StringUtils.isNotEmpty(key)) {\n-                currSteps.put(key, step);\n-            }\n-            flow.setSteps(currSteps);\n-        }\n-        else {\n-            if (stepOrder == null || stepOrder > currSteps.size()) {\n-                currSteps.put(String.valueOf(currSteps.size() + 1), step);\n-            }\n-            else {\n-                Map<String, Step> newSteps = new LinkedHashMap<>();\n-                final Integer[] count = {1};\n-                Step finalStep = step;\n-                currSteps.values().forEach(s -> {\n-                    if (count[0].equals(stepOrder)) {\n-                        newSteps.put(String.valueOf(count[0]++), finalStep);\n-                    }\n-                    newSteps.put(String.valueOf(count[0]), s);\n-                    ++count[0];\n-                });\n-                flow.setSteps(newSteps);\n-            }\n-        }\n-\n-        if (existingStep != null && existingStep.isEqual(step)) {\n-            return transformStepToWebModel(existingStep);\n-        }\n-\n-        flowManager.saveFlow(flow);\n-        return transformStepToWebModel(step);\n-    }\n-\n-    private Step mergeDefaultStepDefinitionIntoStep(StepModel stepModel, Step step) {\n-        String stepType = step.getStepDefinitionType().toString().toLowerCase();\n-        StepDefinition defaultStepDefinition = getDefaultStepDefinitionFromResources(\"hub-internal-artifacts/step-definitions/\" + stepType + \"/marklogic/\"+ step.getStepDefinitionName() +\".step.json\", step.getStepDefinitionType());\n-        Step defaultStep = defaultStepDefinition.transformToStep(step.getName(), defaultStepDefinition, new Step());\n-        return StepModel.mergeFields(stepModel, defaultStep, step);\n-    }\n-\n-    private Step upsertStepDefinition(StepModel stepModel, Step step) {\n-        if (stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType()) != null) {\n-            String stepType = step.getStepDefinitionType().toString().toLowerCase();\n-            if(step.getStepDefinitionName().equalsIgnoreCase(\"default-\" + stepType) || \"entity-services-mapping\".equalsIgnoreCase(step.getStepDefinitionName())) {\n-                step = mergeDefaultStepDefinitionIntoStep(stepModel, step);\n-            }\n-            else {\n-                StepDefinition oldStepDefinition = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n-                StepDefinition stepDefinition = transformFromStep(oldStepDefinition, step, stepModel);\n-                stepDefinitionManager.saveStepDefinition(stepDefinition);\n-            }\n-        }\n-        else {\n-            String stepDefName = step.getStepDefinitionName();\n-            StepDefinition.StepDefinitionType stepDefType = step.getStepDefinitionType();\n-            String modulePath = \"/custom-modules/\" + stepDefType.toString().toLowerCase() + \"/\" + stepDefName + \"/main.sjs\";\n-\n-            StepDefinition stepDefinition = StepDefinition.create(stepDefName, stepDefType);\n-            stepDefinition = transformFromStep(stepDefinition, step, stepModel);\n-\n-            scaffolding.createCustomModule(stepDefName, stepDefType.toString());\n-            stepDefinition.setModulePath(modulePath);\n-            stepDefinitionManager.saveStepDefinition(stepDefinition);\n-        }\n-        return step;\n-    }\n-\n-    public void deleteStep(String flowName, String stepId) {\n-        Flow flow = flowManager.getFlow(flowName);\n-        String key = getStepKeyInStepMap(flow, stepId);\n-\n-        if (StringUtils.isEmpty(key)) {\n-            throw new BadRequestException(\"Invalid Step Id\");\n-        }\n-\n-        try {\n-            flowManager.deleteStep(flow, key);\n-        }\n-        catch (DataHubProjectException e) {\n-            throw new NotFoundException(e.getMessage());\n-        }\n-    }\n-\n-    /*\n-    The core and web models for steps are different, webModel has 'modulePath' which provides the uri of the main.sjs\n-    whereas it is not present in the core step model. Hence the following 2 transform methods additionally are meant to\n-    set modulePaths in 'StepModel' and 'StepDefinition' .\n-     */\n-    private StepModel transformStepToWebModel(Step step) {\n-        StepModel stepModel = StepModel.transformToWebStepModel(step);\n-        StepDefinition stepDef = stepDefinitionManager.getStepDefinition(step.getStepDefinitionName(), step.getStepDefinitionType());\n-        stepModel.setModulePath(stepDef.getModulePath());\n-        return stepModel;\n-    }\n-\n-    private StepDefinition transformFromStep(StepDefinition stepDefinition, Step step, StepModel stepModel) {\n-        StepDefinition newStepDefinition = stepDefinition.transformFromStep(stepDefinition, step);\n-        newStepDefinition.setModulePath(stepModel.getModulePath());\n-        return newStepDefinition;\n-    }\n-\n-    private String getStepKeyInStepMap(Flow flow, String stepId) {\n-        if (flow == null || StringUtils.isEmpty(stepId)) {\n-            return null;\n-        }\n-\n-        // Split on the last occurrence of \"-\"\n-        String[] stepStr = stepId.split(\"-(?!.*-)\");\n-\n-        if (stepStr.length == 2) {\n-            String name = stepStr[0];\n-            String type = stepStr[1];\n-            String[] key = new String[1];\n-\n-            flow.getSteps().forEach((k, v) -> {\n-                if (name.equals(v.getName()) && type.equalsIgnoreCase(v.getStepDefinitionType().toString())) {\n-                    key[0] = k;\n-                }\n-            });\n-            return key[0];\n-        }\n-        return null;\n-    }\n-\n-    private StepDefinition getDefaultStepDefinitionFromResources(String resourcePath, StepDefinition.StepDefinitionType stepDefinitionType) {\n-        try (InputStream in = FlowManagerService.class.getClassLoader().getResourceAsStream(resourcePath)) {\n-            JSONObject jsonObject = new JSONObject(IOUtils.toString(in));\n-            StepDefinition defaultStep = StepDefinition.create(stepDefinitionType.toString(), stepDefinitionType);\n-            defaultStep.deserialize(jsonObject.jsonNode());\n-            return defaultStep;\n-        }\n-        catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "b500ff08bfa633441d77b330a9a04e8b83fccdc4", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4222:Create endpoints for getting all flows, all steps in a flow"}, {"oid": "cd3118d9e741f18b74d26853d8ec2f23da30b630", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps"}, {"oid": "a1c31a11c432f263c2fe29a3f9f9c8fdec957d71", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-3922: Move in flow run logic (#3578)"}, {"oid": "4ec78e3ab88d5bd8c043f40a36ef5ab4a284d27a", "committedDate": "2020-03-12 17:11:26 -0700", "message": "DHFPROD-4544: Make FlowRunner compatible with session based HubConfig"}, {"oid": "e0636c8b693e578003c938a0c794109041f65122", "committedDate": "2020-04-02 11:37:03 -0700", "message": "DHFPROD-4692: Improved test framework for one-ui"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzM4Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r369873383", "body": "What's the benefit of this class? Can't we just pass a JsonNode between the browser and ML? That would significantly reduce the code in the Java middle tier and put a lot more smarts into ML. And we wouldn't need to convert a JsonNode into some other class and then back to a JsonNode. ", "bodyText": "What's the benefit of this class? Can't we just pass a JsonNode between the browser and ML? That would significantly reduce the code in the Java middle tier and put a lot more smarts into ML. And we wouldn't need to convert a JsonNode into some other class and then back to a JsonNode.", "bodyHTML": "<p dir=\"auto\">What's the benefit of this class? Can't we just pass a JsonNode between the browser and ML? That would significantly reduce the code in the Java middle tier and put a lot more smarts into ML. And we wouldn't need to convert a JsonNode into some other class and then back to a JsonNode.</p>", "author": "rjrudin", "createdAt": "2020-01-23T00:09:29Z", "path": "one-ui/src/main/java/com/marklogic/hub/oneui/models/StepModel.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.oneui.models;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.marklogic.hub.step.StepDefinition;\n+import com.marklogic.hub.step.impl.Step;\n+import com.marklogic.hub.util.json.JSONObject;\n+\n+import java.util.Iterator;\n+\n+public class StepModel {", "originalCommit": "e1806dfe7a7c6d1be2b3d1a962b5b888d9ce203b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDMxOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3490#discussion_r370310319", "bodyText": "The UI doesn't know anything about step definition. So, when some one creates a custom step, we have to create a custom step definition, main.sjs in addition to the step itself that goes inside the flow. So, the core and web models for steps are different, webModel (called StepModel.java) has 'modulePath' which provides the uri of the main.sjs\nwhereas it is not present in the core step model (Step.java). This is all inherited from 5.0 code codebase .", "author": "srinathgit", "createdAt": "2020-01-23T19:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzM4Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "Merge commit", "committedDate": null}, {"oid": "63437cc8cddb39f96fe23233cff28767154d8d77", "committedDate": "2020-03-02 11:21:36 -0800", "message": "DHFPROD-4104:Middle tier for flow/step CRUD"}, {"oid": "64adee6aa98ba9cc99dc456929c44508cc6bf86f", "committedDate": "2020-03-25 13:20:07 -0700", "message": "DHFPROD-4610:Remove \"fileLocations\" from flow declaration"}, {"oid": "87c8ade01c0b4e4cb2127e62b1e040b078f9e876", "committedDate": "2020-04-07 12:47:08 -0700", "message": "DHFPROD-4686:Update copyright"}, {"oid": "b188250dc05a70cb2f4d21c458184e6caa01de44", "committedDate": "2020-04-09 13:20:15 -0700", "message": "DHFPROD-4666: Rename one-ui to marklogic-data-hub-central"}]}, {"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "DHFPROD-4104:Middle tier for flow/step CRUD", "committedDate": "2020-01-23T19:38:22Z", "type": "commit"}, {"oid": "87e884495d1d2d75bfff2d6178d29e46eaeb566a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/87e884495d1d2d75bfff2d6178d29e46eaeb566a", "message": "DHFPROD-4104:Middle tier for flow/step CRUD", "committedDate": "2020-01-23T19:38:22Z", "type": "forcePushed"}]}