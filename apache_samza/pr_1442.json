{"pr_number": 1442, "pr_title": "SAMZA-2602: Dynamic heartbeat establish with new AM\t", "pr_author": "lakshmi-manasa-g", "pr_createdAt": "2020-11-17T21:32:06Z", "pr_url": "https://github.com/apache/samza/pull/1442", "timeline": [{"oid": "eeb7ab73762b8081430dd752ce71cc18c096ca4b", "url": "https://github.com/apache/samza/commit/eeb7ab73762b8081430dd752ce71cc18c096ca4b", "message": "Introduce config for cluster based job coordinator high availability", "committedDate": "2020-11-17T19:47:01Z", "type": "commit"}, {"oid": "8b3993662fefd3e958e0a0004af7d9f51778444e", "url": "https://github.com/apache/samza/commit/8b3993662fefd3e958e0a0004af7d9f51778444e", "message": "Dynamic heartbeat establish with new ApplicationMaster", "committedDate": "2020-11-17T21:29:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNTAwOQ==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527005009", "body": "Can we update the configurable table in docs?", "bodyText": "Can we update the configurable table in docs?", "bodyHTML": "<p dir=\"auto\">Can we update the configurable table in docs?</p>", "author": "mynameborat", "createdAt": "2020-11-19T16:03:49Z", "path": "samza-core/src/main/java/org/apache/samza/config/JobConfig.java", "diffHunk": "@@ -147,6 +147,11 @@\n \n   private static final String JOB_STARTPOINT_ENABLED = \"job.startpoint.enabled\";\n \n+  // Enable ClusterBasedJobCoordinator aka ApplicationMaster High Availability.\n+  // High availability allows new AM to establish connection with already running containers\n+  public static final String JOB_COORDINATOR_HIGH_AVAILABILITY_ENABLED = \"job.coordinator.high-availability.enabled\";", "originalCommit": "8b3993662fefd3e958e0a0004af7d9f51778444e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxMDMwNA==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527010304", "body": "Should this be configurable? This is tandem with the `sleepDurationForReconnectWithAM` determines how long we want to container to retry establishing connection with AM.\r\n\r\nThat said, it also means thats how long you can potentially have an overlapping containers (duplicate container) if AM dies and a new deployment happens. Hence, both of these should be configuration knobs and have good documentation around what the impact of these configurations are.", "bodyText": "Should this be configurable? This is tandem with the sleepDurationForReconnectWithAM determines how long we want to container to retry establishing connection with AM.\nThat said, it also means thats how long you can potentially have an overlapping containers (duplicate container) if AM dies and a new deployment happens. Hence, both of these should be configuration knobs and have good documentation around what the impact of these configurations are.", "bodyHTML": "<p dir=\"auto\">Should this be configurable? This is tandem with the <code>sleepDurationForReconnectWithAM</code> determines how long we want to container to retry establishing connection with AM.</p>\n<p dir=\"auto\">That said, it also means thats how long you can potentially have an overlapping containers (duplicate container) if AM dies and a new deployment happens. Hence, both of these should be configuration knobs and have good documentation around what the impact of these configurations are.</p>", "author": "mynameborat", "createdAt": "2020-11-19T16:10:38Z", "path": "samza-core/src/main/java/org/apache/samza/container/ContainerHeartbeatMonitor.java", "diffHunk": "@@ -34,26 +38,45 @@\n public class ContainerHeartbeatMonitor {\n   private static final Logger LOG = LoggerFactory.getLogger(ContainerHeartbeatMonitor.class);\n   private static final ThreadFactory THREAD_FACTORY = new HeartbeatThreadFactory();\n+  private static final CoordinatorStreamValueSerde SERDE = new CoordinatorStreamValueSerde(SetConfig.TYPE);\n+  private static final int RETRY_COUNT = 5;", "originalCommit": "8b3993662fefd3e958e0a0004af7d9f51778444e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMTUwOQ==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527021509", "body": "It might be nice to breakdown the check and the establishing part.\r\n[1] It makes it easier to write simpler tests but still tests each logic separately\r\n[2] allows handling and evolution of each modular functions. e.g we don't have any retry for establishing but only for checking today.\r\n\r\nwdyt?", "bodyText": "It might be nice to breakdown the check and the establishing part.\n[1] It makes it easier to write simpler tests but still tests each logic separately\n[2] allows handling and evolution of each modular functions. e.g we don't have any retry for establishing but only for checking today.\nwdyt?", "bodyHTML": "<p dir=\"auto\">It might be nice to breakdown the check and the establishing part.<br>\n[1] It makes it easier to write simpler tests but still tests each logic separately<br>\n[2] allows handling and evolution of each modular functions. e.g we don't have any retry for establishing but only for checking today.</p>\n<p dir=\"auto\">wdyt?</p>", "author": "mynameborat", "createdAt": "2020-11-19T16:25:30Z", "path": "samza-core/src/main/java/org/apache/samza/container/ContainerHeartbeatMonitor.java", "diffHunk": "@@ -84,6 +113,38 @@ public void stop() {\n     }\n   }\n \n+  private boolean checkAndEstablishConnectionWithNewAM() {", "originalCommit": "8b3993662fefd3e958e0a0004af7d9f51778444e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI5MzAyNQ==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527293025", "bodyText": "modular does sound good. but in this case, the smaller functions are really small and dont accomplish much else than a single call to client or store. Hence keeping this same. Also, doesnt have an advantage with testing.", "author": "lakshmi-manasa-g", "createdAt": "2020-11-20T00:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMTUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyMjA5NA==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527022094", "body": "minor: suggest naming this to create instead of get.", "bodyText": "minor: suggest naming this to create instead of get.", "bodyHTML": "<p dir=\"auto\">minor: suggest naming this to create instead of get.</p>", "author": "mynameborat", "createdAt": "2020-11-19T16:26:17Z", "path": "samza-core/src/main/java/org/apache/samza/container/ContainerHeartbeatMonitor.java", "diffHunk": "@@ -84,6 +113,38 @@ public void stop() {\n     }\n   }\n \n+  private boolean checkAndEstablishConnectionWithNewAM() {\n+    boolean response = false;\n+    int attempt = 1;\n+\n+    while (attempt <= RETRY_COUNT) {\n+      String newCoordinatorUrl = SERDE.fromBytes(coordinatorStreamStore.get(CoordinationConstants.YARN_COORDINATOR_URL));\n+      try {\n+        if (coordinatorUrl.equals(newCoordinatorUrl)) {\n+          LOG.info(\"Attempt {} to discover new AM. Sleep for {}ms before next attempt.\", attempt, sleepDurationForReconnectWithAM);\n+          Thread.sleep(sleepDurationForReconnectWithAM);\n+        } else {\n+          LOG.info(\"Found new AM: {}. Establishing heartbeat with the new AM.\", newCoordinatorUrl);\n+          coordinatorUrl = newCoordinatorUrl;\n+          containerHeartbeatClient = getContainerHeartbeatClient();\n+          response = containerHeartbeatClient.requestHeartbeat().isAlive();\n+          LOG.info(\"Received heartbeat response: {} from new AM: {}\", response, this.coordinatorUrl);\n+          break;\n+        }\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Interrupted during sleep.\");\n+        Thread.currentThread().interrupt();\n+      }\n+      attempt++;\n+    }\n+    return response;\n+  }\n+\n+  @VisibleForTesting\n+  ContainerHeartbeatClient getContainerHeartbeatClient() {", "originalCommit": "8b3993662fefd3e958e0a0004af7d9f51778444e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNDg5OQ==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527024899", "body": "This looks a bit strange as we are not recreating the heartbeat client for the sake of tests.\r\nIdeally, you want to verify if a new client is created with a new URL and that gets used.\r\n\r\n", "bodyText": "This looks a bit strange as we are not recreating the heartbeat client for the sake of tests.\nIdeally, you want to verify if a new client is created with a new URL and that gets used.", "bodyHTML": "<p dir=\"auto\">This looks a bit strange as we are not recreating the heartbeat client for the sake of tests.<br>\nIdeally, you want to verify if a new client is created with a new URL and that gets used.</p>", "author": "mynameborat", "createdAt": "2020-11-19T16:30:16Z", "path": "samza-core/src/test/java/org/apache/samza/container/TestContainerHeartbeatMonitor.java", "diffHunk": "@@ -93,6 +103,31 @@ public void testDoesNotCallbackWhenHeartbeatAlive() throws InterruptedException\n     verify(this.scheduler).shutdown();\n   }\n \n+  @Test\n+  public void testReestablishConnectionWithNewAM() throws InterruptedException {\n+    this.containerHeartbeatMonitor =\n+        spy(new ContainerHeartbeatMonitor(this.onExpired, this.containerHeartbeatClient, this.scheduler, COORDINATOR_URL,\n+            \"0\", coordinatorStreamStore, true, 10));\n+    CoordinatorStreamValueSerde serde = new CoordinatorStreamValueSerde(SetConfig.TYPE);\n+    byte[] newCoordinatorUrl = serde.toBytes(\"http://some-host-2.prod.linkedin.com\");\n+    ContainerHeartbeatResponse response1 = new ContainerHeartbeatResponse(false);\n+    ContainerHeartbeatResponse response2 = new ContainerHeartbeatResponse(true);\n+    when(this.containerHeartbeatClient.requestHeartbeat()).thenReturn(response1).thenReturn(response2);\n+    when(this.containerHeartbeatMonitor.getContainerHeartbeatClient()).thenReturn(this.containerHeartbeatClient);", "originalCommit": "8b3993662fefd3e958e0a0004af7d9f51778444e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI5MzA2OA==", "url": "https://github.com/apache/samza/pull/1442#discussion_r527293068", "bodyText": "the client's heartbeat response needs to be mocked and hence cant create a new one.\nupdated to return mock when using the new url.\nAlso added failure scenario tests", "author": "lakshmi-manasa-g", "createdAt": "2020-11-20T00:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNDg5OQ=="}], "type": "inlineReview"}, {"oid": "e5d1c986aafbbf9552dfb90fa59ea6eb95f1ed34", "url": "https://github.com/apache/samza/commit/e5d1c986aafbbf9552dfb90fa59ea6eb95f1ed34", "message": "address comments", "committedDate": "2020-11-20T00:18:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMDgyOQ==", "url": "https://github.com/apache/samza/pull/1442#discussion_r528730829", "body": "nit: inline instead as variables aren't used after and the getters carry explicit intent of what is being passed as arguments.", "bodyText": "nit: inline instead as variables aren't used after and the getters carry explicit intent of what is being passed as arguments.", "bodyHTML": "<p dir=\"auto\">nit: inline instead as variables aren't used after and the getters carry explicit intent of what is being passed as arguments.</p>", "author": "mynameborat", "createdAt": "2020-11-23T14:13:16Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/ContainerLaunchUtil.java", "diffHunk": "@@ -142,7 +143,14 @@ private static void run(\n           listener = new ClusterBasedProcessorLifecycleListener(config, processorLifecycleListener, container::shutdown);\n       container.setContainerListener(listener);\n \n-      ContainerHeartbeatMonitor heartbeatMonitor = createContainerHeartbeatMonitor(container);\n+      JobConfig jobConfig = new JobConfig(config);\n+      boolean isJobCoordinatorHighAvailabilityEnabled = jobConfig.getJobCoordinatorHighAvailabilityEnabled();\n+      long retryCount = jobConfig.getJobCoordinatorDynamicHeartbeatRetryCount();\n+      long sleepDurationForReconnectWithAM = jobConfig.getJobCoordinatorHeartbeatReconnectSleepDurationWithAmMs();", "originalCommit": "e5d1c986aafbbf9552dfb90fa59ea6eb95f1ed34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMTMwMA==", "url": "https://github.com/apache/samza/pull/1442#discussion_r528731300", "body": "nit: missing docs for the newly added parameters.", "bodyText": "nit: missing docs for the newly added parameters.", "bodyHTML": "<p dir=\"auto\">nit: missing docs for the newly added parameters.</p>", "author": "mynameborat", "createdAt": "2020-11-23T14:14:05Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/ContainerLaunchUtil.java", "diffHunk": "@@ -189,9 +197,13 @@ private static void run(\n   /**\n    * Creates a new container heartbeat monitor if possible.\n    * @param container the container to monitor\n+   * @param coordinatorStreamStore the metadata store to fetch coordinator url from\n+   * @param isJobCoordinatorHighAvailabilityEnabled whether coordinator HA is enabled to fetch new coordinator url", "originalCommit": "e5d1c986aafbbf9552dfb90fa59ea6eb95f1ed34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMjMxMg==", "url": "https://github.com/apache/samza/pull/1442#discussion_r528732312", "body": "Can we extract these to class level constants?\r\nPerhaps, name them `FAILURE_RESPONSE` and `SUCCESS_RESPONSE` to be explicit.", "bodyText": "Can we extract these to class level constants?\nPerhaps, name them FAILURE_RESPONSE and SUCCESS_RESPONSE to be explicit.", "bodyHTML": "<p dir=\"auto\">Can we extract these to class level constants?<br>\nPerhaps, name them <code>FAILURE_RESPONSE</code> and <code>SUCCESS_RESPONSE</code> to be explicit.</p>", "author": "mynameborat", "createdAt": "2020-11-23T14:15:27Z", "path": "samza-core/src/test/java/org/apache/samza/container/TestContainerHeartbeatMonitor.java", "diffHunk": "@@ -93,6 +103,79 @@ public void testDoesNotCallbackWhenHeartbeatAlive() throws InterruptedException\n     verify(this.scheduler).shutdown();\n   }\n \n+  @Test\n+  public void testReestablishConnectionWithNewAM() throws InterruptedException {\n+    String containerExecutionId = \"0\";\n+    String newCoordinatorUrl = \"http://some-host-2.prod.linkedin.com\";\n+    this.containerHeartbeatMonitor =\n+        spy(new ContainerHeartbeatMonitor(this.onExpired, this.containerHeartbeatClient, this.scheduler, COORDINATOR_URL,\n+            containerExecutionId, coordinatorStreamStore, true, 5, 10));\n+    CoordinatorStreamValueSerde serde = new CoordinatorStreamValueSerde(SetConfig.TYPE);\n+    ContainerHeartbeatResponse response1 = new ContainerHeartbeatResponse(false);\n+    ContainerHeartbeatResponse response2 = new ContainerHeartbeatResponse(true);", "originalCommit": "e5d1c986aafbbf9552dfb90fa59ea6eb95f1ed34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczNzEzMA==", "url": "https://github.com/apache/samza/pull/1442#discussion_r528737130", "body": "we should instead pass our own mocked executor which can run the task that is passed to it and decrement latch. Here is an example - https://github.com/apache/samza/pull/1334", "bodyText": "we should instead pass our own mocked executor which can run the task that is passed to it and decrement latch. Here is an example - #1334", "bodyHTML": "<p dir=\"auto\">we should instead pass our own mocked executor which can run the task that is passed to it and decrement latch. Here is an example - <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"589334412\" data-permission-text=\"Title is private\" data-url=\"https://github.com/apache/samza/issues/1334\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/apache/samza/pull/1334/hovercard\" href=\"https://github.com/apache/samza/pull/1334\">#1334</a></p>", "author": "mynameborat", "createdAt": "2020-11-23T14:22:26Z", "path": "samza-core/src/test/java/org/apache/samza/container/TestContainerHeartbeatMonitor.java", "diffHunk": "@@ -93,6 +103,79 @@ public void testDoesNotCallbackWhenHeartbeatAlive() throws InterruptedException\n     verify(this.scheduler).shutdown();\n   }\n \n+  @Test\n+  public void testReestablishConnectionWithNewAM() throws InterruptedException {\n+    String containerExecutionId = \"0\";\n+    String newCoordinatorUrl = \"http://some-host-2.prod.linkedin.com\";\n+    this.containerHeartbeatMonitor =\n+        spy(new ContainerHeartbeatMonitor(this.onExpired, this.containerHeartbeatClient, this.scheduler, COORDINATOR_URL,\n+            containerExecutionId, coordinatorStreamStore, true, 5, 10));\n+    CoordinatorStreamValueSerde serde = new CoordinatorStreamValueSerde(SetConfig.TYPE);\n+    ContainerHeartbeatResponse response1 = new ContainerHeartbeatResponse(false);\n+    ContainerHeartbeatResponse response2 = new ContainerHeartbeatResponse(true);\n+    when(this.containerHeartbeatClient.requestHeartbeat()).thenReturn(response1).thenReturn(response2);\n+    when(this.containerHeartbeatMonitor.createContainerHeartbeatClient(newCoordinatorUrl, containerExecutionId)).thenReturn(this.containerHeartbeatClient);\n+    when(this.coordinatorStreamStore.get(CoordinationConstants.YARN_COORDINATOR_URL)).thenReturn(serde.toBytes(newCoordinatorUrl));\n+\n+    this.containerHeartbeatMonitor.start();\n+    // wait for the executor to finish the heartbeat check task\n+    boolean fixedRateTaskCompleted = this.schedulerFixedRateExecutionLatch.await(2, TimeUnit.SECONDS);", "originalCommit": "e5d1c986aafbbf9552dfb90fa59ea6eb95f1ed34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "817dcba399cb274ea10c475d64c037202f59bc58", "url": "https://github.com/apache/samza/commit/817dcba399cb274ea10c475d64c037202f59bc58", "message": "address comments", "committedDate": "2020-11-25T01:49:12Z", "type": "commit"}]}