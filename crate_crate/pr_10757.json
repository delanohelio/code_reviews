{"pr_number": 10757, "pr_title": "Add the empty_string_as_null option for ``COPY FROM``.", "pr_author": "kovrus", "pr_createdAt": "2020-11-10T11:19:47Z", "pr_url": "https://github.com/crate/crate/pull/10757", "timeline": [{"oid": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "url": "https://github.com/crate/crate/commit/8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "message": "Add the empty_string_as_null option for ``COPY FROM``.\n\nIf ``empty_string_as_null`` is ``true``, then all column's values\nrepresented by an empty string, including a quoted empty string,\nare set to``NULL``.", "committedDate": "2020-11-16T09:17:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MDk4NA==", "url": "https://github.com/crate/crate/pull/10757#discussion_r524050984", "body": "```suggestion\r\n    public void test_streaming_of_file_uri_collect_phase_before_4_4_0() throws IOException {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void test_file_uri_collect_phase_before_4_4_0() throws IOException {\n          \n          \n            \n                public void test_streaming_of_file_uri_collect_phase_before_4_4_0() throws IOException {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">test_file_uri_collect_phase_before_4_4_0</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">test_streaming_of_file_uri_collect_phase_before_4_4_0</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "seut", "createdAt": "2020-11-16T09:54:54Z", "path": "server/src/test/java/io/crate/execution/dsl/phases/FileUriCollectPhaseTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dsl.phases;\n+\n+\n+import io.crate.analyze.CopyFromParserProperties;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataTypes;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static io.crate.testing.TestingHelpers.createReference;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+public class FileUriCollectPhaseTest {\n+\n+    @Test\n+    public void test_file_uri_collect_phase_before_4_4_0() throws IOException {", "originalCommit": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MTM1Ng==", "url": "https://github.com/crate/crate/pull/10757#discussion_r524051356", "body": "```suggestion\r\n    public void test_streaming_of_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void test_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {\n          \n          \n            \n                public void test_streaming_of_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">test_file_uri_collect_phase_after_or_on_4_4_0</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">test_streaming_of_file_uri_collect_phase_after_or_on_4_4_0</span>() throws <span class=\"pl-smi\">IOException</span> {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "seut", "createdAt": "2020-11-16T09:55:12Z", "path": "server/src/test/java/io/crate/execution/dsl/phases/FileUriCollectPhaseTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dsl.phases;\n+\n+\n+import io.crate.analyze.CopyFromParserProperties;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataTypes;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static io.crate.testing.TestingHelpers.createReference;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+public class FileUriCollectPhaseTest {\n+\n+    @Test\n+    public void test_file_uri_collect_phase_before_4_4_0() throws IOException {\n+        var expected = new FileUriCollectPhase(\n+            UUID.randomUUID(),\n+            0,\n+            \"test\",\n+            Collections.singletonList(\"noop_id\"),\n+            Literal.of(\"uri\"),\n+            List.of(createReference(\"name\", DataTypes.STRING)),\n+            Collections.emptyList(),\n+            null,\n+            false,\n+            new CopyFromParserProperties(true),\n+            FileUriCollectPhase.InputFormat.CSV\n+        );\n+\n+        BytesStreamOutput output = new BytesStreamOutput();\n+        output.setVersion(Version.V_4_3_0);\n+        expected.writeTo(output);\n+\n+        StreamInput input = output.bytes().streamInput();\n+        input.setVersion(Version.V_4_3_0);\n+        var actual = new FileUriCollectPhase(input);\n+\n+        assertThat(expected.nodeIds(), is(actual.nodeIds()));\n+        assertThat(expected.distributionInfo(), is(actual.distributionInfo()));\n+        assertThat(expected.targetUri(), is(actual.targetUri()));\n+        assertThat(expected.toCollect(), is(actual.toCollect()));\n+\n+        // parser properties option serialization implemented in crate >= 4.4.0\n+        assertThat(expected.parserProperties().emptyStringAsNull(), is(true));\n+        assertThat(actual.parserProperties().emptyStringAsNull(), is(false));\n+        assertThat(expected.inputFormat(), is(actual.inputFormat()));\n+        assertThat(expected.compression(), is(actual.compression()));\n+        assertThat(expected.sharedStorage(), is(actual.sharedStorage()));\n+    }\n+\n+    @Test\n+    public void test_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {", "originalCommit": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70386961cca915456eea5b8c8baa8a7a35eeb1b8", "url": "https://github.com/crate/crate/commit/70386961cca915456eea5b8c8baa8a7a35eeb1b8", "message": "Add the empty_string_as_null option for ``COPY FROM``.\n\nIf ``empty_string_as_null`` is ``true``, then all column's values\nrepresented by an empty string, including a quoted empty string,\nare set to``NULL``.", "committedDate": "2020-11-16T10:10:45Z", "type": "commit"}, {"oid": "70386961cca915456eea5b8c8baa8a7a35eeb1b8", "url": "https://github.com/crate/crate/commit/70386961cca915456eea5b8c8baa8a7a35eeb1b8", "message": "Add the empty_string_as_null option for ``COPY FROM``.\n\nIf ``empty_string_as_null`` is ``true``, then all column's values\nrepresented by an empty string, including a quoted empty string,\nare set to``NULL``.", "committedDate": "2020-11-16T10:10:45Z", "type": "forcePushed"}]}