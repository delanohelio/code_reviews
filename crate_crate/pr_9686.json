{"pr_number": 9686, "pr_title": "Add CHECK constraint syntax to create table statement", "pr_author": "marregui", "pr_createdAt": "2020-02-18T10:57:04Z", "pr_url": "https://github.com/crate/crate/pull/9686", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY1Mjg1Nw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r380652857", "body": "I think we should avoid having a global counter here. \r\n\r\n1) It would be global across all tables,\r\n2) It would cause race conditions because each node would have its own independent counter. So `CREATE TABLE\u00b4 on node1 would create the same number as `CREATE TABLE` on node2.\r\n\r\nI think we should keep the AST close to the statement and omit the name if it wasn't specified by the user.\r\nThis can be generated later on in the execution layer when we store the meta data.", "bodyText": "I think we should avoid having a global counter here.\n\nIt would be global across all tables,\nIt would cause race conditions because each node would have its own independent counter. So CREATE TABLE\u00b4 on node1 would create the same number as CREATE TABLE` on node2.\n\nI think we should keep the AST close to the statement and omit the name if it wasn't specified by the user.\nThis can be generated later on in the execution layer when we store the meta data.", "bodyHTML": "<p dir=\"auto\">I think we should avoid having a global counter here.</p>\n<ol dir=\"auto\">\n<li>It would be global across all tables,</li>\n<li>It would cause race conditions because each node would have its own independent counter. So <code>CREATE TABLE\u00b4 on node1 would create the same number as </code>CREATE TABLE` on node2.</li>\n</ol>\n<p dir=\"auto\">I think we should keep the AST close to the statement and omit the name if it wasn't specified by the user.<br>\nThis can be generated later on in the execution layer when we store the meta data.</p>", "author": "mfussenegger", "createdAt": "2020-02-18T12:53:52Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+\n+    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();", "originalCommit": "3276a93267c98b07946bd935b08120adf8b82c21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY1MjkzNQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r380652935", "body": "Is `implements ToXContent` necessary?", "bodyText": "Is implements ToXContent necessary?", "bodyHTML": "<p dir=\"auto\">Is <code>implements ToXContent</code> necessary?</p>", "author": "mfussenegger", "createdAt": "2020-02-18T12:54:02Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> implements ToXContent {", "originalCommit": "3276a93267c98b07946bd935b08120adf8b82c21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY1MzExNw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r380653117", "body": "Please no setters on AST structures.\r\n\r\nWe cache those for prepared statements, so we should make sure that they're immutable.", "bodyText": "Please no setters on AST structures.\nWe cache those for prepared statements, so we should make sure that they're immutable.", "bodyHTML": "<p dir=\"auto\">Please no setters on AST structures.</p>\n<p dir=\"auto\">We cache those for prepared statements, so we should make sure that they're immutable.</p>", "author": "mfussenegger", "createdAt": "2020-02-18T12:54:26Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> implements ToXContent {\n+\n+    private static final ConcurrentMap<String, AtomicInteger> CHECK_SUFFIXES = new ConcurrentHashMap<>();\n+\n+    private static String uniqueName(String tableName, String columnName) {\n+        if (null == tableName || tableName.isEmpty()) {\n+            throw new IllegalArgumentException(\"tableName cannot be null or empty\");\n+        }\n+        StringBuilder sb = new StringBuilder(tableName);\n+        if (null != columnName && false == columnName.isEmpty()) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check\");\n+        String prefix = sb.toString();\n+        AtomicInteger count = CHECK_SUFFIXES.computeIfAbsent(prefix, k -> new AtomicInteger(1));\n+        if (1 == count.get()) {\n+            return prefix;\n+        }\n+        return sb.append(\"_\").append(count.getAndIncrement()).toString();\n+    }\n+\n+\n+    private String name;\n+    private final Expression expression;\n+\n+    public CheckConstraint(@Nullable String name, Expression expression) {\n+        if (null != name && CHECK_SUFFIXES.containsKey(name)) {\n+            throw new IllegalArgumentException(String.format(\n+                Locale.ENGLISH, \"a check constraint [%s] already exists\", name));\n+        }\n+        this.name = name;\n+        this.expression = expression;\n+    }\n+\n+    public void setName(String tableName) {", "originalCommit": "3276a93267c98b07946bd935b08120adf8b82c21", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "94b875bfd3491c24b87140d0811b9bd7166d6f4b", "url": "https://github.com/crate/crate/commit/94b875bfd3491c24b87140d0811b9bd7166d6f4b", "message": "Add cluster state serialization/deserialization\n\nCheck constraints are uniquely named when the user fails to do this.", "committedDate": "2020-02-19T14:30:06Z", "type": "forcePushed"}, {"oid": "ae144e3d7940ac285d80e102d44ac3b512cafab0", "url": "https://github.com/crate/crate/commit/ae144e3d7940ac285d80e102d44ac3b512cafab0", "message": "Fix docu", "committedDate": "2020-02-19T15:15:26Z", "type": "forcePushed"}, {"oid": "dc939fbb29f138c44fcdad323dcdd6a37df48f0f", "url": "https://github.com/crate/crate/commit/dc939fbb29f138c44fcdad323dcdd6a37df48f0f", "message": "Start differentiating between column/table check\n\nThese are really the same, a table level check constraint, however\nthe grammar allows for their definition also at the column level\n(semantically they should be checked differently, in practice postgres\ndoes not enforce rules such as 'a column check must use only the\ncolumn itself, and no other columns').", "committedDate": "2020-02-20T10:17:44Z", "type": "forcePushed"}, {"oid": "5c62a4a7cfbea96aeffe59dbb99cba25f8ed1074", "url": "https://github.com/crate/crate/commit/5c62a4a7cfbea96aeffe59dbb99cba25f8ed1074", "message": "Fix docu", "committedDate": "2020-02-20T11:13:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r382002264", "body": "was wondering whether it is absolutely necessary to access the parent node context from the child node? imho, it would be nice to keep the scope of node visitor method limited to the node context. ", "bodyText": "was wondering whether it is absolutely necessary to access the parent node context from the child node? imho, it would be nice to keep the scope of node visitor method limited to the node context.", "bodyHTML": "<p dir=\"auto\">was wondering whether it is absolutely necessary to access the parent node context from the child node? imho, it would be nice to keep the scope of node visitor method limited to the node context.</p>", "author": "kovrus", "createdAt": "2020-02-20T13:38:11Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -786,6 +788,28 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n+        String name = null;\n+        if (null != ctx.CONSTRAINT()) {\n+            name = getIdentText(ctx.name);\n+        }\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return null == columnName ?\n+            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n+        return visitCheckConstraint(context.checkConstraint(), null);\n+    }\n+\n+    @Override\n+    public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;", "originalCommit": "8c4f80951a1390d5823a21002a0c3184fd168a79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU3ODk0MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r382578941", "bodyText": "It can be done, in fact we do not really need to have a column name, as it is only used to generate a name when the user does not provide one explicitly. But I will do that when I am closer to the end.\nAlso, if Node was an interface (while somehow still enforcing the hashcode, equals and tostring override in \u201csubclasses\u201d) I could only use one class for both cases (column/table level definitions) by having this class implement TableElement and ColumnConstraint, which would also be interfaces.", "author": "marregui", "createdAt": "2020-02-21T13:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTU0NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388781545", "bodyText": "@kovrus I need to have two classes because users can define CHECK constraints at both the column and the table level:\nCREATE TABLE t (\n   id int PRIMARY KEY,\n   name string CHECK(name != 'peter'),\n   size int,\n   CHECK(size >= 0)\n)\n\nEach class is under different hierarchies (ColumnConstraint, TableElement). This could be avoided by having these hierarchies be interfaces. As I am already in this situation, I gather the column name (this is the only way I can think of), and then I use the column name to produce the check-constraint's name. Later on, when you do SHOW CREATE TABLE t you will see that the constraints are defined at the table level. Were it not for the column name in the check-constaint's name, we would loose information, i.e. the fact that the original statement defined the constraint at the column level.\nIf it is ok to drop this knowledge, then I will proceed to downsize. But, my preference would be not to drop knowledge.", "author": "marregui", "createdAt": "2020-03-06T08:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5ODk2MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388798960", "bodyText": "not sure whether it is better, but maybe we can enrich (map) the constraint with a column name in the analyzer? I am just sceptical about traversing the AST within the AstBuilder traversing logic :) Imho, it makes parser grammar and node visitors logic harder to change and reason about.", "author": "kovrus", "createdAt": "2020-03-06T09:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398559152", "bodyText": "Followed your suggestion, thank you!", "author": "marregui", "createdAt": "2020-03-26T13:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMjI2NA=="}], "type": "inlineReview"}, {"oid": "1d66575dfd11df14083f46e146f83a620b77061c", "url": "https://github.com/crate/crate/commit/1d66575dfd11df14083f46e146f83a620b77061c", "message": "Implement the actual validation on the check constraints, insert", "committedDate": "2020-02-24T14:30:19Z", "type": "forcePushed"}, {"oid": "7390f68ffbbc105c2f048b104a161c15ece5b406", "url": "https://github.com/crate/crate/commit/7390f68ffbbc105c2f048b104a161c15ece5b406", "message": "Fix tests", "committedDate": "2020-02-24T19:30:16Z", "type": "forcePushed"}, {"oid": "70062f89add8005ae31a6c78358cb3ded5b45877", "url": "https://github.com/crate/crate/commit/70062f89add8005ae31a6c78358cb3ded5b45877", "message": "Add DDL create table tests and exercise upsert", "committedDate": "2020-02-24T20:09:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkwMg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r383757902", "body": "> // Either add the new term to `nonReserved` in `SqlBase.4g` or add a breaking changes entry and adapt this test \r\n\r\n:)", "bodyText": "// Either add the new term to nonReserved in SqlBase.4g or add a breaking changes entry and adapt this test\n\n:)", "bodyHTML": "<blockquote>\n<p dir=\"auto\">// Either add the new term to <code>nonReserved</code> in <code>SqlBase.4g</code> or add a breaking changes entry and adapt this test</p>\n</blockquote>\n<p dir=\"auto\">:)</p>", "author": "mfussenegger", "createdAt": "2020-02-25T09:35:21Z", "path": "sql-parser/src/test/java/io/crate/sql/IdentifiersTest.java", "diffHunk": "@@ -38,7 +38,7 @@ public void test_number_of_keywords() {\n         // Either add the new term to `nonReserved` in `SqlBase.4g` or add a breaking changes entry and adapt this test.\n         assertThat(\n             (int) Identifiers.KEYWORDS.stream().filter(Identifiers.Keyword::isReserved).count(),\n-            is(95)\n+            is(96)", "originalCommit": "70062f89add8005ae31a6c78358cb3ded5b45877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4ODAyMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r383788023", "bodyText": "Added to non-reserved.", "author": "marregui", "createdAt": "2020-02-25T10:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1NzkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1ODUxOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r383758519", "body": "I think the `DocTableInfo` should expose the checkConstraints in analyzed form (Symbol) - we don't want to have the overhead of analyzing the expressions on each insert.", "bodyText": "I think the DocTableInfo should expose the checkConstraints in analyzed form (Symbol) - we don't want to have the overhead of analyzing the expressions on each insert.", "bodyHTML": "<p dir=\"auto\">I think the <code>DocTableInfo</code> should expose the checkConstraints in analyzed form (Symbol) - we don't want to have the overhead of analyzing the expressions on each insert.</p>", "author": "mfussenegger", "createdAt": "2020-02-25T09:36:31Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -56,6 +67,29 @@\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n+        checkConstraints = initializeCheckConstraints(table, inputFactory, ctx);\n+    }\n+\n+    private Map<String, Tuple<Input<?>, String>> initializeCheckConstraints(DocTableInfo table,\n+                                                                            InputFactory inputFactory,\n+                                                                            InputFactory.Context<E> ctx) {\n+        ExpressionAnalyzer analyzer = new ExpressionAnalyzer(", "originalCommit": "70062f89add8005ae31a6c78358cb3ded5b45877", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ee42bc7d472c6c40a25dcff99af98fc4e2173f8", "url": "https://github.com/crate/crate/commit/5ee42bc7d472c6c40a25dcff99af98fc4e2173f8", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-26T11:33:32Z", "type": "forcePushed"}, {"oid": "94f6daef0ad47bbd41346f0fd732c4912d8caa2e", "url": "https://github.com/crate/crate/commit/94f6daef0ad47bbd41346f0fd732c4912d8caa2e", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:26:29Z", "type": "forcePushed"}, {"oid": "fcd41b3ab91a39994b7bf3f27cd472667f16eef4", "url": "https://github.com/crate/crate/commit/fcd41b3ab91a39994b7bf3f27cd472667f16eef4", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:29:05Z", "type": "forcePushed"}, {"oid": "b54baf00b87cf5997fedab124bf5a9ee97b4cead", "url": "https://github.com/crate/crate/commit/b54baf00b87cf5997fedab124bf5a9ee97b4cead", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:30:37Z", "type": "forcePushed"}, {"oid": "84db85d74f5d8fc51662f9cee8b8fe4f720475aa", "url": "https://github.com/crate/crate/commit/84db85d74f5d8fc51662f9cee8b8fe4f720475aa", "message": "Move analysis of check expression away from CheckConstraints\n\nto avoid analysing it on every insert and thus improve performance.", "committedDate": "2020-02-27T10:44:24Z", "type": "forcePushed"}, {"oid": "f41d763717a1986a5307dd7af79e5947a210045d", "url": "https://github.com/crate/crate/commit/f41d763717a1986a5307dd7af79e5947a210045d", "message": "Make CHECK a non-reserved work, because I fancy using it as a constraint name\n\nand because we can.", "committedDate": "2020-02-27T11:48:49Z", "type": "forcePushed"}, {"oid": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "url": "https://github.com/crate/crate/commit/474f529d7fa484fb08e256e64ede002ed4cfbde4", "message": "Make CHECK a non-reserved work, because I fancy using it as a constraint name\n\nand because we can.", "committedDate": "2020-02-27T11:52:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjMyMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385102320", "body": "```suggestion\r\n        if (ctx.CONSTRAINT() != null) {\r\n```\r\n\r\nWe usually don't use joda conditions. ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != ctx.CONSTRAINT()) {\n          \n          \n            \n                    if (ctx.CONSTRAINT() != null) {\n          \n      \n    \n    \n  \n\nWe usually don't use joda conditions.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">!=</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">ctx<span class=\"pl-k\">.</span>CONSTRAINT</span>()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">ctx<span class=\"pl-k\">.</span>CONSTRAINT</span>()<span class=\"x x-first\"> </span><span class=\"pl-k x\">!=</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">We usually don't use joda conditions.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T12:43:23Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -786,6 +788,28 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n+        String name = null;\n+        if (null != ctx.CONSTRAINT()) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzk3OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385103979", "body": "How about inlining the concrete logic into `visitColumnCheckConstraint` and `visitTableCheckConstraint` instead of having a nullable `columnName` and make a distinction again in `visitCheckConstraint`. Seems like a unnecessary generalization.", "bodyText": "How about inlining the concrete logic into visitColumnCheckConstraint and visitTableCheckConstraint instead of having a nullable columnName and make a distinction again in visitCheckConstraint. Seems like a unnecessary generalization.", "bodyHTML": "<p dir=\"auto\">How about inlining the concrete logic into <code>visitColumnCheckConstraint</code> and <code>visitTableCheckConstraint</code> instead of having a nullable <code>columnName</code> and make a distinction again in <code>visitCheckConstraint</code>. Seems like a unnecessary generalization.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T12:46:49Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -786,6 +788,28 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    private Node visitCheckConstraint(SqlBaseParser.CheckConstraintContext ctx, String columnName) {\n+        String name = null;\n+        if (null != ctx.CONSTRAINT()) {\n+            name = getIdentText(ctx.name);\n+        }\n+        Expression expression = (Expression) visit(ctx.expression);\n+        return null == columnName ?\n+            new CheckConstraint<>(name, expression) : new CheckColumnConstraint<>(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {\n+        return visitCheckConstraint(context.checkConstraint(), null);\n+    }\n+\n+    @Override\n+    public Node visitColumnCheckConstraint(SqlBaseParser.ColumnCheckConstraintContext context) {\n+        SqlBaseParser.ColumnDefinitionContext columnCtx = (SqlBaseParser.ColumnDefinitionContext) context.parent;\n+        String columnName = getIdentText(columnCtx.ident());\n+        return visitCheckConstraint(context.checkConstraint(), columnName);", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDUxMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385104510", "body": "Please also annotat the fields and the property methods with `@Nullable` if the attributes are really nullable", "bodyText": "Please also annotat the fields and the property methods with @Nullable if the attributes are really nullable", "bodyHTML": "<p dir=\"auto\">Please also annotat the fields and the property methods with <code>@Nullable</code> if the attributes are really nullable</p>", "author": "mfussenegger", "createdAt": "2020-02-27T12:48:03Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    private final String name;\n+    private final String columnName;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDcyNg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385104726", "body": "Same here, please add `@Nullable` annotations.", "bodyText": "Same here, please add @Nullable annotations.", "bodyHTML": "<p dir=\"auto\">Same here, please add <code>@Nullable</code> annotations.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T12:48:25Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjU1Nw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385106557", "body": "Shouldn't this method do something?", "bodyText": "Shouldn't this method do something?", "bodyHTML": "<p dir=\"auto\">Shouldn't this method do something?</p>", "author": "mfussenegger", "createdAt": "2020-02-27T12:52:13Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    private final String name;\n+    private final String columnName;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name,\n+                                 @Nullable String columnName,\n+                                 Expression expression) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public Expression expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint<>(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+    }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTIxMg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111212", "body": "Same here. I think this ought to do something.", "bodyText": "Same here. I think this ought to do something.", "bodyHTML": "<p dir=\"auto\">Same here. I think this ought to do something.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:11Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name,\n+                           Expression expression) {\n+        this.name = name;\n+        this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression(expression);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public Expression expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint(name, expression);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+    }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTMwOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111308", "body": "```suggestion\r\n                           T expression) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       Expression expression) {\n          \n          \n            \n                                       T expression) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                           <span class=\"pl-smi x x-first x-last\">Expression</span> expression) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                           <span class=\"pl-smi x x-first x-last\">T</span> expression) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:22Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name,\n+                           Expression expression) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTM4NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111384", "body": "```suggestion\r\n    private final T expression;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Expression expression;\n          \n          \n            \n                private final T expression;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">Expression</span> expression;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">T</span> expression;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:30Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    private final String name;\n+    private final Expression expression;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTQ2OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111468", "body": "```suggestion\r\n                                 T expression) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                             Expression expression) {\n          \n          \n            \n                                             T expression) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                 <span class=\"pl-smi x x-first x-last\">Expression</span> expression) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                 <span class=\"pl-smi x x-first x-last\">T</span> expression) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-02-27T13:02:40Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    private final String name;\n+    private final String columnName;\n+    private final Expression expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name,\n+                                 @Nullable String columnName,\n+                                 Expression expression) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTgyNg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111826", "body": "Please add `@Nullable` annotations for nullable parameters", "bodyText": "Please add @Nullable annotations for nullable parameters", "bodyHTML": "<p dir=\"auto\">Please add <code>@Nullable</code> annotations for nullable parameters</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:03:18Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -562,6 +574,37 @@ public static void changeToPartitionedByColumn(AnalyzedTableElements<Object> ele\n         return columns;\n     }\n \n+    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n+    }\n+\n+    private void addCheckConstraint(String fqRelationName, String columnName, String name, String expressionStr) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMTkwOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385111909", "body": "```suggestion\r\n        if (name == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == name) {\n          \n          \n            \n                    if (name == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">name</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">name</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-02-27T13:03:29Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -562,6 +574,37 @@ public static void changeToPartitionedByColumn(AnalyzedTableElements<Object> ele\n         return columns;\n     }\n \n+    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n+    }\n+\n+    private void addCheckConstraint(String fqRelationName, String columnName, String name, String expressionStr) {\n+        if (null == name) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMjE1OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385112159", "body": "You can check the return value of `put` instead, to avoid an extra `get` call", "bodyText": "You can check the return value of put instead, to avoid an extra get call", "bodyHTML": "<p dir=\"auto\">You can check the return value of <code>put</code> instead, to avoid an extra <code>get</code> call</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:03:59Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -562,6 +574,37 @@ public static void changeToPartitionedByColumn(AnalyzedTableElements<Object> ele\n         return columns;\n     }\n \n+    private static String uniqueCheckConstraintName(String fqTableName, String columnName) {\n+        StringBuilder sb = new StringBuilder(fqTableName.replaceAll(\"\\\\.\", \"_\"));\n+        if (null != columnName) {\n+            sb.append(\"_\").append(columnName);\n+        }\n+        sb.append(\"_check_\");\n+        String uuid = UUID.randomUUID().toString();\n+        int idx = uuid.lastIndexOf(\"-\");\n+        sb.append(idx > 0 ? uuid.substring(idx + 1) : uuid);\n+        return sb.toString();\n+    }\n+\n+    private void addCheckConstraint(String fqRelationName, String columnName, String name, String expressionStr) {\n+        if (null == name) {\n+            name = uniqueCheckConstraintName(fqRelationName, columnName);\n+        }\n+        if (null != checkConstraints.get(name)) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMjY3Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385112672", "body": "```suggestion\r\n            elements.addAll(tableInfo.checkConstraints());\r\n```\r\n\r\nThe `// check constraints` comment doesn't add any information. `addAll` also behaves the right way if the collection is empty.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // check constraints\n          \n          \n            \n                        if (!tableInfo.checkConstraints().isEmpty()) {\n          \n          \n            \n                            elements.addAll(tableInfo.checkConstraints());\n          \n          \n            \n                        }\n          \n          \n            \n                        elements.addAll(tableInfo.checkConstraints());\n          \n      \n    \n    \n  \n\nThe // check constraints comment doesn't add any information. addAll also behaves the right way if the collection is empty.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> check constraints</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>tableInfo<span class=\"pl-k\">.</span>checkConstraints()<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                elements<span class=\"pl-k\">.</span>addAll(tableInfo<span class=\"pl-k\">.</span>checkConstraints());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            elements<span class=\"pl-k\">.</span>addAll(tableInfo<span class=\"pl-k\">.</span>checkConstraints());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">The <code>// check constraints</code> comment doesn't add any information. <code>addAll</code> also behaves the right way if the collection is empty.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:05:06Z", "path": "sql/src/main/java/io/crate/analyze/MetaDataToASTNodeResolver.java", "diffHunk": "@@ -98,6 +98,10 @@ public Extractor(DocTableInfo tableInfo) {\n             if (pk != null) elements.add(pk);\n             // index definitions\n             elements.addAll(extractIndexDefinitions());\n+            // check constraints\n+            if (!tableInfo.checkConstraints().isEmpty()) {\n+                elements.addAll(tableInfo.checkConstraints());\n+            }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzE2OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385113169", "body": "Is that a valid behavior?", "bodyText": "Is that a valid behavior?", "bodyHTML": "<p dir=\"auto\">Is that a valid behavior?</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:06:04Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -73,6 +86,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n+            Input<?> checkInput = checkEntry.getValue().v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (null == value) {\n+                continue;\n+            }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMTUyOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385211528", "bodyText": "I interpreted it so:\nIt should be noted that a check constraint is satisfied if the check expression evaluates to\ntrue or the null value. Since most expressions will evaluate to the null value if any operand \nis null, they will not prevent null values in the constrained columns. To ensure that a column\ndoes not contain null values, the not-null constraint described in the next section can be \nused.\n\nhttps://www.postgresql.org/docs/9.4/ddl-constraints.html", "author": "marregui", "createdAt": "2020-02-27T16:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODAxNQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278015", "bodyText": "Could you add short inline comment about this?\nIn other cases null evaluates to false, so this behavior here might look like a bug on the first glance.", "author": "mfussenegger", "createdAt": "2020-03-05T13:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzY3Mw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385113673", "body": "Can we get rid of the instanceof here? In this case I think the `CheckConstraints` shouldn't have any knowledge about what `T` instances are possible.", "bodyText": "Can we get rid of the instanceof here? In this case I think the CheckConstraints shouldn't have any knowledge about what T instances are possible.", "bodyHTML": "<p dir=\"auto\">Can we get rid of the instanceof here? In this case I think the <code>CheckConstraints</code> shouldn't have any knowledge about what <code>T</code> instances are possible.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:07:03Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -73,6 +86,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n+            Input<?> checkInput = checkEntry.getValue().v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (null == value) {\n+                continue;\n+            }\n+            if (!value.booleanValue()) {\n+                String checkName = checkEntry.getKey();\n+                String checkExpr = checkEntry.getValue().v2();\n+                Object offendingValues = values instanceof Doc ? ((Doc) values).getSource() : values;", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzQ0Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385213442", "bodyText": "Doc does not have a toString(), so in principle I could add it and print out only the value of sources... which to me is incorrect. Maybe T could extend WithRepresentableValues ?", "author": "marregui", "createdAt": "2020-02-27T16:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNDc3MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385114771", "body": "Can `i` really be null?", "bodyText": "Can i really be null?", "bodyHTML": "<p dir=\"auto\">Can <code>i</code> really be null?</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:09:20Z", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -115,7 +117,16 @@ public InformationSchemaIterables(final Schemas schemas,\n             .flatMap(r -> sequentialStream(new NotNullConstraintIterable(r)))\n             .iterator();\n \n-        constraints = () -> concat(sequentialStream(primaryKeyConstraints), sequentialStream(notnullConstraints))\n+        Iterable<ConstraintInfo> checkConstraints = () ->\n+            sequentialStream(relations)\n+            .filter(i -> i != null && !i.checkConstraints().isEmpty())", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNTUxMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385115510", "body": "If we're already working with the Stream API further above, do we even need this? E.g. Could use a `map(x -> new ConstraintInfo(...)`, no?", "bodyText": "If we're already working with the Stream API further above, do we even need this? E.g. Could use a map(x -> new ConstraintInfo(...), no?", "bodyHTML": "<p dir=\"auto\">If we're already working with the Stream API further above, do we even need this? E.g. Could use a <code>map(x -&gt; new ConstraintInfo(...)</code>, no?</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:10:50Z", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -280,6 +291,43 @@ public ConstraintInfo next() {\n         }\n     }\n \n+    static class CheckConstraintIterable implements Iterable<ConstraintInfo> {\n+\n+        private final RelationInfo info;\n+\n+        CheckConstraintIterable(RelationInfo info) {\n+            this.info = info;\n+        }\n+\n+        @Override\n+        public Iterator<ConstraintInfo> iterator() {\n+            return new CheckConstraintIterator(info);\n+        }\n+    }\n+\n+    static class CheckConstraintIterator implements Iterator<ConstraintInfo> {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNTc3Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385115772", "body": "Is this still needed?", "bodyText": "Is this still needed?", "bodyHTML": "<p dir=\"auto\">Is this still needed?</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:11:20Z", "path": "sql/src/main/java/io/crate/expression/InputFactory.java", "diffHunk": "@@ -78,6 +78,10 @@ public InputFactory(Functions functions) {\n         this.functions = functions;\n     }\n \n+    public Functions getFunctions() {\n+        return functions;\n+    }\n+", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjI2MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385116260", "body": "I think we either shouldn't have this class, but instead use `CheckConstriant<Symbol>` directly, or we shouldn't extend `CheckConstraint` ", "bodyText": "I think we either shouldn't have this class, but instead use CheckConstriant<Symbol> directly, or we shouldn't extend CheckConstraint", "bodyHTML": "<p dir=\"auto\">I think we either shouldn't have this class, but instead use <code>CheckConstriant&lt;Symbol&gt;</code> directly, or we shouldn't extend <code>CheckConstraint</code></p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:12:17Z", "path": "sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.symbol;\n+\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Expression;\n+\n+public class AnalyzedCheckConstraint extends CheckConstraint<Expression> {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjU4MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385116580", "body": "Also not sure if a `Function` here is required or even the right thing. What about `CHECK (booleanColumn)` without any scalar function invocation?", "bodyText": "Also not sure if a Function here is required or even the right thing. What about CHECK (booleanColumn) without any scalar function invocation?", "bodyHTML": "<p dir=\"auto\">Also not sure if a <code>Function</code> here is required or even the right thing. What about <code>CHECK (booleanColumn)</code> without any scalar function invocation?</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:12:53Z", "path": "sql/src/main/java/io/crate/expression/symbol/AnalyzedCheckConstraint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.symbol;\n+\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Expression;\n+\n+public class AnalyzedCheckConstraint extends CheckConstraint<Expression> {\n+\n+    private final Function function;\n+\n+    public AnalyzedCheckConstraint(String name, Expression expression, Function function) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjc1MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385116751", "body": "```suggestion\r\n        return List.of();\r\n```\r\n\r\nWould avoid using guava if not necessary", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ImmutableList.of();\n          \n          \n            \n                    return List.of();\n          \n      \n    \n    \n  \n\nWould avoid using guava if not necessary", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi x x-first x-last\">ImmutableList</span><span class=\"pl-k\">.</span>of();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-smi x x-first x-last\">List</span><span class=\"pl-k\">.</span>of();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Would avoid using guava if not necessary</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:13:11Z", "path": "sql/src/main/java/io/crate/metadata/RelationInfo.java", "diffHunk": "@@ -60,6 +62,10 @@ public String pretty() {\n \n     List<ColumnIdent> primaryKey();\n \n+    default List<AnalyzedCheckConstraint> checkConstraints() {\n+        return ImmutableList.of();", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzA4NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385117084", "body": "```suggestion\r\n        if (metaMap != null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null != metaMap) {\n          \n          \n            \n                    if (metaMap != null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">!=</span> <span class=\"x x-first x-last\">metaMap</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">metaMap</span> <span class=\"pl-k\">!=</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-02-27T13:13:49Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java", "diffHunk": "@@ -597,7 +582,35 @@ public DocIndexMetaData build() {\n         primaryKey = getPrimaryKey();\n         routingCol = getRoutingCol();\n \n-        initializeGeneratedExpressions();\n+        Collection<Reference> references = this.references.values();\n+        TableReferenceResolver tableReferenceResolver = new TableReferenceResolver(references, ident);\n+        ExpressionAnalyzer exprAnalyzer = new ExpressionAnalyzer(\n+            functions, CoordinatorTxnCtx.systemTransactionContext(), ParamTypeHints.EMPTY, tableReferenceResolver, null);\n+        ExpressionAnalysisContext analysisCtx = new ExpressionAnalysisContext();\n+\n+        ImmutableList.Builder<AnalyzedCheckConstraint> checkConstraintsBuilder = null;\n+        Map<String, Object> metaMap = Maps.get(mappingMap, \"_meta\");\n+        if (null != metaMap) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzIyMQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385117221", "body": "```suggestion\r\n            if (checkConstraintsMap != null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null != checkConstraintsMap) {\n          \n          \n            \n                        if (checkConstraintsMap != null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">!=</span> <span class=\"x x-first x-last\">checkConstraintsMap</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">checkConstraintsMap</span> <span class=\"pl-k\">!=</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-02-27T13:14:04Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java", "diffHunk": "@@ -597,7 +582,35 @@ public DocIndexMetaData build() {\n         primaryKey = getPrimaryKey();\n         routingCol = getRoutingCol();\n \n-        initializeGeneratedExpressions();\n+        Collection<Reference> references = this.references.values();\n+        TableReferenceResolver tableReferenceResolver = new TableReferenceResolver(references, ident);\n+        ExpressionAnalyzer exprAnalyzer = new ExpressionAnalyzer(\n+            functions, CoordinatorTxnCtx.systemTransactionContext(), ParamTypeHints.EMPTY, tableReferenceResolver, null);\n+        ExpressionAnalysisContext analysisCtx = new ExpressionAnalysisContext();\n+\n+        ImmutableList.Builder<AnalyzedCheckConstraint> checkConstraintsBuilder = null;\n+        Map<String, Object> metaMap = Maps.get(mappingMap, \"_meta\");\n+        if (null != metaMap) {\n+            Map<String, String> checkConstraintsMap = Maps.get(metaMap, \"check_constraints\");\n+            if (null != checkConstraintsMap) {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzgwMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385117803", "body": "```suggestion\r\n    List<AnalyzedCheckConstraint> checkConstraints() {\r\n```\r\n\r\nI know other properties expose the `ImmutableList`, but leaking implementation details outside class boundaries is usually not a good idea. If you want to change implementation details you also break the API.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ImmutableList<AnalyzedCheckConstraint> checkConstraints() {\n          \n          \n            \n                List<AnalyzedCheckConstraint> checkConstraints() {\n          \n      \n    \n    \n  \n\nI know other properties expose the ImmutableList, but leaking implementation details outside class boundaries is usually not a good idea. If you want to change implementation details you also break the API.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\"><span class=\"x x-first x-last\">ImmutableList</span>&lt;<span class=\"pl-smi\">AnalyzedCheckConstraint</span>&gt;</span> checkConstraints() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\"><span class=\"x x-first x-last\">List</span>&lt;<span class=\"pl-smi\">AnalyzedCheckConstraint</span>&gt;</span> checkConstraints() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">I know other properties expose the <code>ImmutableList</code>, but leaking implementation details outside class boundaries is usually not a good idea. If you want to change implementation details you also break the API.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:15:13Z", "path": "sql/src/main/java/io/crate/metadata/doc/DocIndexMetaData.java", "diffHunk": "@@ -625,6 +638,10 @@ public DocIndexMetaData build() {\n         return notNullColumns;\n     }\n \n+    ImmutableList<AnalyzedCheckConstraint> checkConstraints() {", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MzMxOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385243318", "bodyText": "ok, I usually do, but I had a look around in the code, same class, and followed the pattern", "author": "marregui", "createdAt": "2020-02-27T17:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MzM5Nw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385243397", "bodyText": "ImmutableList<GeneratedReference> generatedColumnReferences() {\n        return generatedColumnReferences;\n    }\n\n    ImmutableCollection<ColumnIdent> notNullColumns() {\n        return notNullColumns;\n    }", "author": "marregui", "createdAt": "2020-02-27T17:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODQ0Mw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385118443", "body": "Using `printedTable` might make these assertions a bit more readable.", "bodyText": "Using printedTable might make these assertions a bit more readable.", "bodyHTML": "<p dir=\"auto\">Using <code>printedTable</code> might make these assertions a bit more readable.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:16:34Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +329,41 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        Object [][] rows = response.rows();\n+        assertEquals(0, rows[0][0]);\n+        assertNull(rows[0][1]);\n+        assertEquals(1, rows[1][0]);\n+        assertEquals(1, rows[1][1]);", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODgwMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385118803", "body": "Maybe work with `assertThat(md.checkConstraints(), Matchers.contains(...))` gives better error messages.", "bodyText": "Maybe work with assertThat(md.checkConstraints(), Matchers.contains(...)) gives better error messages.", "bodyHTML": "<p dir=\"auto\">Maybe work with <code>assertThat(md.checkConstraints(), Matchers.contains(...))</code> gives better error messages.</p>", "author": "mfussenegger", "createdAt": "2020-02-27T13:17:18Z", "path": "sql/src/test/java/io/crate/metadata/doc/DocIndexMetaDataTest.java", "diffHunk": "@@ -679,6 +680,39 @@ public void testExtractMultiplePrimaryKeys() throws Exception {\n         assertThat(md.primaryKey(), hasItems(ColumnIdent.fromPath(\"id\"), ColumnIdent.fromPath(\"title\")));\n     }\n \n+    @Test\n+    public void testExtractCheckConstraints() throws Exception {\n+        XContentBuilder builder = XContentFactory.jsonBuilder()\n+            .startObject()\n+            .startObject(Constants.DEFAULT_MAPPING_TYPE)\n+            .startObject(\"_meta\")\n+            .startObject(\"check_constraints\")\n+            .field(\"test3_check_1\", \"id >= 0\")\n+            .field(\"test3_check_2\", \"title != 'Pink Power Ranger'\")\n+            .endObject()\n+            .endObject()\n+            .startObject(\"properties\")\n+            .startObject(\"id\").field(\"type\", \"integer\").endObject()\n+            .startObject(\"title\").field(\"type\", \"string\").endObject()\n+            .endObject()\n+            .endObject()\n+            .endObject();\n+        IndexMetaData metaData = getIndexMetaData(\"test3\", builder);\n+        DocIndexMetaData md = newMeta(metaData, \"test3\");\n+        assertThat(md.checkConstraints().size(), is(2));\n+        for (AnalyzedCheckConstraint chk : md.checkConstraints()) {\n+            switch (chk.name()) {\n+                case \"test3_check_1\":\n+                    assertThat(chk.expression(), is(SqlParser.createExpression(\"id >= 0\")));\n+                    break;\n+\n+                case \"test3_check_2\":\n+                    assertThat(chk.expression(), is(SqlParser.createExpression(\"title <> 'Pink Power Ranger'\")));\n+                    break;\n+            }\n+        }\n+    }", "originalCommit": "474f529d7fa484fb08e256e64ede002ed4cfbde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MTc0OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385241749", "bodyText": "I did it this way to avoid having to know the order of the checks, but I will play with this.", "author": "marregui", "createdAt": "2020-02-27T16:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0ODEwMQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r385248101", "bodyText": "There is also a Matchers.containsInAnyOrder", "author": "mfussenegger", "createdAt": "2020-02-27T17:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODgwMw=="}], "type": "inlineReview"}, {"oid": "6f20d3450d124abd409b7edc6cf17f042ae764af", "url": "https://github.com/crate/crate/commit/6f20d3450d124abd409b7edc6cf17f042ae764af", "message": "An interable over RelationInfo, can the item be null?, nope", "committedDate": "2020-03-02T13:56:41Z", "type": "forcePushed"}, {"oid": "1f14cea2dbbd029b7a2129abad4df1a48f53d67d", "url": "https://github.com/crate/crate/commit/1f14cea2dbbd029b7a2129abad4df1a48f53d67d", "message": "An interable over RelationInfo, can the item be null?, nope", "committedDate": "2020-03-02T18:09:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NDg1OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388274858", "body": "This will throw an error  if `T` is not an `Expression`. I think the callee of this constructor should pass in the string - or maybe we can defer the formatting to a later point?", "bodyText": "This will throw an error  if T is not an Expression. I think the callee of this constructor should pass in the string - or maybe we can defer the formatting to a later point?", "bodyHTML": "<p dir=\"auto\">This will throw an error  if <code>T</code> is not an <code>Expression</code>. I think the callee of this constructor should pass in the string - or maybe we can defer the formatting to a later point?</p>", "author": "mfussenegger", "createdAt": "2020-03-05T12:54:53Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import io.crate.sql.ExpressionFormatter;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = ExpressionFormatter.formatStandaloneExpression((Expression) expression);", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTA4Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388275082", "body": "```suggestion\r\n    private final T expression;\r\n```\r\n\r\nConceptually a `Symbol` is also an expression and `T` doesn't enforce either, a concrete `Expression` or `Symbol`, so I'd just stick to `expression`.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final T exprOrSymbol;\n          \n          \n            \n                private final T expression;\n          \n      \n    \n    \n  \n\nConceptually a Symbol is also an expression and T doesn't enforce either, a concrete Expression or Symbol, so I'd just stick to expression.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">T</span> <span class=\"x x-first x-last\">exprOrSymbol</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">T</span> <span class=\"x x-first x-last\">expression</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Conceptually a <code>Symbol</code> is also an expression and <code>T</code> doesn't enforce either, a concrete <code>Expression</code> or <code>Symbol</code>, so I'd just stick to <code>expression</code>.</p>", "author": "mfussenegger", "createdAt": "2020-03-05T12:55:21Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T exprOrSymbol;", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTIwNQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388275205", "body": "```suggestion\r\n    public CheckConstraint(@Nullable String name, T expression, String expressionStr) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n          \n          \n            \n                public CheckConstraint(@Nullable String name, T expression, String expressionStr) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> CheckConstraint(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> name, <span class=\"pl-smi\">T</span> <span class=\"x x-first x-last\">exprOrSymbol</span>, <span class=\"pl-smi\">String</span> expressionStr) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> CheckConstraint(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> name, <span class=\"pl-smi\">T</span> <span class=\"x x-first x-last\">expression</span>, <span class=\"pl-smi\">String</span> expressionStr) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-05T12:55:36Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T exprOrSymbol;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NTkwMw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388275903", "body": "```suggestion\r\n    public T expression() {\r\n        return expression;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public T cargo() {\n          \n          \n            \n                    return exprOrSymbol;\n          \n          \n            \n                public T expression() {\n          \n          \n            \n                    return expression;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">T</span> <span class=\"x x-first x-last\">cargo</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"x x-first x-last\">exprOrSymbol</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">T</span> <span class=\"x x-first x-last\">expression</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"x x-first x-last\">expression</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-05T12:56:51Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T exprOrSymbol;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, T exprOrSymbol, String expressionStr) {\n+        this.name = name;\n+        this.exprOrSymbol = exprOrSymbol;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T cargo() {\n+        return exprOrSymbol;", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3NzQyNA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388277424", "body": "I think we could use a simple `ArrayList` here instead of a map? The `name` should be unique after all.\r\n\r\nThe area here is performance sensitive, so we should avoid expensive and heavy structures if possible.", "bodyText": "I think we could use a simple ArrayList here instead of a map? The name should be unique after all.\nThe area here is performance sensitive, so we should avoid expensive and heavy structures if possible.", "bodyHTML": "<p dir=\"auto\">I think we could use a simple <code>ArrayList</code> here instead of a map? The <code>name</code> should be unique after all.</p>\n<p dir=\"auto\">The area here is performance sensitive, so we should avoid expensive and heavy structures if possible.</p>", "author": "mfussenegger", "createdAt": "2020-03-05T13:00:06Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -56,6 +61,13 @@\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n+        checkConstraints = table\n+            .checkConstraints()\n+            .stream()\n+            .collect(Collectors.toMap(\n+                CheckConstraint::name,\n+                chk -> new Tuple<>(ctx.add(chk.cargo()), chk.expressionStr())\n+            ));", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODA5Mw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278093", "body": "```suggestion\r\n            if (value == null) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null == value) {\n          \n          \n            \n                        if (value == null) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (<span class=\"pl-c1 x x-first x-last\">null</span> <span class=\"pl-k\">==</span> <span class=\"x x-first x-last\">value</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">value</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1 x x-first x-last\">null</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-05T13:01:32Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -73,6 +85,21 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (Map.Entry<String, Tuple<Input<?>, String>> checkEntry : checkConstraints.entrySet()) {\n+            Input<?> checkInput = checkEntry.getValue().v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (null == value) {", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMDY4Mg==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388330682", "bodyText": "missed that one", "author": "marregui", "createdAt": "2020-03-05T14:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODQ0NA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278444", "body": "I think the filter is not necessary, `flatMap` won't generate new entries if `checkConstraints` is empty.", "bodyText": "I think the filter is not necessary, flatMap won't generate new entries if checkConstraints is empty.", "bodyHTML": "<p dir=\"auto\">I think the filter is not necessary, <code>flatMap</code> won't generate new entries if <code>checkConstraints</code> is empty.</p>", "author": "mfussenegger", "createdAt": "2020-03-05T13:02:14Z", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -115,7 +116,18 @@ public InformationSchemaIterables(final Schemas schemas,\n             .flatMap(r -> sequentialStream(new NotNullConstraintIterable(r)))\n             .iterator();\n \n-        constraints = () -> concat(sequentialStream(primaryKeyConstraints), sequentialStream(notnullConstraints))\n+        Iterable<ConstraintInfo> checkConstraints = () ->\n+            sequentialStream(relations)\n+                .filter(r -> !r.checkConstraints().isEmpty())", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODg3NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388278875", "body": "This looks like `Map.of` or, if you need stable ordering, `ImmutableMap.of` ?", "bodyText": "This looks like Map.of or, if you need stable ordering, ImmutableMap.of ?", "bodyHTML": "<p dir=\"auto\">This looks like <code>Map.of</code> or, if you need stable ordering, <code>ImmutableMap.of</code> ?</p>", "author": "mfussenegger", "createdAt": "2020-03-05T13:03:06Z", "path": "sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.expression.InputFactory;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import io.crate.testing.SQLExecutor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Testing {@linkplain io.crate.execution.dml.upsert.CheckConstraints},\n+ * as well as various cases related to:\n+ *\n+ * <pre>\n+ *     CONSTRAINT &lt;name&gt; CHECK &lt;boolean expression&gt;\n+ * </pre>\n+ */\n+public class CheckConstraintsTest extends CrateDummyClusterServiceUnitTest {\n+\n+    private SQLExecutor sqlExecutor;\n+    private DocTableInfo docTableInfo;\n+    private CheckConstraints checkConstraints;\n+    private TransactionContext txnCtx;\n+\n+    @Before\n+    public void setUpExecutor() throws Exception {\n+        sqlExecutor = SQLExecutor.builder(clusterService)\n+            .addTable(\"CREATE TABLE t (\" +\n+                      \"    id int,\" +\n+                      \"    qty int,\" +\n+                      \"    sentinel boolean CONSTRAINT sentinel CHECK(sentinel),\" +\n+                      \"    CONSTRAINT id_is_even CHECK(id % 2 = 0))\")\n+            .build();\n+        docTableInfo = sqlExecutor.resolveTableInfo(\"t\");\n+        txnCtx = CoordinatorTxnCtx.systemTransactionContext();\n+        checkConstraints = new CheckConstraints(\n+            txnCtx,\n+            new InputFactory(sqlExecutor.functions()),\n+            FromSourceRefResolver.WITHOUT_PARTITIONED_BY_REFS,\n+            docTableInfo);\n+    }\n+\n+    @Test\n+    public void test_validate_fails_when_check_expr_is_false() throws Exception {\n+        expectedException.expectMessage(\n+            \"Failed CONSTRAINT sentinel CHECK (\\\"sentinel\\\") and values {id=280278, qty=42, sentinel=false}\");\n+        checkConstraints.validate(mapOf(\n+            \"id\", 280278,\n+            \"qty\", 42,\n+            \"sentinel\", false));\n+    }\n+\n+    @Test\n+    public void test_validate_succeeds_when_check_expr_is_true() throws Exception {\n+        checkConstraints.validate(mapOf(\n+            \"id\", 280278,\n+            \"qty\", 42,\n+            \"sentinel\", true));\n+    }\n+\n+    @Test\n+    public void test_validate_succeeds_when_check_expr_is_null() throws Exception {\n+        checkConstraints.validate(mapOf(\n+            \"id\", 280278,\n+            \"qty\", 42,\n+            \"sentinel\", null));\n+    }\n+\n+    @Test\n+    public void test_cannot_have_two_check_constraints_of_same_name() throws Exception {\n+        expectedException.expectMessage(\n+            \"a check constraint of the same name is already declared [id_is_even]\");\n+        SQLExecutor.builder(clusterService)\n+            .addTable(\"CREATE TABLE t (\" +\n+                      \"    id int CONSTRAINT id_is_even CHECK(id % 2 = 0),\" +\n+                      \"    qty int,\" +\n+                      \"    CONSTRAINT id_is_even CHECK(id % 2 = 0))\")\n+            .build();\n+    }\n+\n+    private static Map<String, Object> mapOf(Object... items) {", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyOTEyMQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388329121", "bodyText": "Map.of did not let me have a null value", "author": "marregui", "createdAt": "2020-03-05T14:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3ODg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTY4NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388279685", "body": "```suggestion\r\n        execute(\"select id, qty from t order by id\");\r\n        assertEquals(printedTable(response.rows()),\r\n            \"0| NULL\\n\" +\r\n            \"1| 1\\n\"\r\n        );\r\n```\r\n\r\nThe `rowCount == 2` is implied by the `printedTable` assertion.\r\n", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    execute(\"select id, qty from t order by id\");\n          \n          \n            \n                    assertEquals(2, response.rowCount());\n          \n          \n            \n                    assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n          \n          \n            \n                    execute(\"select id, qty from t order by id\");\n          \n          \n            \n                    assertEquals(printedTable(response.rows()),\n          \n          \n            \n                        \"0| NULL\\n\" +\n          \n          \n            \n                        \"1| 1\\n\"\n          \n          \n            \n                    );\n          \n      \n    \n    \n  \n\nThe rowCount == 2 is implied by the printedTable assertion.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        execute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>select id, qty from t order by id<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertEquals(<span class=\"pl-c1\">2</span>, response<span class=\"pl-k\">.</span>rowCount());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        assertEquals(printedTable(response<span class=\"pl-k\">.</span>rows()), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0| NULL<span class=\"pl-cce\">\\n</span>1| 1<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        execute(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>select id, qty from t order by id<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        assertEquals(printedTable(response<span class=\"pl-k\">.</span>rows()),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0| NULL<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1| 1<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        );</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">The <code>rowCount == 2</code> is implied by the <code>printedTable</code> assertion.</p>", "author": "mfussenegger", "createdAt": "2020-03-05T13:04:51Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +330,33 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTg4OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388279888", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(1, response.rowCount());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        assertEquals(</span><span class=\"pl-c1 x\">1</span><span class=\"x\">, response</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">rowCount());</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-05T13:05:16Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +330,33 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n+        execute(\"insert into t(id, qty) values(2, -1)\");\n+    }\n+\n+    @Test\n+    public void test_create_table_with_check_fail_on_update() {\n+        execute(\"create table t (id integer primary key, qty integer constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(1, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| 1\\n\");\n+        execute(\"update t set qty = 1 where id = 0 returning id, qty\");\n+        assertEquals(1, response.rowCount());", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3OTk1NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388279955", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(1, response.rowCount());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        assertEquals(</span><span class=\"pl-c1 x\">1</span><span class=\"x\">, response</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">rowCount());</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-05T13:05:25Z", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -329,6 +330,33 @@ public void testCreateTableWithCompositeIndex() throws Exception {\n         assertEquals(1L, response.rowCount());\n     }\n \n+    @Test\n+    public void test_create_table_with_check_fail_on_insert() {\n+        execute(\"create table t (id integer primary key, qty integer, constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, null), (1, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(2, response.rowCount());\n+        assertEquals(printedTable(response.rows()), \"0| NULL\\n1| 1\\n\");\n+        expectedException.expectMessage(containsString(\"Failed CONSTRAINT check_1 CHECK (\\\"qty\\\" > 0) and values\"));\n+        execute(\"insert into t(id, qty) values(2, -1)\");\n+    }\n+\n+    @Test\n+    public void test_create_table_with_check_fail_on_update() {\n+        execute(\"create table t (id integer primary key, qty integer constraint check_1 check (qty > 0))\");\n+        execute(\"insert into t(id, qty) values(0, 1)\");\n+        refresh();\n+        execute(\"select id, qty from t order by id\");\n+        assertEquals(1, response.rowCount());", "originalCommit": "2e541157a14eb92a933e598ff159db2ef67c1cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "url": "https://github.com/crate/crate/commit/d76163a49cc44f47d374a2335db54c474f2a1c4b", "message": "Fix up", "committedDate": "2020-03-06T08:46:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODAxNw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778017", "body": "If we add comments like that, they should include a reason **why** it is left empty intentionally. \r\n\r\nI still think this might be wrong.", "bodyText": "If we add comments like that, they should include a reason why it is left empty intentionally.\nI still think this might be wrong.", "bodyHTML": "<p dir=\"auto\">If we add comments like that, they should include a reason <strong>why</strong> it is left empty intentionally.</p>\n<p dir=\"auto\">I still think this might be wrong.</p>", "author": "mfussenegger", "createdAt": "2020-03-06T08:50:17Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint(name, columnName, expression, expressionStr);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+        // intentionally left empty", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODIzOA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778238", "body": "```suggestion\r\n        return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\r\n```\r\n\r\nPlease take care of generic warnings. Don't ignore them", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckColumnConstraint(name, columnName, expression, expressionStr);\n          \n          \n            \n                    return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n          \n      \n    \n    \n  \n\nPlease take care of generic warnings. Don't ignore them", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CheckColumnConstraint</span>(name, columnName, expression, expressionStr);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CheckColumnConstraint<span class=\"x x-first x-last\">&lt;&gt;</span></span>(name, columnName, <span class=\"x x-first\">mapper</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">apply(</span>expression<span class=\"x x-first x-last\">)</span>, expressionStr);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Please take care of generic warnings. Don't ignore them</p>", "author": "mfussenegger", "createdAt": "2020-03-06T08:50:46Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint(name, columnName, expression, expressionStr);", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDY0MA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388784640", "bodyText": "mmm, thank you for that, this might be what is causing the visit to break.", "author": "marregui", "createdAt": "2020-03-06T09:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODQ1OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778458", "body": "```suggestion\r\n        return new CheckConstraint<>(name, mapper.apply(expression), expressionStr);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckConstraint(name, expression, expressionStr);\n          \n          \n            \n                    return new CheckConstraint<>(name, mapper.apply(expression), expressionStr);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CheckConstraint</span>(name, expression, expressionStr);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CheckConstraint<span class=\"x x-first x-last\">&lt;&gt;</span></span>(name, <span class=\"x x-first\">mapper</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">apply(</span>expression<span class=\"x x-first x-last\">)</span>, expressionStr);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-06T08:51:10Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, T expression, String expressionStr) {\n+        this.name = name;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint(name, expression, expressionStr);", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3ODY1NQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388778655", "body": "Could now also use ``Lists2.map``", "bodyText": "Could now also use Lists2.map", "bodyHTML": "<p dir=\"auto\">Could now also use <code>Lists2.map</code></p>", "author": "mfussenegger", "createdAt": "2020-03-06T08:51:39Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -54,6 +61,11 @@\n             inputs.add(ctx.add(notNullRef));\n         }\n         expressions = ctx.expressions();\n+        checkConstraints = table\n+            .checkConstraints()\n+            .stream()\n+            .map(chk -> new Tuple<>(ctx.add(chk.expression()), chk))\n+            .collect(Collectors.toList());", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3OTQ1Ng==", "url": "https://github.com/crate/crate/pull/9686#discussion_r388779456", "body": "```suggestion\r\n                // SQL semantics: If a column is omitted from an INSERT/UPDATE statement, CHECK constraints should not fail. Same for writing explicit `null` values.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // most expressions evaluate to null if any operand is null.\n          \n          \n            \n                            // a check expression will evaluate to true in these cases.\n          \n          \n            \n                            // SQL semantics: If a column is omitted from an INSERT/UPDATE statement, CHECK constraints should not fail. Same for writing explicit `null` values.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c\"><span class=\"pl-c\">//</span> most expressions evaluate to null if any operand is null.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c\"><span class=\"pl-c\">//</span> a check expression will evaluate to true in these cases.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c\"><span class=\"pl-c\">//</span> SQL semantics: If a column is omitted from an INSERT/UPDATE statement, CHECK constraints should not fail. Same for writing explicit `null` values.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-06T08:53:31Z", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +83,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();\n+            if (value == null) {\n+                // most expressions evaluate to null if any operand is null.\n+                // a check expression will evaluate to true in these cases.", "originalCommit": "d76163a49cc44f47d374a2335db54c474f2a1c4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e366467ebe1003444eaa7affac2602064002f163", "url": "https://github.com/crate/crate/commit/e366467ebe1003444eaa7affac2602064002f163", "message": "Analyze check expressions in the first pass while analyzing the create table statement", "committedDate": "2020-03-09T16:04:48Z", "type": "forcePushed"}, {"oid": "d48f6031616f43ce8a5c55581254d537e6c3e6ca", "url": "https://github.com/crate/crate/commit/d48f6031616f43ce8a5c55581254d537e6c3e6ca", "message": "Check constaints are analysed in the second pass however now I want\n\ncolumn level defined check constraints to be extracted into regular\ntable level check condtraints.", "committedDate": "2020-03-25T14:12:07Z", "type": "forcePushed"}, {"oid": "8cf3ce47813aed733f886dabf84bdf11055a5a8a", "url": "https://github.com/crate/crate/commit/8cf3ce47813aed733f886dabf84bdf11055a5a8a", "message": "Skip analysis of check constraints during 1st phase of CreateTableStatementAnalyzer", "committedDate": "2020-03-26T12:08:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMjYwMA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398612600", "body": "```suggestion\r\n        private void visitCheckConstraint(@Nullable String uniqueName, String expressionStr) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private void visitCheckConstraint(String uniqueName, String expressionStr) {\n          \n          \n            \n                    private void visitCheckConstraint(@Nullable String uniqueName, String expressionStr) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> visitCheckConstraint(<span class=\"pl-smi\">String</span> uniqueName, <span class=\"pl-smi\">String</span> expressionStr) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> visitCheckConstraint(<span class=\"pl-k x x-first\">@Nullable</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">String</span> uniqueName, <span class=\"pl-smi\">String</span> expressionStr) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-26T14:24:02Z", "path": "sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -791,6 +793,25 @@ public Void visitPrimaryKeyConstraint(PrimaryKeyConstraint node, Integer indent)\n             return null;\n         }\n \n+        private void visitCheckConstraint(String uniqueName, String expressionStr) {", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxMzc4MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398613781", "body": "```suggestion\r\n        return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\r\n```\r\n\r\nPlease don't ignore unchecked warnings.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);\n          \n          \n            \n                    return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n          \n      \n    \n    \n  \n\nPlease don't ignore unchecked warnings.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CheckColumnConstraint</span>(name, columnName, mapper<span class=\"pl-k\">.</span>apply(expression), expressionStr);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CheckColumnConstraint<span class=\"x x-first x-last\">&lt;&gt;</span></span>(name, columnName, mapper<span class=\"pl-k\">.</span>apply(expression), expressionStr);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Please don't ignore unchecked warnings.</p>", "author": "mfussenegger", "createdAt": "2020-03-26T14:25:31Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint(name, columnName, mapper.apply(expression), expressionStr);", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNDAxOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398614019", "body": "```suggestion\r\n        return new CheckConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new CheckConstraint(name, columnName, mapper.apply(expression), expressionStr);\n          \n          \n            \n                    return new CheckConstraint<>(name, columnName, mapper.apply(expression), expressionStr);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CheckConstraint</span>(name, columnName, mapper<span class=\"pl-k\">.</span>apply(expression), expressionStr);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">CheckConstraint<span class=\"x x-first x-last\">&lt;&gt;</span></span>(name, columnName, mapper<span class=\"pl-k\">.</span>apply(expression), expressionStr);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-03-26T14:25:49Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    @Nullable\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, @Nullable String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name) &&\n+               Objects.equal(columnName, that.columnName);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint(name, columnName, mapper.apply(expression), expressionStr);", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398615627", "body": "Why `1.5` as magic multiplier? ", "bodyText": "Why 1.5 as magic multiplier?", "bodyHTML": "<p dir=\"auto\">Why <code>1.5</code> as magic multiplier?</p>", "author": "mfussenegger", "createdAt": "2020-03-26T14:27:47Z", "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -71,11 +77,11 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n         AnalyzedTableElements<Symbol> analyzedTableElements = TableElementsAnalyzer.analyze(\n             analyzedCreateTable.tableElements(), relationName, null);\n \n-        // 2nd phase, analyze possible generatedExpressions and defaultExpressions with a reference resolver\n+        // 2nd phase, analyze generated/default Expressions and check constraints with a reference resolver\n         TableReferenceResolver referenceResolver = analyzedTableElements.referenceResolver(relationName);\n         var exprAnalyzerWithReferences = new ExpressionAnalyzer(\n             functions, txnCtx, paramTypeHints, referenceResolver, null);\n-        List<TableElement<Symbol>> tableElementsWithExpressions = new ArrayList<>(analyzedCreateTable.tableElements().size());\n+        List<TableElement<Symbol>> tableElementsWithExpressions = new ArrayList<>((int)(analyzedCreateTable.tableElements().size() * 1.5));", "originalCommit": "7dca8b21089ee0e7379a9fb30af09d4b11674ece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMDc5Ng==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398630796", "bodyText": "it is an estimate, a more accurate estimate would be plus (instead of times 1.5) the number of column definitions, because each of those can have a check constraint, so in effect times 2, but I assume most create table statements won't use check constraints.", "author": "marregui", "createdAt": "2020-03-26T14:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0ODM1OA==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398648358", "bodyText": "I'd remove the sizing altogether in that case. There are already so many allocations happening here that this kind of micro-optimization won't save the day.", "author": "mfussenegger", "createdAt": "2020-03-26T15:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MzEzOQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398743139", "bodyText": "removed", "author": "marregui", "createdAt": "2020-03-26T17:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYxNTYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTk1OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398669959", "body": "you can probably even use the same rule name '#columnCheckConstraint' in grammar for both cases and implement only one visitor", "bodyText": "you can probably even use the same rule name '#columnCheckConstraint' in grammar for both cases and implement only one visitor", "bodyHTML": "<p dir=\"auto\">you can probably even use the same rule name '#columnCheckConstraint' in grammar for both cases and implement only one visitor</p>", "author": "kovrus", "createdAt": "2020-03-26T15:35:58Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -784,6 +787,25 @@ public Node visitPrimaryKeyConstraint(SqlBaseParser.PrimaryKeyConstraintContext\n         return new PrimaryKeyConstraint<>(visitCollection(context.columns().primaryExpression(), Expression.class));\n     }\n \n+    @Override\n+    public Node visitTableCheckConstraint(SqlBaseParser.TableCheckConstraintContext context) {", "originalCommit": "620ba399d472b86174b7c05224ce52e69f7c1bb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MzU0OQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398743549", "bodyText": "In which case I would get:\nTask :sql-parser:generateGrammarSource FAILED\nerror(123): /Users/marregui/workspace/crate/sql-parser/src/main/antlr/SqlBase.g4:520:86: rule alt label columnCheckConstraint redefined in rule tableElement, originally in rule columnConstraint", "author": "marregui", "createdAt": "2020-03-26T17:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5Nzg2MQ==", "url": "https://github.com/crate/crate/pull/9686#discussion_r398897861", "bodyText": "ah, never mind, also they have different types", "author": "kovrus", "createdAt": "2020-03-26T21:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTk1OQ=="}], "type": "inlineReview"}, {"oid": "84e12345b294f201f78f3a7e50582f3745060808", "url": "https://github.com/crate/crate/commit/84e12345b294f201f78f3a7e50582f3745060808", "message": "Remove micro-optimisation that pisses my peers off", "committedDate": "2020-03-26T17:06:57Z", "type": "forcePushed"}, {"oid": "ce3e11e7956aaac7b176d73a3cb57e0bbc170b5c", "url": "https://github.com/crate/crate/commit/ce3e11e7956aaac7b176d73a3cb57e0bbc170b5c", "message": "Add CHECK constraints to tables/columns\n\nAmend this message so that it reads like extended prose defining what\ncheck constraints are and limitations/differences with postgres, if\nthere are any. Well PG won't let you use 'check' as a constraint name,\nwhile we do, thus being a superior product.\n\nAmend this.", "committedDate": "2020-03-26T18:33:28Z", "type": "forcePushed"}, {"oid": "53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "url": "https://github.com/crate/crate/commit/53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "message": "Add CHECK constraint syntax to create table statement\n\nThe CHECK constraint specifies that the value/s of certain column/s\nmust satisfy a boolean expression on insert and update.\n\nSyntax:\n\n  check(boolean_expression)\n  constraint <name> check(boolean_expression)\n\nWith two options:\n\n - As many check constraints as required, as additional elements of\n   a create table statement.\n   When name is omitted, one is generated with pattern fqtn_check_uuid,\n   where:\n\n     fqtb: full qualified table name.\n     check: check.\n     uuid: 6 random hexadecimal digits (2 octets)\n           e.g. doc_my_table_check_bd3f57640937.\n\n - A single check constraint is allowed as part of a column definition.\n   When name is omitted, the pattern is fqtn_column_check_uuid,\n   where:\n\n     column: column name.", "committedDate": "2020-03-26T22:14:28Z", "type": "commit"}, {"oid": "953a0b78dd64e3995e00b4f1c12d79c1ca6b610e", "url": "https://github.com/crate/crate/commit/953a0b78dd64e3995e00b4f1c12d79c1ca6b610e", "message": "Draft documentation and changes", "committedDate": "2020-03-26T22:18:07Z", "type": "forcePushed"}, {"oid": "53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "url": "https://github.com/crate/crate/commit/53b2f8eb75ad555f1117b2dd523b7885ad998c7e", "message": "Add CHECK constraint syntax to create table statement\n\nThe CHECK constraint specifies that the value/s of certain column/s\nmust satisfy a boolean expression on insert and update.\n\nSyntax:\n\n  check(boolean_expression)\n  constraint <name> check(boolean_expression)\n\nWith two options:\n\n - As many check constraints as required, as additional elements of\n   a create table statement.\n   When name is omitted, one is generated with pattern fqtn_check_uuid,\n   where:\n\n     fqtb: full qualified table name.\n     check: check.\n     uuid: 6 random hexadecimal digits (2 octets)\n           e.g. doc_my_table_check_bd3f57640937.\n\n - A single check constraint is allowed as part of a column definition.\n   When name is omitted, the pattern is fqtn_column_check_uuid,\n   where:\n\n     column: column name.", "committedDate": "2020-03-26T22:14:28Z", "type": "forcePushed"}]}