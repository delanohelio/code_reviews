{"pr_number": 10630, "pr_title": "Add scalar function translate", "pr_author": "marregui", "pr_createdAt": "2020-10-07T17:52:23Z", "pr_url": "https://github.com/crate/crate/pull/10630", "timeline": [{"oid": "b43c927c8a345536c5ae726e95f8410b1dac9780", "url": "https://github.com/crate/crate/commit/b43c927c8a345536c5ae726e95f8410b1dac9780", "message": "Add benchmark tests for small from/to/source values.\n\nTranslate uses char array instead of StringBuilder", "committedDate": "2020-10-11T12:21:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MTY3NA==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503251674", "body": "Afaik this is only used as a Character\r\n```suggestion\r\n    private static final Character NULL = '\\0';\r\n```", "bodyText": "Afaik this is only used as a Character\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final char NULL = '\\0';\n          \n          \n            \n                private static final Character NULL = '\\0';", "bodyHTML": "<p dir=\"auto\">Afaik this is only used as a Character</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k x x-first x-last\">char</span> <span class=\"pl-c1\">NULL</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\0</span><span class=\"pl-pds\">'</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi x x-first x-last\">Character</span> <span class=\"pl-c1\">NULL</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\0</span><span class=\"pl-pds\">'</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "seut", "createdAt": "2020-10-12T12:10:21Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjA4MQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503252081", "body": "Don't think that this improve anything, I'd suggest to use `DataTypes.STRING.getTypeSignature()` directly below.", "bodyText": "Don't think that this improve anything, I'd suggest to use DataTypes.STRING.getTypeSignature() directly below.", "bodyHTML": "<p dir=\"auto\">Don't think that this improve anything, I'd suggest to use <code>DataTypes.STRING.getTypeSignature()</code> directly below.</p>", "author": "seut", "createdAt": "2020-10-12T12:11:14Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjQ1NQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503252455", "body": "Looks like this should be private accessible only?", "bodyText": "Looks like this should be private accessible only?", "bodyHTML": "<p dir=\"auto\">Looks like this should be private accessible only?</p>", "author": "seut", "createdAt": "2020-10-12T12:11:57Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NDQ3Mg==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503254472", "body": "Any reason to store this into a local var?", "bodyText": "Any reason to store this into a local var?", "bodyHTML": "<p dir=\"auto\">Any reason to store this into a local var?</p>", "author": "seut", "createdAt": "2020-10-12T12:15:53Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.tmap = tmap;\n+    }\n+\n+    @Override\n+    public Scalar<String, String> compile(List<Symbol> args) {\n+        assert args.size() == 3 : \"translate takes exactly three arguments\";\n+\n+        Symbol from = args.get(1);\n+        if (!Literal.isLiteral(from, DataTypes.STRING)) {\n+            return this;\n+        }\n+        Symbol to = args.get(2);\n+        if (!Literal.isLiteral(to, DataTypes.STRING)) {\n+            return this;\n+        }\n+        String fromStr = ((Input<String>) from).value();\n+        String toStr = ((Input<String>) to).value();\n+        return new TranslateFunction(signature, boundSignature, computeMap(fromStr, toStr));\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<String>[] args) {\n+        assert args.length == 3 : \"translate takes exactly three arguments\";\n+        String source = args[0].value();\n+        String from = args[1].value();\n+        String to = args[2].value();\n+        if (source == null || from == null || to == null) {\n+            return null;\n+        }\n+        if (source.length() == 0 || from.length() == 0) {\n+            return source;\n+        }\n+        Map<Character, Character> tmap = this.tmap;", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NTc3OQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503255779", "body": "this would avoid an additional by-key lookup which slightly improves on larger source text input according to my local benchmarks:\r\n\r\n```suggestion\r\n            var mc = tmap.get(c);\r\n            if (mc == null) {\r\n                result[resultCount++] = c;\r\n            } else if (mc != NULL) {\r\n                result[resultCount++] = mc;\r\n            }\r\n```", "bodyText": "this would avoid an additional by-key lookup which slightly improves on larger source text input according to my local benchmarks:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (tmap.containsKey(c)) {\n          \n          \n            \n                            char mc = tmap.get(c);\n          \n          \n            \n                            if (mc != NULL) {\n          \n          \n            \n                                result[resultCount++] = mc;\n          \n          \n            \n                            }\n          \n          \n            \n                        } else {\n          \n          \n            \n                            result[resultCount++] = c;\n          \n          \n            \n                        }\n          \n          \n            \n                        var mc = tmap.get(c);\n          \n          \n            \n                        if (mc == null) {\n          \n          \n            \n                            result[resultCount++] = c;\n          \n          \n            \n                        } else if (mc != NULL) {\n          \n          \n            \n                            result[resultCount++] = mc;\n          \n          \n            \n                        }", "bodyHTML": "<p dir=\"auto\">this would avoid an additional by-key lookup which slightly improves on larger source text input according to my local benchmarks:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"112\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (tmap<span class=\"pl-k\">.</span>containsKey(c)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"113\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">char</span> mc <span class=\"pl-k\">=</span> tmap<span class=\"pl-k\">.</span>get(c);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">if</span> (mc <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">NULL</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    result[resultCount<span class=\"pl-k\">++</span>] <span class=\"pl-k\">=</span> mc;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"118\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                result[resultCount<span class=\"pl-k\">++</span>] <span class=\"pl-k\">=</span> c;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"119\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"112\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">var</span> mc <span class=\"pl-k\">=</span> tmap<span class=\"pl-k\">.</span>get(c);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"113\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (mc <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"114\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                result[resultCount<span class=\"pl-k\">++</span>] <span class=\"pl-k\">=</span> c;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"115\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (mc <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">NULL</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"116\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                result[resultCount<span class=\"pl-k\">++</span>] <span class=\"pl-k\">=</span> mc;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"117\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "seut", "createdAt": "2020-10-12T12:18:30Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.tmap = tmap;\n+    }\n+\n+    @Override\n+    public Scalar<String, String> compile(List<Symbol> args) {\n+        assert args.size() == 3 : \"translate takes exactly three arguments\";\n+\n+        Symbol from = args.get(1);\n+        if (!Literal.isLiteral(from, DataTypes.STRING)) {\n+            return this;\n+        }\n+        Symbol to = args.get(2);\n+        if (!Literal.isLiteral(to, DataTypes.STRING)) {\n+            return this;\n+        }\n+        String fromStr = ((Input<String>) from).value();\n+        String toStr = ((Input<String>) to).value();\n+        return new TranslateFunction(signature, boundSignature, computeMap(fromStr, toStr));\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<String>[] args) {\n+        assert args.length == 3 : \"translate takes exactly three arguments\";\n+        String source = args[0].value();\n+        String from = args[1].value();\n+        String to = args[2].value();\n+        if (source == null || from == null || to == null) {\n+            return null;\n+        }\n+        if (source.length() == 0 || from.length() == 0) {\n+            return source;\n+        }\n+        Map<Character, Character> tmap = this.tmap;\n+        if (tmap == null) {\n+            tmap = computeMap(from, to);\n+        }\n+        return translate(tmap, source);\n+    }\n+\n+    private static String translate(Map<Character, Character> tmap, String source) {\n+        int sourceLen = source.length();\n+        char[] result = new char[sourceLen];\n+        int resultCount = 0;\n+        for (int i = 0; i < sourceLen; i++) {\n+            char c = source.charAt(i);\n+            if (tmap.containsKey(c)) {\n+                char mc = tmap.get(c);\n+                if (mc != NULL) {\n+                    result[resultCount++] = mc;\n+                }\n+            } else {\n+                result[resultCount++] = c;\n+            }", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NjYzMQ==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503256631", "body": "avoids boxing\r\n```suggestion\r\n                var mc = NULL;\r\n```", "bodyText": "avoids boxing\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            char mc = NULL;\n          \n          \n            \n                            var mc = NULL;", "bodyHTML": "<p dir=\"auto\">avoids boxing</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k x x-first x-last\">char</span> mc <span class=\"pl-k\">=</span> <span class=\"pl-c1\">NULL</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k x x-first x-last\">var</span> mc <span class=\"pl-k\">=</span> <span class=\"pl-c1\">NULL</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "seut", "createdAt": "2020-10-12T12:20:02Z", "path": "server/src/main/java/io/crate/expression/scalar/string/TranslateFunction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.TypeSignature;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TranslateFunction extends Scalar<String, String> {\n+\n+    private static final TypeSignature STRING = DataTypes.STRING.getTypeSignature();\n+    private static final char NULL = '\\0';\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\"translate\", STRING, STRING, STRING, STRING),\n+            TranslateFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final Map<Character, Character> tmap;\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    public TranslateFunction(Signature signature, Signature boundSignature, Map<Character, Character> tmap) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.tmap = tmap;\n+    }\n+\n+    @Override\n+    public Scalar<String, String> compile(List<Symbol> args) {\n+        assert args.size() == 3 : \"translate takes exactly three arguments\";\n+\n+        Symbol from = args.get(1);\n+        if (!Literal.isLiteral(from, DataTypes.STRING)) {\n+            return this;\n+        }\n+        Symbol to = args.get(2);\n+        if (!Literal.isLiteral(to, DataTypes.STRING)) {\n+            return this;\n+        }\n+        String fromStr = ((Input<String>) from).value();\n+        String toStr = ((Input<String>) to).value();\n+        return new TranslateFunction(signature, boundSignature, computeMap(fromStr, toStr));\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<String>[] args) {\n+        assert args.length == 3 : \"translate takes exactly three arguments\";\n+        String source = args[0].value();\n+        String from = args[1].value();\n+        String to = args[2].value();\n+        if (source == null || from == null || to == null) {\n+            return null;\n+        }\n+        if (source.length() == 0 || from.length() == 0) {\n+            return source;\n+        }\n+        Map<Character, Character> tmap = this.tmap;\n+        if (tmap == null) {\n+            tmap = computeMap(from, to);\n+        }\n+        return translate(tmap, source);\n+    }\n+\n+    private static String translate(Map<Character, Character> tmap, String source) {\n+        int sourceLen = source.length();\n+        char[] result = new char[sourceLen];\n+        int resultCount = 0;\n+        for (int i = 0; i < sourceLen; i++) {\n+            char c = source.charAt(i);\n+            if (tmap.containsKey(c)) {\n+                char mc = tmap.get(c);\n+                if (mc != NULL) {\n+                    result[resultCount++] = mc;\n+                }\n+            } else {\n+                result[resultCount++] = c;\n+            }\n+        }\n+        return String.valueOf(result, 0, resultCount);\n+    }\n+\n+    private static Map<Character, Character> computeMap(String from, String to) {\n+        Map<Character, Character> tmap = new HashMap<>();\n+        for (int i = 0; i < from.length(); i++) {\n+            char c = from.charAt(i);\n+            if (!tmap.containsKey(c)) {\n+                char mc = NULL;", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1Nzc2Mg==", "url": "https://github.com/crate/crate/pull/10630#discussion_r503257762", "body": "Thanks for that. I think this is only interesting for now but has no real benefit of keeping it, so I think we shouldn't commit it.", "bodyText": "Thanks for that. I think this is only interesting for now but has no real benefit of keeping it, so I think we shouldn't commit it.", "bodyHTML": "<p dir=\"auto\">Thanks for that. I think this is only interesting for now but has no real benefit of keeping it, so I think we shouldn't commit it.</p>", "author": "seut", "createdAt": "2020-10-12T12:22:11Z", "path": "benchmarks/src/test/java/io/crate/execution/StringTranslateTest.java", "diffHunk": "@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Timeout;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiFunction;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Measurement(iterations = 4)\n+@Timeout(time = 30_000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 2, time = 10_000, timeUnit = TimeUnit.MILLISECONDS)\n+public class StringTranslateTest {", "originalCommit": "b43c927c8a345536c5ae726e95f8410b1dac9780", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2e6f73b0b7455093bc4279bb7bed466923cef5a", "url": "https://github.com/crate/crate/commit/d2e6f73b0b7455093bc4279bb7bed466923cef5a", "message": "Basti's improvement suggestions", "committedDate": "2020-10-12T13:11:28Z", "type": "forcePushed"}, {"oid": "0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "url": "https://github.com/crate/crate/commit/0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "message": "Add scalar function translate\n\nTranslate performs several single-character, one-to-one translation in one operation.\nE.g. translate('Crate', 'Ct', 'Dk') == 'Drake'", "committedDate": "2020-10-12T14:21:05Z", "type": "commit"}, {"oid": "0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "url": "https://github.com/crate/crate/commit/0fc55e1bccc3e4f5800b0c27bfa4a40b7c1134e1", "message": "Add scalar function translate\n\nTranslate performs several single-character, one-to-one translation in one operation.\nE.g. translate('Crate', 'Ct', 'Dk') == 'Drake'", "committedDate": "2020-10-12T14:21:05Z", "type": "forcePushed"}]}