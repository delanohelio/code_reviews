{"pr_number": 10064, "pr_title": "Add the `regproc` alias data type.", "pr_author": "kovrus", "pr_createdAt": "2020-06-09T14:41:44Z", "pr_url": "https://github.com/crate/crate/pull/10064", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDEzNA==", "url": "https://github.com/crate/crate/pull/10064#discussion_r437480134", "body": "`'<text>'::regproc` in PostgreSQL the cast function will try to look up for the function that corresponds to the string literal. For now, I allowed this cast but it just creates a `Regproc` object with oid and name, should we forbid the text to `regproc` cast or keep it?", "bodyText": "'<text>'::regproc in PostgreSQL the cast function will try to look up for the function that corresponds to the string literal. For now, I allowed this cast but it just creates a Regproc object with oid and name, should we forbid the text to regproc cast or keep it?", "bodyHTML": "<p dir=\"auto\"><code>'&lt;text&gt;'::regproc</code> in PostgreSQL the cast function will try to look up for the function that corresponds to the string literal. For now, I allowed this cast but it just creates a <code>Regproc</code> object with oid and name, should we forbid the text to <code>regproc</code> cast or keep it?</p>", "author": "kovrus", "createdAt": "2020-06-09T14:45:10Z", "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.metadata.pgcatalog.OidHash.functionOid;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 20;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());\n+        } else if (value instanceof String) {\n+            var name = (String) value;\n+            return Regproc.of(functionOid(name), name);", "originalCommit": "4cecc73f430c8a499e61d1acac61a1b797ac277c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c20e483937214d8c090a5105b13070eee87c5b47", "url": "https://github.com/crate/crate/commit/c20e483937214d8c090a5105b13070eee87c5b47", "message": "wip: Add the pg `regproc` data type.", "committedDate": "2020-06-09T14:58:33Z", "type": "forcePushed"}, {"oid": "ff0b60f0ef58f9ebf50a10d54fb0bfb4d90b1f1e", "url": "https://github.com/crate/crate/commit/ff0b60f0ef58f9ebf50a10d54fb0bfb4d90b1f1e", "message": "wip: Add the pg `regproc` data type.", "committedDate": "2020-06-09T15:28:53Z", "type": "forcePushed"}, {"oid": "ce97915c03e94bac9c6c8fd38bdab2e65d93c32d", "url": "https://github.com/crate/crate/commit/ce97915c03e94bac9c6c8fd38bdab2e65d93c32d", "message": "wip: Add the pg `regproc` data type.", "committedDate": "2020-06-09T15:31:32Z", "type": "forcePushed"}, {"oid": "3d447035cc84ed9a8cd676aeb209cbe9e2a7a7fc", "url": "https://github.com/crate/crate/commit/3d447035cc84ed9a8cd676aeb209cbe9e2a7a7fc", "message": "wip: Add the pg `regproc` data type.", "committedDate": "2020-06-09T15:41:12Z", "type": "forcePushed"}, {"oid": "505e55a9afcf5764a1eca7d6b42e5b367d04e199", "url": "https://github.com/crate/crate/commit/505e55a9afcf5764a1eca7d6b42e5b367d04e199", "message": "Use regproc type for correspodning columns in pg_catalog tables.", "committedDate": "2020-06-10T08:46:30Z", "type": "forcePushed"}, {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5", "url": "https://github.com/crate/crate/commit/34edce8f8e1521c49f37df822fa63193b29835d5", "message": "Document the `regproc` data type.", "committedDate": "2020-06-10T11:26:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NzM4OA==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438077388", "body": "Shouldn't the `name` here be the function-name instead of the oid as string? We'd need some kind of reverse lookup, right?", "bodyText": "Shouldn't the name here be the function-name instead of the oid as string? We'd need some kind of reverse lookup, right?", "bodyHTML": "<p dir=\"auto\">Shouldn't the <code>name</code> here be the function-name instead of the oid as string? We'd need some kind of reverse lookup, right?</p>", "author": "mfussenegger", "createdAt": "2020-06-10T12:19:21Z", "path": "server/src/main/java/io/crate/protocols/postgres/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.crate.types.Regproc;\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+class RegprocType extends PGType<Regproc> {\n+\n+    static final int OID = 24;\n+\n+    private static final int TYPE_LEN = 4;\n+    private static final int TYPE_MOD = -1;\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+\n+    private RegprocType() {\n+        super(OID, TYPE_LEN, TYPE_MOD, \"regproc\");\n+    }\n+\n+    @Override\n+    public int typArray() {\n+        return PGArray.REGPROC_ARRAY.oid();\n+    }\n+\n+    @Override\n+    public String typeCategory() {\n+        return TypeCategory.NUMERIC.code();\n+    }\n+\n+    @Override\n+    public String type() {\n+        return Type.BASE.code();\n+    }\n+\n+    @Override\n+    public int writeAsBinary(ByteBuf buffer, @Nonnull Regproc value) {\n+        buffer.writeInt(TYPE_LEN);\n+        buffer.writeInt(value.oid());\n+        return INT32_BYTE_SIZE + TYPE_LEN;\n+    }\n+\n+    @Override\n+    public Regproc readBinaryValue(ByteBuf buffer, int valueLength) {\n+        var oid = buffer.readInt();\n+        return Regproc.of(oid, String.valueOf(oid));", "originalCommit": "34edce8f8e1521c49f37df822fa63193b29835d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NjU5OA==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438086598", "bodyText": "yes, but I am not sure how it is possible, PgType#readBinaryValue should know about registered functions then :/", "author": "kovrus", "createdAt": "2020-06-10T12:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NzM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438078858", "body": "Same here", "bodyText": "Same here", "bodyHTML": "<p dir=\"auto\">Same here</p>", "author": "mfussenegger", "createdAt": "2020-06-10T12:22:00Z", "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 19;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());", "originalCommit": "34edce8f8e1521c49f37df822fa63193b29835d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDk3Ng==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438084976", "bodyText": "It is actually the behaviour postgresql has, when we cast oid to regproc then it becomes a name as well. See (1::regproc)::text\ntemplate1=# select 1::regproc, (1::regproc)::text, pg_typeof(1::regproc);\n regproc | text | pg_typeof\n---------+------+-----------\n 1       | 1    | regproc", "author": "kovrus", "createdAt": "2020-06-10T12:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NjYzNw==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438096637", "bodyText": "Only for unknown functions:\nselect 1242::regproc, 1::regproc;\n regproc | regproc\n---------+---------\n boolin  | 1\n(1 row)\n\nNot sure if this is problematic, given that clients don't send regproc values and that the joins happen on the oid value anyways.\nMaybe we add a comment explaining this behavior for now and follow up if it turns out to be necessary for compatiblity reasons.", "author": "mfussenegger", "createdAt": "2020-06-10T12:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5OTIzMw==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438099233", "bodyText": "as i see, i'll update the type documentation. It is also the case for casting a string literal to regproc.", "author": "kovrus", "createdAt": "2020-06-10T12:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA=="}], "type": "inlineReview"}, {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7", "url": "https://github.com/crate/crate/commit/85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7", "message": "fixup! Document the `regproc` data type.", "committedDate": "2020-06-10T13:19:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0ODAwNw==", "url": "https://github.com/crate/crate/pull/10064#discussion_r438148007", "body": "```suggestion\r\n    public static Regproc of(int oid, @Nonnull String name) {\r\n        // To match PostgreSQL behavior 1:1 this would need to lookup the\r\n        // function name by oid and fallback to using the oid as name if there is\r\n        // no match.\r\n\r\n        // It looks like for compatibility with clients it is good enough\r\n        // to not mirror this behavior\r\n        return new Regproc(oid, name);\r\n    }\r\n```\r\n", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Regproc of(int oid, @Nonnull String name) {\n          \n          \n            \n                    return new Regproc(oid, name);\n          \n          \n            \n                }\n          \n          \n            \n                public static Regproc of(int oid, @Nonnull String name) {\n          \n          \n            \n                    // To match PostgreSQL behavior 1:1 this would need to lookup the\n          \n          \n            \n                    // function name by oid and fallback to using the oid as name if there is\n          \n          \n            \n                    // no match.\n          \n          \n            \n            \n          \n          \n            \n                    // It looks like for compatibility with clients it is good enough\n          \n          \n            \n                    // to not mirror this behavior\n          \n          \n            \n                    return new Regproc(oid, name);\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"46\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Regproc</span> of(<span class=\"pl-k\">int</span> oid, <span class=\"pl-k\">@Nonnull</span> <span class=\"pl-smi\">String</span> name) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Regproc</span>(oid, name);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"46\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Regproc</span> of(<span class=\"pl-k\">int</span> oid, <span class=\"pl-k\">@Nonnull</span> <span class=\"pl-smi\">String</span> name) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"47\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> To match PostgreSQL behavior 1:1 this would need to lookup the</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"48\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> function name by oid and fallback to using the oid as name if there is</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"49\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> no match.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"50\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"51\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> It looks like for compatibility with clients it is good enough</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"52\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> to not mirror this behavior</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"53\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Regproc</span>(oid, name);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mfussenegger", "createdAt": "2020-06-10T14:04:38Z", "path": "server/src/main/java/io/crate/types/Regproc.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.metadata.pgcatalog.OidHash;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+public class Regproc {\n+\n+    private final int oid;\n+    private final String name;\n+\n+    public static Regproc of(@Nonnull String name) {\n+        return new Regproc(OidHash.functionOid(name), name);\n+    }\n+\n+    public static Regproc of(int oid, @Nonnull String name) {\n+        return new Regproc(oid, name);\n+    }", "originalCommit": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6de210a6c04f139a95773a16dd5cb75265ca93dd", "url": "https://github.com/crate/crate/commit/6de210a6c04f139a95773a16dd5cb75265ca93dd", "message": "Add the CrateDB internal `regproc` data type.", "committedDate": "2020-06-10T14:35:00Z", "type": "commit"}, {"oid": "07935c25fd9202f49d490b4ea569f1777701d85c", "url": "https://github.com/crate/crate/commit/07935c25fd9202f49d490b4ea569f1777701d85c", "message": "Add the `regproc` type size estimator.", "committedDate": "2020-06-10T14:35:00Z", "type": "commit"}, {"oid": "d091774d6c173b2586a122c4663e63076c1f2276", "url": "https://github.com/crate/crate/commit/d091774d6c173b2586a122c4663e63076c1f2276", "message": "Add the Postgresql `regproc` data type.", "committedDate": "2020-06-10T14:35:00Z", "type": "commit"}, {"oid": "ebe35c7aa0170c4fe3262944394229635492e900", "url": "https://github.com/crate/crate/commit/ebe35c7aa0170c4fe3262944394229635492e900", "message": "Use regproc type for correspodning columns in pg_catalog tables.", "committedDate": "2020-06-10T14:35:00Z", "type": "commit"}, {"oid": "0f6d35782046737a4691af1e42a7295bfd2328bf", "url": "https://github.com/crate/crate/commit/0f6d35782046737a4691af1e42a7295bfd2328bf", "message": "Document the `regproc` data type.", "committedDate": "2020-06-10T14:35:00Z", "type": "commit"}, {"oid": "0f6d35782046737a4691af1e42a7295bfd2328bf", "url": "https://github.com/crate/crate/commit/0f6d35782046737a4691af1e42a7295bfd2328bf", "message": "Document the `regproc` data type.", "committedDate": "2020-06-10T14:35:00Z", "type": "forcePushed"}]}