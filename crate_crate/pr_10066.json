{"pr_number": 10066, "pr_title": "Detect Integer literal values at the sql parser", "pr_author": "seut", "pr_createdAt": "2020-06-09T15:17:08Z", "pr_url": "https://github.com/crate/crate/pull/10066", "timeline": [{"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "url": "https://github.com/crate/crate/commit/d5bad6f60cd0243ee9f62b85640433af117e67fd", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-09T15:26:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ==", "url": "https://github.com/crate/crate/pull/10066#discussion_r437533505", "body": "```suggestion\r\n            builder.append(Integer.toString(node.getValue()));\r\n```\r\n\r\nCheaper than going through `String.format` ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));\n          \n          \n            \n                        builder.append(Integer.toString(node.getValue()));\n          \n      \n    \n    \n  \n\nCheaper than going through String.format", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            builder<span class=\"pl-k\">.</span>append(<span class=\"pl-smi x x-first\">String</span><span class=\"pl-k x\">.</span><span class=\"x\">format(</span><span class=\"pl-smi x\">Locale</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">ENGLISH</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">%d</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, </span>node<span class=\"pl-k\">.</span>getValue()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            builder<span class=\"pl-k\">.</span>append(<span class=\"pl-smi x x-first\">Integer</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toString(</span>node<span class=\"pl-k\">.</span>getValue()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Cheaper than going through <code>String.format</code></p>", "author": "mfussenegger", "createdAt": "2020-06-09T15:45:12Z", "path": "libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -679,6 +680,12 @@ protected Void visitLongLiteral(LongLiteral node, Integer indent) {\n             return null;\n         }\n \n+        @Override\n+        protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) {\n+            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));", "originalCommit": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODU1Ng==", "url": "https://github.com/crate/crate/pull/10066#discussion_r437978556", "bodyText": "Afaik it could be just builder.append(node.getValue()) as the StringBuilder is already doing similar.", "author": "seut", "createdAt": "2020-06-10T09:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzYxOA==", "url": "https://github.com/crate/crate/pull/10066#discussion_r437933618", "body": "\ud83d\udc4d \r\n\r\nreally minor, probably it can just return `value` to avoid integer boxing with `Objects.hash` or use `Integer#hashCode`.", "bodyText": "\ud83d\udc4d\nreally minor, probably it can just return value to avoid integer boxing with Objects.hash or use Integer#hashCode.", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji></p>\n<p dir=\"auto\">really minor, probably it can just return <code>value</code> to avoid integer boxing with <code>Objects.hash</code> or use <code>Integer#hashCode</code>.</p>", "author": "kovrus", "createdAt": "2020-06-10T07:59:27Z", "path": "libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import java.util.Objects;\n+\n+public class IntegerLiteral extends Literal {\n+\n+    private final int value;\n+\n+    public IntegerLiteral(int value) {\n+        this.value = value;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitIntegerLiteral(this, context);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        IntegerLiteral that = (IntegerLiteral) o;\n+        return value == that.value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);", "originalCommit": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8d4464b377757997ebc9a84a375894fe3c10199c", "url": "https://github.com/crate/crate/commit/8d4464b377757997ebc9a84a375894fe3c10199c", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-10T09:36:51Z", "type": "forcePushed"}, {"oid": "db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "url": "https://github.com/crate/crate/commit/db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-10T10:15:58Z", "type": "commit"}, {"oid": "db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "url": "https://github.com/crate/crate/commit/db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``.", "committedDate": "2020-06-10T10:15:58Z", "type": "forcePushed"}]}