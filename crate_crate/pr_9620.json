{"pr_number": 9620, "pr_title": "Add returning for insert to analyzer", "pr_author": "mkleen", "pr_createdAt": "2020-02-04T13:15:19Z", "pr_url": "https://github.com/crate/crate/pull/9620", "timeline": [{"oid": "df007c6833230b021803185258b9e44d3eb3ae59", "url": "https://github.com/crate/crate/commit/df007c6833230b021803185258b9e44d3eb3ae59", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-04T13:17:07Z", "type": "forcePushed"}, {"oid": "e938c6df28c38a8506408723368a88874ab94369", "url": "https://github.com/crate/crate/commit/e938c6df28c38a8506408723368a88874ab94369", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-04T13:21:48Z", "type": "forcePushed"}, {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "url": "https://github.com/crate/crate/commit/657ba0646a44aef6fff7c5bc06c81642e24f078c", "message": "Simplify return value part in InsertAnalyzer", "committedDate": "2020-02-05T07:10:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375118981", "body": "```suggestion\r\n                fields.add(new Field(this, path, outputsIterator.next()));\r\n```\r\n\r\nThe `relation` of a `Field` must point to the relation who owns the field, which in this case here is the `AnalyzedInsertStatement`. ", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));\n          \n          \n            \n                            fields.add(new Field(this, path, outputsIterator.next()));\n          \n      \n    \n    \n  \n\nThe relation of a Field must point to the relation who owns the field, which in this case here is the AnalyzedInsertStatement.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                fields<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Field</span>(<span class=\"pl-k x x-first\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">TableRelation</span><span class=\"x x-last\">(tableInfo)</span>, path, outputsIterator<span class=\"pl-k\">.</span>next()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                fields<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Field</span>(<span class=\"pl-c1 x x-first x-last\">this</span>, path, outputsIterator<span class=\"pl-k\">.</span>next()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">The <code>relation</code> of a <code>Field</code> must point to the relation who owns the field, which in this case here is the <code>AnalyzedInsertStatement</code>.</p>", "author": "mfussenegger", "createdAt": "2020-02-05T08:37:18Z", "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "originalCommit": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1MTI3OA==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375151278", "bodyText": "AnalyzedInsertStatement is not an AnalyzedRelation so it can't be this. The subQueryRelation would of course work, but i assumed that the subquery relation is not the relation who owns the output field, so this is why I ended with this solution. What I am missing here ?", "author": "mkleen", "createdAt": "2020-02-05T09:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2MjM2Nw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375162367", "bodyText": "Oh I see, I missed that.\nCould you add a inline comment about that? We'll need to address that eventually, but given that we did the same for Update I guess it is okay to move along as is for now.", "author": "mfussenegger", "createdAt": "2020-02-05T10:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MzYwOQ==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375173609", "bodyText": "Ok, will do. Thanks for the feedback. So, AnalyzedInsertStatement should be a Relation in an ideal world ?", "author": "mkleen", "createdAt": "2020-02-05T10:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4Nzk4Mw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375187983", "bodyText": "Currently my thinking is that in an ideal world the Field wouldn't have this relation reference in its current form.\nI'm not sure about AnalyzedInsertStatement being a Relation - or changing the hierarchy there in some other form. The focus would be more on changing fields() and outputs (or in this case, the returnValues`, so that only 1 is needed and not both.\nBut that's something for the future.", "author": "mfussenegger", "createdAt": "2020-02-05T10:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDA2Mg==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375120062", "body": "```suggestion\r\n            DocTableRelation targetTableRelation = (DocTableRelation) relationAnalyzer.analyze(insert.table(), stmtCtx);\r\n```\r\n\r\nFurther below is currently a cast to `FieldResolver` that looks unsafe. \r\nMy preference would be to put it here instead. Here the relation between `insert.table() -> DocTableRelation` is more visible. Could even add a comment to clarify that relationship.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n          \n            \n                        DocTableRelation targetTableRelation = (DocTableRelation) relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n      \n    \n    \n  \n\nFurther below is currently a cast to FieldResolver that looks unsafe.\nMy preference would be to put it here instead. Here the relation between insert.table() -> DocTableRelation is more visible. Could even add a comment to clarify that relationship.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k x x-first\">var</span><span class=\"x\"> relation </span><span class=\"pl-k x x-last\">=</span> relationAnalyzer<span class=\"pl-k\">.</span>analyze(insert<span class=\"pl-k\">.</span>table(), stmtCtx);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-smi x x-first\">DocTableRelation</span><span class=\"x\"> targetTableRelation </span><span class=\"pl-k x\">=</span><span class=\"x\"> (</span><span class=\"pl-smi x\">DocTableRelation</span><span class=\"x x-last\">)</span> relationAnalyzer<span class=\"pl-k\">.</span>analyze(insert<span class=\"pl-k\">.</span>table(), stmtCtx);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Further below is currently a cast to <code>FieldResolver</code> that looks unsafe.<br>\nMy preference would be to put it here instead. Here the relation between <code>insert.table() -&gt; DocTableRelation</code> is more visible. Could even add a comment to clarify that relationship.</p>", "author": "mfussenegger", "createdAt": "2020-02-05T08:39:54Z", "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);", "originalCommit": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMjY2NA==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375122664", "bodyText": "Or even better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n          \n            \n                        var relation = new DocTableRelation(tableInfo);", "author": "mfussenegger", "createdAt": "2020-02-05T08:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375123234", "body": "I'm not sure if we should do the normalization here already.\r\n\r\nThis is to turn `Field` into `Reference` I assume?\r\n\r\nIn other cases we do this as part of the logical planning via the `RelationNormalizer`. Maybe you could have a look if it would be possible to also defer this to the `RelationNormalizer`.\r\n\r\nI wouldn't spend too much time on it. I want to change some things about `Field` and `Reference` soon anyhow.", "bodyText": "I'm not sure if we should do the normalization here already.\nThis is to turn Field into Reference I assume?\nIn other cases we do this as part of the logical planning via the RelationNormalizer. Maybe you could have a look if it would be possible to also defer this to the RelationNormalizer.\nI wouldn't spend too much time on it. I want to change some things about Field and Reference soon anyhow.", "bodyHTML": "<p dir=\"auto\">I'm not sure if we should do the normalization here already.</p>\n<p dir=\"auto\">This is to turn <code>Field</code> into <code>Reference</code> I assume?</p>\n<p dir=\"auto\">In other cases we do this as part of the logical planning via the <code>RelationNormalizer</code>. Maybe you could have a look if it would be possible to also defer this to the <code>RelationNormalizer</code>.</p>\n<p dir=\"auto\">I wouldn't spend too much time on it. I want to change some things about <code>Field</code> and <code>Reference</code> soon anyhow.</p>", "author": "mfussenegger", "createdAt": "2020-02-05T08:47:12Z", "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            stmtCtx.endRelation();\n+\n+            var exprCtx = new ExpressionAnalysisContext();\n+            var sourceExprAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                txnCtx,\n+                typeHints,\n+                new FullQualifiedNameFieldProvider(\n+                    relCtx.sources(),\n+                    relCtx.parentSources(),\n+                    txnCtx.sessionContext().searchPath().currentSchema()\n+                ),\n+                null\n+            );\n+\n+            var selectAnalysis = SelectAnalyzer.analyzeSelectItems(\n+                insert.returningClause(),\n+                relCtx.sources(),\n+                sourceExprAnalyzer,\n+                exprCtx\n+            );\n+\n+            var normalizer = new EvaluatingNormalizer(functions,\n+                                                      RowGranularity.CLUSTER,\n+                                                      null,\n+                                                      (FieldResolver) relation);\n+\n+            returnValues = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));", "originalCommit": "657ba0646a44aef6fff7c5bc06c81642e24f078c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3ODcwMw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375178703", "bodyText": "CurrentIy we normalize also in the UpdateAnalyzer at the same point. I could extend the RelationNormalizer to also support the AnalyzedInsertStatement. Does this make sense to you ?", "author": "mkleen", "createdAt": "2020-02-05T10:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4NzM0Nw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375187347", "bodyText": "could extend the RelationNormalizer to also support the AnalyzedInsertStatement. Does this make sense to you ?\n\nYes, but only if it isn't too much effort and doesn't cause other issues.", "author": "mfussenegger", "createdAt": "2020-02-05T10:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjk1Mw==", "url": "https://github.com/crate/crate/pull/9620#discussion_r375212953", "bodyText": "I had a look at RelationNormalizer and I think conceptionally it would be a bit awkward to add  AnalyzedInsertStatement as a non-relational type to the RelationNormalizer. I would leave as it is right now, what do you think ?", "author": "mkleen", "createdAt": "2020-02-05T11:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}], "type": "inlineReview"}, {"oid": "e808fa991314809b903059ee2a5b9f8448624cf3", "url": "https://github.com/crate/crate/commit/e808fa991314809b903059ee2a5b9f8448624cf3", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-05T12:57:57Z", "type": "commit"}, {"oid": "e808fa991314809b903059ee2a5b9f8448624cf3", "url": "https://github.com/crate/crate/commit/e808fa991314809b903059ee2a5b9f8448624cf3", "message": "Add returnvalues and output fields for insert to analyzer", "committedDate": "2020-02-05T12:57:57Z", "type": "forcePushed"}]}