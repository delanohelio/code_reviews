{"pr_number": 10003, "pr_title": "Remove the cast function per data type mapping.", "pr_author": "kovrus", "pr_createdAt": "2020-05-26T16:01:18Z", "pr_url": "https://github.com/crate/crate/pull/10003", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw==", "url": "https://github.com/crate/crate/pull/10003#discussion_r430901137", "body": "```suggestion\r\n    public void test_cast_literal_return_function() {\r\n```\r\n\r\nPreviously this test asserted the already removed special `Literal.cast` logic.\r\nI've kept it to assert the opposite, ensuring that no special literal cast logic exist.\r\nNot sure if we should keep it but I'd suggest a different name expressing the current intention.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void test_cast_int_to_bigint() {\n          \n          \n            \n                public void test_cast_literal_return_function() {\n          \n      \n    \n    \n  \n\nPreviously this test asserted the already removed special Literal.cast logic.\nI've kept it to assert the opposite, ensuring that no special literal cast logic exist.\nNot sure if we should keep it but I'd suggest a different name expressing the current intention.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">test_cast_int_to_bigint</span>() {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"x x-first x-last\">test_cast_literal_return_function</span>() {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Previously this test asserted the already removed special <code>Literal.cast</code> logic.<br>\nI've kept it to assert the opposite, ensuring that no special literal cast logic exist.<br>\nNot sure if we should keep it but I'd suggest a different name expressing the current intention.</p>", "author": "seut", "createdAt": "2020-05-27T07:08:59Z", "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "diffHunk": "@@ -111,8 +110,14 @@ public void testCompareNestedArrayValues() throws Exception {\n     }\n \n     @Test\n-    public void testCasting() {\n+    public void test_cast_int_to_bigint() {", "originalCommit": "8eda863b2df7fe7f08aa845951b44f7c59dccea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MzYzMg==", "url": "https://github.com/crate/crate/pull/10003#discussion_r430993632", "bodyText": "i'll drop it then if it was an assertion for the special Literal.cast logic.", "author": "kovrus", "createdAt": "2020-05-27T09:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5NDg5NQ==", "url": "https://github.com/crate/crate/pull/10003#discussion_r430994895", "bodyText": "I'd prefer to keep it with a concrete name (sorry, I was thinking about this again and I think it's worth to keep it so we do not re-add anything special here ;)", "author": "seut", "createdAt": "2020-05-27T09:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5ODgzNg==", "url": "https://github.com/crate/crate/pull/10003#discussion_r430998836", "bodyText": "pushed the fixup, i am not sure about the name, i've named it test_cast_on_literal_is_not_evaluated_immediately, but maybe smth like test_cast_on_literal_is_not_normalized would be better?", "author": "kovrus", "createdAt": "2020-05-27T09:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwODY4MQ==", "url": "https://github.com/crate/crate/pull/10003#discussion_r431008681", "bodyText": "The test ensures that a cast function is returned on casting literals. So the name should express it. After normalization or evaluation the cast literal (the cast function containing the literal) will be indeed converted to a new literal, which is not happening here.\nThats why it should be called test_cast_on_literal_returns_cast_function or similar.", "author": "seut", "createdAt": "2020-05-27T10:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}], "type": "inlineReview"}, {"oid": "ae25dbe1faffb4b388cb762e04224d7e36d4f49b", "url": "https://github.com/crate/crate/commit/ae25dbe1faffb4b388cb762e04224d7e36d4f49b", "message": "fixup! Remove the cast function per data type mapping.", "committedDate": "2020-05-27T09:48:18Z", "type": "forcePushed"}, {"oid": "5f04f7e57a7c071bc8d7c5ba543b7fa9a0f7e419", "url": "https://github.com/crate/crate/commit/5f04f7e57a7c071bc8d7c5ba543b7fa9a0f7e419", "message": "fixup! Remove the cast function per data type mapping.", "committedDate": "2020-05-27T09:53:29Z", "type": "forcePushed"}, {"oid": "86f2ab3b6b16d3b65e13c871b25ab30273b5286f", "url": "https://github.com/crate/crate/commit/86f2ab3b6b16d3b65e13c871b25ab30273b5286f", "message": "Remove the cast function per data type mapping.\n\nCurrently, we maintained the cast function per data type mapping.\nThe name of the target data type is part of the cast function name,\nit looks as following `to_<type>` or for the try cast `try_<type>`.\nEach cast function has the following signatures:\n\n    `try_<target_type>(source_type, target_type):target_type`\nor\n    `to_<target_type>(source_type, target_type):target_type`\n\nthat obviously duplicates information about the target type.\n\nThis commit replaces the cast function per data type mapping with\nthe two cast function with the following signatures:\n\n    `cast(source_type, target_type):target_type`\n    `try_cast(source_type, target_type):target_type`\n\ninstead of ~70 registered per data type cast functions.\n\nThis is a backwards-compatible change. The cast functions were never\nstored in the metadata with names under which they were registered.\ne.g. `to_bigint`, etc. The symbol printer was always converting them\ninto the following format:\n\n    `cast(source as target_type)`.\nor\n    `try_cast(source as target_type)`.", "committedDate": "2020-05-27T11:13:54Z", "type": "commit"}, {"oid": "86f2ab3b6b16d3b65e13c871b25ab30273b5286f", "url": "https://github.com/crate/crate/commit/86f2ab3b6b16d3b65e13c871b25ab30273b5286f", "message": "Remove the cast function per data type mapping.\n\nCurrently, we maintained the cast function per data type mapping.\nThe name of the target data type is part of the cast function name,\nit looks as following `to_<type>` or for the try cast `try_<type>`.\nEach cast function has the following signatures:\n\n    `try_<target_type>(source_type, target_type):target_type`\nor\n    `to_<target_type>(source_type, target_type):target_type`\n\nthat obviously duplicates information about the target type.\n\nThis commit replaces the cast function per data type mapping with\nthe two cast function with the following signatures:\n\n    `cast(source_type, target_type):target_type`\n    `try_cast(source_type, target_type):target_type`\n\ninstead of ~70 registered per data type cast functions.\n\nThis is a backwards-compatible change. The cast functions were never\nstored in the metadata with names under which they were registered.\ne.g. `to_bigint`, etc. The symbol printer was always converting them\ninto the following format:\n\n    `cast(source as target_type)`.\nor\n    `try_cast(source as target_type)`.", "committedDate": "2020-05-27T11:13:54Z", "type": "forcePushed"}]}