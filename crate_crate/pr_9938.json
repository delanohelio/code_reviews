{"pr_number": 9938, "pr_title": "String scalar functions: chr", "pr_author": "pooja1pathak", "pr_createdAt": "2020-05-12T09:48:13Z", "pr_url": "https://github.com/crate/crate/pull/9938", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDgzMg==", "url": "https://github.com/crate/crate/pull/9938#discussion_r423610832", "body": "Could you change the test cases that test for errors to use `expectedException.expectMessage(\"...\")` and `expectedException.expect(IllegalArgumentException.class)` ?\r\n\r\nIf `chr(0)` would be changed to return an empty string, this test case as it is would still pass. \r\n", "bodyText": "Could you change the test cases that test for errors to use expectedException.expectMessage(\"...\") and expectedException.expect(IllegalArgumentException.class) ?\nIf chr(0) would be changed to return an empty string, this test case as it is would still pass.", "bodyHTML": "<p dir=\"auto\">Could you change the test cases that test for errors to use <code>expectedException.expectMessage(\"...\")</code> and <code>expectedException.expect(IllegalArgumentException.class)</code> ?</p>\n<p dir=\"auto\">If <code>chr(0)</code> would be changed to return an empty string, this test case as it is would still pass.</p>", "author": "mfussenegger", "createdAt": "2020-05-12T09:55:37Z", "path": "sql/src/test/java/io/crate/expression/scalar/string/ChrFunctionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import org.junit.Test;\n+import java.lang.Exception;\n+import static org.junit.matchers.JUnitMatchers.*;\n+\n+public class ChrFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void test_zero_value_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(0)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"null character not permitted\"));\n+        }", "originalCommit": "401b52f6be344ad22c45704f46c198589db01d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMTQ5MQ==", "url": "https://github.com/crate/crate/pull/9938#discussion_r423611491", "body": "```suggestion\r\n```\r\n\r\n`i` isn't used in this context", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int i = 65;\n          \n      \n    \n    \n  \n\ni isn't used in this context", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-k x\">int</span><span class=\"x\"> i </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">65</span><span class=\"x x-last\">;</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\"><code>i</code> isn't used in this context</p>", "author": "mfussenegger", "createdAt": "2020-05-12T09:56:47Z", "path": "sql/src/test/java/io/crate/expression/scalar/string/ChrFunctionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import org.junit.Test;\n+import java.lang.Exception;\n+import static org.junit.matchers.JUnitMatchers.*;\n+\n+public class ChrFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void test_zero_value_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(0)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"null character not permitted\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_negative_number_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(-1)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"requested character too large for encoding: -1\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_large_number_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(1114112)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"requested character too large for encoding: 1114112\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_empty_value_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr()\", \"\");\n+        }\n+        catch (Exception exception){\n+            assertThat(exception.getMessage(), containsString(\"unknown function: chr()\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_chr_positive_number() throws Exception {\n+        int i = 65;", "originalCommit": "401b52f6be344ad22c45704f46c198589db01d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6b5b0a4462313cfe41527df2a362f5f9ca015ee6", "url": "https://github.com/crate/crate/commit/6b5b0a4462313cfe41527df2a362f5f9ca015ee6", "message": "Add chr(int) scalar function", "committedDate": "2020-05-27T09:32:11Z", "type": "forcePushed"}, {"oid": "5a1d040f375acc2c8c941f207c63147d23f39050", "url": "https://github.com/crate/crate/commit/5a1d040f375acc2c8c941f207c63147d23f39050", "message": "Add chr(int) scalar function", "committedDate": "2020-05-28T12:37:26Z", "type": "forcePushed"}, {"oid": "f70d930df731b1c49a5875021c8038342facb808", "url": "https://github.com/crate/crate/commit/f70d930df731b1c49a5875021c8038342facb808", "message": "Add chr(int) scalar function", "committedDate": "2020-05-28T12:52:28Z", "type": "commit"}, {"oid": "f70d930df731b1c49a5875021c8038342facb808", "url": "https://github.com/crate/crate/commit/f70d930df731b1c49a5875021c8038342facb808", "message": "Add chr(int) scalar function", "committedDate": "2020-05-28T12:52:28Z", "type": "forcePushed"}]}