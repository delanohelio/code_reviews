{"pr_number": 1266, "pr_title": "Added a separate module for backend JWT generation", "pr_author": "HeshanSudarshana", "pr_createdAt": "2020-06-07T17:52:44Z", "pr_url": "https://github.com/wso2/product-microgateway/pull/1266", "timeline": [{"oid": "bbe2fad2b5db6894a2f6f604c48a689555160239", "url": "https://github.com/wso2/product-microgateway/commit/bbe2fad2b5db6894a2f6f604c48a689555160239", "message": "separate module added for jwt generation, updated test cases", "committedDate": "2020-06-07T17:40:30Z", "type": "commit"}, {"oid": "67623659fae2480c71c92c692dac47c1b8ac1d9a", "url": "https://github.com/wso2/product-microgateway/commit/67623659fae2480c71c92c692dac47c1b8ac1d9a", "message": "conf template changed, skew time duplicated assignment removed", "committedDate": "2020-06-08T10:11:30Z", "type": "commit"}, {"oid": "a2ad95af01030294fa8f00f59e79f6d37a89a300", "url": "https://github.com/wso2/product-microgateway/commit/a2ad95af01030294fa8f00f59e79f6d37a89a300", "message": "checking backendJwt claim added with tests", "committedDate": "2020-06-08T17:58:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNzkzNw==", "url": "https://github.com/wso2/product-microgateway/pull/1266#discussion_r437127937", "body": "```suggestion\r\n}\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">}</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Rajith90", "createdAt": "2020-06-09T04:16:17Z", "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtgenerator/TestJWTGenerator.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.tests.jwtgenerator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * This class is for default Jwt transformer.\n+ */\n+public class TestJWTGenerator extends AbstractMGWJWTGenerator {\n+    public TestJWTGenerator(String dialectURI,\n+                            String signatureAlgorithm,\n+                            String keyStorePath,\n+                            String keyStorePassword,\n+                            String certificateAlias,\n+                            String privateKeyAlias,\n+                            int jwtExpiryTime,\n+                            String[] restrictedClaims,\n+                            boolean cacheEnabled,\n+                            int cacheExpiry,\n+                            String tokenIssuer,\n+                            String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap<>();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap<>();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {\n+                Map<String, Object> customClaims = (Map<String, Object>) jwtInfo.get(key);\n+                for (String subKey: customClaims.keySet()) {\n+                    if (!restrictedClaims.contains(subKey)) {\n+                        claims.put(subKey, customClaims.get(subKey));\n+                    }\n+                }\n+            } else {\n+                if (!restrictedClaims.contains(key)) {\n+                    claims.put(key, jwtInfo.get(key));\n+                }\n+            }\n+        }\n+        return claims;\n+    }\n+}", "originalCommit": "a2ad95af01030294fa8f00f59e79f6d37a89a300", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8723e034fa5ede6faa718fe588fb09eccdd661d", "url": "https://github.com/wso2/product-microgateway/commit/f8723e034fa5ede6faa718fe588fb09eccdd661d", "message": "Update components/micro-gateway-jwt-generator/pom.xml with suggested changes\n\nCo-authored-by: Rajith Roshan <rajithroshan90@gmail.com>", "committedDate": "2020-06-09T04:52:00Z", "type": "commit"}, {"oid": "cabccc5762f0ba57e71e84f036cd280c327fd940", "url": "https://github.com/wso2/product-microgateway/commit/cabccc5762f0ba57e71e84f036cd280c327fd940", "message": "Update tests/src/main/java/org/wso2/micro/gateway/tests/jwtgenerator/TestJWTGenerator.java with suggested changes\n\nCo-authored-by: Rajith Roshan <rajithroshan90@gmail.com>", "committedDate": "2020-06-09T04:52:25Z", "type": "commit"}, {"oid": "b186d3ff276dd837f9a7f2eba3277e30a433f244", "url": "https://github.com/wso2/product-microgateway/commit/b186d3ff276dd837f9a7f2eba3277e30a433f244", "message": "Merge branch 'master' of https://github.com/wso2/product-microgateway into backend-jwt\n\n\u0001 Conflicts:\n\u0001\tdistribution/pom.xml", "committedDate": "2020-06-09T08:07:14Z", "type": "commit"}, {"oid": "f67564c25175144525f4ef689ee408df67af2f32", "url": "https://github.com/wso2/product-microgateway/commit/f67564c25175144525f4ef689ee408df67af2f32", "message": "logging added to jwt generator pom", "committedDate": "2020-06-09T09:30:45Z", "type": "commit"}, {"oid": "708bce58f9fa8706d0a5d51f0b4b75c52d1de990", "url": "https://github.com/wso2/product-microgateway/commit/708bce58f9fa8706d0a5d51f0b4b75c52d1de990", "message": "Merge branch 'backend-jwt' of https://github.com/HeshanSudarshana/product-microgateway into backend-jwt", "committedDate": "2020-06-09T09:49:42Z", "type": "commit"}]}