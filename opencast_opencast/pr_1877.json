{"pr_number": 1877, "pr_title": "Extended CoverImageWOH to be able to use extended and series metadata", "pr_author": "jduehring", "pr_createdAt": "2020-09-28T08:33:31Z", "pr_url": "https://github.com/opencast/opencast/pull/1877", "merge_commit": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "timeline": [{"oid": "e31f0c77bee9638ae20485e8e5c38a984d9743dc", "url": "https://github.com/opencast/opencast/commit/e31f0c77bee9638ae20485e8e5c38a984d9743dc", "message": "added basic functionality for extended dublincore episodes and series", "committedDate": "2020-09-11T00:26:22Z", "type": "commit"}, {"oid": "2c70f8e813cf327354125564e4955c7d8da6d5ad", "url": "https://github.com/opencast/opencast/commit/2c70f8e813cf327354125564e4955c7d8da6d5ad", "message": "removed unused function", "committedDate": "2020-09-11T00:29:06Z", "type": "commit"}, {"oid": "64daa896ea520469c610e7bd02fb969721c84f88", "url": "https://github.com/opencast/opencast/commit/64daa896ea520469c610e7bd02fb969721c84f88", "message": "removed unneccessary comments", "committedDate": "2020-09-11T00:31:07Z", "type": "commit"}, {"oid": "614d225a3f24d5e05ec8fa5dd67215a92f2b48a2", "url": "https://github.com/opencast/opencast/commit/614d225a3f24d5e05ec8fa5dd67215a92f2b48a2", "message": "finished CoverImageWOH functionality, cleaned up code", "committedDate": "2020-09-27T11:47:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NTQwNw==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r496145407", "body": "This is easier than to check manually for empty values:\r\n```suggestion\r\n    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode);\r\n```", "bodyText": "This is easier than to check manually for empty values:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n          \n          \n            \n                final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode);", "bodyHTML": "<p dir=\"auto\">This is easier than to check manually for empty values:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">String</span> configuredEpisodeFlavor <span class=\"pl-k\">=</span> <span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">trimToEmpty</span>(operation<span class=\"pl-k\">.</span>getConfiguration(<span class=\"pl-c1\">EPISODE_FLAVOR</span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first\">final</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">String</span> configuredEpisodeFlavor <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">Objects</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">toString(</span><span class=\"pl-smi\">StringUtils</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">trimToNull</span>(operation<span class=\"pl-k\">.</span>getConfiguration(<span class=\"pl-c1\">EPISODE_FLAVOR</span>)<span class=\"x x-first\">), </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">dublincore/episode</span>);</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lkiesow", "createdAt": "2020-09-28T18:18:57Z", "path": "modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java", "diffHunk": "@@ -302,57 +304,87 @@ protected String loadXsl(WorkflowOperationInstance operation) throws WorkflowOpe\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp) {\n-    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n+  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n+    //get specified episode/series flavor\n+    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));", "originalCommit": "614d225a3f24d5e05ec8fa5dd67215a92f2b48a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20318bee86f4da10721e92d9706ac1f880ab4347", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..7544a3b0e4 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -306,27 +307,16 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n-    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n+    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode\");\n+    final String configuredSeriesFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)), \"dublincore/series\");\n \n-    //use dublincore/episode and dublincore/series metadata-catalogs as default\n-    if ((\"\").equals(configuredEpisodeFlavor)) {\n-      configuredEpisodeFlavor = \"dublincore/episode\";\n-    }\n-    if ((\"\").equals(configuredSeriesFlavor)) {\n-      configuredSeriesFlavor = \"dublincore/series\";\n-    }\n-\n-    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n-    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n-    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n-    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n+    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.\n-            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+    Catalog[] catalogs = mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(), StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n-   //load metadata-catalog\n+    //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n     Map<EName, List<DublinCoreValue>> data = dc.getValues();\n \n", "next_change": {"commit": "3396c55d966f1c7f4fc547ecdc8dadd23e4f669a", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 7544a3b0e4..5d2d769c2f 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -307,14 +307,20 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode\");\n-    final String configuredSeriesFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)), \"dublincore/series\");\n+    final String configuredEpisodeFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n+                    \"dublincore/episode\");\n+    final String configuredSeriesFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n+                    \"dublincore/series\");\n \n     MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n     MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(), StringUtils.lowerCase(episodeFlavor.getSubtype())));\n+    Catalog[] catalogs =\n+            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n+                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n     //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..fc1f7bbfa0 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -306,27 +316,22 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n-    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n+    final String configuredEpisodeFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n+                    \"dublincore/episode\");\n+    final String configuredSeriesFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n+                    \"dublincore/series\");\n \n-    //use dublincore/episode and dublincore/series metadata-catalogs as default\n-    if ((\"\").equals(configuredEpisodeFlavor)) {\n-      configuredEpisodeFlavor = \"dublincore/episode\";\n-    }\n-    if ((\"\").equals(configuredSeriesFlavor)) {\n-      configuredSeriesFlavor = \"dublincore/series\";\n-    }\n-\n-    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n-    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n-    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n-    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n+    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.\n-            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+    Catalog[] catalogs =\n+            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n+                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n-   //load metadata-catalog\n+    //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n     Map<EName, List<DublinCoreValue>> data = dc.getValues();\n \n", "next_change": {"commit": "7b58cd95933525a861deb17fa56fb78274bdd025", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex fc1f7bbfa0..6ffbe67431 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -314,106 +292,60 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n-    //get specified episode/series flavor\n-    final String configuredEpisodeFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n-                    \"dublincore/episode\");\n-    final String configuredSeriesFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n-                    \"dublincore/series\");\n-\n-    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n-    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n-\n-    //Get episode metadata-catalog\n-    Catalog[] catalogs =\n-            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n-                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n-\n-    //load metadata-catalog\n-    DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n-    Map<EName, List<DublinCoreValue>> data = dc.getValues();\n+  protected String getMetadataXml(MediaPackage mp) {\n+    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n \n-    //build xml from metadata\n     StringBuilder xml = new StringBuilder();\n     xml.append(\"<metadata xmlns:dcterms=\\\"http://purl.org/dc/terms/\\\">\");\n \n-    for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n-      String currentKey = entry.getKey().getLocalName();\n-      switch(currentKey) {\n-        case \"creator\":\n-          appendXml(xml, \"creators\", getValuesAsString(entry));\n-          break;\n-        case \"isPartOf\":\n-          xml.append(\"<series>\");\n-          //get series catalog\n-          Catalog[] seriesCatalogs =\n-                  mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n-          //get Series metadata\n-          DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n-          Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n-          //append series metadata\n-          for (Map.Entry<EName, List<DublinCoreValue>> seriesEntry : seriesMetadata.entrySet()) {\n-            String currentSeriesKey = seriesEntry.getKey().getLocalName();\n-            switch(currentSeriesKey) {\n-              case \"created\":\n-                String[] date = seriesEntry.getValue().get(0).getValue().split(\"\\\\.\");\n-                appendXml(xml, \"date\", date[0]);\n-                break;\n-              case \"contributor\":\n-                appendXml(xml, \"contributors\", getValuesAsString(seriesEntry));\n-                break;\n-              default: String key = seriesEntry.getKey().getLocalName();\n-                appendXml(xml, key, getValuesAsString(seriesEntry));\n-            }\n-          }\n-          xml.append(\"</series>\");\n-          break;\n-        case \"temporal\":\n-          String[] entries = entry.getValue().get(0).getValue().split(\";\");\n-          entries[0] = entries[0].trim().substring(6);\n-          entries[1] = entries[1].trim().substring(4);\n-          if (entries[0] != null) {\n-            appendXml(xml, \"start\", entries[0]);\n-          }\n-          if (entries[1] != null) {\n-            appendXml(xml, \"end\", entries[1]);\n-          }\n-          break;\n-        case \"created\":\n-          String[] date = entry.getValue().get(0).getValue().split(\"\\\\.\");\n-          appendXml(xml, \"date\", date[0]);\n-          break;\n-        case \"contributor\":\n-          appendXml(xml, \"contributors\", getValuesAsString(entry));\n-          break;\n-        default: appendXml(xml, entry.getKey().getLocalName(), getValuesAsString(entry));\n+    for (String title : getFirstMetadataValue(metadata.getTitles()))\n+      appendXml(xml, \"title\", title);\n+    for (String description : getFirstMetadataValue(metadata.getDescription()))\n+      appendXml(xml, \"description\", description);\n+    for (String language : metadata.getLanguage())\n+      appendXml(xml, \"language\", language);\n+    for (Date created : metadata.getCreated())\n+      /* Method formatDate of org.apache.xalan.lib.ExsltDatetime requires the format CCYY-MM-DDThh:mm:ss */\n+      appendXml(xml, \"date\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(created));\n+    for (Date[] period : metadata.getTemporalPeriod()) {\n+      if (period[0] != null) {\n+        appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[0]));\n+      }\n+      if (period[1] != null) {\n+        appendXml(xml, \"end\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[1]));\n       }\n     }\n+    for (Date instant : metadata.getTemporalInstant())\n+      appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(instant));\n+    for (Long duration : metadata.getTemporalDuration())\n+      appendXml(xml, \"duration\", new SimpleDateFormat(\"HH:mm:ss\").format(new Date(duration)));\n+    for (String license : getFirstMetadataValue(metadata.getLicenses()))\n+      appendXml(xml, \"license\", license);\n+    for (String isPartOf : metadata.getIsPartOf())\n+      appendXml(xml, \"series\", isPartOf);\n+    for (String contributors : getFirstMetadataValue(metadata.getContributors()))\n+      appendXml(xml, \"contributors\", contributors);\n+    for (String creators : getFirstMetadataValue(metadata.getCreators()))\n+      appendXml(xml, \"creators\", creators);\n+    for (String subjects : getFirstMetadataValue(metadata.getSubjects()))\n+      appendXml(xml, \"subjects\", subjects);\n \n     xml.append(\"</metadata>\");\n+\n     return xml.toString();\n   }\n \n-  protected String getValuesAsString(Map.Entry<EName, List<DublinCoreValue>> entry) {\n-    List<DublinCoreValue> values = entry.getValue();\n-    String stringValues = \"\";\n-    try {\n-      stringValues += values.get(0).getValue();\n-      for (int i = 1; i < values.size(); i++) {\n-        stringValues += \", \" + values.get(i).getValue();\n-      }\n-    } catch (IndexOutOfBoundsException e) {\n-      logger.warn(\"Given Key '{}' has no Entries : {}\", entry.getKey(), e.getMessage());\n+  protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n+    for (MetadataValue<String> data : list) {\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+        return Option.some(data.getValue());\n     }\n-    return stringValues;\n+    return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n       return;\n-    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": {"commit": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ffbe67431..57aedf8b92 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -337,15 +355,17 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n     for (MetadataValue<String> data : list) {\n-      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage())) {\n         return Option.some(data.getValue());\n+      }\n     }\n     return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n       return;\n+    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "message": "Merge commit", "committedDate": null}, {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025", "committedDate": "2020-12-08 06:26:34 +0100", "message": "implemented exemplary changes for three WOHs"}, {"oid": "a9a5be96435d00601db5a82270b133ba8c8196ed", "committedDate": "2020-12-23 02:16:43 +0100", "message": "reworked CoverImageWOH, AnalyzeAudioWOH and AnalyzeTrackWOH"}, {"oid": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "committedDate": "2021-04-15 00:24:01 +0200", "message": "merge with develop"}, {"oid": "b83245b2711c99fadb78c6a545be95d6110a041d", "committedDate": "2021-04-22 01:48:38 +0200", "message": "finished updating remaining WOHs"}, {"oid": "d9e7b28afeda56773dba5e383e0281587e6560e4", "committedDate": "2021-05-13 09:36:33 -0600", "message": "Merge branch 'TagHandling' of jduehring/opencast into develop"}, {"oid": "f98da08b068f658f3275ff98805497917cf8ce85", "committedDate": "2021-09-19 10:08:28 +0200", "message": "Check if series catalog exists"}, {"oid": "a55686beba099b0d173b9183751297f408cb7e42", "committedDate": "2022-05-09 20:09:48 +0200", "message": "Change the way workflows are stored in the database from XML to tables (#3376)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NzY4Ng==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r496147686", "body": "Better use\r\n\r\n```java\r\nMediaPackageElementFlavor.parseFlavor(flavorStr);\r\n```\r\nYou can then access the flavor and subflavor via the flavor object's methods.\r\nAnd it assures that it's a valid flavor or directly use it since you want a flavor object down below anyway.", "bodyText": "Better use\nMediaPackageElementFlavor.parseFlavor(flavorStr);\nYou can then access the flavor and subflavor via the flavor object's methods.\nAnd it assures that it's a valid flavor or directly use it since you want a flavor object down below anyway.", "bodyHTML": "<p dir=\"auto\">Better use</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MediaPackageElementFlavor.parseFlavor(flavorStr);\"><pre><span class=\"pl-smi\">MediaPackageElementFlavor</span><span class=\"pl-k\">.</span>parseFlavor(flavorStr);</pre></div>\n<p dir=\"auto\">You can then access the flavor and subflavor via the flavor object's methods.<br>\nAnd it assures that it's a valid flavor or directly use it since you want a flavor object down below anyway.</p>", "author": "lkiesow", "createdAt": "2020-09-28T18:23:07Z", "path": "modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java", "diffHunk": "@@ -302,57 +304,87 @@ protected String loadXsl(WorkflowOperationInstance operation) throws WorkflowOpe\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp) {\n-    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n+  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n+    //get specified episode/series flavor\n+    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n+    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n \n+    //use dublincore/episode and dublincore/series metadata-catalogs as default\n+    if ((\"\").equals(configuredEpisodeFlavor)) {\n+      configuredEpisodeFlavor = \"dublincore/episode\";\n+    }\n+    if ((\"\").equals(configuredSeriesFlavor)) {\n+      configuredSeriesFlavor = \"dublincore/series\";\n+    }\n+\n+    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n+    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n+    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n+    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];", "originalCommit": "614d225a3f24d5e05ec8fa5dd67215a92f2b48a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20318bee86f4da10721e92d9706ac1f880ab4347", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..7544a3b0e4 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -306,27 +307,16 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n-    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n+    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode\");\n+    final String configuredSeriesFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)), \"dublincore/series\");\n \n-    //use dublincore/episode and dublincore/series metadata-catalogs as default\n-    if ((\"\").equals(configuredEpisodeFlavor)) {\n-      configuredEpisodeFlavor = \"dublincore/episode\";\n-    }\n-    if ((\"\").equals(configuredSeriesFlavor)) {\n-      configuredSeriesFlavor = \"dublincore/series\";\n-    }\n-\n-    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n-    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n-    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n-    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n+    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.\n-            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+    Catalog[] catalogs = mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(), StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n-   //load metadata-catalog\n+    //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n     Map<EName, List<DublinCoreValue>> data = dc.getValues();\n \n", "next_change": {"commit": "3396c55d966f1c7f4fc547ecdc8dadd23e4f669a", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 7544a3b0e4..5d2d769c2f 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -307,14 +307,20 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode\");\n-    final String configuredSeriesFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)), \"dublincore/series\");\n+    final String configuredEpisodeFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n+                    \"dublincore/episode\");\n+    final String configuredSeriesFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n+                    \"dublincore/series\");\n \n     MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n     MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(), StringUtils.lowerCase(episodeFlavor.getSubtype())));\n+    Catalog[] catalogs =\n+            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n+                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n     //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..fc1f7bbfa0 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -306,27 +316,22 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n-    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n+    final String configuredEpisodeFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n+                    \"dublincore/episode\");\n+    final String configuredSeriesFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n+                    \"dublincore/series\");\n \n-    //use dublincore/episode and dublincore/series metadata-catalogs as default\n-    if ((\"\").equals(configuredEpisodeFlavor)) {\n-      configuredEpisodeFlavor = \"dublincore/episode\";\n-    }\n-    if ((\"\").equals(configuredSeriesFlavor)) {\n-      configuredSeriesFlavor = \"dublincore/series\";\n-    }\n-\n-    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n-    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n-    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n-    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n+    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.\n-            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+    Catalog[] catalogs =\n+            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n+                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n-   //load metadata-catalog\n+    //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n     Map<EName, List<DublinCoreValue>> data = dc.getValues();\n \n", "next_change": {"commit": "7b58cd95933525a861deb17fa56fb78274bdd025", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex fc1f7bbfa0..6ffbe67431 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -314,106 +292,60 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n-    //get specified episode/series flavor\n-    final String configuredEpisodeFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n-                    \"dublincore/episode\");\n-    final String configuredSeriesFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n-                    \"dublincore/series\");\n-\n-    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n-    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n-\n-    //Get episode metadata-catalog\n-    Catalog[] catalogs =\n-            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n-                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n-\n-    //load metadata-catalog\n-    DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n-    Map<EName, List<DublinCoreValue>> data = dc.getValues();\n+  protected String getMetadataXml(MediaPackage mp) {\n+    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n \n-    //build xml from metadata\n     StringBuilder xml = new StringBuilder();\n     xml.append(\"<metadata xmlns:dcterms=\\\"http://purl.org/dc/terms/\\\">\");\n \n-    for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n-      String currentKey = entry.getKey().getLocalName();\n-      switch(currentKey) {\n-        case \"creator\":\n-          appendXml(xml, \"creators\", getValuesAsString(entry));\n-          break;\n-        case \"isPartOf\":\n-          xml.append(\"<series>\");\n-          //get series catalog\n-          Catalog[] seriesCatalogs =\n-                  mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n-          //get Series metadata\n-          DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n-          Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n-          //append series metadata\n-          for (Map.Entry<EName, List<DublinCoreValue>> seriesEntry : seriesMetadata.entrySet()) {\n-            String currentSeriesKey = seriesEntry.getKey().getLocalName();\n-            switch(currentSeriesKey) {\n-              case \"created\":\n-                String[] date = seriesEntry.getValue().get(0).getValue().split(\"\\\\.\");\n-                appendXml(xml, \"date\", date[0]);\n-                break;\n-              case \"contributor\":\n-                appendXml(xml, \"contributors\", getValuesAsString(seriesEntry));\n-                break;\n-              default: String key = seriesEntry.getKey().getLocalName();\n-                appendXml(xml, key, getValuesAsString(seriesEntry));\n-            }\n-          }\n-          xml.append(\"</series>\");\n-          break;\n-        case \"temporal\":\n-          String[] entries = entry.getValue().get(0).getValue().split(\";\");\n-          entries[0] = entries[0].trim().substring(6);\n-          entries[1] = entries[1].trim().substring(4);\n-          if (entries[0] != null) {\n-            appendXml(xml, \"start\", entries[0]);\n-          }\n-          if (entries[1] != null) {\n-            appendXml(xml, \"end\", entries[1]);\n-          }\n-          break;\n-        case \"created\":\n-          String[] date = entry.getValue().get(0).getValue().split(\"\\\\.\");\n-          appendXml(xml, \"date\", date[0]);\n-          break;\n-        case \"contributor\":\n-          appendXml(xml, \"contributors\", getValuesAsString(entry));\n-          break;\n-        default: appendXml(xml, entry.getKey().getLocalName(), getValuesAsString(entry));\n+    for (String title : getFirstMetadataValue(metadata.getTitles()))\n+      appendXml(xml, \"title\", title);\n+    for (String description : getFirstMetadataValue(metadata.getDescription()))\n+      appendXml(xml, \"description\", description);\n+    for (String language : metadata.getLanguage())\n+      appendXml(xml, \"language\", language);\n+    for (Date created : metadata.getCreated())\n+      /* Method formatDate of org.apache.xalan.lib.ExsltDatetime requires the format CCYY-MM-DDThh:mm:ss */\n+      appendXml(xml, \"date\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(created));\n+    for (Date[] period : metadata.getTemporalPeriod()) {\n+      if (period[0] != null) {\n+        appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[0]));\n+      }\n+      if (period[1] != null) {\n+        appendXml(xml, \"end\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[1]));\n       }\n     }\n+    for (Date instant : metadata.getTemporalInstant())\n+      appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(instant));\n+    for (Long duration : metadata.getTemporalDuration())\n+      appendXml(xml, \"duration\", new SimpleDateFormat(\"HH:mm:ss\").format(new Date(duration)));\n+    for (String license : getFirstMetadataValue(metadata.getLicenses()))\n+      appendXml(xml, \"license\", license);\n+    for (String isPartOf : metadata.getIsPartOf())\n+      appendXml(xml, \"series\", isPartOf);\n+    for (String contributors : getFirstMetadataValue(metadata.getContributors()))\n+      appendXml(xml, \"contributors\", contributors);\n+    for (String creators : getFirstMetadataValue(metadata.getCreators()))\n+      appendXml(xml, \"creators\", creators);\n+    for (String subjects : getFirstMetadataValue(metadata.getSubjects()))\n+      appendXml(xml, \"subjects\", subjects);\n \n     xml.append(\"</metadata>\");\n+\n     return xml.toString();\n   }\n \n-  protected String getValuesAsString(Map.Entry<EName, List<DublinCoreValue>> entry) {\n-    List<DublinCoreValue> values = entry.getValue();\n-    String stringValues = \"\";\n-    try {\n-      stringValues += values.get(0).getValue();\n-      for (int i = 1; i < values.size(); i++) {\n-        stringValues += \", \" + values.get(i).getValue();\n-      }\n-    } catch (IndexOutOfBoundsException e) {\n-      logger.warn(\"Given Key '{}' has no Entries : {}\", entry.getKey(), e.getMessage());\n+  protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n+    for (MetadataValue<String> data : list) {\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+        return Option.some(data.getValue());\n     }\n-    return stringValues;\n+    return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n       return;\n-    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": {"commit": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ffbe67431..57aedf8b92 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -337,15 +355,17 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n     for (MetadataValue<String> data : list) {\n-      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage())) {\n         return Option.some(data.getValue());\n+      }\n     }\n     return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n       return;\n+    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "message": "Merge commit", "committedDate": null}, {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025", "committedDate": "2020-12-08 06:26:34 +0100", "message": "implemented exemplary changes for three WOHs"}, {"oid": "a9a5be96435d00601db5a82270b133ba8c8196ed", "committedDate": "2020-12-23 02:16:43 +0100", "message": "reworked CoverImageWOH, AnalyzeAudioWOH and AnalyzeTrackWOH"}, {"oid": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "committedDate": "2021-04-15 00:24:01 +0200", "message": "merge with develop"}, {"oid": "b83245b2711c99fadb78c6a545be95d6110a041d", "committedDate": "2021-04-22 01:48:38 +0200", "message": "finished updating remaining WOHs"}, {"oid": "d9e7b28afeda56773dba5e383e0281587e6560e4", "committedDate": "2021-05-13 09:36:33 -0600", "message": "Merge branch 'TagHandling' of jduehring/opencast into develop"}, {"oid": "f98da08b068f658f3275ff98805497917cf8ce85", "committedDate": "2021-09-19 10:08:28 +0200", "message": "Check if series catalog exists"}, {"oid": "a55686beba099b0d173b9183751297f408cb7e42", "committedDate": "2022-05-09 20:09:48 +0200", "message": "Change the way workflows are stored in the database from XML to tables (#3376)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0ODQzOQ==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r496148439", "body": "indentation", "bodyText": "indentation", "bodyHTML": "<p dir=\"auto\">indentation</p>", "author": "lkiesow", "createdAt": "2020-09-28T18:24:29Z", "path": "modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java", "diffHunk": "@@ -302,57 +304,87 @@ protected String loadXsl(WorkflowOperationInstance operation) throws WorkflowOpe\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp) {\n-    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n+  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n+    //get specified episode/series flavor\n+    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n+    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n \n+    //use dublincore/episode and dublincore/series metadata-catalogs as default\n+    if ((\"\").equals(configuredEpisodeFlavor)) {\n+      configuredEpisodeFlavor = \"dublincore/episode\";\n+    }\n+    if ((\"\").equals(configuredSeriesFlavor)) {\n+      configuredSeriesFlavor = \"dublincore/series\";\n+    }\n+\n+    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n+    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n+    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n+    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+\n+    //Get episode metadata-catalog\n+    Catalog[] catalogs = mp.\n+            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+\n+   //load metadata-catalog", "originalCommit": "614d225a3f24d5e05ec8fa5dd67215a92f2b48a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20318bee86f4da10721e92d9706ac1f880ab4347", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..7544a3b0e4 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -306,27 +307,16 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n-    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n+    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode\");\n+    final String configuredSeriesFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)), \"dublincore/series\");\n \n-    //use dublincore/episode and dublincore/series metadata-catalogs as default\n-    if ((\"\").equals(configuredEpisodeFlavor)) {\n-      configuredEpisodeFlavor = \"dublincore/episode\";\n-    }\n-    if ((\"\").equals(configuredSeriesFlavor)) {\n-      configuredSeriesFlavor = \"dublincore/series\";\n-    }\n-\n-    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n-    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n-    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n-    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n+    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.\n-            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+    Catalog[] catalogs = mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(), StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n-   //load metadata-catalog\n+    //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n     Map<EName, List<DublinCoreValue>> data = dc.getValues();\n \n", "next_change": {"commit": "3396c55d966f1c7f4fc547ecdc8dadd23e4f669a", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 7544a3b0e4..5d2d769c2f 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -307,14 +307,20 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    final String configuredEpisodeFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)), \"dublincore/episode\");\n-    final String configuredSeriesFlavor = Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)), \"dublincore/series\");\n+    final String configuredEpisodeFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n+                    \"dublincore/episode\");\n+    final String configuredSeriesFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n+                    \"dublincore/series\");\n \n     MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n     MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(), StringUtils.lowerCase(episodeFlavor.getSubtype())));\n+    Catalog[] catalogs =\n+            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n+                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n     //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..fc1f7bbfa0 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -306,27 +316,22 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n     //get specified episode/series flavor\n-    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n-    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n+    final String configuredEpisodeFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n+                    \"dublincore/episode\");\n+    final String configuredSeriesFlavor =\n+            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n+                    \"dublincore/series\");\n \n-    //use dublincore/episode and dublincore/series metadata-catalogs as default\n-    if ((\"\").equals(configuredEpisodeFlavor)) {\n-      configuredEpisodeFlavor = \"dublincore/episode\";\n-    }\n-    if ((\"\").equals(configuredSeriesFlavor)) {\n-      configuredSeriesFlavor = \"dublincore/series\";\n-    }\n-\n-    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n-    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n-    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n-    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n+    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n \n     //Get episode metadata-catalog\n-    Catalog[] catalogs = mp.\n-            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+    Catalog[] catalogs =\n+            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n+                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n \n-   //load metadata-catalog\n+    //load metadata-catalog\n     DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n     Map<EName, List<DublinCoreValue>> data = dc.getValues();\n \n", "next_change": {"commit": "7b58cd95933525a861deb17fa56fb78274bdd025", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex fc1f7bbfa0..6ffbe67431 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -314,106 +292,60 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n-    //get specified episode/series flavor\n-    final String configuredEpisodeFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n-                    \"dublincore/episode\");\n-    final String configuredSeriesFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n-                    \"dublincore/series\");\n-\n-    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n-    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n-\n-    //Get episode metadata-catalog\n-    Catalog[] catalogs =\n-            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n-                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n-\n-    //load metadata-catalog\n-    DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n-    Map<EName, List<DublinCoreValue>> data = dc.getValues();\n+  protected String getMetadataXml(MediaPackage mp) {\n+    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n \n-    //build xml from metadata\n     StringBuilder xml = new StringBuilder();\n     xml.append(\"<metadata xmlns:dcterms=\\\"http://purl.org/dc/terms/\\\">\");\n \n-    for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n-      String currentKey = entry.getKey().getLocalName();\n-      switch(currentKey) {\n-        case \"creator\":\n-          appendXml(xml, \"creators\", getValuesAsString(entry));\n-          break;\n-        case \"isPartOf\":\n-          xml.append(\"<series>\");\n-          //get series catalog\n-          Catalog[] seriesCatalogs =\n-                  mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n-          //get Series metadata\n-          DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n-          Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n-          //append series metadata\n-          for (Map.Entry<EName, List<DublinCoreValue>> seriesEntry : seriesMetadata.entrySet()) {\n-            String currentSeriesKey = seriesEntry.getKey().getLocalName();\n-            switch(currentSeriesKey) {\n-              case \"created\":\n-                String[] date = seriesEntry.getValue().get(0).getValue().split(\"\\\\.\");\n-                appendXml(xml, \"date\", date[0]);\n-                break;\n-              case \"contributor\":\n-                appendXml(xml, \"contributors\", getValuesAsString(seriesEntry));\n-                break;\n-              default: String key = seriesEntry.getKey().getLocalName();\n-                appendXml(xml, key, getValuesAsString(seriesEntry));\n-            }\n-          }\n-          xml.append(\"</series>\");\n-          break;\n-        case \"temporal\":\n-          String[] entries = entry.getValue().get(0).getValue().split(\";\");\n-          entries[0] = entries[0].trim().substring(6);\n-          entries[1] = entries[1].trim().substring(4);\n-          if (entries[0] != null) {\n-            appendXml(xml, \"start\", entries[0]);\n-          }\n-          if (entries[1] != null) {\n-            appendXml(xml, \"end\", entries[1]);\n-          }\n-          break;\n-        case \"created\":\n-          String[] date = entry.getValue().get(0).getValue().split(\"\\\\.\");\n-          appendXml(xml, \"date\", date[0]);\n-          break;\n-        case \"contributor\":\n-          appendXml(xml, \"contributors\", getValuesAsString(entry));\n-          break;\n-        default: appendXml(xml, entry.getKey().getLocalName(), getValuesAsString(entry));\n+    for (String title : getFirstMetadataValue(metadata.getTitles()))\n+      appendXml(xml, \"title\", title);\n+    for (String description : getFirstMetadataValue(metadata.getDescription()))\n+      appendXml(xml, \"description\", description);\n+    for (String language : metadata.getLanguage())\n+      appendXml(xml, \"language\", language);\n+    for (Date created : metadata.getCreated())\n+      /* Method formatDate of org.apache.xalan.lib.ExsltDatetime requires the format CCYY-MM-DDThh:mm:ss */\n+      appendXml(xml, \"date\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(created));\n+    for (Date[] period : metadata.getTemporalPeriod()) {\n+      if (period[0] != null) {\n+        appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[0]));\n+      }\n+      if (period[1] != null) {\n+        appendXml(xml, \"end\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[1]));\n       }\n     }\n+    for (Date instant : metadata.getTemporalInstant())\n+      appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(instant));\n+    for (Long duration : metadata.getTemporalDuration())\n+      appendXml(xml, \"duration\", new SimpleDateFormat(\"HH:mm:ss\").format(new Date(duration)));\n+    for (String license : getFirstMetadataValue(metadata.getLicenses()))\n+      appendXml(xml, \"license\", license);\n+    for (String isPartOf : metadata.getIsPartOf())\n+      appendXml(xml, \"series\", isPartOf);\n+    for (String contributors : getFirstMetadataValue(metadata.getContributors()))\n+      appendXml(xml, \"contributors\", contributors);\n+    for (String creators : getFirstMetadataValue(metadata.getCreators()))\n+      appendXml(xml, \"creators\", creators);\n+    for (String subjects : getFirstMetadataValue(metadata.getSubjects()))\n+      appendXml(xml, \"subjects\", subjects);\n \n     xml.append(\"</metadata>\");\n+\n     return xml.toString();\n   }\n \n-  protected String getValuesAsString(Map.Entry<EName, List<DublinCoreValue>> entry) {\n-    List<DublinCoreValue> values = entry.getValue();\n-    String stringValues = \"\";\n-    try {\n-      stringValues += values.get(0).getValue();\n-      for (int i = 1; i < values.size(); i++) {\n-        stringValues += \", \" + values.get(i).getValue();\n-      }\n-    } catch (IndexOutOfBoundsException e) {\n-      logger.warn(\"Given Key '{}' has no Entries : {}\", entry.getKey(), e.getMessage());\n+  protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n+    for (MetadataValue<String> data : list) {\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+        return Option.some(data.getValue());\n     }\n-    return stringValues;\n+    return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n       return;\n-    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": {"commit": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ffbe67431..57aedf8b92 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -337,15 +355,17 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n     for (MetadataValue<String> data : list) {\n-      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage())) {\n         return Option.some(data.getValue());\n+      }\n     }\n     return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n       return;\n+    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "message": "Merge commit", "committedDate": null}, {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025", "committedDate": "2020-12-08 06:26:34 +0100", "message": "implemented exemplary changes for three WOHs"}, {"oid": "a9a5be96435d00601db5a82270b133ba8c8196ed", "committedDate": "2020-12-23 02:16:43 +0100", "message": "reworked CoverImageWOH, AnalyzeAudioWOH and AnalyzeTrackWOH"}, {"oid": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "committedDate": "2021-04-15 00:24:01 +0200", "message": "merge with develop"}, {"oid": "b83245b2711c99fadb78c6a545be95d6110a041d", "committedDate": "2021-04-22 01:48:38 +0200", "message": "finished updating remaining WOHs"}, {"oid": "d9e7b28afeda56773dba5e383e0281587e6560e4", "committedDate": "2021-05-13 09:36:33 -0600", "message": "Merge branch 'TagHandling' of jduehring/opencast into develop"}, {"oid": "f98da08b068f658f3275ff98805497917cf8ce85", "committedDate": "2021-09-19 10:08:28 +0200", "message": "Check if series catalog exists"}, {"oid": "a55686beba099b0d173b9183751297f408cb7e42", "committedDate": "2022-05-09 20:09:48 +0200", "message": "Change the way workflows are stored in the database from XML to tables (#3376)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r496150481", "body": "All these fields can exist not at all or multiple times. Will this work if they do not exist? Onbly using the first is probably okay but should be documented.", "bodyText": "All these fields can exist not at all or multiple times. Will this work if they do not exist? Onbly using the first is probably okay but should be documented.", "bodyHTML": "<p dir=\"auto\">All these fields can exist not at all or multiple times. Will this work if they do not exist? Onbly using the first is probably okay but should be documented.</p>", "author": "lkiesow", "createdAt": "2020-09-28T18:28:13Z", "path": "modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java", "diffHunk": "@@ -302,57 +304,87 @@ protected String loadXsl(WorkflowOperationInstance operation) throws WorkflowOpe\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp) {\n-    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n+  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n+    //get specified episode/series flavor\n+    String configuredEpisodeFlavor = StringUtils.trimToEmpty(operation.getConfiguration(EPISODE_FLAVOR));\n+    String configuredSeriesFlavor = StringUtils.trimToEmpty(operation.getConfiguration(SERIES_FLAVOR));\n \n+    //use dublincore/episode and dublincore/series metadata-catalogs as default\n+    if ((\"\").equals(configuredEpisodeFlavor)) {\n+      configuredEpisodeFlavor = \"dublincore/episode\";\n+    }\n+    if ((\"\").equals(configuredSeriesFlavor)) {\n+      configuredSeriesFlavor = \"dublincore/series\";\n+    }\n+\n+    String episodeFlavorType = configuredEpisodeFlavor.split(\"/\")[0];\n+    String episodeFlavorSubtype = configuredEpisodeFlavor.split(\"/\")[1];\n+    String seriesFlavorType = configuredSeriesFlavor.split(\"/\")[0];\n+    String seriesFlavorSubtype = configuredSeriesFlavor.split(\"/\")[1];\n+\n+    //Get episode metadata-catalog\n+    Catalog[] catalogs = mp.\n+            getCatalogs(new MediaPackageElementFlavor(episodeFlavorType, StringUtils.lowerCase(episodeFlavorSubtype)));\n+\n+   //load metadata-catalog\n+    DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n+    Map<EName, List<DublinCoreValue>> data = dc.getValues();\n+\n+    //build xml from metadata\n     StringBuilder xml = new StringBuilder();\n     xml.append(\"<metadata xmlns:dcterms=\\\"http://purl.org/dc/terms/\\\">\");\n \n-    for (String title : getFirstMetadataValue(metadata.getTitles()))\n-      appendXml(xml, \"title\", title);\n-    for (String description : getFirstMetadataValue(metadata.getDescription()))\n-      appendXml(xml, \"description\", description);\n-    for (String language : metadata.getLanguage())\n-      appendXml(xml, \"language\", language);\n-    for (Date created : metadata.getCreated())\n-      /* Method formatDate of org.apache.xalan.lib.ExsltDatetime requires the format CCYY-MM-DDThh:mm:ss */\n-      appendXml(xml, \"date\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(created));\n-    for (Date[] period : metadata.getTemporalPeriod()) {\n-      if (period[0] != null) {\n-        appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[0]));\n-      }\n-      if (period[1] != null) {\n-        appendXml(xml, \"end\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[1]));\n+    for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n+      String currentKey = entry.getKey().getLocalName();\n+      switch(currentKey) {\n+        case \"creator\": appendXml(xml, \"creators\", entry.getValue().get(0).getValue()); break;", "originalCommit": "614d225a3f24d5e05ec8fa5dd67215a92f2b48a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2Mjc1Nw==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r501662757", "bodyText": "Also the order of the list isn't fixed. I guess, we have to provide all values as list.", "author": "wsmirnow", "createdAt": "2020-10-08T11:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0Mzk2Nw==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r502843967", "bodyText": "@lkiesow If they do not exist, they are not beeing added to the xml, so it should be fine. There were no issues during my tests with non existing fields. I also added a note in the documentation.\n@wsmirnow You mean the order of the fields in the resulting xml should stay intact?", "author": "jduehring", "createdAt": "2020-10-10T23:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5NjU0OA==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r502896548", "bodyText": "iirc, the order isn't guaranteed in an XML document anyway.", "author": "lkiesow", "createdAt": "2020-10-11T10:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MTQzNA==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r503361434", "bodyText": "I would prefer the same order. It may be technically not possible. If you put only the first value of the list, you may end up with different values each call of the handler.", "author": "wsmirnow", "createdAt": "2020-10-12T15:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2ODQ1Mg==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r503368452", "bodyText": "Now I'm confused as well :D\nThe code should be deterministic, shouldn't it?\nSo you would get the same. You just don't get all of them.\n@jduehring, what happens if you iterate e.g. over multiple creator fields and call appendXml every time?", "author": "lkiesow", "createdAt": "2020-10-12T15:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwMzM4Ng==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r510003386", "bodyText": "Not sure how to test this. What would be the easiest way to get an episode containing metadata with multiple creator fields? Should this happen when I add multiple creators via the admin-ui? So for each creator one creator field?\nCurrently there seems to be a bug so that this does not happen. (Probably the reason for #1224 as well)\nIn theory my code should currently add  the same field multiple times, which is also not ideal, i guess.", "author": "jduehring", "createdAt": "2020-10-22T09:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1NTk1MQ==", "url": "https://github.com/opencast/opencast/pull/1877#discussion_r546655951", "bodyText": "Sorry for the late reply \ud83d\ude48\nThe following cURL command will ingest media with two titles (which will mostly be ignored by Opencast code and just the first is usually being used) and multiple creators (which Opencast can handle just fine\u2026 mostly):\ncurl -i -u admin:opencast \\\n  https://develop.opencast.org/ingest/addMediaPackage \\\n  -F 'flavor=presentation/source' \\\n  -F 'BODY=@sintel_trailer-1080p.mp4' \\\n  -F title=\"Title 1\" \\\n  -F title=\"Title 2\" \\\n  -F creator=\"Creator 1\" \\\n  -F creator=\"Creator 2\"", "author": "lkiesow", "createdAt": "2020-12-21T11:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MDQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "20318bee86f4da10721e92d9706ac1f880ab4347", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..7544a3b0e4 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -341,8 +331,7 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n         case \"isPartOf\":\n           xml.append(\"<series>\");\n           //get series catalog\n-          Catalog[] seriesCatalogs = mp.\n-                  getCatalogs(new MediaPackageElementFlavor(seriesFlavorType, seriesFlavorSubtype));\n+          Catalog[] seriesCatalogs = mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n           //get Series metadata\n           DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n           Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n", "next_change": {"commit": "a92cf79d731508e03a3d3a37aad93b416d311641", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 7544a3b0e4..3fa8c2d345 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -327,7 +327,9 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n     for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n       String currentKey = entry.getKey().getLocalName();\n       switch(currentKey) {\n-        case \"creator\": appendXml(xml, \"creators\", entry.getValue().get(0).getValue()); break;\n+        case \"creator\":\n+          appendXml(xml, \"creators\", getValuesAsString(entry));\n+          break;\n         case \"isPartOf\":\n           xml.append(\"<series>\");\n           //get series catalog\n", "next_change": {"commit": "3396c55d966f1c7f4fc547ecdc8dadd23e4f669a", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 3fa8c2d345..5d2d769c2f 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -333,7 +339,8 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n         case \"isPartOf\":\n           xml.append(\"<series>\");\n           //get series catalog\n-          Catalog[] seriesCatalogs = mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n+          Catalog[] seriesCatalogs =\n+                  mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n           //get Series metadata\n           DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n           Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ab159dafc..fc1f7bbfa0 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -337,12 +342,14 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n     for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n       String currentKey = entry.getKey().getLocalName();\n       switch(currentKey) {\n-        case \"creator\": appendXml(xml, \"creators\", entry.getValue().get(0).getValue()); break;\n+        case \"creator\":\n+          appendXml(xml, \"creators\", getValuesAsString(entry));\n+          break;\n         case \"isPartOf\":\n           xml.append(\"<series>\");\n           //get series catalog\n-          Catalog[] seriesCatalogs = mp.\n-                  getCatalogs(new MediaPackageElementFlavor(seriesFlavorType, seriesFlavorSubtype));\n+          Catalog[] seriesCatalogs =\n+                  mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n           //get Series metadata\n           DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n           Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n", "next_change": {"commit": "7b58cd95933525a861deb17fa56fb78274bdd025", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex fc1f7bbfa0..6ffbe67431 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -314,106 +292,60 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n     }\n   }\n \n-  protected String getMetadataXml(MediaPackage mp, WorkflowOperationInstance operation) {\n-    //get specified episode/series flavor\n-    final String configuredEpisodeFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(EPISODE_FLAVOR)),\n-                    \"dublincore/episode\");\n-    final String configuredSeriesFlavor =\n-            Objects.toString(StringUtils.trimToNull(operation.getConfiguration(SERIES_FLAVOR)),\n-                    \"dublincore/series\");\n-\n-    MediaPackageElementFlavor episodeFlavor = MediaPackageElementFlavor.parseFlavor(configuredEpisodeFlavor);\n-    MediaPackageElementFlavor seriesFlavor = MediaPackageElementFlavor.parseFlavor(configuredSeriesFlavor);\n-\n-    //Get episode metadata-catalog\n-    Catalog[] catalogs =\n-            mp.getCatalogs(new MediaPackageElementFlavor(episodeFlavor.getType(),\n-                    StringUtils.lowerCase(episodeFlavor.getSubtype())));\n-\n-    //load metadata-catalog\n-    DublinCoreCatalog dc = DublinCoreUtil.loadDublinCore(getWorkspace(), catalogs[0]);\n-    Map<EName, List<DublinCoreValue>> data = dc.getValues();\n+  protected String getMetadataXml(MediaPackage mp) {\n+    StaticMetadata metadata = getStaticMetadataService().getMetadata(mp);\n \n-    //build xml from metadata\n     StringBuilder xml = new StringBuilder();\n     xml.append(\"<metadata xmlns:dcterms=\\\"http://purl.org/dc/terms/\\\">\");\n \n-    for (Map.Entry<EName, List<DublinCoreValue>> entry : data.entrySet()) {\n-      String currentKey = entry.getKey().getLocalName();\n-      switch(currentKey) {\n-        case \"creator\":\n-          appendXml(xml, \"creators\", getValuesAsString(entry));\n-          break;\n-        case \"isPartOf\":\n-          xml.append(\"<series>\");\n-          //get series catalog\n-          Catalog[] seriesCatalogs =\n-                  mp.getCatalogs(new MediaPackageElementFlavor(seriesFlavor.getType(), seriesFlavor.getSubtype()));\n-          //get Series metadata\n-          DublinCoreCatalog dcSeries = DublinCoreUtil.loadDublinCore(getWorkspace(), seriesCatalogs[0]);\n-          Map<EName, List<DublinCoreValue>> seriesMetadata = dcSeries.getValues();\n-          //append series metadata\n-          for (Map.Entry<EName, List<DublinCoreValue>> seriesEntry : seriesMetadata.entrySet()) {\n-            String currentSeriesKey = seriesEntry.getKey().getLocalName();\n-            switch(currentSeriesKey) {\n-              case \"created\":\n-                String[] date = seriesEntry.getValue().get(0).getValue().split(\"\\\\.\");\n-                appendXml(xml, \"date\", date[0]);\n-                break;\n-              case \"contributor\":\n-                appendXml(xml, \"contributors\", getValuesAsString(seriesEntry));\n-                break;\n-              default: String key = seriesEntry.getKey().getLocalName();\n-                appendXml(xml, key, getValuesAsString(seriesEntry));\n-            }\n-          }\n-          xml.append(\"</series>\");\n-          break;\n-        case \"temporal\":\n-          String[] entries = entry.getValue().get(0).getValue().split(\";\");\n-          entries[0] = entries[0].trim().substring(6);\n-          entries[1] = entries[1].trim().substring(4);\n-          if (entries[0] != null) {\n-            appendXml(xml, \"start\", entries[0]);\n-          }\n-          if (entries[1] != null) {\n-            appendXml(xml, \"end\", entries[1]);\n-          }\n-          break;\n-        case \"created\":\n-          String[] date = entry.getValue().get(0).getValue().split(\"\\\\.\");\n-          appendXml(xml, \"date\", date[0]);\n-          break;\n-        case \"contributor\":\n-          appendXml(xml, \"contributors\", getValuesAsString(entry));\n-          break;\n-        default: appendXml(xml, entry.getKey().getLocalName(), getValuesAsString(entry));\n+    for (String title : getFirstMetadataValue(metadata.getTitles()))\n+      appendXml(xml, \"title\", title);\n+    for (String description : getFirstMetadataValue(metadata.getDescription()))\n+      appendXml(xml, \"description\", description);\n+    for (String language : metadata.getLanguage())\n+      appendXml(xml, \"language\", language);\n+    for (Date created : metadata.getCreated())\n+      /* Method formatDate of org.apache.xalan.lib.ExsltDatetime requires the format CCYY-MM-DDThh:mm:ss */\n+      appendXml(xml, \"date\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(created));\n+    for (Date[] period : metadata.getTemporalPeriod()) {\n+      if (period[0] != null) {\n+        appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[0]));\n+      }\n+      if (period[1] != null) {\n+        appendXml(xml, \"end\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(period[1]));\n       }\n     }\n+    for (Date instant : metadata.getTemporalInstant())\n+      appendXml(xml, \"start\", new SimpleDateFormat(\"YYYY-MM-dd'T'HH:mm:ss\").format(instant));\n+    for (Long duration : metadata.getTemporalDuration())\n+      appendXml(xml, \"duration\", new SimpleDateFormat(\"HH:mm:ss\").format(new Date(duration)));\n+    for (String license : getFirstMetadataValue(metadata.getLicenses()))\n+      appendXml(xml, \"license\", license);\n+    for (String isPartOf : metadata.getIsPartOf())\n+      appendXml(xml, \"series\", isPartOf);\n+    for (String contributors : getFirstMetadataValue(metadata.getContributors()))\n+      appendXml(xml, \"contributors\", contributors);\n+    for (String creators : getFirstMetadataValue(metadata.getCreators()))\n+      appendXml(xml, \"creators\", creators);\n+    for (String subjects : getFirstMetadataValue(metadata.getSubjects()))\n+      appendXml(xml, \"subjects\", subjects);\n \n     xml.append(\"</metadata>\");\n+\n     return xml.toString();\n   }\n \n-  protected String getValuesAsString(Map.Entry<EName, List<DublinCoreValue>> entry) {\n-    List<DublinCoreValue> values = entry.getValue();\n-    String stringValues = \"\";\n-    try {\n-      stringValues += values.get(0).getValue();\n-      for (int i = 1; i < values.size(); i++) {\n-        stringValues += \", \" + values.get(i).getValue();\n-      }\n-    } catch (IndexOutOfBoundsException e) {\n-      logger.warn(\"Given Key '{}' has no Entries : {}\", entry.getKey(), e.getMessage());\n+  protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n+    for (MetadataValue<String> data : list) {\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+        return Option.some(data.getValue());\n     }\n-    return stringValues;\n+    return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n       return;\n-    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": {"commit": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "changed_code": [{"header": "diff --git a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\nindex 6ffbe67431..57aedf8b92 100644\n--- a/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n+++ b/modules/cover-image-workflowoperation/src/main/java/org/opencastproject/workflow/handler/coverimage/CoverImageWorkflowOperationHandlerBase.java\n", "chunk": "@@ -337,15 +355,17 @@ public abstract class CoverImageWorkflowOperationHandlerBase extends AbstractWor\n \n   protected Option<String> getFirstMetadataValue(List<MetadataValue<String>> list) {\n     for (MetadataValue<String> data : list) {\n-      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage()))\n+      if (DublinCore.LANGUAGE_UNDEFINED.equals(data.getLanguage())) {\n         return Option.some(data.getValue());\n+      }\n     }\n     return Option.<String> none();\n   }\n \n   protected void appendXml(StringBuilder xml, String name, String body) {\n-    if (StringUtils.isBlank(body) || StringUtils.isBlank(name))\n+    if (StringUtils.isBlank(body) || StringUtils.isBlank(name)) {\n       return;\n+    }\n \n     xml.append(\"<\");\n     xml.append(name);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8226e623520a907f8bfd4ebaaa5bdc63232693a8", "message": "Merge commit", "committedDate": null}, {"oid": "7b58cd95933525a861deb17fa56fb78274bdd025", "committedDate": "2020-12-08 06:26:34 +0100", "message": "implemented exemplary changes for three WOHs"}, {"oid": "a9a5be96435d00601db5a82270b133ba8c8196ed", "committedDate": "2020-12-23 02:16:43 +0100", "message": "reworked CoverImageWOH, AnalyzeAudioWOH and AnalyzeTrackWOH"}, {"oid": "fc74433ac13e68895f4990fa0203115cf6bcffb8", "committedDate": "2021-04-15 00:24:01 +0200", "message": "merge with develop"}, {"oid": "b83245b2711c99fadb78c6a545be95d6110a041d", "committedDate": "2021-04-22 01:48:38 +0200", "message": "finished updating remaining WOHs"}, {"oid": "d9e7b28afeda56773dba5e383e0281587e6560e4", "committedDate": "2021-05-13 09:36:33 -0600", "message": "Merge branch 'TagHandling' of jduehring/opencast into develop"}, {"oid": "f98da08b068f658f3275ff98805497917cf8ce85", "committedDate": "2021-09-19 10:08:28 +0200", "message": "Check if series catalog exists"}, {"oid": "a55686beba099b0d173b9183751297f408cb7e42", "committedDate": "2022-05-09 20:09:48 +0200", "message": "Change the way workflows are stored in the database from XML to tables (#3376)"}]}, {"oid": "20318bee86f4da10721e92d9706ac1f880ab4347", "url": "https://github.com/opencast/opencast/commit/20318bee86f4da10721e92d9706ac1f880ab4347", "message": "use flavor objects, small style improvements", "committedDate": "2020-10-10T21:25:26Z", "type": "commit"}, {"oid": "4b572c4d3d5d79b79113271259143a47c661f214", "url": "https://github.com/opencast/opencast/commit/4b572c4d3d5d79b79113271259143a47c661f214", "message": "updated coverimageWOH doc", "committedDate": "2020-10-10T22:59:42Z", "type": "commit"}, {"oid": "a92cf79d731508e03a3d3a37aad93b416d311641", "url": "https://github.com/opencast/opencast/commit/a92cf79d731508e03a3d3a37aad93b416d311641", "message": "added function to include all values of one field", "committedDate": "2021-02-02T13:56:37Z", "type": "commit"}, {"oid": "3396c55d966f1c7f4fc547ecdc8dadd23e4f669a", "url": "https://github.com/opencast/opencast/commit/3396c55d966f1c7f4fc547ecdc8dadd23e4f669a", "message": "fixed checkstyle violations", "committedDate": "2021-02-02T14:17:58Z", "type": "commit"}, {"oid": "7d827c5368a3fa6ba02d5fd7fc04b5ebc56da96c", "url": "https://github.com/opencast/opencast/commit/7d827c5368a3fa6ba02d5fd7fc04b5ebc56da96c", "message": "resolved merge conflicts", "committedDate": "2021-02-18T00:32:55Z", "type": "commit"}]}