{"pr_number": 15488, "pr_title": "Allow preprovision capacity on partially filled hosts", "pr_author": "hakonhall", "pr_createdAt": "2020-11-26T14:22:38Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/15488", "timeline": [{"oid": "d6e727e30087e321911aa240fee03053cc22b1f4", "url": "https://github.com/vespa-engine/vespa/commit/d6e727e30087e321911aa240fee03053cc22b1f4", "message": "Allow preprovision capacity on partially filled hosts\n\nAdds new functionality that can be disabled by setting the\ncompact-preprovision-capacity flag to false.\n\npreprovision-capacity can be satisfied by hosts with spare resources.  The\nDynamicProvisioningMaintainer does this as follows:\n 1. For each cluster in preprovision-capacity, try to\n    a. allocate the cluster using NodePrioritizer\n    b. If there is a deficit, provision the deficit with HostProvisioner, which\n       may provision larger shared hosts depending on shared-hosts, and retry\n       (1) from the first cluster again.\n    c. Otherwise, pretend the nodes are allocated and go to next cluster.\n 2. All of preprovision-capacity was successfully allocated, and empty hosts\n    are therefore excess that can be deprovisioned.", "committedDate": "2020-11-26T14:22:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5Nzg1OQ==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531097859", "body": "```suggestion\r\n                bandwidthGbps.equals(that.bandwidthGbps);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n          \n          \n            \n                                    ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n          \n          \n            \n                                            Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));\n          \n          \n            \n                            bandwidthGbps.equals(that.bandwidthGbps);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                ((bandwidthGbps<span class=\"pl-k\">.</span>isEmpty() <span class=\"pl-k\">&amp;&amp;</span> that<span class=\"pl-k\">.</span>bandwidthGbps<span class=\"pl-k\">.</span>isEmpty()) <span class=\"pl-k\">||</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        ((bandwidthGbps<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">&amp;&amp;</span> that<span class=\"pl-k\">.</span>bandwidthGbps<span class=\"pl-k\">.</span>isPresent() <span class=\"pl-k\">&amp;&amp;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-smi\">Double</span><span class=\"pl-k\">.</span>compare(that<span class=\"pl-k\">.</span>bandwidthGbps<span class=\"pl-k\">.</span>get(), bandwidthGbps<span class=\"pl-k\">.</span>get()) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                bandwidthGbps<span class=\"pl-k\">.</span>equals(that<span class=\"pl-k\">.</span>bandwidthGbps);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "freva", "createdAt": "2020-11-26T15:21:45Z", "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }\n+\n+    @Override\n+    public String toString() {\n+        return \"ClusterCapacity{\" +\n+                \"count=\" + count +\n+                \", vcpu=\" + vcpu +\n+                \", memoryGb=\" + memoryGb +\n+                \", diskGb=\" + diskGb +\n+                \", bandwidthGbps=\" + bandwidthGbps +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ClusterCapacity that = (ClusterCapacity) o;\n+        return count == that.count &&\n+                Double.compare(that.vcpu, vcpu) == 0 &&\n+                Double.compare(that.memoryGb, memoryGb) == 0 &&\n+                Double.compare(that.diskGb, diskGb) == 0 &&\n+                ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n+                        ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n+                                Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));", "originalCommit": "d6e727e30087e321911aa240fee03053cc22b1f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxNzM1Ng==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531417356", "bodyText": "I decided to use Double.compare because it was used to test for equality by the auto-generated code for all the double fields.  According to Effective Java, Double.compare should be used to compare doubles to 1. take care of +/- 0.0 and NaN and 2. to avoid auto-boxing.  With Optional (2) is not relevant.\nI switched to using OptionalDouble which uses Double.compare in equals.", "author": "hakonhall", "createdAt": "2020-11-27T07:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5Nzg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531098121", "body": "Add optional disk speed and storage type?", "bodyText": "Add optional disk speed and storage type?", "bodyHTML": "<p dir=\"auto\">Add optional disk speed and storage type?</p>", "author": "freva", "createdAt": "2020-11-26T15:22:11Z", "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {", "originalCommit": "d6e727e30087e321911aa240fee03053cc22b1f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxOTA3MA==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531419070", "bodyText": "I'll pass on this - DiskSpeed and StorageType are not available in flags, so I would have to verify validity of String values and still pass through null (to signify defaults) or duplicate defaults.", "author": "hakonhall", "createdAt": "2020-11-27T07:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDc0Nw==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531424747", "bodyText": "We got HostResources that almost does this, but specifies a container count in addition.  Whereas ClusterCapacity is a count of nodes plus NodeResources. So ClusterCapacity and HostResources are practically equal...", "author": "hakonhall", "createdAt": "2020-11-27T07:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODg3Mg==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531098872", "body": "Default is 0.3", "bodyText": "Default is 0.3", "bodyHTML": "<p dir=\"auto\">Default is 0.3</p>", "author": "freva", "createdAt": "2020-11-26T15:23:35Z", "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }", "originalCommit": "d6e727e30087e321911aa240fee03053cc22b1f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwODU2MQ==", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531408561", "bodyText": "This is only used in DynamicProvisioningMaintainer, which previously hard-coded 1.\nhttps://github.com/vespa-engine/vespa/pull/15488/files#diff-d9c1ee02ba2d19a80dbca3d583a350289329749f9583500eefa68bdfcc818d66L183", "author": "hakonhall", "createdAt": "2020-11-27T06:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODg3Mg=="}], "type": "inlineReview"}, {"oid": "abe161b509cde53da37d87faa44981a5208e7b00", "url": "https://github.com/vespa-engine/vespa/commit/abe161b509cde53da37d87faa44981a5208e7b00", "message": "Use OptionalDouble", "committedDate": "2020-11-27T07:16:36Z", "type": "commit"}]}