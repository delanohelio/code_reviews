{"pr_number": 12626, "pr_title": "Serialize and deserialize docker image repo", "pr_author": "hmusum", "pr_createdAt": "2020-03-19T12:50:52Z", "pr_url": "https://github.com/vespa-engine/vespa/pull/12626", "timeline": [{"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1", "url": "https://github.com/vespa-engine/vespa/commit/1760ca738f4d0d463535299ba64a06f50811c3b1", "message": "Serialize and deserialize docker image repo", "committedDate": "2020-03-19T12:49:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395008436", "body": "I realize the deserializer handles empty string, but consider just to serializing dockerImageRepo if it's not set.", "bodyText": "I realize the deserializer handles empty string, but consider just to serializing dockerImageRepo if it's not set.", "bodyHTML": "<p dir=\"auto\">I realize the deserializer handles empty string, but consider just to serializing dockerImageRepo if it's not set.</p>", "author": "freva", "createdAt": "2020-03-19T13:03:35Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java", "diffHunk": "@@ -187,8 +187,7 @@ private void toSlime(Allocation allocation, Cursor object) {\n         object.setLong(currentRestartGenerationKey, allocation.restartGeneration().current());\n         object.setBool(removableKey, allocation.isRemovable());\n         object.setString(wantedVespaVersionKey, allocation.membership().cluster().vespaVersion().toString());\n-        // TODO serialize dockerImageRepo\n-        //object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));\n+        object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzU5Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173596", "bodyText": "Yeah, fixed", "author": "hmusum", "createdAt": "2020-03-19T16:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395010186", "body": "Consider having a method on `ClusterSpec` that returns the full docker image", "bodyText": "Consider having a method on ClusterSpec that returns the full docker image", "bodyHTML": "<p dir=\"auto\">Consider having a method on <code>ClusterSpec</code> that returns the full docker image</p>", "author": "freva", "createdAt": "2020-03-19T13:06:36Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,11 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            Optional<String> dockerImageRepo = allocation.membership().cluster().dockerImageRepo();", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzY1MA==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173650", "bodyText": "Done", "author": "hmusum", "createdAt": "2020-03-19T16:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395014621", "body": "Why is this the case?", "bodyText": "Why is this the case?", "bodyHTML": "<p dir=\"auto\">Why is this the case?</p>", "author": "freva", "createdAt": "2020-03-19T13:13:56Z", "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzc1MA==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173750", "bodyText": "Should not have been there, removed", "author": "hmusum", "createdAt": "2020-03-19T16:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395015012", "body": "This actually shouldn't be allowed, current docker image should always include the version as well.", "bodyText": "This actually shouldn't be allowed, current docker image should always include the version as well.", "bodyHTML": "<p dir=\"auto\">This actually shouldn't be allowed, current docker image should always include the version as well.</p>", "author": "freva", "createdAt": "2020-03-19T13:14:34Z", "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());\n+        Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});", "originalCommit": "1760ca738f4d0d463535299ba64a06f50811c3b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzg5Nw==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173897", "bodyText": "test code updated", "author": "hmusum", "createdAt": "2020-03-19T16:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg=="}], "type": "inlineReview"}, {"oid": "a681535b066cfc7c08d54603b811da8e0472736d", "url": "https://github.com/vespa-engine/vespa/commit/a681535b066cfc7c08d54603b811da8e0472736d", "message": "Fixes after code review", "committedDate": "2020-03-19T16:51:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MTAzOQ==", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395181039", "body": "```suggestion\r\n            object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\r\n                    .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\r\n            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\r\n```\r\n(Changing back to `orElseGet()` and setting `wantedVespaVersion` directly)", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", wantedVespaVersion);\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n          \n      \n    \n    \n  \n\n(Changing back to orElseGet() and setting wantedVespaVersion directly)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">String</span> wantedVespaVersion <span class=\"pl-k\">=</span> allocation<span class=\"pl-k\">.</span>membership()<span class=\"pl-k\">.</span>cluster()<span class=\"pl-k\">.</span>vespaVersion()<span class=\"pl-k\">.</span>toFullString();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            object<span class=\"pl-k\">.</span>setString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>wantedDockerImage<span class=\"pl-pds\">\"</span></span>, allocation<span class=\"pl-k\">.</span>membership()<span class=\"pl-k\">.</span>cluster()<span class=\"pl-k\">.</span>dockerImage()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    .orElse(nodeRepository<span class=\"pl-k\">.</span>dockerImage(node)<span class=\"pl-k\">.</span>withTag(allocation<span class=\"pl-k\">.</span>membership()<span class=\"pl-k\">.</span>cluster()<span class=\"pl-k\">.</span>vespaVersion())<span class=\"pl-k\">.</span>asString()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            object<span class=\"pl-k\">.</span>setString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>wantedVespaVersion<span class=\"pl-pds\">\"</span></span>, wantedVespaVersion);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            object<span class=\"pl-k\">.</span>setString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>wantedDockerImage<span class=\"pl-pds\">\"</span></span>, allocation<span class=\"pl-k\">.</span>membership()<span class=\"pl-k\">.</span>cluster()<span class=\"pl-k\">.</span>dockerImage()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    .orElseGet(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> nodeRepository<span class=\"pl-k\">.</span>dockerImage(node)<span class=\"pl-k\">.</span>withTag(allocation<span class=\"pl-k\">.</span>membership()<span class=\"pl-k\">.</span>cluster()<span class=\"pl-k\">.</span>vespaVersion())<span class=\"pl-k\">.</span>asString()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            object<span class=\"pl-k\">.</span>setString(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>wantedVespaVersion<span class=\"pl-pds\">\"</span></span>, allocation<span class=\"pl-k\">.</span>membership()<span class=\"pl-k\">.</span>cluster()<span class=\"pl-k\">.</span>vespaVersion()<span class=\"pl-k\">.</span>toFullString());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">(Changing back to <code>orElseGet()</code> and setting <code>wantedVespaVersion</code> directly)</p>", "author": "freva", "createdAt": "2020-03-19T17:02:27Z", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,10 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n+                    .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n+            object.setString(\"wantedVespaVersion\", wantedVespaVersion);", "originalCommit": "a681535b066cfc7c08d54603b811da8e0472736d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e734680099b9482d4acc187a89fa59a0c0faa8d9", "url": "https://github.com/vespa-engine/vespa/commit/e734680099b9482d4acc187a89fa59a0c0faa8d9", "message": "Update node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n\nCo-Authored-By: Valerij Fredriksen <freva@users.noreply.github.com>", "committedDate": "2020-03-19T17:08:51Z", "type": "commit"}]}