{"pr_number": 5001, "pr_title": "MFA Inwebo connector support", "pr_author": "leleuj", "pr_createdAt": "2020-12-02T10:42:28Z", "pr_url": "https://github.com/apereo/cas/pull/5001", "merge_commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "timeline": [{"oid": "504653e07c0ae56e22e6e4c2dfe2986513271078", "url": "https://github.com/apereo/cas/commit/504653e07c0ae56e22e6e4c2dfe2986513271078", "message": "MFA Inwebo connector", "committedDate": "2020-12-02T10:34:29Z", "type": "commit"}, {"oid": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27", "url": "https://github.com/apereo/cas/commit/15be5d5834ee7caedfca1aba476d0a5ddfa72f27", "message": "Merge branch 'master' of github.com:apereo/cas into inwebo", "committedDate": "2020-12-02T10:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534074352", "body": "This doesn't seem right. You are not actually doing authentication, when the method asks for doAuthentication. The credential needs to be verified somehow. If you're doing that elsewhere, you'd need to move that logic into the handler here.", "bodyText": "This doesn't seem right. You are not actually doing authentication, when the method asks for doAuthentication. The credential needs to be verified somehow. If you're doing that elsewhere, you'd need to move that logic into the handler here.", "bodyHTML": "<p dir=\"auto\">This doesn't seem right. You are not actually doing authentication, when the method asks for doAuthentication. The credential needs to be verified somehow. If you're doing that elsewhere, you'd need to move that logic into the handler here.</p>", "author": "mmoayyed", "createdAt": "2020-12-02T10:53:15Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.apereo.cas.support.inwebo.authentication;\n+\n+import org.apereo.cas.authentication.AuthenticationHandlerExecutionResult;\n+import org.apereo.cas.authentication.Credential;\n+import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessingAuthenticationHandler;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+import org.apereo.cas.services.ServicesManager;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+/**\n+ * The Inwebo authentication handler.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.3.0\n+ */\n+@Slf4j\n+public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n+\n+    public InweboAuthenticationHandler(final ServicesManager servicesManager,\n+                                       final PrincipalFactory principalFactory,\n+                                       final InweboMultifactorProperties inweboProperties) {\n+        super(inweboProperties.getName(),\n+              servicesManager,\n+              principalFactory,\n+              inweboProperties.getOrder());\n+    }\n+\n+    @Override\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n+        val login = credential.getId();\n+        LOGGER.info(\"Creating principal result for: {}\", login);\n+        val pushCredential = (InweboCredential) credential;\n+        val principal = this.principalFactory.createPrincipal(login);\n+        return createHandlerResult(pushCredential, principal);\n+    }", "originalCommit": "15be5d5834ee7caedfca1aba476d0a5ddfa72f27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwMjgzNw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534102837", "bodyText": "I had that in mind. This is done on purpose. Let me explain.\nIn fact, for the push notification, we need to call Inwebo to check if the user has accepted the notification on his mobile/desktop app. The response can be \"yes\" or \"timeout\" if the user has waited too long or \"refused\" if the user has refused. But this can also be \"wait\" if the user has not accepted yet and there remains time. And in that case, we must come back on the \"waiting screen\".\nThis is why I control this behavior in a webflow action: https://github.com/apereo/cas/pull/5001/files#diff-f8b3de0873b2467c5a3d782d751949279eec743827a82a353b33ee9795cdbaacR59\nFor the browser authentication, I reused the same logic to only have one InweboCredential and InweboAuthenticationHandler for both authentication methods (mobile/desktop + browser).\nDoes it make sense?", "author": "leleuj", "createdAt": "2020-12-02T11:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0NTU5Nw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534745597", "bodyText": "I don't entirely follow. I guess the real question is, what does it really mean to authenticate with Inwebo? At some point somewhere, you would be receiving a response back from that service that needs validation right? That response needs to be validated by the handler which is the actual act of authentication. What you have here as an authentication handler is not actually handling any sort of authentication. It's stub code, and therefore it's inconsistent with all other handlers we have.\nIf the response is \"wait until the user responds\", you don't need to invoke the authentication handler just yet. You'd wait until the response is something that can be in fact validated, right? The only time you need to invoke the handler is when there is something that can be terminally validated, and for sure, the validation must happen in the handler, and the entire authentication engine machinery that goes along with it. Otherwise, it doesn't make much sense to have a handler in the engine that basically does nothing other than to satisfy some webflow weirdness. That's an implementation nuance that creeping into the authentication handler/manager engine and should be avoided.\nI am happy to lend a hand in this area and propose alternatives, if you think that would be helpful.", "author": "mmoayyed", "createdAt": "2020-12-03T06:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "66874878ddfcd3f2af78c74b8bbe7c77370819fa", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\nindex 7f0f10e733..ab06cca056 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\n", "chunk": "@@ -6,35 +6,61 @@ import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessin\n import org.apereo.cas.authentication.principal.PrincipalFactory;\n import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n \n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.security.auth.login.FailedLoginException;\n+import java.security.GeneralSecurityException;\n \n /**\n  * The Inwebo authentication handler.\n  *\n  * @author Jerome LELEU\n- * @since 6.3.0\n+ * @since 6.4.0\n  */\n @Slf4j\n public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n \n+    private final InweboService service;\n+\n     public InweboAuthenticationHandler(final ServicesManager servicesManager,\n                                        final PrincipalFactory principalFactory,\n-                                       final InweboMultifactorProperties inweboProperties) {\n+                                       final InweboMultifactorProperties inweboProperties,\n+                                       final InweboService service) {\n         super(inweboProperties.getName(),\n               servicesManager,\n               principalFactory,\n               inweboProperties.getOrder());\n+        this.service = service;\n     }\n \n     @Override\n-    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n-        val login = credential.getId();\n-        LOGGER.info(\"Creating principal result for: {}\", login);\n-        val pushCredential = (InweboCredential) credential;\n-        val principal = this.principalFactory.createPrincipal(login);\n-        return createHandlerResult(pushCredential, principal);\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) throws GeneralSecurityException {\n+        val inweboCredential = (InweboCredential) credential;\n+        val login = inweboCredential.getLogin();\n+        LOGGER.debug(\"Login: {}\", login);\n+\n+        val otp = inweboCredential.getOtp();\n+        var authenticated = inweboCredential.isAlreadyAuthenticated();\n+        var deviceName = inweboCredential.getDeviceName();\n+        if (StringUtils.isNotBlank(otp)) {\n+            val response = service.authenticateExtended(login, otp);\n+            if (response.isOk()) {\n+                authenticated = true;\n+                deviceName = response.getDeviceName();\n+            }\n+        }\n+\n+        if (authenticated) {\n+            inweboCredential.setDeviceName(deviceName);\n+            LOGGER.info(\"Authenticated user: {} for device: {}\", login, deviceName);\n+            val principal = this.principalFactory.createPrincipal(login);\n+            return createHandlerResult(inweboCredential, principal);\n+        }\n+        throw new FailedLoginException(\"Cannot validate authentication for: \" + login);\n     }\n \n     @Override\n", "next_change": {"commit": "4b4a9f2de0369dbaac18202b0eaf6845134bda12", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\nindex ab06cca056..5b352c136d 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\n", "chunk": "@@ -56,7 +56,7 @@ public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAut\n \n         if (authenticated) {\n             inweboCredential.setDeviceName(deviceName);\n-            LOGGER.info(\"Authenticated user: {} for device: {}\", login, deviceName);\n+            LOGGER.info(\"Authenticated user: [{}] for device: [{}]\", login, deviceName);\n             val principal = this.principalFactory.createPrincipal(login);\n             return createHandlerResult(inweboCredential, principal);\n         }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\nindex 7f0f10e733..5b352c136d 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/authentication/InweboAuthenticationHandler.java\n", "chunk": "@@ -6,35 +6,61 @@ import org.apereo.cas.authentication.handler.support.AbstractPreAndPostProcessin\n import org.apereo.cas.authentication.principal.PrincipalFactory;\n import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n \n import lombok.extern.slf4j.Slf4j;\n import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.security.auth.login.FailedLoginException;\n+import java.security.GeneralSecurityException;\n \n /**\n  * The Inwebo authentication handler.\n  *\n  * @author Jerome LELEU\n- * @since 6.3.0\n+ * @since 6.4.0\n  */\n @Slf4j\n public class InweboAuthenticationHandler extends AbstractPreAndPostProcessingAuthenticationHandler {\n \n+    private final InweboService service;\n+\n     public InweboAuthenticationHandler(final ServicesManager servicesManager,\n                                        final PrincipalFactory principalFactory,\n-                                       final InweboMultifactorProperties inweboProperties) {\n+                                       final InweboMultifactorProperties inweboProperties,\n+                                       final InweboService service) {\n         super(inweboProperties.getName(),\n               servicesManager,\n               principalFactory,\n               inweboProperties.getOrder());\n+        this.service = service;\n     }\n \n     @Override\n-    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) {\n-        val login = credential.getId();\n-        LOGGER.info(\"Creating principal result for: {}\", login);\n-        val pushCredential = (InweboCredential) credential;\n-        val principal = this.principalFactory.createPrincipal(login);\n-        return createHandlerResult(pushCredential, principal);\n+    protected AuthenticationHandlerExecutionResult doAuthentication(final Credential credential) throws GeneralSecurityException {\n+        val inweboCredential = (InweboCredential) credential;\n+        val login = inweboCredential.getLogin();\n+        LOGGER.debug(\"Login: [{}]\", login);\n+\n+        val otp = inweboCredential.getOtp();\n+        var authenticated = inweboCredential.isAlreadyAuthenticated();\n+        var deviceName = inweboCredential.getDeviceName();\n+        if (StringUtils.isNotBlank(otp)) {\n+            val response = service.authenticateExtended(login, otp);\n+            if (response.isOk()) {\n+                authenticated = true;\n+                deviceName = response.getDeviceName();\n+            }\n+        }\n+\n+        if (authenticated) {\n+            inweboCredential.setDeviceName(deviceName);\n+            LOGGER.info(\"Authenticated user: [{}] for device: [{}]\", login, deviceName);\n+            val principal = this.principalFactory.createPrincipal(login);\n+            return createHandlerResult(inweboCredential, principal);\n+        }\n+        throw new FailedLoginException(\"Cannot validate authentication for: \" + login);\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "cf9f633a264dcc6a95452f993278a62d612a6de5", "committedDate": "2021-01-31 15:15:23 +0400", "message": "clean up props for mfa"}, {"oid": "86d69c07df0ba3dc4e27342b0b273aeba00447aa", "committedDate": "2021-05-05 14:57:52 +0400", "message": "required-handler setting per service must take into account mfa handlers for removal"}, {"oid": "0ae2518220742d0ffb46083a60360647b1a95582", "committedDate": "2022-06-14 10:42:31 +0400", "message": "allow mfa handlers to know their mfa provider"}, {"oid": "2d01dc939477e36695968b8de69d7f7d6fe87e9a", "committedDate": "2022-07-05 16:57:03 +0200", "message": "allow authentication handlers to have access to service object"}]}, {"oid": "c9ca325a5f5a3785f781a06ba3110109e6b5f91b", "url": "https://github.com/apereo/cas/commit/c9ca325a5f5a3785f781a06ba3110109e6b5f91b", "message": "add missing WebflowMfaActions", "committedDate": "2020-12-02T11:13:11Z", "type": "commit"}, {"oid": "02ab496f38d7d4d4c8d8a5b8c8c7489b9391404b", "url": "https://github.com/apereo/cas/commit/02ab496f38d7d4d4c8d8a5b8c8c7489b9391404b", "message": "added missing cas-server-core-util-api tests dependency", "committedDate": "2020-12-02T11:33:55Z", "type": "commit"}, {"oid": "eb4c51d0db82349458054dbf9c88c971212da717", "url": "https://github.com/apereo/cas/commit/eb4c51d0db82349458054dbf9c88c971212da717", "message": "Fix the javadoc and add the RefreshScope annotation", "committedDate": "2020-12-02T14:38:13Z", "type": "commit"}, {"oid": "a44cb4da6834112e1471e3635c9fb8d8cfe20052", "url": "https://github.com/apereo/cas/commit/a44cb4da6834112e1471e3635c9fb8d8cfe20052", "message": "Updated `@since 6.4.0` in Javadoc", "committedDate": "2020-12-02T17:21:51Z", "type": "commit"}, {"oid": "f1ebc47831fbfe1164b0f3347ee4ff59a61f919e", "url": "https://github.com/apereo/cas/commit/f1ebc47831fbfe1164b0f3347ee4ff59a61f919e", "message": "Updated `@since 6.4.0` in Javadoc", "committedDate": "2020-12-02T17:23:40Z", "type": "commit"}, {"oid": "89b75b211977e12c5ce3879b4b846787d51678a9", "url": "https://github.com/apereo/cas/commit/89b75b211977e12c5ce3879b4b846787d51678a9", "message": "Merge branch 'inwebo' of github.com:leleuj/cas into inwebo", "committedDate": "2020-12-02T17:24:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534736076", "body": "Switch type to SpringResource instead", "bodyText": "Switch type to SpringResource instead", "bodyHTML": "<p dir=\"auto\">Switch type to SpringResource instead</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:35:47Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.apereo.cas.configuration.model.support.mfa;\n+\n+import org.apereo.cas.configuration.support.RequiredProperty;\n+import org.apereo.cas.configuration.support.RequiresModule;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.experimental.Accessors;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * The Inwebo MFA properties.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiresModule(name = \"cas-server-support-inwebo-mfa\")\n+@Getter\n+@Setter\n+@Accessors(chain = true)\n+public class InweboMultifactorProperties extends BaseMultifactorProviderProperties {\n+\n+    /**\n+     * Provider id by default.\n+     */\n+    public static final String DEFAULT_IDENTIFIER = \"mfa-inwebo\";\n+\n+    private static final long serialVersionUID = -942637204816051814L;\n+\n+    /**\n+     * The Inwebo serviceId.\n+     */\n+    @RequiredProperty\n+    private Long serviceId;\n+\n+    /**\n+     * The location of the client certificate (PKCS12 format).\n+     */\n+    @RequiredProperty\n+    private transient Resource clientCertificate;", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgyMDA4MA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534820080", "bodyText": "I can't find the SpringResource class, in which package/jar is it?", "author": "leleuj", "createdAt": "2020-12-03T07:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5NDU3NA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534894574", "bodyText": "OK. I changed that to use SpringResourceProperties. I also supplemented the springws dependency and remove the new springwsclient I added.", "author": "leleuj", "createdAt": "2020-12-03T08:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczNjA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "680ad270cb61efeafa2e71a6910bfdf508626a0d", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\nindex 37e4a45b0c..b14f9ee1f6 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n", "chunk": "@@ -37,7 +38,7 @@ public class InweboMultifactorProperties extends BaseMultifactorProviderProperti\n      * The location of the client certificate (PKCS12 format).\n      */\n     @RequiredProperty\n-    private transient Resource clientCertificate;\n+    private transient SpringResourceProperties clientCertificate;\n \n     /**\n      * The passphrase of the client certificate.\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\nindex b14f9ee1f6..76793ddd38 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n", "chunk": "@@ -35,16 +34,10 @@ public class InweboMultifactorProperties extends BaseMultifactorProviderProperti\n     private Long serviceId;\n \n     /**\n-     * The location of the client certificate (PKCS12 format).\n+     * The client certificate.\n      */\n     @RequiredProperty\n-    private transient SpringResourceProperties clientCertificate;\n-\n-    /**\n-     * The passphrase of the client certificate.\n-     */\n-    @RequiredProperty\n-    private String certificatePassphrase;\n+    private ClientCertificateProperties clientCertificate;\n \n     /**\n      * The alias of the secured site.\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\nindex 37e4a45b0c..76793ddd38 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n", "chunk": "@@ -34,16 +34,10 @@ public class InweboMultifactorProperties extends BaseMultifactorProviderProperti\n     private Long serviceId;\n \n     /**\n-     * The location of the client certificate (PKCS12 format).\n+     * The client certificate.\n      */\n     @RequiredProperty\n-    private transient Resource clientCertificate;\n-\n-    /**\n-     * The passphrase of the client certificate.\n-     */\n-    @RequiredProperty\n-    private String certificatePassphrase;\n+    private ClientCertificateProperties clientCertificate;\n \n     /**\n      * The alias of the secured site.\n", "next_change": {"commit": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\nindex 76793ddd38..61dcdda5da 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/mfa/InweboMultifactorProperties.java\n", "chunk": "@@ -37,7 +51,7 @@ public class InweboMultifactorProperties extends BaseMultifactorProviderProperti\n      * The client certificate.\n      */\n     @RequiredProperty\n-    private ClientCertificateProperties clientCertificate;\n+    private ClientCertificateProperties clientCertificate = new ClientCertificateProperties();\n \n     /**\n      * The alias of the secured site.\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "cf9f633a264dcc6a95452f993278a62d612a6de5", "committedDate": "2021-01-31 15:15:23 +0400", "message": "clean up props for mfa"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0Njg5MA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534746890", "body": "Please rename the class to carry the MFA provider name, much like other MFA components to be consistent; something like `InweboAuthenticationDeviceMetadata... etc`", "bodyText": "Please rename the class to carry the MFA provider name, much like other MFA components to be consistent; something like InweboAuthenticationDeviceMetadata... etc", "bodyHTML": "<p dir=\"auto\">Please rename the class to carry the MFA provider name, much like other MFA components to be consistent; something like <code>InweboAuthenticationDeviceMetadata... etc</code></p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:47:21Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlanConfigurer;\n+import org.apereo.cas.authentication.AuthenticationHandler;\n+import org.apereo.cas.authentication.AuthenticationMetaDataPopulator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationFailureModeEvaluator;\n+import org.apereo.cas.authentication.MultifactorAuthenticationProvider;\n+import org.apereo.cas.authentication.bypass.MultifactorAuthenticationProviderBypassEvaluator;\n+import org.apereo.cas.authentication.handler.ByCredentialTypeAuthenticationHandlerResolver;\n+import org.apereo.cas.authentication.metadata.AuthenticationContextAttributeMetaDataPopulator;\n+import org.apereo.cas.authentication.principal.PrincipalFactory;\n+import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.InweboMultifactorAuthenticationProvider;\n+import org.apereo.cas.support.inwebo.authentication.AuthenticationDeviceMetadataPopulator;\n+import org.apereo.cas.support.inwebo.authentication.InweboAuthenticationHandler;\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * The Inwebo MFA authentication configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboAuthenticationConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+public class InweboAuthenticationConfiguration {\n+\n+    @Autowired\n+    @Qualifier(\"inweboBypassEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationProviderBypassEvaluator> inweboBypassEvaluator;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    @Qualifier(\"failureModeEvaluator\")\n+    private ObjectProvider<MultifactorAuthenticationFailureModeEvaluator> failureModeEvaluator;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationProvider\")\n+    @RefreshScope\n+    public MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider() {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val p = new InweboMultifactorAuthenticationProvider();\n+        p.setBypassEvaluator(inweboBypassEvaluator.getObject());\n+        p.setFailureMode(inwebo.getFailureMode());\n+        p.setFailureModeEvaluator(failureModeEvaluator.getObject());\n+        p.setOrder(inwebo.getRank());\n+        p.setId(inwebo.getId());\n+        return p;\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboPrincipalFactory\")\n+    @Bean\n+    public PrincipalFactory inweboPrincipalFactory() {\n+        return PrincipalFactoryUtils.newPrincipalFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationHandler\")\n+    @Bean\n+    @RefreshScope\n+    public AuthenticationHandler inweboAuthenticationHandler() {\n+        return new InweboAuthenticationHandler(servicesManager.getObject(), inweboPrincipalFactory(), casProperties.getAuthn().getMfa().getInwebo());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationMetaDataPopulator\")\n+    @RefreshScope\n+    public AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator() {\n+        return new AuthenticationContextAttributeMetaDataPopulator(\n+                casProperties.getAuthn().getMfa().getAuthenticationContextAttribute(),\n+                inweboAuthenticationHandler(),\n+                inweboMultifactorAuthenticationProvider().getId()\n+        );\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n+    public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n+        return new AuthenticationDeviceMetadataPopulator();", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMzQ0MQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536023441", "bodyText": "I will rename it.", "author": "leleuj", "createdAt": "2020-12-04T11:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0Njg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\nindex fd8acd6422..adf370507a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n", "chunk": "@@ -95,7 +101,7 @@ public class InweboAuthenticationConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n     public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n-        return new AuthenticationDeviceMetadataPopulator();\n+        return new InweboAuthenticationDeviceMetadataPopulator();\n     }\n \n     @ConditionalOnMissingBean(name = \"inweboAuthenticationEventExecutionPlanConfigurer\")\n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\nindex fd8acd6422..adf370507a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n", "chunk": "@@ -95,7 +101,7 @@ public class InweboAuthenticationConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n     public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n-        return new AuthenticationDeviceMetadataPopulator();\n+        return new InweboAuthenticationDeviceMetadataPopulator();\n     }\n \n     @ConditionalOnMissingBean(name = \"inweboAuthenticationEventExecutionPlanConfigurer\")\n", "next_change": {"commit": "4b877ddc7a10d975884ce4071167cdec61c577f1", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\nindex adf370507a..6044bcbaa3 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n", "chunk": "@@ -106,13 +99,17 @@ public class InweboAuthenticationConfiguration {\n \n     @ConditionalOnMissingBean(name = \"inweboAuthenticationEventExecutionPlanConfigurer\")\n     @Bean\n-    public AuthenticationEventExecutionPlanConfigurer inweboAuthenticationEventExecutionPlanConfigurer() {\n+    public AuthenticationEventExecutionPlanConfigurer inweboAuthenticationEventExecutionPlanConfigurer(\n+        @Qualifier(\"inweboAuthenticationHandler\")\n+        final AuthenticationHandler inweboAuthenticationHandler,\n+        @Qualifier(\"inweboAuthenticationMetaDataPopulator\")\n+        final AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator,\n+        @Qualifier(\"inweboAuthenticationDeviceMetadataPopulator\")\n+        final AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator) {\n         return plan -> {\n-            plan.registerAuthenticationHandler(inweboAuthenticationHandler());\n-            plan.registerAuthenticationMetadataPopulators(Arrays.asList(inweboAuthenticationMetaDataPopulator(),\n-                    inweboAuthenticationDeviceMetadataPopulator()));\n-            plan.registerAuthenticationHandlerResolver(\n-                    new ByCredentialTypeAuthenticationHandlerResolver(InweboCredential.class));\n+            plan.registerAuthenticationHandler(inweboAuthenticationHandler);\n+            plan.registerAuthenticationMetadataPopulators(Arrays.asList(inweboAuthenticationMetaDataPopulator, inweboAuthenticationDeviceMetadataPopulator));\n+            plan.registerAuthenticationHandlerResolver(new ByCredentialTypeAuthenticationHandlerResolver(InweboCredential.class));\n         };\n     }\n }\n", "next_change": {"commit": "1f4a958eb9cac4836c6345e03ddb25b042330c6c", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\nindex 6044bcbaa3..db83b95b02 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n", "chunk": "@@ -39,77 +41,100 @@ import java.util.Arrays;\n @Configuration(value = \"inweboAuthenticationConfiguration\", proxyBeanMethods = false)\n public class InweboAuthenticationConfiguration {\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationProvider\")\n-    @RefreshScope\n-    @Autowired\n-    public MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider(final CasConfigurationProperties casProperties,\n-                                                                                     @Qualifier(\"inweboBypassEvaluator\")\n-                                                                                     final MultifactorAuthenticationProviderBypassEvaluator inweboBypassEvaluator,\n-                                                                                     @Qualifier(\"failureModeEvaluator\")\n-                                                                                     final MultifactorAuthenticationFailureModeEvaluator failureModeEvaluator) {\n-        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        val p = new InweboMultifactorAuthenticationProvider();\n-        p.setBypassEvaluator(inweboBypassEvaluator);\n-        p.setFailureMode(inwebo.getFailureMode());\n-        p.setFailureModeEvaluator(failureModeEvaluator);\n-        p.setOrder(inwebo.getRank());\n-        p.setId(inwebo.getId());\n-        return p;\n-    }\n-\n     @ConditionalOnMissingBean(name = \"inweboPrincipalFactory\")\n     @Bean\n     public PrincipalFactory inweboPrincipalFactory() {\n         return PrincipalFactoryUtils.newPrincipalFactory();\n     }\n \n-    @ConditionalOnMissingBean(name = \"inweboAuthenticationHandler\")\n-    @Bean\n-    @RefreshScope\n-    @Autowired\n-    public AuthenticationHandler inweboAuthenticationHandler(final CasConfigurationProperties casProperties,\n-                                                             @Qualifier(\"inweboPrincipalFactory\")\n-                                                             final PrincipalFactory inweboPrincipalFactory,\n-                                                             @Qualifier(\"servicesManager\")\n-                                                             final ServicesManager servicesManager,\n-                                                             @Qualifier(\"inweboService\")\n-                                                             final InweboService inweboService) {\n-        return new InweboAuthenticationHandler(servicesManager, inweboPrincipalFactory, casProperties.getAuthn().getMfa().getInwebo(), inweboService);\n+    @Configuration(value = \"InweboAuthenticationProviderConfiguration\", proxyBeanMethods = false)\n+    @EnableConfigurationProperties(CasConfigurationProperties.class)\n+    public static class InweboAuthenticationProviderConfiguration {\n+        @Bean\n+        @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationProvider\")\n+        @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n+        @Autowired\n+        public MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider(\n+            final CasConfigurationProperties casProperties,\n+            @Qualifier(\"inweboBypassEvaluator\")\n+            final MultifactorAuthenticationProviderBypassEvaluator inweboBypassEvaluator,\n+            @Qualifier(\"failureModeEvaluator\")\n+            final MultifactorAuthenticationFailureModeEvaluator failureModeEvaluator) {\n+            val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+            val p = new InweboMultifactorAuthenticationProvider();\n+            p.setBypassEvaluator(inweboBypassEvaluator);\n+            p.setFailureMode(inwebo.getFailureMode());\n+            p.setFailureModeEvaluator(failureModeEvaluator);\n+            p.setOrder(inwebo.getRank());\n+            p.setId(inwebo.getId());\n+            return p;\n+        }\n     }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"inweboAuthenticationMetaDataPopulator\")\n-    @RefreshScope\n-    @Autowired\n-    public AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator(final CasConfigurationProperties casProperties,\n-                                                                                 @Qualifier(\"inweboAuthenticationHandler\")\n-                                                                                 final AuthenticationHandler inweboAuthenticationHandler,\n-                                                                                 @Qualifier(\"inweboMultifactorAuthenticationProvider\")\n-                                                                                 final MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider) {\n-        return new AuthenticationContextAttributeMetaDataPopulator(casProperties.getAuthn().getMfa().getCore().getAuthenticationContextAttribute(), inweboAuthenticationHandler,\n-            inweboMultifactorAuthenticationProvider.getId());\n+    @Configuration(value = \"InweboAuthenticationHandlerConfiguration\", proxyBeanMethods = false)\n+    @EnableConfigurationProperties(CasConfigurationProperties.class)\n+    public static class InweboAuthenticationHandlerConfiguration {\n+        @ConditionalOnMissingBean(name = \"inweboAuthenticationHandler\")\n+        @Bean\n+        @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n+        @Autowired\n+        public AuthenticationHandler inweboAuthenticationHandler(\n+            final CasConfigurationProperties casProperties,\n+            @Qualifier(\"inweboPrincipalFactory\")\n+            final PrincipalFactory inweboPrincipalFactory,\n+            @Qualifier(ServicesManager.BEAN_NAME)\n+            final ServicesManager servicesManager,\n+            @Qualifier(\"inweboService\")\n+            final InweboService inweboService) {\n+            return new InweboAuthenticationHandler(servicesManager,\n+                inweboPrincipalFactory, casProperties.getAuthn().getMfa().getInwebo(), inweboService);\n+        }\n+\n     }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n-    public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n-        return new InweboAuthenticationDeviceMetadataPopulator();\n+    @Configuration(value = \"InweboAuthenticationMetadataConfiguration\", proxyBeanMethods = false)\n+    @EnableConfigurationProperties(CasConfigurationProperties.class)\n+    public static class InweboAuthenticationMetadataConfiguration {\n+        @Bean\n+        @ConditionalOnMissingBean(name = \"inweboAuthenticationMetaDataPopulator\")\n+        @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n+        @Autowired\n+        public AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator(\n+            final CasConfigurationProperties casProperties,\n+            @Qualifier(\"inweboAuthenticationHandler\")\n+            final AuthenticationHandler inweboAuthenticationHandler,\n+            @Qualifier(\"inweboMultifactorAuthenticationProvider\")\n+            final MultifactorAuthenticationProvider inweboMultifactorAuthenticationProvider) {\n+            return new AuthenticationContextAttributeMetaDataPopulator(casProperties.getAuthn().getMfa().getCore().getAuthenticationContextAttribute(), inweboAuthenticationHandler,\n+                inweboMultifactorAuthenticationProvider.getId());\n+        }\n+\n+        @Bean\n+        @ConditionalOnMissingBean(name = \"inweboAuthenticationDeviceMetadataPopulator\")\n+        public AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator() {\n+            return new InweboAuthenticationDeviceMetadataPopulator();\n+        }\n     }\n \n-    @ConditionalOnMissingBean(name = \"inweboAuthenticationEventExecutionPlanConfigurer\")\n-    @Bean\n-    public AuthenticationEventExecutionPlanConfigurer inweboAuthenticationEventExecutionPlanConfigurer(\n-        @Qualifier(\"inweboAuthenticationHandler\")\n-        final AuthenticationHandler inweboAuthenticationHandler,\n-        @Qualifier(\"inweboAuthenticationMetaDataPopulator\")\n-        final AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator,\n-        @Qualifier(\"inweboAuthenticationDeviceMetadataPopulator\")\n-        final AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator) {\n-        return plan -> {\n-            plan.registerAuthenticationHandler(inweboAuthenticationHandler);\n-            plan.registerAuthenticationMetadataPopulators(Arrays.asList(inweboAuthenticationMetaDataPopulator, inweboAuthenticationDeviceMetadataPopulator));\n-            plan.registerAuthenticationHandlerResolver(new ByCredentialTypeAuthenticationHandlerResolver(InweboCredential.class));\n-        };\n+\n+    @Configuration(value = \"InweboAuthenticationPlanConfiguration\", proxyBeanMethods = false)\n+    @EnableConfigurationProperties(CasConfigurationProperties.class)\n+    public static class InweboAuthenticationPlanConfiguration {\n+        @ConditionalOnMissingBean(name = \"inweboAuthenticationEventExecutionPlanConfigurer\")\n+        @Bean\n+        public AuthenticationEventExecutionPlanConfigurer inweboAuthenticationEventExecutionPlanConfigurer(\n+            @Qualifier(\"inweboAuthenticationHandler\")\n+            final AuthenticationHandler inweboAuthenticationHandler,\n+            @Qualifier(\"inweboAuthenticationMetaDataPopulator\")\n+            final AuthenticationMetaDataPopulator inweboAuthenticationMetaDataPopulator,\n+            @Qualifier(\"inweboAuthenticationDeviceMetadataPopulator\")\n+            final AuthenticationMetaDataPopulator inweboAuthenticationDeviceMetadataPopulator) {\n+            return plan -> {\n+                plan.registerAuthenticationHandler(inweboAuthenticationHandler);\n+                plan.registerAuthenticationMetadataPopulators(\n+                    CollectionUtils.wrapList(inweboAuthenticationMetaDataPopulator, inweboAuthenticationDeviceMetadataPopulator));\n+                plan.registerAuthenticationHandlerResolver(new ByCredentialTypeAuthenticationHandlerResolver(InweboCredential.class));\n+            };\n+        }\n     }\n }\n", "next_change": {"commit": "4c71c0d079c6bf2d6f5b15c717b034df0f51ac6f", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\nindex db83b95b02..c472eba6c5 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboAuthenticationConfiguration.java\n", "chunk": "@@ -132,7 +145,9 @@ public class InweboAuthenticationConfiguration {\n             return plan -> {\n                 plan.registerAuthenticationHandler(inweboAuthenticationHandler);\n                 plan.registerAuthenticationMetadataPopulators(\n-                    CollectionUtils.wrapList(inweboAuthenticationMetaDataPopulator, inweboAuthenticationDeviceMetadataPopulator));\n+                    CollectionUtils.wrapList(inweboAuthenticationMetaDataPopulator,\n+                        inweboMultifactorProviderAuthenticationMetadataPopulator,\n+                        inweboAuthenticationDeviceMetadataPopulator));\n                 plan.registerAuthenticationHandlerResolver(new ByCredentialTypeAuthenticationHandlerResolver(InweboCredential.class));\n             };\n         }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "bcd3b4a2cfb85d390e70e6d67f5b30d6e4f3133c", "committedDate": "2021-01-31 15:45:46 +0400", "message": "clean up props for mfa"}, {"oid": "4b877ddc7a10d975884ce4071167cdec61c577f1", "committedDate": "2021-09-26 21:04:38 +0400", "message": "cleaning up config injectons"}, {"oid": "af7cf2a2d06e374b47870a556c37dcf85eaf221b", "committedDate": "2021-09-28 13:21:20 +0400", "message": "cleaning up config injectons"}, {"oid": "a36b65e597449ec7070e9e29c67083f4427c9a43", "committedDate": "2021-09-30 17:55:16 +0400", "message": "set proxy mode for refresh-scope"}, {"oid": "1f4a958eb9cac4836c6345e03ddb25b042330c6c", "committedDate": "2021-10-05 15:31:47 +0400", "message": "cleaning up config injectons with proxies disabled"}, {"oid": "2e2dc386ea5808fb9391bb647a3fdefe96c044bc", "committedDate": "2021-10-05 16:20:31 +0400", "message": "cleaning up config injectons with proxies disabled"}, {"oid": "87829c8b79109e1e400e07487a3c7c094140ba5a", "committedDate": "2021-10-28 16:20:55 +0400", "message": "remove autowired annotations from bean methods"}, {"oid": "82c2fac7d7e3ec18223d2d61e99d9fd22549a39f", "committedDate": "2021-11-16 11:58:48 +0400", "message": "clean up names for config classes"}, {"oid": "26c56e3f868aae57b2ecae53eb0066f518616c5c", "committedDate": "2022-02-28 10:47:09 +0400", "message": "allow force-reload beans on refresh requests"}, {"oid": "8673cbba6f408b71751be7e0700b5b3a9a663004", "committedDate": "2022-02-28 10:47:15 +0400", "message": "fix build issues"}, {"oid": "4c71c0d079c6bf2d6f5b15c717b034df0f51ac6f", "committedDate": "2022-03-07 10:29:36 +0400", "message": "enable mfa provider populator for other mfa providers"}, {"oid": "51786a00059b8da47c8710cc55a5f3141c56c08d", "committedDate": "2022-03-07 11:12:09 +0400", "message": "enable mfa provider populator for other mfa providers"}, {"oid": "ffdfcb31d6bf3916a2348e7ae1f616fa0694e388", "committedDate": "2022-03-29 12:07:22 +0400", "message": "build support for several more feature modules"}, {"oid": "8743c2fbdf2290a3a6138c099efd991fe85fb76a", "committedDate": "2022-04-24 20:03:42 +0400", "message": "convert spring configurations to auto-configuration"}, {"oid": "0ae2518220742d0ffb46083a60360647b1a95582", "committedDate": "2022-06-14 10:42:31 +0400", "message": "allow mfa handlers to know their mfa provider"}, {"oid": "62dba8f9242928b4364f11ce6414cd47c7af65a6", "committedDate": "2022-06-25 19:46:14 +0400", "message": "re-org feature catalog; keep track of known features"}, {"oid": "146841de193991f13f4666446443e9655b675bf5", "committedDate": "2023-04-26 18:30:32 +0400", "message": "move auto-config components into a consistent hierarchy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0OTczNw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534749737", "body": "Does this really need to be a bean? If so, please prefix all bean names to use `inwebo`. I ask the question because, is it possible for spring-ws auto-configuration to be affected by this bean? Is it going to be pick up every bean that is of type `Jaxb2Marshaller`? Will this interfere with some other module that wants to have their own `Jaxb2Marshaller`? ", "bodyText": "Does this really need to be a bean? If so, please prefix all bean names to use inwebo. I ask the question because, is it possible for spring-ws auto-configuration to be affected by this bean? Is it going to be pick up every bean that is of type Jaxb2Marshaller? Will this interfere with some other module that wants to have their own Jaxb2Marshaller?", "bodyHTML": "<p dir=\"auto\">Does this really need to be a bean? If so, please prefix all bean names to use <code>inwebo</code>. I ask the question because, is it possible for spring-ws auto-configuration to be affected by this bean? Is it going to be pick up every bean that is of type <code>Jaxb2Marshaller</code>? Will this interfere with some other module that wants to have their own <code>Jaxb2Marshaller</code>?</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:50:16Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyNDE0NA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536024144", "bodyText": "This must be at least renamed as it could conflict yes.\nBut it's certainly better to inline it inside the consoleAdmin() method. Will do that.", "author": "leleuj", "createdAt": "2020-12-04T11:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc0OTczNw=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nindex 3aea16456b..26cfb9a433 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n", "chunk": "@@ -33,22 +33,17 @@ public class InweboConfiguration {\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"marshaller\")\n-    public Jaxb2Marshaller marshaller() {\n-        val marshaller = new Jaxb2Marshaller();\n-        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n-        return marshaller;\n-    }\n-\n     @Bean\n     @ConditionalOnMissingBean(name = \"consoleAdmin\")\n     @RefreshScope\n     public ConsoleAdmin consoleAdmin() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+\n         val client = new ConsoleAdmin();\n         client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n-        client.setMarshaller(marshaller());\n-        client.setUnmarshaller(marshaller());\n+        client.setMarshaller(marshaller);\n+        client.setUnmarshaller(marshaller);\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nindex 26cfb9a433..77e97e3406 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n", "chunk": "@@ -47,7 +47,7 @@ public class InweboConfiguration {\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n-            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n             val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n             tmFactory.init((KeyStore) null);\n             messageSender.setTrustManagers(tmFactory.getTrustManagers());\n", "next_change": {"commit": "945698852ded2c23cb4de216f41926023fa35b7b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nsimilarity index 67%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nindex 77e97e3406..c84cf5b34c 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\n", "chunk": "@@ -48,9 +55,13 @@ public class InweboConfiguration {\n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n             messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n-            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmFactory.init((KeyStore) null);\n-            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            if (casSslContext.getIfAvailable() != null) {\n+                messageSender.setTrustManagers(casSslContext.getIfAvailable().getTrustManagers());\n+            } else {\n+                val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+                tmFactory.init((KeyStore) null);\n+                messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            }\n             client.setMessageSender(messageSender);\n         } catch (final Exception e) {\n             throw new RuntimeException(\"Cannot initialize ConsoleAdmin\", e);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nsimilarity index 58%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nindex 3aea16456b..c84cf5b34c 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\n", "chunk": "@@ -28,34 +31,37 @@ import java.security.KeyStore;\n @Configuration(\"inweboConfiguration\")\n @EnableConfigurationProperties(CasConfigurationProperties.class)\n @EnableScheduling\n-public class InweboConfiguration {\n+public class InweboServiceConfiguration {\n \n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    @Qualifier(\"casSslContext\")\n+    private ObjectProvider<DefaultCasSslContext> casSslContext;\n+\n     @Bean\n-    @ConditionalOnMissingBean(name = \"marshaller\")\n-    public Jaxb2Marshaller marshaller() {\n+    @ConditionalOnMissingBean(name = \"inweboConsoleAdmin\")\n+    @RefreshScope\n+    public InweboConsoleAdmin inweboConsoleAdmin() {\n         val marshaller = new Jaxb2Marshaller();\n         marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n-        return marshaller;\n-    }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n-    @RefreshScope\n-    public ConsoleAdmin consoleAdmin() {\n-        val client = new ConsoleAdmin();\n+        val client = new InweboConsoleAdmin();\n         client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n-        client.setMarshaller(marshaller());\n-        client.setUnmarshaller(marshaller());\n+        client.setMarshaller(marshaller);\n+        client.setUnmarshaller(marshaller);\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n-            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n-            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmFactory.init((KeyStore) null);\n-            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n+            if (casSslContext.getIfAvailable() != null) {\n+                messageSender.setTrustManagers(casSslContext.getIfAvailable().getTrustManagers());\n+            } else {\n+                val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+                tmFactory.init((KeyStore) null);\n+                messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            }\n             client.setMessageSender(messageSender);\n         } catch (final Exception e) {\n             throw new RuntimeException(\"Cannot initialize ConsoleAdmin\", e);\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534750494", "body": "Wouldn't you be able to just merge the 3 beans that exist here to the InweboAuthenticationConfiguration class? Why a separate config? ", "bodyText": "Wouldn't you be able to just merge the 3 beans that exist here to the InweboAuthenticationConfiguration class? Why a separate config?", "bodyHTML": "<p dir=\"auto\">Wouldn't you be able to just merge the 3 beans that exist here to the InweboAuthenticationConfiguration class? Why a separate config?</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:50:59Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyNjA0Mg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536026042", "bodyText": "I'd prefer to keep the Inwebo services dedicated beans in a separate bean configuration.\nThough, I propose to rename it InweboServiceConfiguration to make things clearer.", "author": "leleuj", "createdAt": "2020-12-04T11:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MjU4NA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539052584", "bodyText": "I renamed InweboConfiguration into InweboServiceConfiguration.", "author": "leleuj", "createdAt": "2020-12-09T06:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MDQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nindex 3aea16456b..26cfb9a433 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n", "chunk": "@@ -33,22 +33,17 @@ public class InweboConfiguration {\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"marshaller\")\n-    public Jaxb2Marshaller marshaller() {\n-        val marshaller = new Jaxb2Marshaller();\n-        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n-        return marshaller;\n-    }\n-\n     @Bean\n     @ConditionalOnMissingBean(name = \"consoleAdmin\")\n     @RefreshScope\n     public ConsoleAdmin consoleAdmin() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+\n         val client = new ConsoleAdmin();\n         client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n-        client.setMarshaller(marshaller());\n-        client.setUnmarshaller(marshaller());\n+        client.setMarshaller(marshaller);\n+        client.setUnmarshaller(marshaller);\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nindex 26cfb9a433..77e97e3406 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n", "chunk": "@@ -47,7 +47,7 @@ public class InweboConfiguration {\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n-            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n             val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n             tmFactory.init((KeyStore) null);\n             messageSender.setTrustManagers(tmFactory.getTrustManagers());\n", "next_change": {"commit": "945698852ded2c23cb4de216f41926023fa35b7b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nsimilarity index 67%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nindex 77e97e3406..c84cf5b34c 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\n", "chunk": "@@ -48,9 +55,13 @@ public class InweboConfiguration {\n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n             messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n-            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmFactory.init((KeyStore) null);\n-            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            if (casSslContext.getIfAvailable() != null) {\n+                messageSender.setTrustManagers(casSslContext.getIfAvailable().getTrustManagers());\n+            } else {\n+                val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+                tmFactory.init((KeyStore) null);\n+                messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            }\n             client.setMessageSender(messageSender);\n         } catch (final Exception e) {\n             throw new RuntimeException(\"Cannot initialize ConsoleAdmin\", e);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nsimilarity index 58%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nindex 3aea16456b..c84cf5b34c 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\n", "chunk": "@@ -28,34 +31,37 @@ import java.security.KeyStore;\n @Configuration(\"inweboConfiguration\")\n @EnableConfigurationProperties(CasConfigurationProperties.class)\n @EnableScheduling\n-public class InweboConfiguration {\n+public class InweboServiceConfiguration {\n \n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    @Qualifier(\"casSslContext\")\n+    private ObjectProvider<DefaultCasSslContext> casSslContext;\n+\n     @Bean\n-    @ConditionalOnMissingBean(name = \"marshaller\")\n-    public Jaxb2Marshaller marshaller() {\n+    @ConditionalOnMissingBean(name = \"inweboConsoleAdmin\")\n+    @RefreshScope\n+    public InweboConsoleAdmin inweboConsoleAdmin() {\n         val marshaller = new Jaxb2Marshaller();\n         marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n-        return marshaller;\n-    }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n-    @RefreshScope\n-    public ConsoleAdmin consoleAdmin() {\n-        val client = new ConsoleAdmin();\n+        val client = new InweboConsoleAdmin();\n         client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n-        client.setMarshaller(marshaller());\n-        client.setUnmarshaller(marshaller());\n+        client.setMarshaller(marshaller);\n+        client.setUnmarshaller(marshaller);\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n-            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n-            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmFactory.init((KeyStore) null);\n-            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n+            if (casSslContext.getIfAvailable() != null) {\n+                messageSender.setTrustManagers(casSslContext.getIfAvailable().getTrustManagers());\n+            } else {\n+                val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+                tmFactory.init((KeyStore) null);\n+                messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            }\n             client.setMessageSender(messageSender);\n         } catch (final Exception e) {\n             throw new RuntimeException(\"Cannot initialize ConsoleAdmin\", e);\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534752354", "body": "You should not preferably spin up an isolated trust-manager; rather you should be using one that is provided by CAS automatically so the behavior of the trust-manager can be controlled via settings. I believe this is done in the util or web module where the http-client is constructed.", "bodyText": "You should not preferably spin up an isolated trust-manager; rather you should be using one that is provided by CAS automatically so the behavior of the trust-manager can be controlled via settings. I believe this is done in the util or web module where the http-client is constructed.", "bodyHTML": "<p dir=\"auto\">You should not preferably spin up an isolated trust-manager; rather you should be using one that is provided by CAS automatically so the behavior of the trust-manager can be controlled via settings. I believe this is done in the util or web module where the http-client is constructed.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:52:15Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.ConsoleAdmin;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.SSLUtil;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+import javax.net.ssl.TrustManagerFactory;\n+import java.security.KeyStore;\n+\n+/**\n+ * The Inwebo services configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboConfiguration {\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"marshaller\")\n+    public Jaxb2Marshaller marshaller() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n+    @RefreshScope\n+    public ConsoleAdmin consoleAdmin() {\n+        val client = new ConsoleAdmin();\n+        client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n+        client.setMarshaller(marshaller());\n+        client.setUnmarshaller(marshaller());\n+\n+        try {\n+            val messageSender = new HttpsUrlConnectionMessageSender();\n+            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+            tmFactory.init((KeyStore) null);\n+            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            client.setMessageSender(messageSender);", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MjQxMg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536042412", "bodyText": "Indeed, there is a DefaultCasSslContext which is used in CasCoreHttpConfiguration for the HTTP client.\nThough, the trustManagers of the DefaultCasSslContext, nor the DefaultCasSslContext itself are exposed.\nSo the idea here is to expose them to use this DefaultCasSslContext to get the built trustManagers, right?", "author": "leleuj", "createdAt": "2020-12-04T11:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzMjgwNA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539132804", "bodyText": "OK. This is committed. I re-use the casSslContext if it exists to get its trustManagers.", "author": "leleuj", "createdAt": "2020-12-09T09:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nindex 3aea16456b..26cfb9a433 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n", "chunk": "@@ -33,22 +33,17 @@ public class InweboConfiguration {\n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"marshaller\")\n-    public Jaxb2Marshaller marshaller() {\n-        val marshaller = new Jaxb2Marshaller();\n-        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n-        return marshaller;\n-    }\n-\n     @Bean\n     @ConditionalOnMissingBean(name = \"consoleAdmin\")\n     @RefreshScope\n     public ConsoleAdmin consoleAdmin() {\n+        val marshaller = new Jaxb2Marshaller();\n+        marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n+\n         val client = new ConsoleAdmin();\n         client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n-        client.setMarshaller(marshaller());\n-        client.setUnmarshaller(marshaller());\n+        client.setMarshaller(marshaller);\n+        client.setUnmarshaller(marshaller);\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nindex 26cfb9a433..77e97e3406 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n", "chunk": "@@ -47,7 +47,7 @@ public class InweboConfiguration {\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n-            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n+            messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n             val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n             tmFactory.init((KeyStore) null);\n             messageSender.setTrustManagers(tmFactory.getTrustManagers());\n", "next_change": {"commit": "945698852ded2c23cb4de216f41926023fa35b7b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nsimilarity index 67%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nindex 77e97e3406..c84cf5b34c 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\n", "chunk": "@@ -48,9 +55,13 @@ public class InweboConfiguration {\n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n             messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n-            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmFactory.init((KeyStore) null);\n-            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            if (casSslContext.getIfAvailable() != null) {\n+                messageSender.setTrustManagers(casSslContext.getIfAvailable().getTrustManagers());\n+            } else {\n+                val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+                tmFactory.init((KeyStore) null);\n+                messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            }\n             client.setMessageSender(messageSender);\n         } catch (final Exception e) {\n             throw new RuntimeException(\"Cannot initialize ConsoleAdmin\", e);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nsimilarity index 58%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\nindex 3aea16456b..c84cf5b34c 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboServiceConfiguration.java\n", "chunk": "@@ -28,34 +31,37 @@ import java.security.KeyStore;\n @Configuration(\"inweboConfiguration\")\n @EnableConfigurationProperties(CasConfigurationProperties.class)\n @EnableScheduling\n-public class InweboConfiguration {\n+public class InweboServiceConfiguration {\n \n     @Autowired\n     private CasConfigurationProperties casProperties;\n \n+    @Autowired\n+    @Qualifier(\"casSslContext\")\n+    private ObjectProvider<DefaultCasSslContext> casSslContext;\n+\n     @Bean\n-    @ConditionalOnMissingBean(name = \"marshaller\")\n-    public Jaxb2Marshaller marshaller() {\n+    @ConditionalOnMissingBean(name = \"inweboConsoleAdmin\")\n+    @RefreshScope\n+    public InweboConsoleAdmin inweboConsoleAdmin() {\n         val marshaller = new Jaxb2Marshaller();\n         marshaller.setContextPath(this.getClass().getPackageName().replaceAll(\"config\", \"service.soap\"));\n-        return marshaller;\n-    }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"consoleAdmin\")\n-    @RefreshScope\n-    public ConsoleAdmin consoleAdmin() {\n-        val client = new ConsoleAdmin();\n+        val client = new InweboConsoleAdmin();\n         client.setDefaultUri(\"https://api.myinwebo.com/v2/services/ConsoleAdmin\");\n-        client.setMarshaller(marshaller());\n-        client.setUnmarshaller(marshaller());\n+        client.setMarshaller(marshaller);\n+        client.setUnmarshaller(marshaller);\n \n         try {\n             val messageSender = new HttpsUrlConnectionMessageSender();\n-            messageSender.setKeyManagers(SSLUtil.buildKeystore(casProperties.getAuthn().getMfa().getInwebo()).getKeyManagers());\n-            val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmFactory.init((KeyStore) null);\n-            messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            messageSender.setKeyManagers(SSLUtils.buildKeystore(casProperties.getAuthn().getMfa().getInwebo().getClientCertificate()).getKeyManagers());\n+            if (casSslContext.getIfAvailable() != null) {\n+                messageSender.setTrustManagers(casSslContext.getIfAvailable().getTrustManagers());\n+            } else {\n+                val tmFactory = TrustManagerFactory.getInstance(\"PKIX\");\n+                tmFactory.init((KeyStore) null);\n+                messageSender.setTrustManagers(tmFactory.getTrustManagers());\n+            }\n             client.setMessageSender(messageSender);\n         } catch (final Exception e) {\n             throw new RuntimeException(\"Cannot initialize ConsoleAdmin\", e);\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1Mzg2Mg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534753862", "body": "Please prefix all webflow actions to carry the MFA provider name, similar to simple-mfa or Duo. ", "bodyText": "Please prefix all webflow actions to carry the MFA provider name, similar to simple-mfa or Duo.", "bodyHTML": "<p dir=\"auto\">Please prefix all webflow actions to carry the MFA provider name, similar to simple-mfa or Duo.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:53:10Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NDM1NQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r536044355", "bodyText": "This makes sense. I will rename all SWF actions.", "author": "leleuj", "createdAt": "2020-12-04T11:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1Mzg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex fdc9271d6c..bc319e8c73 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -167,36 +167,36 @@ public class InweboWebflowConfiguration {\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @ConditionalOnMissingBean(name = \"inweboPushAuthenticateAction\")\n     @RefreshScope\n-    public Action pushAuthenticateAction() {\n-        return new PushAuthenticateAction(inweboService.getObject());\n+    public Action inweboPushAuthenticateAction() {\n+        return new InweboPushAuthenticateAction(inweboService.getObject());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckUserAction\")\n     @RefreshScope\n-    public Action checkUserAction() {\n-        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    public Action inweboCheckUserAction() {\n+        return new InweboCheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n-    public Action mustEnrollAction() {\n-        return new MustEnrollAction(messageSource.getObject());\n+    @ConditionalOnMissingBean(name = \"inweboMustEnrollAction\")\n+    public Action inweboMustEnrollAction() {\n+        return new InweboMustEnrollAction(messageSource.getObject());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckAuthenticationAction\")\n     @RefreshScope\n-    public Action checkAuthenticationAction() {\n-        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    public Action inweboCheckAuthenticationAction() {\n+        return new InweboCheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"successAction\")\n-    public Action successAction() {\n-        return new SuccessAction();\n+    @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n+    public Action inweboSuccessAction() {\n+        return new InweboSuccessAction();\n     }\n \n     /**\n", "next_change": {"commit": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex bc319e8c73..450acfba48 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -196,7 +196,7 @@ public class InweboWebflowConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n     public Action inweboSuccessAction() {\n-        return new InweboSuccessAction();\n+        return StaticEventExecutionAction.SUCCESS;\n     }\n \n     /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex fdc9271d6c..79167bfaf4 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -167,36 +162,36 @@ public class InweboWebflowConfiguration {\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @ConditionalOnMissingBean(name = \"inweboPushAuthenticateAction\")\n     @RefreshScope\n-    public Action pushAuthenticateAction() {\n-        return new PushAuthenticateAction(inweboService.getObject());\n+    public Action inweboPushAuthenticateAction() {\n+        return new InweboPushAuthenticateAction(inweboService.getObject());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckUserAction\")\n     @RefreshScope\n-    public Action checkUserAction() {\n-        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    public Action inweboCheckUserAction() {\n+        return new InweboCheckUserAction(inweboService.getObject(), casProperties);\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n-    public Action mustEnrollAction() {\n-        return new MustEnrollAction(messageSource.getObject());\n+    @ConditionalOnMissingBean(name = \"inweboMustEnrollAction\")\n+    public Action inweboMustEnrollAction() {\n+        return new InweboMustEnrollAction();\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckAuthenticationAction\")\n     @RefreshScope\n-    public Action checkAuthenticationAction() {\n-        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    public Action inweboCheckAuthenticationAction() {\n+        return new InweboCheckAuthenticationAction(inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"successAction\")\n-    public Action successAction() {\n-        return new SuccessAction();\n+    @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n+    public Action inweboSuccessAction() {\n+        return StaticEventExecutionAction.SUCCESS;\n     }\n \n     /**\n", "next_change": {"commit": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 79167bfaf4..2cec542e98 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -190,6 +194,7 @@ public class InweboWebflowConfiguration {\n \n     @Bean\n     @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n+    @RefreshScope\n     public Action inweboSuccessAction() {\n         return StaticEventExecutionAction.SUCCESS;\n     }\n", "next_change": {"commit": "639ae0d36c8876204652876558007899a7123547", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 2cec542e98..0e21518aef 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -203,8 +149,8 @@ public class InweboWebflowConfiguration {\n      * The Inwebo multifactor trust configuration.\n      */\n     @ConditionalOnClass(value = MultifactorAuthnTrustConfiguration.class)\n-    @ConditionalOnProperty(prefix = \"cas.authn.mfa.inwebo\", name = \"trusted-device-enabled\", havingValue = \"true\", matchIfMissing = true)\n-    @Configuration(\"inweoMultifactorTrustConfiguration\")\n+    @ConditionalOnMultifactorTrustedDevicesEnabled(prefix = \"cas.authn.mfa.inwebo\")\n+    @Configuration(\"inweboMultifactorTrustConfiguration\")\n     public class InweboMultifactorTrustConfiguration {\n \n         @ConditionalOnMissingBean(name = \"inweboMultifactorTrustWebflowConfigurer\")\n", "next_change": {"commit": "b16f67654be9705f5c752b477415cb76611f0628", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 0e21518aef..4f5e147f03 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -150,17 +155,25 @@ public class InweboWebflowConfiguration {\n      */\n     @ConditionalOnClass(value = MultifactorAuthnTrustConfiguration.class)\n     @ConditionalOnMultifactorTrustedDevicesEnabled(prefix = \"cas.authn.mfa.inwebo\")\n-    @Configuration(\"inweboMultifactorTrustConfiguration\")\n-    public class InweboMultifactorTrustConfiguration {\n+    @Configuration(value = \"inweboMultifactorTrustConfiguration\", proxyBeanMethods = false)\n+    public static class InweboMultifactorTrustConfiguration {\n \n         @ConditionalOnMissingBean(name = \"inweboMultifactorTrustWebflowConfigurer\")\n         @Bean\n-        @DependsOn({\"defaultWebflowConfigurer\", \"inweboMultifactorWebflowConfigurer\"})\n         @RefreshScope\n-        public CasWebflowConfigurer inweboMultifactorTrustWebflowConfigurer() {\n-            val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices.getObject(),\n-                loginFlowDefinitionRegistry.getObject(),\n-                inweboFlowRegistry(),\n+        @Autowired\n+        public CasWebflowConfigurer inweboMultifactorTrustWebflowConfigurer(\n+            @Qualifier(\"inweboFlowRegistry\")\n+            final FlowDefinitionRegistry inweboFlowRegistry,\n+            final ConfigurableApplicationContext applicationContext,\n+            final CasConfigurationProperties casProperties,\n+            @Qualifier(\"loginFlowRegistry\")\n+            final FlowDefinitionRegistry loginFlowDefinitionRegistry,\n+            @Qualifier(\"flowBuilderServices\")\n+            final FlowBuilderServices flowBuilderServices) {\n+            val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n+                loginFlowDefinitionRegistry,\n+                inweboFlowRegistry,\n                 applicationContext,\n                 casProperties,\n                 MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n", "next_change": {"commit": "0c5a92862c03793a92d1929cd30de9c05c14e099", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 4f5e147f03..ed68f552dc 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -167,9 +170,9 @@ public class InweboWebflowConfiguration {\n             final FlowDefinitionRegistry inweboFlowRegistry,\n             final ConfigurableApplicationContext applicationContext,\n             final CasConfigurationProperties casProperties,\n-            @Qualifier(\"loginFlowRegistry\")\n+            @Qualifier(CasWebflowConstants.BEAN_NAME_LOGIN_FLOW_DEFINITION_REGISTRY)\n             final FlowDefinitionRegistry loginFlowDefinitionRegistry,\n-            @Qualifier(\"flowBuilderServices\")\n+            @Qualifier(CasWebflowConstants.BEAN_NAME_FLOW_BUILDER_SERVICES)\n             final FlowBuilderServices flowBuilderServices) {\n             val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n                 loginFlowDefinitionRegistry,\n", "next_change": {"commit": "9366a3a5f704101f2300aa3778ff3737654bab5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex ed68f552dc..58ae37d3f6 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -174,22 +187,33 @@ public class InweboWebflowConfiguration {\n             final FlowDefinitionRegistry loginFlowDefinitionRegistry,\n             @Qualifier(CasWebflowConstants.BEAN_NAME_FLOW_BUILDER_SERVICES)\n             final FlowBuilderServices flowBuilderServices) {\n-            val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n-                loginFlowDefinitionRegistry,\n-                inweboFlowRegistry,\n-                applicationContext,\n-                casProperties,\n-                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n-            cfg.setOrder(WEBFLOW_CONFIGURER_ORDER + 1);\n-            return cfg;\n+            return BeanSupplier.of(CasWebflowConfigurer.class)\n+                .when(CONDITION.given(applicationContext.getEnvironment()))\n+                .supply(() -> {\n+                    val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n+                        loginFlowDefinitionRegistry,\n+                        inweboFlowRegistry,\n+                        applicationContext,\n+                        casProperties,\n+                        MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+                    cfg.setOrder(WEBFLOW_CONFIGURER_ORDER + 1);\n+                    return cfg;\n+                })\n+                .otherwiseProxy()\n+                .get();\n         }\n \n         @Bean\n-        @Autowired\n+        @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n         public CasWebflowExecutionPlanConfigurer inweboMultifactorTrustCasWebflowExecutionPlanConfigurer(\n+            final ConfigurableApplicationContext applicationContext,\n             @Qualifier(\"inweboMultifactorTrustWebflowConfigurer\")\n             final CasWebflowConfigurer inweboMultifactorTrustWebflowConfigurer) {\n-            return plan -> plan.registerWebflowConfigurer(inweboMultifactorTrustWebflowConfigurer);\n+            return BeanSupplier.of(CasWebflowExecutionPlanConfigurer.class)\n+                .when(CONDITION.given(applicationContext.getEnvironment()))\n+                .supply(() -> plan -> plan.registerWebflowConfigurer(inweboMultifactorTrustWebflowConfigurer))\n+                .otherwiseProxy()\n+                .get();\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "d27c0563ff11435820212743298476cd42724493", "committedDate": "2021-03-17 09:17:54 +0400", "message": "Programmatic checking of transition validity in MFA flows (#5082)"}, {"oid": "16ed59705020963648c696025eae2ebdad08b8a1", "committedDate": "2021-03-27 15:20:45 +0400", "message": "clean up mfa webflow context assembly"}, {"oid": "639ae0d36c8876204652876558007899a7123547", "committedDate": "2021-05-26 12:44:44 +0400", "message": "use conditional annotation to enable trusted devices for mfa"}, {"oid": "b16f67654be9705f5c752b477415cb76611f0628", "committedDate": "2021-09-25 19:51:07 +0400", "message": "cleaning up config injectons"}, {"oid": "ac6a938ab2b7d201a2b22cf7287cbad2c75209c7", "committedDate": "2021-09-28 14:36:43 +0400", "message": "cleaning up config injectons"}, {"oid": "0c5a92862c03793a92d1929cd30de9c05c14e099", "committedDate": "2021-09-29 15:08:12 +0400", "message": "cleaning up config injectons"}, {"oid": "a36b65e597449ec7070e9e29c67083f4427c9a43", "committedDate": "2021-09-30 17:55:16 +0400", "message": "set proxy mode for refresh-scope"}, {"oid": "1f4a958eb9cac4836c6345e03ddb25b042330c6c", "committedDate": "2021-10-05 15:31:47 +0400", "message": "cleaning up config injectons with proxies disabled"}, {"oid": "87829c8b79109e1e400e07487a3c7c094140ba5a", "committedDate": "2021-10-28 16:20:55 +0400", "message": "remove autowired annotations from bean methods"}, {"oid": "82c2fac7d7e3ec18223d2d61e99d9fd22549a39f", "committedDate": "2021-11-16 11:58:48 +0400", "message": "clean up names for config classes"}, {"oid": "26c56e3f868aae57b2ecae53eb0066f518616c5c", "committedDate": "2022-02-28 10:47:09 +0400", "message": "allow force-reload beans on refresh requests"}, {"oid": "8673cbba6f408b71751be7e0700b5b3a9a663004", "committedDate": "2022-02-28 10:47:15 +0400", "message": "fix build issues"}, {"oid": "9366a3a5f704101f2300aa3778ff3737654bab5b", "committedDate": "2022-03-01 17:03:33 +0400", "message": "reorg conditionals for trusted devices"}, {"oid": "ffdfcb31d6bf3916a2348e7ae1f616fa0694e388", "committedDate": "2022-03-29 12:07:22 +0400", "message": "build support for several more feature modules"}, {"oid": "cfe1086eb2c629242f27ceeff7a571a4c2573191", "committedDate": "2022-04-22 19:49:18 +0400", "message": "make sure all swf actions are conditionally defined"}, {"oid": "8743c2fbdf2290a3a6138c099efd991fe85fb76a", "committedDate": "2022-04-24 20:03:42 +0400", "message": "convert spring configurations to auto-configuration"}, {"oid": "62dba8f9242928b4364f11ce6414cd47c7af65a6", "committedDate": "2022-06-25 19:46:14 +0400", "message": "re-org feature catalog; keep track of known features"}, {"oid": "e59ebba20285cd5712c67f5fc99383aa825e29c7", "committedDate": "2022-07-08 21:20:22 +0200", "message": "simplify annotations construction"}, {"oid": "146841de193991f13f4666446443e9655b675bf5", "committedDate": "2023-04-26 18:30:32 +0400", "message": "move auto-config components into a consistent hierarchy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NzA2MQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534757061", "body": "This is unnecessary. Use `StaticEventExecutionAction#SUCCESS` instead.", "bodyText": "This is unnecessary. Use StaticEventExecutionAction#SUCCESS instead.", "bodyHTML": "<p dir=\"auto\">This is unnecessary. Use <code>StaticEventExecutionAction#SUCCESS</code> instead.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:55:16Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package org.apereo.cas.support.inwebo.config;\n+\n+import org.apereo.cas.CentralAuthenticationService;\n+import org.apereo.cas.audit.AuditableExecution;\n+import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n+import org.apereo.cas.authentication.AuthenticationServiceSelectionPlan;\n+import org.apereo.cas.authentication.AuthenticationSystemSupport;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.services.ServicesManager;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorAuthenticationWebflowEventResolver;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorTrustWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.InweboMultifactorWebflowConfigurer;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckAuthenticationAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.CheckUserAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.MustEnrollAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.PushAuthenticateAction;\n+import org.apereo.cas.support.inwebo.web.flow.actions.SuccessAction;\n+import org.apereo.cas.ticket.registry.TicketRegistry;\n+import org.apereo.cas.ticket.registry.TicketRegistrySupport;\n+import org.apereo.cas.trusted.config.MultifactorAuthnTrustConfiguration;\n+import org.apereo.cas.web.cookie.CasCookieBuilder;\n+import org.apereo.cas.web.flow.CasWebflowConfigurer;\n+import org.apereo.cas.web.flow.CasWebflowConstants;\n+import org.apereo.cas.web.flow.CasWebflowExecutionPlanConfigurer;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.flow.resolver.impl.CasWebflowEventResolutionConfigurationContext;\n+import org.apereo.cas.web.flow.util.MultifactorAuthenticationWebflowUtils;\n+\n+import lombok.val;\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.context.config.annotation.RefreshScope;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.DependsOn;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n+import org.springframework.webflow.config.FlowDefinitionRegistryBuilder;\n+import org.springframework.webflow.definition.registry.FlowDefinitionRegistry;\n+import org.springframework.webflow.engine.builder.support.FlowBuilderServices;\n+import org.springframework.webflow.execution.Action;\n+\n+/**\n+ * The Inwebo MFA webflow configuration.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Configuration(\"inweboWebflowConfiguration\")\n+@EnableConfigurationProperties(CasConfigurationProperties.class)\n+@EnableScheduling\n+public class InweboWebflowConfiguration {\n+    private static final int WEBFLOW_CONFIGURER_ORDER = 100;\n+\n+    @Autowired\n+    private CasConfigurationProperties casProperties;\n+\n+    @Autowired\n+    private ConfigurableApplicationContext applicationContext;\n+\n+    @Autowired\n+    @Qualifier(\"loginFlowRegistry\")\n+    private ObjectProvider<FlowDefinitionRegistry> loginFlowDefinitionRegistry;\n+\n+    @Autowired\n+    private ObjectProvider<FlowBuilderServices> flowBuilderServices;\n+\n+    @Autowired\n+    @Qualifier(\"messageSource\")\n+    private ObjectProvider<MessageSource> messageSource;\n+\n+    @Autowired\n+    @Qualifier(\"defaultAuthenticationSystemSupport\")\n+    private ObjectProvider<AuthenticationSystemSupport> authenticationSystemSupport;\n+\n+    @Autowired\n+    @Qualifier(\"centralAuthenticationService\")\n+    private ObjectProvider<CentralAuthenticationService> centralAuthenticationService;\n+\n+    @Autowired\n+    @Qualifier(\"servicesManager\")\n+    private ObjectProvider<ServicesManager> servicesManager;\n+\n+    @Autowired\n+    @Qualifier(\"defaultTicketRegistrySupport\")\n+    private ObjectProvider<TicketRegistrySupport> ticketRegistrySupport;\n+\n+    @Autowired\n+    @Qualifier(\"warnCookieGenerator\")\n+    private ObjectProvider<CasCookieBuilder> warnCookieGenerator;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationServiceSelectionPlan\")\n+    private ObjectProvider<AuthenticationServiceSelectionPlan> authenticationRequestServiceSelectionStrategies;\n+\n+    @Autowired\n+    @Qualifier(\"registeredServiceAccessStrategyEnforcer\")\n+    private ObjectProvider<AuditableExecution> registeredServiceAccessStrategyEnforcer;\n+\n+    @Autowired\n+    @Qualifier(\"ticketRegistry\")\n+    private ObjectProvider<TicketRegistry> ticketRegistry;\n+\n+    @Autowired\n+    @Qualifier(\"authenticationEventExecutionPlan\")\n+    private ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan;\n+\n+    @Autowired\n+    @Qualifier(\"inweboService\")\n+    private ObjectProvider<InweboService> inweboService;\n+\n+    @Bean\n+    public FlowDefinitionRegistry inweboFlowRegistry() {\n+        val builder = new FlowDefinitionRegistryBuilder(this.applicationContext, this.flowBuilderServices.getObject());\n+        builder.setBasePath(CasWebflowConstants.BASE_CLASSPATH_WEBFLOW);\n+        builder.addFlowLocationPattern(\"/mfa-inwebo/*-webflow.xml\");\n+        return builder.build();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorWebflowConfigurer\")\n+    @Bean\n+    @DependsOn(\"defaultWebflowConfigurer\")\n+    @RefreshScope\n+    public CasWebflowConfigurer inweboMultifactorWebflowConfigurer() {\n+        val cfg = new InweboMultifactorWebflowConfigurer(flowBuilderServices.getObject(),\n+                loginFlowDefinitionRegistry.getObject(),\n+                inweboFlowRegistry(),\n+                applicationContext,\n+                casProperties,\n+                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+        cfg.setOrder(WEBFLOW_CONFIGURER_ORDER);\n+        return cfg;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboCasWebflowExecutionPlanConfigurer\")\n+    public CasWebflowExecutionPlanConfigurer inweboCasWebflowExecutionPlanConfigurer() {\n+        return plan -> plan.registerWebflowConfigurer(inweboMultifactorWebflowConfigurer());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"inweboMultifactorAuthenticationWebflowEventResolver\")\n+    @RefreshScope\n+    public CasWebflowEventResolver inweboMultifactorAuthenticationWebflowEventResolver() {\n+        val context = CasWebflowEventResolutionConfigurationContext.builder()\n+                .authenticationSystemSupport(authenticationSystemSupport.getObject())\n+                .centralAuthenticationService(centralAuthenticationService.getObject())\n+                .servicesManager(servicesManager.getObject())\n+                .ticketRegistrySupport(ticketRegistrySupport.getObject())\n+                .warnCookieGenerator(warnCookieGenerator.getObject())\n+                .authenticationRequestServiceSelectionStrategies(authenticationRequestServiceSelectionStrategies.getObject())\n+                .registeredServiceAccessStrategyEnforcer(registeredServiceAccessStrategyEnforcer.getObject())\n+                .casProperties(casProperties)\n+                .ticketRegistry(ticketRegistry.getObject())\n+                .applicationContext(applicationContext)\n+                .authenticationEventExecutionPlan(authenticationEventExecutionPlan.getObject())\n+                .build();\n+\n+        return new InweboMultifactorAuthenticationWebflowEventResolver(context);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @RefreshScope\n+    public Action pushAuthenticateAction() {\n+        return new PushAuthenticateAction(inweboService.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @RefreshScope\n+    public Action checkUserAction() {\n+        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n+    public Action mustEnrollAction() {\n+        return new MustEnrollAction(messageSource.getObject());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @RefreshScope\n+    public Action checkAuthenticationAction() {\n+        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"successAction\")\n+    public Action successAction() {\n+        return new SuccessAction();\n+    }", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3MjI1OQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537372259", "bodyText": "Will do", "author": "leleuj", "createdAt": "2020-12-07T09:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1NzA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex fdc9271d6c..bc319e8c73 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -167,36 +167,36 @@ public class InweboWebflowConfiguration {\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @ConditionalOnMissingBean(name = \"inweboPushAuthenticateAction\")\n     @RefreshScope\n-    public Action pushAuthenticateAction() {\n-        return new PushAuthenticateAction(inweboService.getObject());\n+    public Action inweboPushAuthenticateAction() {\n+        return new InweboPushAuthenticateAction(inweboService.getObject());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckUserAction\")\n     @RefreshScope\n-    public Action checkUserAction() {\n-        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    public Action inweboCheckUserAction() {\n+        return new InweboCheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n-    public Action mustEnrollAction() {\n-        return new MustEnrollAction(messageSource.getObject());\n+    @ConditionalOnMissingBean(name = \"inweboMustEnrollAction\")\n+    public Action inweboMustEnrollAction() {\n+        return new InweboMustEnrollAction(messageSource.getObject());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckAuthenticationAction\")\n     @RefreshScope\n-    public Action checkAuthenticationAction() {\n-        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    public Action inweboCheckAuthenticationAction() {\n+        return new InweboCheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"successAction\")\n-    public Action successAction() {\n-        return new SuccessAction();\n+    @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n+    public Action inweboSuccessAction() {\n+        return new InweboSuccessAction();\n     }\n \n     /**\n", "next_change": {"commit": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex bc319e8c73..450acfba48 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -196,7 +196,7 @@ public class InweboWebflowConfiguration {\n     @Bean\n     @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n     public Action inweboSuccessAction() {\n-        return new InweboSuccessAction();\n+        return StaticEventExecutionAction.SUCCESS;\n     }\n \n     /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex fdc9271d6c..79167bfaf4 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -167,36 +162,36 @@ public class InweboWebflowConfiguration {\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"pushAuthenticateAction\")\n+    @ConditionalOnMissingBean(name = \"inweboPushAuthenticateAction\")\n     @RefreshScope\n-    public Action pushAuthenticateAction() {\n-        return new PushAuthenticateAction(inweboService.getObject());\n+    public Action inweboPushAuthenticateAction() {\n+        return new InweboPushAuthenticateAction(inweboService.getObject());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkUserAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckUserAction\")\n     @RefreshScope\n-    public Action checkUserAction() {\n-        return new CheckUserAction(messageSource.getObject(), inweboService.getObject(), casProperties);\n+    public Action inweboCheckUserAction() {\n+        return new InweboCheckUserAction(inweboService.getObject(), casProperties);\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"mustEnrollAction\")\n-    public Action mustEnrollAction() {\n-        return new MustEnrollAction(messageSource.getObject());\n+    @ConditionalOnMissingBean(name = \"inweboMustEnrollAction\")\n+    public Action inweboMustEnrollAction() {\n+        return new InweboMustEnrollAction();\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"checkAuthenticationAction\")\n+    @ConditionalOnMissingBean(name = \"inweboCheckAuthenticationAction\")\n     @RefreshScope\n-    public Action checkAuthenticationAction() {\n-        return new CheckAuthenticationAction(messageSource.getObject(), inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n+    public Action inweboCheckAuthenticationAction() {\n+        return new InweboCheckAuthenticationAction(inweboService.getObject(), inweboMultifactorAuthenticationWebflowEventResolver());\n     }\n \n     @Bean\n-    @ConditionalOnMissingBean(name = \"successAction\")\n-    public Action successAction() {\n-        return new SuccessAction();\n+    @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n+    public Action inweboSuccessAction() {\n+        return StaticEventExecutionAction.SUCCESS;\n     }\n \n     /**\n", "next_change": {"commit": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 79167bfaf4..2cec542e98 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -190,6 +194,7 @@ public class InweboWebflowConfiguration {\n \n     @Bean\n     @ConditionalOnMissingBean(name = \"inweboSuccessAction\")\n+    @RefreshScope\n     public Action inweboSuccessAction() {\n         return StaticEventExecutionAction.SUCCESS;\n     }\n", "next_change": {"commit": "639ae0d36c8876204652876558007899a7123547", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 2cec542e98..0e21518aef 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -203,8 +149,8 @@ public class InweboWebflowConfiguration {\n      * The Inwebo multifactor trust configuration.\n      */\n     @ConditionalOnClass(value = MultifactorAuthnTrustConfiguration.class)\n-    @ConditionalOnProperty(prefix = \"cas.authn.mfa.inwebo\", name = \"trusted-device-enabled\", havingValue = \"true\", matchIfMissing = true)\n-    @Configuration(\"inweoMultifactorTrustConfiguration\")\n+    @ConditionalOnMultifactorTrustedDevicesEnabled(prefix = \"cas.authn.mfa.inwebo\")\n+    @Configuration(\"inweboMultifactorTrustConfiguration\")\n     public class InweboMultifactorTrustConfiguration {\n \n         @ConditionalOnMissingBean(name = \"inweboMultifactorTrustWebflowConfigurer\")\n", "next_change": {"commit": "b16f67654be9705f5c752b477415cb76611f0628", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 0e21518aef..4f5e147f03 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -150,17 +155,25 @@ public class InweboWebflowConfiguration {\n      */\n     @ConditionalOnClass(value = MultifactorAuthnTrustConfiguration.class)\n     @ConditionalOnMultifactorTrustedDevicesEnabled(prefix = \"cas.authn.mfa.inwebo\")\n-    @Configuration(\"inweboMultifactorTrustConfiguration\")\n-    public class InweboMultifactorTrustConfiguration {\n+    @Configuration(value = \"inweboMultifactorTrustConfiguration\", proxyBeanMethods = false)\n+    public static class InweboMultifactorTrustConfiguration {\n \n         @ConditionalOnMissingBean(name = \"inweboMultifactorTrustWebflowConfigurer\")\n         @Bean\n-        @DependsOn({\"defaultWebflowConfigurer\", \"inweboMultifactorWebflowConfigurer\"})\n         @RefreshScope\n-        public CasWebflowConfigurer inweboMultifactorTrustWebflowConfigurer() {\n-            val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices.getObject(),\n-                loginFlowDefinitionRegistry.getObject(),\n-                inweboFlowRegistry(),\n+        @Autowired\n+        public CasWebflowConfigurer inweboMultifactorTrustWebflowConfigurer(\n+            @Qualifier(\"inweboFlowRegistry\")\n+            final FlowDefinitionRegistry inweboFlowRegistry,\n+            final ConfigurableApplicationContext applicationContext,\n+            final CasConfigurationProperties casProperties,\n+            @Qualifier(\"loginFlowRegistry\")\n+            final FlowDefinitionRegistry loginFlowDefinitionRegistry,\n+            @Qualifier(\"flowBuilderServices\")\n+            final FlowBuilderServices flowBuilderServices) {\n+            val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n+                loginFlowDefinitionRegistry,\n+                inweboFlowRegistry,\n                 applicationContext,\n                 casProperties,\n                 MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n", "next_change": {"commit": "0c5a92862c03793a92d1929cd30de9c05c14e099", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex 4f5e147f03..ed68f552dc 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -167,9 +170,9 @@ public class InweboWebflowConfiguration {\n             final FlowDefinitionRegistry inweboFlowRegistry,\n             final ConfigurableApplicationContext applicationContext,\n             final CasConfigurationProperties casProperties,\n-            @Qualifier(\"loginFlowRegistry\")\n+            @Qualifier(CasWebflowConstants.BEAN_NAME_LOGIN_FLOW_DEFINITION_REGISTRY)\n             final FlowDefinitionRegistry loginFlowDefinitionRegistry,\n-            @Qualifier(\"flowBuilderServices\")\n+            @Qualifier(CasWebflowConstants.BEAN_NAME_FLOW_BUILDER_SERVICES)\n             final FlowBuilderServices flowBuilderServices) {\n             val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n                 loginFlowDefinitionRegistry,\n", "next_change": {"commit": "9366a3a5f704101f2300aa3778ff3737654bab5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\nindex ed68f552dc..58ae37d3f6 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/config/InweboWebflowConfiguration.java\n", "chunk": "@@ -174,22 +187,33 @@ public class InweboWebflowConfiguration {\n             final FlowDefinitionRegistry loginFlowDefinitionRegistry,\n             @Qualifier(CasWebflowConstants.BEAN_NAME_FLOW_BUILDER_SERVICES)\n             final FlowBuilderServices flowBuilderServices) {\n-            val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n-                loginFlowDefinitionRegistry,\n-                inweboFlowRegistry,\n-                applicationContext,\n-                casProperties,\n-                MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n-            cfg.setOrder(WEBFLOW_CONFIGURER_ORDER + 1);\n-            return cfg;\n+            return BeanSupplier.of(CasWebflowConfigurer.class)\n+                .when(CONDITION.given(applicationContext.getEnvironment()))\n+                .supply(() -> {\n+                    val cfg = new InweboMultifactorTrustWebflowConfigurer(flowBuilderServices,\n+                        loginFlowDefinitionRegistry,\n+                        inweboFlowRegistry,\n+                        applicationContext,\n+                        casProperties,\n+                        MultifactorAuthenticationWebflowUtils.getMultifactorAuthenticationWebflowCustomizers(applicationContext));\n+                    cfg.setOrder(WEBFLOW_CONFIGURER_ORDER + 1);\n+                    return cfg;\n+                })\n+                .otherwiseProxy()\n+                .get();\n         }\n \n         @Bean\n-        @Autowired\n+        @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n         public CasWebflowExecutionPlanConfigurer inweboMultifactorTrustCasWebflowExecutionPlanConfigurer(\n+            final ConfigurableApplicationContext applicationContext,\n             @Qualifier(\"inweboMultifactorTrustWebflowConfigurer\")\n             final CasWebflowConfigurer inweboMultifactorTrustWebflowConfigurer) {\n-            return plan -> plan.registerWebflowConfigurer(inweboMultifactorTrustWebflowConfigurer);\n+            return BeanSupplier.of(CasWebflowExecutionPlanConfigurer.class)\n+                .when(CONDITION.given(applicationContext.getEnvironment()))\n+                .supply(() -> plan -> plan.registerWebflowConfigurer(inweboMultifactorTrustWebflowConfigurer))\n+                .otherwiseProxy()\n+                .get();\n         }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "d27c0563ff11435820212743298476cd42724493", "committedDate": "2021-03-17 09:17:54 +0400", "message": "Programmatic checking of transition validity in MFA flows (#5082)"}, {"oid": "16ed59705020963648c696025eae2ebdad08b8a1", "committedDate": "2021-03-27 15:20:45 +0400", "message": "clean up mfa webflow context assembly"}, {"oid": "639ae0d36c8876204652876558007899a7123547", "committedDate": "2021-05-26 12:44:44 +0400", "message": "use conditional annotation to enable trusted devices for mfa"}, {"oid": "b16f67654be9705f5c752b477415cb76611f0628", "committedDate": "2021-09-25 19:51:07 +0400", "message": "cleaning up config injectons"}, {"oid": "ac6a938ab2b7d201a2b22cf7287cbad2c75209c7", "committedDate": "2021-09-28 14:36:43 +0400", "message": "cleaning up config injectons"}, {"oid": "0c5a92862c03793a92d1929cd30de9c05c14e099", "committedDate": "2021-09-29 15:08:12 +0400", "message": "cleaning up config injectons"}, {"oid": "a36b65e597449ec7070e9e29c67083f4427c9a43", "committedDate": "2021-09-30 17:55:16 +0400", "message": "set proxy mode for refresh-scope"}, {"oid": "1f4a958eb9cac4836c6345e03ddb25b042330c6c", "committedDate": "2021-10-05 15:31:47 +0400", "message": "cleaning up config injectons with proxies disabled"}, {"oid": "87829c8b79109e1e400e07487a3c7c094140ba5a", "committedDate": "2021-10-28 16:20:55 +0400", "message": "remove autowired annotations from bean methods"}, {"oid": "82c2fac7d7e3ec18223d2d61e99d9fd22549a39f", "committedDate": "2021-11-16 11:58:48 +0400", "message": "clean up names for config classes"}, {"oid": "26c56e3f868aae57b2ecae53eb0066f518616c5c", "committedDate": "2022-02-28 10:47:09 +0400", "message": "allow force-reload beans on refresh requests"}, {"oid": "8673cbba6f408b71751be7e0700b5b3a9a663004", "committedDate": "2022-02-28 10:47:15 +0400", "message": "fix build issues"}, {"oid": "9366a3a5f704101f2300aa3778ff3737654bab5b", "committedDate": "2022-03-01 17:03:33 +0400", "message": "reorg conditionals for trusted devices"}, {"oid": "ffdfcb31d6bf3916a2348e7ae1f616fa0694e388", "committedDate": "2022-03-29 12:07:22 +0400", "message": "build support for several more feature modules"}, {"oid": "cfe1086eb2c629242f27ceeff7a571a4c2573191", "committedDate": "2022-04-22 19:49:18 +0400", "message": "make sure all swf actions are conditionally defined"}, {"oid": "8743c2fbdf2290a3a6138c099efd991fe85fb76a", "committedDate": "2022-04-24 20:03:42 +0400", "message": "convert spring configurations to auto-configuration"}, {"oid": "62dba8f9242928b4364f11ce6414cd47c7af65a6", "committedDate": "2022-06-25 19:46:14 +0400", "message": "re-org feature catalog; keep track of known features"}, {"oid": "e59ebba20285cd5712c67f5fc99383aa825e29c7", "committedDate": "2022-07-08 21:20:22 +0200", "message": "simplify annotations construction"}, {"oid": "146841de193991f13f4666446443e9655b675bf5", "committedDate": "2023-04-26 18:30:32 +0400", "message": "move auto-config components into a consistent hierarchy"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODM0NQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534758345", "body": "It's not clear if this method is overriding something from the parent class? If not, why not mark this as a static method? ", "bodyText": "It's not clear if this method is overriding something from the parent class? If not, why not mark this as a static method?", "bodyHTML": "<p dir=\"auto\">It's not clear if this method is overriding something from the parent class? If not, why not mark this as a static method?</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:56:10Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearch;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.soap.LoginSearchResult;\n+\n+import lombok.val;\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+/**\n+ * The Inwebo SOAP client for user management.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class ConsoleAdmin extends WebServiceGatewaySupport {\n+\n+    public LoginSearchResult loginSearch(final String login, final long serviceId) {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3MjA0Mg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537372042", "bodyText": "I can't mark it as static as I use the getWebServiceTemplate() parent method.", "author": "leleuj", "createdAt": "2020-12-07T09:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1ODM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboConsoleAdmin.java\nsimilarity index 93%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboConsoleAdmin.java\nindex 89ef18d24e..9e0b4b89d9 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboConsoleAdmin.java\n", "chunk": "@@ -13,7 +13,7 @@ import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n  * @author Jerome LELEU\n  * @since 6.4.0\n  */\n-public class ConsoleAdmin extends WebServiceGatewaySupport {\n+public class InweboConsoleAdmin extends WebServiceGatewaySupport {\n \n     public LoginSearchResult loginSearch(final String login, final long serviceId) {\n         val loginSearch = new LoginSearch();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboConsoleAdmin.java\nsimilarity index 93%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboConsoleAdmin.java\nindex 89ef18d24e..9e0b4b89d9 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/ConsoleAdmin.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboConsoleAdmin.java\n", "chunk": "@@ -13,7 +13,7 @@ import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n  * @author Jerome LELEU\n  * @since 6.4.0\n  */\n-public class ConsoleAdmin extends WebServiceGatewaySupport {\n+public class InweboConsoleAdmin extends WebServiceGatewaySupport {\n \n     public LoginSearchResult loginSearch(final String login, final long serviceId) {\n         val loginSearch = new LoginSearch();\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1OTE2OA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534759168", "body": "Mark as static, and make sure you're finding/registering jackson modules as other instances of mapper do.", "bodyText": "Mark as static, and make sure you're finding/registering jackson modules as other instances of mapper do.", "bodyHTML": "<p dir=\"auto\">Mark as static, and make sure you're finding/registering jackson modules as other instances of mapper do.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:56:39Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM3OTE1Mw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537379153", "bodyText": "Yes, I will change that.", "author": "leleuj", "createdAt": "2020-12-07T10:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1OTE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8feaff248a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -38,8 +38,6 @@ public class InweboService {\n \n     private SSLContext context;\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n-\n     public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n         this.casProperties = casProperties;\n         this.consoleAdmin = consoleAdmin;\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8feaff248a..cdc3c59a5f 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -44,7 +45,7 @@ public class InweboService {\n \n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n         try {\n-            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n             this.context = SSLContext.getInstance(\"TLS\");\n             context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n         } catch (final Exception e) {\n", "next_change": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex cdc3c59a5f..ed5117e983 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -53,10 +53,10 @@ public class InweboService {\n         }\n     }\n \n-    public LoginSearchResponse loginSearch(final String login) {\n+    public InweboLoginSearchResponse loginSearch(final String login) {\n         val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n         val err = soap.getErr();\n-        val response = (LoginSearchResponse) buildResponse(new LoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n         if (response.isOk()) {\n             val count = soap.getCount();\n             response.setCount(count);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8f08434bbe 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -30,23 +29,23 @@ import java.nio.charset.StandardCharsets;\n @Slf4j\n public class InweboService {\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n+\n     private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n \n     private final CasConfigurationProperties casProperties;\n \n-    private final ConsoleAdmin consoleAdmin;\n+    private final InweboConsoleAdmin consoleAdmin;\n \n     private SSLContext context;\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n-\n-    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+    public InweboService(final CasConfigurationProperties casProperties, final InweboConsoleAdmin consoleAdmin) {\n         this.casProperties = casProperties;\n         this.consoleAdmin = consoleAdmin;\n \n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n         try {\n-            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n             this.context = SSLContext.getInstance(\"TLS\");\n             context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n         } catch (final Exception e) {\n", "next_change": {"commit": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8f08434bbe..9350fed9df 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -27,36 +29,45 @@ import java.net.URL;\n  * @since 6.4.0\n  */\n @Slf4j\n+@RequiredArgsConstructor\n+@Getter\n public class InweboService {\n \n     private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n \n-    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n-\n     private final CasConfigurationProperties casProperties;\n \n     private final InweboConsoleAdmin consoleAdmin;\n \n-    private SSLContext context;\n-\n-    public InweboService(final CasConfigurationProperties casProperties, final InweboConsoleAdmin consoleAdmin) {\n-        this.casProperties = casProperties;\n-        this.consoleAdmin = consoleAdmin;\n+    private final SSLContext context;\n \n-        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        try {\n-            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n-            this.context = SSLContext.getInstance(\"TLS\");\n-            context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n-        } catch (final Exception e) {\n-            throw new RuntimeException(\"Cannot initialize Inwebo service\", e);\n+    /**\n+     * Retrieve device name.\n+     *\n+     * @param json     the json\n+     * @param response the response\n+     */\n+    protected static void retrieveDeviceName(final JsonNode json,\n+                                             final InweboDeviceNameResponse response) {\n+        if (response.isOk()) {\n+            val name = json.get(\"name\");\n+            if (name != null) {\n+                response.setDeviceName(name.asText());\n+            }\n         }\n     }\n \n+    /**\n+     * Login search.\n+     *\n+     * @param login the login\n+     * @return the inwebo login search response\n+     */\n     public InweboLoginSearchResponse loginSearch(final String login) {\n-        val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n+        val soap = consoleAdmin.loginSearch(login);\n         val err = soap.getErr();\n-        val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(),\n+            \"loginSearch(\" + login + ')', err);\n         if (response.isOk()) {\n             val count = soap.getCount();\n             response.setCount(count);\n", "next_change": {"commit": "ead77cb9711d70b5039751c614c0fc2d84c170f8", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 9350fed9df..e174088c43 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -58,23 +51,42 @@ public class InweboService {\n     }\n \n     /**\n-     * Login search.\n+     * Login search and query.\n      *\n      * @param login the login\n-     * @return the inwebo login search response\n+     * @return the inwebo login search/query response\n      */\n-    public InweboLoginSearchResponse loginSearch(final String login) {\n-        val soap = consoleAdmin.loginSearch(login);\n-        val err = soap.getErr();\n+    public InweboLoginSearchResponse loginSearchQuery(final String login) {\n+        val loginSearchResult = consoleAdmin.loginSearch(login);\n+        val err = loginSearchResult.getErr();\n         val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(),\n-            \"loginSearch(\" + login + ')', err);\n+                \"loginSearch(\" + login + ')', err);\n         if (response.isOk()) {\n-            val count = soap.getCount();\n+            val count = loginSearchResult.getCount();\n             response.setCount(count);\n             if (count == 1) {\n-                response.setUserId(soap.getId().get(0));\n-                response.setUserStatus(soap.getStatus().get(0));\n-                response.setActivationStatus(soap.getActivationStatus().get(0));\n+                var activationStatus = loginSearchResult.getActivationStatus().get(0);\n+                val userId = loginSearchResult.getId().get(0);\n+                if (activationStatus == 1) {\n+                    val loginQueryResult = consoleAdmin.loginQuery(userId);\n+                    if (\"OK\".equals(loginQueryResult.getErr())) {\n+                        var hasAuthenticator = false;\n+                        for (val maname : loginQueryResult.getManame()) {\n+                            if (maname.contains(\"Authenticator\")) {\n+                                hasAuthenticator = true;\n+                                break;\n+                            }\n+                        }\n+                        if (!hasAuthenticator) {\n+                            activationStatus = BROWSER_AUTHENTICATION_STATUS;\n+                        } else if (loginQueryResult.getManame().size() > 2) {\n+                            activationStatus = PUSH_AND_BROWSER_AUTHENTICATION_STATUS;\n+                        }\n+                    }\n+                }\n+                response.setUserId(userId);\n+                response.setUserStatus(loginSearchResult.getStatus().get(0));\n+                response.setActivationStatus(activationStatus);\n             }\n         }\n         return response;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "f5d3ea4033de868ae3b5437f78df04765eb38e7d", "committedDate": "2021-01-09 19:20:27 +0400", "message": "clean up javadoc"}, {"oid": "bca6c8d2072497c04b226baa2e5051a9da7a3e54", "committedDate": "2021-01-24 14:13:41 +0400", "message": "refactor rest api; support bearer tokens"}, {"oid": "75a2fe8fda6134f1434939e9f806d0cfdd4aad57", "committedDate": "2022-03-17 16:13:32 +0400", "message": "fix tests"}, {"oid": "8569a4a08ed42ec2cea34a877d240e32d92e5210", "committedDate": "2022-03-17 21:37:14 +0400", "message": "fix oidc tests"}, {"oid": "8d87a5ea2ef06fe932c77a4abbd35da13f1de573", "committedDate": "2022-09-09 17:57:38 +0400", "message": "initial conversion to records - #3"}, {"oid": "ead77cb9711d70b5039751c614c0fc2d84c170f8", "committedDate": "2022-10-19 10:23:08 +0400", "message": "Update Inwebo MFA support (#5531)"}, {"oid": "772852d38d0aca5409e680a8549f6593c9e5ce57", "committedDate": "2022-11-18 17:02:30 +0400", "message": "Merge branch 'master' into boot3"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MDA2MQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534760061", "body": "SSLContext should not be constructed manually, but should be obtained from the runtime; there is one already available for you.", "bodyText": "SSLContext should not be constructed manually, but should be obtained from the runtime; there is one already available for you.", "bodyHTML": "<p dir=\"auto\">SSLContext should not be constructed manually, but should be obtained from the runtime; there is one already available for you.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:57:10Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMTg3NA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537411874", "bodyText": "This is my specific SSLContext with my specific client certificate for Inwebo. This is why I build it manually.\nI can't re-use the default one nor change the default one.", "author": "leleuj", "createdAt": "2020-12-07T10:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MDA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8feaff248a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -30,6 +28,8 @@ import java.nio.charset.StandardCharsets;\n @Slf4j\n public class InweboService {\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n+\n     private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n \n     private final CasConfigurationProperties casProperties;\n", "next_change": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8feaff248a..ed5117e983 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -34,17 +35,17 @@ public class InweboService {\n \n     private final CasConfigurationProperties casProperties;\n \n-    private final ConsoleAdmin consoleAdmin;\n+    private final InweboConsoleAdmin consoleAdmin;\n \n     private SSLContext context;\n \n-    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+    public InweboService(final CasConfigurationProperties casProperties, final InweboConsoleAdmin consoleAdmin) {\n         this.casProperties = casProperties;\n         this.consoleAdmin = consoleAdmin;\n \n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n         try {\n-            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n             this.context = SSLContext.getInstance(\"TLS\");\n             context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n         } catch (final Exception e) {\n", "next_change": null}]}}, {"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8feaff248a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -38,8 +38,6 @@ public class InweboService {\n \n     private SSLContext context;\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n-\n     public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n         this.casProperties = casProperties;\n         this.consoleAdmin = consoleAdmin;\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8feaff248a..cdc3c59a5f 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -44,7 +45,7 @@ public class InweboService {\n \n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n         try {\n-            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n             this.context = SSLContext.getInstance(\"TLS\");\n             context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n         } catch (final Exception e) {\n", "next_change": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex cdc3c59a5f..ed5117e983 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -53,10 +53,10 @@ public class InweboService {\n         }\n     }\n \n-    public LoginSearchResponse loginSearch(final String login) {\n+    public InweboLoginSearchResponse loginSearch(final String login) {\n         val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n         val err = soap.getErr();\n-        val response = (LoginSearchResponse) buildResponse(new LoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n         if (response.isOk()) {\n             val count = soap.getCount();\n             response.setCount(count);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8f08434bbe 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -30,23 +29,23 @@ import java.nio.charset.StandardCharsets;\n @Slf4j\n public class InweboService {\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n+\n     private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n \n     private final CasConfigurationProperties casProperties;\n \n-    private final ConsoleAdmin consoleAdmin;\n+    private final InweboConsoleAdmin consoleAdmin;\n \n     private SSLContext context;\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n-\n-    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+    public InweboService(final CasConfigurationProperties casProperties, final InweboConsoleAdmin consoleAdmin) {\n         this.casProperties = casProperties;\n         this.consoleAdmin = consoleAdmin;\n \n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n         try {\n-            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n             this.context = SSLContext.getInstance(\"TLS\");\n             context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n         } catch (final Exception e) {\n", "next_change": {"commit": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8f08434bbe..9350fed9df 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -27,36 +29,45 @@ import java.net.URL;\n  * @since 6.4.0\n  */\n @Slf4j\n+@RequiredArgsConstructor\n+@Getter\n public class InweboService {\n \n     private static final ObjectMapper MAPPER = new ObjectMapper().findAndRegisterModules();\n \n-    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n-\n     private final CasConfigurationProperties casProperties;\n \n     private final InweboConsoleAdmin consoleAdmin;\n \n-    private SSLContext context;\n-\n-    public InweboService(final CasConfigurationProperties casProperties, final InweboConsoleAdmin consoleAdmin) {\n-        this.casProperties = casProperties;\n-        this.consoleAdmin = consoleAdmin;\n+    private final SSLContext context;\n \n-        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        try {\n-            val keyManagerFactory = SSLUtils.buildKeystore(inwebo.getClientCertificate());\n-            this.context = SSLContext.getInstance(\"TLS\");\n-            context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n-        } catch (final Exception e) {\n-            throw new RuntimeException(\"Cannot initialize Inwebo service\", e);\n+    /**\n+     * Retrieve device name.\n+     *\n+     * @param json     the json\n+     * @param response the response\n+     */\n+    protected static void retrieveDeviceName(final JsonNode json,\n+                                             final InweboDeviceNameResponse response) {\n+        if (response.isOk()) {\n+            val name = json.get(\"name\");\n+            if (name != null) {\n+                response.setDeviceName(name.asText());\n+            }\n         }\n     }\n \n+    /**\n+     * Login search.\n+     *\n+     * @param login the login\n+     * @return the inwebo login search response\n+     */\n     public InweboLoginSearchResponse loginSearch(final String login) {\n-        val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n+        val soap = consoleAdmin.loginSearch(login);\n         val err = soap.getErr();\n-        val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(),\n+            \"loginSearch(\" + login + ')', err);\n         if (response.isOk()) {\n             val count = soap.getCount();\n             response.setCount(count);\n", "next_change": {"commit": "ead77cb9711d70b5039751c614c0fc2d84c170f8", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 9350fed9df..e174088c43 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -58,23 +51,42 @@ public class InweboService {\n     }\n \n     /**\n-     * Login search.\n+     * Login search and query.\n      *\n      * @param login the login\n-     * @return the inwebo login search response\n+     * @return the inwebo login search/query response\n      */\n-    public InweboLoginSearchResponse loginSearch(final String login) {\n-        val soap = consoleAdmin.loginSearch(login);\n-        val err = soap.getErr();\n+    public InweboLoginSearchResponse loginSearchQuery(final String login) {\n+        val loginSearchResult = consoleAdmin.loginSearch(login);\n+        val err = loginSearchResult.getErr();\n         val response = (InweboLoginSearchResponse) buildResponse(new InweboLoginSearchResponse(),\n-            \"loginSearch(\" + login + ')', err);\n+                \"loginSearch(\" + login + ')', err);\n         if (response.isOk()) {\n-            val count = soap.getCount();\n+            val count = loginSearchResult.getCount();\n             response.setCount(count);\n             if (count == 1) {\n-                response.setUserId(soap.getId().get(0));\n-                response.setUserStatus(soap.getStatus().get(0));\n-                response.setActivationStatus(soap.getActivationStatus().get(0));\n+                var activationStatus = loginSearchResult.getActivationStatus().get(0);\n+                val userId = loginSearchResult.getId().get(0);\n+                if (activationStatus == 1) {\n+                    val loginQueryResult = consoleAdmin.loginQuery(userId);\n+                    if (\"OK\".equals(loginQueryResult.getErr())) {\n+                        var hasAuthenticator = false;\n+                        for (val maname : loginQueryResult.getManame()) {\n+                            if (maname.contains(\"Authenticator\")) {\n+                                hasAuthenticator = true;\n+                                break;\n+                            }\n+                        }\n+                        if (!hasAuthenticator) {\n+                            activationStatus = BROWSER_AUTHENTICATION_STATUS;\n+                        } else if (loginQueryResult.getManame().size() > 2) {\n+                            activationStatus = PUSH_AND_BROWSER_AUTHENTICATION_STATUS;\n+                        }\n+                    }\n+                }\n+                response.setUserId(userId);\n+                response.setUserStatus(loginSearchResult.getStatus().get(0));\n+                response.setActivationStatus(activationStatus);\n             }\n         }\n         return response;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "f5d3ea4033de868ae3b5437f78df04765eb38e7d", "committedDate": "2021-01-09 19:20:27 +0400", "message": "clean up javadoc"}, {"oid": "bca6c8d2072497c04b226baa2e5051a9da7a3e54", "committedDate": "2021-01-24 14:13:41 +0400", "message": "refactor rest api; support bearer tokens"}, {"oid": "75a2fe8fda6134f1434939e9f806d0cfdd4aad57", "committedDate": "2022-03-17 16:13:32 +0400", "message": "fix tests"}, {"oid": "8569a4a08ed42ec2cea34a877d240e32d92e5210", "committedDate": "2022-03-17 21:37:14 +0400", "message": "fix oidc tests"}, {"oid": "8d87a5ea2ef06fe932c77a4abbd35da13f1de573", "committedDate": "2022-09-09 17:57:38 +0400", "message": "initial conversion to records - #3"}, {"oid": "ead77cb9711d70b5039751c614c0fc2d84c170f8", "committedDate": "2022-10-19 10:23:08 +0400", "message": "Update Inwebo MFA support (#5531)"}, {"oid": "772852d38d0aca5409e680a8549f6593c9e5ce57", "committedDate": "2022-11-18 17:02:30 +0400", "message": "Merge branch 'master' into boot3"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MTY1NQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534761655", "body": "Possible to use a URL builder to avoid string-concatenation and encoding params manually? ", "bodyText": "Possible to use a URL builder to avoid string-concatenation and encoding params manually?", "bodyHTML": "<p dir=\"auto\">Possible to use a URL builder to avoid string-concatenation and encoding params manually?</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:58:15Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.response.AbstractResponse;\n+import org.apereo.cas.support.inwebo.service.response.DeviceNameResponse;\n+import org.apereo.cas.support.inwebo.service.response.LoginSearchResponse;\n+import org.apereo.cas.support.inwebo.service.response.PushAuthenticateResponse;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.util.RandomUtils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * The Inwebo service.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Slf4j\n+public class InweboService {\n+\n+    private static final String API_URL = \"https://api.myinwebo.com/FS?\";\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    private final ConsoleAdmin consoleAdmin;\n+\n+    private SSLContext context;\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public InweboService(final CasConfigurationProperties casProperties, final ConsoleAdmin consoleAdmin) {\n+        this.casProperties = casProperties;\n+        this.consoleAdmin = consoleAdmin;\n+\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        try {\n+            val keyManagerFactory = SSLUtil.buildKeystore(inwebo);\n+            this.context = SSLContext.getInstance(\"TLS\");\n+            context.init(keyManagerFactory.getKeyManagers(), null, RandomUtils.getNativeInstance());\n+        } catch (final Exception e) {\n+            throw new RuntimeException(\"Cannot initialize Inwebo service\", e);\n+        }\n+    }\n+\n+    public LoginSearchResponse loginSearch(final String login) {\n+        val soap = consoleAdmin.loginSearch(login, casProperties.getAuthn().getMfa().getInwebo().getServiceId());\n+        val err = soap.getErr();\n+        val response = (LoginSearchResponse) buildResponse(new LoginSearchResponse(), \"loginSearch(\" + login + \")\", err);\n+        if (response.isOk()) {\n+            val count = soap.getCount();\n+            response.setCount(count);\n+            if (count == 1) {\n+                response.setUserId(soap.getId().get(0));\n+                response.setUserStatus(soap.getStatus().get(0));\n+                response.setActivationStatus(soap.getActivationStatus().get(0));\n+            }\n+        }\n+        return response;\n+    }\n+\n+    public PushAuthenticateResponse pushAuthenticate(final String login) {\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        val url = API_URL + \"action=pushAuthenticate\"\n+                + \"&serviceId=\" + URLEncoder.encode(StringUtils.EMPTY + inwebo.getServiceId(), StandardCharsets.UTF_8)\n+                + \"&userId=\" + URLEncoder.encode(login, StandardCharsets.UTF_8)\n+                + \"&format=json\";", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyMDQzNg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537420436", "bodyText": "OK. I will use the Spring UriComponentsBuilder.", "author": "leleuj", "createdAt": "2020-12-07T11:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MTY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8feaff248a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -72,10 +70,12 @@ public class InweboService {\n \n     public PushAuthenticateResponse pushAuthenticate(final String login) {\n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        val url = API_URL + \"action=pushAuthenticate\"\n-                + \"&serviceId=\" + URLEncoder.encode(StringUtils.EMPTY + inwebo.getServiceId(), StandardCharsets.UTF_8)\n-                + \"&userId=\" + URLEncoder.encode(login, StandardCharsets.UTF_8)\n-                + \"&format=json\";\n+        val url = UriComponentsBuilder.fromHttpUrl(API_URL)\n+                .queryParam(\"action\", \"pushAuthenticate\")\n+                .queryParam(\"serviceId\", inwebo.getServiceId())\n+                .queryParam(\"userId\", login)\n+                .queryParam(\"format\", \"json\")\n+                .toUriString();\n \n         val json = call(url);\n         val err = json.get(\"err\").asText(\"OK\");\n", "next_change": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8feaff248a..ed5117e983 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -79,7 +80,7 @@ public class InweboService {\n \n         val json = call(url);\n         val err = json.get(\"err\").asText(\"OK\");\n-        val response = (PushAuthenticateResponse) buildResponse(new PushAuthenticateResponse(), \"pushAuthenticate(\" + login + \")\", err);\n+        val response = (InweboPushAuthenticateResponse) buildResponse(new InweboPushAuthenticateResponse(), \"pushAuthenticate(\" + login + \")\", err);\n         if (response.isOk()) {\n             val sessionId = json.get(\"sessionId\");\n             if (sessionId != null) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 461032a12d..8f08434bbe 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -70,16 +69,18 @@ public class InweboService {\n         return response;\n     }\n \n-    public PushAuthenticateResponse pushAuthenticate(final String login) {\n+    public InweboPushAuthenticateResponse pushAuthenticate(final String login) {\n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        val url = API_URL + \"action=pushAuthenticate\"\n-                + \"&serviceId=\" + URLEncoder.encode(StringUtils.EMPTY + inwebo.getServiceId(), StandardCharsets.UTF_8)\n-                + \"&userId=\" + URLEncoder.encode(login, StandardCharsets.UTF_8)\n-                + \"&format=json\";\n+        val url = UriComponentsBuilder.fromHttpUrl(API_URL)\n+                .queryParam(\"action\", \"pushAuthenticate\")\n+                .queryParam(\"serviceId\", inwebo.getServiceId())\n+                .queryParam(\"userId\", login)\n+                .queryParam(\"format\", \"json\")\n+                .toUriString();\n \n         val json = call(url);\n         val err = json.get(\"err\").asText(\"OK\");\n-        val response = (PushAuthenticateResponse) buildResponse(new PushAuthenticateResponse(), \"pushAuthenticate(\" + login + \")\", err);\n+        val response = (InweboPushAuthenticateResponse) buildResponse(new InweboPushAuthenticateResponse(), \"pushAuthenticate(\" + login + \")\", err);\n         if (response.isOk()) {\n             val sessionId = json.get(\"sessionId\");\n             if (sessionId != null) {\n", "next_change": {"commit": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 8f08434bbe..9350fed9df 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -69,18 +80,25 @@ public class InweboService {\n         return response;\n     }\n \n+    /**\n+     * Push authenticate.\n+     *\n+     * @param login the login\n+     * @return the inwebo push authenticate response\n+     */\n     public InweboPushAuthenticateResponse pushAuthenticate(final String login) {\n         val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        val url = UriComponentsBuilder.fromHttpUrl(API_URL)\n-                .queryParam(\"action\", \"pushAuthenticate\")\n-                .queryParam(\"serviceId\", inwebo.getServiceId())\n-                .queryParam(\"userId\", login)\n-                .queryParam(\"format\", \"json\")\n-                .toUriString();\n+        val url = UriComponentsBuilder.fromHttpUrl(inwebo.getServiceApiUrl())\n+            .queryParam(\"action\", \"pushAuthenticate\")\n+            .queryParam(\"serviceId\", inwebo.getServiceId())\n+            .queryParam(\"userId\", login)\n+            .queryParam(\"format\", \"json\")\n+            .toUriString();\n \n         val json = call(url);\n         val err = json.get(\"err\").asText(\"OK\");\n-        val response = (InweboPushAuthenticateResponse) buildResponse(new InweboPushAuthenticateResponse(), \"pushAuthenticate(\" + login + \")\", err);\n+        val response = (InweboPushAuthenticateResponse) buildResponse(\n+            new InweboPushAuthenticateResponse(), \"pushAuthenticate(\" + login + ')', err);\n         if (response.isOk()) {\n             val sessionId = json.get(\"sessionId\");\n             if (sessionId != null) {\n", "next_change": {"commit": "8569a4a08ed42ec2cea34a877d240e32d92e5210", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\nindex 9350fed9df..53ccb89ada 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/InweboService.java\n", "chunk": "@@ -87,25 +88,27 @@ public class InweboService {\n      * @return the inwebo push authenticate response\n      */\n     public InweboPushAuthenticateResponse pushAuthenticate(final String login) {\n-        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n-        val url = UriComponentsBuilder.fromHttpUrl(inwebo.getServiceApiUrl())\n-            .queryParam(\"action\", \"pushAuthenticate\")\n-            .queryParam(\"serviceId\", inwebo.getServiceId())\n-            .queryParam(\"userId\", login)\n-            .queryParam(\"format\", \"json\")\n-            .toUriString();\n-\n-        val json = call(url);\n-        val err = json.get(\"err\").asText(\"OK\");\n-        val response = (InweboPushAuthenticateResponse) buildResponse(\n-            new InweboPushAuthenticateResponse(), \"pushAuthenticate(\" + login + ')', err);\n-        if (response.isOk()) {\n-            val sessionId = json.get(\"sessionId\");\n-            if (sessionId != null) {\n-                response.setSessionId(sessionId.asText());\n+        return FunctionUtils.doUnchecked(() -> {\n+            val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+            val url = UriComponentsBuilder.fromHttpUrl(inwebo.getServiceApiUrl())\n+                .queryParam(\"action\", \"pushAuthenticate\")\n+                .queryParam(\"serviceId\", inwebo.getServiceId())\n+                .queryParam(\"userId\", login)\n+                .queryParam(\"format\", \"json\")\n+                .toUriString();\n+\n+            val json = call(url);\n+            val err = json.get(\"err\").asText(\"OK\");\n+            val response = (InweboPushAuthenticateResponse) buildResponse(\n+                new InweboPushAuthenticateResponse(), \"pushAuthenticate(\" + login + ')', err);\n+            if (response.isOk()) {\n+                val sessionId = json.get(\"sessionId\");\n+                if (sessionId != null) {\n+                    response.setSessionId(sessionId.asText());\n+                }\n             }\n-        }\n-        return response;\n+            return response;\n+        });\n     }\n \n     /**\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}, {"oid": "decb82ddad059b2121c1b7b2fdae33fd30ddd610", "committedDate": "2021-01-06 16:37:48 +0400", "message": "clean up"}, {"oid": "f5d3ea4033de868ae3b5437f78df04765eb38e7d", "committedDate": "2021-01-09 19:20:27 +0400", "message": "clean up javadoc"}, {"oid": "bca6c8d2072497c04b226baa2e5051a9da7a3e54", "committedDate": "2021-01-24 14:13:41 +0400", "message": "refactor rest api; support bearer tokens"}, {"oid": "75a2fe8fda6134f1434939e9f806d0cfdd4aad57", "committedDate": "2022-03-17 16:13:32 +0400", "message": "fix tests"}, {"oid": "8569a4a08ed42ec2cea34a877d240e32d92e5210", "committedDate": "2022-03-17 21:37:14 +0400", "message": "fix oidc tests"}, {"oid": "8d87a5ea2ef06fe932c77a4abbd35da13f1de573", "committedDate": "2022-09-09 17:57:38 +0400", "message": "initial conversion to records - #3"}, {"oid": "ead77cb9711d70b5039751c614c0fc2d84c170f8", "committedDate": "2022-10-19 10:23:08 +0400", "message": "Update Inwebo MFA support (#5531)"}, {"oid": "772852d38d0aca5409e680a8549f6593c9e5ce57", "committedDate": "2022-11-18 17:02:30 +0400", "message": "Merge branch 'master' into boot3"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MzI3OA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534763278", "body": "If this is necessary, it feels like something that can be moved to a Utils class somewhere in the util module.", "bodyText": "If this is necessary, it feels like something that can be moved to a Utils class somewhere in the util module.", "bodyHTML": "<p dir=\"auto\">If this is necessary, it feels like something that can be moved to a Utils class somewhere in the util module.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T06:59:22Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apereo.cas.support.inwebo.service;\n+\n+import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n+\n+import lombok.val;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+\n+/**\n+ * An SSL utility class to use a client certificate.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SSLUtil {\n+\n+    public static KeyManagerFactory buildKeystore(final InweboMultifactorProperties properties) throws Exception {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MzI3MA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537443270", "bodyText": "I created a api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/util/ClientCertificateProperties.java and core/cas-server-core-util-api/src/main/java/org/apereo/cas/util/ssl/SSLUtils.java", "author": "leleuj", "createdAt": "2020-12-07T11:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2MzI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "680ad270cb61efeafa2e71a6910bfdf508626a0d", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\nindex e9855f529c..9a7d99b3e9 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\n", "chunk": "@@ -20,7 +20,7 @@ public class SSLUtil {\n         val keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n         val keyStore = KeyStore.getInstance(\"PKCS12\");\n \n-        try (InputStream keyInput = properties.getClientCertificate().getInputStream()) {\n+        try (InputStream keyInput = properties.getClientCertificate().getLocation().getInputStream()) {\n             keyStore.load(keyInput, properties.getCertificatePassphrase().toCharArray());\n \n             keyInput.close();\n", "next_change": {"commit": "c2df31d4ff51b8443d9fcf25416580a32370e685", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\ndeleted file mode 100644\nindex 9a7d99b3e9..0000000000\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,31 +0,0 @@\n-package org.apereo.cas.support.inwebo.service;\n-\n-import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n-\n-import lombok.val;\n-\n-import javax.net.ssl.KeyManagerFactory;\n-import java.io.InputStream;\n-import java.security.KeyStore;\n-\n-/**\n- * An SSL utility class to use a client certificate.\n- *\n- * @author Jerome LELEU\n- * @since 6.4.0\n- */\n-public class SSLUtil {\n-\n-    public static KeyManagerFactory buildKeystore(final InweboMultifactorProperties properties) throws Exception {\n-        val keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-        val keyStore = KeyStore.getInstance(\"PKCS12\");\n-\n-        try (InputStream keyInput = properties.getClientCertificate().getLocation().getInputStream()) {\n-            keyStore.load(keyInput, properties.getCertificatePassphrase().toCharArray());\n-\n-            keyInput.close();\n-            keyManagerFactory.init(keyStore, properties.getCertificatePassphrase().toCharArray());\n-        }\n-        return keyManagerFactory;\n-    }\n-}\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\ndeleted file mode 100644\nindex e9855f529c..0000000000\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/SSLUtil.java\n+++ /dev/null\n", "chunk": "@@ -1,31 +0,0 @@\n-package org.apereo.cas.support.inwebo.service;\n-\n-import org.apereo.cas.configuration.model.support.mfa.InweboMultifactorProperties;\n-\n-import lombok.val;\n-\n-import javax.net.ssl.KeyManagerFactory;\n-import java.io.InputStream;\n-import java.security.KeyStore;\n-\n-/**\n- * An SSL utility class to use a client certificate.\n- *\n- * @author Jerome LELEU\n- * @since 6.4.0\n- */\n-public class SSLUtil {\n-\n-    public static KeyManagerFactory buildKeystore(final InweboMultifactorProperties properties) throws Exception {\n-        val keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n-        val keyStore = KeyStore.getInstance(\"PKCS12\");\n-\n-        try (InputStream keyInput = properties.getClientCertificate().getInputStream()) {\n-            keyStore.load(keyInput, properties.getCertificatePassphrase().toCharArray());\n-\n-            keyInput.close();\n-            keyManagerFactory.init(keyStore, properties.getCertificatePassphrase().toCharArray());\n-        }\n-        return keyManagerFactory;\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDQ2OQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534764469", "body": "Please make sure all model classes in the response or soap packages are prefixed with Inwebo. ", "bodyText": "Please make sure all model classes in the response or soap packages are prefixed with Inwebo.", "bodyHTML": "<p dir=\"auto\">Please make sure all model classes in the response or soap packages are prefixed with Inwebo.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:00:03Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.apereo.cas.support.inwebo.service.response;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * The abstract JSON response.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@Getter\n+@Setter\n+public abstract class AbstractResponse {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwMDcxNA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537500714", "bodyText": "Sure. I'd prefer keep the original names for the generated SOAP classes. They are already in a soap package.", "author": "leleuj", "createdAt": "2020-12-07T13:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NDQ2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractInweboResponse.java\nsimilarity index 66%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractInweboResponse.java\nindex e64a62fbde..43b7429b78 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractInweboResponse.java\n", "chunk": "@@ -11,11 +11,11 @@ import lombok.Setter;\n  */\n @Getter\n @Setter\n-public abstract class AbstractResponse {\n+public abstract class AbstractInweboResponse {\n \n-    private Result result;\n+    private InweboResult result;\n \n     public boolean isOk() {\n-        return result == Result.OK;\n+        return result == InweboResult.OK;\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractInweboResponse.java\nsimilarity index 66%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractInweboResponse.java\nindex e64a62fbde..43b7429b78 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractResponse.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/service/response/AbstractInweboResponse.java\n", "chunk": "@@ -11,11 +11,11 @@ import lombok.Setter;\n  */\n @Getter\n @Setter\n-public abstract class AbstractResponse {\n+public abstract class AbstractInweboResponse {\n \n-    private Result result;\n+    private InweboResult result;\n \n     public boolean isOk() {\n-        return result == Result.OK;\n+        return result == InweboResult.OK;\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534766341", "body": "Can be obtained from the request-context. Shouldn't have to pass it in? ", "bodyText": "Can be obtained from the request-context. Shouldn't have to pass it in?", "bodyHTML": "<p dir=\"auto\">Can be obtained from the request-context. Shouldn't have to pass it in?</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:01:16Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwMzk0OQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537503949", "bodyText": "I don't know how to do that. Can you elaborate? Thx", "author": "leleuj", "createdAt": "2020-12-07T13:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzODg4OA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539138888", "bodyText": "@mmoayyed This is one of the latest point if you can provide me some guidance on this...", "author": "leleuj", "createdAt": "2020-12-09T09:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE0NTMwMQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539145301", "bodyText": "Sorry I missed this.\nTo deal with the message bundles, you want to use \tRequestContext.getMessageContext which will give you a message-context that you can fetch messages or add messages via keys. This is specially the recommended choice for SWF actions; you shouldn't have to directly deal with the message source itself.", "author": "mmoayyed", "createdAt": "2020-12-09T09:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NDA5Mg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r539184092", "bodyText": "OK. Done. I have removed the injected MessageSource to use the requestContext.getMessageContext().", "author": "leleuj", "createdAt": "2020-12-09T10:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NjM0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 76%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..e42d3a292b 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -24,7 +24,7 @@ import org.springframework.webflow.execution.RequestContext;\n  */\n @RequiredArgsConstructor\n @Slf4j\n-public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+public class InweboCheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n \n     private final MessageSource messageSource;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 53%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..9cf04cbf0a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -24,9 +24,7 @@ import org.springframework.webflow.execution.RequestContext;\n  */\n @RequiredArgsConstructor\n @Slf4j\n-public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n-\n-    private final MessageSource messageSource;\n+public class InweboCheckAuthenticationAction extends AbstractAction {\n \n     private final InweboService service;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NzYyMw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534767623", "body": "You shouldn't need to implement a constants interface to use what's in it, unless it actually represents a type. Remove the clause, and use the constants directly with a qualified class name to be easy on the reader.", "bodyText": "You shouldn't need to implement a constants interface to use what's in it, unless it actually represents a type. Remove the clause, and use the constants directly with a qualified class name to be easy on the reader.", "bodyHTML": "<p dir=\"auto\">You shouldn't need to implement a constants interface to use what's in it, unless it actually represents a type. Remove the clause, and use the constants directly with a qualified class name to be easy on the reader.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:02:05Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNjQ0MA==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537506440", "bodyText": "OK. Will do.", "author": "leleuj", "createdAt": "2020-12-07T13:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2NzYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 76%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..e42d3a292b 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -24,7 +24,7 @@ import org.springframework.webflow.execution.RequestContext;\n  */\n @RequiredArgsConstructor\n @Slf4j\n-public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+public class InweboCheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n \n     private final MessageSource messageSource;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 53%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..9cf04cbf0a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -24,9 +24,7 @@ import org.springframework.webflow.execution.RequestContext;\n  */\n @RequiredArgsConstructor\n @Slf4j\n-public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n-\n-    private final MessageSource messageSource;\n+public class InweboCheckAuthenticationAction extends AbstractAction {\n \n     private final InweboService service;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2ODUzMQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534768531", "body": "Please make sure all webflow action classes are prefixes with Inwebo, similar to simple-mfa.", "bodyText": "Please make sure all webflow action classes are prefixes with Inwebo, similar to simple-mfa.", "bodyHTML": "<p dir=\"auto\">Please make sure all webflow action classes are prefixes with Inwebo, similar to simple-mfa.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:02:43Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwNjY1NQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537506655", "bodyText": "I think I already answered this one, but it's done.", "author": "leleuj", "createdAt": "2020-12-07T13:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2ODUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 57%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..0adc1851f3 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -2,7 +2,7 @@ package org.apereo.cas.support.inwebo.web.flow.actions;\n \n import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n import org.apereo.cas.support.inwebo.service.InweboService;\n-import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.support.inwebo.service.response.InweboResult;\n import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n import org.apereo.cas.web.support.WebUtils;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 53%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..9cf04cbf0a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -2,7 +2,7 @@ package org.apereo.cas.support.inwebo.web.flow.actions;\n \n import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n import org.apereo.cas.support.inwebo.service.InweboService;\n-import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.support.inwebo.service.response.InweboResult;\n import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n import org.apereo.cas.web.support.WebUtils;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTE4Nw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534769187", "body": "This should be a trace statement. Also please use `[{}]` for placeholders to be consistent.", "bodyText": "This should be a trace statement. Also please use [{}] for placeholders to be consistent.", "bodyHTML": "<p dir=\"auto\">This should be a trace statement. Also please use <code>[{}]</code> for placeholders to be consistent.</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:03:07Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODY2NQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537508665", "bodyText": "OK. Will change also.", "author": "leleuj", "createdAt": "2020-12-07T13:33:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "66874878ddfcd3f2af78c74b8bbe7c77370819fa", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nindex 0a567971bb..de1d989a31 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n", "chunk": "@@ -41,20 +41,21 @@ public class CheckAuthenticationAction extends AbstractAction implements Webflow\n         val flowScope = requestContext.getFlowScope();\n         val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n         if (StringUtils.isNotBlank(otp)) {\n-            val response = service.authenticateExtended(login, otp);\n-            if (response.isOk()) {\n-                val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n-                return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            }\n+            val credential = new InweboCredential(login);\n+            credential.setOtp(otp);\n+            LOGGER.debug(\"Received OTP: {} for login: {}\", otp, login);\n+            WebUtils.putCredential(requestContext, credential);\n+            return this.casWebflowEventResolver.resolveSingle(requestContext);\n         } else if (StringUtils.isNotBlank(sessionId)) {\n             val response = service.checkPushResult(login, sessionId);\n             val result = response.getResult();\n             if (response.isOk()) {\n                 val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                val credential = new InweboCredential(login);\n+                credential.setDeviceName(deviceName);\n+                credential.setAlreadyAuthenticated(true);\n+                LOGGER.debug(\"User: {} validated push for sessionId: {} and device: {}\", login, sessionId, deviceName);\n+                WebUtils.putCredential(requestContext, credential);\n                 return this.casWebflowEventResolver.resolveSingle(requestContext);\n             } else if (result == Result.WAITING) {\n                 LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");\n", "next_change": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 71%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex de1d989a31..0adc1851f3 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -54,16 +54,16 @@ public class CheckAuthenticationAction extends AbstractAction implements Webflow\n                 val credential = new InweboCredential(login);\n                 credential.setDeviceName(deviceName);\n                 credential.setAlreadyAuthenticated(true);\n-                LOGGER.debug(\"User: {} validated push for sessionId: {} and device: {}\", login, sessionId, deviceName);\n+                LOGGER.debug(\"User: [{}] validated push for sessionId: [{}] and device: [{}]\", login, sessionId, deviceName);\n                 WebUtils.putCredential(requestContext, credential);\n                 return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            } else if (result == Result.WAITING) {\n-                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");\n-                return getEventFactorySupport().event(this, PENDING);\n+            } else if (result == InweboResult.WAITING) {\n+                LOGGER.trace(\"Waiting for user to validate on mobile/desktop\");\n+                return getEventFactorySupport().event(this, WebflowConstants.PENDING);\n             } else {\n-                LOGGER.debug(\"Validation fails: {}\", result);\n-                if (result == Result.REFUSED || result == Result.TIMEOUT) {\n-                    flowScope.put(INWEBO_ERROR_MESSAGE,\n+                LOGGER.debug(\"Validation fails: [{}]\", result);\n+                if (result == InweboResult.REFUSED || result == InweboResult.TIMEOUT) {\n+                    flowScope.put(WebflowConstants.INWEBO_ERROR_MESSAGE,\n                             messageSource.getMessage(\"cas.inwebo.error.userrefusedortoolate\", null, LocaleContextHolder.getLocale()));\n                 }\n             }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 53%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..9cf04cbf0a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -34,35 +32,37 @@ public class CheckAuthenticationAction extends AbstractAction implements Webflow\n \n     @Override\n     public Event doExecute(final RequestContext requestContext) {\n+        val messageSource = ((DefaultMessageContext) requestContext.getMessageContext()).getMessageSource();\n         val authentication = WebUtils.getInProgressAuthentication();\n         val login = authentication.getPrincipal().getId();\n-        LOGGER.debug(\"Login: {}\", login);\n-        val otp = requestContext.getRequestParameters().get(OTP);\n+        LOGGER.trace(\"Login: [{}]\", login);\n+        val otp = requestContext.getRequestParameters().get(WebflowConstants.OTP);\n         val flowScope = requestContext.getFlowScope();\n-        val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n+        val sessionId = (String) flowScope.get(WebflowConstants.INWEBO_SESSION_ID);\n         if (StringUtils.isNotBlank(otp)) {\n-            val response = service.authenticateExtended(login, otp);\n-            if (response.isOk()) {\n-                val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n-                return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            }\n+            val credential = new InweboCredential(login);\n+            credential.setOtp(otp);\n+            LOGGER.debug(\"Received OTP: [{}] for login: [{}]\", otp, login);\n+            WebUtils.putCredential(requestContext, credential);\n+            return this.casWebflowEventResolver.resolveSingle(requestContext);\n         } else if (StringUtils.isNotBlank(sessionId)) {\n             val response = service.checkPushResult(login, sessionId);\n             val result = response.getResult();\n             if (response.isOk()) {\n                 val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                val credential = new InweboCredential(login);\n+                credential.setDeviceName(deviceName);\n+                credential.setAlreadyAuthenticated(true);\n+                LOGGER.debug(\"User: [{}] validated push for sessionId: [{}] and device: [{}]\", login, sessionId, deviceName);\n+                WebUtils.putCredential(requestContext, credential);\n                 return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            } else if (result == Result.WAITING) {\n-                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");\n-                return getEventFactorySupport().event(this, PENDING);\n+            } else if (result == InweboResult.WAITING) {\n+                LOGGER.trace(\"Waiting for user to validate on mobile/desktop\");\n+                return getEventFactorySupport().event(this, WebflowConstants.PENDING);\n             } else {\n-                LOGGER.debug(\"Validation fails: {}\", result);\n-                if (result == Result.REFUSED || result == Result.TIMEOUT) {\n-                    flowScope.put(INWEBO_ERROR_MESSAGE,\n+                LOGGER.debug(\"Validation fails: [{}]\", result);\n+                if (result == InweboResult.REFUSED || result == InweboResult.TIMEOUT) {\n+                    flowScope.put(WebflowConstants.INWEBO_ERROR_MESSAGE,\n                             messageSource.getMessage(\"cas.inwebo.error.userrefusedortoolate\", null, LocaleContextHolder.getLocale()));\n                 }\n             }\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY1Nw==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534769657", "body": "Should be trace", "bodyText": "Should be trace", "bodyHTML": "<p dir=\"auto\">Should be trace</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:03:26Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.support.inwebo.authentication.InweboCredential;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.support.inwebo.service.response.Result;\n+import org.apereo.cas.web.flow.resolver.CasWebflowEventResolver;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the push notification or the OTP generated on the browser.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckAuthenticationAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasWebflowEventResolver casWebflowEventResolver;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+        val otp = requestContext.getRequestParameters().get(OTP);\n+        val flowScope = requestContext.getFlowScope();\n+        val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n+        if (StringUtils.isNotBlank(otp)) {\n+            val response = service.authenticateExtended(login, otp);\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            }\n+        } else if (StringUtils.isNotBlank(sessionId)) {\n+            val response = service.checkPushResult(login, sessionId);\n+            val result = response.getResult();\n+            if (response.isOk()) {\n+                val deviceName = response.getDeviceName();\n+                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n+                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                return this.casWebflowEventResolver.resolveSingle(requestContext);\n+            } else if (result == Result.WAITING) {\n+                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwODcyOQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537508729", "bodyText": "Yes", "author": "leleuj", "createdAt": "2020-12-07T13:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc2OTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "66874878ddfcd3f2af78c74b8bbe7c77370819fa", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nindex 0a567971bb..de1d989a31 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n", "chunk": "@@ -41,20 +41,21 @@ public class CheckAuthenticationAction extends AbstractAction implements Webflow\n         val flowScope = requestContext.getFlowScope();\n         val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n         if (StringUtils.isNotBlank(otp)) {\n-            val response = service.authenticateExtended(login, otp);\n-            if (response.isOk()) {\n-                val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n-                return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            }\n+            val credential = new InweboCredential(login);\n+            credential.setOtp(otp);\n+            LOGGER.debug(\"Received OTP: {} for login: {}\", otp, login);\n+            WebUtils.putCredential(requestContext, credential);\n+            return this.casWebflowEventResolver.resolveSingle(requestContext);\n         } else if (StringUtils.isNotBlank(sessionId)) {\n             val response = service.checkPushResult(login, sessionId);\n             val result = response.getResult();\n             if (response.isOk()) {\n                 val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                val credential = new InweboCredential(login);\n+                credential.setDeviceName(deviceName);\n+                credential.setAlreadyAuthenticated(true);\n+                LOGGER.debug(\"User: {} validated push for sessionId: {} and device: {}\", login, sessionId, deviceName);\n+                WebUtils.putCredential(requestContext, credential);\n                 return this.casWebflowEventResolver.resolveSingle(requestContext);\n             } else if (result == Result.WAITING) {\n                 LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");\n", "next_change": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 71%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex de1d989a31..0adc1851f3 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -54,16 +54,16 @@ public class CheckAuthenticationAction extends AbstractAction implements Webflow\n                 val credential = new InweboCredential(login);\n                 credential.setDeviceName(deviceName);\n                 credential.setAlreadyAuthenticated(true);\n-                LOGGER.debug(\"User: {} validated push for sessionId: {} and device: {}\", login, sessionId, deviceName);\n+                LOGGER.debug(\"User: [{}] validated push for sessionId: [{}] and device: [{}]\", login, sessionId, deviceName);\n                 WebUtils.putCredential(requestContext, credential);\n                 return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            } else if (result == Result.WAITING) {\n-                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");\n-                return getEventFactorySupport().event(this, PENDING);\n+            } else if (result == InweboResult.WAITING) {\n+                LOGGER.trace(\"Waiting for user to validate on mobile/desktop\");\n+                return getEventFactorySupport().event(this, WebflowConstants.PENDING);\n             } else {\n-                LOGGER.debug(\"Validation fails: {}\", result);\n-                if (result == Result.REFUSED || result == Result.TIMEOUT) {\n-                    flowScope.put(INWEBO_ERROR_MESSAGE,\n+                LOGGER.debug(\"Validation fails: [{}]\", result);\n+                if (result == InweboResult.REFUSED || result == InweboResult.TIMEOUT) {\n+                    flowScope.put(WebflowConstants.INWEBO_ERROR_MESSAGE,\n                             messageSource.getMessage(\"cas.inwebo.error.userrefusedortoolate\", null, LocaleContextHolder.getLocale()));\n                 }\n             }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nsimilarity index 53%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\nindex 0a567971bb..9cf04cbf0a 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckAuthenticationAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckAuthenticationAction.java\n", "chunk": "@@ -34,35 +32,37 @@ public class CheckAuthenticationAction extends AbstractAction implements Webflow\n \n     @Override\n     public Event doExecute(final RequestContext requestContext) {\n+        val messageSource = ((DefaultMessageContext) requestContext.getMessageContext()).getMessageSource();\n         val authentication = WebUtils.getInProgressAuthentication();\n         val login = authentication.getPrincipal().getId();\n-        LOGGER.debug(\"Login: {}\", login);\n-        val otp = requestContext.getRequestParameters().get(OTP);\n+        LOGGER.trace(\"Login: [{}]\", login);\n+        val otp = requestContext.getRequestParameters().get(WebflowConstants.OTP);\n         val flowScope = requestContext.getFlowScope();\n-        val sessionId = (String) flowScope.get(INWEBO_SESSION_ID);\n+        val sessionId = (String) flowScope.get(WebflowConstants.INWEBO_SESSION_ID);\n         if (StringUtils.isNotBlank(otp)) {\n-            val response = service.authenticateExtended(login, otp);\n-            if (response.isOk()) {\n-                val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated OTP on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n-                return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            }\n+            val credential = new InweboCredential(login);\n+            credential.setOtp(otp);\n+            LOGGER.debug(\"Received OTP: [{}] for login: [{}]\", otp, login);\n+            WebUtils.putCredential(requestContext, credential);\n+            return this.casWebflowEventResolver.resolveSingle(requestContext);\n         } else if (StringUtils.isNotBlank(sessionId)) {\n             val response = service.checkPushResult(login, sessionId);\n             val result = response.getResult();\n             if (response.isOk()) {\n                 val deviceName = response.getDeviceName();\n-                LOGGER.info(\"User: {} validated push on device: {}\", login, deviceName);\n-                WebUtils.putCredential(requestContext, new InweboCredential(login, deviceName));\n+                val credential = new InweboCredential(login);\n+                credential.setDeviceName(deviceName);\n+                credential.setAlreadyAuthenticated(true);\n+                LOGGER.debug(\"User: [{}] validated push for sessionId: [{}] and device: [{}]\", login, sessionId, deviceName);\n+                WebUtils.putCredential(requestContext, credential);\n                 return this.casWebflowEventResolver.resolveSingle(requestContext);\n-            } else if (result == Result.WAITING) {\n-                LOGGER.debug(\"Waiting for user to validate on mobile/desktop\");\n-                return getEventFactorySupport().event(this, PENDING);\n+            } else if (result == InweboResult.WAITING) {\n+                LOGGER.trace(\"Waiting for user to validate on mobile/desktop\");\n+                return getEventFactorySupport().event(this, WebflowConstants.PENDING);\n             } else {\n-                LOGGER.debug(\"Validation fails: {}\", result);\n-                if (result == Result.REFUSED || result == Result.TIMEOUT) {\n-                    flowScope.put(INWEBO_ERROR_MESSAGE,\n+                LOGGER.debug(\"Validation fails: [{}]\", result);\n+                if (result == InweboResult.REFUSED || result == InweboResult.TIMEOUT) {\n+                    flowScope.put(WebflowConstants.INWEBO_ERROR_MESSAGE,\n                             messageSource.getMessage(\"cas.inwebo.error.userrefusedortoolate\", null, LocaleContextHolder.getLocale()));\n                 }\n             }\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MDQwNg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534770406", "body": "All error calls to the logger should be using LoggingUtils.error()", "bodyText": "All error calls to the logger should be using LoggingUtils.error()", "bodyHTML": "<p dir=\"auto\">All error calls to the logger should be using LoggingUtils.error()</p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:03:59Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.support.inwebo.service.InweboService;\n+import org.apereo.cas.web.support.WebUtils;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A web action to check the user (status).\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class CheckUserAction extends AbstractAction implements WebflowConstants {\n+\n+    private final MessageSource messageSource;\n+\n+    private final InweboService service;\n+\n+    private final CasConfigurationProperties casProperties;\n+\n+    @Override\n+    public Event doExecute(final RequestContext requestContext) {\n+\n+        val authentication = WebUtils.getInProgressAuthentication();\n+        val login = authentication.getPrincipal().getId();\n+        LOGGER.debug(\"Login: {}\", login);\n+\n+        val flowScope = requestContext.getFlowScope();\n+        val inwebo = casProperties.getAuthn().getMfa().getInwebo();\n+        flowScope.put(SITE_ALIAS, inwebo.getSiteAlias());\n+        flowScope.put(SITE_DESCRIPTION, inwebo.getSiteDescription());\n+        flowScope.put(LOGIN, login);\n+\n+        try {\n+            val response = service.loginSearch(login);\n+            val oneUser = response.isOk() && response.getCount() == 1 && response.getUserId() > 0;\n+            if (oneUser) {\n+                val userIsBlocked = response.getUserStatus() == 1;\n+                if (userIsBlocked) {\n+                    LOGGER.error(\"User is blocked: {}\", login);\n+                    return error();\n+                }\n+                val activationStatus = response.getActivationStatus();\n+                if (activationStatus == 0) {\n+                    LOGGER.debug(\"User is not registered: {}\", login);\n+                    flowScope.put(MUST_ENROLL, true);\n+                    flowScope.put(INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n+                } else if (activationStatus == 1) {\n+                    LOGGER.debug(\"User can only handle push notifications: {}\", login);\n+                    return getEventFactorySupport().event(this, PUSH);\n+                } else if (activationStatus == 2) {\n+                    LOGGER.debug(\"User can only handle browser authentication: {}\", login);\n+                    return getEventFactorySupport().event(this, BROWSER);\n+                } else if (activationStatus == 3 || activationStatus == 5) {\n+                    LOGGER.debug(\"User must select the authentication method: {}\", login);\n+                    return getEventFactorySupport().event(this, SELECT);\n+                } else {\n+                    LOGGER.error(\"Unknown activation status: {} for: {}\", activationStatus, login);\n+                }\n+            } else {\n+                LOGGER.error(\"No user found for: {}\", login);", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTY2Mg==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537511662", "bodyText": "Yes, but only when there is an exception. I will change that.", "author": "leleuj", "createdAt": "2020-12-07T13:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MDQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d53efbb0a8574fb322809f83a05780b68d159a36", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckUserAction.java\nsimilarity index 67%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckUserAction.java\nindex 4f71728a5c..fcc2709ced 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckUserAction.java\n", "chunk": "@@ -48,31 +49,31 @@ public class CheckUserAction extends AbstractAction implements WebflowConstants\n             if (oneUser) {\n                 val userIsBlocked = response.getUserStatus() == 1;\n                 if (userIsBlocked) {\n-                    LOGGER.error(\"User is blocked: {}\", login);\n+                    LOGGER.error(\"User is blocked: [{}]\", login);\n                     return error();\n                 }\n                 val activationStatus = response.getActivationStatus();\n                 if (activationStatus == 0) {\n-                    LOGGER.debug(\"User is not registered: {}\", login);\n-                    flowScope.put(MUST_ENROLL, true);\n-                    flowScope.put(INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n+                    LOGGER.debug(\"User is not registered: [{}]\", login);\n+                    flowScope.put(WebflowConstants.MUST_ENROLL, true);\n+                    flowScope.put(WebflowConstants.INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n                 } else if (activationStatus == 1) {\n-                    LOGGER.debug(\"User can only handle push notifications: {}\", login);\n-                    return getEventFactorySupport().event(this, PUSH);\n+                    LOGGER.debug(\"User can only handle push notifications: [{}]\", login);\n+                    return getEventFactorySupport().event(this, WebflowConstants.PUSH);\n                 } else if (activationStatus == 2) {\n-                    LOGGER.debug(\"User can only handle browser authentication: {}\", login);\n-                    return getEventFactorySupport().event(this, BROWSER);\n+                    LOGGER.debug(\"User can only handle browser authentication: [{}]\", login);\n+                    return getEventFactorySupport().event(this, WebflowConstants.BROWSER);\n                 } else if (activationStatus == 3 || activationStatus == 5) {\n-                    LOGGER.debug(\"User must select the authentication method: {}\", login);\n-                    return getEventFactorySupport().event(this, SELECT);\n+                    LOGGER.debug(\"User must select the authentication method: [{}]\", login);\n+                    return getEventFactorySupport().event(this, WebflowConstants.SELECT);\n                 } else {\n-                    LOGGER.error(\"Unknown activation status: {} for: {}\", activationStatus, login);\n+                    LOGGER.error(\"Unknown activation status: [{}] for: [{}]\", activationStatus, login);\n                 }\n             } else {\n-                LOGGER.error(\"No user found for: {}\", login);\n+                LOGGER.error(\"No user found for: [{}]\", login);\n             }\n         } catch (final Exception e) {\n-            LOGGER.error(\"Cannot search authentication methods\", e);\n+            LoggingUtils.error(LOGGER, \"Cannot search authentication methods\", e);\n         }\n         return error();\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckUserAction.java\nsimilarity index 63%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckUserAction.java\nindex 4f71728a5c..bbc7ec94d1 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/CheckUserAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboCheckUserAction.java\n", "chunk": "@@ -48,31 +47,31 @@ public class CheckUserAction extends AbstractAction implements WebflowConstants\n             if (oneUser) {\n                 val userIsBlocked = response.getUserStatus() == 1;\n                 if (userIsBlocked) {\n-                    LOGGER.error(\"User is blocked: {}\", login);\n+                    LOGGER.error(\"User is blocked: [{}]\", login);\n                     return error();\n                 }\n                 val activationStatus = response.getActivationStatus();\n                 if (activationStatus == 0) {\n-                    LOGGER.debug(\"User is not registered: {}\", login);\n-                    flowScope.put(MUST_ENROLL, true);\n-                    flowScope.put(INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n+                    LOGGER.debug(\"User is not registered: [{}]\", login);\n+                    flowScope.put(WebflowConstants.MUST_ENROLL, true);\n+                    flowScope.put(WebflowConstants.INWEBO_ERROR_MESSAGE, messageSource.getMessage(\"cas.inwebo.error.usernotregistered\", null, LocaleContextHolder.getLocale()));\n                 } else if (activationStatus == 1) {\n-                    LOGGER.debug(\"User can only handle push notifications: {}\", login);\n-                    return getEventFactorySupport().event(this, PUSH);\n+                    LOGGER.debug(\"User can only handle push notifications: [{}]\", login);\n+                    return getEventFactorySupport().event(this, WebflowConstants.PUSH);\n                 } else if (activationStatus == 2) {\n-                    LOGGER.debug(\"User can only handle browser authentication: {}\", login);\n-                    return getEventFactorySupport().event(this, BROWSER);\n+                    LOGGER.debug(\"User can only handle browser authentication: [{}]\", login);\n+                    return getEventFactorySupport().event(this, WebflowConstants.BROWSER);\n                 } else if (activationStatus == 3 || activationStatus == 5) {\n-                    LOGGER.debug(\"User must select the authentication method: {}\", login);\n-                    return getEventFactorySupport().event(this, SELECT);\n+                    LOGGER.debug(\"User must select the authentication method: [{}]\", login);\n+                    return getEventFactorySupport().event(this, WebflowConstants.SELECT);\n                 } else {\n-                    LOGGER.error(\"Unknown activation status: {} for: {}\", activationStatus, login);\n+                    LOGGER.error(\"Unknown activation status: [{}] for: [{}]\", activationStatus, login);\n                 }\n             } else {\n-                LOGGER.error(\"No user found for: {}\", login);\n+                LOGGER.error(\"No user found for: [{}]\", login);\n             }\n         } catch (final Exception e) {\n-            LOGGER.error(\"Cannot search authentication methods\", e);\n+            LoggingUtils.error(LOGGER, \"Cannot search authentication methods\", e);\n         }\n         return error();\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTM1NQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r534771355", "body": "Should be unnecessary. Use `StaticEventExecutionAction`", "bodyText": "Should be unnecessary. Use StaticEventExecutionAction", "bodyHTML": "<p dir=\"auto\">Should be unnecessary. Use <code>StaticEventExecutionAction</code></p>", "author": "mmoayyed", "createdAt": "2020-12-03T07:04:30Z", "path": "support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.apereo.cas.support.inwebo.web.flow.actions;\n+\n+import org.springframework.webflow.action.AbstractAction;\n+import org.springframework.webflow.execution.Event;\n+import org.springframework.webflow.execution.RequestContext;\n+\n+/**\n+ * A simple web action for success.\n+ *\n+ * @author Jerome LELEU\n+ * @since 6.4.0\n+ */\n+public class SuccessAction extends AbstractAction {", "originalCommit": "89b75b211977e12c5ce3879b4b846787d51678a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUxMTg2MQ==", "url": "https://github.com/apereo/cas/pull/5001#discussion_r537511861", "bodyText": "Yes. Done already.", "author": "leleuj", "createdAt": "2020-12-07T13:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboSuccessAction.java\nsimilarity index 88%\nrename from support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java\nrename to support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboSuccessAction.java\nindex 5ab5ca0728..1b1044cc9f 100644\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java\n+++ b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/InweboSuccessAction.java\n", "chunk": "@@ -10,7 +10,7 @@ import org.springframework.webflow.execution.RequestContext;\n  * @author Jerome LELEU\n  * @since 6.4.0\n  */\n-public class SuccessAction extends AbstractAction {\n+public class InweboSuccessAction extends AbstractAction {\n \n     @Override\n     public Event doExecute(final RequestContext requestContext) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "changed_code": [{"header": "diff --git a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java b/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java\ndeleted file mode 100644\nindex 5ab5ca0728..0000000000\n--- a/support/cas-server-support-inwebo-mfa/src/main/java/org/apereo/cas/support/inwebo/web/flow/actions/SuccessAction.java\n+++ /dev/null\n", "chunk": "@@ -1,19 +0,0 @@\n-package org.apereo.cas.support.inwebo.web.flow.actions;\n-\n-import org.springframework.webflow.action.AbstractAction;\n-import org.springframework.webflow.execution.Event;\n-import org.springframework.webflow.execution.RequestContext;\n-\n-/**\n- * A simple web action for success.\n- *\n- * @author Jerome LELEU\n- * @since 6.4.0\n- */\n-public class SuccessAction extends AbstractAction {\n-\n-    @Override\n-    public Event doExecute(final RequestContext requestContext) {\n-        return success();\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "8be4aed14709bed704288fa233f6e2968fdf2b5b", "message": "Merge commit", "committedDate": null}]}, {"oid": "680ad270cb61efeafa2e71a6910bfdf508626a0d", "url": "https://github.com/apereo/cas/commit/680ad270cb61efeafa2e71a6910bfdf508626a0d", "message": "use SpringResourceProperties for client certificate and supplement the springws dependency", "committedDate": "2020-12-03T08:18:13Z", "type": "commit"}, {"oid": "60930c35b781991437a8a72cc6977a51b87a0dc0", "url": "https://github.com/apereo/cas/commit/60930c35b781991437a8a72cc6977a51b87a0dc0", "message": "Merge branch 'master' of github.com:apereo/cas into inwebo", "committedDate": "2020-12-04T09:38:13Z", "type": "commit"}, {"oid": "66874878ddfcd3f2af78c74b8bbe7c77370819fa", "url": "https://github.com/apereo/cas/commit/66874878ddfcd3f2af78c74b8bbe7c77370819fa", "message": "authentication mostly happens in InweboAuthenticationHandler", "committedDate": "2020-12-04T11:07:07Z", "type": "commit"}, {"oid": "fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "url": "https://github.com/apereo/cas/commit/fd960c0a6e272206bfb34e78ec84a42df5ca4cb0", "message": "renaming", "committedDate": "2020-12-04T12:35:27Z", "type": "commit"}, {"oid": "33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "url": "https://github.com/apereo/cas/commit/33b1f3910f0a0b71867093097cd3dfe6bb5850f3", "message": "Remove success action, fix object mapper and use UriComponentsBuilder", "committedDate": "2020-12-07T11:16:01Z", "type": "commit"}, {"oid": "c2df31d4ff51b8443d9fcf25416580a32370e685", "url": "https://github.com/apereo/cas/commit/c2df31d4ff51b8443d9fcf25416580a32370e685", "message": "add ClientCertificateProperties and SSLUtils", "committedDate": "2020-12-07T11:46:25Z", "type": "commit"}, {"oid": "d53efbb0a8574fb322809f83a05780b68d159a36", "url": "https://github.com/apereo/cas/commit/d53efbb0a8574fb322809f83a05780b68d159a36", "message": "renaming", "committedDate": "2020-12-07T14:10:51Z", "type": "commit"}, {"oid": "5a8c17649323890effbb574bf2a1ca21ad4622d5", "url": "https://github.com/apereo/cas/commit/5a8c17649323890effbb574bf2a1ca21ad4622d5", "message": "rename InweboConfiguration -> InweboServiceConfiguration", "committedDate": "2020-12-09T06:51:35Z", "type": "commit"}, {"oid": "7eeef2ec25787a1a9e2c28abf7e9dda5f098990f", "url": "https://github.com/apereo/cas/commit/7eeef2ec25787a1a9e2c28abf7e9dda5f098990f", "message": "webflow in Java", "committedDate": "2020-12-09T07:36:47Z", "type": "commit"}, {"oid": "43cb2f6478baf50206b8fd4f73da3653e56ee45b", "url": "https://github.com/apereo/cas/commit/43cb2f6478baf50206b8fd4f73da3653e56ee45b", "message": "more tests", "committedDate": "2020-12-09T08:25:35Z", "type": "commit"}, {"oid": "945698852ded2c23cb4de216f41926023fa35b7b", "url": "https://github.com/apereo/cas/commit/945698852ded2c23cb4de216f41926023fa35b7b", "message": "expose DefaultCasSslContext", "committedDate": "2020-12-09T09:10:51Z", "type": "commit"}, {"oid": "ff4651f160705f415025716d5ae470f17477eb0b", "url": "https://github.com/apereo/cas/commit/ff4651f160705f415025716d5ae470f17477eb0b", "message": "Removed injected MessageSource", "committedDate": "2020-12-09T10:21:20Z", "type": "commit"}, {"oid": "2d551a7cb441d48999140b09433e0c137bbf7791", "url": "https://github.com/apereo/cas/commit/2d551a7cb441d48999140b09433e0c137bbf7791", "message": "add 2 UI tests", "committedDate": "2020-12-11T10:01:03Z", "type": "commit"}, {"oid": "6fbccf673a47aab2b11c4e2bc9a283fb4dc9cfb8", "url": "https://github.com/apereo/cas/commit/6fbccf673a47aab2b11c4e2bc9a283fb4dc9cfb8", "message": "finish browser UI test", "committedDate": "2020-12-11T13:38:32Z", "type": "commit"}, {"oid": "8e3d4594037158d2a7b5629d3f173ccb2659e149", "url": "https://github.com/apereo/cas/commit/8e3d4594037158d2a7b5629d3f173ccb2659e149", "message": "fix checktyle", "committedDate": "2020-12-11T15:22:18Z", "type": "commit"}, {"oid": "1a2aa4f0a677f7525c0d85da26c1684b8c76366b", "url": "https://github.com/apereo/cas/commit/1a2aa4f0a677f7525c0d85da26c1684b8c76366b", "message": "fix checkstyle", "committedDate": "2020-12-11T17:30:17Z", "type": "commit"}, {"oid": "4b4a9f2de0369dbaac18202b0eaf6845134bda12", "url": "https://github.com/apereo/cas/commit/4b4a9f2de0369dbaac18202b0eaf6845134bda12", "message": "sync with master", "committedDate": "2021-01-05T14:55:17Z", "type": "commit"}]}