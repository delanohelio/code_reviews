{"pr_number": 4854, "pr_title": "ServicesManager should use ServiceRegistry for find operations", "pr_author": "DimaAy", "pr_createdAt": "2020-05-14T14:50:09Z", "pr_url": "https://github.com/apereo/cas/pull/4854", "timeline": [{"oid": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "url": "https://github.com/apereo/cas/commit/db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "message": "Cache services in ServicesManager", "committedDate": "2020-05-25T14:29:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMDcwMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425200702", "body": "```suggestion\r\n     * Find a {@link RegisteredService} by matching with the supplied name.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by matching with the supplied name.\n          \n          \n            \n                 * Find a {@link RegisteredService} by matching with the supplied name.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Find</span> a <span class=\"pl-smi\">RegisteredService</span> by matching with the supplied name.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Find</span> a <span class=\"x x-first\">{</span><span class=\"pl-k x\">@link</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">RegisteredService</span><span class=\"x x-first x-last\">}</span> by matching with the supplied name.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-14T14:54:18Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..eeb900682b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -133,6 +133,14 @@ public interface ServicesManager {\n         return null;\n     }\n     \n+    /**\n+     * Find a RegisteredService by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the RegisteredService\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n     /**\n      * Find a RegisteredService by matching with the supplied name.\n      *\n", "next_change": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex eeb900682b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by exact service id.\n+     * Find a {@link RegisteredService} by exact service id.\n      *\n      * @param serviceId the service\n-     * @return the RegisteredService\n+     * @return the {@link RegisteredService} defention or null\n      */\n     RegisteredService findServiceByExactServiceId(String serviceId);\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 517df074f5..4ad0f5bf6b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,20 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a {@link RegisteredService} by exact service id.\n-     *\n-     * @param serviceId the service\n-     * @return the {@link RegisteredService} defention or null\n-     */\n-    RegisteredService findServiceByExactServiceId(String serviceId);\n-    \n-    /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the {@link RegisteredService}  that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the {@link RegisteredService} that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMDg1MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425200851", "body": "```suggestion\r\n     * @return the {@link RegisteredService} that matches the supplied service.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService that matches the supplied service.\n          \n          \n            \n                 * @return the {@link RegisteredService} that matches the supplied service.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"pl-smi\">RegisteredService</span> that matches the supplied service.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first\">{</span><span class=\"pl-k x\">@link</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">RegisteredService</span><span class=\"x x-first x-last\">}</span> that matches the supplied service.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-14T14:54:29Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..eeb900682b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -133,6 +133,14 @@ public interface ServicesManager {\n         return null;\n     }\n     \n+    /**\n+     * Find a RegisteredService by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the RegisteredService\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n     /**\n      * Find a RegisteredService by matching with the supplied name.\n      *\n", "next_change": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex eeb900682b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by exact service id.\n+     * Find a {@link RegisteredService} by exact service id.\n      *\n      * @param serviceId the service\n-     * @return the RegisteredService\n+     * @return the {@link RegisteredService} defention or null\n      */\n     RegisteredService findServiceByExactServiceId(String serviceId);\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 517df074f5..4ad0f5bf6b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,20 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a {@link RegisteredService} by exact service id.\n-     *\n-     * @param serviceId the service\n-     * @return the {@link RegisteredService} defention or null\n-     */\n-    RegisteredService findServiceByExactServiceId(String serviceId);\n-    \n-    /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the {@link RegisteredService}  that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the {@link RegisteredService} that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTI5MA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425201290", "body": "```suggestion\r\n     * Find a {@link RegisteredService} by matching with the supplied name.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by matching with the supplied name.\n          \n          \n            \n                 * Find a {@link RegisteredService} by matching with the supplied name.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Find</span> a <span class=\"pl-smi\">RegisteredService</span> by matching with the supplied name.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Find</span> a <span class=\"x x-first\">{</span><span class=\"pl-k x\">@link</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">RegisteredService</span><span class=\"x x-first x-last\">}</span> by matching with the supplied name.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-14T14:55:01Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.\n+     */\n+    RegisteredService findServiceByName(String name);\n+\n+    /**\n+     * Find a RegisteredService by matching with the supplied name.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 517df074f5..4ad0f5bf6b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,20 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a {@link RegisteredService} by exact service id.\n-     *\n-     * @param serviceId the service\n-     * @return the {@link RegisteredService} defention or null\n-     */\n-    RegisteredService findServiceByExactServiceId(String serviceId);\n-    \n-    /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the {@link RegisteredService}  that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the {@link RegisteredService} that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTQ2NQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425201465", "body": "```suggestion\r\n     * @return the {@link RegisteredService} that matches the supplied service.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService that matches the supplied service.\n          \n          \n            \n                 * @return the {@link RegisteredService} that matches the supplied service.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"pl-smi\">RegisteredService</span> that matches the supplied service.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first\">{</span><span class=\"pl-k x\">@link</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">RegisteredService</span><span class=\"x x-first x-last\">}</span> that matches the supplied service.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-14T14:55:14Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,30 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param name the name to match with.\n+     * @return the RegisteredService that matches the supplied service.\n+     */\n+    RegisteredService findServiceByName(String name);\n+\n+    /**\n+     * Find a RegisteredService by matching with the supplied name.\n+     *\n+     * @param <T>   the type parameter\n+     * @param name    the name to match with.\n+     * @param clazz the clazz\n+     * @return the RegisteredService that matches the supplied service.", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 517df074f5..4ad0f5bf6b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,20 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a {@link RegisteredService} by exact service id.\n-     *\n-     * @param serviceId the service\n-     * @return the {@link RegisteredService} defention or null\n-     */\n-    RegisteredService findServiceByExactServiceId(String serviceId);\n-    \n-    /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the {@link RegisteredService}  that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the {@link RegisteredService} that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMjIzMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425202232", "body": "```suggestion\r\n        var service = getCandidateServicesToMatch(serviceId)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RegisteredService service = getCandidateServicesToMatch(serviceId)\n          \n          \n            \n                    var service = getCandidateServicesToMatch(serviceId)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first x-last\">RegisteredService</span> service <span class=\"pl-k\">=</span> getCandidateServicesToMatch(serviceId)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first x-last\">var</span> service <span class=\"pl-k\">=</span> getCandidateServicesToMatch(serviceId)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-14T14:56:11Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +104,14 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -104,13 +96,16 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        RegisteredService service = getCandidateServicesToMatch(serviceId)\n+        var service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,9 +102,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -96,20 +104,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        var service = getCandidateServicesToMatch(serviceId)\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceBy(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n-                        service);\n-            }\n+            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -104,13 +96,16 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        RegisteredService service = getCandidateServicesToMatch(serviceId)\n+        var service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,9 +102,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..f5ce698e92 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,12 +102,12 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+            LOGGER.trace(\"The service that matches the serviceId [{}] is not found in the cache, trying to find it from [{}]\",\n                     serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]  \", serviceRegistry.getName(), \n                         service);\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMjQxNg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r425202416", "body": "```suggestion\r\n        var result = this.services.get(id);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    RegisteredService result = this.services.get(id);\n          \n          \n            \n                    var result = this.services.get(id);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi x x-first x-last\">RegisteredService</span> result <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>services<span class=\"pl-k\">.</span>get(id);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first x-last\">var</span> result <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>services<span class=\"pl-k\">.</span>get(id);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-14T14:56:25Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,30 +158,54 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        RegisteredService result = this.services.get(id);", "originalCommit": "730d5135275f85e7dafb96c4674cadafd274c15f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -156,75 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        var result= this.serviceRegistry.findServiceById(id, clazz);\n-        services.get(result.getId(), k-> result);\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        services.get(result.getId(), k-> result);\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -233,41 +197,29 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n-    @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n-    }\n-    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services.putAll(this.serviceRegistry.load()\n+        this.services = this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toMap(r -> {\n-                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n-                            r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toConcurrentMap(r -> {\n+                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s)));\n+                }, Function.identity(), (r, s) -> s));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n-        return services.asMap().values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n+        return services.values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n-    \n-    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n-            final Predicate<RegisteredService>... p) {\n-        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n-        return predicates.stream().reduce(x -> true, Predicate::and);\n-    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.asMap().values()\n+        this.services.values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjU2MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042561", "body": "Seems like you should explain these in much more detail. ", "bodyText": "Seems like you should explain these in much more detail.", "bodyHTML": "<p dir=\"auto\">Seems like you should explain these in much more detail.</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:32:28Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -144,7 +144,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    ", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 17b204bfe0..27437db4fe 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -146,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration.\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size.\n+     * services cache size specifies the maximum number of entries the cache may contain.\n     */\n     private long cacheSize = Long.MAX_VALUE;\n \n     /**\n-     * services cache capacity.\n+     * services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..48dcfa270d 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,22 +164,7 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n-    \n-    /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n-    */\n-    private String cache = \"PT5M\";\n-\n-    /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n-    */\n-    private long cacheSize = Long.MAX_VALUE;\n \n-    /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n-    */\n-    private int cachCapacity = Integer.MAX_VALUE;\n-    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 48dcfa270d..3af5f28085 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,7 +164,22 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 3af5f28085..27437db4fe 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration.\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size.\n+     * services cache size specifies the maximum number of entries the cache may contain.\n     */\n     private long cacheSize = Long.MAX_VALUE;\n \n     /**\n-     * services cache capacity.\n+     * services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..ba48dd617e 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+     * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n+     * Services cache size specifies the maximum number of entries the cache may contain.\n     */\n-    private long cacheSize = Long.MAX_VALUE;\n+    private long cacheSize = 1000L;\n \n     /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n+     * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "ef34b087459d3123589b4a8a9fddd9425854de49", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex ba48dd617e..8b12b3c584 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ServiceRegistryProperties implements Serializable {\n     /**\n      * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n-    private int cachCapacity = Integer.MAX_VALUE;\n+    private int cachCapacity = 1000;\n     \n     /**\n      * Types of service managers that one can control.\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjYzMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042632", "body": "```suggestion\r\n     * Find a {@link RegisteredService} by exact service id.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Find a RegisteredService by exact service id.\n          \n          \n            \n                 * Find a {@link RegisteredService} by exact service id.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Find</span> a <span class=\"pl-smi\">RegisteredService</span> by exact service id.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Find</span> a <span class=\"x x-first\">{</span><span class=\"pl-k x\">@link</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">RegisteredService</span><span class=\"x x-first x-last\">}</span> by exact service id.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-25T18:32:52Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,38 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by exact service id.", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex eeb900682b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by exact service id.\n+     * Find a {@link RegisteredService} by exact service id.\n      *\n      * @param serviceId the service\n-     * @return the RegisteredService\n+     * @return the {@link RegisteredService} defention or null\n      */\n     RegisteredService findServiceByExactServiceId(String serviceId);\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 517df074f5..4ad0f5bf6b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,20 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a {@link RegisteredService} by exact service id.\n-     *\n-     * @param serviceId the service\n-     * @return the {@link RegisteredService} defention or null\n-     */\n-    RegisteredService findServiceByExactServiceId(String serviceId);\n-    \n-    /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the {@link RegisteredService}  that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the {@link RegisteredService} that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjY5MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042691", "body": "```suggestion\r\n     * @return the service definition or null\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the RegisteredService\n          \n          \n            \n                 * @return the service definition or null", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"pl-smi x x-first x-last\">RegisteredService</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> the <span class=\"x x-first\">service definition or </span><span class=\"pl-c1 x x-last\">null</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-25T18:33:06Z", "path": "api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java", "diffHunk": "@@ -132,6 +132,38 @@ default void save(final RegisteredService... services) {\n         }\n         return null;\n     }\n+    \n+    /**\n+     * Find a RegisteredService by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the RegisteredService", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex eeb900682b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by exact service id.\n+     * Find a {@link RegisteredService} by exact service id.\n      *\n      * @param serviceId the service\n-     * @return the RegisteredService\n+     * @return the {@link RegisteredService} defention or null\n      */\n     RegisteredService findServiceByExactServiceId(String serviceId);\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 517df074f5..4ad0f5bf6b 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,28 +134,20 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a {@link RegisteredService} by exact service id.\n-     *\n-     * @param serviceId the service\n-     * @return the {@link RegisteredService} defention or null\n-     */\n-    RegisteredService findServiceByExactServiceId(String serviceId);\n-    \n-    /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the {@link RegisteredService}  that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a {@link RegisteredService} by matching with the supplied name.\n+     * Find a RegisteredService by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the {@link RegisteredService} that matches the supplied service.\n+     * @return the RegisteredService that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\nindex 4ad0f5bf6b..517df074f5 100644\n--- a/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n+++ b/api/cas-server-core-api-services/src/main/java/org/apereo/cas/services/ServicesManager.java\n", "chunk": "@@ -134,20 +134,28 @@ public interface ServicesManager {\n     }\n     \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by exact service id.\n+     *\n+     * @param serviceId the service\n+     * @return the {@link RegisteredService} defention or null\n+     */\n+    RegisteredService findServiceByExactServiceId(String serviceId);\n+    \n+    /**\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param name the name to match with.\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService}  that matches the supplied service.\n      */\n     RegisteredService findServiceByName(String name);\n \n     /**\n-     * Find a RegisteredService by matching with the supplied name.\n+     * Find a {@link RegisteredService} by matching with the supplied name.\n      *\n      * @param <T>   the type parameter\n      * @param name    the name to match with.\n      * @param clazz the clazz\n-     * @return the RegisteredService that matches the supplied service.\n+     * @return the {@link RegisteredService} that matches the supplied service.\n      */\n     default <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n         val service = findServiceByName(name);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mjg0NQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042845", "body": "Is this change needed?", "bodyText": "Is this change needed?", "bodyHTML": "<p dir=\"auto\">Is this change needed?</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:33:48Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -63,7 +55,7 @@ public RegisteredService save(final RegisteredService registeredService) {\n     @Override\n     public synchronized RegisteredService save(final RegisteredService registeredService, final boolean publishEvent) {\n         publishEvent(new CasRegisteredServicePreSaveEvent(this, registeredService));\n-        val r = this.serviceRegistry.save(registeredService);\n+        var r = this.serviceRegistry.save(registeredService);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -55,7 +55,7 @@ public abstract class AbstractServicesManager implements ServicesManager {\n     @Override\n     public synchronized RegisteredService save(final RegisteredService registeredService, final boolean publishEvent) {\n         publishEvent(new CasRegisteredServicePreSaveEvent(this, registeredService));\n-        var r = this.serviceRegistry.save(registeredService);\n+        val r = this.serviceRegistry.save(registeredService);\n         this.services.put(r.getId(), r);\n         saveInternal(registeredService);\n \n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -55,7 +55,7 @@ public abstract class AbstractServicesManager implements ServicesManager {\n     @Override\n     public synchronized RegisteredService save(final RegisteredService registeredService, final boolean publishEvent) {\n         publishEvent(new CasRegisteredServicePreSaveEvent(this, registeredService));\n-        val r = this.serviceRegistry.save(registeredService);\n+        var r = this.serviceRegistry.save(registeredService);\n         this.services.put(r.getId(), r);\n         saveInternal(registeredService);\n \n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -55,7 +55,7 @@ public abstract class AbstractServicesManager implements ServicesManager {\n     @Override\n     public synchronized RegisteredService save(final RegisteredService registeredService, final boolean publishEvent) {\n         publishEvent(new CasRegisteredServicePreSaveEvent(this, registeredService));\n-        var r = this.serviceRegistry.save(registeredService);\n+        val r = this.serviceRegistry.save(registeredService);\n         this.services.put(r.getId(), r);\n         saveInternal(registeredService);\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mjk3MQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430042971", "body": "It would be good to add some log statements here under trace to explain the behavior and flow.", "bodyText": "It would be good to add some log statements here under trace to explain the behavior and flow.", "bodyHTML": "<p dir=\"auto\">It would be good to add some log statements here under trace to explain the behavior and flow.</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:34:20Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,17 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,9 +102,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -96,20 +104,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        var service = getCandidateServicesToMatch(serviceId)\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceBy(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n-                        service);\n-            }\n+            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -104,13 +96,16 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        RegisteredService service = getCandidateServicesToMatch(serviceId)\n+        var service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,9 +102,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..f5ce698e92 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,12 +102,12 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+            LOGGER.trace(\"The service that matches the serviceId [{}] is not found in the cache, trying to find it from [{}]\",\n                     serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]  \", serviceRegistry.getName(), \n                         service);\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzAxMA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043010", "body": "```suggestion\r\n        var results = serviceRegistry.findServicePredicate(predicate).\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var results= serviceRegistry.findServicePredicate(predicate).\n          \n          \n            \n                    var results = serviceRegistry.findServicePredicate(predicate).", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">var</span> results<span class=\"pl-k\">=</span> serviceRegistry<span class=\"pl-k\">.</span>findServicePredicate(predicate)<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">var</span> results<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">=</span> serviceRegistry<span class=\"pl-k\">.</span>findServicePredicate(predicate)<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-25T18:34:32Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -118,22 +117,24 @@ public RegisteredService findServiceBy(final String serviceId) {\n     @Override\n     public RegisteredService findServiceBy(final Service service) {\n         return Optional.ofNullable(service)\n-            .map(svc -> findServiceBy(svc.getId()))\n-            .orElse(null);\n+                .map(svc -> findServiceBy(svc.getId()))\n+                .orElse(null);\n     }\n \n     @Override\n     public Collection<RegisteredService> findServiceBy(final Predicate<RegisteredService> predicate) {\n         if (predicate == null) {\n             return new ArrayList<>(0);\n         }\n-\n-        return getAllServices()\n-            .stream()\n-            .filter(getRegisteredServicesFilteringPredicate(predicate))\n-            .sorted()\n-            .peek(RegisteredService::initialize)\n-            .collect(Collectors.toList());\n+        var results= serviceRegistry.findServicePredicate(predicate).", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -126,7 +130,7 @@ public abstract class AbstractServicesManager implements ServicesManager {\n         if (predicate == null) {\n             return new ArrayList<>(0);\n         }\n-        var results= serviceRegistry.findServicePredicate(predicate).\n+        val results = serviceRegistry.findServicePredicate(predicate).\n                 stream().\n                 sorted().\n                 peek(RegisteredService::initialize).\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -130,15 +131,12 @@ public abstract class AbstractServicesManager implements ServicesManager {\n         if (predicate == null) {\n             return new ArrayList<>(0);\n         }\n-        val results = serviceRegistry.findServicePredicate(predicate).\n+\n+        return this.serviceRegistry.findServicePredicate(predicate).\n                 stream().\n                 sorted().\n                 peek(RegisteredService::initialize).\n-                collect(Collectors.toMap(r -> {\n-                    return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n-        services.putAll(results);\n-        return results.values();\n+                collect(Collectors.toList());\n     }\n \n     @Override\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -131,12 +126,15 @@ public abstract class AbstractServicesManager implements ServicesManager {\n         if (predicate == null) {\n             return new ArrayList<>(0);\n         }\n-\n-        return this.serviceRegistry.findServicePredicate(predicate).\n+        var results= serviceRegistry.findServicePredicate(predicate).\n                 stream().\n                 sorted().\n                 peek(RegisteredService::initialize).\n-                collect(Collectors.toList());\n+                collect(Collectors.toMap(r -> {\n+                    return r.getId();\n+                }, Function.identity(), (r, s) -> s));\n+        services.putAll(results);\n+        return results.values();\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzI5MA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043290", "body": "Are you switching to var in order to correctly determine the final type? ", "bodyText": "Are you switching to var in order to correctly determine the final type?", "bodyHTML": "<p dir=\"auto\">Are you switching to var in order to correctly determine the final type?</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:35:53Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -156,14 +160,16 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n     public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        var result= this.serviceRegistry.findServiceById(id, clazz);\n-        services.get(result.getId(), k-> result);\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n         return result;\n     }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzQyNw==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043427", "body": "Similar to above, log statements under trace would be good.", "bodyText": "Similar to above, log statements under trace would be good.", "bodyHTML": "<p dir=\"auto\">Similar to above, log statements under trace would be good.</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:36:28Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -179,9 +185,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n             service = serviceRegistry.findServiceByExactServiceName(name);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -193,8 +203,10 @@ public abstract class AbstractServicesManager implements ServicesManager {\n     \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        services.get(result.getId(), k-> result);\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n         return result;\n     }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzQ4Ng==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043486", "body": "```suggestion\r\n        var result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n          \n          \n            \n                    var result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">var</span> result<span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>serviceRegistry<span class=\"pl-k\">.</span>findServiceByExactServiceName(name, clazz);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">var</span> result<span class=\"x x-first x-last\"> </span><span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>serviceRegistry<span class=\"pl-k\">.</span>findServiceByExactServiceName(name, clazz);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-25T18:36:49Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -193,8 +203,10 @@ public abstract class AbstractServicesManager implements ServicesManager {\n     \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        services.get(result.getId(), k-> result);\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n         return result;\n     }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzY5MA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043690", "body": "This won't work.\r\n\r\nWhat happens if the result is null?", "bodyText": "This won't work.\nWhat happens if the result is null?", "bodyHTML": "<p dir=\"auto\">This won't work.</p>\n<p dir=\"auto\">What happens if the result is null?</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:37:48Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -193,8 +203,10 @@ public abstract class AbstractServicesManager implements ServicesManager {\n     \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        services.get(result.getId(), k-> result);\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n         return result;\n     }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MzgxMw==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043813", "body": "Likewise, logs would be good.", "bodyText": "Likewise, logs would be good.", "bodyHTML": "<p dir=\"auto\">Likewise, logs would be good.</p>", "author": "mmoayyed", "createdAt": "2020-05-25T18:38:16Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -210,9 +222,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceByExactServiceId(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Mzg1NA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r430043854", "body": "```suggestion\r\n                    LOGGER.trace(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n          \n          \n            \n                                LOGGER.trace(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">debug</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding registered service [{}] with name [{}] and internal identifier [{}]<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">trace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Adding registered service [{}] with name [{}] and internal identifier [{}]<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-25T18:38:32Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +156,122 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values()\n-            .stream()\n-            .filter(this::validateAndFilterServiceByEnvironment)\n-            .filter(getRegisteredServicesFilteringPredicate())\n-            .sorted()\n-            .peek(RegisteredService::initialize)\n-            .collect(Collectors.toList());\n+        return this.services.asMap().values().\n+                stream().\n+                filter(this::validateAndFilterServiceByEnvironment).\n+                filter(getRegisteredServicesFilteringPredicate()).\n+                sorted().\n+                peek(RegisteredService::initialize).\n+                collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n-            .stream()\n-            .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n-                return r.getId();\n-            }, Function.identity(), (r, s) -> s));\n+        this.services.putAll(this.serviceRegistry.load()\n+                .stream()\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",", "originalCommit": "db472fe124747d4acf8c50a634c3cf1b5fb82e2f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e588a12be9d4ede0518bdb716fd5741b25356689", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -244,7 +260,7 @@ public abstract class AbstractServicesManager implements ServicesManager {\n         this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n                 .collect(Collectors.toMap(r -> {\n-                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                    LOGGER.trace(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n                             r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n                 }, Function.identity(), (r, s) -> s)));\n", "next_change": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -249,41 +197,29 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n-    @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n-    }\n-    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services.putAll(this.serviceRegistry.load()\n+        this.services = this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toMap(r -> {\n-                    LOGGER.trace(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n-                            r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toConcurrentMap(r -> {\n+                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s)));\n+                }, Function.identity(), (r, s) -> s));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n-        return services.asMap().values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n+        return services.values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n-    \n-    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n-            final Predicate<RegisteredService>... p) {\n-        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n-        return predicates.stream().reduce(x -> true, Predicate::and);\n-    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.asMap().values()\n+        this.services.values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}]}}, {"oid": "e588a12be9d4ede0518bdb716fd5741b25356689", "url": "https://github.com/apereo/cas/commit/e588a12be9d4ede0518bdb716fd5741b25356689", "message": "ServicesManager more tests", "committedDate": "2020-05-29T10:19:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTA1NA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432399054", "body": "```suggestion\r\n            LOGGER.trace(\"The service that matches the service id [{}] is not found in the cache; trying to find it from [{}]\",\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n          \n          \n            \n                        LOGGER.trace(\"The service that matches the service id [{}] is not found in the cache; trying to find it from [{}]\",", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service that matches the <span class=\"x x-first x-last\">serviceId {}</span> is not found in the cache<span class=\"x x-first x-last\">, try</span> to find it from [{}]<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service that matches the <span class=\"x x-first x-last\">service id [{}]</span> is not found in the cache<span class=\"x x-first x-last\">; trying</span> to find it from [{}]<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-29T10:34:12Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,21 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -96,20 +104,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        var service = getCandidateServicesToMatch(serviceId)\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceBy(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n-                        service);\n-            }\n+            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -104,13 +96,16 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        RegisteredService service = getCandidateServicesToMatch(serviceId)\n+        var service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,9 +102,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..f5ce698e92 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,12 +102,12 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+            LOGGER.trace(\"The service that matches the serviceId [{}] is not found in the cache, trying to find it from [{}]\",\n                     serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]  \", serviceRegistry.getName(), \n                         service);\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5OTE1Mg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432399152", "body": "```suggestion\r\n                LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(), \r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n          \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service is found in [{}] and populated to the cache <span class=\"x x-first x-last\">{}  </span><span class=\"pl-pds\">\"</span></span>, serviceRegistry<span class=\"pl-k\">.</span>getName(), </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service is found in [{}] and populated to the cache <span class=\"x x-first x-last\">[{}]</span><span class=\"pl-pds\">\"</span></span>, serviceRegistry<span class=\"pl-k\">.</span>getName(), </td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-29T10:34:30Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -104,10 +96,21 @@ public RegisteredService findServiceBy(final String serviceId) {\n             return null;\n         }\n \n-        val service = getCandidateServicesToMatch(serviceId)\n-            .filter(r -> r.matches(serviceId))\n-            .findFirst()\n-            .orElse(null);\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.matches(serviceId))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), ", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -96,20 +104,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        var service = getCandidateServicesToMatch(serviceId)\n+        RegisteredService service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceBy(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n-                        service);\n-            }\n+            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -104,13 +96,16 @@ public abstract class AbstractServicesManager implements ServicesManager {\n             return null;\n         }\n \n-        RegisteredService service = getCandidateServicesToMatch(serviceId)\n+        var service = getCandidateServicesToMatch(serviceId)\n                 .filter(r -> r.matches(serviceId))\n                 .findFirst()\n                 .orElse(null);\n \n         if (service == null) {\n-            service = this.serviceRegistry.findServiceByExactServiceId(serviceId);\n+            service = serviceRegistry.findServiceBy(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n         }\n \n         if (service != null) {\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 548acac733..f1c3244150 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,9 +102,13 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n+            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                        service);\n             }\n         }\n \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..f5ce698e92 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -102,12 +102,12 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 .orElse(null);\n \n         if (service == null) {\n-            LOGGER.trace(\"The service that matches the serviceId {} is not found in the cache, try to find it from [{}]\",\n+            LOGGER.trace(\"The service that matches the serviceId [{}] is not found in the cache, trying to find it from [{}]\",\n                     serviceId, serviceRegistry.getName());\n             service = serviceRegistry.findServiceBy(serviceId);\n             if (service != null) {\n                 services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(), \n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]  \", serviceRegistry.getName(), \n                         service);\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDcwMg==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400702", "body": "This doesn't look right. Should be:\r\n\r\n\r\n```\r\nresult = services.get(result.getId(), k -> this.serviceRegistry.findServiceById(id, clazz));\r\n```\r\n\r\nAlso, don't forget to check the result to make sure it's has the correct type based on `clazz`", "bodyText": "This doesn't look right. Should be:\nresult = services.get(result.getId(), k -> this.serviceRegistry.findServiceById(id, clazz));\n\nAlso, don't forget to check the result to make sure it's has the correct type based on clazz", "bodyHTML": "<p dir=\"auto\">This doesn't look right. Should be:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"result = services.get(result.getId(), k -&gt; this.serviceRegistry.findServiceById(id, clazz));\n\"><pre><code>result = services.get(result.getId(), k -&gt; this.serviceRegistry.findServiceById(id, clazz));\n</code></pre></div>\n<p dir=\"auto\">Also, don't forget to check the result to make sure it's has the correct type based on <code>clazz</code></p>", "author": "mmoayyed", "createdAt": "2020-05-29T10:38:12Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDg3NQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400875", "body": "```suggestion\r\n            LOGGER.trace(\"The service with name [{}] is not found in the cache, try to find it from [{}]\",\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n          \n          \n            \n                        LOGGER.trace(\"The service with name [{}] is not found in the cache, try to find it from [{}]\",", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service with name <span class=\"x x-first x-last\">{}</span> is not found in the cache, try to find it from [{}]<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service with name <span class=\"x x-first x-last\">[{}]</span> is not found in the cache, try to find it from [{}]<span class=\"pl-pds\">\"</span></span>,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-29T10:38:37Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDk3OQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432400979", "body": "```suggestion\r\n                LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),\r\n```\r\n\r\nAlso, formatting of parameters is off here. Should be: \"The service [{}] is found in service registry [{}]\" and cached.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n          \n          \n            \n                            LOGGER.trace(\"The service is found in [{}] and populated to the cache [{}]\", serviceRegistry.getName(),\n          \n      \n    \n    \n  \n\nAlso, formatting of parameters is off here. Should be: \"The service [{}] is found in service registry [{}]\" and cached.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service is found in [{}] and populated to the cache <span class=\"x x-first x-last\">{}  </span><span class=\"pl-pds\">\"</span></span>, serviceRegistry<span class=\"pl-k\">.</span>getName(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>trace(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The service is found in [{}] and populated to the cache <span class=\"x x-first x-last\">[{}]</span><span class=\"pl-pds\">\"</span></span>, serviceRegistry<span class=\"pl-k\">.</span>getName(),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Also, formatting of parameters is off here. Should be: \"The service [{}] is found in service registry [{}]\" and cached.</p>", "author": "mmoayyed", "createdAt": "2020-05-29T10:38:52Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTU5OQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432401599", "body": "Same as above.", "bodyText": "Same as above.", "bodyHTML": "<p dir=\"auto\">Same as above.</p>", "author": "mmoayyed", "createdAt": "2020-05-29T10:40:20Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMTY2Nw==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432401667", "body": "Same as above.", "bodyText": "Same as above.", "bodyHTML": "<p dir=\"auto\">Same as above.</p>", "author": "mmoayyed", "createdAt": "2020-05-29T10:40:29Z", "path": "core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java", "diffHunk": "@@ -155,48 +160,134 @@ public RegisteredService findServiceBy(final Service service) {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id);\n+        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n+    @Override\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceById(id, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n+\n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n+                    name, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n+    @Override\n+    public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n+        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        if (result != null) {\n+            services.get(result.getId(), k -> result);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n+                    serviceId, serviceRegistry.getName());\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n+                        service);", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex f1c3244150..690e5c3e7d 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -160,87 +158,37 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        val result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n+        RegisteredService result = this.services.get(id);\n+\n+        if (result == null) {\n+            result = this.serviceRegistry.findServiceById(id);\n+        }\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceById(id, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        if (StringUtils.isBlank(name)) {\n-            return null;\n-        }\n-\n-        var service = services.asMap().values().stream()\n-                .filter(r -> r.getName().equals(name))\n-                .findFirst()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with name {} is not found in the cache, try to find it from [{}]\",\n-                    name, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceName(name);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        return this.serviceRegistry.findServiceById(id, clazz);\n     }\n-    \n+\n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        val result = this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n-        if (result != null) {\n-            services.get(result.getId(), k -> result);\n-        }\n-        return result;\n+        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n-        if (StringUtils.isBlank(serviceId)) {\n-            return null;\n-        }\n-\n-        var service = getCandidateServicesToMatch(serviceId)\n-                .filter(r -> r.getServiceId().equals(serviceId))\n-                .findAny()\n-                .orElse(null);\n-\n-        if (service == null) {\n-            LOGGER.trace(\"The service with serviceId {} is not found in the cache, try to find it from [{}]\",\n-                    serviceId, serviceRegistry.getName());\n-            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n-            if (service != null) {\n-                services.put(service.getId(), service);\n-                LOGGER.trace(\"The service is found in [{}] and populated to the cache {}  \", serviceRegistry.getName(),\n-                        service);\n-            }\n-        }\n-\n-        if (service != null) {\n-            service.initialize();\n-        }\n-        return validateRegisteredService(service);      \n+    public RegisteredService findServiceByName(final String name) {\n+        return this.serviceRegistry.findServiceByExactServiceName(name);\n     }\n-    \n+\n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.asMap().values().\n+        return this.services.values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -158,37 +156,75 @@ public abstract class AbstractServicesManager implements ServicesManager {\n \n     @Override\n     public RegisteredService findServiceBy(final long id) {\n-        RegisteredService result = this.services.get(id);\n-\n-        if (result == null) {\n-            result = this.serviceRegistry.findServiceById(id);\n-        }\n+        var result = this.services.get(id, k -> this.serviceRegistry.findServiceById(id));\n         return validateRegisteredService(result);\n     }\n \n     @Override\n-    public Stream<? extends RegisteredService> getAllServicesStream() {\n-        return this.serviceRegistry.getServicesStream();\n+    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n+        var result= this.serviceRegistry.findServiceById(id, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public <T extends RegisteredService> T findServiceBy(final long id, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceById(id, clazz);\n-    }\n+    public RegisteredService findServiceByName(final String name) {\n+        if (StringUtils.isBlank(name)) {\n+            return null;\n+        }\n \n+        var service = services.asMap().values().stream()\n+                .filter(r -> r.getName().equals(name))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceName(name);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);\n+    }\n+    \n     @Override\n     public <T extends RegisteredService> T findServiceByName(final String name, final Class<T> clazz) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        var result= this.serviceRegistry.findServiceByExactServiceName(name, clazz);\n+        services.get(result.getId(), k-> result);\n+        return result;\n     }\n \n     @Override\n-    public RegisteredService findServiceByName(final String name) {\n-        return this.serviceRegistry.findServiceByExactServiceName(name);\n-    }\n+    public RegisteredService findServiceByExactServiceId(final String serviceId){      \n+        if (StringUtils.isBlank(serviceId)) {\n+            return null;\n+        }\n+\n+        var service = getCandidateServicesToMatch(serviceId)\n+                .filter(r -> r.getServiceId().equals(serviceId))\n+                .findAny()\n+                .orElse(null);\n \n+        if (service == null) {\n+            service = serviceRegistry.findServiceByExactServiceId(serviceId);\n+            if (service != null) {\n+                services.put(service.getId(), service);\n+            }\n+        }\n+\n+        if (service != null) {\n+            service.initialize();\n+        }\n+        return validateRegisteredService(service);      \n+    }\n+    \n     @Override\n     public Collection<RegisteredService> getAllServices() {\n-        return this.services.values().\n+        return this.services.asMap().values().\n                 stream().\n                 filter(this::validateAndFilterServiceByEnvironment).\n                 filter(getRegisteredServicesFilteringPredicate()).\n", "next_change": null}, {"header": "diff --git a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\nindex 690e5c3e7d..548acac733 100644\n--- a/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n+++ b/core/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServicesManager.java\n", "chunk": "@@ -197,29 +233,41 @@ public abstract class AbstractServicesManager implements ServicesManager {\n                 collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Stream<? extends RegisteredService> getAllServicesStream() {\n+        return this.serviceRegistry.getServicesStream();\n+    }\n+    \n     @Override\n     public Collection<RegisteredService> load() {\n         LOGGER.trace(\"Loading services from [{}]\", serviceRegistry.getName());\n-        this.services = this.serviceRegistry.load()\n+        this.services.putAll(this.serviceRegistry.load()\n                 .stream()\n-                .collect(Collectors.toConcurrentMap(r -> {\n-                LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\", r.getServiceId(), r.getName(), r.getId());\n+                .collect(Collectors.toMap(r -> {\n+                    LOGGER.debug(\"Adding registered service [{}] with name [{}] and internal identifier [{}]\",\n+                            r.getServiceId(), r.getName(), r.getId());\n                     return r.getId();\n-                }, Function.identity(), (r, s) -> s));\n+                }, Function.identity(), (r, s) -> s)));\n         loadInternal();\n         publishEvent(new CasRegisteredServicesLoadedEvent(this, getAllServices()));\n         evaluateExpiredServiceDefinitions();\n-        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.size(), this.serviceRegistry.getName());\n-        return services.values();\n+        LOGGER.info(\"Loaded [{}] service(s) from [{}].\", this.services.asMap().size(), this.serviceRegistry.getName());\n+        return services.asMap().values();\n     }\n \n     @Override\n     public long count() {\n         return this.serviceRegistry.size();\n     }\n+    \n+    private static Predicate<RegisteredService> getRegisteredServicesFilteringPredicate(\n+            final Predicate<RegisteredService>... p) {\n+        val predicates = Stream.of(p).collect(Collectors.toCollection(ArrayList::new));\n+        return predicates.stream().reduce(x -> true, Predicate::and);\n+    }\n \n     private void evaluateExpiredServiceDefinitions() {\n-        this.services.values()\n+        this.services.asMap().values()\n                 .stream()\n                 .filter(RegisteredServiceAccessStrategyUtils.getRegisteredServiceExpirationPolicyPredicate().negate())\n                 .filter(Objects::nonNull)\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzAwOQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403009", "body": "```suggestion\r\n     * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n          \n          \n            \n                 * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">services</span> cache duration specifies the fixed duration <span class=\"pl-k\">for</span> an entry to be automatically removed from the cache after its creation or update.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Services</span> cache duration specifies the fixed duration <span class=\"pl-k\">for</span> an entry to be automatically removed from the cache after its creation or update.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-29T10:43:23Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..48dcfa270d 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,22 +164,7 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n-    \n-    /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n-    */\n-    private String cache = \"PT5M\";\n-\n-    /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n-    */\n-    private long cacheSize = Long.MAX_VALUE;\n \n-    /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n-    */\n-    private int cachCapacity = Integer.MAX_VALUE;\n-    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 48dcfa270d..3af5f28085 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,7 +164,22 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 3af5f28085..27437db4fe 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration.\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size.\n+     * services cache size specifies the maximum number of entries the cache may contain.\n     */\n     private long cacheSize = Long.MAX_VALUE;\n \n     /**\n-     * services cache capacity.\n+     * services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..ba48dd617e 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+     * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n+     * Services cache size specifies the maximum number of entries the cache may contain.\n     */\n-    private long cacheSize = Long.MAX_VALUE;\n+    private long cacheSize = 1000L;\n \n     /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n+     * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "ef34b087459d3123589b4a8a9fddd9425854de49", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex ba48dd617e..8b12b3c584 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ServiceRegistryProperties implements Serializable {\n     /**\n      * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n-    private int cachCapacity = Integer.MAX_VALUE;\n+    private int cachCapacity = 1000;\n     \n     /**\n      * Types of service managers that one can control.\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzA1OQ==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403059", "body": "```suggestion\r\n     * Services cache size specifies the maximum number of entries the cache may contain.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache size specifies the maximum number of entries the cache may contain.\n          \n          \n            \n                 * Services cache size specifies the maximum number of entries the cache may contain.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">services</span> cache size specifies the maximum number of entries the cache may contain.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Services</span> cache size specifies the maximum number of entries the cache may contain.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-29T10:43:31Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size specifies the maximum number of entries the cache may contain.", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..48dcfa270d 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,22 +164,7 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n-    \n-    /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n-    */\n-    private String cache = \"PT5M\";\n-\n-    /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n-    */\n-    private long cacheSize = Long.MAX_VALUE;\n \n-    /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n-    */\n-    private int cachCapacity = Integer.MAX_VALUE;\n-    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 48dcfa270d..3af5f28085 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,7 +164,22 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 3af5f28085..27437db4fe 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration.\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size.\n+     * services cache size specifies the maximum number of entries the cache may contain.\n     */\n     private long cacheSize = Long.MAX_VALUE;\n \n     /**\n-     * services cache capacity.\n+     * services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..ba48dd617e 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+     * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n+     * Services cache size specifies the maximum number of entries the cache may contain.\n     */\n-    private long cacheSize = Long.MAX_VALUE;\n+    private long cacheSize = 1000L;\n \n     /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n+     * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "ef34b087459d3123589b4a8a9fddd9425854de49", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex ba48dd617e..8b12b3c584 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ServiceRegistryProperties implements Serializable {\n     /**\n      * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n-    private int cachCapacity = Integer.MAX_VALUE;\n+    private int cachCapacity = 1000;\n     \n     /**\n      * Types of service managers that one can control.\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzEyNA==", "url": "https://github.com/apereo/cas/pull/4854#discussion_r432403124", "body": "```suggestion\r\n     * Services cache capacity sets the minimum total size for the internal data structures.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * services cache capacity sets the minimum total size for the internal data structures.\n          \n          \n            \n                 * Services cache capacity sets the minimum total size for the internal data structures.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"x x-first x-last\">services</span> cache capacity sets the minimum total size <span class=\"pl-k\">for</span> the internal data structures.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi x x-first x-last\">Services</span> cache capacity sets the minimum total size <span class=\"pl-k\">for</span> the internal data structures.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mmoayyed", "createdAt": "2020-05-29T10:43:40Z", "path": "api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java", "diffHunk": "@@ -164,7 +164,22 @@\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size specifies the maximum number of entries the cache may contain.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity sets the minimum total size for the internal data structures.", "originalCommit": "e588a12be9d4ede0518bdb716fd5741b25356689", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..48dcfa270d 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,22 +164,7 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n-    \n-    /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n-    */\n-    private String cache = \"PT5M\";\n-\n-    /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n-    */\n-    private long cacheSize = Long.MAX_VALUE;\n \n-    /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n-    */\n-    private int cachCapacity = Integer.MAX_VALUE;\n-    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 48dcfa270d..3af5f28085 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -164,7 +164,22 @@ public class ServiceRegistryProperties implements Serializable {\n      * </ul>\n      */\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n+    \n+    /**\n+     * services cache duration.\n+    */\n+    private String cache = \"PT5M\";\n+\n+    /**\n+     * services cache size.\n+    */\n+    private long cacheSize = Long.MAX_VALUE;\n \n+    /**\n+     * services cache capacity.\n+    */\n+    private int cachCapacity = Integer.MAX_VALUE;\n+    \n     /**\n      * Types of service managers that one can control.\n      */\n", "next_change": {"commit": "528f21e68f420da94b5b3451aada6da549bed65b", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 3af5f28085..27437db4fe 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration.\n+     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size.\n+     * services cache size specifies the maximum number of entries the cache may contain.\n     */\n     private long cacheSize = Long.MAX_VALUE;\n \n     /**\n-     * services cache capacity.\n+     * services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex 27437db4fe..ba48dd617e 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -166,17 +166,17 @@ public class ServiceRegistryProperties implements Serializable {\n     private ServiceManagementTypes managementType = ServiceManagementTypes.DEFAULT;\n     \n     /**\n-     * services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n+     * Services cache duration specifies the fixed duration for an entry to be automatically removed from the cache after its creation or update.\n     */\n     private String cache = \"PT5M\";\n \n     /**\n-     * services cache size specifies the maximum number of entries the cache may contain.\n+     * Services cache size specifies the maximum number of entries the cache may contain.\n     */\n-    private long cacheSize = Long.MAX_VALUE;\n+    private long cacheSize = 1000L;\n \n     /**\n-     * services cache capacity sets the minimum total size for the internal data structures.\n+     * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n     private int cachCapacity = Integer.MAX_VALUE;\n     \n", "next_change": {"commit": "ef34b087459d3123589b4a8a9fddd9425854de49", "changed_code": [{"header": "diff --git a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\nindex ba48dd617e..8b12b3c584 100644\n--- a/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n+++ b/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/core/services/ServiceRegistryProperties.java\n", "chunk": "@@ -178,7 +178,7 @@ public class ServiceRegistryProperties implements Serializable {\n     /**\n      * Services cache capacity sets the minimum total size for the internal data structures.\n     */\n-    private int cachCapacity = Integer.MAX_VALUE;\n+    private int cachCapacity = 1000;\n     \n     /**\n      * Types of service managers that one can control.\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "url": "https://github.com/apereo/cas/commit/e06ae034b9b1dad8f7c3adc22fa39fd144e837ff", "message": "ServicesManager uses ServiceRegistry", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "ebf2fe473dd3cd70716393477fc25235b201b3cb", "url": "https://github.com/apereo/cas/commit/ebf2fe473dd3cd70716393477fc25235b201b3cb", "message": "Cache services in ServicesManager", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "528f21e68f420da94b5b3451aada6da549bed65b", "url": "https://github.com/apereo/cas/commit/528f21e68f420da94b5b3451aada6da549bed65b", "message": "ServicesManager more tests", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "url": "https://github.com/apereo/cas/commit/52c4cdcd89b9ea20417b9de95a39f4e02c55ef14", "message": "fixes and changes for test", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "ef34b087459d3123589b4a8a9fddd9425854de49", "url": "https://github.com/apereo/cas/commit/ef34b087459d3123589b4a8a9fddd9425854de49", "message": "Change cache capacity", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "5fe13d76c372fa43dfb83d07e2cf1626887dc5fe", "url": "https://github.com/apereo/cas/commit/5fe13d76c372fa43dfb83d07e2cf1626887dc5fe", "message": "Fix test", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "25a37fc3ae39b8a6bdf9bdb6f70c5c7e25e6b364", "url": "https://github.com/apereo/cas/commit/25a37fc3ae39b8a6bdf9bdb6f70c5c7e25e6b364", "message": "More tests", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "url": "https://github.com/apereo/cas/commit/1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "message": "Fix simple tests", "committedDate": "2020-06-15T08:29:17Z", "type": "commit"}, {"oid": "1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "url": "https://github.com/apereo/cas/commit/1bf27ab93f5758d9c923cf87cd0dd036f561ab10", "message": "Fix simple tests", "committedDate": "2020-06-15T08:29:17Z", "type": "forcePushed"}, {"oid": "3eaf406edc4b8253aeb86784d237077691d8c8c1", "url": "https://github.com/apereo/cas/commit/3eaf406edc4b8253aeb86784d237077691d8c8c1", "message": "revert change", "committedDate": "2020-06-15T08:32:10Z", "type": "commit"}, {"oid": "c96e6950e142e5c3feb44c739ae1f303b25dcd6f", "url": "https://github.com/apereo/cas/commit/c96e6950e142e5c3feb44c739ae1f303b25dcd6f", "message": "fix SAML tests", "committedDate": "2020-06-15T15:16:07Z", "type": "commit"}]}