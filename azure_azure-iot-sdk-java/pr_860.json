{"pr_number": 860, "pr_title": "feat(e2e): Add e2e tests for PnP", "pr_author": "bikamani", "pr_createdAt": "2020-07-13T20:28:25Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/860", "timeline": [{"oid": "8e675b03ac7930a12d9466e159af996fb362685c", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/8e675b03ac7930a12d9466e159af996fb362685c", "message": "add e2e for PnP", "committedDate": "2020-07-13T20:18:25Z", "type": "commit"}, {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/75b2cc2301fff0e7e609bf055464a2be459a552a", "message": "refactor", "committedDate": "2020-07-13T20:24:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODMxNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453918316", "body": "is there as `Device` and `Module` in some other imported package that prevents this from being imported at class level?", "bodyText": "is there as Device and Module in some other imported package that prevents this from being imported at class level?", "bodyHTML": "<p dir=\"auto\">is there as <code>Device</code> and <code>Module</code> in some other imported package that prevents this from being imported at class level?</p>", "author": "abhipsaMisra", "createdAt": "2020-07-13T20:38:59Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;", "originalCommit": "75b2cc2301fff0e7e609bf055464a2be459a552a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MTUxNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453941514", "bodyText": "I moved it to the imports.", "author": "bikamani", "createdAt": "2020-07-13T21:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "683d4e2a991ea047c87079bdea4458d429251717", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex e8039489f..27f244f5d 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -77,8 +78,8 @@ public class TwinPnPTests extends IntegrationTest\n     public class TwinPnPTestInstance\n     {\n         public IotHubClientProtocol protocol;\n-        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;\n-        private com.microsoft.azure.sdk.iot.service.Module moduleForRegistryManager;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n \n         private DeviceTwin sCDeviceTwin;\n         private TwinPnPTests.TestDevice testDevice;\n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -1,185 +1,234 @@\n package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n \n import com.microsoft.azure.sdk.iot.device.*;\n-import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n-import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n import com.microsoft.azure.sdk.iot.service.Device;\n import com.microsoft.azure.sdk.iot.service.Module;\n import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n \n+import javax.net.ssl.SSLContext;\n import java.io.IOException;\n-import java.net.URISyntaxException;\n import java.util.*;\n \n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n import static org.junit.Assert.assertEquals;\n \n /**\n  * Test class containing all tests to be run for PnP.\n  */\n @IotHubTest\n+@StandardTierHubOnlyTest\n @RunWith(Parameterized.class)\n public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n         isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n-            registryManager = null;\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-            testInstance.testDevice.deviceClient = null;\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n-            testInstance.testDevice.moduleClient = null;\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    @StandardTierHubOnlyTest\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    @StandardTierHubOnlyTest\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODcxMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453918712", "body": "Q - why do we have `new TestDevice()` here and in `TwinPnPTestInstance()` constructor as well?", "bodyText": "Q - why do we have new TestDevice() here and in TwinPnPTestInstance() constructor as well?", "bodyHTML": "<p dir=\"auto\">Q - why do we have <code>new TestDevice()</code> here and in <code>TwinPnPTestInstance()</code> constructor as well?</p>", "author": "abhipsaMisra", "createdAt": "2020-07-13T20:39:42Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;\n+        private com.microsoft.azure.sdk.iot.service.Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            this.testDevice = new TestDevice();\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();", "originalCommit": "75b2cc2301fff0e7e609bf055464a2be459a552a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MzA4Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453943082", "bodyText": "Good catch, removed the one from constructor", "author": "bikamani", "createdAt": "2020-07-13T21:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex e8039489f..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -1,185 +1,234 @@\n package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n \n import com.microsoft.azure.sdk.iot.device.*;\n-import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n-import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n-import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n \n+import javax.net.ssl.SSLContext;\n import java.io.IOException;\n-import java.net.URISyntaxException;\n import java.util.*;\n \n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n import static org.junit.Assert.assertEquals;\n \n /**\n  * Test class containing all tests to be run for PnP.\n  */\n @IotHubTest\n+@StandardTierHubOnlyTest\n @RunWith(Parameterized.class)\n public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n         isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;\n-        private com.microsoft.azure.sdk.iot.service.Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-            this.testDevice = new TestDevice();\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n-            registryManager = null;\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-            testInstance.testDevice.deviceClient = null;\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n-            testInstance.testDevice.moduleClient = null;\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    @StandardTierHubOnlyTest\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    @StandardTierHubOnlyTest\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}, {"oid": "683d4e2a991ea047c87079bdea4458d429251717", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/683d4e2a991ea047c87079bdea4458d429251717", "message": "address comments", "committedDate": "2020-07-13T21:27:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453946287", "body": "Seems like you could also parameterize Device vs Module here", "bodyText": "Seems like you could also parameterize Device vs Module here", "bodyHTML": "<p dir=\"auto\">Seems like you could also parameterize Device vs Module here</p>", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:33:34Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODE1Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453948153", "bodyText": "See here for an example: \n  \n    \n      azure-iot-sdk-java/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/SendMessagesCommon.java\n    \n    \n         Line 63\n      in\n      fc2ed81\n    \n    \n    \n    \n\n        \n          \n           {HTTPS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint, false},", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTMxOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453949318", "bodyText": "cool, let me check that.", "author": "bikamani", "createdAt": "2020-07-13T21:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTU3Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453949573", "bodyText": "Also x509 vs SAS authentication. Since those two have pretty different connect flows, it would be worth testing that", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTEzNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r454709137", "bodyText": "done", "author": "bikamani", "createdAt": "2020-07-14T23:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -1,185 +1,234 @@\n package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n \n import com.microsoft.azure.sdk.iot.device.*;\n-import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n-import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n import com.microsoft.azure.sdk.iot.service.Device;\n import com.microsoft.azure.sdk.iot.service.Module;\n import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n \n+import javax.net.ssl.SSLContext;\n import java.io.IOException;\n-import java.net.URISyntaxException;\n import java.util.*;\n \n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n import static org.junit.Assert.assertEquals;\n \n /**\n  * Test class containing all tests to be run for PnP.\n  */\n @IotHubTest\n+@StandardTierHubOnlyTest\n @RunWith(Parameterized.class)\n public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n         isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n-            registryManager = null;\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-            testInstance.testDevice.deviceClient = null;\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n-            testInstance.testDevice.moduleClient = null;\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    @StandardTierHubOnlyTest\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    @StandardTierHubOnlyTest\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453948459", "body": "You can move this label up to the class level since all pnp twin tests will be standard tier only", "bodyText": "You can move this label up to the class level since all pnp twin tests will be standard tier only", "bodyHTML": "<p dir=\"auto\">You can move this label up to the class level since all pnp twin tests will be standard tier only</p>", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:37:58Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;\n+        }\n+        if (testInstance.testDevice.moduleClient != null)\n+        {\n+            testInstance.testDevice.moduleClient.closeNow();\n+            testInstance.testDevice.moduleClient = null;\n+        }\n+\n+        if (testInstance != null && testInstance.testDevice != null)\n+        {\n+            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            {\n+                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @StandardTierHubOnlyTest", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDQwOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453950409", "bodyText": "That's true I can move it up in this case", "author": "bikamani", "createdAt": "2020-07-13T21:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MjkxOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453952918", "bodyText": "@timtay-microsoft  Is there something like this for c# as well?", "author": "vinagesh", "createdAt": "2020-07-13T21:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2Mjc1Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453962756", "bodyText": "Standard vs Basic tier? Not that I know of. C# doesn't test against basic tier hubs", "author": "timtay-microsoft", "createdAt": "2020-07-13T22:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e85afa5f34386a4d642e8be147fe951ce67a1b80", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..f61fd4516 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -151,7 +152,6 @@ public class TwinPnPTests extends IntegrationTest\n     }\n \n     @Test\n-    @StandardTierHubOnlyTest\n     public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n     {\n         // arrange\n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex f61fd4516..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,146 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n         isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n-            registryManager = null;\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-            testInstance.testDevice.deviceClient = null;\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n-            testInstance.testDevice.moduleClient = null;\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453950827", "body": "No need to set fields to null when you are done with them. Here and below", "bodyText": "No need to set fields to null when you are done with them. Here and below", "bodyHTML": "<p dir=\"auto\">No need to set fields to null when you are done with them. Here and below</p>", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:43:17Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzE3Ng==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953176", "bodyText": "why would you want a dangling object?", "author": "prmathur-microsoft", "createdAt": "2020-07-13T21:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NzEyMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453967123", "bodyText": "http://net-informations.com/java/cjava/objectonull.htm\nThat doesn't help garbage collection as much as you might think", "author": "timtay-microsoft", "createdAt": "2020-07-13T22:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..afe4d0706 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -132,12 +130,10 @@ public class TwinPnPTests extends IntegrationTest\n         if (testInstance.testDevice.deviceClient != null)\n         {\n             testInstance.testDevice.deviceClient.closeNow();\n-            testInstance.testDevice.deviceClient = null;\n         }\n         if (testInstance.testDevice.moduleClient != null)\n         {\n             testInstance.testDevice.moduleClient.closeNow();\n-            testInstance.testDevice.moduleClient = null;\n         }\n \n         if (testInstance != null && testInstance.testDevice != null)\n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex afe4d0706..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,141 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951383", "body": "I know you are following the pattern here, but I'd rather this name specified that it is a client. Something like \"twinServiceClient\" or \"twinClient\" instead of \"sCDeviceTwin\"", "bodyText": "I know you are following the pattern here, but I'd rather this name specified that it is a client. Something like \"twinServiceClient\" or \"twinClient\" instead of \"sCDeviceTwin\"", "bodyHTML": "<p dir=\"auto\">I know you are following the pattern here, but I'd rather this name specified that it is a client. Something like \"twinServiceClient\" or \"twinClient\" instead of \"sCDeviceTwin\"</p>", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:44:31Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzYwNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953607", "bodyText": "I like that suggestion too. I would follow the same pattern like other tests for less confusion though.", "author": "bikamani", "createdAt": "2020-07-13T21:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NjkyMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453966923", "bodyText": "Now would be a good time to rename the other uses of this naming then", "author": "timtay-microsoft", "createdAt": "2020-07-13T22:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -1,185 +1,234 @@\n package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n \n import com.microsoft.azure.sdk.iot.device.*;\n-import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n-import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n import com.microsoft.azure.sdk.iot.service.Device;\n import com.microsoft.azure.sdk.iot.service.Module;\n import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n-import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n \n+import javax.net.ssl.SSLContext;\n import java.io.IOException;\n-import java.net.URISyntaxException;\n import java.util.*;\n \n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n import static org.junit.Assert.assertEquals;\n \n /**\n  * Test class containing all tests to be run for PnP.\n  */\n @IotHubTest\n+@StandardTierHubOnlyTest\n @RunWith(Parameterized.class)\n public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n         isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n-            registryManager = null;\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-            testInstance.testDevice.deviceClient = null;\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n-            testInstance.testDevice.moduleClient = null;\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    @StandardTierHubOnlyTest\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    @StandardTierHubOnlyTest\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTUxMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951511", "body": "No need to set this to null", "bodyText": "No need to set this to null", "bodyHTML": "<p dir=\"auto\">No need to set this to null</p>", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:44:53Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..afe4d0706 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -97,7 +96,6 @@ public class TwinPnPTests extends IntegrationTest\n         if (registryManager != null)\n         {\n             registryManager.close();\n-            registryManager = null;\n         }\n     }\n \n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex afe4d0706..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,141 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"oid": "e85afa5f34386a4d642e8be147fe951ce67a1b80", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e85afa5f34386a4d642e8be147fe951ce67a1b80", "message": "move test category", "committedDate": "2020-07-13T21:45:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951813", "body": "What is this variable for?", "bodyText": "What is this variable for?", "bodyHTML": "<p dir=\"auto\">What is this variable for?</p>", "author": "prmathur-microsoft", "createdAt": "2020-07-13T21:45:22Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MjYyMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453952620", "bodyText": "isPullRequest? That value is used when evaluating whether or not to run CI tests", "author": "timtay-microsoft", "createdAt": "2020-07-13T21:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDU3OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954579", "bodyText": "not required, removed those", "author": "bikamani", "createdAt": "2020-07-13T21:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..afe4d0706 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -44,8 +45,6 @@ public class TwinPnPTests extends IntegrationTest\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n-        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex afe4d0706..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,141 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzY3OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953678", "body": "are we using this for something?", "bodyText": "are we using this for something?", "bodyHTML": "<p dir=\"auto\">are we using this for something?</p>", "author": "vinagesh", "createdAt": "2020-07-13T21:47:54Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDcwOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954708", "bodyText": "not required, removed those", "author": "bikamani", "createdAt": "2020-07-13T21:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..afe4d0706 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -44,8 +45,6 @@ public class TwinPnPTests extends IntegrationTest\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n-        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex afe4d0706..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,141 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954018", "body": "Can model id come from constant? ", "bodyText": "Can model id come from constant?", "bodyHTML": "<p dir=\"auto\">Can model id come from constant?</p>", "author": "prmathur-microsoft", "createdAt": "2020-07-13T21:48:24Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "originalCommit": "683d4e2a991ea047c87079bdea4458d429251717", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NTIwOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453955208", "bodyText": "sorry didn't get your question.", "author": "bikamani", "createdAt": "2020-07-13T21:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NTg0MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453965841", "bodyText": "I'd actually like to see this randomized per test so there is no chance of one test interfering with another", "author": "timtay-microsoft", "createdAt": "2020-07-13T22:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NjA5MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453966090", "bodyText": "Is there a restriction to the version number that would keep you from randomizing?", "author": "timtay-microsoft", "createdAt": "2020-07-13T22:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTI0Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r454709242", "bodyText": "Not sure of restriction but added randomizing", "author": "bikamani", "createdAt": "2020-07-14T23:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..afe4d0706 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -33,6 +33,7 @@ import static org.junit.Assert.assertEquals;\n  * Test class containing all tests to be run for PnP.\n  */\n @IotHubTest\n+@StandardTierHubOnlyTest\n @RunWith(Parameterized.class)\n public class TwinPnPTests extends IntegrationTest\n {\n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex afe4d0706..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,141 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}, {"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex 27f244f5d..afe4d0706 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -44,8 +45,6 @@ public class TwinPnPTests extends IntegrationTest\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n-        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n-        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n", "next_change": {"commit": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "changed_code": [{"header": "diff --git a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\nindex afe4d0706..4e1b826da 100644\n--- a/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n+++ b/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java\n", "chunk": "@@ -39,141 +37,198 @@ public class TwinPnPTests extends IntegrationTest\n {\n     protected static String iotHubConnectionString = \"\";\n     private static RegistryManager registryManager;\n-    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+    private String ModelId;\n \n-    @Parameterized.Parameters(name = \"{0}\")\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n     public static Collection inputs() throws IOException\n     {\n         iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n \n         registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n \n-        List inputs =  Arrays.asList(\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n                 new Object[][]\n                         {\n-                                {MQTT},\n-                                {MQTT_WS},\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n                         }\n-        );\n+        ));\n \n-        return inputs;\n-    }\n+        if (!isBasicTierHub)\n+        {\n+            inputs.addAll(Arrays.asList(\n+                    new Object[][]\n+                            {\n+                                    //sas token module client, no proxy\n+                                    {MQTT, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //x509 module client, no proxy\n+                                    {MQTT, SELF_SIGNED, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                    //sas token module client, with proxy\n+                                    {MQTT_WS, SAS, ClientType.MODULE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                            }\n+            ));\n+        }\n \n-    private static class TestDevice\n-    {\n-        String deviceId;\n-        String moduleId;\n-        DeviceClient deviceClient;\n-        ModuleClient moduleClient;\n+        return inputs;\n     }\n \n     public TwinPnPTests.TwinPnPTestInstance testInstance;\n \n-    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    public TwinPnPTests(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n     {\n-        this.testInstance = new TwinPnPTestInstance(protocol);\n+        this.testInstance = new TwinPnPTestInstance(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n     public class TwinPnPTestInstance\n     {\n+        public InternalClient client;\n         public IotHubClientProtocol protocol;\n-        private Device deviceForRegistryManager;\n-        private Module moduleForRegistryManager;\n+        public BaseDevice identity;\n+        public AuthenticationType authenticationType;\n+        public ClientType clientType;\n+        public String publicKeyCert;\n+        public String privateKey;\n+        public String x509Thumbprint;\n \n-        private DeviceTwin sCDeviceTwin;\n-        private TwinPnPTests.TestDevice testDevice;\n+        private DeviceTwin twinServiceClient;\n+        private DeviceTwinDevice twin;\n \n-        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol, AuthenticationType authenticationType, ClientType clientType, String publicKeyCert, String privateKey, String x509Thumbprint) throws IOException\n         {\n             this.protocol = protocol;\n-            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n-        }\n-    }\n+            this.authenticationType = authenticationType;\n+            this.clientType = clientType;\n+            this.publicKeyCert = publicKeyCert;\n+            this.privateKey = privateKey;\n+            this.x509Thumbprint = x509Thumbprint;\n \n-    @AfterClass\n-    public static void tearDown() throws Exception\n-    {\n-        if (registryManager != null)\n-        {\n-            registryManager.close();\n+            this.twinServiceClient = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n         }\n-    }\n \n-    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n-    {\n-        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n-        testInstance.testDevice.deviceClient.open();\n-    }\n-\n-    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n-        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n-        testInstance.testDevice.moduleClient.open();\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception\n-    {\n-        testInstance.testDevice = new TestDevice();\n-        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n-        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n-\n-        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n-        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n-        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n-        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n-\n-    }\n+        public void setup() throws Exception {\n+            String TEST_UUID = UUID.randomUUID().toString();\n+            Random random = new Random();\n+            int TEST_VERSION = random.nextInt();\n+\n+            /* Create unique device names */\n+            String deviceId = \"java-twinPnp-e2e-test-device\".concat(\"-\" + TEST_UUID);\n+            String moduleId = \"java-twinPnp-e2e-test-module\".concat(\"-\" + TEST_UUID);\n+            String deviceX509Id = \"java-twinPnp-e2e-test-device-x509\".concat(\"-\" + TEST_UUID);\n+            String moduleX509Id = \"java-twinPnp-e2e-test-module-x509\".concat(\"-\" + TEST_UUID);\n+            ModelId = \"dtmi:com:test:e2e;\" + TEST_VERSION;\n+\n+            /* Create device on the service */\n+            Device device = Device.createFromId(deviceId, null, null);\n+            Module module = Module.createFromId(deviceId, moduleId, null);\n+\n+            Device deviceX509 = Device.createDevice(deviceX509Id, AuthenticationType.SELF_SIGNED);\n+            deviceX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            Module moduleX509 = Module.createModule(deviceX509Id, moduleX509Id, AuthenticationType.SELF_SIGNED);\n+            moduleX509.setThumbprintFinal(x509Thumbprint, x509Thumbprint);\n+            device = Tools.addDeviceWithRetry(registryManager, device);\n+            deviceX509 = Tools.addDeviceWithRetry(registryManager, deviceX509);\n+            ClientOptions clientOptions = new ClientOptions();\n+            clientOptions.setModelId(ModelId);\n+\n+            if (clientType == ClientType.DEVICE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas device client\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(device), protocol, clientOptions);\n+                    this.identity = device;\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 device client\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new DeviceClient(registryManager.getDeviceConnectionString(deviceX509), protocol, clientOptions);\n+                    this.identity = deviceX509;\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+\n+                this.twin = new DeviceTwinDevice(testInstance.identity.getDeviceId());\n+            }\n+            else if (clientType == ClientType.MODULE_CLIENT)\n+            {\n+                if (authenticationType == SAS)\n+                {\n+                    //sas module client\n+                    module = Tools.addModuleWithRetry(registryManager, module);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, device, module), protocol, clientOptions);\n+                    this.identity = module;\n+                    this.twin = new DeviceTwinDevice(deviceId, moduleId);\n+                }\n+                else if (authenticationType == SELF_SIGNED)\n+                {\n+                    //x509 module client\n+                    moduleX509 = Tools.addModuleWithRetry(registryManager, moduleX509);\n+                    SSLContext sslContext = SSLContextBuilder.buildSSLContext(publicKeyCert, privateKey);\n+                    clientOptions.setSslContext(sslContext);\n+                    this.client = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, deviceX509, moduleX509), protocol, clientOptions);\n+                    this.identity = moduleX509;\n+                    this.twin = new DeviceTwinDevice(deviceX509Id, moduleX509Id);\n+                }\n+                else\n+                {\n+                    throw new Exception(\"Test code has not been written for this path yet\");\n+                }\n+            }\n \n-    @After\n-    public void destroyDevice() throws Exception\n-    {\n-        if (testInstance.testDevice.deviceClient != null)\n-        {\n-            testInstance.testDevice.deviceClient.closeNow();\n-        }\n-        if (testInstance.testDevice.moduleClient != null)\n-        {\n-            testInstance.testDevice.moduleClient.closeNow();\n+            this.client.open();\n         }\n \n-        if (testInstance != null && testInstance.testDevice != null)\n+        public void dispose()\n         {\n-            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            try\n+            {\n+                this.client.closeNow();\n+                registryManager.removeDevice(this.identity.getDeviceId()); //removes all modules associated with this device, too\n+            }\n+            catch (Exception e)\n             {\n-                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n-                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+                // not a big deal if dispose fails. This test suite is not testing the functions in this cleanup.\n+                // If identities are left registered, they will be deleted a nightly cleanup job anyways\n             }\n         }\n     }\n \n-    @Test\n-    public void testDeviceGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException\n+    @After\n+    public void tearDownTest()\n     {\n-        // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createDeviceWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId);\n-\n-        // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n-\n-        // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        this.testInstance.dispose();\n     }\n \n     @Test\n-    public void testModuleGetTwinWithModelId() throws IOException, InterruptedException, URISyntaxException, IotHubException, ModuleClientException {\n+    public void testGetTwinWithModelId() throws Exception {\n         // arrange\n-        ClientOptions clientOptions = new ClientOptions();\n-        clientOptions.setModelId(ModelId);\n-        createModuleWithClientOptions(testInstance.protocol, clientOptions);\n-        DeviceTwinDevice twin = new DeviceTwinDevice(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+        this.testInstance.setup();\n \n         // act\n-        testInstance.sCDeviceTwin.getTwin(twin);\n+        testInstance.twinServiceClient.getTwin(testInstance.twin);\n \n         // assert\n-        assertEquals(ModelId, twin.getModelId());\n+        assertEquals(ModelId, testInstance.twin.getModelId());\n     }\n }\n", "next_change": null}]}}]}}, {"oid": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/aece97b0f24a000ead03751f8c10f430a1c40ccb", "message": "remove unnecessary code", "committedDate": "2020-07-13T21:56:27Z", "type": "commit"}, {"oid": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "message": "add more test cases", "committedDate": "2020-07-14T23:49:12Z", "type": "commit"}, {"oid": "1fb867e24a53e98acf0c695aa145a003da8b89f1", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/1fb867e24a53e98acf0c695aa145a003da8b89f1", "message": "remove conditions", "committedDate": "2020-07-14T23:51:51Z", "type": "commit"}, {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5cc534392e7a1a58596b826e5e80b58e2cfa7ea6", "message": "add module clients", "committedDate": "2020-07-14T23:52:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjIzNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r455242234", "body": "if basic hub, will none of the tests work?", "bodyText": "if basic hub, will none of the tests work?", "bodyHTML": "<p dir=\"auto\">if basic hub, will none of the tests work?</p>", "author": "vinagesh", "createdAt": "2020-07-15T18:05:02Z", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]\n+                        {\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                        }\n+        ));\n+\n+        if (!isBasicTierHub)", "originalCommit": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0NDk3OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r455244978", "bodyText": "In basic hub, modules are not supported.\nhttps://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-scaling", "author": "bikamani", "createdAt": "2020-07-15T18:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjIzNA=="}], "type": "inlineReview", "revised_code": null}]}