{"pr_number": 6681, "pr_title": "Merge contigs into fewer GenomicsDB partitions", "pr_author": "mlathara", "pr_createdAt": "2020-06-29T21:10:15Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6681", "timeline": [{"oid": "d7840b93b3131498c2d1769118fa1d3dd02b7b56", "url": "https://github.com/broadinstitute/gatk/commit/d7840b93b3131498c2d1769118fa1d3dd02b7b56", "message": "Make VCFCodec the default for query streams from GenomicsDB and other minor changes", "committedDate": "2020-06-24T03:37:35Z", "type": "commit"}, {"oid": "da9fa9b2264677668a232fd5f67fa955a09365f4", "url": "https://github.com/broadinstitute/gatk/commit/da9fa9b2264677668a232fd5f67fa955a09365f4", "message": "merge contigs feature and tests", "committedDate": "2020-06-29T04:59:04Z", "type": "commit"}, {"oid": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "url": "https://github.com/broadinstitute/gatk/commit/2bef7c9b7869c6b42d58ae54700d078881f95e45", "message": "fixing merge conflicts", "committedDate": "2020-06-29T05:08:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTIxOA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462499218", "body": "```suggestion\r\n                throw new UserException(\"--\" + MERGE_CONTIGS_INTO_NUM_PARTITIONS + \" requires that entire contigs \" +\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new UserException(MERGE_CONTIGS_INTO_NUM_PARTITIONS+\" requires that entire contigs \" +\n          \n          \n            \n                            throw new UserException(\"--\" + MERGE_CONTIGS_INTO_NUM_PARTITIONS + \" requires that entire contigs \" +", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UserException</span>(<span class=\"pl-c1\">MERGE_CONTIGS_INTO_NUM_PARTITIONS</span><span class=\"pl-k x x-first x-last\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span> requires that entire contigs <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UserException</span>(<span class=\"pl-s\"><span class=\"pl-pds x x-first\">\"</span><span class=\"x\">--</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span><span class=\"pl-c1\">MERGE_CONTIGS_INTO_NUM_PARTITIONS</span><span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span> requires that entire contigs <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lbergelson", "createdAt": "2020-07-29T18:23:42Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -447,6 +462,29 @@ private void assertVariantPathsOrSampleNameFileWasSpecified(){\n         }\n     }\n \n+    private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,\n+                                                   List<SimpleInterval> intervals) {\n+        GenomicsDBVidMapProto.VidMappingPB vidMapPB = importer.getProtobufVidMapping();\n+        if (vidMapPB == null) {\n+            throw new UserException(\"Could not get protobuf vid mappping object from GenomicsDBImporter\");\n+        }\n+        Map<String,GenomicsDBVidMapProto.Chromosome> vidContigs =\n+                vidMapPB.getContigsList().stream().collect(Collectors.toMap(item->item.getName(), item->item));\n+        for (SimpleInterval interval: intervals) {\n+            GenomicsDBVidMapProto.Chromosome vidContig = vidContigs.get(interval.getContig());\n+            long contigLength = vidContig.getLength();\n+            if (interval.getStart() != 1 || interval.getEnd() < contigLength) {\n+                String inputInterval = String.format(\"Contig:%s, Start:%d, End:%d\",\n+                        interval.getContig(), interval.getStart(), interval.getEnd());\n+                String vidInterval = String.format(\"Contig:%s, Start:%d, End:%d\",\n+                        vidContig.getName(), 1, vidContig.getLength());\n+                throw new UserException(MERGE_CONTIGS_INTO_NUM_PARTITIONS+\" requires that entire contigs \" +", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjYyMw==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876623", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTg1NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462499855", "body": "I think this can be static\r\n```suggestion\r\n    private static void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,\r\n```", "bodyText": "I think this can be static\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,\n          \n          \n            \n                private static void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,", "bodyHTML": "<p dir=\"auto\">I think this can be static</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> assertIntervalsCoverEntireContigs(<span class=\"pl-smi\">GenomicsDBImporter</span> importer,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">static</span><span class=\"x x-last\"> </span><span class=\"pl-k\">void</span> assertIntervalsCoverEntireContigs(<span class=\"pl-smi\">GenomicsDBImporter</span> importer,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lbergelson", "createdAt": "2020-07-29T18:24:45Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -447,6 +462,29 @@ private void assertVariantPathsOrSampleNameFileWasSpecified(){\n         }\n     }\n \n+    private void assertIntervalsCoverEntireContigs(GenomicsDBImporter importer,", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjY2OA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876668", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTc2Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462501763", "body": "You can use the Locatable constructor here\r\n```suggestion\r\n        intervals.forEach(i -> outputList.add(new Interval(i)));\r\n```", "bodyText": "You can use the Locatable constructor here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n          \n          \n            \n                    intervals.forEach(i -> outputList.add(new Interval(i)));", "bodyHTML": "<p dir=\"auto\">You can use the Locatable constructor here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        intervals<span class=\"pl-k\">.</span>forEach(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> outputList<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Interval</span>(i<span class=\"pl-k x x-first\">.</span><span class=\"x\">getContig(), i</span><span class=\"pl-k x\">.</span><span class=\"x\">getStart(), i</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getEnd()</span>)));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        intervals<span class=\"pl-k\">.</span>forEach(i <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> outputList<span class=\"pl-k\">.</span>add(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Interval</span>(i)));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lbergelson", "createdAt": "2020-07-29T18:28:10Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjcwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876706", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMjIzMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462502231", "body": "I know this is just moving but there a few minor things that can be updated here.", "bodyText": "I know this is just moving but there a few minor things that can be updated here.", "bodyHTML": "<p dir=\"auto\">I know this is just moving but there a few minor things that can be updated here.</p>", "author": "lbergelson", "createdAt": "2020-07-29T18:29:03Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMzg3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462503879", "body": "Write takes a path directly now.  I would just inline the path creation as well.\r\n```suggestion\r\n        outputList.write(IOUtils.getPath(intervalListOutputPathString));\r\n```", "bodyText": "Write takes a path directly now.  I would just inline the path creation as well.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n          \n          \n            \n                    outputList.write(intervalListOutputPath.toFile());\n          \n          \n            \n                    outputList.write(IOUtils.getPath(intervalListOutputPathString));", "bodyHTML": "<p dir=\"auto\">Write takes a path directly now.  I would just inline the path creation as well.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Path</span> intervalListOutputPath <span class=\"pl-k\">=</span> <span class=\"pl-smi\">IOUtils</span><span class=\"pl-k\">.</span>getPath(intervalListOutputPathString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        outputList<span class=\"pl-k\">.</span>write(intervalListOutputPath<span class=\"pl-k\">.</span>toFile());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        outputList<span class=\"pl-k\">.</span>write(<span class=\"pl-smi\">IOUtils</span><span class=\"pl-k\">.</span>getPath(intervalListOutputPathString));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lbergelson", "createdAt": "2020-07-29T18:31:41Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjkzNA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876934", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMzg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODE1Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462508157", "body": "The most nitpicky comment possible: I think it reads better with 'the'\r\n```suggestion\r\n            // intervals may be null if merge-contigs-into-num-partitions was used to create the workspace\r\n            // if so, we need to wait for vid to be generated before writing out the interval list\r\n```", "bodyText": "The most nitpicky comment possible: I think it reads better with 'the'\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n          \n          \n            \n                        // if so, we need to wait for vid to be generated before writing out interval list\n          \n          \n            \n                        // intervals may be null if merge-contigs-into-num-partitions was used to create the workspace\n          \n          \n            \n                        // if so, we need to wait for vid to be generated before writing out the interval list", "bodyHTML": "<p dir=\"auto\">The most nitpicky comment possible: I think it reads better with 'the'</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> intervals may be null if merge-contigs-into-num-partitions was used to create workspace</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> if so, we need to wait for vid to be generated before writing out interval list</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> intervals may be null if merge-contigs-into-num-partitions was used to create <span class=\"x x-first x-last\">the </span>workspace</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> if so, we need to wait for vid to be generated before writing out <span class=\"x x-first x-last\">the </span>interval list</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lbergelson", "createdAt": "2020-07-29T18:39:18Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());\n+    }\n+\n     /**\n      * Before traversal, fix configuration parameters and initialize\n      * GenomicsDB. Hard-coded to handle only VCF files and headers\n      */\n     @Override\n     public void onTraversalStart() {\n-        if (getIntervalsFromExistingWorkspace) {\n-            final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n-            intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n-            final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n-            outputList.write(intervalListOutputPath.toFile());\n-            return;\n-        }\n         String workspaceDir = BucketUtils.makeFilePathAbsolute(overwriteCreateOrCheckWorkspace());\n         vidMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VIDMAP_FILE_NAME);\n         callsetMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_CALLSETMAP_FILE_NAME);\n         vcfHeaderFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VCFHEADER_FILE_NAME);\n+        if (getIntervalsFromExistingWorkspace) {\n+            // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n+            // if so, we need to wait for vid to be generated before writing out interval list", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3Njk3Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463876977", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:48:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTg3Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462509876", "body": "It's weird that the workspace is passed into here, but then the `createParitionWithBeginAndEnd` uses the workspace field to get it.  I would make both static and pass workspace through to `createPartitionWithBeginAndEnd`, otherwise someone will be very confused when they try pass a different workspace value into this function I think.", "bodyText": "It's weird that the workspace is passed into here, but then the createParitionWithBeginAndEnd uses the workspace field to get it.  I would make both static and pass workspace through to createPartitionWithBeginAndEnd, otherwise someone will be very confused when they try pass a different workspace value into this function I think.", "bodyHTML": "<p dir=\"auto\">It's weird that the workspace is passed into here, but then the <code>createParitionWithBeginAndEnd</code> uses the workspace field to get it.  I would make both static and pass workspace through to <code>createPartitionWithBeginAndEnd</code>, otherwise someone will be very confused when they try pass a different workspace value into this function I think.</p>", "author": "lbergelson", "createdAt": "2020-07-29T18:42:08Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNTQzNg==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462515436", "bodyText": "Alternatively remove the workspace parameter from this method so it's consistent.", "author": "lbergelson", "createdAt": "2020-07-29T18:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzIwNA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877204", "bodyText": "removed workspace", "author": "mlathara", "createdAt": "2020-07-31T22:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjIxMg==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462512212", "body": "this would probably be clearer with a foreach instead of an indexed loop since the indexes are unimportant", "bodyText": "this would probably be clearer with a foreach instead of an indexed loop since the indexes are unimportant", "bodyHTML": "<p dir=\"auto\">this would probably be clearer with a foreach instead of an indexed loop since the indexes are unimportant</p>", "author": "lbergelson", "createdAt": "2020-07-29T18:46:24Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMzg2MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462513861", "bodyText": "It could also be a single streaming expression like the method below but that's really a stylistic choice and I don't care much either way...", "author": "lbergelson", "createdAt": "2020-07-29T18:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzEzMw==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877133", "bodyText": "changed to foreach", "author": "mlathara", "createdAt": "2020-07-31T22:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjc2Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462516767", "body": "While we're here could we move the \"setContig\" call from here, up to where contigPositionBuilder is initialized?  I think it would make it clearer.", "bodyText": "While we're here could we move the \"setContig\" call from here, up to where contigPositionBuilder is initialized?  I think it would make it clearer.", "bodyHTML": "<p dir=\"auto\">While we're here could we move the \"setContig\" call from here, up to where contigPositionBuilder is initialized?  I think it would make it clearer.</p>", "author": "lbergelson", "createdAt": "2020-07-29T18:54:34Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzIxOA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877218", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNzE0NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462517145", "body": "This method uses the workspace field, lets make them all consistent 1 way or another.  (I always like static methods but most of the existing methods are non-static and use the workspace field directly.)", "bodyText": "This method uses the workspace field, lets make them all consistent 1 way or another.  (I always like static methods but most of the existing methods are non-static and use the workspace field directly.)", "bodyHTML": "<p dir=\"auto\">This method uses the workspace field, lets make them all consistent 1 way or another.  (I always like static methods but most of the existing methods are non-static and use the workspace field directly.)</p>", "author": "lbergelson", "createdAt": "2020-07-29T18:55:10Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3ODQ5Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463878496", "bodyText": "changed the methods to use the class members directly", "author": "mlathara", "createdAt": "2020-07-31T22:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNzE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxOTAxMA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462519010", "body": "Maybe we should pull out a constant BOUNDS_START and BOUNDS_END for these to make it clear the array is always structured the same way?  A pair of some sort might be a clearer api for returning these values.", "bodyText": "Maybe we should pull out a constant BOUNDS_START and BOUNDS_END for these to make it clear the array is always structured the same way?  A pair of some sort might be a clearer api for returning these values.", "bodyHTML": "<p dir=\"auto\">Maybe we should pull out a constant BOUNDS_START and BOUNDS_END for these to make it clear the array is always structured the same way?  A pair of some sort might be a clearer api for returning these values.</p>", "author": "lbergelson", "createdAt": "2020-07-29T18:58:45Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzI3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877279", "bodyText": "added constants", "author": "mlathara", "createdAt": "2020-07-31T22:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxOTAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMDMwNA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462520304", "body": "Always attach the underlying exception as the cause.  It makes debugging way easier.", "bodyText": "Always attach the underlying exception as the cause.  It makes debugging way easier.", "bodyHTML": "<p dir=\"auto\">Always attach the underlying exception as the cause.  It makes debugging way easier.</p>", "author": "lbergelson", "createdAt": "2020-07-29T19:00:54Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+                // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n+                // so we just check here that contig starts within the given bounds\n+                intervals.addAll(vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n+                        x.getTiledbColumnOffset() <= bounds[1])\n+                        .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n+                        .collect(Collectors.toList()));\n+            }\n+        } catch (final IOException e) {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzQzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877435", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMDMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTA3MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462525071", "body": "I always like foreach when index is irrelevant.", "bodyText": "I always like foreach when index is irrelevant.", "bodyHTML": "<p dir=\"auto\">I always like foreach when index is irrelevant.</p>", "author": "lbergelson", "createdAt": "2020-07-29T19:09:16Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzMzMA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877330", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyOTY2OA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462529668", "body": "Don't we still want to output the log messages even if we're getting intervals from an existing workspace?  Why does this need to short circuit here?  It seems like we could drop this whole condition because the initializeInputPreloadExecutorService method now guards against null intervals as well.", "bodyText": "Don't we still want to output the log messages even if we're getting intervals from an existing workspace?  Why does this need to short circuit here?  It seems like we could drop this whole condition because the initializeInputPreloadExecutorService method now guards against null intervals as well.", "bodyHTML": "<p dir=\"auto\">Don't we still want to output the log messages even if we're getting intervals from an existing workspace?  Why does this need to short circuit here?  It seems like we could drop this whole condition because the initializeInputPreloadExecutorService method now guards against null intervals as well.</p>", "author": "lbergelson", "createdAt": "2020-07-29T19:17:03Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -602,23 +640,31 @@ private static void assertGVCFHasOnlyOneSample(final String variantPath, final V\n         return new TreeMap<>(loadSampleNameMapFile(sampleToFileMapPath));\n     }\n \n+    /**\n+     * write out interval list to file\n+     */\n+    private void writeIntervalListToFile() {\n+        final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n+        intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n+        final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n+        outputList.write(intervalListOutputPath.toFile());\n+    }\n+\n     /**\n      * Before traversal, fix configuration parameters and initialize\n      * GenomicsDB. Hard-coded to handle only VCF files and headers\n      */\n     @Override\n     public void onTraversalStart() {\n-        if (getIntervalsFromExistingWorkspace) {\n-            final IntervalList outputList = new IntervalList(getBestAvailableSequenceDictionary());\n-            intervals.forEach(i -> outputList.add(new Interval(i.getContig(), i.getStart(), i.getEnd())));\n-            final Path intervalListOutputPath = IOUtils.getPath(intervalListOutputPathString);\n-            outputList.write(intervalListOutputPath.toFile());\n-            return;\n-        }\n         String workspaceDir = BucketUtils.makeFilePathAbsolute(overwriteCreateOrCheckWorkspace());\n         vidMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VIDMAP_FILE_NAME);\n         callsetMapJSONFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_CALLSETMAP_FILE_NAME);\n         vcfHeaderFile = IOUtils.appendPathToDir(workspaceDir, GenomicsDBConstants.DEFAULT_VCFHEADER_FILE_NAME);\n+        if (getIntervalsFromExistingWorkspace) {\n+            // intervals may be null if merge-contigs-into-num-partitions was used to create workspace\n+            // if so, we need to wait for vid to be generated before writing out interval list\n+            return;", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3Nzc1OA==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877758", "bodyText": "yup - don't need to short circuit anymore as you say. added a log.info and specific to getIntervalsFromExistingWorkspace (we don't touch the jsons or workspace otherwise in that case)", "author": "mlathara", "createdAt": "2020-07-31T22:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyOTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTA3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462531079", "body": "I would make these less stateful by returning the list of intervals instead of modifying it in place.", "bodyText": "I would make these less stateful by returning the list of intervals instead of modifying it in place.", "bodyHTML": "<p dir=\"auto\">I would make these less stateful by returning the list of intervals instead of modifying it in place.</p>", "author": "lbergelson", "createdAt": "2020-07-29T19:19:41Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzM2NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877365", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTI2MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r462531261", "body": "Similarly, this seems like it could return the value instead of modifying the field.", "bodyText": "Similarly, this seems like it could return the value instead of modifying the field.", "bodyHTML": "<p dir=\"auto\">Similarly, this seems like it could return the value instead of modifying the field.</p>", "author": "lbergelson", "createdAt": "2020-07-29T19:20:00Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -660,41 +706,84 @@ private void initializeInputPreloadExecutorService() {\n     }\n \n     private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionArgument arg) {\n-        progressMeter.update(intervals.get(0));\n+        progressMeter.update(null);\n         logger.info(\"Done importing batch \" + arg.batchCount + \"/\" + arg.totalBatchCount);\n         this.batchCount = arg.batchCount + 1;\n         return null;\n     }\n \n+    private GenomicsDBImportConfiguration.Partition createPartitionWithBeginAndEnd(\n+            Coordinates.GenomicsDBColumn begin, Coordinates.GenomicsDBColumn end) {\n+        GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n+        partitionBuilder.setBegin(begin);\n+        partitionBuilder.setEnd(end);\n+        partitionBuilder.setWorkspace(workspace);\n+        partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n+        return partitionBuilder.build();\n+    }\n+\n+    private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromWorkspace(final String workspace) {\n+        String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+        List<GenomicsDBImportConfiguration.Partition> configPartitions = new ArrayList<>();\n+        for (int i=0; i<partitions.length; i++) {\n+            long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            beginBuilder.setTiledbColumn(bounds[0]);\n+            endBuilder.setTiledbColumn(bounds[1]);\n+            configPartitions.add(createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build()));\n+        }\n+        return configPartitions;\n+    }\n+\n     private List<GenomicsDBImportConfiguration.Partition> generatePartitionListFromIntervals(List<SimpleInterval> chromosomeIntervals) {\n         return chromosomeIntervals.stream().map(interval -> {\n-            GenomicsDBImportConfiguration.Partition.Builder partitionBuilder = GenomicsDBImportConfiguration.Partition.newBuilder();\n             Coordinates.ContigPosition.Builder contigPositionBuilder = Coordinates.ContigPosition.newBuilder();\n-            Coordinates.GenomicsDBColumn.Builder columnBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder beginBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n+            Coordinates.GenomicsDBColumn.Builder endBuilder = Coordinates.GenomicsDBColumn.newBuilder();\n             //begin\n             contigPositionBuilder.setContig(interval.getContig()).setPosition(interval.getStart());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setBegin(columnBuilder.build());\n+            beginBuilder.setContigPosition(contigPositionBuilder.build());\n             //end\n             contigPositionBuilder.setPosition(interval.getEnd());\n-            columnBuilder.setContigPosition(contigPositionBuilder.build());\n-            partitionBuilder.setEnd(columnBuilder.build());\n-            partitionBuilder.setWorkspace(workspace);\n-            partitionBuilder.setGenerateArrayNameFromPartitionBounds(true);\n-            return partitionBuilder.build();\n+            endBuilder.setContigPosition(contigPositionBuilder.build());\n+            return createPartitionWithBeginAndEnd(beginBuilder.build(), endBuilder.build());\n         }).collect(Collectors.toList());\n     }\n \n+    private void generateIntervalListFromVidMap() {\n+        try {\n+            GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n+                org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n+    \n+            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n+            intervals = new ArrayList<>();\n+            for (int i=0; i<partitions.length; i++) {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+                // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n+                // so we just check here that contig starts within the given bounds\n+                intervals.addAll(vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n+                        x.getTiledbColumnOffset() <= bounds[1])\n+                        .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n+                        .collect(Collectors.toList()));\n+            }\n+        } catch (final IOException e) {\n+            throw new UserException(\"Could not get vid map protobuf from file:\" + vidMapJSONFile + \n+                    \". Is the workspace corrupted?\");\n+        }\n+    }\n+\n     private void generateIntervalListFromWorkspace() {", "originalCommit": "2bef7c9b7869c6b42d58ae54700d078881f95e45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzM4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r463877389", "bodyText": "done", "author": "mlathara", "createdAt": "2020-07-31T22:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTI2MQ=="}], "type": "inlineReview"}, {"oid": "899dd40a2c8a622893c14afa1a973a574601330a", "url": "https://github.com/broadinstitute/gatk/commit/899dd40a2c8a622893c14afa1a973a574601330a", "message": "address review comments", "committedDate": "2020-07-31T21:54:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NDQyMQ==", "url": "https://github.com/broadinstitute/gatk/pull/6681#discussion_r467264421", "body": "I think you can avoid this funky collect -> stream if you use flat map above instead of map.", "bodyText": "I think you can avoid this funky collect -> stream if you use flat map above instead of map.", "bodyHTML": "<p dir=\"auto\">I think you can avoid this funky collect -&gt; stream if you use flat map above instead of map.</p>", "author": "lbergelson", "createdAt": "2020-08-07T20:54:52Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/genomicsdb/GenomicsDBImport.java", "diffHunk": "@@ -751,50 +753,47 @@ private Void logMessageOnBatchCompletion(final BatchCompletionCallbackFunctionAr\n         }).collect(Collectors.toList());\n     }\n \n-    private void generateIntervalListFromVidMap() {\n+    private List<SimpleInterval> generateIntervalListFromVidMap() {\n         try {\n             GenomicsDBVidMapProto.VidMappingPB vidMapPB = \n                 org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBUtils.getProtobufVidMappingFromJsonFile(vidMapJSONFile);\n     \n-            String[] partitions = GenomicsDBUtils.listGenomicsDBArrays(workspace);\n-            intervals = new ArrayList<>();\n-            for (int i=0; i<partitions.length; i++) {\n-                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partitions[i]);\n+            List<String> partitions = Arrays.asList(GenomicsDBUtils.listGenomicsDBArrays(workspace));\n+            return partitions.stream().map(partition -> {\n+                long[] bounds = GenomicsDBUtils.getArrayColumnBounds(workspace, partition);\n                 // merge-contigs-into-num-partitions ensures entire contigs are within a given partition\n                 // so we just check here that contig starts within the given bounds\n-                intervals.addAll(vidMapPB.getContigsList().stream()\n-                        .filter(x -> x.getTiledbColumnOffset() >= bounds[0] &&  \n-                        x.getTiledbColumnOffset() <= bounds[1])\n+                return vidMapPB.getContigsList().stream()\n+                        .filter(x -> x.getTiledbColumnOffset() >= bounds[ARRAY_COLUMN_BOUNDS_START] &&  \n+                        x.getTiledbColumnOffset() <= bounds[ARRAY_COLUMN_BOUNDS_END])\n                         .map(x -> new SimpleInterval(x.getName(), 1, Math.toIntExact(x.getLength())))\n-                        .collect(Collectors.toList()));\n-            }\n+                        .collect(Collectors.toList());", "originalCommit": "899dd40a2c8a622893c14afa1a973a574601330a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "56f1c3137eddf3f4d8760c1e84136c53b13dd676", "url": "https://github.com/broadinstitute/gatk/commit/56f1c3137eddf3f4d8760c1e84136c53b13dd676", "message": "adding tests with many contigs to several where some contigs are empty, interval list nonadjacent", "committedDate": "2020-09-15T00:01:40Z", "type": "commit"}, {"oid": "1a70919ecc6f1bbcd67c4870df008fd599214fb2", "url": "https://github.com/broadinstitute/gatk/commit/1a70919ecc6f1bbcd67c4870df008fd599214fb2", "message": "Merge genomicsdb_merge_contigs1 with master", "committedDate": "2020-10-29T20:09:03Z", "type": "commit"}]}