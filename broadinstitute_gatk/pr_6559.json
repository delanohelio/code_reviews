{"pr_number": 6559, "pr_title": "FilterIntervals now filters out any singleton intervals", "pr_author": "asmirnov239", "pr_createdAt": "2020-04-21T16:40:09Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6559", "timeline": [{"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "url": "https://github.com/broadinstitute/gatk/commit/8ac73b5e477798744408d2019ea6544cd2f1cffc", "message": "FilterIntervals now filters out any singleton intervals, that have no other intervals on their contigs", "committedDate": "2020-04-22T21:44:41Z", "type": "commit"}, {"oid": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "url": "https://github.com/broadinstitute/gatk/commit/8ac73b5e477798744408d2019ea6544cd2f1cffc", "message": "FilterIntervals now filters out any singleton intervals, that have no other intervals on their contigs", "committedDate": "2020-04-22T21:44:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzg0NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418223845", "body": "Put `mapToObj` on its own line for consistency.", "bodyText": "Put mapToObj on its own line for consistency.", "bodyHTML": "<p dir=\"auto\">Put <code>mapToObj</code> on its own line for consistency.</p>", "author": "samuelklee", "createdAt": "2020-04-30T18:59:07Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDI3NA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434134274", "bodyText": "Done", "author": "asmirnov239", "createdAt": "2020-06-02T19:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzk5NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418223995", "body": "Break up `filter` and `forEach` onto their own lines.", "bodyText": "Break up filter and forEach onto their own lines.", "bodyHTML": "<p dir=\"auto\">Break up <code>filter</code> and <code>forEach</code> onto their own lines.</p>", "author": "samuelklee", "createdAt": "2020-04-30T18:59:27Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDgxNA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434134814", "bodyText": "Done", "author": "asmirnov239", "createdAt": "2020-06-02T19:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTI4Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418225287", "body": "I might just name this variable `count`.  Perhaps even `intervalCount`, and rename the map to `contigToIntervalCountMap`.", "bodyText": "I might just name this variable count.  Perhaps even intervalCount, and rename the map to contigToIntervalCountMap.", "bodyHTML": "<p dir=\"auto\">I might just name this variable <code>count</code>.  Perhaps even <code>intervalCount</code>, and rename the map to <code>contigToIntervalCountMap</code>.</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:01:39Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTI4OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434135289", "bodyText": "Done and done", "author": "asmirnov239", "createdAt": "2020-06-02T19:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjE3OA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418226178", "body": "Seems a bit weird to have `<=` since it should never happen (and I can't imagine future code changes that would make it possible), but no biggie.", "bodyText": "Seems a bit weird to have <= since it should never happen (and I can't imagine future code changes that would make it possible), but no biggie.", "bodyHTML": "<p dir=\"auto\">Seems a bit weird to have <code>&lt;=</code> since it should never happen (and I can't imagine future code changes that would make it possible), but no biggie.</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:03:25Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());\n+            if (value <= 1) {", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MjQwMg==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434142402", "bodyText": "Changed it to ==", "author": "asmirnov239", "createdAt": "2020-06-02T20:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjY5OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418226699", "body": "Perhaps a log message here indicating when a contig is dropped?", "bodyText": "Perhaps a log message here indicating when a contig is dropped?", "bodyHTML": "<p dir=\"auto\">Perhaps a log message here indicating when a contig is dropped?</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:04:24Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());\n+            if (value <= 1) {\n+                mask[i] = true;", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NTc4NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434155785", "bodyText": "Done!", "author": "asmirnov239", "createdAt": "2020-06-02T20:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTEwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229106", "body": "I'd make the variable names and code here consistent with the code in FilterIntervals.", "bodyText": "I'd make the variable names and code here consistent with the code in FilterIntervals.", "bodyHTML": "<p dir=\"auto\">I'd make the variable names and code here consistent with the code in FilterIntervals.</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:09:02Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that\n+     * are the only ones on their corresponding contigs.\n+     */\n+    private void checkForSingletonIntervalAbsence(final List<SimpleIntervalCollection> intervalCollections){\n+        final List<SimpleInterval> concatenatedIntervalList = new ArrayList<>();\n+        IntStream.range(0, numShards).forEach(i -> {\n+            concatenatedIntervalList.addAll(intervalCollections.get(i).getIntervals());\n+        });\n+\n+        final Map<String, Long> contigToCountMap = concatenatedIntervalList.stream()", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTAzNA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434181034", "bodyText": "Okay I did that as much as possible", "author": "asmirnov239", "createdAt": "2020-06-02T21:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTYxOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229619", "body": "`Validate that the concatenation of the sharded interval lists does not have singleton intervals...`, perhaps?", "bodyText": "Validate that the concatenation of the sharded interval lists does not have singleton intervals..., perhaps?", "bodyHTML": "<p dir=\"auto\"><code>Validate that the concatenation of the sharded interval lists does not have singleton intervals...</code>, perhaps?</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:09:57Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTMyNw==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434181327", "bodyText": "Changed", "author": "asmirnov239", "createdAt": "2020-06-02T21:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTc5Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229797", "body": "Stray import?", "bodyText": "Stray import?", "bodyHTML": "<p dir=\"auto\">Stray import?</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:10:19Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervalsIntegrationTest.java", "diffHunk": "@@ -27,6 +27,7 @@\n import org.testng.annotations.Test;\n \n import java.io.File;\n+import java.lang.reflect.AnnotatedElement;", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NDUwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434184506", "bodyText": "Hmm not sure how that got in there. Thanks!", "author": "asmirnov239", "createdAt": "2020-06-02T21:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTk0OA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418229948", "body": "White space.  Thanks for adding these tests!", "bodyText": "White space.  Thanks for adding these tests!", "bodyHTML": "<p dir=\"auto\">White space.  Thanks for adding these tests!</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:10:37Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervalsIntegrationTest.java", "diffHunk": "@@ -71,6 +72,16 @@\n                             new AnnotationMap(Arrays.asList(\n                                     Pair.of(CopyNumberAnnotations.GC_CONTENT, 0.95),\n                                     Pair.of(CopyNumberAnnotations.MAPPABILITY, 0.95),\n+                                    Pair.of(CopyNumberAnnotations.SEGMENTAL_DUPLICATION_CONTENT, 0.5)))),\n+                    new AnnotatedInterval(new SimpleInterval(\"20\", 51,\t60),", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NTk4Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434185986", "bodyText": "Oh the other ones had tabs as well.. fixed!", "author": "asmirnov239", "createdAt": "2020-06-02T21:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyOTk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMDc2Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418230766", "body": "Comma after `i.e.`.", "bodyText": "Comma after i.e..", "bodyHTML": "<p dir=\"auto\">Comma after <code>i.e.</code>.</p>", "author": "samuelklee", "createdAt": "2020-04-30T19:12:04Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -40,15 +40,16 @@\n  * {@link CollectReadCounts}, outputs a filtered Picard interval list.  The set intersection of intervals from the\n  * specified intervals, the annotated intervals, and the first count file will be taken as the initial set of intervals\n  * on which to perform filtering.  Parameters for filtering based on the annotations and counts can be adjusted.\n- * Annotation-based filters will be applied first, followed by count-based filters.  The result may be passed via -L to\n- * other tools (e.g., {@link DetermineGermlineContigPloidy} and {@link GermlineCNVCaller}) to mask intervals from\n- * analysis.\n+ * Annotation-based filters will be applied first, followed by count-based filters. In the end, any singleton intervals\n+ * (i.e. those being by themselves on their corresponding contigs) found after applying other filters will be filtered", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1ODI0OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434158249", "bodyText": "Done", "author": "asmirnov239", "createdAt": "2020-06-02T20:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMDc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzA5Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418233097", "body": "Log a warning here, something like:\r\n\r\n```\r\nFiltered singleton interval on contig: \"chrX\"\r\n```", "bodyText": "Log a warning here, something like:\nFiltered singleton interval on contig: \"chrX\"", "bodyHTML": "<p dir=\"auto\">Log a warning here, something like:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Filtered singleton interval on contig: &quot;chrX&quot;\"><pre><code>Filtered singleton interval on contig: \"chrX\"\n</code></pre></div>", "author": "mwalker174", "createdAt": "2020-04-30T19:16:24Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervals.java", "diffHunk": "@@ -431,6 +432,17 @@ private SimpleIntervalCollection filterIntervals() {\n                     countNumberPassing(mask), numIntersectedIntervals));\n         }\n \n+        //finally, filter intervals that are solitary in their corresponding contigs\n+        final Map<String, Long> contigToCountMap = IntStream.range(0, numIntersectedIntervals)\n+                .filter(i -> !mask[i]).mapToObj(i -> intersectedIntervals.getRecords().get(i))\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        IntStream.range(0, numIntersectedIntervals).filter(i -> !mask[i]).forEach(i -> {\n+            final long value = contigToCountMap.get(intersectedIntervals.getRecords().get(i).getContig());\n+            if (value <= 1) {\n+                mask[i] = true;", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NjEzNA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434186134", "bodyText": "Done!", "author": "asmirnov239", "createdAt": "2020-06-02T21:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzUyNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418233525", "body": "Why this change?", "bodyText": "Why this change?", "bodyHTML": "<p dir=\"auto\">Why this change?</p>", "author": "mwalker174", "createdAt": "2020-04-30T19:17:09Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -246,7 +243,7 @@\n     public void onStartup() {\n         super.onStartup();\n         /* check for successful import of gcnvkernel */\n-        PythonScriptExecutor.checkPythonEnvironmentForPackage(\"gcnvkernel\");\n+        PythonScriptExecutor.checkPythonEnvironmentForPackage(\"numpy\");", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NzM1OA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434187358", "bodyText": "Oops, this was to get it to run in IDE. Thanks for catching this!", "author": "asmirnov239", "createdAt": "2020-06-02T21:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzkwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418233906", "body": "I'd argue you can just call this `checkForSingletonInterval`", "bodyText": "I'd argue you can just call this checkForSingletonInterval", "bodyHTML": "<p dir=\"auto\">I'd argue you can just call this <code>checkForSingletonInterval</code></p>", "author": "mwalker174", "createdAt": "2020-04-30T19:17:59Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that\n+     * are the only ones on their corresponding contigs.\n+     */\n+    private void checkForSingletonIntervalAbsence(final List<SimpleIntervalCollection> intervalCollections){", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NzUxOQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434187519", "bodyText": "Changed", "author": "asmirnov239", "createdAt": "2020-06-02T21:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNjYwOA==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418236608", "body": "Can be simplified a bit:\r\n```\r\n        intervalCollections.stream()\r\n                .flatMap(list -> list.getIntervals().stream())\r\n                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()))\r\n                .entrySet().stream()\r\n                .forEach(entry -> { \r\n                    if (entry.getValue() == 1) { \r\n                        throw new IllegalArgumentException(\r\n                                String.format(\"Records contain a singleton interval on contig (%s).\" + \r\n                                        \" Please run FilterIntervals tool first.\", entry.getKey()));\r\n            }\r\n        });\r\n```", "bodyText": "Can be simplified a bit:\n        intervalCollections.stream()\n                .flatMap(list -> list.getIntervals().stream())\n                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()))\n                .entrySet().stream()\n                .forEach(entry -> { \n                    if (entry.getValue() == 1) { \n                        throw new IllegalArgumentException(\n                                String.format(\"Records contain a singleton interval on contig (%s).\" + \n                                        \" Please run FilterIntervals tool first.\", entry.getKey()));\n            }\n        });", "bodyHTML": "<p dir=\"auto\">Can be simplified a bit:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        intervalCollections.stream()\n                .flatMap(list -&gt; list.getIntervals().stream())\n                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()))\n                .entrySet().stream()\n                .forEach(entry -&gt; { \n                    if (entry.getValue() == 1) { \n                        throw new IllegalArgumentException(\n                                String.format(&quot;Records contain a singleton interval on contig (%s).&quot; + \n                                        &quot; Please run FilterIntervals tool first.&quot;, entry.getKey()));\n            }\n        });\"><pre><code>        intervalCollections.stream()\n                .flatMap(list -&gt; list.getIntervals().stream())\n                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()))\n                .entrySet().stream()\n                .forEach(entry -&gt; { \n                    if (entry.getValue() == 1) { \n                        throw new IllegalArgumentException(\n                                String.format(\"Records contain a singleton interval on contig (%s).\" + \n                                        \" Please run FilterIntervals tool first.\", entry.getKey()));\n            }\n        });\n</code></pre></div>", "author": "mwalker174", "createdAt": "2020-04-30T19:23:07Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/PostprocessGermlineCNVCalls.java", "diffHunk": "@@ -654,4 +653,25 @@ private static File getCopyNumberSegmentsFile(final File pythonSegmenterOutputPa\n         }\n         return unsortedIntervalCollectionsFromModels;\n     }\n+\n+    /**\n+     * Validate that the union of shard's interval lists does not have singleton intervals, i.e. intervals that\n+     * are the only ones on their corresponding contigs.\n+     */\n+    private void checkForSingletonIntervalAbsence(final List<SimpleIntervalCollection> intervalCollections){\n+        final List<SimpleInterval> concatenatedIntervalList = new ArrayList<>();\n+        IntStream.range(0, numShards).forEach(i -> {\n+            concatenatedIntervalList.addAll(intervalCollections.get(i).getIntervals());\n+        });\n+\n+        final Map<String, Long> contigToCountMap = concatenatedIntervalList.stream()\n+                .collect(Collectors.groupingBy(SimpleInterval::getContig, Collectors.counting()));\n+        contigToCountMap.keySet().forEach(c -> {\n+            if (contigToCountMap.get(c) == 1) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"Records contain a singleton interval on contig (%s).\" +\n+                                \" Please run FilterIntervals tool first.\", c));\n+            }\n+        });", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjM0Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434192347", "bodyText": "Nice, I used this", "author": "asmirnov239", "createdAt": "2020-06-02T21:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNjYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzODUzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r418238535", "body": "Does one of these test for the singleton case?", "bodyText": "Does one of these test for the singleton case?", "bodyHTML": "<p dir=\"auto\">Does one of these test for the singleton case?</p>", "author": "mwalker174", "createdAt": "2020-04-30T19:26:50Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/FilterIntervalsIntegrationTest.java", "diffHunk": "@@ -92,28 +103,28 @@\n         return new Object[][]{\n                 //intervals file, array of strings for excluded intervals, annotated-intervals file,\n                 //min/max GC content, mix/max mappability, min/max seg-dupe content, expected array of indices of retained intervals\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3)},\n-                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4)},\n-                {intervalsFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Collections.singletonList(2)},\n-                {intervalsFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3)},\n-                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Collections.singletonList(2)},\n-                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4)},\n-                {intervalsWithExtraIntervalFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Collections.singletonList(2)},\n-                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1)}};\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3, 5)},\n+                {intervalsFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4, 5)},\n+                {intervalsFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(2, 5)},\n+                {intervalsFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(0, 1, 2, 3, 4, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 3, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0., 1., 0.1, 0.9, Arrays.asList(2, 3, 4, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0., 1., Arrays.asList(1, 2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0., 1., 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 3, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.emptyList(), annotatedIntervalsFile, 0.1, 0.9, 0.1, 0.9, 0.1, 0.9, Arrays.asList(2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:1-10\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(1, 2, 3, 4, 5)},\n+                {intervalsWithExtraIntervalFile, Arrays.asList(\"20:1-15\", \"20:35-45\"), annotatedIntervalsFile, 0., 1., 0., 1., 0., 1., Arrays.asList(2, 5)},\n+                {intervalsWithExtraIntervalFile, Collections.singletonList(\"20:25-50\"), annotatedIntervalsFile, 0.1, 0.9, 0., 1., 0., 1., Arrays.asList(0, 1, 5)}};", "originalCommit": "8ac73b5e477798744408d2019ea6544cd2f1cffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzExNg==", "url": "https://github.com/broadinstitute/gatk/pull/6559#discussion_r434193116", "bodyText": "All of them actually do because I added an interval from contig \"21\" which should be filtered out in all of these.", "author": "asmirnov239", "createdAt": "2020-06-02T21:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzODUzNQ=="}], "type": "inlineReview"}, {"oid": "028f9f90863a32f7a8c02519cd7dc009df81e424", "url": "https://github.com/broadinstitute/gatk/commit/028f9f90863a32f7a8c02519cd7dc009df81e424", "message": "Addressed PR comments", "committedDate": "2020-06-02T21:45:35Z", "type": "commit"}]}