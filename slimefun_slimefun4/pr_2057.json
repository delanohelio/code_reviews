{"pr_number": 2057, "pr_title": "Added Bee Protection to Hazmat Suit.", "pr_author": "LinoxGH", "pr_createdAt": "2020-06-26T20:19:54Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2057", "timeline": [{"oid": "cd4a36c519702f21e7ae0affc853695557cbb821", "url": "https://github.com/Slimefun/Slimefun4/commit/cd4a36c519702f21e7ae0affc853695557cbb821", "message": "Added Bee Protection to Hazmat Suit.", "committedDate": "2020-06-26T20:18:27Z", "type": "commit"}, {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "url": "https://github.com/Slimefun/Slimefun4/commit/29fe88176873b8eb7cf791d0caab0ab53644a6a4", "message": "Added a new lore to Hazmat Suit for 1.15+", "committedDate": "2020-06-26T20:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMTk4OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446421988", "body": "The `see` attribute shouldn't really be used for external classes, please only use it for Slimefun classes.", "bodyText": "The see attribute shouldn't really be used for external classes, please only use it for Slimefun classes.", "bodyHTML": "<p dir=\"auto\">The <code>see</code> attribute shouldn't really be used for external classes, please only use it for Slimefun classes.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:37:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nsimilarity index 53%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 3af80370a..b7738e1b7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -18,36 +18,24 @@ import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n  *\n  * @author Linox\n  *\n- * @see Bee\n- *\n  */\n-public class HazmatSuitListener implements Listener {\n+public class BeeListener implements Listener {\n \n-    public HazmatSuitListener(SlimefunPlugin plugin) {\n+    public BeeListener(SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n     }\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;\n-\n         if (e.getDamager() instanceof Bee) {\n             if (e.getEntity() instanceof Player) {\n                 Player p = (Player) e.getEntity();\n \n-                int hazmatCount = 0;\n-                for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                    SlimefunItem sfItem = SlimefunItem.getByItem(armor);\n-                    if (sfItem == null) return;\n-\n-                    String id = sfItem.getID();\n-                    if (id.equals(\"SCUBA_HELMET\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_CHESTPLATE\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_LEGGINGS\")) hazmatCount++;\n-                    if (id.equals(\"RUBBER_BOOTS\")) hazmatCount++;\n-                }\n-\n-                if (hazmatCount == 4) {\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n                     e.setDamage(0D);\n                     for (ItemStack armor : p.getInventory().getArmorContents()) {\n                         ItemUtils.damageItem(armor, 1, false);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMjI3Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446422273", "body": "Should probably rename this to BeeListener, since it only checks for Bees and has rather few to do with the actual mechanics of the HazmatSuit.", "bodyText": "Should probably rename this to BeeListener, since it only checks for Bees and has rather few to do with the actual mechanics of the HazmatSuit.", "bodyHTML": "<p dir=\"auto\">Should probably rename this to BeeListener, since it only checks for Bees and has rather few to do with the actual mechanics of the HazmatSuit.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:38:51Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee\n+ *\n+ */\n+public class HazmatSuitListener implements Listener {", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nsimilarity index 53%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 3af80370a..b7738e1b7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -18,36 +18,24 @@ import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n  *\n  * @author Linox\n  *\n- * @see Bee\n- *\n  */\n-public class HazmatSuitListener implements Listener {\n+public class BeeListener implements Listener {\n \n-    public HazmatSuitListener(SlimefunPlugin plugin) {\n+    public BeeListener(SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n     }\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;\n-\n         if (e.getDamager() instanceof Bee) {\n             if (e.getEntity() instanceof Player) {\n                 Player p = (Player) e.getEntity();\n \n-                int hazmatCount = 0;\n-                for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                    SlimefunItem sfItem = SlimefunItem.getByItem(armor);\n-                    if (sfItem == null) return;\n-\n-                    String id = sfItem.getID();\n-                    if (id.equals(\"SCUBA_HELMET\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_CHESTPLATE\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_LEGGINGS\")) hazmatCount++;\n-                    if (id.equals(\"RUBBER_BOOTS\")) hazmatCount++;\n-                }\n-\n-                if (hazmatCount == 4) {\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n                     e.setDamage(0D);\n                     for (ItemStack armor : p.getInventory().getArmorContents()) {\n                         ItemUtils.damageItem(armor, 1, false);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMjg3NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446422875", "body": "Performance-wise this is a rather careless design choice. You should put this if-statement in front of initializing this Listener in the first place (in SlimefunPlugin.java), otherwise you are registering a completely unnecessary Listener.\r\n\r\nAnd let's be honest... the Minecraft version won't change from one minute to another.", "bodyText": "Performance-wise this is a rather careless design choice. You should put this if-statement in front of initializing this Listener in the first place (in SlimefunPlugin.java), otherwise you are registering a completely unnecessary Listener.\nAnd let's be honest... the Minecraft version won't change from one minute to another.", "bodyHTML": "<p dir=\"auto\">Performance-wise this is a rather careless design choice. You should put this if-statement in front of initializing this Listener in the first place (in SlimefunPlugin.java), otherwise you are registering a completely unnecessary Listener.</p>\n<p dir=\"auto\">And let's be honest... the Minecraft version won't change from one minute to another.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:40:32Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee\n+ *\n+ */\n+public class HazmatSuitListener implements Listener {\n+\n+    public HazmatSuitListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nsimilarity index 53%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 3af80370a..b7738e1b7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -18,36 +18,24 @@ import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n  *\n  * @author Linox\n  *\n- * @see Bee\n- *\n  */\n-public class HazmatSuitListener implements Listener {\n+public class BeeListener implements Listener {\n \n-    public HazmatSuitListener(SlimefunPlugin plugin) {\n+    public BeeListener(SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n     }\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;\n-\n         if (e.getDamager() instanceof Bee) {\n             if (e.getEntity() instanceof Player) {\n                 Player p = (Player) e.getEntity();\n \n-                int hazmatCount = 0;\n-                for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                    SlimefunItem sfItem = SlimefunItem.getByItem(armor);\n-                    if (sfItem == null) return;\n-\n-                    String id = sfItem.getID();\n-                    if (id.equals(\"SCUBA_HELMET\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_CHESTPLATE\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_LEGGINGS\")) hazmatCount++;\n-                    if (id.equals(\"RUBBER_BOOTS\")) hazmatCount++;\n-                }\n-\n-                if (hazmatCount == 4) {\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n                     e.setDamage(0D);\n                     for (ItemStack armor : p.getInventory().getArmorContents()) {\n                         ItemUtils.damageItem(armor, 1, false);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzEyOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423129", "body": "This is a really expensive check and should not be done this way.\r\nCheck the ArmorTask class, there are already optimizations for the Hazmat Suit in place.", "bodyText": "This is a really expensive check and should not be done this way.\nCheck the ArmorTask class, there are already optimizations for the Hazmat Suit in place.", "bodyHTML": "<p dir=\"auto\">This is a really expensive check and should not be done this way.<br>\nCheck the ArmorTask class, there are already optimizations for the Hazmat Suit in place.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:41:15Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee\n+ *\n+ */\n+public class HazmatSuitListener implements Listener {\n+\n+    public HazmatSuitListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;\n+\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+\n+                int hazmatCount = 0;\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    SlimefunItem sfItem = SlimefunItem.getByItem(armor);\n+                    if (sfItem == null) return;\n+\n+                    String id = sfItem.getID();\n+                    if (id.equals(\"SCUBA_HELMET\")) hazmatCount++;\n+                    if (id.equals(\"HAZMAT_CHESTPLATE\")) hazmatCount++;\n+                    if (id.equals(\"HAZMAT_LEGGINGS\")) hazmatCount++;\n+                    if (id.equals(\"RUBBER_BOOTS\")) hazmatCount++;\n+                }", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nsimilarity index 53%\nrename from src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\nrename to src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 3af80370a..b7738e1b7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -18,36 +18,24 @@ import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n  *\n  * @author Linox\n  *\n- * @see Bee\n- *\n  */\n-public class HazmatSuitListener implements Listener {\n+public class BeeListener implements Listener {\n \n-    public HazmatSuitListener(SlimefunPlugin plugin) {\n+    public BeeListener(SlimefunPlugin plugin) {\n         plugin.getServer().getPluginManager().registerEvents(this, plugin);\n     }\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;\n-\n         if (e.getDamager() instanceof Bee) {\n             if (e.getEntity() instanceof Player) {\n                 Player p = (Player) e.getEntity();\n \n-                int hazmatCount = 0;\n-                for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                    SlimefunItem sfItem = SlimefunItem.getByItem(armor);\n-                    if (sfItem == null) return;\n-\n-                    String id = sfItem.getID();\n-                    if (id.equals(\"SCUBA_HELMET\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_CHESTPLATE\")) hazmatCount++;\n-                    if (id.equals(\"HAZMAT_LEGGINGS\")) hazmatCount++;\n-                    if (id.equals(\"RUBBER_BOOTS\")) hazmatCount++;\n-                }\n-\n-                if (hazmatCount == 4) {\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n                     e.setDamage(0D);\n                     for (ItemStack armor : p.getInventory().getArmorContents()) {\n                         ItemUtils.damageItem(armor, 1, false);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzMwMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423302", "body": "This should be renamed and gated behind an if statement (see my review comments on this Listener class)", "bodyText": "This should be renamed and gated behind an if statement (see my review comments on this Listener class)", "bodyHTML": "<p dir=\"auto\">This should be renamed and gated behind an if statement (see my review comments on this Listener class)</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:41:42Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java", "diffHunk": "@@ -237,6 +238,7 @@ else if (getServer().getPluginManager().isPluginEnabled(\"CS-CoreLib\")) {\n             new WitherListener(this);\n             new IronGolemListener(this);\n             new PlayerInteractEntityListener(this);\n+            new HazmatSuitListener(this);", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java b/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java\nindex 0c5480ad8..1f125642c 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java\n", "chunk": "@@ -238,7 +238,9 @@ public final class SlimefunPlugin extends JavaPlugin implements SlimefunAddon {\n             new WitherListener(this);\n             new IronGolemListener(this);\n             new PlayerInteractEntityListener(this);\n-            new HazmatSuitListener(this);\n+            if (minecraftVersion.isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n+                new BeeListener(this);\n+            }\n \n             new MobDropListener(this, (BasicCircuitBoard) SlimefunItems.BASIC_CIRCUIT_BOARD.getItem());\n \n", "next_change": {"commit": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java b/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java\nindex 1f125642c..0e46652a7 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java\n", "chunk": "@@ -66,564 +35,125 @@ import io.github.thebusybiscuit.slimefun4.implementation.listeners.ExplosionsLis\n import io.github.thebusybiscuit.slimefun4.implementation.listeners.FireworksListener;\n import io.github.thebusybiscuit.slimefun4.implementation.listeners.GadgetsListener;\n import io.github.thebusybiscuit.slimefun4.implementation.listeners.GrapplingHookListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.IronGolemListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.ItemPickupListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.MultiBlockListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.PlayerInteractEntityListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.PlayerProfileListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SeismicAxeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunBootsListener;\n import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunBowListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunGuideListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunItemConsumeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunItemListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SoulboundListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.TalismanListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.VampireBladeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.VanillaMachinesListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.WitherListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.WorldListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.resources.GEOResourcesSetup;\n-import io.github.thebusybiscuit.slimefun4.implementation.setup.PostSetup;\n-import io.github.thebusybiscuit.slimefun4.implementation.setup.ResearchSetup;\n-import io.github.thebusybiscuit.slimefun4.implementation.setup.SlimefunItemSetup;\n-import io.github.thebusybiscuit.slimefun4.implementation.tasks.ArmorTask;\n-import io.github.thebusybiscuit.slimefun4.implementation.tasks.SlimefunStartupTask;\n import io.github.thebusybiscuit.slimefun4.implementation.tasks.TickerTask;\n import me.mrCookieSlime.CSCoreLibPlugin.CSCoreLib;\n-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AGenerator;\n-import me.mrCookieSlime.Slimefun.api.BlockStorage;\n-import me.mrCookieSlime.Slimefun.api.Slimefun;\n-import me.mrCookieSlime.Slimefun.api.inventory.UniversalBlockMenu;\n \n /**\n- * This is the main class of Slimefun.\n- * This is where all the magic starts, take a look around.\n- * Feel like home.\n+ * @deprecated This class has been moved to {@link io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin}\n  *\n  * @author TheBusyBiscuit\n+ *\n  */\n-public final class SlimefunPlugin extends JavaPlugin implements SlimefunAddon {\n-\n-    public static SlimefunPlugin instance;\n-\n-    private MinecraftVersion minecraftVersion = MinecraftVersion.UNKNOWN;\n-\n-    private final SlimefunRegistry registry = new SlimefunRegistry();\n-    private final TickerTask ticker = new TickerTask();\n-    private final SlimefunCommand command = new SlimefunCommand(this);\n-\n-    // Services - Systems that fulfill certain tasks, treat them as a black box\n-    private final CustomItemDataService itemDataService = new CustomItemDataService(this, \"slimefun_item\");\n-    private final BlockDataService blockDataService = new BlockDataService(this, \"slimefun_block\");\n-    private final CustomTextureService textureService = new CustomTextureService(new Config(this, \"item-models.yml\"));\n-    private final GitHubService gitHubService = new GitHubService(\"TheBusyBiscuit/Slimefun4\");\n-    private final UpdaterService updaterService = new UpdaterService(this, getDescription().getVersion(), getFile());\n-    private final MetricsService metricsService = new MetricsService(this);\n-    private final AutoSavingService autoSavingService = new AutoSavingService();\n-    private final BackupService backupService = new BackupService();\n-    private final PermissionsService permissionsService = new PermissionsService(this);\n-    private final PerWorldSettingsService worldSettingsService = new PerWorldSettingsService(this);\n-    private final ThirdPartyPluginService thirdPartySupportService = new ThirdPartyPluginService(this);\n-    private final MinecraftRecipeService recipeService = new MinecraftRecipeService(this);\n-    private LocalizationService local;\n-\n-    private GPSNetwork gpsNetwork;\n-    private NetworkManager networkManager;\n-    private ProtectionManager protections;\n-\n-    // Important config files for Slimefun\n-    private final Config config = new Config(this);\n-    private final Config items = new Config(this, \"Items.yml\");\n-    private final Config researches = new Config(this, \"Researches.yml\");\n-\n-    // Listeners that need to be accessed elsewhere\n-    private final AncientAltarListener ancientAltarListener = new AncientAltarListener();\n-    private final GrapplingHookListener grapplingHookListener = new GrapplingHookListener();\n-    private final BackpackListener backpackListener = new BackpackListener();\n-    private final SlimefunBowListener bowListener = new SlimefunBowListener();\n-\n-    public SlimefunPlugin() {\n-        super();\n-    }\n-\n-    public SlimefunPlugin(JavaPluginLoader loader, PluginDescriptionFile description, File dataFolder, File file) {\n-        super(loader, description, dataFolder, file);\n-        minecraftVersion = MinecraftVersion.UNIT_TEST;\n-    }\n-\n-    @Override\n-    public void onEnable() {\n-        if (minecraftVersion == MinecraftVersion.UNIT_TEST) {\n-            instance = this;\n-            local = new LocalizationService(this, \"\", null);\n-            gpsNetwork = new GPSNetwork();\n-            command.register();\n-        }\n-        else if (getServer().getPluginManager().isPluginEnabled(\"CS-CoreLib\")) {\n-            long timestamp = System.nanoTime();\n-\n-            // We wanna ensure that the Server uses a compatible version of Minecraft\n-            if (isVersionUnsupported()) {\n-                getServer().getPluginManager().disablePlugin(this);\n-                return;\n-            }\n-\n-            instance = this;\n-\n-            // Creating all necessary Folders\n-            getLogger().log(Level.INFO, \"Loading various systems...\");\n-            createDirectories();\n-            registry.load(config);\n-\n-            // Set up localization\n-            local = new LocalizationService(this, config.getString(\"options.chat-prefix\"), config.getString(\"options.language\"));\n-\n-            // Setting up Networks\n-            gpsNetwork = new GPSNetwork();\n-\n-            int networkSize = config.getInt(\"networks.max-size\");\n-\n-            if (networkSize < 1) {\n-                getLogger().log(Level.WARNING, \"Your 'networks.max-size' setting is misconfigured! It must be at least 1, it was set to: {0}\", networkSize);\n-                networkSize = 1;\n-            }\n-\n-            networkManager = new NetworkManager(networkSize);\n-\n-            // Setting up bStats\n-            metricsService.start();\n-\n-            // Starting the Auto-Updater\n-            if (config.getBoolean(\"options.auto-update\")) {\n-                getLogger().log(Level.INFO, \"Starting Auto-Updater...\");\n-                updaterService.start();\n-            }\n-            else {\n-                updaterService.disable();\n-            }\n-\n-            // Registering all GEO Resources\n-            getLogger().log(Level.INFO, \"Loading GEO-Resources...\");\n-            GEOResourcesSetup.setup();\n-\n-            getLogger().log(Level.INFO, \"Loading items...\");\n-            loadItems();\n-\n-            getLogger().log(Level.INFO, \"Loading researches...\");\n-            loadResearches();\n-\n-            registry.setResearchingEnabled(getResearchCfg().getBoolean(\"enable-researching\"));\n-            PostSetup.setupWiki();\n-\n-            // All Slimefun Listeners\n-            new SlimefunBootsListener(this);\n-            new SlimefunItemListener(this);\n-            new SlimefunItemConsumeListener(this);\n-            new BlockPhysicsListener(this);\n-            new CargoNodeListener(this);\n-            new MultiBlockListener(this);\n-            new GadgetsListener(this);\n-            new DispenserListener(this);\n-            new BlockListener(this);\n-            new EnhancedFurnaceListener(this);\n-            new ItemPickupListener(this);\n-            new DeathpointListener(this);\n-            new ExplosionsListener(this);\n-            new DebugFishListener(this);\n-            new VanillaMachinesListener(this);\n-            new FireworksListener(this);\n-            new WitherListener(this);\n-            new IronGolemListener(this);\n-            new PlayerInteractEntityListener(this);\n-            if (minecraftVersion.isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n-                new BeeListener(this);\n-            }\n-\n-            new MobDropListener(this, (BasicCircuitBoard) SlimefunItems.BASIC_CIRCUIT_BOARD.getItem());\n-\n-            // Item-specific Listeners\n-            new VampireBladeListener(this, (VampireBlade) SlimefunItems.BLADE_OF_VAMPIRES.getItem());\n-            new CoolerListener(this, (Cooler) SlimefunItems.COOLER.getItem());\n-            new SeismicAxeListener(this, (SeismicAxe) SlimefunItems.SEISMIC_AXE.getItem());\n-            grapplingHookListener.register(this, (GrapplingHook) SlimefunItems.GRAPPLING_HOOK.getItem());\n-            ancientAltarListener.register(this, (AncientAltar) SlimefunItems.ANCIENT_ALTAR.getItem());\n-\n-            bowListener.register(this);\n-\n-            // Toggleable Listeners for performance reasons\n-            if (config.getBoolean(\"items.talismans\")) {\n-                new TalismanListener(this);\n-            }\n-\n-            if (config.getBoolean(\"items.soulbound\")) {\n-                new SoulboundListener(this);\n-            }\n-\n-            if (config.getBoolean(\"items.backpacks\")) {\n-                backpackListener.register(this);\n-            }\n-\n-            // Handle Slimefun Guide being given on Join\n-            new SlimefunGuideListener(this, config.getBoolean(\"guide.receive-on-first-join\"));\n-\n-            // Load/Unload Worlds in Slimefun\n-            new WorldListener(this);\n-\n-            // Clear the Slimefun Guide History upon Player Leaving\n-            new PlayerProfileListener(this);\n-\n-            // Initiating various Stuff and all Items with a slightly delay (0ms after the Server finished loading)\n-            Slimefun.runSync(new SlimefunStartupTask(this, () -> {\n-                protections = new ProtectionManager(getServer());\n-                textureService.register(registry.getAllSlimefunItems(), true);\n-                permissionsService.register(registry.getAllSlimefunItems(), true);\n-                recipeService.refresh();\n-            }), 0);\n-\n-            // Setting up the command /sf and all subcommands\n-            command.register();\n-\n-            // Armor Update Task\n-            if (config.getBoolean(\"options.enable-armor-effects\")) {\n-                getServer().getScheduler().runTaskTimerAsynchronously(this, new ArmorTask(), 0L, config.getInt(\"options.armor-update-interval\") * 20L);\n-            }\n-\n-            autoSavingService.start(this, config.getInt(\"options.auto-save-delay-in-minutes\"));\n-            ticker.start(this);\n-            thirdPartySupportService.start();\n-            gitHubService.start(this);\n-\n-            // Hooray!\n-            getLogger().log(Level.INFO, \"Slimefun has finished loading in {0}\", getStartupTime(timestamp));\n-        }\n-        else {\n-            getLogger().log(Level.INFO, \"#################### - INFO - ####################\");\n-            getLogger().log(Level.INFO, \" \");\n-            getLogger().log(Level.INFO, \"Slimefun could not be loaded (yet).\");\n-            getLogger().log(Level.INFO, \"It appears that you have not installed CS-CoreLib.\");\n-            getLogger().log(Level.INFO, \"Please download and install CS-CoreLib manually:\");\n-            getLogger().log(Level.INFO, \"https://thebusybiscuit.github.io/builds/TheBusyBiscuit/CS-CoreLib/master/\");\n-\n-            getCommand(\"slimefun\").setExecutor((sender, cmd, label, args) -> {\n-                sender.sendMessage(\"You have forgotten to install CS-CoreLib! Slimefun is disabled.\");\n-                sender.sendMessage(\"https://thebusybiscuit.github.io/builds/TheBusyBiscuit/CS-CoreLib/master/\");\n-                return true;\n-            });\n-        }\n-    }\n-\n-    private String getStartupTime(long timestamp) {\n-        long ms = (System.nanoTime() - timestamp) / 1000000;\n-\n-        if (ms > 1000) {\n-            return DoubleHandler.fixDouble(ms / 1000.0) + \"s\";\n-        }\n-        else {\n-            return DoubleHandler.fixDouble(ms) + \"ms\";\n-        }\n-    }\n-\n-    /**\n-     * This method checks for the {@link MinecraftVersion} of the {@link Server}.\n-     * If the version is unsupported, a warning will be printed to the console.\n-     *\n-     * @return Whether the {@link MinecraftVersion} is unsupported\n-     */\n-    private boolean isVersionUnsupported() {\n-        String currentVersion = ReflectionUtils.getVersion();\n-\n-        if (currentVersion.startsWith(\"v\")) {\n-            for (MinecraftVersion version : MinecraftVersion.values()) {\n-                if (version.matches(currentVersion)) {\n-                    minecraftVersion = version;\n-                    return false;\n-                }\n-            }\n-\n-            // Looks like you are using an unsupported Minecraft Version\n-            getLogger().log(Level.SEVERE, \"#############################################\");\n-            getLogger().log(Level.SEVERE, \"### Slimefun was not installed correctly!\");\n-            getLogger().log(Level.SEVERE, \"### You are using the wrong version of Minecraft!\");\n-            getLogger().log(Level.SEVERE, \"###\");\n-            getLogger().log(Level.SEVERE, \"### You are using Minecraft {0}\", ReflectionUtils.getVersion());\n-            getLogger().log(Level.SEVERE, \"### but Slimefun v{0} requires you to be using\", getDescription().getVersion());\n-            getLogger().log(Level.SEVERE, \"### Minecraft {0}\", String.join(\" / \", getSupportedVersions()));\n-            getLogger().log(Level.SEVERE, \"#############################################\");\n-            return true;\n-        }\n-\n-        getLogger().log(Level.WARNING, \"We could not determine the version of Minecraft you were using ({0})\", currentVersion);\n-        return false;\n-    }\n-\n-    private Collection<String> getSupportedVersions() {\n-        List<String> list = new ArrayList<>();\n-\n-        for (MinecraftVersion version : MinecraftVersion.values()) {\n-            if (version != MinecraftVersion.UNKNOWN) {\n-                list.add(version.getName());\n-            }\n-        }\n-\n-        return list;\n-    }\n-\n-    @Override\n-    public void onDisable() {\n-        // Slimefun never loaded successfully, so we don't even bother doing stuff here\n-        if (instance == null || minecraftVersion == MinecraftVersion.UNIT_TEST) {\n-            return;\n-        }\n-\n-        // Cancel all tasks from this plugin immediately\n-        Bukkit.getScheduler().cancelTasks(this);\n-\n-        // Finishes all started movements/removals of block data\n-        ticker.halt();\n-        ticker.run();\n-\n-        // Save all Player Profiles that are still in memory\n-        PlayerProfile.iterator().forEachRemaining(profile -> {\n-            if (profile.isDirty()) {\n-                profile.save();\n-            }\n-        });\n-\n-        // Save all registered Worlds\n-        for (Map.Entry<String, BlockStorage> entry : getRegistry().getWorlds().entrySet()) {\n-            try {\n-                entry.getValue().save(true);\n-            }\n-            catch (Exception x) {\n-                getLogger().log(Level.SEVERE, x, () -> \"An Error occurred while saving Slimefun-Blocks in World '\" + entry.getKey() + \"' for Slimefun \" + getVersion());\n-            }\n-        }\n-\n-        for (UniversalBlockMenu menu : registry.getUniversalInventories().values()) {\n-            menu.save();\n-        }\n-\n-        // Create a new backup zip\n-        backupService.run();\n-\n-        // Prevent Memory Leaks\n-        // These static Maps should be removed at some point...\n-        AContainer.processing = null;\n-        AContainer.progress = null;\n-\n-        AGenerator.processing = null;\n-        AGenerator.progress = null;\n-\n-        Reactor.processing = null;\n-        Reactor.progress = null;\n-\n-        instance = null;\n-\n-        // Close all inventories on the server to prevent item dupes\n-        // (Incase some idiot uses /reload)\n-        for (Player p : Bukkit.getOnlinePlayers()) {\n-            p.closeInventory();\n-        }\n-    }\n-\n-    private void createDirectories() {\n-        String[] storageFolders = { \"Players\", \"blocks\", \"stored-blocks\", \"stored-inventories\", \"stored-chunks\", \"universal-inventories\", \"waypoints\", \"block-backups\" };\n-        String[] pluginFolders = { \"scripts\", \"generators\", \"error-reports\", \"cache/github\", \"world-settings\" };\n-\n-        for (String folder : storageFolders) {\n-            File file = new File(\"data-storage/Slimefun\", folder);\n-\n-            if (!file.exists()) {\n-                file.mkdirs();\n-            }\n-        }\n-\n-        for (String folder : pluginFolders) {\n-            File file = new File(\"plugins/Slimefun\", folder);\n-\n-            if (!file.exists()) {\n-                file.mkdirs();\n-            }\n-        }\n-    }\n-\n-    private void loadItems() {\n-        try {\n-            SlimefunItemSetup.setup(this);\n-        }\n-        catch (Exception | LinkageError x) {\n-            getLogger().log(Level.SEVERE, x, () -> \"An Error occurred while initializing SlimefunItems for Slimefun \" + getVersion());\n-        }\n-    }\n-\n-    private void loadResearches() {\n-        try {\n-            ResearchSetup.setupResearches();\n-        }\n-        catch (Exception | LinkageError x) {\n-            getLogger().log(Level.SEVERE, x, () -> \"An Error occurred while initializing Slimefun Researches for Slimefun \" + getVersion());\n-        }\n-    }\n+@Deprecated\n+public class SlimefunPlugin {\n \n     public static Config getCfg() {\n-        return instance.config;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getCfg();\n     }\n \n     public static Config getResearchCfg() {\n-        return instance.researches;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getResearchCfg();\n     }\n \n     public static Config getItemCfg() {\n-        return instance.items;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getItemCfg();\n     }\n \n     public static GPSNetwork getGPSNetwork() {\n-        return instance.gpsNetwork;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getGPSNetwork();\n     }\n \n     public static TickerTask getTicker() {\n-        return instance.ticker;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getTickerTask();\n     }\n \n-    /**\n-     * This returns the version of Slimefun that is currently installed.\n-     *\n-     * @return The currently installed version of Slimefun\n-     */\n     public static String getVersion() {\n-        return instance.getDescription().getVersion();\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getVersion();\n     }\n \n     public static ProtectionManager getProtectionManager() {\n-        return instance.protections;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getProtectionManager();\n     }\n \n-    /**\n-     * This returns the {@link LocalizationService} of Slimefun.\n-     *\n-     * @return The {@link LocalizationService} of Slimefun\n-     */\n     public static LocalizationService getLocal() {\n-        return instance.local;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getLocalization();\n     }\n \n     public static MinecraftRecipeService getMinecraftRecipes() {\n-        return instance.recipeService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getMinecraftRecipeService();\n     }\n \n     public static CustomItemDataService getItemDataService() {\n-        return instance.itemDataService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getItemDataService();\n     }\n \n     public static CustomTextureService getItemTextureService() {\n-        return instance.textureService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getItemTextureService();\n     }\n \n     public static PermissionsService getPermissionsService() {\n-        return instance.permissionsService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getPermissionsService();\n     }\n \n     public static BlockDataService getBlockDataService() {\n-        return instance.blockDataService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getBlockDataService();\n     }\n \n     public static ThirdPartyPluginService getThirdPartySupportService() {\n-        return instance.thirdPartySupportService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getThirdPartySupportService();\n     }\n \n     public static PerWorldSettingsService getWorldSettingsService() {\n-        return instance.worldSettingsService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getWorldSettingsService();\n     }\n \n-    /**\n-     * This method returns the {@link UpdaterService} of Slimefun.\n-     * It is used to handle automatic updates.\n-     *\n-     * @return The {@link UpdaterService} for Slimefun\n-     */\n     public static UpdaterService getUpdater() {\n-        return instance.updaterService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getUpdater();\n     }\n \n-    /**\n-     * This method returns the {@link GitHubService} of Slimefun.\n-     * It is used to retrieve data from GitHub repositories.\n-     *\n-     * @return The {@link GitHubService} for Slimefun\n-     */\n     public static GitHubService getGitHubService() {\n-        return instance.gitHubService;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getGitHubService();\n     }\n \n     public static SlimefunRegistry getRegistry() {\n-        return instance.registry;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getRegistry();\n     }\n \n     public static NetworkManager getNetworkManager() {\n-        return instance.networkManager;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getNetworkManager();\n     }\n \n     public static AncientAltarListener getAncientAltarListener() {\n-        return instance.ancientAltarListener;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getAncientAltarListener();\n     }\n \n     public static GrapplingHookListener getGrapplingHookListener() {\n-        return instance.grapplingHookListener;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getGrapplingHookListener();\n     }\n \n     public static BackpackListener getBackpackListener() {\n-        return instance.backpackListener;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getBackpackListener();\n     }\n \n     public static SlimefunBowListener getBowListener() {\n-        return instance.bowListener;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getBowListener();\n     }\n \n-    /**\n-     * This method returns a {@link Set} of every {@link Plugin} that lists Slimefun\n-     * as a required or optional dependency.\n-     * <p>\n-     * We will just assume this to be a list of our addons.\n-     *\n-     * @return A {@link Set} of every {@link Plugin} that is dependent on Slimefun\n-     */\n     public static Set<Plugin> getInstalledAddons() {\n-        return Arrays.stream(instance.getServer().getPluginManager().getPlugins()).filter(plugin -> plugin.getDescription().getDepend().contains(instance.getName()) || plugin.getDescription().getSoftDepend().contains(instance.getName())).collect(Collectors.toSet());\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getInstalledAddons();\n     }\n \n-    /**\n-     * The {@link Command} that was added by Slimefun.\n-     *\n-     * @return Slimefun's command\n-     */\n     public static SlimefunCommand getCommand() {\n-        return instance.command;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getCommand();\n     }\n \n-    /**\n-     * This returns the currently installed version of Minecraft.\n-     *\n-     * @return The current version of Minecraft\n-     */\n     public static MinecraftVersion getMinecraftVersion() {\n-        return instance.minecraftVersion;\n+        return io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin.getMinecraftVersion();\n     }\n \n     public static String getCSCoreLibVersion() {\n         return CSCoreLib.getLib().getDescription().getVersion();\n     }\n \n-    @Override\n-    public JavaPlugin getJavaPlugin() {\n-        return this;\n-    }\n-\n-    @Override\n-    public String getBugTrackerURL() {\n-        return \"https://github.com/TheBusyBiscuit/Slimefun4/issues\";\n-    }\n-\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzM5NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423394", "body": "ItemMeta cannot be null.", "bodyText": "ItemMeta cannot be null.", "bodyHTML": "<p dir=\"auto\">ItemMeta cannot be null.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:41:58Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {\n+        ItemMeta meta = getItemMeta();\n+        if (meta == null) return;", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTM5OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446431398", "bodyText": "I'm almost sure it could be in 1.13. Or it's my bad memory", "author": "LinoxGH", "createdAt": "2020-06-26T22:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\nindex aab0762b3..0b3f1975b 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n", "chunk": "@@ -245,21 +245,4 @@ public class SlimefunItemStack extends CustomItem {\n             throw new IllegalArgumentException(\"The provided texture for Item \\\"\" + id + \"\\\" does not seem to be a valid texture String!\");\n         }\n     }\n-\n-    /**\n-     * Adds additional lores for the {@link ItemStack}.\n-     *\n-     * @param newLore\n-     *                New lores to be added to the {@link ItemStack}\n-     */\n-    public void addLore(String... newLore) {\n-        ItemMeta meta = getItemMeta();\n-        if (meta == null) return;\n-        List<String> oldLore = meta.getLore();\n-        if (oldLore == null) return;\n-\n-        oldLore.addAll(Arrays.asList(newLore));\n-        meta.setLore(oldLore);\n-        setItemMeta(meta);\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzUxOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423519", "body": "You should check .hasItemMeta() before this, otherwise you are computing wasteful objects.", "bodyText": "You should check .hasItemMeta() before this, otherwise you are computing wasteful objects.", "bodyHTML": "<p dir=\"auto\">You should check .hasItemMeta() before this, otherwise you are computing wasteful objects.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:42:21Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {\n+        ItemMeta meta = getItemMeta();", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\nindex aab0762b3..0b3f1975b 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n", "chunk": "@@ -245,21 +245,4 @@ public class SlimefunItemStack extends CustomItem {\n             throw new IllegalArgumentException(\"The provided texture for Item \\\"\" + id + \"\\\" does not seem to be a valid texture String!\");\n         }\n     }\n-\n-    /**\n-     * Adds additional lores for the {@link ItemStack}.\n-     *\n-     * @param newLore\n-     *                New lores to be added to the {@link ItemStack}\n-     */\n-    public void addLore(String... newLore) {\n-        ItemMeta meta = getItemMeta();\n-        if (meta == null) return;\n-        List<String> oldLore = meta.getLore();\n-        if (oldLore == null) return;\n-\n-        oldLore.addAll(Arrays.asList(newLore));\n-        meta.setLore(oldLore);\n-        setItemMeta(meta);\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzYwMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423602", "body": "This is not good. Use .hasLore() instead.", "bodyText": "This is not good. Use .hasLore() instead.", "bodyHTML": "<p dir=\"auto\">This is not good. Use .hasLore() instead.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:42:36Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {\n+        ItemMeta meta = getItemMeta();\n+        if (meta == null) return;\n+        List<String> oldLore = meta.getLore();\n+        if (oldLore == null) return;", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\nindex aab0762b3..0b3f1975b 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n", "chunk": "@@ -245,21 +245,4 @@ public class SlimefunItemStack extends CustomItem {\n             throw new IllegalArgumentException(\"The provided texture for Item \\\"\" + id + \"\\\" does not seem to be a valid texture String!\");\n         }\n     }\n-\n-    /**\n-     * Adds additional lores for the {@link ItemStack}.\n-     *\n-     * @param newLore\n-     *                New lores to be added to the {@link ItemStack}\n-     */\n-    public void addLore(String... newLore) {\n-        ItemMeta meta = getItemMeta();\n-        if (meta == null) return;\n-        List<String> oldLore = meta.getLore();\n-        if (oldLore == null) return;\n-\n-        oldLore.addAll(Arrays.asList(newLore));\n-        meta.setLore(oldLore);\n-        setItemMeta(meta);\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzkxOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423919", "body": "I don't really think this method is useful here, I'd argue this should be removed and just done manually or via the Consumer in the constructor.", "bodyText": "I don't really think this method is useful here, I'd argue this should be removed and just done manually or via the Consumer in the constructor.", "bodyHTML": "<p dir=\"auto\">I don't really think this method is useful here, I'd argue this should be removed and just done manually or via the Consumer in the constructor.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:43:30Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {", "originalCommit": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\nindex aab0762b3..0b3f1975b 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n", "chunk": "@@ -245,21 +245,4 @@ public class SlimefunItemStack extends CustomItem {\n             throw new IllegalArgumentException(\"The provided texture for Item \\\"\" + id + \"\\\" does not seem to be a valid texture String!\");\n         }\n     }\n-\n-    /**\n-     * Adds additional lores for the {@link ItemStack}.\n-     *\n-     * @param newLore\n-     *                New lores to be added to the {@link ItemStack}\n-     */\n-    public void addLore(String... newLore) {\n-        ItemMeta meta = getItemMeta();\n-        if (meta == null) return;\n-        List<String> oldLore = meta.getLore();\n-        if (oldLore == null) return;\n-\n-        oldLore.addAll(Arrays.asList(newLore));\n-        meta.setLore(oldLore);\n-        setItemMeta(meta);\n-    }\n }\n", "next_change": null}]}}, {"oid": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "url": "https://github.com/Slimefun/Slimefun4/commit/ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "message": "Did the requested Changes", "committedDate": "2020-06-26T22:51:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjA0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446462045", "body": "This statement is the wrong way around, you are checking for the opposite, so remove the negations here.\r\nAlso the armor item and the SlimefunItem need to be swapped too.", "bodyText": "This statement is the wrong way around, you are checking for the opposite, so remove the negations here.\nAlso the armor item and the SlimefunItem need to be swapped too.", "bodyHTML": "<p dir=\"auto\">This statement is the wrong way around, you are checking for the opposite, so remove the negations here.<br>\nAlso the armor item and the SlimefunItem need to be swapped too.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T00:39:21Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {", "originalCommit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NTIwMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446485202", "bodyText": "Right I didn't notice the !s there it's a copy-paste lol", "author": "LinoxGH", "createdAt": "2020-06-27T04:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex b7738e1b7..a23335ece 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,18 +33,36 @@ public class BeeListener implements Listener {\n         if (e.getDamager() instanceof Bee) {\n             if (e.getEntity() instanceof Player) {\n                 Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n \n-                // Check for a Hazmat Suit\n-                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n-                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n-                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n-                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n-                    e.setDamage(0D);\n-                    for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                        ItemUtils.damageItem(armor, 1, false);\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);\n                     }\n-                }\n+                });\n+            }\n+        }\n+    }\n+\n+    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n+        int hazmatCount = 0;\n+\n+        // Check for a Hazmat Suit\n+        for (HashedArmorpiece armor : armors) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hazmatCount++;\n             }\n         }\n+\n+        return hazmatCount == 4;\n     }\n }\n", "next_change": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex a23335ece..57b54b787 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,39 +32,55 @@ public class BeeListener implements Listener {\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (e.getDamager() instanceof Bee) {\n-            if (e.getEntity() instanceof Player) {\n-                Player p = (Player) e.getEntity();\n-                PlayerProfile.get(p, profile -> {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n \n-                    HashedArmorpiece[] armors = profile.getArmor();\n-                    if (hasFullHazmat(armors)) {\n-                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                            ItemUtils.damageItem(armor, 1, false);\n-                        }\n-                        e.setDamage(0D);\n-                    }\n-                });\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n             }\n         }\n     }\n \n-    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n-        int hazmatCount = 0;\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n \n-        // Check for a Hazmat Suit\n+        String setID = null;\n         for (HashedArmorpiece armor : armors) {\n             Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n             if (!armorPiece.isPresent()) return false;\n \n-            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hazmatCount++;\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n+                    first = false;\n+                }\n+\n+                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n+                        if (setID == null) {\n+                            return true;\n+                        }\n+                        armorCount++;\n+                    }\n+                }\n+\n             }\n         }\n \n-        return hazmatCount == 4;\n+        return armorCount == 4;\n     }\n }\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 57b54b787..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -52,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjA5NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446462095", "body": "Why are you doing this instead of cancelling the event?", "bodyText": "Why are you doing this instead of cancelling the event?", "bodyHTML": "<p dir=\"auto\">Why are you doing this instead of cancelling the event?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T00:39:37Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n+                    e.setDamage(0D);", "originalCommit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NTI1Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446485253", "bodyText": "When you cancel the event bee just keeps trying. And doesn't die", "author": "LinoxGH", "createdAt": "2020-06-27T04:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex b7738e1b7..a23335ece 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,18 +33,36 @@ public class BeeListener implements Listener {\n         if (e.getDamager() instanceof Bee) {\n             if (e.getEntity() instanceof Player) {\n                 Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n \n-                // Check for a Hazmat Suit\n-                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n-                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n-                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n-                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n-                    e.setDamage(0D);\n-                    for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                        ItemUtils.damageItem(armor, 1, false);\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);\n                     }\n-                }\n+                });\n+            }\n+        }\n+    }\n+\n+    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n+        int hazmatCount = 0;\n+\n+        // Check for a Hazmat Suit\n+        for (HashedArmorpiece armor : armors) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hazmatCount++;\n             }\n         }\n+\n+        return hazmatCount == 4;\n     }\n }\n", "next_change": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex a23335ece..57b54b787 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,39 +32,55 @@ public class BeeListener implements Listener {\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (e.getDamager() instanceof Bee) {\n-            if (e.getEntity() instanceof Player) {\n-                Player p = (Player) e.getEntity();\n-                PlayerProfile.get(p, profile -> {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n \n-                    HashedArmorpiece[] armors = profile.getArmor();\n-                    if (hasFullHazmat(armors)) {\n-                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                            ItemUtils.damageItem(armor, 1, false);\n-                        }\n-                        e.setDamage(0D);\n-                    }\n-                });\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n             }\n         }\n     }\n \n-    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n-        int hazmatCount = 0;\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n \n-        // Check for a Hazmat Suit\n+        String setID = null;\n         for (HashedArmorpiece armor : armors) {\n             Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n             if (!armorPiece.isPresent()) return false;\n \n-            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hazmatCount++;\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n+                    first = false;\n+                }\n+\n+                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n+                        if (setID == null) {\n+                            return true;\n+                        }\n+                        armorCount++;\n+                    }\n+                }\n+\n             }\n         }\n \n-        return hazmatCount == 4;\n+        return armorCount == 4;\n     }\n }\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 57b54b787..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -52,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjE1OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446462158", "body": "Random unused import", "bodyText": "Random unused import", "bodyHTML": "<p dir=\"auto\">Random unused import</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T00:40:01Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Arrays;", "originalCommit": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\nindex 0b3f1975b..bca914aeb 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java\n", "chunk": "@@ -2,7 +2,6 @@ package me.mrCookieSlime.Slimefun.api;\n \n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Base64;\n import java.util.List;\n import java.util.Locale;\n", "next_change": null}]}}, {"oid": "52dc7585fcf3b368e46f35e704b8770b2d59ab38", "url": "https://github.com/Slimefun/Slimefun4/commit/52dc7585fcf3b368e46f35e704b8770b2d59ab38", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into HazmatSuitBees\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "committedDate": "2020-06-27T05:09:09Z", "type": "commit"}, {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53", "url": "https://github.com/Slimefun/Slimefun4/commit/73973a00b722b897449a91a9bdf2fd246eb94c53", "message": "Did the requested changes and some fixes.", "committedDate": "2020-06-27T09:26:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTI1Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509252", "body": "Just pass the Player as an argument, this will perform a lengthy UUID lookup.", "bodyText": "Just pass the Player as an argument, this will perform a lengthy UUID lookup.", "bodyHTML": "<p dir=\"auto\">Just pass the Player as an argument, this will perform a lengthy UUID lookup.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T10:12:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 8203ee9d3..69dd15444 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -120,35 +121,19 @@ public class ArmorTask implements Runnable {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(PlayerProfile profile) {\n+    private void checkForRadiation(Player p, PlayerProfile profile) {\n         HashedArmorpiece[] armor = profile.getArmor();\n-        Player p = profile.getPlayer();\n \n-        // Check for a Hazmat Suit\n-        boolean hasHazmat = false;\n-        for (HashedArmorpiece armorPiece : armor) {\n-\n-            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n-            if (!sfArmor.isPresent()) continue;\n-\n-            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hasHazmat = true;\n-            }\n-        }\n-\n-        if (!hasHazmat) {\n+        if (!shouldProtect(armor)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (isRadioactive(p, item)) {\n+                if (checkAndApplyRadioactive(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean isRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": {"commit": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 69dd15444..1ac187eca 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -137,7 +137,7 @@ public class ArmorTask implements Runnable {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n-                SlimefunPlugin.getLocal().sendMessage(p, \"messages.radiation\");\n+                SlimefunPlugin.getLocalization().sendMessage(p, \"messages.radiation\");\n \n                 Slimefun.runSync(() -> {\n                     p.addPotionEffects(radiationEffects);\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -122,18 +121,16 @@ public class ArmorTask implements Runnable {\n     }\n \n     private void checkForRadiation(Player p, PlayerProfile profile) {\n-        HashedArmorpiece[] armor = profile.getArmor();\n-\n-        if (!shouldProtect(armor)) {\n+        if (!profile.isProtected(ProtectionType.RADIATION)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (checkAndApplyRadioactive(p, item)) {\n+                if (checkAndApplyRadiation(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadiation(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTMyNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509326", "body": "I very much like the transition of the Hazmat suit to the SlimefunArmorPiece system!\r\nBut I am not the greatest fan of id-comparison. \r\nBest would be to create a new `ItemAttribute`, like \"HazmatProtection\" and then create a HazmatSuit class which extends SlimefunArmorpiece and implements that attribute.\r\nThis way we don't have to rely on hardcoded ids and are flexible in terms of adding more hazmat suits in the future.", "bodyText": "I very much like the transition of the Hazmat suit to the SlimefunArmorPiece system!\nBut I am not the greatest fan of id-comparison.\nBest would be to create a new ItemAttribute, like \"HazmatProtection\" and then create a HazmatSuit class which extends SlimefunArmorpiece and implements that attribute.\nThis way we don't have to rely on hardcoded ids and are flexible in terms of adding more hazmat suits in the future.", "bodyHTML": "<p dir=\"auto\">I very much like the transition of the Hazmat suit to the SlimefunArmorPiece system!<br>\nBut I am not the greatest fan of id-comparison.<br>\nBest would be to create a new <code>ItemAttribute</code>, like \"HazmatProtection\" and then create a HazmatSuit class which extends SlimefunArmorpiece and implements that attribute.<br>\nThis way we don't have to rely on hardcoded ids and are flexible in terms of adding more hazmat suits in the future.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T10:13:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();\n+\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+        boolean hasHazmat = false;\n+        for (HashedArmorpiece armorPiece : armor) {\n+\n+            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n+            if (!sfArmor.isPresent()) continue;\n+\n+            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hasHazmat = true;", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 8203ee9d3..69dd15444 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -120,35 +121,19 @@ public class ArmorTask implements Runnable {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(PlayerProfile profile) {\n+    private void checkForRadiation(Player p, PlayerProfile profile) {\n         HashedArmorpiece[] armor = profile.getArmor();\n-        Player p = profile.getPlayer();\n \n-        // Check for a Hazmat Suit\n-        boolean hasHazmat = false;\n-        for (HashedArmorpiece armorPiece : armor) {\n-\n-            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n-            if (!sfArmor.isPresent()) continue;\n-\n-            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hasHazmat = true;\n-            }\n-        }\n-\n-        if (!hasHazmat) {\n+        if (!shouldProtect(armor)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (isRadioactive(p, item)) {\n+                if (checkAndApplyRadioactive(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean isRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": {"commit": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 69dd15444..1ac187eca 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -137,7 +137,7 @@ public class ArmorTask implements Runnable {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n-                SlimefunPlugin.getLocal().sendMessage(p, \"messages.radiation\");\n+                SlimefunPlugin.getLocalization().sendMessage(p, \"messages.radiation\");\n \n                 Slimefun.runSync(() -> {\n                     p.addPotionEffects(radiationEffects);\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -122,18 +121,16 @@ public class ArmorTask implements Runnable {\n     }\n \n     private void checkForRadiation(Player p, PlayerProfile profile) {\n-        HashedArmorpiece[] armor = profile.getArmor();\n-\n-        if (!shouldProtect(armor)) {\n+        if (!profile.isProtected(ProtectionType.RADIATION)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (checkAndApplyRadioactive(p, item)) {\n+                if (checkAndApplyRadiation(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadiation(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTM4Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509383", "body": "Also since you are only checking for ANY hazmat piece, you can break the loop here.\r\nOr even better, make a seperate method with a boolean return type for this.", "bodyText": "Also since you are only checking for ANY hazmat piece, you can break the loop here.\nOr even better, make a seperate method with a boolean return type for this.", "bodyHTML": "<p dir=\"auto\">Also since you are only checking for ANY hazmat piece, you can break the loop here.<br>\nOr even better, make a seperate method with a boolean return type for this.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T10:14:30Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();\n+\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+        boolean hasHazmat = false;\n+        for (HashedArmorpiece armorPiece : armor) {\n+\n+            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n+            if (!sfArmor.isPresent()) continue;\n+\n+            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hasHazmat = true;", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 8203ee9d3..69dd15444 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -120,35 +121,19 @@ public class ArmorTask implements Runnable {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(PlayerProfile profile) {\n+    private void checkForRadiation(Player p, PlayerProfile profile) {\n         HashedArmorpiece[] armor = profile.getArmor();\n-        Player p = profile.getPlayer();\n \n-        // Check for a Hazmat Suit\n-        boolean hasHazmat = false;\n-        for (HashedArmorpiece armorPiece : armor) {\n-\n-            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n-            if (!sfArmor.isPresent()) continue;\n-\n-            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hasHazmat = true;\n-            }\n-        }\n-\n-        if (!hasHazmat) {\n+        if (!shouldProtect(armor)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (isRadioactive(p, item)) {\n+                if (checkAndApplyRadioactive(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean isRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": {"commit": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 69dd15444..1ac187eca 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -137,7 +137,7 @@ public class ArmorTask implements Runnable {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n-                SlimefunPlugin.getLocal().sendMessage(p, \"messages.radiation\");\n+                SlimefunPlugin.getLocalization().sendMessage(p, \"messages.radiation\");\n \n                 Slimefun.runSync(() -> {\n                     p.addPotionEffects(radiationEffects);\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -122,18 +121,16 @@ public class ArmorTask implements Runnable {\n     }\n \n     private void checkForRadiation(Player p, PlayerProfile profile) {\n-        HashedArmorpiece[] armor = profile.getArmor();\n-\n-        if (!shouldProtect(armor)) {\n+        if (!profile.isProtected(ProtectionType.RADIATION)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (checkAndApplyRadioactive(p, item)) {\n+                if (checkAndApplyRadiation(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadiation(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTQxMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509410", "body": "Same as below, in regards to the hardcoded ids.", "bodyText": "Same as below, in regards to the hardcoded ids.", "bodyHTML": "<p dir=\"auto\">Same as below, in regards to the hardcoded ids.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T10:14:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n+\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n+        int hazmatCount = 0;\n+\n+        // Check for a Hazmat Suit\n+        for (HashedArmorpiece armor : armors) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hazmatCount++;\n+            }", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex a23335ece..57b54b787 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,39 +32,55 @@ public class BeeListener implements Listener {\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (e.getDamager() instanceof Bee) {\n-            if (e.getEntity() instanceof Player) {\n-                Player p = (Player) e.getEntity();\n-                PlayerProfile.get(p, profile -> {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n \n-                    HashedArmorpiece[] armors = profile.getArmor();\n-                    if (hasFullHazmat(armors)) {\n-                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                            ItemUtils.damageItem(armor, 1, false);\n-                        }\n-                        e.setDamage(0D);\n-                    }\n-                });\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n             }\n         }\n     }\n \n-    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n-        int hazmatCount = 0;\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n \n-        // Check for a Hazmat Suit\n+        String setID = null;\n         for (HashedArmorpiece armor : armors) {\n             Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n             if (!armorPiece.isPresent()) return false;\n \n-            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hazmatCount++;\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n+                    first = false;\n+                }\n+\n+                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n+                        if (setID == null) {\n+                            return true;\n+                        }\n+                        armorCount++;\n+                    }\n+                }\n+\n             }\n         }\n \n-        return hazmatCount == 4;\n+        return armorCount == 4;\n     }\n }\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 57b54b787..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -52,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDAxMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446510012", "body": "This is an asynchronous operation, so you should NOT do `e.setDamage()` here, as it will have no effect when this is delayed.\r\nYou need to the following instead:\r\n\r\n```java\r\nOptional<PlayerProfile> optional = PlayerProfile.find(p);\r\nif (!optional .isPresent()) {\r\n  PlayerProfile.request(p);\r\n  return;\r\n}\r\n\r\nPlayerProfile profile = optional.get();\r\n// Do stuff...\r\n```\r\n\r\nThis will ensure that we don't access the PlayerProfile asynchronously, which will lead to problems.\r\nAnd only execute the code if it's synced.", "bodyText": "This is an asynchronous operation, so you should NOT do e.setDamage() here, as it will have no effect when this is delayed.\nYou need to the following instead:\nOptional<PlayerProfile> optional = PlayerProfile.find(p);\nif (!optional .isPresent()) {\n  PlayerProfile.request(p);\n  return;\n}\n\nPlayerProfile profile = optional.get();\n// Do stuff...\nThis will ensure that we don't access the PlayerProfile asynchronously, which will lead to problems.\nAnd only execute the code if it's synced.", "bodyHTML": "<p dir=\"auto\">This is an asynchronous operation, so you should NOT do <code>e.setDamage()</code> here, as it will have no effect when this is delayed.<br>\nYou need to the following instead:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Optional&lt;PlayerProfile&gt; optional = PlayerProfile.find(p);\nif (!optional .isPresent()) {\n  PlayerProfile.request(p);\n  return;\n}\n\nPlayerProfile profile = optional.get();\n// Do stuff...\"><pre><span class=\"pl-k\">Optional&lt;<span class=\"pl-smi\">PlayerProfile</span>&gt;</span> optional <span class=\"pl-k\">=</span> <span class=\"pl-smi\">PlayerProfile</span><span class=\"pl-k\">.</span>find(p);\n<span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>optional .isPresent()) {\n  <span class=\"pl-smi\">PlayerProfile</span><span class=\"pl-k\">.</span>request(p);\n  <span class=\"pl-k\">return</span>;\n}\n\n<span class=\"pl-smi\">PlayerProfile</span> profile <span class=\"pl-k\">=</span> optional<span class=\"pl-k\">.</span>get();\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Do stuff...</span></pre></div>\n<p dir=\"auto\">This will ensure that we don't access the PlayerProfile asynchronously, which will lead to problems.<br>\nAnd only execute the code if it's synced.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T10:22:15Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n+\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);\n+                    }\n+                });", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex a23335ece..57b54b787 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,39 +32,55 @@ public class BeeListener implements Listener {\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (e.getDamager() instanceof Bee) {\n-            if (e.getEntity() instanceof Player) {\n-                Player p = (Player) e.getEntity();\n-                PlayerProfile.get(p, profile -> {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n \n-                    HashedArmorpiece[] armors = profile.getArmor();\n-                    if (hasFullHazmat(armors)) {\n-                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                            ItemUtils.damageItem(armor, 1, false);\n-                        }\n-                        e.setDamage(0D);\n-                    }\n-                });\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n             }\n         }\n     }\n \n-    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n-        int hazmatCount = 0;\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n \n-        // Check for a Hazmat Suit\n+        String setID = null;\n         for (HashedArmorpiece armor : armors) {\n             Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n             if (!armorPiece.isPresent()) return false;\n \n-            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hazmatCount++;\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n+                    first = false;\n+                }\n+\n+                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n+                        if (setID == null) {\n+                            return true;\n+                        }\n+                        armorCount++;\n+                    }\n+                }\n+\n             }\n         }\n \n-        return hazmatCount == 4;\n+        return armorCount == 4;\n     }\n }\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 57b54b787..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -52,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTg3OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509878", "body": "This is in an async operation, this will happen AFTER the event has fired and therefore have no change. ", "bodyText": "This is in an async operation, this will happen AFTER the event has fired and therefore have no change.", "bodyHTML": "<p dir=\"auto\">This is in an async operation, this will happen AFTER the event has fired and therefore have no change.</p>", "author": "WalshyDev", "createdAt": "2020-06-27T10:20:19Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n+\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex a23335ece..57b54b787 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,39 +32,55 @@ public class BeeListener implements Listener {\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (e.getDamager() instanceof Bee) {\n-            if (e.getEntity() instanceof Player) {\n-                Player p = (Player) e.getEntity();\n-                PlayerProfile.get(p, profile -> {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n \n-                    HashedArmorpiece[] armors = profile.getArmor();\n-                    if (hasFullHazmat(armors)) {\n-                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                            ItemUtils.damageItem(armor, 1, false);\n-                        }\n-                        e.setDamage(0D);\n-                    }\n-                });\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n             }\n         }\n     }\n \n-    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n-        int hazmatCount = 0;\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n \n-        // Check for a Hazmat Suit\n+        String setID = null;\n         for (HashedArmorpiece armor : armors) {\n             Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n             if (!armorPiece.isPresent()) return false;\n \n-            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hazmatCount++;\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n+                    first = false;\n+                }\n+\n+                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n+                        if (setID == null) {\n+                            return true;\n+                        }\n+                        armorCount++;\n+                    }\n+                }\n+\n             }\n         }\n \n-        return hazmatCount == 4;\n+        return armorCount == 4;\n     }\n }\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 57b54b787..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -52,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTkwNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509906", "body": "Useless nested if. &&", "bodyText": "Useless nested if. &&", "bodyHTML": "<p dir=\"auto\">Useless nested if. &amp;&amp;</p>", "author": "WalshyDev", "createdAt": "2020-06-27T10:20:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex a23335ece..57b54b787 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -30,39 +32,55 @@ public class BeeListener implements Listener {\n \n     @EventHandler\n     public void onDamage(EntityDamageByEntityEvent e) {\n-        if (e.getDamager() instanceof Bee) {\n-            if (e.getEntity() instanceof Player) {\n-                Player p = (Player) e.getEntity();\n-                PlayerProfile.get(p, profile -> {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n \n-                    HashedArmorpiece[] armors = profile.getArmor();\n-                    if (hasFullHazmat(armors)) {\n-                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n-                            ItemUtils.damageItem(armor, 1, false);\n-                        }\n-                        e.setDamage(0D);\n-                    }\n-                });\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n             }\n         }\n     }\n \n-    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n-        int hazmatCount = 0;\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n \n-        // Check for a Hazmat Suit\n+        String setID = null;\n         for (HashedArmorpiece armor : armors) {\n             Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n             if (!armorPiece.isPresent()) return false;\n \n-            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hazmatCount++;\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n+                    first = false;\n+                }\n+\n+                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n+                        if (setID == null) {\n+                            return true;\n+                        }\n+                        armorCount++;\n+                    }\n+                }\n+\n             }\n         }\n \n-        return hazmatCount == 4;\n+        return armorCount == 4;\n     }\n }\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex 57b54b787..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -52,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDA2MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446510061", "body": "This should only be true if all items are hazmat gear. Right now, this is not the case. ", "bodyText": "This should only be true if all items are hazmat gear. Right now, this is not the case.", "bodyHTML": "<p dir=\"auto\">This should only be true if all items are hazmat gear. Right now, this is not the case.</p>", "author": "WalshyDev", "createdAt": "2020-06-27T10:22:46Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();\n+\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+        boolean hasHazmat = false;\n+        for (HashedArmorpiece armorPiece : armor) {\n+\n+            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n+            if (!sfArmor.isPresent()) continue;\n+\n+            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hasHazmat = true;", "originalCommit": "73973a00b722b897449a91a9bdf2fd246eb94c53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTY0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446511645", "bodyText": "It never worked like that though. Only 1 piece always protected you from radiation. Idk if it's a bug but players could just do half slime armor and half hazmat suit for:\n\nWater Breathing\nFire Resistance\nRadiation Resistance\nJump Boost\nSpeed Boost\n\nEven I use that set when I play.", "author": "LinoxGH", "createdAt": "2020-06-27T10:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMjA5Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446512093", "bodyText": "This is the radiation protection check though. And for that you ALWAYS needed the full set, as seen here, before you changed this behaviour:\nhttps://github.com/TheBusyBiscuit/Slimefun4/blob/master/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java#L124\nIf any piece is missing, the radiation check continues.", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T10:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 8203ee9d3..69dd15444 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -120,35 +121,19 @@ public class ArmorTask implements Runnable {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(PlayerProfile profile) {\n+    private void checkForRadiation(Player p, PlayerProfile profile) {\n         HashedArmorpiece[] armor = profile.getArmor();\n-        Player p = profile.getPlayer();\n \n-        // Check for a Hazmat Suit\n-        boolean hasHazmat = false;\n-        for (HashedArmorpiece armorPiece : armor) {\n-\n-            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n-            if (!sfArmor.isPresent()) continue;\n-\n-            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n-                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n-                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n-                hasHazmat = true;\n-            }\n-        }\n-\n-        if (!hasHazmat) {\n+        if (!shouldProtect(armor)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (isRadioactive(p, item)) {\n+                if (checkAndApplyRadioactive(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean isRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": {"commit": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 69dd15444..1ac187eca 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -137,7 +137,7 @@ public class ArmorTask implements Runnable {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n-                SlimefunPlugin.getLocal().sendMessage(p, \"messages.radiation\");\n+                SlimefunPlugin.getLocalization().sendMessage(p, \"messages.radiation\");\n \n                 Slimefun.runSync(() -> {\n                     p.addPotionEffects(radiationEffects);\n", "next_change": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -122,18 +121,16 @@ public class ArmorTask implements Runnable {\n     }\n \n     private void checkForRadiation(Player p, PlayerProfile profile) {\n-        HashedArmorpiece[] armor = profile.getArmor();\n-\n-        if (!shouldProtect(armor)) {\n+        if (!profile.isProtected(ProtectionType.RADIATION)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (checkAndApplyRadioactive(p, item)) {\n+                if (checkAndApplyRadiation(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadiation(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": null}]}}]}}]}}, {"oid": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "url": "https://github.com/Slimefun/Slimefun4/commit/b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "message": "Did the requested changes + improvements.", "committedDate": "2020-06-27T12:58:36Z", "type": "commit"}, {"oid": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "url": "https://github.com/Slimefun/Slimefun4/commit/ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into HazmatSuitBees\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java", "committedDate": "2020-06-27T13:01:36Z", "type": "commit"}, {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8", "url": "https://github.com/Slimefun/Slimefun4/commit/a456034005cc99cd89aacd91c5842609dce50ba8", "message": "Fixed merge conflicts.", "committedDate": "2020-06-27T13:07:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTI2NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525265", "body": "Please don't declare an enum inside the interface. Make a seperate file for this...", "bodyText": "Please don't declare an enum inside the interface. Make a seperate file for this...", "bodyHTML": "<p dir=\"auto\">Please don't declare an enum inside the interface. Make a seperate file for this...</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:09:42Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    ProtectionType[] getProtectionTypes();\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    boolean requireFullSet();\n+\n+    enum ProtectionType {\n+\n+        RADIATION,\n+\n+        BEES;\n+    }", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex c142ca7fc..f6b7af88e 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -37,12 +37,5 @@ public interface CustomProtection extends ItemAttribute {\n      *\n      * @return The {@link ProtectionType}s\n      */\n-    boolean requireFullSet();\n-\n-    enum ProtectionType {\n-\n-        RADIATION,\n-\n-        BEES;\n-    }\n+    boolean isFullSetRequired();\n }\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex f6b7af88e..8a24a4cc2 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -24,18 +25,25 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArm\n public interface CustomProtection extends ItemAttribute {\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns which {@link ProtectionType} damages this {@link ItemAttribute}\n+     * will protect the {@link Player} from.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return The {@link ProtectionType}s.\n      */\n     ProtectionType[] getProtectionTypes();\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns whether the full set is required for {@link Player}'s protection on\n+     * assigned {@link ProtectionType} damages.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return Whether or not he full set is required.\n      */\n     boolean isFullSetRequired();\n+\n+    /**\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n+     */\n+    NamespacedKey getSetId();\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTMyMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525321", "body": "This is a bit misleading, should probably be \"isFullSetRequired()\".", "bodyText": "This is a bit misleading, should probably be \"isFullSetRequired()\".", "bodyHTML": "<p dir=\"auto\">This is a bit misleading, should probably be \"isFullSetRequired()\".</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:10:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    ProtectionType[] getProtectionTypes();\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    boolean requireFullSet();", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex c142ca7fc..f6b7af88e 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -37,12 +37,5 @@ public interface CustomProtection extends ItemAttribute {\n      *\n      * @return The {@link ProtectionType}s\n      */\n-    boolean requireFullSet();\n-\n-    enum ProtectionType {\n-\n-        RADIATION,\n-\n-        BEES;\n-    }\n+    boolean isFullSetRequired();\n }\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex f6b7af88e..8a24a4cc2 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -24,18 +25,25 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArm\n public interface CustomProtection extends ItemAttribute {\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns which {@link ProtectionType} damages this {@link ItemAttribute}\n+     * will protect the {@link Player} from.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return The {@link ProtectionType}s.\n      */\n     ProtectionType[] getProtectionTypes();\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns whether the full set is required for {@link Player}'s protection on\n+     * assigned {@link ProtectionType} damages.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return Whether or not he full set is required.\n      */\n     boolean isFullSetRequired();\n+\n+    /**\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n+     */\n+    NamespacedKey getSetId();\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTQ0OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525449", "body": "Please use a NamespacedKey for this rather than a String, otherwise you could run into ID conflicts.", "bodyText": "Please use a NamespacedKey for this rather than a String, otherwise you could run into ID conflicts.", "bodyHTML": "<p dir=\"auto\">Please use a NamespacedKey for this rather than a String, otherwise you could run into ID conflicts.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:11:39Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -29,4 +36,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         return effects;\n     }\n \n+    /**\n+     * This returns the armor set ID of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set ID, <code>null</code> if no set ID is found.\n+     */\n+    public String getSetID() {\n+        return setID;\n+    }", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 40c8540ad..9d48d6a40 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -37,11 +39,11 @@ public class SlimefunArmorPiece extends SlimefunItem {\n     }\n \n     /**\n-     * This returns the armor set ID of this {@link SlimefunArmorPiece}.\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n      *\n-     * @return The set ID, <code>null</code> if no set ID is found.\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n      */\n-    public String getSetID() {\n-        return setID;\n+    public NamespacedKey getSetId() {\n+        return id;\n     }\n }\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 9d48d6a40..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -37,13 +28,4 @@ public class SlimefunArmorPiece extends SlimefunItem {\n     public PotionEffect[] getPotionEffects() {\n         return effects;\n     }\n-\n-    /**\n-     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n-     *\n-     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n-     */\n-    public NamespacedKey getSetId() {\n-        return id;\n-    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTQ2Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525463", "body": "Also: \"Id\", not \"ID\".", "bodyText": "Also: \"Id\", not \"ID\".", "bodyHTML": "<p dir=\"auto\">Also: \"Id\", not \"ID\".</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:11:50Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -29,4 +36,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         return effects;\n     }\n \n+    /**\n+     * This returns the armor set ID of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set ID, <code>null</code> if no set ID is found.\n+     */\n+    public String getSetID() {", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 40c8540ad..9d48d6a40 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -37,11 +39,11 @@ public class SlimefunArmorPiece extends SlimefunItem {\n     }\n \n     /**\n-     * This returns the armor set ID of this {@link SlimefunArmorPiece}.\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n      *\n-     * @return The set ID, <code>null</code> if no set ID is found.\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n      */\n-    public String getSetID() {\n-        return setID;\n+    public NamespacedKey getSetId() {\n+        return id;\n     }\n }\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 9d48d6a40..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -37,13 +28,4 @@ public class SlimefunArmorPiece extends SlimefunItem {\n     public PotionEffect[] getPotionEffects() {\n         return effects;\n     }\n-\n-    /**\n-     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n-     *\n-     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n-     */\n-    public NamespacedKey getSetId() {\n-        return id;\n-    }\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTQ4OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525489", "body": "\"isProtected\" sounds more appropriate.", "bodyText": "\"isProtected\" sounds more appropriate.", "bodyHTML": "<p dir=\"auto\">\"isProtected\" sounds more appropriate.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:12:11Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n+\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n+            }\n+        }\n+    }\n+\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\nindex c5897f96e..c45531d5a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java\n", "chunk": "@@ -51,35 +48,4 @@ public class BeeListener implements Listener {\n         }\n     }\n \n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.BEES) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTUzNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525535", "body": "*Radiation, not Radioactive.", "bodyText": "*Radiation, not Radioactive.", "bodyHTML": "<p dir=\"auto\">*Radiation, not Radioactive.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:12:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,18 +121,19 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n-        // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+    private void checkForRadiation(Player p, PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+\n+        if (!shouldProtect(armor)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (isRadioactive(p, item)) {\n+                if (checkAndApplyRadioactive(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean isRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyODM3OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446528378", "bodyText": "thats how it was", "author": "LinoxGH", "createdAt": "2020-06-27T13:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -122,18 +121,16 @@ public class ArmorTask implements Runnable {\n     }\n \n     private void checkForRadiation(Player p, PlayerProfile profile) {\n-        HashedArmorpiece[] armor = profile.getArmor();\n-\n-        if (!shouldProtect(armor)) {\n+        if (!profile.isProtected(ProtectionType.RADIATION)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (checkAndApplyRadioactive(p, item)) {\n+                if (checkAndApplyRadiation(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadiation(Player p, ItemStack item) {\n         for (SlimefunItem radioactiveItem : SlimefunPlugin.getRegistry().getRadioactiveItems()) {\n             if (radioactiveItem.isItem(item) && Slimefun.isEnabled(p, radioactiveItem, true)) {\n                 // If the item is enabled in the world, then make radioactivity do its job\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTU2OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525569", "body": "\"isProtected\" sounds better here.\r\n\r\nAlso since you are reusing this method twice... It may make sense to make a more general method for this inside PlayerProfile.", "bodyText": "\"isProtected\" sounds better here.\nAlso since you are reusing this method twice... It may make sense to make a more general method for this inside PlayerProfile.", "bodyHTML": "<p dir=\"auto\">\"isProtected\" sounds better here.</p>\n<p dir=\"auto\">Also since you are reusing this method twice... It may make sense to make a more general method for this inside PlayerProfile.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:13:16Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -148,4 +151,35 @@ private boolean isRadioactive(Player p, ItemStack item) {\n         return false;\n     }\n \n+    private boolean shouldProtect(HashedArmorpiece[] armors) {", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -150,36 +147,4 @@ public class ArmorTask implements Runnable {\n \n         return false;\n     }\n-\n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.RADIATION) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTYwNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525607", "body": "Is the id even required in the first place?\r\nI think it would make more sense to have a \"ProtectionType\" argument for this method and check if all 4 protect against this.", "bodyText": "Is the id even required in the first place?\nI think it would make more sense to have a \"ProtectionType\" argument for this method and check if all 4 protect against this.", "bodyHTML": "<p dir=\"auto\">Is the id even required in the first place?<br>\nI think it would make more sense to have a \"ProtectionType\" argument for this method and check if all 4 protect against this.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T13:13:50Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -148,4 +151,35 @@ private boolean isRadioactive(Player p, ItemStack item) {\n         return false;\n     }\n \n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        String setID = null;\n+        for (HashedArmorpiece armor : armors) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();", "originalCommit": "a456034005cc99cd89aacd91c5842609dce50ba8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyODQ4NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446528484", "bodyText": "I wanted to allow people to create sets that only required 1 part for the protection", "author": "LinoxGH", "createdAt": "2020-06-27T13:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "64a1b247b4518577a32006ce1692218a5399af52", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\nindex 1ac187eca..17351980f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java\n", "chunk": "@@ -150,36 +147,4 @@ public class ArmorTask implements Runnable {\n \n         return false;\n     }\n-\n-    private boolean shouldProtect(HashedArmorpiece[] armors) {\n-        int armorCount = 0;\n-        boolean first = true;\n-\n-        String setID = null;\n-        for (HashedArmorpiece armor : armors) {\n-            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n-            if (!armorPiece.isPresent()) return false;\n-\n-            if (armorPiece.get() instanceof CustomProtection) {\n-                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n-\n-                if (first) {\n-                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();\n-                    first = false;\n-                }\n-\n-                for (CustomProtection.ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n-                    if (protectionType == CustomProtection.ProtectionType.RADIATION) {\n-                        if (setID == null) {\n-                            return true;\n-                        }\n-                        armorCount++;\n-                    }\n-                }\n-\n-            }\n-        }\n-\n-        return armorCount == 4;\n-    }\n }\n", "next_change": null}]}}, {"oid": "64a1b247b4518577a32006ce1692218a5399af52", "url": "https://github.com/Slimefun/Slimefun4/commit/64a1b247b4518577a32006ce1692218a5399af52", "message": "Did the requested changes + fixes.", "committedDate": "2020-06-27T14:30:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDEyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570125", "body": "Some documentation here would be nice.", "bodyText": "Some documentation here would be nice.", "bodyHTML": "<p dir=\"auto\">Some documentation here would be nice.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T21:41:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+public enum ProtectionType {\n+\n+    RADIATION,\n+    BEES;\n+\n+}", "originalCommit": "64a1b247b4518577a32006ce1692218a5399af52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java\nindex c4b74703f..5fbc54eeb 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java\n", "chunk": "@@ -1,5 +1,14 @@\n package io.github.thebusybiscuit.slimefun4.core.attributes;\n \n+/**\n+ * Represents the {@link ProtectionType} that a {@link CustomProtection}\n+ * prevents the damage from.\n+ *\n+ * @author Linox\n+ *\n+ * @see CustomProtection\n+ *\n+ */\n public enum ProtectionType {\n \n     RADIATION,\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDE4MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570181", "body": "Is the setID here really required? shouldn't it be `slimefun:hazmat` by default for this class?", "bodyText": "Is the setID here really required? shouldn't it be slimefun:hazmat by default for this class?", "bodyHTML": "<p dir=\"auto\">Is the setID here really required? shouldn't it be <code>slimefun:hazmat</code> by default for this class?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T21:42:53Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n+\n+    private final ProtectionType[] types;\n+\n+    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setID) {\n+        super(category, item, recipeType, recipe, effects, setID);", "originalCommit": "64a1b247b4518577a32006ce1692218a5399af52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MTQyMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446571421", "bodyText": "Thought an addon may extend this but mkay changing it.", "author": "LinoxGH", "createdAt": "2020-06-27T21:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\nindex 16db6724a..dc49b0c83 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n", "chunk": "@@ -1,20 +1,32 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n \n+import org.bukkit.NamespacedKey;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.potion.PotionEffect;\n \n import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+/**\n+ * Represents 1 {@link SlimefunArmorPiece} of the Hazmat armor set.\n+ * One of the very few utilisations of {@link CustomProtection}.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see CustomProtection\n+ *\n+ */\n public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n \n     private final ProtectionType[] types;\n \n-    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setID) {\n-        super(category, item, recipeType, recipe, effects, setID);\n+    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n+        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n \n         types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};\n     }\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\nindex dc49b0c83..3e55f1515 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n", "chunk": "@@ -23,12 +23,14 @@ import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n  */\n public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n \n+    private final NamespacedKey setId;\n     private final ProtectionType[] types;\n \n     public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n-        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n+        super(category, item, recipeType, recipe, effects);\n \n         types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};\n+        setId = new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDE4NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570184", "body": "Missing documentation.", "bodyText": "Missing documentation.", "bodyHTML": "<p dir=\"auto\">Missing documentation.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T21:42:59Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {", "originalCommit": "64a1b247b4518577a32006ce1692218a5399af52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\nindex 16db6724a..dc49b0c83 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n", "chunk": "@@ -1,20 +1,32 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n \n+import org.bukkit.NamespacedKey;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.potion.PotionEffect;\n \n import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+/**\n+ * Represents 1 {@link SlimefunArmorPiece} of the Hazmat armor set.\n+ * One of the very few utilisations of {@link CustomProtection}.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see CustomProtection\n+ *\n+ */\n public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n \n     private final ProtectionType[] types;\n \n-    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setID) {\n-        super(category, item, recipeType, recipe, effects, setID);\n+    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n+        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n \n         types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};\n     }\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\nindex dc49b0c83..3e55f1515 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n", "chunk": "@@ -23,12 +23,14 @@ import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n  */\n public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n \n+    private final NamespacedKey setId;\n     private final ProtectionType[] types;\n \n     public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n-        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n+        super(category, item, recipeType, recipe, effects);\n \n         types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};\n+        setId = new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\");\n     }\n \n     @Override\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDIwNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570206", "body": "Please use a NamespacedKey instead of a String for the setId...", "bodyText": "Please use a NamespacedKey instead of a String for the setId...", "bodyHTML": "<p dir=\"auto\">Please use a NamespacedKey instead of a String for the setId...</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T21:43:19Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -19,6 +22,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n+    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setId) {", "originalCommit": "64a1b247b4518577a32006ce1692218a5399af52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 9d48d6a40..306238eb1 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -22,10 +22,9 @@ public class SlimefunArmorPiece extends SlimefunItem {\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n-    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setId) {\n+    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, NamespacedKey setId) {\n         this(category, item, recipeType, recipe, effects);\n-\n-        this.id = new NamespacedKey(SlimefunPlugin.instance, setId);\n+        this.id = setId;\n     }\n \n     /**\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 306238eb1..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -22,11 +19,6 @@ public class SlimefunArmorPiece extends SlimefunItem {\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n-    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, NamespacedKey setId) {\n-        this(category, item, recipeType, recipe, effects);\n-        this.id = setId;\n-    }\n-\n     /**\n      * An Array of {@link PotionEffect PotionEffects} which get applied to a {@link Player} wearing\n      * this {@link SlimefunArmorPiece}.\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDIxOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570219", "body": "Using Slimefun's instance here defeats the entire purpose of a NamespacedKey...", "bodyText": "Using Slimefun's instance here defeats the entire purpose of a NamespacedKey...", "bodyHTML": "<p dir=\"auto\">Using Slimefun's instance here defeats the entire purpose of a NamespacedKey...</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-27T21:43:37Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -19,6 +22,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n+    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setId) {\n+        this(category, item, recipeType, recipe, effects);\n+\n+        this.id = new NamespacedKey(SlimefunPlugin.instance, setId);", "originalCommit": "64a1b247b4518577a32006ce1692218a5399af52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 9d48d6a40..306238eb1 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -22,10 +22,9 @@ public class SlimefunArmorPiece extends SlimefunItem {\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n-    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setId) {\n+    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, NamespacedKey setId) {\n         this(category, item, recipeType, recipe, effects);\n-\n-        this.id = new NamespacedKey(SlimefunPlugin.instance, setId);\n+        this.id = setId;\n     }\n \n     /**\n", "next_change": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 306238eb1..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -22,11 +19,6 @@ public class SlimefunArmorPiece extends SlimefunItem {\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n-    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, NamespacedKey setId) {\n-        this(category, item, recipeType, recipe, effects);\n-        this.id = setId;\n-    }\n-\n     /**\n      * An Array of {@link PotionEffect PotionEffects} which get applied to a {@link Player} wearing\n      * this {@link SlimefunArmorPiece}.\n", "next_change": null}]}}]}}, {"oid": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "url": "https://github.com/Slimefun/Slimefun4/commit/07d837299ff3feae12eeeb6f37b4891f661a50f6", "message": "Did the requested changes.", "committedDate": "2020-06-27T22:07:37Z", "type": "commit"}, {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "url": "https://github.com/Slimefun/Slimefun4/commit/a935951c229dc1c04646dcd9e72b03b30b81fc6d", "message": "Oops forgot to change these.", "committedDate": "2020-06-27T22:14:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDg1OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446584858", "body": "This method should probably be moved to your `CustomProtection` interface and then implemented in the Hazmat class.", "bodyText": "This method should probably be moved to your CustomProtection interface and then implemented in the Hazmat class.", "bodyHTML": "<p dir=\"auto\">This method should probably be moved to your <code>CustomProtection</code> interface and then implemented in the Hazmat class.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T00:55:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -29,4 +37,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         return effects;\n     }\n \n+    /**\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n+     */\n+    public NamespacedKey getSetId() {\n+        return id;\n+    }", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 306238eb1..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -36,13 +28,4 @@ public class SlimefunArmorPiece extends SlimefunItem {\n     public PotionEffect[] getPotionEffects() {\n         return effects;\n     }\n-\n-    /**\n-     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n-     *\n-     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n-     */\n-    public NamespacedKey getSetId() {\n-        return id;\n-    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDk1Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446584952", "body": "This being null here isn't really the best ideas.\r\nI mean, we only use this key for the CustomProtection armor, so it might make sense to just have the getter in that interface and force the developer to implement this field in their implementation class instead.\r\n\r\nThis way we avoid unnecessary null fields, since those aren't needed in this class here.", "bodyText": "This being null here isn't really the best ideas.\nI mean, we only use this key for the CustomProtection armor, so it might make sense to just have the getter in that interface and force the developer to implement this field in their implementation class instead.\nThis way we avoid unnecessary null fields, since those aren't needed in this class here.", "bodyHTML": "<p dir=\"auto\">This being null here isn't really the best ideas.<br>\nI mean, we only use this key for the CustomProtection armor, so it might make sense to just have the getter in that interface and force the developer to implement this field in their implementation class instead.</p>\n<p dir=\"auto\">This way we avoid unnecessary null fields, since those aren't needed in this class here.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T00:57:24Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -1,16 +1,19 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n \n+import org.bukkit.NamespacedKey;\n import org.bukkit.entity.Player;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.potion.PotionEffect;\n \n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n public class SlimefunArmorPiece extends SlimefunItem {\n \n+    private NamespacedKey id = null;", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 306238eb1..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -1,11 +1,9 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n \n-import org.bukkit.NamespacedKey;\n import org.bukkit.entity.Player;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.potion.PotionEffect;\n \n-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n", "next_change": null}, {"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\nindex 306238eb1..47473bab7 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java\n", "chunk": "@@ -13,7 +11,6 @@ import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n public class SlimefunArmorPiece extends SlimefunItem {\n \n-    private NamespacedKey id = null;\n     private final PotionEffect[] effects;\n \n     public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjA3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586070", "body": "You made a variable for the armour, use it. Also, if you're gonna do a one line if, it's generally only for a short return. This is bad. ", "bodyText": "You made a variable for the armour, use it. Also, if you're gonna do a one line if, it's generally only for a short return. This is bad.", "bodyHTML": "<p dir=\"auto\">You made a variable for the armour, use it. Also, if you're gonna do a one line if, it's generally only for a short return. This is bad.</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:14:35Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java", "diffHunk": "@@ -448,6 +453,39 @@ public static void getBackpack(ItemStack item, Consumer<PlayerBackpack> callback\n         }\n     }\n \n+    public boolean isProtected(ProtectionType type) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        NamespacedKey setId = null;\n+        for (HashedArmorpiece armor : armor) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java b/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\nindex 793438edb..74a2bf75a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\n", "chunk": "@@ -465,16 +464,15 @@ public final class PlayerProfile {\n             if (armorPiece.get() instanceof CustomProtection) {\n                 CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n \n-                if (first) {\n-                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n-                    first = false;\n+                if (setId == null && protectedArmor.isFullSetRequired()) {\n+                    setId = protectedArmor.getSetId();\n                 }\n \n                 for (ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n                     if (protectionType == type) {\n                         if (setId == null) {\n                             return true;\n-                        } else if (setId.equals(armorPiece.get().getSetId())) {\n+                        } else if (setId.equals(protectedArmor.getSetId())) {\n                             armorCount++;\n                         }\n                     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjE0MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586141", "body": "Instead of a first variable you could literally just check if the ID is null and set it. ", "bodyText": "Instead of a first variable you could literally just check if the ID is null and set it.", "bodyHTML": "<p dir=\"auto\">Instead of a first variable you could literally just check if the ID is null and set it.</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:15:23Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java", "diffHunk": "@@ -448,6 +453,39 @@ public static void getBackpack(ItemStack item, Consumer<PlayerBackpack> callback\n         }\n     }\n \n+    public boolean isProtected(ProtectionType type) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        NamespacedKey setId = null;\n+        for (HashedArmorpiece armor : armor) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n+                    first = false;", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java b/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\nindex 793438edb..74a2bf75a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\n", "chunk": "@@ -465,16 +464,15 @@ public final class PlayerProfile {\n             if (armorPiece.get() instanceof CustomProtection) {\n                 CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n \n-                if (first) {\n-                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n-                    first = false;\n+                if (setId == null && protectedArmor.isFullSetRequired()) {\n+                    setId = protectedArmor.getSetId();\n                 }\n \n                 for (ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n                     if (protectionType == type) {\n                         if (setId == null) {\n                             return true;\n-                        } else if (setId.equals(armorPiece.get().getSetId())) {\n+                        } else if (setId.equals(protectedArmor.getSetId())) {\n                             armorCount++;\n                         }\n                     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjE5Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586193", "body": "Again, there's a variable. I don't like all these get()s", "bodyText": "Again, there's a variable. I don't like all these get()s", "bodyHTML": "<p dir=\"auto\">Again, there's a variable. I don't like all these get()s</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:16:17Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java", "diffHunk": "@@ -448,6 +453,39 @@ public static void getBackpack(ItemStack item, Consumer<PlayerBackpack> callback\n         }\n     }\n \n+    public boolean isProtected(ProtectionType type) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        NamespacedKey setId = null;\n+        for (HashedArmorpiece armor : armor) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n+                    first = false;\n+                }\n+\n+                for (ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == type) {\n+                        if (setId == null) {\n+                            return true;\n+                        } else if (setId.equals(armorPiece.get().getSetId())) {", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java b/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\nindex 793438edb..74a2bf75a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java\n", "chunk": "@@ -465,16 +464,15 @@ public final class PlayerProfile {\n             if (armorPiece.get() instanceof CustomProtection) {\n                 CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n \n-                if (first) {\n-                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n-                    first = false;\n+                if (setId == null && protectedArmor.isFullSetRequired()) {\n+                    setId = protectedArmor.getSetId();\n                 }\n \n                 for (ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n                     if (protectionType == type) {\n                         if (setId == null) {\n                             return true;\n-                        } else if (setId.equals(armorPiece.get().getSetId())) {\n+                        } else if (setId.equals(protectedArmor.getSetId())) {\n                             armorCount++;\n                         }\n                     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjMyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586325", "body": "I don't understand what this class does at all from this comment. It doesn't let people put on this armour? But also (?) stops \"applying protection\", what does that mean?\r\n\r\nThis really needs to be reworded. ", "bodyText": "I don't understand what this class does at all from this comment. It doesn't let people put on this armour? But also (?) stops \"applying protection\", what does that mean?\nThis really needs to be reworded.", "bodyHTML": "<p dir=\"auto\">I don't understand what this class does at all from this comment. It doesn't let people put on this armour? But also (?) stops \"applying protection\", what does that mean?</p>\n<p dir=\"auto\">This really needs to be reworded.</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:18:02Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex f6b7af88e..8a24a4cc2 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -7,12 +8,12 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmor\n import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n \n /**\n- * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n- * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ * Implement this interface to a {@link SlimefunArmorPiece} to protect\n+ * the {@link Player} who wears that {@link SlimefunArmorPiece} from\n+ * {@link ProtectionType} damage.\n  *\n- * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n- * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n- * to this {@link SlimefunArmorPiece}'s wearer.\n+ * <b>Important:</b> You need to specify which {@link ProtectionType} damages\n+ * to protect the {@link Player} from.\n  *\n  * @author Linox\n  *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjQwNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586404", "body": "Does this just stop the armour from being damaged or the player too?", "bodyText": "Does this just stop the armour from being damaged or the player too?", "bodyHTML": "<p dir=\"auto\">Does this just stop the armour from being damaged or the player too?</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:19:12Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex f6b7af88e..8a24a4cc2 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -24,18 +25,25 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArm\n public interface CustomProtection extends ItemAttribute {\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns which {@link ProtectionType} damages this {@link ItemAttribute}\n+     * will protect the {@link Player} from.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return The {@link ProtectionType}s.\n      */\n     ProtectionType[] getProtectionTypes();\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns whether the full set is required for {@link Player}'s protection on\n+     * assigned {@link ProtectionType} damages.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return Whether or not he full set is required.\n      */\n     boolean isFullSetRequired();\n+\n+    /**\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n+     */\n+    NamespacedKey getSetId();\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjQyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586425", "body": "Copied comment. Wasn't changed. ", "bodyText": "Copied comment. Wasn't changed.", "bodyHTML": "<p dir=\"auto\">Copied comment. Wasn't changed.</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:19:33Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    ProtectionType[] getProtectionTypes();\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\nindex f6b7af88e..8a24a4cc2 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java\n", "chunk": "@@ -24,18 +25,25 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArm\n public interface CustomProtection extends ItemAttribute {\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns which {@link ProtectionType} damages this {@link ItemAttribute}\n+     * will protect the {@link Player} from.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return The {@link ProtectionType}s.\n      */\n     ProtectionType[] getProtectionTypes();\n \n     /**\n-     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n-     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     * This returns whether the full set is required for {@link Player}'s protection on\n+     * assigned {@link ProtectionType} damages.\n      *\n-     * @return The {@link ProtectionType}s\n+     * @return Whether or not he full set is required.\n      */\n     boolean isFullSetRequired();\n+\n+    /**\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n+     */\n+    NamespacedKey getSetId();\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYxNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586615", "body": "Not sure I'm a fan of this being an enum. I'd rather addons be able to add their own as they wish. This could be a Predicate with the damage event (or such object) and then it's tested. ", "bodyText": "Not sure I'm a fan of this being an enum. I'd rather addons be able to add their own as they wish. This could be a Predicate with the damage event (or such object) and then it's tested.", "bodyHTML": "<p dir=\"auto\">Not sure I'm a fan of this being an enum. I'd rather addons be able to add their own as they wish. This could be a Predicate with the damage event (or such object) and then it's tested.</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:21:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+/**\n+ * Represents the {@link ProtectionType} that a {@link CustomProtection}\n+ * prevents the damage from.\n+ *\n+ * @author Linox\n+ *\n+ * @see CustomProtection\n+ *\n+ */\n+public enum ProtectionType {", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDY2MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446590661", "bodyText": "I don't think I understand this.", "author": "LinoxGH", "createdAt": "2020-06-28T02:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDg5MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446590891", "bodyText": "Instead of accepting an enum, having like a canProtect(Predicate) and then test the predicate for if it can protect.\nThis way, other addons can actually add their own protection with this system.", "author": "WalshyDev", "createdAt": "2020-06-28T02:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDM4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446624386", "bodyText": "I agree that it would be really awesome if addons could add their own types.\nBut I don't really see how a Predicate would be useful here.\nI would rather suggest a Namespaced-key based approach here too.\nHowever I would also recommend to delay this discussion, we can always change it and improve this API later.\nWe probably bombarded Linox with change requests more than enough for now :LUL:\nI'd say this is ready to be merged and we can always make the API more accessible later down the line.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T09:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDA5MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446644091", "bodyText": "I'm ok with this.", "author": "WalshyDev", "createdAt": "2020-06-28T12:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYzMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586631", "body": "Empty line", "bodyText": "Empty line", "bodyHTML": "<p dir=\"auto\">Empty line</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:22:18Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -295,6 +298,41 @@ private SlimefunItems() {}\n         REINFORCED_ALLOY_LEGGINGS.addUnsafeEnchantments(reinforced);\n         REINFORCED_ALLOY_BOOTS.addUnsafeEnchantments(reinforced);\n \n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n+", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\nindex 6d124d54c..1be536b0e 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\n", "chunk": "@@ -299,36 +299,35 @@ public final class SlimefunItems {\n         REINFORCED_ALLOY_BOOTS.addUnsafeEnchantments(reinforced);\n \n         if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n-\n             ItemMeta scubaHelmetMeta = SCUBA_HELMET.getItemMeta();\n             List<String> scubaHelmetMetaLore = scubaHelmetMeta.getLore();\n             scubaHelmetMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             scubaHelmetMeta.setLore(scubaHelmetMetaLore);\n             SCUBA_HELMET.setItemMeta(scubaHelmetMeta);\n \n             ItemMeta hazmatChestplateItemMeta = HAZMAT_CHESTPLATE.getItemMeta();\n             List<String> hazmatChestplateItemMetaLore = hazmatChestplateItemMeta.getLore();\n             hazmatChestplateItemMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             hazmatChestplateItemMeta.setLore(hazmatChestplateItemMetaLore);\n             HAZMAT_CHESTPLATE.setItemMeta(hazmatChestplateItemMeta);\n \n             ItemMeta hazmatLeggingsItemMeta = HAZMAT_LEGGINGS.getItemMeta();\n             List<String> hazmatLeggingsItemMetaLore = hazmatLeggingsItemMeta.getLore();\n             hazmatLeggingsItemMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             hazmatLeggingsItemMeta.setLore(hazmatLeggingsItemMetaLore);\n             HAZMAT_LEGGINGS.setItemMeta(hazmatLeggingsItemMeta);\n \n             ItemMeta rubberBootsItemMeta = RUBBER_BOOTS.getItemMeta();\n             List<String> rubberBootsItemMetaLore = rubberBootsItemMeta.getLore();\n             rubberBootsItemMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             rubberBootsItemMeta.setLore(rubberBootsItemMetaLore);\n             RUBBER_BOOTS.setItemMeta(rubberBootsItemMeta);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjY0OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586648", "body": "ChatColors.color", "bodyText": "ChatColors.color", "bodyHTML": "<p dir=\"auto\">ChatColors.color</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:22:34Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -295,6 +298,41 @@ private SlimefunItems() {}\n         REINFORCED_ALLOY_LEGGINGS.addUnsafeEnchantments(reinforced);\n         REINFORCED_ALLOY_BOOTS.addUnsafeEnchantments(reinforced);\n \n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n+\n+            ItemMeta scubaHelmetMeta = SCUBA_HELMET.getItemMeta();\n+            List<String> scubaHelmetMetaLore = scubaHelmetMeta.getLore();\n+            scubaHelmetMetaLore.addAll(Arrays.asList(\"\",\n+                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\nindex 6d124d54c..1be536b0e 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java\n", "chunk": "@@ -299,36 +299,35 @@ public final class SlimefunItems {\n         REINFORCED_ALLOY_BOOTS.addUnsafeEnchantments(reinforced);\n \n         if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n-\n             ItemMeta scubaHelmetMeta = SCUBA_HELMET.getItemMeta();\n             List<String> scubaHelmetMetaLore = scubaHelmetMeta.getLore();\n             scubaHelmetMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             scubaHelmetMeta.setLore(scubaHelmetMetaLore);\n             SCUBA_HELMET.setItemMeta(scubaHelmetMeta);\n \n             ItemMeta hazmatChestplateItemMeta = HAZMAT_CHESTPLATE.getItemMeta();\n             List<String> hazmatChestplateItemMetaLore = hazmatChestplateItemMeta.getLore();\n             hazmatChestplateItemMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             hazmatChestplateItemMeta.setLore(hazmatChestplateItemMetaLore);\n             HAZMAT_CHESTPLATE.setItemMeta(hazmatChestplateItemMeta);\n \n             ItemMeta hazmatLeggingsItemMeta = HAZMAT_LEGGINGS.getItemMeta();\n             List<String> hazmatLeggingsItemMetaLore = hazmatLeggingsItemMeta.getLore();\n             hazmatLeggingsItemMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             hazmatLeggingsItemMeta.setLore(hazmatLeggingsItemMetaLore);\n             HAZMAT_LEGGINGS.setItemMeta(hazmatLeggingsItemMeta);\n \n             ItemMeta rubberBootsItemMeta = RUBBER_BOOTS.getItemMeta();\n             List<String> rubberBootsItemMetaLore = rubberBootsItemMeta.getLore();\n             rubberBootsItemMetaLore.addAll(Arrays.asList(\"\",\n-                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),\n-                    ChatColor.translateAlternateColorCodes('&', \"&7+Bee Protection\")));\n+                    ChatColors.color( \"&7Equip the full set for:\"),\n+                    ChatColors.color( \"&7+Bee Protection\")));\n             rubberBootsItemMeta.setLore(rubberBootsItemMetaLore);\n             RUBBER_BOOTS.setItemMeta(rubberBootsItemMeta);\n         }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjcyMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586721", "body": "Just initialise right away", "bodyText": "Just initialise right away", "bodyHTML": "<p dir=\"auto\">Just initialise right away</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:23:54Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * Represents 1 {@link SlimefunArmorPiece} of the Hazmat armor set.\n+ * One of the very few utilisations of {@link CustomProtection}.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see CustomProtection\n+ *\n+ */\n+public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n+\n+    private final ProtectionType[] types;\n+\n+    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n+        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n+\n+        types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\nindex dc49b0c83..3e55f1515 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java\n", "chunk": "@@ -23,12 +23,14 @@ import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n  */\n public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n \n+    private final NamespacedKey setId;\n     private final ProtectionType[] types;\n \n     public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n-        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n+        super(category, item, recipeType, recipe, effects);\n \n         types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};\n+        setId = new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\");\n     }\n \n     @Override\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjgxNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586815", "body": "Should cancel. This will mess with other plugins. ", "bodyText": "Should cancel. This will mess with other plugins.", "bodyHTML": "<p dir=\"auto\">Should cancel. This will mess with other plugins.</p>", "author": "WalshyDev", "createdAt": "2020-06-28T01:25:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n+\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+\n+            PlayerProfile profile = optional.get();\n+            if (profile.isProtected(ProtectionType.BEES)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);", "originalCommit": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDg2Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446590863", "bodyText": "Cannot when cancelled bee doesn't stop from trying to attack you.", "author": "LinoxGH", "createdAt": "2020-06-28T02:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDU1MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446624550", "bodyText": "Hmmm, what about setting the anger level or target or such for the Bee?", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T09:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNzUzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446637538", "bodyText": "That would cause more issues most likely.", "author": "LinoxGH", "createdAt": "2020-06-28T11:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjgxNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "url": "https://github.com/Slimefun/Slimefun4/commit/3e271ac78631bd975f95c18a34da7ab3e1de9c75", "message": "Did more requested changes.", "committedDate": "2020-06-28T02:29:51Z", "type": "commit"}]}