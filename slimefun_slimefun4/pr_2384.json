{"pr_number": 2384, "pr_title": "Added Elytra Cap", "pr_author": "Seggan", "pr_createdAt": "2020-10-03T20:48:57Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2384", "timeline": [{"oid": "9e0485e526e02446e334f0416dd8a224b9c1047b", "url": "https://github.com/Slimefun/Slimefun4/commit/9e0485e526e02446e334f0416dd8a224b9c1047b", "message": "Added crash helmet", "committedDate": "2020-10-03T20:21:39Z", "type": "commit"}, {"oid": "23efd62c4961c498cb083786cb6060fff56e60cc", "url": "https://github.com/Slimefun/Slimefun4/commit/23efd62c4961c498cb083786cb6060fff56e60cc", "message": "Added crash helmet listener and research", "committedDate": "2020-10-03T20:31:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MTE2NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499181164", "body": "No star imports, please.", "bodyText": "No star imports, please.", "bodyHTML": "<p dir=\"auto\">No star imports, please.</p>", "author": "poma123", "createdAt": "2020-10-03T20:54:24Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java", "diffHunk": "@@ -13,6 +13,7 @@\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.*;", "originalCommit": "23efd62c4961c498cb083786cb6060fff56e60cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MTI1MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499181251", "bodyText": "hmm ok that was intellij", "author": "Seggan", "createdAt": "2020-10-03T20:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MTE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MTYzMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499181633", "body": "I think the player check should be the first here.", "bodyText": "I think the player check should be the first here.", "bodyHTML": "<p dir=\"auto\">I think the player check should be the first here.</p>", "author": "poma123", "createdAt": "2020-10-03T21:01:47Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {\n+\n+    public CrashHelmetListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL) || !(e.getEntity() instanceof Player)) {", "originalCommit": "23efd62c4961c498cb083786cb6060fff56e60cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MTk5MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499181991", "bodyText": "k", "author": "Seggan", "createdAt": "2020-10-03T21:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MTYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjA3NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499182075", "body": "I would rather declare this near the other armor stuff.", "bodyText": "I would rather declare this near the other armor stuff.", "bodyHTML": "<p dir=\"auto\">I would rather declare this near the other armor stuff.</p>", "author": "poma123", "createdAt": "2020-10-03T21:09:00Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -838,6 +838,8 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack MAGNESIUM_SALT = new SlimefunItemStack(\"MAGNESIUM_SALT\", Material.SUGAR, \"&cMagnesium Salt\", \"\", \"&7A special type of fuel that can be\", \"&7used in a Magnesium-powered Generator\");\n     public static final SlimefunItemStack MAGNESIUM_GENERATOR = new SlimefunItemStack(\"MAGNESIUM_GENERATOR\", HeadTexture.GENERATOR, \"&cMagnesium-powered Generator\", \"\", LoreBuilder.machine(MachineTier.MEDIUM, MachineType.GENERATOR), LoreBuilder.powerBuffer(128), LoreBuilder.powerPerSecond(36));\n \n+    public static final SlimefunItemStack CRASH_HELMET = new SlimefunItemStack(\"CRASH_HELMET\", Material.IRON_HELMET, \"&5Crash Helmet\", \"\", \"&7This helmet will protect you from\", \"&7crashing while flying elytra.\");\n+", "originalCommit": "23efd62c4961c498cb083786cb6060fff56e60cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b540bc05bc96b1a9b925514ec61bb02cb64b8fbc", "url": "https://github.com/Slimefun/Slimefun4/commit/b540bc05bc96b1a9b925514ec61bb02cb64b8fbc", "message": "Crash helmet now works", "committedDate": "2020-10-03T21:20:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjY0OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499182649", "body": "```suggestion\n        if (e.getCause() != EntityDamageEvent.DamageCause.FLY_INTO_WALL || !(e.getEntity() instanceof Player)) {\n```\n", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!(e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL) || !(e.getEntity() instanceof Player)) {\n          \n          \n            \n                    if (e.getCause() != EntityDamageEvent.DamageCause.FLY_INTO_WALL || !(e.getEntity() instanceof Player)) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first\">!</span><span class=\"x x-last\">(</span>e<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k x x-first x-last\">==</span> <span class=\"pl-smi\">EntityDamageEvent</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">DamageCause</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLY_INTO_WALL</span><span class=\"x x-first x-last\">)</span> <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span>(e<span class=\"pl-k\">.</span>getEntity() <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">Player</span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (e<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k x x-first x-last\">!=</span> <span class=\"pl-smi\">EntityDamageEvent</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">DamageCause</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLY_INTO_WALL</span> <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span>(e<span class=\"pl-k\">.</span>getEntity() <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">Player</span>)) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "LinoxGH", "createdAt": "2020-10-03T21:18:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {\n+\n+    public CrashHelmetListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL) || !(e.getEntity() instanceof Player)) {", "originalCommit": "23efd62c4961c498cb083786cb6060fff56e60cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MzA2OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499183068", "bodyText": "@LinoxGH now i need it to check for 2 causes. how would u suggest?", "author": "Seggan", "createdAt": "2020-10-03T21:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4MjY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4Mjc1OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499182759", "body": "I'd have switched places of slime balls and iron ingots.", "bodyText": "I'd have switched places of slime balls and iron ingots.", "bodyHTML": "<p dir=\"auto\">I'd have switched places of slime balls and iron ingots.</p>", "author": "LinoxGH", "createdAt": "2020-10-03T21:20:46Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -1016,6 +1016,10 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         new PotionEffect[] {new PotionEffect(PotionEffectType.NIGHT_VISION, 600, 20)})\n         .register(plugin);\n \n+        new SlimefunItem(categories.technicalGadgets, SlimefunItems.CRASH_HELMET, RecipeType.ARMOR_FORGE,\n+        new ItemStack[]{new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.SLIME_BALL), new ItemStack(Material.SLIME_BALL), new ItemStack(Material.SLIME_BALL), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.LEATHER_HELMET), new ItemStack(Material.IRON_INGOT)})", "originalCommit": "23efd62c4961c498cb083786cb6060fff56e60cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99e0c542aede9f7e8b225a1e67f377f254d7d090", "url": "https://github.com/Slimefun/Slimefun4/commit/99e0c542aede9f7e8b225a1e67f377f254d7d090", "message": "Moved crash helmet item declaration", "committedDate": "2020-10-03T21:22:03Z", "type": "commit"}, {"oid": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "url": "https://github.com/Slimefun/Slimefun4/commit/d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "message": "Changed recipe", "committedDate": "2020-10-03T21:27:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDA1Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499184052", "body": "```suggestion\n        if (e.getCause() != EntityDamageEvent.DamageCause.FALL &&\n            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL) return;\n```\n", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n          \n          \n            \n                        e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n          \n          \n            \n                    if (e.getCause() != EntityDamageEvent.DamageCause.FALL &&\n          \n          \n            \n                        e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL) return;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k x x-first\">!</span><span class=\"x x-last\">(</span>e<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k x x-first x-last\">==</span> <span class=\"pl-smi\">EntityDamageEvent</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">DamageCause</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FALL</span> <span class=\"pl-k x x-first x-last\">||</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            e<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">EntityDamageEvent</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">DamageCause</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLY_INTO_WALL</span>)<span class=\"x x-first x-last\">)</span> <span class=\"pl-k\">return</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (e<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k x x-first x-last\">!=</span> <span class=\"pl-smi\">EntityDamageEvent</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">DamageCause</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FALL</span> <span class=\"pl-k x x-first x-last\">&amp;&amp;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            e<span class=\"pl-k\">.</span>getCause() <span class=\"pl-k\">==</span> <span class=\"pl-smi\">EntityDamageEvent</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">DamageCause</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLY_INTO_WALL</span>) <span class=\"pl-k\">return</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "LinoxGH", "createdAt": "2020-10-03T21:41:38Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {\n+\n+    public CrashHelmetListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;", "originalCommit": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5OTkzMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499199932", "bodyText": "no im trying to see if the type is not one of those 2", "author": "Seggan", "createdAt": "2020-10-04T02:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMzgwNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499203806", "bodyText": "Currently you only check if it's not falling or it is crasjing into the wall this would cause it to fire even when player is poisoned...", "author": "LinoxGH", "createdAt": "2020-10-04T04:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwODMyNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499208326", "bodyText": "@Seggan ^", "author": "LinoxGH", "createdAt": "2020-10-04T05:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MTY4NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499241684", "bodyText": "@LinoxGH this is supposed to fire when the players posioned. It's the return. Your solution would check only if it's crashing. I included both bc I don't know which one is the kinetic energy one.", "author": "Seggan", "createdAt": "2020-10-04T12:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MzMwMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499243300", "bodyText": "Oh I see now", "author": "LinoxGH", "createdAt": "2020-10-04T12:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NDA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjIyMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499266220", "body": "No need for a hardcoded id, you should probably create a class for this item and do an `instanceof` check here instead.", "bodyText": "No need for a hardcoded id, you should probably create a class for this item and do an instanceof check here instead.", "bodyHTML": "<p dir=\"auto\">No need for a hardcoded id, you should probably create a class for this item and do an <code>instanceof</code> check here instead.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T16:54:36Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {\n+\n+    public CrashHelmetListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if ((item != null) && (item.getID().equals(\"CRASH_HELMET\"))) {", "originalCommit": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499266289", "body": "Setting the damage is not really good practice, you should rather cancel the event instead (and maybe play a sound effect too?).", "bodyText": "Setting the damage is not really good practice, you should rather cancel the event instead (and maybe play a sound effect too?).", "bodyHTML": "<p dir=\"auto\">Setting the damage is not really good practice, you should rather cancel the event instead (and maybe play a sound effect too?).</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T16:55:15Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {\n+\n+    public CrashHelmetListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if ((item != null) && (item.getID().equals(\"CRASH_HELMET\"))) {\n+                e.setDamage(0);", "originalCommit": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NzAzNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499267034", "bodyText": "i tried cancelling... didnt really work for some reason", "author": "Seggan", "createdAt": "2020-10-04T17:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NzQ5Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499267492", "bodyText": "also what sound effect would u suggest? id think either smth do do with iron or slime", "author": "Seggan", "createdAt": "2020-10-04T17:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2OTc3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499269770", "bodyText": "I'd try stepping or breaking bedrock or obsidian sound.", "author": "LinoxGH", "createdAt": "2020-10-04T17:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NzIxNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499277215", "bodyText": "confirmed: cancelling event you still die from falling form a high place", "author": "Seggan", "createdAt": "2020-10-04T18:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NzQ3Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499277472", "bodyText": "confirmed: cancelling event you still die from falling form a high place\n\nAfaik cancelling death event doesn't cancel the death but only cancels the item drops and etc. This is a bug/feature of Spigot.", "author": "LinoxGH", "createdAt": "2020-10-04T18:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NzQ4OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499277488", "bodyText": "if you dont die you still take damage", "author": "Seggan", "createdAt": "2020-10-04T18:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NzYzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499277639", "bodyText": "if you dont die you still take damage\n\nFrom what I can remember you need to listen to player damage event. It's fired before player dies.", "author": "LinoxGH", "createdAt": "2020-10-04T18:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODAzNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278036", "bodyText": "Afaik cancelling death event doesn't cancel the death but only cancels the item drops and etc. This is a bug/feature of Spigot.\n\nI meant cancelling the damage event", "author": "Seggan", "createdAt": "2020-10-04T19:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjM3NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499266375", "body": "You forgot to check if they researched the item. `Slimefun.hasUnlocked(p, SlimefunItem, true)`", "bodyText": "You forgot to check if they researched the item. Slimefun.hasUnlocked(p, SlimefunItem, true)", "bodyHTML": "<p dir=\"auto\">You forgot to check if they researched the item. <code>Slimefun.hasUnlocked(p, SlimefunItem, true)</code></p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T16:56:22Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {\n+\n+    public CrashHelmetListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if ((item != null) && (item.getID().equals(\"CRASH_HELMET\"))) {", "originalCommit": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjQwNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499266407", "body": "Missing javadocs and `@author` tag.", "bodyText": "Missing javadocs and @author tag.", "bodyHTML": "<p dir=\"auto\">Missing javadocs and <code>@author</code> tag.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T16:56:44Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/CrashHelmetListener.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+public class CrashHelmetListener implements Listener {", "originalCommit": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NzA2MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499267060", "bodyText": "ok will do", "author": "Seggan", "createdAt": "2020-10-04T17:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjUwNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499266506", "body": "I don't know :/ I'm not the greatest fan of the name \"Crash Helmet\" but I also can't think of a better one, any ideas?", "bodyText": "I don't know :/ I'm not the greatest fan of the name \"Crash Helmet\" but I also can't think of a better one, any ideas?", "bodyHTML": "<p dir=\"auto\">I don't know :/ I'm not the greatest fan of the name \"Crash Helmet\" but I also can't think of a better one, any ideas?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T16:57:47Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -56,6 +56,7 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack REINFORCED_CLOTH = new SlimefunItemStack(\"REINFORCED_CLOTH\", Material.PAPER, \"&bReinforced Cloth\", \"\", \"&fThis cloth has been reinforced\", \"&fwith &bLead &fto protect against\", \"&fradioactive substances\");\n     public static final SlimefunItemStack TIN_CAN = new SlimefunItemStack(\"CAN\", HeadTexture.TIN_CAN, \"&fTin Can\");\n     public static final SlimefunItemStack NIGHT_VISION_GOGGLES = new SlimefunItemStack(\"NIGHT_VISION_GOGGLES\", Material.LEATHER_HELMET, Color.BLACK, \"&aNight Vision Goggles\", \"\", \"&9+ Night Vision\");\n+    public static final SlimefunItemStack CRASH_HELMET = new SlimefunItemStack(\"CRASH_HELMET\", Material.IRON_HELMET, \"&5Crash Helmet\", \"\", \"&7This helmet will protect you from\", \"&7crashing while flying elytra.\");", "originalCommit": "d9aceea4d67aadeab0437d8ddecc2bdc7e0f4f10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjgyMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499266823", "bodyText": "Feather Helmet or Shield Helmet? Idk", "author": "poma123", "createdAt": "2020-10-04T17:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NzAwNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499267005", "bodyText": "Maybe something like Elytra Cap? And then include elytra scales in the recipe?", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T17:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NzE3Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499267172", "bodyText": "hard hat, safety helmet...", "author": "Seggan", "createdAt": "2020-10-04T17:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2OTk0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499269945", "bodyText": "Barrete or Elytra Barette?", "author": "LinoxGH", "createdAt": "2020-10-04T17:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3MzgzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499273838", "bodyText": "ima think about elytra cap (elytra scales is a great idea). ima also make it purple then", "author": "Seggan", "createdAt": "2020-10-04T18:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NjUwNg=="}], "type": "inlineReview"}, {"oid": "70be1c38d0c79d82f1e1879a51aef15c7ec26149", "url": "https://github.com/Slimefun/Slimefun4/commit/70be1c38d0c79d82f1e1879a51aef15c7ec26149", "message": "Did requested changes", "committedDate": "2020-10-04T18:42:50Z", "type": "commit"}, {"oid": "1dbdd077ec3c4c8d2bf85d28fb8825872320e3b5", "url": "https://github.com/Slimefun/Slimefun4/commit/1dbdd077ec3c4c8d2bf85d28fb8825872320e3b5", "message": "Updated recipe", "committedDate": "2020-10-04T18:43:30Z", "type": "commit"}, {"oid": "107125802cc7ea75b1bdd1e242b786d29dff0a1c", "url": "https://github.com/Slimefun/Slimefun4/commit/107125802cc7ea75b1bdd1e242b786d29dff0a1c", "message": "Forgot to change id. Reverted back to setDamage()", "committedDate": "2020-10-04T19:02:21Z", "type": "commit"}, {"oid": "f87a1d3660f03de84949f0787976ccf6e5d7649f", "url": "https://github.com/Slimefun/Slimefun4/commit/f87a1d3660f03de84949f0787976ccf6e5d7649f", "message": "Added research check", "committedDate": "2020-10-04T19:07:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODI3MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278271", "body": "Please don't just move around imports.", "bodyText": "Please don't just move around imports.", "bodyHTML": "<p dir=\"auto\">Please don't just move around imports.</p>", "author": "LinoxGH", "createdAt": "2020-10-04T19:06:23Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java", "diffHunk": "@@ -13,6 +13,42 @@\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.AncientAltarListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.BackpackListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.BeeListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.BlockListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.BlockPhysicsListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.CargoNodeListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.CoolerListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.ElytraCapListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.DeathpointListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.DebugFishListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.DispenserListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.EnhancedFurnaceListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.EntityInteractionListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.ExplosionsListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.FireworksListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.GadgetsListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.GrapplingHookListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.IronGolemListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.ItemPickupListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MultiBlockListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.PiglinListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.PlayerProfileListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SeismicAxeListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunBootsListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunBowListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunGuideListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunItemConsumeListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunItemListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.SoulboundListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.TalismanListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.VampireBladeListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.VanillaMachinesListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.VillagerTradingListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.WitherListener;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.WorldListener;", "originalCommit": "107125802cc7ea75b1bdd1e242b786d29dff0a1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODc5MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278790", "bodyText": "i didnt. my ide did", "author": "Seggan", "createdAt": "2020-10-04T19:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODI4NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278285", "body": "Those imports should have been here.", "bodyText": "Those imports should have been here.", "bodyHTML": "<p dir=\"auto\">Those imports should have been here.</p>", "author": "LinoxGH", "createdAt": "2020-10-04T19:06:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java", "diffHunk": "@@ -56,41 +92,6 @@\n import io.github.thebusybiscuit.slimefun4.implementation.items.tools.GrapplingHook;\n import io.github.thebusybiscuit.slimefun4.implementation.items.weapons.SeismicAxe;\n import io.github.thebusybiscuit.slimefun4.implementation.items.weapons.VampireBlade;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.AncientAltarListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.BackpackListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.BeeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.BlockListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.BlockPhysicsListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.CargoNodeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.CoolerListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.DeathpointListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.DebugFishListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.DispenserListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.EnhancedFurnaceListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.EntityInteractionListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.ExplosionsListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.FireworksListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.GadgetsListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.GrapplingHookListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.IronGolemListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.ItemPickupListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.MultiBlockListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.PiglinListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.PlayerProfileListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SeismicAxeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunBootsListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunBowListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunGuideListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunItemConsumeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SlimefunItemListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.SoulboundListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.TalismanListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.VampireBladeListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.VanillaMachinesListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.VillagerTradingListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.WitherListener;\n-import io.github.thebusybiscuit.slimefun4.implementation.listeners.WorldListener;", "originalCommit": "107125802cc7ea75b1bdd1e242b786d29dff0a1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODc3Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278773", "bodyText": "hmm no i didnt remove them them still appear in my ide", "author": "Seggan", "createdAt": "2020-10-04T19:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODg5OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278899", "bodyText": "hmm no i didnt remove them them still appear in my ide\n\nI mean the imports have been moved.", "author": "LinoxGH", "createdAt": "2020-10-04T19:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODM2Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278367", "body": "An explanation of what the item does would be nice.", "bodyText": "An explanation of what the item does would be nice.", "bodyHTML": "<p dir=\"auto\">An explanation of what the item does would be nice.</p>", "author": "LinoxGH", "createdAt": "2020-10-04T19:07:29Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.inventory.ItemStack;\n+\n+/**\n+ * A class for the Elytra Cap.\n+ *\n+ * @author Seggan\n+ */", "originalCommit": "f87a1d3660f03de84949f0787976ccf6e5d7649f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODQxMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278411", "body": "Also you could try to use the SlimefunArmorPiece instead.", "bodyText": "Also you could try to use the SlimefunArmorPiece instead.", "bodyHTML": "<p dir=\"auto\">Also you could try to use the SlimefunArmorPiece instead.</p>", "author": "LinoxGH", "createdAt": "2020-10-04T19:07:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.inventory.ItemStack;\n+\n+/**\n+ * A class for the Elytra Cap.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCap extends SlimefunItem {", "originalCommit": "f87a1d3660f03de84949f0787976ccf6e5d7649f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODY2MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278660", "bodyText": "why?", "author": "Seggan", "createdAt": "2020-10-04T19:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3OTAzMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499279033", "bodyText": "why?\n\nBecause it's entire purpose is sf armor? And using a centralized api is always easier to maintain? Also it has some performance improvements? Also its use should be more wide-spread?", "author": "LinoxGH", "createdAt": "2020-10-04T19:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3OTE3OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499279179", "bodyText": "okokok", "author": "Seggan", "createdAt": "2020-10-04T19:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3OTQyOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499279428", "bodyText": "okokok\n\nBut this isn't a necessity. Btw you could do this by adding a new ProtectionType called CrashProtection. I'm more than willing to help you in #programming-help channel.", "author": "LinoxGH", "createdAt": "2020-10-04T19:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4MzI2MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499283261", "bodyText": "thnaks", "author": "Seggan", "createdAt": "2020-10-04T20:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODU5MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499278590", "body": "Maybe make the crashing damage the helmet? This would be nice to add.", "bodyText": "Maybe make the crashing damage the helmet? This would be nice to add.", "bodyHTML": "<p dir=\"auto\">Maybe make the crashing damage the helmet? This would be nice to add.</p>", "author": "LinoxGH", "createdAt": "2020-10-04T19:09:40Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCapListener.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCapListener implements Listener {\n+\n+    public ElytraCapListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            if (!Slimefun.hasUnlocked(p, stack, true)) return;\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if (item instanceof ElytraCap) {\n+                e.setDamage(0);\n+                p.playSound(p.getLocation(), Sound.BLOCK_STONE_HIT, 20, 1);", "originalCommit": "f87a1d3660f03de84949f0787976ccf6e5d7649f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "url": "https://github.com/Slimefun/Slimefun4/commit/8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "message": "Did some requested changes", "committedDate": "2020-10-04T20:08:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MDYwOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499290608", "body": "This is now redundant.", "bodyText": "This is now redundant.", "bodyHTML": "<p dir=\"auto\">This is now redundant.</p>", "author": "LinoxGH", "createdAt": "2020-10-04T21:27:42Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCapListener.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.Damageable;", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMzI0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499303242", "bodyText": "how? other than the damageable they are all used", "author": "Seggan", "createdAt": "2020-10-05T00:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MDYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MDY1NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499290655", "body": "Why is this item in Technical Gadgets category? Is it random?", "bodyText": "Why is this item in Technical Gadgets category? Is it random?", "bodyHTML": "<p dir=\"auto\">Why is this item in Technical Gadgets category? Is it random?</p>", "author": "LinoxGH", "createdAt": "2020-10-04T21:28:27Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -1016,6 +1017,10 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         new PotionEffect[] {new PotionEffect(PotionEffectType.NIGHT_VISION, 600, 20)})\n         .register(plugin);\n \n+        new ElytraCap(categories.technicalGadgets, SlimefunItems.ELYTRA_CAP, RecipeType.ARMOR_FORGE,", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMDEyOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499300128", "bodyText": "On discord it was suggested to put in technical gadgets", "author": "Seggan", "createdAt": "2020-10-04T23:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MDY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzQzMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293433", "body": "*flying with an Elytra", "bodyText": "*flying with an Elytra", "bodyHTML": "<p dir=\"auto\">*flying with an Elytra</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:01:03Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -56,6 +56,7 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack REINFORCED_CLOTH = new SlimefunItemStack(\"REINFORCED_CLOTH\", Material.PAPER, \"&bReinforced Cloth\", \"\", \"&fThis cloth has been reinforced\", \"&fwith &bLead &fto protect against\", \"&fradioactive substances\");\n     public static final SlimefunItemStack TIN_CAN = new SlimefunItemStack(\"CAN\", HeadTexture.TIN_CAN, \"&fTin Can\");\n     public static final SlimefunItemStack NIGHT_VISION_GOGGLES = new SlimefunItemStack(\"NIGHT_VISION_GOGGLES\", Material.LEATHER_HELMET, Color.BLACK, \"&aNight Vision Goggles\", \"\", \"&9+ Night Vision\");\n+    public static final SlimefunItemStack ELYTRA_CAP = new SlimefunItemStack(\"ELYTRA_CAP\", Material.LEATHER_HELMET, Color.PURPLE, \"&5Elytra Cap\", \"\", \"&7This helmet will protect you from\", \"&7crashing while flying elytra.\");", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzQ2OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293469", "body": "*an Elytra", "bodyText": "*an Elytra", "bodyHTML": "<p dir=\"auto\">*an Elytra</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:01:32Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+/**\n+ * The {@link ElytraCap} negates damage taken when crashing into a wall using elytra.", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzY0OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293649", "body": "You should add a parameter nonnull default annotation here", "bodyText": "You should add a parameter nonnull default annotation here", "bodyHTML": "<p dir=\"auto\">You should add a parameter nonnull default annotation here</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:03:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+/**\n+ * The {@link ElytraCap} negates damage taken when crashing into a wall using elytra.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCap extends SlimefunArmorPiece implements DamageableItem {\n+\n+    public ElytraCap(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzY5MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293690", "body": "Also since this isn't gonna have potion effects you could remove the last parameter here, why does this extend `SlimefunArmorPiece` anyway?", "bodyText": "Also since this isn't gonna have potion effects you could remove the last parameter here, why does this extend SlimefunArmorPiece anyway?", "bodyHTML": "<p dir=\"auto\">Also since this isn't gonna have potion effects you could remove the last parameter here, why does this extend <code>SlimefunArmorPiece</code> anyway?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:04:22Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+/**\n+ * The {@link ElytraCap} negates damage taken when crashing into a wall using elytra.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCap extends SlimefunArmorPiece implements DamageableItem {\n+\n+    public ElytraCap(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMjA4MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499302081", "bodyText": "@LinoxGH told me to in #2384 (comment)", "author": "Seggan", "createdAt": "2020-10-04T23:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMjkzMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499302930", "bodyText": "also i have plans to turn this into an armor set", "author": "Seggan", "createdAt": "2020-10-05T00:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzczNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293734", "body": "The key should be renamed.", "bodyText": "The key should be renamed.", "bodyHTML": "<p dir=\"auto\">The key should be renamed.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:04:57Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java", "diffHunk": "@@ -276,6 +276,7 @@ public static void setupResearches() {\n         register(\"climbing_pick\", 265, \"Block Raider\", 20, SlimefunItems.CLIMBING_PICK);\n         register(\"even_higher_tier_capacitors\", 266, \"Tier 3 Capacitors\", 40, SlimefunItems.ENERGIZED_CAPACITOR);\n         register(\"caveman_talisman\", 267, \"Talisman of the Caveman\", 20, SlimefunItems.TALISMAN_CAVEMAN);\n+        register(\"crash_helmet\", 268, \"Crash Gear\", 20, SlimefunItems.ELYTRA_CAP);", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Mzc3OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293779", "body": "This is more like a magical gadget now", "bodyText": "This is more like a magical gadget now", "bodyHTML": "<p dir=\"auto\">This is more like a magical gadget now</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:05:12Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -1016,6 +1017,10 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         new PotionEffect[] {new PotionEffect(PotionEffectType.NIGHT_VISION, 600, 20)})\n         .register(plugin);\n \n+        new ElytraCap(categories.technicalGadgets, SlimefunItems.ELYTRA_CAP, RecipeType.ARMOR_FORGE,", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDU3OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499474579", "bodyText": "Still should be in magical gadgets.", "author": "TheBusyBiscuit", "createdAt": "2020-10-05T09:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Mzc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Mzg0MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293840", "body": "DON'T.\r\n\r\nI explicitly told you to use the one where you pass the SlimefunItem because now you're just doing `SlimefunItem.getByItem(stack);` twice...", "bodyText": "DON'T.\nI explicitly told you to use the one where you pass the SlimefunItem because now you're just doing SlimefunItem.getByItem(stack); twice...", "bodyHTML": "<p dir=\"auto\">DON'T.</p>\n<p dir=\"auto\">I explicitly told you to use the one where you pass the SlimefunItem because now you're just doing <code>SlimefunItem.getByItem(stack);</code> twice...</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:06:08Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCapListener.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.Damageable;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCapListener implements Listener {\n+\n+    public ElytraCapListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            if (!Slimefun.hasUnlocked(p, stack, true)) return;", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Mzg4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293886", "body": "Why 20?", "bodyText": "Why 20?", "bodyHTML": "<p dir=\"auto\">Why 20?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:06:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCapListener.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.Damageable;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCapListener implements Listener {\n+\n+    public ElytraCapListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            if (!Slimefun.hasUnlocked(p, stack, true)) return;\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if (item instanceof ElytraCap) {\n+                e.setDamage(0);\n+                p.playSound(p.getLocation(), Sound.BLOCK_STONE_HIT, 20, 1);", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMjE3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499302170", "bodyText": "I could barely hear it at 10", "author": "Seggan", "createdAt": "2020-10-04T23:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Mzg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzkyNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499293926", "body": "You could override the `damageItem` method and put this check there", "bodyText": "You could override the damageItem method and put this check there", "bodyHTML": "<p dir=\"auto\">You could override the <code>damageItem</code> method and put this check there</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-04T22:07:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCapListener.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.Damageable;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCapListener implements Listener {\n+\n+    public ElytraCapListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            if (!Slimefun.hasUnlocked(p, stack, true)) return;\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if (item instanceof ElytraCap) {\n+                e.setDamage(0);\n+                p.playSound(p.getLocation(), Sound.BLOCK_STONE_HIT, 20, 1);\n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    ((ElytraCap) item).damageItem(p, stack);\n+                }", "originalCommit": "8bbef4c9110b6c20774d9c53e5d5e7a63166c9a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNjY4NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499306684", "bodyText": "due to #2384 (comment) i have to generalize it so i cant do what you requested", "author": "Seggan", "createdAt": "2020-10-05T00:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MzkyNg=="}], "type": "inlineReview"}, {"oid": "d6df2ea00c9074b5361c60081998e87c1490b24b", "url": "https://github.com/Slimefun/Slimefun4/commit/d6df2ea00c9074b5361c60081998e87c1490b24b", "message": "Added crash protection type", "committedDate": "2020-10-05T01:59:10Z", "type": "commit"}, {"oid": "3dcd5942aaa3be9a75747cdca1d5ce738646f1d0", "url": "https://github.com/Slimefun/Slimefun4/commit/3dcd5942aaa3be9a75747cdca1d5ce738646f1d0", "message": "Changed some linguistic things (Biscuit needs to be an English professor)", "committedDate": "2020-10-05T02:03:48Z", "type": "commit"}, {"oid": "7f1bddb7590e2edb6d09d120cb538d7412216335", "url": "https://github.com/Slimefun/Slimefun4/commit/7f1bddb7590e2edb6d09d120cb538d7412216335", "message": "Merge branch 'text_revisions'", "committedDate": "2020-10-05T02:05:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDI2NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499474265", "body": "No no no no, there is a method like `ProtectiveArmor#hasProtectionAgainst()` or so this should be used.\r\nAnd please stop with this excessive use of `return;` statements and inverse conditions, that's not clean at all.", "bodyText": "No no no no, there is a method like ProtectiveArmor#hasProtectionAgainst() or so this should be used.\nAnd please stop with this excessive use of return; statements and inverse conditions, that's not clean at all.", "bodyHTML": "<p dir=\"auto\">No no no no, there is a method like <code>ProtectiveArmor#hasProtectionAgainst()</code> or so this should be used.<br>\nAnd please stop with this excessive use of <code>return;</code> statements and inverse conditions, that's not clean at all.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-05T09:46:59Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCapListener.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Arrays;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCapListener implements Listener {\n+\n+    public ElytraCapListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if (!Slimefun.hasUnlocked(p, item, true)) return;\n+            if (item instanceof ProtectiveArmor) {\n+                if (!Arrays.asList(((ProtectiveArmor) item).getProtectionTypes())\n+                    .contains(ProtectionType.FLYING_INTO_WALL)) return;", "originalCommit": "7f1bddb7590e2edb6d09d120cb538d7412216335", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2OTU0Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499569546", "bodyText": "So invert the condition and convert to normal if?", "author": "Seggan", "createdAt": "2020-10-05T12:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2Mzc2Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499663762", "bodyText": "i do not see any ProtectiveArmor#hasProtectionAgainst()", "author": "Seggan", "createdAt": "2020-10-05T14:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2NjMzNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499666335", "bodyText": "It may be in Slimefun class or sth. Check hazmat suit code.", "author": "LinoxGH", "createdAt": "2020-10-05T15:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NDg5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499774896", "bodyText": "@Seggan PlayerProfile#hasFullProtectionAgainst()\nhttps://github.com/Slimefun/Slimefun4/blob/master/src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java#L471", "author": "poma123", "createdAt": "2020-10-05T17:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3NDI2NQ=="}], "type": "inlineReview"}, {"oid": "51dd53cae193bb8db8be4da7ed3d314cf101cd31", "url": "https://github.com/Slimefun/Slimefun4/commit/51dd53cae193bb8db8be4da7ed3d314cf101cd31", "message": "Moved elytra cap to magical gadgets", "committedDate": "2020-10-05T14:01:38Z", "type": "commit"}, {"oid": "bb24bdd8375a18ff67c1e961379269c335dc19b4", "url": "https://github.com/Slimefun/Slimefun4/commit/bb24bdd8375a18ff67c1e961379269c335dc19b4", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-10-05T14:55:26Z", "type": "commit"}, {"oid": "58e2b9ab3b694f1e750fafc911ab6ea5e4ff33c4", "url": "https://github.com/Slimefun/Slimefun4/commit/58e2b9ab3b694f1e750fafc911ab6ea5e4ff33c4", "message": "Added default annonation", "committedDate": "2020-10-05T15:01:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NjYwMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499776601", "body": "We don't want to mix imports with different purposes.", "bodyText": "We don't want to mix imports with different purposes.", "bodyHTML": "<p dir=\"auto\">We don't want to mix imports with different purposes.</p>", "author": "LinoxGH", "createdAt": "2020-10-05T18:01:36Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunPlugin.java", "diffHunk": "@@ -12,7 +12,6 @@\n \n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n-", "originalCommit": "58e2b9ab3b694f1e750fafc911ab6ea5e4ff33c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2NjkxMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499866912", "body": "This can/should be final.", "bodyText": "This can/should be final.", "bodyHTML": "<p dir=\"auto\">This can/should be final.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-05T20:55:12Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * The {@link ElytraCap} negates damage taken when crashing into a wall using an elytra.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCap extends SlimefunArmorPiece implements DamageableItem, ProtectiveArmor {\n+\n+    private NamespacedKey key;", "originalCommit": "58e2b9ab3b694f1e750fafc911ab6ea5e4ff33c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2NzIwMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499867201", "body": "You could add an `@see ElytraCapListener` here to link to it", "bodyText": "You could add an @see ElytraCapListener here to link to it", "bodyHTML": "<p dir=\"auto\">You could add an <code>@see ElytraCapListener</code> here to link to it</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-05T20:55:46Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * The {@link ElytraCap} negates damage taken when crashing into a wall using an elytra.\n+ *\n+ * @author Seggan", "originalCommit": "58e2b9ab3b694f1e750fafc911ab6ea5e4ff33c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b3e31a8c7b03c91cbd984143841779d269bd2af", "url": "https://github.com/Slimefun/Slimefun4/commit/4b3e31a8c7b03c91cbd984143841779d269bd2af", "message": "Renamed listener", "committedDate": "2020-10-05T20:56:25Z", "type": "commit"}, {"oid": "a4dc1428bc5bc52362c95ac3049079cbe12d977d", "url": "https://github.com/Slimefun/Slimefun4/commit/a4dc1428bc5bc52362c95ac3049079cbe12d977d", "message": "Changed protection check (untested)", "committedDate": "2020-10-05T21:02:09Z", "type": "commit"}, {"oid": "db6295616e9e7ef3ed891c41ea0b2b9d57765ed5", "url": "https://github.com/Slimefun/Slimefun4/commit/db6295616e9e7ef3ed891c41ea0b2b9d57765ed5", "message": "Did more requested changes", "committedDate": "2020-10-05T21:05:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg5MTgwOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499891808", "body": "You should just import this instead", "bodyText": "You should just import this instead", "bodyHTML": "<p dir=\"auto\">You should just import this instead</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-05T21:49:46Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/ElytraCap.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * The {@link ElytraCap} negates damage taken when crashing into a wall using an elytra.\n+ *\n+ * @author Seggan\n+ *\n+ * @see io.github.thebusybiscuit.slimefun4.implementation.listeners.ElytraCrashListener", "originalCommit": "db6295616e9e7ef3ed891c41ea0b2b9d57765ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNTg0MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r499905841", "body": "These three lines should be moved further down, the `PlayerProfile` caches the armor too, so you can directly access the item that way and save a ton of performance too.", "bodyText": "These three lines should be moved further down, the PlayerProfile caches the armor too, so you can directly access the item that way and save a ton of performance too.", "bodyHTML": "<p dir=\"auto\">These three lines should be moved further down, the <code>PlayerProfile</code> caches the armor too, so you can directly access the item that way and save a ton of performance too.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-05T22:26:23Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCrashListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCrashListener implements Listener {\n+\n+    public ElytraCrashListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            ItemStack stack = p.getInventory().getHelmet();\n+            SlimefunItem item = SlimefunItem.getByItem(stack);\n+            if (!Slimefun.hasUnlocked(p, item, true)) return;", "originalCommit": "db6295616e9e7ef3ed891c41ea0b2b9d57765ed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1ede58f85ad6d51d2229418f859c432eaf90fa4", "url": "https://github.com/Slimefun/Slimefun4/commit/d1ede58f85ad6d51d2229418f859c432eaf90fa4", "message": "More requested changes...", "committedDate": "2020-10-06T19:12:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MDI4NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500540285", "body": "Why is this import up here btw and not with the rest?", "bodyText": "Why is this import up here btw and not with the rest?", "bodyHTML": "<p dir=\"auto\">Why is this import up here btw and not with the rest?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-06T19:21:14Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -5,6 +5,7 @@\n \n import javax.annotation.Nonnull;\n \n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;", "originalCommit": "d1ede58f85ad6d51d2229418f859c432eaf90fa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0OTAwMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500549003", "bodyText": "dunno", "author": "Seggan", "createdAt": "2020-10-06T19:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MDI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0OTY5NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500549694", "bodyText": "Then move it back down to the rest?", "author": "TheBusyBiscuit", "createdAt": "2020-10-06T19:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MDI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MTI0NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500541244", "body": "This line is redundant, it's already done in #hashasFullProtectionAgainst", "bodyText": "This line is redundant, it's already done in #hashasFullProtectionAgainst", "bodyHTML": "<p dir=\"auto\">This line is redundant, it's already done in #hashasFullProtectionAgainst</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-06T19:23:01Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCrashListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCrashListener implements Listener {\n+\n+    public ElytraCrashListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+            HashedArmorpiece helmet = profile.getArmor()[0];\n+            SlimefunItem item;\n+            if (helmet.getItem().isPresent()) {\n+                item = helmet.getItem().get();\n+            } else {\n+                return;\n+            }\n+            if (Slimefun.hasUnlocked(p, item, true)) {\n+                if (item instanceof ProtectiveArmor) {", "originalCommit": "d1ede58f85ad6d51d2229418f859c432eaf90fa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0OTI0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500549245", "bodyText": "already done (noticed it myself)", "author": "Seggan", "createdAt": "2020-10-06T19:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MTI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MTU2NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500541564", "body": "That's just really ugly, simply do an if statement and put the rest inside the brackets of that if statement.", "bodyText": "That's just really ugly, simply do an if statement and put the rest inside the brackets of that if statement.", "bodyHTML": "<p dir=\"auto\">That's just really ugly, simply do an if statement and put the rest inside the brackets of that if statement.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-06T19:23:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCrashListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCrashListener implements Listener {\n+\n+    public ElytraCrashListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+            HashedArmorpiece helmet = profile.getArmor()[0];\n+            SlimefunItem item;\n+            if (helmet.getItem().isPresent()) {\n+                item = helmet.getItem().get();\n+            } else {\n+                return;\n+            }", "originalCommit": "d1ede58f85ad6d51d2229418f859c432eaf90fa4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MTY4Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500541683", "body": "Also you can merge these statements with &&", "bodyText": "Also you can merge these statements with &&", "bodyHTML": "<p dir=\"auto\">Also you can merge these statements with &amp;&amp;</p>", "author": "TheBusyBiscuit", "createdAt": "2020-10-06T19:23:56Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCrashListener.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCrashListener implements Listener {\n+\n+    public ElytraCrashListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+            HashedArmorpiece helmet = profile.getArmor()[0];\n+            SlimefunItem item;\n+            if (helmet.getItem().isPresent()) {\n+                item = helmet.getItem().get();\n+            } else {\n+                return;\n+            }\n+            if (Slimefun.hasUnlocked(p, item, true)) {\n+                if (item instanceof ProtectiveArmor) {\n+                    if (profile.hasFullProtectionAgainst(ProtectionType.FLYING_INTO_WALL)) {", "originalCommit": "d1ede58f85ad6d51d2229418f859c432eaf90fa4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "20aa5d49dc327745f65c5db9a3079a830f522b76", "url": "https://github.com/Slimefun/Slimefun4/commit/20aa5d49dc327745f65c5db9a3079a830f522b76", "message": "Merged ifs", "committedDate": "2020-10-06T19:34:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0OTU0Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2384#discussion_r500549543", "body": "```suggestion\r\n\r\n            if (helmet.getItem().isPresent()) {\r\n                SlimefunItem item = helmet.getItem().get();\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SlimefunItem item;\n          \n          \n            \n                        if (helmet.getItem().isPresent()) {\n          \n          \n            \n                            item = helmet.getItem().get();\n          \n          \n            \n            \n          \n          \n            \n                        if (helmet.getItem().isPresent()) {\n          \n          \n            \n                            SlimefunItem item = helmet.getItem().get();", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">            </span><span class=\"pl-smi x\">SlimefunItem</span><span class=\"x x-last\"> item;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span> (helmet<span class=\"pl-k\">.</span>getItem()<span class=\"pl-k\">.</span>isPresent()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                item <span class=\"pl-k\">=</span> helmet<span class=\"pl-k\">.</span>getItem()<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span> (helmet<span class=\"pl-k\">.</span>getItem()<span class=\"pl-k\">.</span>isPresent()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-smi x x-first\">SlimefunItem</span><span class=\"x x-last\"> </span>item <span class=\"pl-k\">=</span> helmet<span class=\"pl-k\">.</span>getItem()<span class=\"pl-k\">.</span>get();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TheBusyBiscuit", "createdAt": "2020-10-06T19:38:42Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ElytraCrashListener.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.ElytraCap;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Listener} for the {@link ElytraCap}.\n+ *\n+ * @author Seggan\n+ */\n+public class ElytraCrashListener implements Listener {\n+\n+    public ElytraCrashListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerCrash(EntityDamageEvent e) {\n+        if (!(e.getEntity() instanceof Player)) return;\n+        if (!(e.getCause() == EntityDamageEvent.DamageCause.FALL ||\n+            e.getCause() == EntityDamageEvent.DamageCause.FLY_INTO_WALL)) return;\n+\n+        Player p = (Player) e.getEntity();\n+        if (p.isGliding()) {\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+            HashedArmorpiece helmet = profile.getArmor()[0];\n+            SlimefunItem item;\n+            if (helmet.getItem().isPresent()) {\n+                item = helmet.getItem().get();", "originalCommit": "20aa5d49dc327745f65c5db9a3079a830f522b76", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "960d53840a8b4f3b30f654cd71931627b5cde6e1", "url": "https://github.com/Slimefun/Slimefun4/commit/960d53840a8b4f3b30f654cd71931627b5cde6e1", "message": "Moved import", "committedDate": "2020-10-06T19:39:15Z", "type": "commit"}, {"oid": "1ccd4c14ac0dd6b4c9e2d87e92f3c14ae0911c0f", "url": "https://github.com/Slimefun/Slimefun4/commit/1ccd4c14ac0dd6b4c9e2d87e92f3c14ae0911c0f", "message": "More changes...", "committedDate": "2020-10-06T19:41:14Z", "type": "commit"}]}