{"pr_number": 1925, "pr_title": "Add a way to reload BlockMenu", "pr_author": "WalshyDev", "pr_createdAt": "2020-05-22T05:52:12Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/1925", "merge_commit": "c51ff846400e6743c3bc0f524b86a7151191e094", "timeline": [{"oid": "f049a750066146d9da5005a58c66363b2d6fd9fd", "url": "https://github.com/Slimefun/Slimefun4/commit/f049a750066146d9da5005a58c66363b2d6fd9fd", "message": "Add a way to reload menus", "committedDate": "2020-05-22T05:43:02Z", "type": "commit"}, {"oid": "fffd9921b373d36da5a9c1e3cedb7001b1857db2", "url": "https://github.com/Slimefun/Slimefun4/commit/fffd9921b373d36da5a9c1e3cedb7001b1857db2", "message": "Doc", "committedDate": "2020-05-22T05:51:39Z", "type": "commit"}, {"oid": "f269c37f7699f50a04c306f397c6765df04d5c39", "url": "https://github.com/Slimefun/Slimefun4/commit/f269c37f7699f50a04c306f397c6765df04d5c39", "message": "Add build num to UpdaterService", "committedDate": "2020-05-22T06:08:17Z", "type": "commit"}, {"oid": "3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "url": "https://github.com/Slimefun/Slimefun4/commit/3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "message": "Unit tests save the day", "committedDate": "2020-05-22T06:11:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTQzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429125439", "body": "getSlots() seem rather un-intuitive. Think that name could be improved.", "bodyText": "getSlots() seem rather un-intuitive. Think that name could be improved.", "bodyHTML": "<p dir=\"auto\">getSlots() seem rather un-intuitive. Think that name could be improved.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T08:54:00Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -374,4 +374,13 @@ static boolean matchesFilter(Block block, ItemStack item, int index) {\n         }\n     }\n \n+    /**\n+     * Get the whitelist/blacklist slots in a Cargo Input Node. If you wish to access the items\n+     * in the cargo (without hardcoding the slots in case of change) then you can use this method.\n+     *\n+     * @return The slot indexes for the whutelist/blacklist section.\n+     */\n+    public static int[] getSlots() {", "originalCommit": "3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTQxNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429131416", "bodyText": "getWhitelistBlacklistSlots? It's always awkward to name", "author": "WalshyDev", "createdAt": "2020-05-22T09:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTQzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1OTA0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429159042", "bodyText": "I know, but getSlots() is rather misleading. getNodeConfigArea() maybe?", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T10:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\nindex 8bf8d8a97..e6e687038 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n", "chunk": "@@ -380,7 +380,7 @@ final class CargoUtils {\n      *\n      * @return The slot indexes for the whutelist/blacklist section.\n      */\n-    public static int[] getSlots() {\n+    public static int[] getWhitelistBlacklistSlots() {\n         return SLOTS;\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c51ff846400e6743c3bc0f524b86a7151191e094", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\nindex 8bf8d8a97..e6e687038 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n", "chunk": "@@ -380,7 +380,7 @@ final class CargoUtils {\n      *\n      * @return The slot indexes for the whutelist/blacklist section.\n      */\n-    public static int[] getSlots() {\n+    public static int[] getWhitelistBlacklistSlots() {\n         return SLOTS;\n     }\n }\n", "next_change": {"commit": "a6a4a0a671b1a15ade7088e52a7fdef0374acd94", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\nindex e6e687038..7489c5c5d 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n", "chunk": "@@ -378,7 +378,7 @@ final class CargoUtils {\n      * Get the whitelist/blacklist slots in a Cargo Input Node. If you wish to access the items\n      * in the cargo (without hardcoding the slots in case of change) then you can use this method.\n      *\n-     * @return The slot indexes for the whutelist/blacklist section.\n+     * @return The slot indexes for the whitelist/blacklist section.\n      */\n     public static int[] getWhitelistBlacklistSlots() {\n         return SLOTS;\n", "next_change": {"commit": "aeab6df103aa7f089e5156516c511ce9bf2c367b", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\nindex 7489c5c5d..1a233182a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n", "chunk": "@@ -381,6 +391,6 @@ final class CargoUtils {\n      * @return The slot indexes for the whitelist/blacklist section.\n      */\n     public static int[] getWhitelistBlacklistSlots() {\n-        return SLOTS;\n+        return FILTER_SLOTS;\n     }\n }\n", "next_change": {"commit": "f755e943c496cfd0ca1c6d3b12181f3953226f25", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\nindex 1a233182a..143744ca6 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n", "chunk": "@@ -321,76 +335,59 @@ final class CargoUtils {\n         return BlockStorage.getUniversalInventory(block);\n     }\n \n-    static boolean matchesFilter(Block block, ItemStack item) {\n+    static boolean matchesFilter(@Nonnull AbstractItemNetwork network, @Nonnull Block node, @Nullable ItemStack item) {\n         if (item == null || item.getType() == Material.AIR) {\n             return false;\n         }\n \n-        // Store the returned Config instance to avoid heavy calls\n-        Config blockInfo = BlockStorage.getLocationInfo(block.getLocation());\n-        String id = blockInfo.getString(\"id\");\n+        return network.getItemFilter(node).test(item);\n+    }\n \n-        if (id.equals(\"CARGO_NODE_OUTPUT\")) {\n-            return true;\n+    /**\n+     * This method checks if a given {@link ItemStack} is smeltable or not.\n+     * The lazy-option is a performance-saver since actually calculating this can be quite expensive.\n+     * For the current applicational purposes a quick check for any wooden logs is sufficient.\n+     * Otherwise the \"lazyness\" can be turned off in the future.\n+     * \n+     * @param stack\n+     *            The {@link ItemStack} to test\n+     * @param lazy\n+     *            Whether or not to perform a \"lazy\" but performance-saving check\n+     * \n+     * @return Whether the given {@link ItemStack} can be smelted or not\n+     */\n+    private static boolean isSmeltable(@Nullable ItemStack stack, boolean lazy) {\n+        if (lazy) {\n+            return stack != null && Tag.LOGS.isTagged(stack.getType());\n+        } else {\n+            return SlimefunPlugin.getMinecraftRecipeService().isSmeltable(stack);\n         }\n+    }\n \n-        try {\n-            BlockMenu menu = BlockStorage.getInventory(block.getLocation());\n-            if (menu == null) {\n-                return false;\n-            }\n-\n-            boolean lore = \"true\".equals(blockInfo.getString(\"filter-lore\"));\n-            ItemStackWrapper wrapper = new ItemStackWrapper(item);\n-\n-            if (\"whitelist\".equals(blockInfo.getString(\"filter-type\"))) {\n-                List<ItemStack> templateItems = new LinkedList<>();\n-\n-                for (int slot : FILTER_SLOTS) {\n-                    ItemStack template = menu.getItemInSlot(slot);\n-\n-                    if (template != null) {\n-                        templateItems.add(template);\n-                    }\n-                }\n-\n-                if (templateItems.isEmpty()) {\n-                    return false;\n-                }\n-\n-                for (ItemStack stack : templateItems) {\n-                    if (SlimefunUtils.isItemSimilar(wrapper, stack, lore)) {\n-                        return true;\n-                    }\n-                }\n-\n-                return false;\n-            }\n-            else {\n-                for (int slot : FILTER_SLOTS) {\n-                    ItemStack itemInSlot = menu.getItemInSlot(slot);\n-\n-                    if (itemInSlot != null && SlimefunUtils.isItemSimilar(wrapper, itemInSlot, lore, false)) {\n-                        return false;\n-                    }\n-                }\n-\n-                return true;\n-            }\n-        }\n-        catch (Exception x) {\n-            Slimefun.getLogger().log(Level.SEVERE, x, () -> \"An Exception occured while trying to filter items for a Cargo Node (\" + id + \") at \" + new BlockPosition(block));\n-            return false;\n-        }\n+    private static boolean isPotion(@Nullable ItemStack item) {\n+        return item != null && (item.getType() == Material.POTION || item.getType() == Material.SPLASH_POTION || item.getType() == Material.LINGERING_POTION);\n     }\n \n     /**\n      * Get the whitelist/blacklist slots in a Cargo Input Node. If you wish to access the items\n      * in the cargo (without hardcoding the slots in case of change) then you can use this method.\n+     * \n+     * @deprecated Renamed to {@link #getFilteringSlots()}\n      *\n      * @return The slot indexes for the whitelist/blacklist section.\n      */\n+    @Deprecated\n     public static int[] getWhitelistBlacklistSlots() {\n         return FILTER_SLOTS;\n     }\n+\n+    /**\n+     * Gets the {@link ItemFilter} slots for a Cargo Node. If you wish to access the items\n+     * in the cargo (without hardcoding the slots in case of change) then you can use this method.\n+     *\n+     * @return The slots where the {@link ItemFilter} section for a cargo node sits\n+     */\n+    public static int[] getFilteringSlots() {\n+        return FILTER_SLOTS;\n+    }\n }\n", "next_change": {"commit": "47fec04ab6751edd7dc7a0a1155c1324781955c7", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\nindex 143744ca6..39b92f78f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java\n", "chunk": "@@ -387,6 +412,7 @@ final class CargoUtils {\n      *\n      * @return The slots where the {@link ItemFilter} section for a cargo node sits\n      */\n+    @Nonnull\n     public static int[] getFilteringSlots() {\n         return FILTER_SLOTS;\n     }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "c51ff846400e6743c3bc0f524b86a7151191e094", "message": "Merge commit", "committedDate": null}, {"oid": "a6a4a0a671b1a15ade7088e52a7fdef0374acd94", "committedDate": "2020-05-22 18:01:25 +0200", "message": "[CI skip] Infrastructure for further Unit Testing"}, {"oid": "aeab6df103aa7f089e5156516c511ce9bf2c367b", "committedDate": "2020-06-11 10:08:08 +0200", "message": "Small performance improvements for cargo networks"}, {"oid": "3c3dd48e9bd34e6aa3715720d650a0de798ad7ad", "committedDate": "2020-06-18 21:15:47 +0200", "message": "Fixes #2005"}, {"oid": "7059ad216c994e7158cfa9a46868771519fc4344", "committedDate": "2020-06-19 13:22:52 +0200", "message": "Refactoring and general improvements"}, {"oid": "d3f1dc6fb3ce65551cf5e642e4e3415e3e3a520c", "committedDate": "2020-06-24 18:50:39 +0200", "message": "Fixes #1855 plus a few optimizations"}, {"oid": "ecd97b3e500a1b5316790d8dc8dcaa3881001b2a", "committedDate": "2020-06-25 05:54:21 +0300", "message": "Fixed a tiny typo"}, {"oid": "3dc043c857da79e6763ef6e67e05f39f94b73978", "committedDate": "2020-06-27 13:10:47 +0200", "message": "Refactoring: Relocated Plugin class"}, {"oid": "4edc557547817e7181fa8b0f65112721685cfb5a", "committedDate": "2020-07-05 11:46:20 +0200", "message": "Fixed an issue where moving Androids got stuck"}, {"oid": "88dfdfa560ddf47e3c08fcb637ce4acec6c8390e", "committedDate": "2020-07-05 12:04:40 +0200", "message": "Small improvement to Cargo performance"}, {"oid": "afd63a1f51b34c24f562a9e11bfdfe8857e9ddcf", "committedDate": "2020-07-06 22:04:32 +0200", "message": "Small performance optimization for large Cargo networks"}, {"oid": "c516cab2637fb4b20c2fc17823b6fac83e85870f", "committedDate": "2020-07-08 11:26:44 +0200", "message": "Some refactoring and small optimizations"}, {"oid": "75ca7f1d4bdaeb70d69c1cea6496b04d8d1c8843", "committedDate": "2020-07-15 23:49:44 +0200", "message": "Cargo performance improvement"}, {"oid": "045cdf1090b03c8752e34ff4dca323ff0c8e1f76", "committedDate": "2020-07-20 02:22:24 +0200", "message": "Added performance improvements for Block States"}, {"oid": "8e8a87fce666b19b33981479e67b47121992b5ea", "committedDate": "2020-08-17 17:31:15 +0200", "message": "Fixed ChestTerminal timings showing up as cargo nodes"}, {"oid": "4232caf17a6ffa3c276299544e19b043f559cfc3", "committedDate": "2020-08-27 13:16:38 +0200", "message": "[CI skip] Reduced technical debt"}, {"oid": "4ce43882182aceb8c0e819564454ad82728d5d1b", "committedDate": "2020-09-02 13:53:10 +0200", "message": "[CI skip] More annotations :o"}, {"oid": "ed8f0e243b2caffddb5d3fe250e96dc35f9d7f3e", "committedDate": "2020-10-07 17:48:53 +0200", "message": "Fixes #2405"}, {"oid": "e4ddc7c452436061f690f8faeee79d3515eb6075", "committedDate": "2020-10-07 18:27:01 +0200", "message": "[CI skip] Enforce OTBS."}, {"oid": "4aff61f3b13871c4263a5d44b80d68c4a7a978a5", "committedDate": "2020-10-17 12:54:36 +0200", "message": "Removed 1.13 support"}, {"oid": "aaec763a78dd5d2995430b812549f67bb36bed72", "committedDate": "2020-10-20 13:56:21 +0200", "message": "Added ItemFilter"}, {"oid": "24806ab5d08e789d1b049a196042811f7ffbb6c8", "committedDate": "2020-10-20 14:22:17 +0200", "message": "Adjusted CargoNet implementation"}, {"oid": "c84200d2c4e738d635aec7ff009b316d61fb511f", "committedDate": "2020-12-05 13:54:46 +0100", "message": "Some stuff + fixes #2560"}, {"oid": "f755e943c496cfd0ca1c6d3b12181f3953226f25", "committedDate": "2020-12-17 18:30:51 +0100", "message": "[CI skip] Refactoring and code cleanup"}, {"oid": "26a64004d2cc789549e6f82dcdffcb4ca9e85dbb", "committedDate": "2020-12-17 19:42:56 +0100", "message": "Merge branch 'master' into fixes/blocks"}, {"oid": "47fec04ab6751edd7dc7a0a1155c1324781955c7", "committedDate": "2021-01-07 11:19:48 +0100", "message": "Small performance optimization for cargo networks"}, {"oid": "2943289c6d86a26fe11cd7634ff105a9ac6286b4", "committedDate": "2021-01-10 23:12:34 +0100", "message": "Merge branch 'master' into fixes/blocks"}, {"oid": "f6a915029633333009874cc1f188872944fd8a0b", "committedDate": "2021-01-11 12:45:11 +0100", "message": "Little bit of refactoring"}, {"oid": "3777b59596e4db9f9806582aee9caeac8e0c566c", "committedDate": "2021-01-11 13:57:33 +0100", "message": "Merge branch 'master' into fixes/blocks"}, {"oid": "e523d7849eb10d0ba95c556ca4670193c97caf71", "committedDate": "2021-01-16 11:28:38 +0100", "message": "Fixes #2662"}, {"oid": "79c7c4826ff61e30f9e6d4d2794f043bbdf449e3", "committedDate": "2021-01-17 01:01:42 +0100", "message": "Refactoring and documentation"}, {"oid": "570c981de3408141a9aa3cde1c48d760a49a75c4", "committedDate": "2021-01-20 17:19:18 +0100", "message": "Merge branch 'master' into fixes/blocks"}, {"oid": "a80269b7d90e26e631a6ce68c67637541c9b7f1d", "committedDate": "2021-01-29 12:19:40 +0100", "message": "[CI skip] Formatting"}, {"oid": "338fe0f84be3c3923dad1ff79b8161615ca07798", "committedDate": "2021-02-22 18:34:19 +0100", "message": "Merge pull request #2597 from Slimefun/fixes/blocks fixes #2560"}, {"oid": "f4bded9491dd4a157cec93ef5051db43d01451ba", "committedDate": "2021-03-25 18:39:07 +0100", "message": "Added \"Smart-Filling\" mode to Cargo Input Nodes"}, {"oid": "dba628f99c6a18006c52510ef6ccb9337f8f77a6", "committedDate": "2021-03-26 20:56:15 +0100", "message": "[CI skip] Small performance optimization"}, {"oid": "727c8d34b912b92fb8ee325ea5cd75ae1f9c34e8", "committedDate": "2021-05-17 21:36:10 +0200", "message": "Add ItemStackWrapper#ofItem, try not to use duplicate ItemStackWrappers in CargoNet"}, {"oid": "3dfc83ac6ac902fd472152a12e3a80f5faa628a7", "committedDate": "2021-05-18 14:12:28 +0200", "message": "Try to inject and use the ItemStackWrapper into frequently used CargoUtils methods"}, {"oid": "7e43e68f68e786f50c68149ed7b5233196cdb4ba", "committedDate": "2021-05-19 18:19:04 +0200", "message": "Method renames, update docs and unit tests"}, {"oid": "cda2228a7d9825fe5fa382e686b18972d78d8539", "committedDate": "2021-05-30 13:20:09 +0200", "message": "Fix IllegalArgumentException when ChestTerminal is requesting items Resolves #3091"}, {"oid": "d23f1265b39ea3c4e2ba82ec3095b4fbe2df79e6", "committedDate": "2021-05-30 13:49:43 +0200", "message": "Update src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java"}, {"oid": "8055595d7522b38cbd28b9222473cd437a3def66", "committedDate": "2021-06-26 16:22:56 +0200", "message": "Formatting"}, {"oid": "add34089bc093ff23624013f293d50ce91eb343d", "committedDate": "2021-06-26 19:10:45 +0200", "message": "Renamed main class"}, {"oid": "6de1fe821c81227f363858d19a677e25730784aa", "committedDate": "2021-07-14 16:58:10 +0200", "message": "More progress on dough implementation"}, {"oid": "328460416079ae712b28ee8bbe1b1c67159c964c", "committedDate": "2021-10-07 13:51:31 +0100", "message": "Implement the ability for debug logging"}, {"oid": "b2590ddd42c3cbd2d7145053be4433a4c7a06782", "committedDate": "2021-10-09 10:05:09 +0100", "message": "Lots of docs and stuff"}, {"oid": "008090cc6f50b15a503ef1f151cea20931016cd0", "committedDate": "2021-10-11 01:37:54 +0200", "message": "[CI skip] Added unit test for new debugging tool"}, {"oid": "f32dfa4d7630aaf9dfb0a5897a53ba1437d02c57", "committedDate": "2022-07-02 21:03:20 +0100", "message": "Java16 Sonar Changes - 2"}, {"oid": "809530fccdb334e465df3ded37ea403a10ee007f", "committedDate": "2022-07-02 23:39:53 +0100", "message": "Apply suggestions from code review - 2"}, {"oid": "c40bf0d1d356358dfbbc147513c3e8ab5b82b40c", "committedDate": "2022-10-16 14:03:43 +0200", "message": "tags"}, {"oid": "e7d766e22951bc5ec9b779e2bf524fdb539bda6a", "committedDate": "2022-10-17 12:34:44 +0200", "message": "suggested changes"}, {"oid": "117a867071fe263dd0c8975d9d05438562babded", "committedDate": "2022-10-17 13:27:17 +0200", "message": "tag naming consicentencies"}, {"oid": "3b7bdb059d5af59ccc89d860e87518bfd3823a81", "committedDate": "2022-10-18 17:55:23 +0200", "message": "suggested changes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429125641", "body": "Can also just do updater#getVersion() instead all of this.", "bodyText": "Can also just do updater#getVersion() instead all of this.", "bodyHTML": "<p dir=\"auto\">Can also just do updater#getVersion() instead all of this.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T08:54:29Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java", "diffHunk": "@@ -24,11 +25,12 @@\n     private final SlimefunPlugin plugin;\n     private final Updater updater;\n     private final SlimefunBranch branch;\n+    private final int buildNum;", "originalCommit": "3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTU3MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429131571", "bodyText": "Doesn't that just return the entire thing... I want specifically the build number", "author": "WalshyDev", "createdAt": "2020-05-22T09:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1ODQ5OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429158499", "bodyText": "No it returns the build number...", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T10:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1ODgzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429158839", "bodyText": "https://github.com/TheBusyBiscuit/CS-CoreLib2/blob/master/src/main/java/io/github/thebusybiscuit/cscorelib2/updater/GitHubBuildsUpdater.java#L59", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T10:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1OTc0Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429159743", "bodyText": "My code is still better and returns int... just merge :^) <3\nI want to sleep", "author": "WalshyDev", "createdAt": "2020-05-22T10:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTQ2MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429161460", "bodyText": "Definitely not better, it's just redundant. Heck it doesn't even compile >.>", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T10:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2MTg2Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429161863", "bodyText": "it does compile, it's stupid tests failing", "author": "WalshyDev", "createdAt": "2020-05-22T10:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2Mzc1Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429163757", "bodyText": "Still, you should definitely fix this before it's gonna be merged...", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T10:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 48dad1007..7878b8288 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -25,7 +25,7 @@ public class UpdaterService {\n     private final SlimefunPlugin plugin;\n     private final Updater updater;\n     private final SlimefunBranch branch;\n-    private final int buildNum;\n+    private final int buildNumber;\n \n     /**\n      * This will create a new {@link UpdaterService} for the given {@link SlimefunPlugin}.\n", "next_change": {"commit": "984a96bcb54ddabf14fcc6a5bd6a20a00e240b93", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 7878b8288..0639e2850 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -25,7 +26,6 @@ public class UpdaterService {\n     private final SlimefunPlugin plugin;\n     private final Updater updater;\n     private final SlimefunBranch branch;\n-    private final int buildNumber;\n \n     /**\n      * This will create a new {@link UpdaterService} for the given {@link SlimefunPlugin}.\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "c51ff846400e6743c3bc0f524b86a7151191e094", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 48dad1007..ef259d9d9 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -25,7 +26,6 @@ public class UpdaterService {\n     private final SlimefunPlugin plugin;\n     private final Updater updater;\n     private final SlimefunBranch branch;\n-    private final int buildNum;\n \n     /**\n      * This will create a new {@link UpdaterService} for the given {@link SlimefunPlugin}.\n", "next_change": {"commit": "94752a902748056795e7f4c360cbd2181e30aad9", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex ef259d9d9..b323d3f2f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -23,8 +24,20 @@ import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n  */\n public class UpdaterService {\n \n+    /**\n+     * Our {@link SlimefunPlugin} instance.\n+     */\n     private final SlimefunPlugin plugin;\n+\n+    /**\n+     * Our {@link Updater} implementation.\n+     */\n     private final Updater updater;\n+\n+    /**\n+     * The {@link SlimefunBranch} we are currently on.\n+     * If this is an official {@link SlimefunBranch}, auto updates will be enabled.\n+     */\n     private final SlimefunBranch branch;\n \n     /**\n", "next_change": {"commit": "add34089bc093ff23624013f293d50ce91eb343d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex b323d3f2f..09fcf4e85 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -41,7 +41,7 @@ public class UpdaterService {\n     private final SlimefunBranch branch;\n \n     /**\n-     * This will create a new {@link UpdaterService} for the given {@link SlimefunPlugin}.\n+     * This will create a new {@link UpdaterService} for the given {@link Slimefun}.\n      * The {@link File} should be the result of the getFile() operation of that {@link Plugin}.\n      *\n      * @param plugin\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "c51ff846400e6743c3bc0f524b86a7151191e094", "message": "Merge commit", "committedDate": null}, {"oid": "efcc9c1a4ba5626be12c29725d4dfa235aec0982", "committedDate": "2020-05-24 00:49:27 +0200", "message": "[CI skip] Refactoring"}, {"oid": "3dc043c857da79e6763ef6e67e05f39f94b73978", "committedDate": "2020-06-27 13:10:47 +0200", "message": "Refactoring: Relocated Plugin class"}, {"oid": "95655dc6fcb4aab07f4e08cadf28926691986c06", "committedDate": "2020-08-21 15:19:08 +0200", "message": "A few fixes and performance improvements"}, {"oid": "8a6e00a402fb4ddbfadef64562ea849fa430bdc5", "committedDate": "2020-09-02 11:53:42 +0200", "message": "Even more annotations"}, {"oid": "e4ddc7c452436061f690f8faeee79d3515eb6075", "committedDate": "2020-10-07 18:27:01 +0200", "message": "[CI skip] Enforce OTBS."}, {"oid": "94752a902748056795e7f4c360cbd2181e30aad9", "committedDate": "2020-11-19 15:01:47 +0100", "message": "Fixes #2558"}, {"oid": "add34089bc093ff23624013f293d50ce91eb343d", "committedDate": "2021-06-26 19:10:45 +0200", "message": "Renamed main class"}, {"oid": "0cc9bd91def63acc507813a217c6e338ffd09a4c", "committedDate": "2021-07-14 16:47:41 +0200", "message": "Progress towards dough"}, {"oid": "6de1fe821c81227f363858d19a677e25730784aa", "committedDate": "2021-07-14 16:58:10 +0200", "message": "More progress on dough implementation"}, {"oid": "cdf379ab497d1985e6f89fe5e1b62d70c293c606", "committedDate": "2021-07-15 13:03:39 +0200", "message": "Fixed UpdaterService"}, {"oid": "708aa173403be86847e0e351ff04a74ab17e5b50", "committedDate": "2021-07-28 14:33:44 +0200", "message": "Bump `dough-api` to 1.0.2"}, {"oid": "a9c330d6a326f730dc6ceba8a42036b4eeebfc8e", "committedDate": "2021-10-21 11:59:22 +0200", "message": "[CI skip] Fixed javadocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTc1NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429125754", "body": "Number please, not just Num.", "bodyText": "Number please, not just Num.", "bodyHTML": "<p dir=\"auto\">Number please, not just Num.</p>", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T08:54:43Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java", "diffHunk": "@@ -78,13 +84,24 @@ else if (version.startsWith(\"RC - \")) {\n      * This method returns the branch the current build of Slimefun is running on.\n      * This can be used to determine whether we are dealing with an official build\n      * or a build that was unofficially modified.\n-     * \n+     *\n      * @return The branch this build of Slimefun is on.\n      */\n     public SlimefunBranch getBranch() {\n         return branch;\n     }\n \n+    /**\n+     * This method returns the build number that this is running on (or -1 if unofficial).\n+     * You should combine the usage with {@link #getBranch()} in order to properly see if this is\n+     * a development or stable build number.\n+     *\n+     * @return The build number of this Slimefun.\n+     */\n+    public int getBuildNum() {\n+        return buildNum;\n+    }", "originalCommit": "3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTcwMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429131703", "bodyText": "So picky", "author": "WalshyDev", "createdAt": "2020-05-22T09:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNTc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 48dad1007..7878b8288 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -98,8 +98,8 @@ public class UpdaterService {\n      *\n      * @return The build number of this Slimefun.\n      */\n-    public int getBuildNum() {\n-        return buildNum;\n+    public int getBuildNumber() {\n+        return buildNumber;\n     }\n \n     /**\n", "next_change": {"commit": "984a96bcb54ddabf14fcc6a5bd6a20a00e240b93", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 7878b8288..0639e2850 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -99,7 +95,10 @@ public class UpdaterService {\n      * @return The build number of this Slimefun.\n      */\n     public int getBuildNumber() {\n-        return buildNumber;\n+        if (PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches())\n+            return Integer.parseInt(this.updater.getLocalVersion());\n+\n+        return -1;\n     }\n \n     /**\n", "next_change": {"commit": "9ddbaf70cdb132b6ba7da6ca9ea7843be1e9ae6f", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 0639e2850..ef259d9d9 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -95,7 +95,7 @@ public class UpdaterService {\n      * @return The build number of this Slimefun.\n      */\n     public int getBuildNumber() {\n-        if (PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches())\n+        if (updater != null && PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches())\n             return Integer.parseInt(this.updater.getLocalVersion());\n \n         return -1;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "c51ff846400e6743c3bc0f524b86a7151191e094", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 48dad1007..ef259d9d9 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -98,8 +94,11 @@ public class UpdaterService {\n      *\n      * @return The build number of this Slimefun.\n      */\n-    public int getBuildNum() {\n-        return buildNum;\n+    public int getBuildNumber() {\n+        if (updater != null && PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches())\n+            return Integer.parseInt(this.updater.getLocalVersion());\n+\n+        return -1;\n     }\n \n     /**\n", "next_change": {"commit": "95655dc6fcb4aab07f4e08cadf28926691986c06", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex ef259d9d9..2cd2bc1b5 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -95,8 +94,9 @@ public class UpdaterService {\n      * @return The build number of this Slimefun.\n      */\n     public int getBuildNumber() {\n-        if (updater != null && PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches())\n-            return Integer.parseInt(this.updater.getLocalVersion());\n+        if (updater != null && PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches()) {\n+            return Integer.parseInt(updater.getLocalVersion());\n+        }\n \n         return -1;\n     }\n", "next_change": {"commit": "cdf379ab497d1985e6f89fe5e1b62d70c293c606", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex 2cd2bc1b5..e6e0fa91f 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -94,8 +101,9 @@ public class UpdaterService {\n      * @return The build number of this Slimefun.\n      */\n     public int getBuildNumber() {\n-        if (updater != null && PatternUtils.NUMERIC.matcher(this.updater.getLocalVersion()).matches()) {\n-            return Integer.parseInt(updater.getLocalVersion());\n+        if (updater != null) {\n+            PrefixedVersion version = updater.getCurrentVersion();\n+            return version.getNumericVersion();\n         }\n \n         return -1;\n", "next_change": {"commit": "708aa173403be86847e0e351ff04a74ab17e5b50", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\nindex e6e0fa91f..a08e65dcf 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/core/services/UpdaterService.java\n", "chunk": "@@ -103,7 +103,7 @@ public class UpdaterService {\n     public int getBuildNumber() {\n         if (updater != null) {\n             PrefixedVersion version = updater.getCurrentVersion();\n-            return version.getNumericVersion();\n+            return version.getVersionNumber();\n         }\n \n         return -1;\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "c51ff846400e6743c3bc0f524b86a7151191e094", "message": "Merge commit", "committedDate": null}, {"oid": "efcc9c1a4ba5626be12c29725d4dfa235aec0982", "committedDate": "2020-05-24 00:49:27 +0200", "message": "[CI skip] Refactoring"}, {"oid": "3dc043c857da79e6763ef6e67e05f39f94b73978", "committedDate": "2020-06-27 13:10:47 +0200", "message": "Refactoring: Relocated Plugin class"}, {"oid": "95655dc6fcb4aab07f4e08cadf28926691986c06", "committedDate": "2020-08-21 15:19:08 +0200", "message": "A few fixes and performance improvements"}, {"oid": "8a6e00a402fb4ddbfadef64562ea849fa430bdc5", "committedDate": "2020-09-02 11:53:42 +0200", "message": "Even more annotations"}, {"oid": "e4ddc7c452436061f690f8faeee79d3515eb6075", "committedDate": "2020-10-07 18:27:01 +0200", "message": "[CI skip] Enforce OTBS."}, {"oid": "94752a902748056795e7f4c360cbd2181e30aad9", "committedDate": "2020-11-19 15:01:47 +0100", "message": "Fixes #2558"}, {"oid": "add34089bc093ff23624013f293d50ce91eb343d", "committedDate": "2021-06-26 19:10:45 +0200", "message": "Renamed main class"}, {"oid": "0cc9bd91def63acc507813a217c6e338ffd09a4c", "committedDate": "2021-07-14 16:47:41 +0200", "message": "Progress towards dough"}, {"oid": "6de1fe821c81227f363858d19a677e25730784aa", "committedDate": "2021-07-14 16:58:10 +0200", "message": "More progress on dough implementation"}, {"oid": "cdf379ab497d1985e6f89fe5e1b62d70c293c606", "committedDate": "2021-07-15 13:03:39 +0200", "message": "Fixed UpdaterService"}, {"oid": "708aa173403be86847e0e351ff04a74ab17e5b50", "committedDate": "2021-07-28 14:33:44 +0200", "message": "Bump `dough-api` to 1.0.2"}, {"oid": "a9c330d6a326f730dc6ceba8a42036b4eeebfc8e", "committedDate": "2021-10-21 11:59:22 +0200", "message": "[CI skip] Fixed javadocs"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjAwNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429126005", "body": "ewwww, abusing try/catch for this is really unideal... We have a Pattern for Numerics you know?", "bodyText": "ewwww, abusing try/catch for this is really unideal... We have a Pattern for Numerics you know?", "bodyHTML": "<p dir=\"auto\">ewwww, abusing try/catch for this is really unideal... We have a Pattern for Numerics you know?</p>", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T08:55:16Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java", "diffHunk": "@@ -57,4 +57,11 @@ public static String getTimeLeft(int seconds) {\n         return timeleft + seconds + \"s\";\n     }\n \n+    public static int getInt(String str, int defaultVal) {\n+        try {\n+            return Integer.parseInt(str);\n+        } catch (NumberFormatException e) {\n+            return defaultVal;\n+        }", "originalCommit": "3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTg2Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429131863", "bodyText": "roll eyes", "author": "WalshyDev", "createdAt": "2020-05-22T09:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 09199d522..7d22e0034 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -58,10 +58,9 @@ public final class NumberUtils {\n     }\n \n     public static int getInt(String str, int defaultVal) {\n-        try {\n+        if (PatternUtils.NUMERIC.matcher(str).matches())\n             return Integer.parseInt(str);\n-        } catch (NumberFormatException e) {\n-            return defaultVal;\n-        }\n+\n+        return defaultVal;\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c51ff846400e6743c3bc0f524b86a7151191e094", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 09199d522..7d22e0034 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -58,10 +58,9 @@ public final class NumberUtils {\n     }\n \n     public static int getInt(String str, int defaultVal) {\n-        try {\n+        if (PatternUtils.NUMERIC.matcher(str).matches())\n             return Integer.parseInt(str);\n-        } catch (NumberFormatException e) {\n-            return defaultVal;\n-        }\n+\n+        return defaultVal;\n     }\n }\n", "next_change": {"commit": "33db9151d6f1c11bae33c26acdea04c3a7549783", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 7d22e0034..52bb18d1a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -58,8 +58,9 @@ public final class NumberUtils {\n     }\n \n     public static int getInt(String str, int defaultVal) {\n-        if (PatternUtils.NUMERIC.matcher(str).matches())\n+        if (PatternUtils.NUMERIC.matcher(str).matches()) {\n             return Integer.parseInt(str);\n+        }\n \n         return defaultVal;\n     }\n", "next_change": {"commit": "8e07ada3211920f4f628b956dd1c0454fc05ed0a", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 52bb18d1a..cd9fa88ba 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -57,11 +60,31 @@ public final class NumberUtils {\n         return timeleft + seconds + \"s\";\n     }\n \n-    public static int getInt(String str, int defaultVal) {\n+    public static int getInt(String str, int defaultValue) {\n         if (PatternUtils.NUMERIC.matcher(str).matches()) {\n             return Integer.parseInt(str);\n         }\n \n-        return defaultVal;\n+        return defaultValue;\n+    }\n+\n+    public static String getAsMillis(long nanoseconds) {\n+        String number = DECIMAL_FORMAT.format(nanoseconds / 1000000.0);\n+        String[] parts = PatternUtils.NUMBER_SEPERATOR.split(number);\n+\n+        if (parts.length == 1) {\n+            return parts[0];\n+        }\n+        else {\n+            return parts[0] + ',' + ChatColor.GRAY + parts[1] + \"ms\";\n+        }\n+    }\n+\n+    public static long getLong(Long value, long defaultValue) {\n+        return value == null ? defaultValue : value;\n+    }\n+\n+    public static int getInt(Integer value, int defaultValue) {\n+        return value == null ? defaultValue : value;\n     }\n }\n", "next_change": {"commit": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex cd9fa88ba..1c5a37cb3 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -87,4 +87,8 @@ public final class NumberUtils {\n     public static int getInt(Integer value, int defaultValue) {\n         return value == null ? defaultValue : value;\n     }\n+\n+    public static float getFloat(Float value, float defaultValue) {\n+        return value == null ? defaultValue : value;\n+    }\n }\n", "next_change": {"commit": "368d2f5798f8daf9f541296518e977afaa357361", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 1c5a37cb3..35eb149dc 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -91,4 +99,27 @@ public final class NumberUtils {\n     public static float getFloat(Float value, float defaultValue) {\n         return value == null ? defaultValue : value;\n     }\n+\n+    /**\n+     * This method is a combination of Math.min and Math.max, it clamps the given value\n+     * between a minimum and a maximum.\n+     * \n+     * @param min\n+     *            The minimum value\n+     * @param value\n+     *            The value to clamp\n+     * @param max\n+     *            The maximum value\n+     */\n+    public static int clamp(int min, int value, int max) {\n+        if (value < min) {\n+            return min;\n+        }\n+        else if (value > max) {\n+            return max;\n+        }\n+        else {\n+            return value;\n+        }\n+    }\n }\n", "next_change": {"commit": "e4ddc7c452436061f690f8faeee79d3515eb6075", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 35eb149dc..445937f94 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -114,11 +122,9 @@ public final class NumberUtils {\n     public static int clamp(int min, int value, int max) {\n         if (value < min) {\n             return min;\n-        }\n-        else if (value > max) {\n+        } else if (value > max) {\n             return max;\n-        }\n-        else {\n+        } else {\n             return value;\n         }\n     }\n", "next_change": {"commit": "7fcb605d4d0532d28be7df8c4923ede242b60272", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 445937f94..3136a03aa 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -128,4 +260,24 @@ public final class NumberUtils {\n             return value;\n         }\n     }\n+\n+    public static int getJavaVersion() {\n+        String javaVer = System.getProperty(\"java.version\");\n+\n+        if (javaVer.startsWith(\"1.\")) {\n+            javaVer = javaVer.substring(2);\n+        }\n+\n+        // If it's like 11.0.1.3 or 8.0_275\n+        if (javaVer.indexOf('.') != -1) {\n+            javaVer = javaVer.substring(0, javaVer.indexOf('.'));\n+        }\n+\n+        if (PatternUtils.NUMERIC.matcher(javaVer).matches()) {\n+            return Integer.parseInt(javaVer);\n+        } else {\n+            SlimefunPlugin.logger().log(Level.SEVERE, \"Error: Cannot identify Java version - {0}\", javaVer);\n+            return 0;\n+        }\n+    }\n }\n", "next_change": {"commit": "add34089bc093ff23624013f293d50ce91eb343d", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 3136a03aa..40478aabe 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -276,7 +276,7 @@ public final class NumberUtils {\n         if (PatternUtils.NUMERIC.matcher(javaVer).matches()) {\n             return Integer.parseInt(javaVer);\n         } else {\n-            SlimefunPlugin.logger().log(Level.SEVERE, \"Error: Cannot identify Java version - {0}\", javaVer);\n+            Slimefun.logger().log(Level.SEVERE, \"Error: Cannot identify Java version - {0}\", javaVer);\n             return 0;\n         }\n     }\n", "next_change": {"commit": "9c0d28e64bb9470bf601c3d1ac4fe4df62b1413a", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 40478aabe..274361710 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -273,7 +274,7 @@ public final class NumberUtils {\n             javaVer = javaVer.substring(0, javaVer.indexOf('.'));\n         }\n \n-        if (PatternUtils.NUMERIC.matcher(javaVer).matches()) {\n+        if (CommonPatterns.NUMERIC.matcher(javaVer).matches()) {\n             return Integer.parseInt(javaVer);\n         } else {\n             Slimefun.logger().log(Level.SEVERE, \"Error: Cannot identify Java version - {0}\", javaVer);\n", "next_change": {"commit": "1d24e832b551f98f687b8c6cd17f2ab5f973076c", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 274361710..154085b54 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -281,4 +281,34 @@ public final class NumberUtils {\n             return 0;\n         }\n     }\n+    \n+    /**\n+     * This detects if 2 integers will overflow/underflow and if they will, returns the corresponding value\n+     * @param a the first integer\n+     * @param b the second integer\n+     * @return {@link Integer#MAX_VALUE} if overflow detected, {@link Integer#MIN_VALUE} if underflow detected, otherwise the sum of i1 and i2\n+     */\n+    public static int flowSafeAddition(int a, int b) {\n+        return limitedAddition(a, b, Integer.MAX_VALUE, Integer.MIN_VALUE);\n+    }\n+    \n+    /**\n+     * This detects if 2 integers will overflow/underflow past a maximum or minimum value and if they will, returns the corresponding value\n+     * @param a the first integer\n+     * @param b the second integer\n+     * @param max the maximum value for the operation\n+     * @param min the minimum value for the operation\n+     * @return {@link Integer#MAX_VALUE} if overflow detected, {@link Integer#MIN_VALUE} if underflow detected, otherwise the sum of i1 and i2\n+     */\n+    public static int limitedAddition(int a, int b, int max, int min) {\n+        boolean willOverflow = (a == max && b > 0 || b == max && a > 0) || a > 0 && b > max - a;\n+        boolean willUnderflow = (a == min && b < 0 || b == min && a < 0) || a < 0 && b < min - a;\n+        if (willOverflow) {\n+            return max;\n+        } else if (willUnderflow) {\n+            return min;\n+        } else {\n+            return a + b;\n+        }\n+    }\n }\n", "next_change": {"commit": "7821258589af497656bed4ad34b75f678ae17524", "changed_code": [{"header": "diff --git a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\nindex 154085b54..d56ee113a 100644\n--- a/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n+++ b/src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java\n", "chunk": "@@ -298,14 +298,18 @@ public final class NumberUtils {\n      * @param b the second integer\n      * @param max the maximum value for the operation\n      * @param min the minimum value for the operation\n-     * @return {@link Integer#MAX_VALUE} if overflow detected, {@link Integer#MIN_VALUE} if underflow detected, otherwise the sum of i1 and i2\n+     * @return max if overflow detected, min if underflow detected, otherwise the sum of a and b\n      */\n     public static int limitedAddition(int a, int b, int max, int min) {\n         boolean willOverflow = (a == max && b > 0 || b == max && a > 0) || a > 0 && b > max - a;\n-        boolean willUnderflow = (a == min && b < 0 || b == min && a < 0) || a < 0 && b < min - a;\n+\n         if (willOverflow) {\n             return max;\n-        } else if (willUnderflow) {\n+        }\n+\n+        boolean willUnderflow = (a == min && b < 0 || b == min && a < 0) || a < 0 && b < min - a;\n+\n+        if (willUnderflow) {\n             return min;\n         } else {\n             return a + b;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "c51ff846400e6743c3bc0f524b86a7151191e094", "message": "Merge commit", "committedDate": null}, {"oid": "33db9151d6f1c11bae33c26acdea04c3a7549783", "committedDate": "2020-06-17 14:56:48 +0200", "message": "Lots of refactoring and clean up"}, {"oid": "8e07ada3211920f4f628b956dd1c0454fc05ed0a", "committedDate": "2020-06-21 10:26:54 +0200", "message": "Reduced technical debt / Refactoring"}, {"oid": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "committedDate": "2020-06-26 15:32:57 +0200", "message": "Lots of refactoring and rewriting of Item Energy"}, {"oid": "d82b66a842cd03788a1247b945cb60de832bee7d", "committedDate": "2020-06-30 19:36:55 +0200", "message": "Added a better profiler"}, {"oid": "1016b5fc76d30bf0733f7fb09c0ba6925825dce8", "committedDate": "2020-07-01 18:20:34 +0200", "message": "Added better summaries, ratings + more performance improvements"}, {"oid": "5a19b186330c22156c4b49091db5ee3217f28495", "committedDate": "2020-07-04 19:04:29 +0200", "message": "Thunderstorms now count as night for Solar Generators (+ other stuff)"}, {"oid": "5e3eccfaa4dd3eb02dbe47d62e65e799e9dcf989", "committedDate": "2020-07-22 18:06:42 +0100", "message": "Fix some regex, finals and replace isPresent with ifPresent"}, {"oid": "368d2f5798f8daf9f541296518e977afaa357361", "committedDate": "2020-08-04 13:29:45 +0200", "message": "Move block energy code to EnergyNetComponent"}, {"oid": "f4091e931ba2c0641c4b48b0299a5c9e4559b0f3", "committedDate": "2020-09-02 10:31:35 +0200", "message": "Refactoring and some annotations"}, {"oid": "e4ddc7c452436061f690f8faeee79d3515eb6075", "committedDate": "2020-10-07 18:27:01 +0200", "message": "[CI skip] Enforce OTBS."}, {"oid": "f895adde61beb75c7db9b5a905c6c8221326719a", "committedDate": "2020-10-10 14:17:05 +0200", "message": "[CI skip] Reduced technical debt"}, {"oid": "734b853eb7e2995e0a02f50a5280591e85a65e44", "committedDate": "2020-10-18 13:53:15 +0200", "message": "[CI skip] Reduced technical debt"}, {"oid": "12e72052804c0f76fca6f2cc29c1c683c64661ae", "committedDate": "2020-10-28 12:52:23 +0100", "message": "[Ci skip] Added some unit tests"}, {"oid": "bb764b7584697aff03929d56fde5c4db0b4822fd", "committedDate": "2020-11-19 21:00:28 +0100", "message": "Fixed Guide Settings showing \"last activity\" as a negative number"}, {"oid": "c5f6b53412faa170e33fc12216c52d14c9424ba9", "committedDate": "2020-11-20 00:34:29 +0100", "message": "Updated unit tests for new elapsed time method"}, {"oid": "d0e7e218779e6b3593467a7db91d57e5a3c36791", "committedDate": "2020-11-25 14:27:46 +0100", "message": "Performance and memory improvements"}, {"oid": "75b72eb630370c612efc7834ca644124e9eda36a", "committedDate": "2021-01-06 16:26:40 +0100", "message": "Removed deprecated stuff"}, {"oid": "22b54211188d42e90945b300e502440b6749f02a", "committedDate": "2021-01-10 13:38:07 +0100", "message": "Fixed /sf timings --verbose not working correctly (+refactoring)"}, {"oid": "3fc802ef8c58d860530dfcfc589ac52b144451b2", "committedDate": "2021-05-24 18:18:21 +0200", "message": "[CI skip] Formatting and code cleanup"}, {"oid": "7fcb605d4d0532d28be7df8c4923ede242b60272", "committedDate": "2021-06-17 10:53:38 +0200", "message": "Encourage Java 16 on older versions"}, {"oid": "add34089bc093ff23624013f293d50ce91eb343d", "committedDate": "2021-06-26 19:10:45 +0200", "message": "Renamed main class"}, {"oid": "9c0d28e64bb9470bf601c3d1ac4fe4df62b1413a", "committedDate": "2021-07-17 19:24:29 +0200", "message": "Updated to CommonPatterns"}, {"oid": "1d24e832b551f98f687b8c6cd17f2ab5f973076c", "committedDate": "2023-03-02 06:16:07 -0600", "message": "Requested Changes (Next Up Unit Tests)"}, {"oid": "cc557a19cf9e29a7c267da20b5db2631b9193456", "committedDate": "2023-03-02 06:20:00 -0600", "message": "Javadocs"}, {"oid": "7821258589af497656bed4ad34b75f678ae17524", "committedDate": "2023-03-02 09:11:55 -0600", "message": "Update src/main/java/io/github/thebusybiscuit/slimefun4/utils/NumberUtils.java"}, {"oid": "adf5ae7a6f965dcb8f1d58f22d16b01700f60c4d", "committedDate": "2023-03-02 09:15:47 -0600", "message": "Flip the order of max and min"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyNjA4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/1925#discussion_r429126086", "body": "docs", "bodyText": "docs", "bodyHTML": "<p dir=\"auto\">docs</p>", "author": "TheBusyBiscuit", "createdAt": "2020-05-22T08:55:25Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java", "diffHunk": "@@ -72,6 +72,10 @@ public void move(Location l) {\n         this.save(l);\n     }\n \n+    public void reload() {\n+        this.preset.clone(this);\n+    }", "originalCommit": "3048f0f6a03bc18b974df587a3bd79b4bf5d0b3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex 47c8b5d84..d6e54a0f0 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -72,6 +72,9 @@ public class BlockMenu extends DirtyChestMenu {\n         this.save(l);\n     }\n \n+    /**\n+     * Reload this BlockMenu based on the preset.\n+     */\n     public void reload() {\n         this.preset.clone(this);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "c51ff846400e6743c3bc0f524b86a7151191e094", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex 47c8b5d84..d6e54a0f0 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -72,6 +72,9 @@ public class BlockMenu extends DirtyChestMenu {\n         this.save(l);\n     }\n \n+    /**\n+     * Reload this BlockMenu based on the preset.\n+     */\n     public void reload() {\n         this.preset.clone(this);\n     }\n", "next_change": {"commit": "a6a4a0a671b1a15ade7088e52a7fdef0374acd94", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex d6e54a0f0..8ba89e051 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -73,7 +73,7 @@ public class BlockMenu extends DirtyChestMenu {\n     }\n \n     /**\n-     * Reload this BlockMenu based on the preset.\n+     * Reload this {@link BlockMenu} based on its {@link BlockMenuPreset}.\n      */\n     public void reload() {\n         this.preset.clone(this);\n", "next_change": {"commit": "6573a60016c33f90eb1dab4850884c5e617c376b", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex 8ba89e051..5a93f61c0 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -80,13 +81,32 @@ public class BlockMenu extends DirtyChestMenu {\n     }\n \n     public Block getBlock() {\n-        return this.location.getBlock();\n+        return location.getBlock();\n     }\n \n     public Location getLocation() {\n         return location;\n     }\n \n+    /**\n+     * This method drops the contents of this {@link BlockMenu} on the ground at the given\n+     * {@link Location}.\n+     * \n+     * @param l\n+     *            Where to drop these items\n+     * @param slots\n+     *            The slots of items that should be dropped\n+     */\n+    public void dropItems(Location l, int... slots) {\n+        for (int slot : slots) {\n+            ItemStack item = getItemInSlot(slot);\n+            if (item != null) {\n+                l.getWorld().dropItemNaturally(l, item);\n+                replaceExistingItem(slot, null);\n+            }\n+        }\n+    }\n+\n     public void delete(Location l) {\n         File file = new File(\"data-storage/Slimefun/stored-inventories/\" + serializeLocation(l) + \".sfi\");\n \n", "next_change": {"commit": "e4ddc7c452436061f690f8faeee79d3515eb6075", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex 5a93f61c0..bb0017503 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -113,8 +114,7 @@ public class BlockMenu extends DirtyChestMenu {\n         if (file.exists()) {\n             try {\n                 Files.delete(file.toPath());\n-            }\n-            catch (IOException e) {\n+            } catch (IOException e) {\n                 Slimefun.getLogger().log(Level.WARNING, e, () -> \"Could not delete file \\\"\" + file.getName() + '\"');\n             }\n         }\n", "next_change": {"commit": "f3ed8c045141461ca966978807d72ccf99111527", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex bb0017503..b561400d7 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -115,7 +118,7 @@ public class BlockMenu extends DirtyChestMenu {\n             try {\n                 Files.delete(file.toPath());\n             } catch (IOException e) {\n-                Slimefun.getLogger().log(Level.WARNING, e, () -> \"Could not delete file \\\"\" + file.getName() + '\"');\n+                SlimefunPlugin.logger().log(Level.WARNING, e, () -> \"Could not delete file \\\"\" + file.getName() + '\"');\n             }\n         }\n     }\n", "next_change": {"commit": "add34089bc093ff23624013f293d50ce91eb343d", "changed_code": [{"header": "diff --git a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\nindex b561400d7..1015ebf0f 100644\n--- a/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n+++ b/src/main/java/me/mrCookieSlime/Slimefun/api/inventory/BlockMenu.java\n", "chunk": "@@ -118,7 +118,7 @@ public class BlockMenu extends DirtyChestMenu {\n             try {\n                 Files.delete(file.toPath());\n             } catch (IOException e) {\n-                SlimefunPlugin.logger().log(Level.WARNING, e, () -> \"Could not delete file \\\"\" + file.getName() + '\"');\n+                Slimefun.logger().log(Level.WARNING, e, () -> \"Could not delete file \\\"\" + file.getName() + '\"');\n             }\n         }\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "c51ff846400e6743c3bc0f524b86a7151191e094", "message": "Merge commit", "committedDate": null}, {"oid": "a6a4a0a671b1a15ade7088e52a7fdef0374acd94", "committedDate": "2020-05-22 18:01:25 +0200", "message": "[CI skip] Infrastructure for further Unit Testing"}, {"oid": "6573a60016c33f90eb1dab4850884c5e617c376b", "committedDate": "2020-08-02 15:16:21 +0200", "message": "Another commit full of cleanup stuff"}, {"oid": "e4ddc7c452436061f690f8faeee79d3515eb6075", "committedDate": "2020-10-07 18:27:01 +0200", "message": "[CI skip] Enforce OTBS."}, {"oid": "b4b18f548f11077db34663c6897b2a754288c229", "committedDate": "2020-10-11 12:48:51 +0200", "message": "[CI skip] Reduced technical debt"}, {"oid": "75b72eb630370c612efc7834ca644124e9eda36a", "committedDate": "2021-01-06 16:26:40 +0100", "message": "Removed deprecated stuff"}, {"oid": "f3ed8c045141461ca966978807d72ccf99111527", "committedDate": "2021-01-10 16:21:15 +0100", "message": "[CI skip] Refactoring"}, {"oid": "add34089bc093ff23624013f293d50ce91eb343d", "committedDate": "2021-06-26 19:10:45 +0200", "message": "Renamed main class"}, {"oid": "6de1fe821c81227f363858d19a677e25730784aa", "committedDate": "2021-07-14 16:58:10 +0200", "message": "More progress on dough implementation"}]}, {"oid": "8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "url": "https://github.com/Slimefun/Slimefun4/commit/8db67af455c3eb66f6f13b4dcac619ff677e5fa0", "message": "Requested pickiness", "committedDate": "2020-05-22T09:28:21Z", "type": "commit"}, {"oid": "984a96bcb54ddabf14fcc6a5bd6a20a00e240b93", "url": "https://github.com/Slimefun/Slimefun4/commit/984a96bcb54ddabf14fcc6a5bd6a20a00e240b93", "message": "REEE I can't sleep :cry:", "committedDate": "2020-05-22T13:42:28Z", "type": "commit"}, {"oid": "9ddbaf70cdb132b6ba7da6ca9ea7843be1e9ae6f", "url": "https://github.com/Slimefun/Slimefun4/commit/9ddbaf70cdb132b6ba7da6ca9ea7843be1e9ae6f", "message": "So... I can't test this", "committedDate": "2020-05-22T14:02:26Z", "type": "commit"}]}