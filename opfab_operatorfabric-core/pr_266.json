{"pr_number": 266, "pr_title": "[OC-737] Add an object entity in the user service", "pr_createdAt": "2020-04-20T14:43:30Z", "pr_url": "https://github.com/opfab/operatorfabric-core/pull/266", "merge_commit": "2d38cd0011cc5af45844d5f118e3ce7357fb8e0f", "timeline": [{"oid": "e36261f5f091b499d7e8dbdf3c875c79043d0c72", "url": "https://github.com/opfab/operatorfabric-core/commit/e36261f5f091b499d7e8dbdf3c875c79043d0c72", "message": "[OC-737] Add an object entity in the user service", "committedDate": "2020-04-20T14:40:41Z", "type": "commit"}, {"oid": "544da399957dc8b11209f7df90c04ac22db81ab5", "url": "https://github.com/opfab/operatorfabric-core/commit/544da399957dc8b11209f7df90c04ac22db81ab5", "message": "Merge branch 'master' into OC-737", "committedDate": "2020-04-21T08:33:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMDY2OA==", "url": "https://github.com/opfab/operatorfabric-core/pull/266#discussion_r412100668", "body": "It could may be possible to use `peek`\u00a0method to putt all the actions perform upon the userData to update into one place and then collect it in a list in order to save it ? it would be more compact and more functional.", "bodyText": "It could may be possible to use peek\u00a0method to putt all the actions perform upon the userData to update into one place and then collect it in a list in order to save it ? it would be more compact and more functional.", "bodyHTML": "<p dir=\"auto\">It could may be possible to use <code>peek</code>\u00a0method to putt all the actions perform upon the userData to update into one place and then collect it in a list in order to save it ? it would be more compact and more functional.</p>", "author": "rlg-pro", "createdAt": "2020-04-21T11:25:44Z", "path": "services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/* Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ *\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+\n+\n+package org.lfenergy.operatorfabric.users.controllers;\n+\n+import org.lfenergy.operatorfabric.springtools.configuration.oauth.UpdatedUserEvent;\n+import org.lfenergy.operatorfabric.springtools.error.model.ApiError;\n+import org.lfenergy.operatorfabric.springtools.error.model.ApiErrorException;\n+import org.lfenergy.operatorfabric.users.model.Entity;\n+import org.lfenergy.operatorfabric.users.model.EntityData;\n+import org.lfenergy.operatorfabric.users.model.UserData;\n+import org.lfenergy.operatorfabric.users.repositories.EntityRepository;\n+import org.lfenergy.operatorfabric.users.repositories.UserRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.bus.ServiceMatcher;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * GroupsController, documented at {@link EntitiesApi}\n+ *\n+ */\n+@RestController\n+@RequestMapping(\"/entities\")\n+public class EntitiesController implements EntitiesApi {\n+\n+    public static final String ENTITY_NOT_FOUND_MSG = \"Entity %s not found\";\n+    public static final String USER_NOT_FOUND_MSG = \"User %s not found\";\n+    public static final String BAD_USER_LIST_MSG = \"Bad user list : user %s not found\";\n+    public static final String NO_MATCHING_ENTITY_ID_MSG = \"Payload Entity id does not match URL Entity id\";\n+    @Autowired\n+    private EntityRepository entityRepository;\n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    /* These are Spring Cloud Bus beans used to fire an event (UpdatedUserEvent) every time a user is modified.\n+    *  Other services handle this event by clearing their user cache for the given user. See issue #64*/\n+    @Autowired\n+    private ServiceMatcher busServiceMatcher;\n+    @Autowired\n+    private ApplicationEventPublisher publisher;\n+\n+    @Override\n+    public Void addEntityUsers(HttpServletRequest request, HttpServletResponse response, String id, List<String> users) throws Exception {\n+\n+        //Only existing entities can be updated\n+        findEntityOrThrow(id);\n+\n+        //Retrieve users from repository for users list, throwing an error if a login is not found\n+        List<UserData> foundUsers = retrieveUsers(users);\n+\n+        for (UserData userData : foundUsers) {\n+            userData.addEntity(id);\n+            publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), userData.getLogin()));\n+        }\n+        userRepository.saveAll(foundUsers);\n+        return null;\n+\n+    }\n+\n+    @Override\n+    public Entity createEntity(HttpServletRequest request, HttpServletResponse response, Entity entity) throws Exception {\n+        if(entityRepository.findById(entity.getId()).orElse(null) == null){\n+            response.addHeader(\"Location\", request.getContextPath() + \"/entities/\" + entity.getId());\n+            response.setStatus(201);\n+        }\n+        return entityRepository.save((EntityData) entity);\n+    }\n+\n+    @Override\n+    public Void deleteEntityUsers(HttpServletRequest request, HttpServletResponse response, String id) throws Exception {\n+\n+        //Only existing entities can be updated\n+         findEntityOrThrow(id);\n+\n+        //Retrieve users from repository for users list, throwing an error if a login is not found\n+        List<UserData> foundUsers = userRepository.findByEntitiesContaining(id);\n+\n+        if(foundUsers!=null) {\n+            for (UserData userData : foundUsers) {\n+                userData.deleteEntity(id);\n+                publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), userData.getLogin()));\n+            }\n+            userRepository.saveAll(foundUsers);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Void deleteEntityUser(HttpServletRequest request, HttpServletResponse response, String id, String login) throws Exception {\n+\n+        //Only existing entities can be updated\n+        findEntityOrThrow(id);\n+\n+        //Retrieve users from repository for users list, throwing an error if a login is not found\n+        UserData foundUser = userRepository.findById(login).orElseThrow(()->new ApiErrorException(\n+                ApiError.builder()\n+                        .status(HttpStatus.NOT_FOUND)\n+                        .message(String.format(USER_NOT_FOUND_MSG, login))\n+                        .build()\n+        ));\n+\n+        if(foundUser!=null) {\n+                foundUser.deleteEntity(id);\n+                publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), foundUser.getLogin()));\n+            userRepository.save(foundUser);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public List<? extends Entity> fetchEntities(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        return entityRepository.findAll();\n+    }\n+\n+    @Override\n+    public Entity fetchEntity(HttpServletRequest request, HttpServletResponse response, String id) throws Exception {\n+        return entityRepository.findById(id).orElseThrow(\n+           ()-> new ApiErrorException(\n+              ApiError.builder()\n+                 .status(HttpStatus.NOT_FOUND)\n+                 .message(String.format(ENTITY_NOT_FOUND_MSG, id))\n+                 .build()\n+           )\n+        );\n+    }\n+\n+    @Override\n+    public Entity updateEntity(HttpServletRequest request, HttpServletResponse response, String id, Entity entity) throws Exception {\n+        //id from entity body parameter should match id path parameter\n+        if(!entity.getId().equals(id)){\n+            throw new ApiErrorException(\n+                    ApiError.builder()\n+                            .status(HttpStatus.BAD_REQUEST)\n+                            .message(NO_MATCHING_ENTITY_ID_MSG)\n+                            .build());\n+        } else {\n+            return createEntity(request, response, entity);\n+        }\n+\n+    }\n+\n+    @Override\n+    public Void updateEntityUsers(HttpServletRequest request, HttpServletResponse response, String id, List<String> users) throws Exception {\n+\n+        //Only existing entities can be updated\n+        findEntityOrThrow(id);\n+\n+        List<UserData> formerlyBelongs = userRepository.findByEntitiesContaining(id);\n+        List<String> newUsersInEntity = new ArrayList<>(users);\n+\n+        //Make sure the intended updated users list only contains logins existing in the repository, throwing an error if this is not the case\n+        retrieveUsers(users);\n+\n+        List<UserData> toUpdate = new ArrayList<>();\n+        formerlyBelongs.stream()\n+           .filter(u->!users.contains(u.getLogin()))\n+           .forEach(u-> {", "originalCommit": "544da399957dc8b11209f7df90c04ac22db81ab5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIyMDU3NA==", "url": "https://github.com/opfab/operatorfabric-core/pull/266#discussion_r412220574", "bodyText": "Code modified following your advice. Thank you Ronan.", "author": "vlo-rte", "createdAt": "2020-04-21T14:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMDY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "7f7ffb73954e4be5254fcbc78142f5ba77bf0ac6", "changed_code": [{"header": "diff --git a/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java b/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\nindex ed0f7c661..dc08dad41 100644\n--- a/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\n+++ b/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\n", "chunk": "@@ -165,20 +166,17 @@ public class EntitiesController implements EntitiesApi {\n         //Make sure the intended updated users list only contains logins existing in the repository, throwing an error if this is not the case\n         retrieveUsers(users);\n \n-        List<UserData> toUpdate = new ArrayList<>();\n-        formerlyBelongs.stream()\n-           .filter(u->!users.contains(u.getLogin()))\n-           .forEach(u-> {\n-               u.deleteEntity(id);\n-               newUsersInEntity.remove(u.getLogin());\n-               toUpdate.add(u);\n-           });\n-\n-        //Fire an UpdatedUserEvent for all users that are updated because they're removed from the entity\n-        for (UserData userData : toUpdate) {\n-            userData.addEntity(id);\n-            publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), userData.getLogin()));\n-        }\n+        List<UserData> toUpdate =\n+                formerlyBelongs.stream()\n+                        .filter(u->!users.contains(u.getLogin()))\n+                        .peek(u-> {\n+                            u.deleteEntity(id);\n+                            newUsersInEntity.remove(u.getLogin());\n+                            u.addEntity(id);\n+                            //Fire an UpdatedUserEvent for all users that are updated because they're removed from the entity\n+                            publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), u.getLogin()));\n+                        }).collect(Collectors.toList());\n+\n         userRepository.saveAll(toUpdate);\n         addEntityUsers(request, response, id, newUsersInEntity); //For users that are added to the entity, the event will be published by addEntityUsers.\n         return null;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "2d38cd0011cc5af45844d5f118e3ce7357fb8e0f", "changed_code": [{"header": "diff --git a/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java b/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\nindex ed0f7c661..dc08dad41 100644\n--- a/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\n+++ b/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\n", "chunk": "@@ -165,20 +166,17 @@ public class EntitiesController implements EntitiesApi {\n         //Make sure the intended updated users list only contains logins existing in the repository, throwing an error if this is not the case\n         retrieveUsers(users);\n \n-        List<UserData> toUpdate = new ArrayList<>();\n-        formerlyBelongs.stream()\n-           .filter(u->!users.contains(u.getLogin()))\n-           .forEach(u-> {\n-               u.deleteEntity(id);\n-               newUsersInEntity.remove(u.getLogin());\n-               toUpdate.add(u);\n-           });\n-\n-        //Fire an UpdatedUserEvent for all users that are updated because they're removed from the entity\n-        for (UserData userData : toUpdate) {\n-            userData.addEntity(id);\n-            publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), userData.getLogin()));\n-        }\n+        List<UserData> toUpdate =\n+                formerlyBelongs.stream()\n+                        .filter(u->!users.contains(u.getLogin()))\n+                        .peek(u-> {\n+                            u.deleteEntity(id);\n+                            newUsersInEntity.remove(u.getLogin());\n+                            u.addEntity(id);\n+                            //Fire an UpdatedUserEvent for all users that are updated because they're removed from the entity\n+                            publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), u.getLogin()));\n+                        }).collect(Collectors.toList());\n+\n         userRepository.saveAll(toUpdate);\n         addEntityUsers(request, response, id, newUsersInEntity); //For users that are added to the entity, the event will be published by addEntityUsers.\n         return null;\n", "next_change": {"commit": "cdf92690865502c3a8522d786e820b27a1b6b092", "changed_code": [{"header": "diff --git a/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java b/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\nindex dc08dad41..07eda445a 100644\n--- a/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\n+++ b/services/core/users/src/main/java/org/lfenergy/operatorfabric/users/controllers/EntitiesController.java\n", "chunk": "@@ -172,7 +172,6 @@ public class EntitiesController implements EntitiesApi {\n                         .peek(u-> {\n                             u.deleteEntity(id);\n                             newUsersInEntity.remove(u.getLogin());\n-                            u.addEntity(id);\n                             //Fire an UpdatedUserEvent for all users that are updated because they're removed from the entity\n                             publisher.publishEvent(new UpdatedUserEvent(this, busServiceMatcher.getServiceId(), u.getLogin()));\n                         }).collect(Collectors.toList());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "2d38cd0011cc5af45844d5f118e3ce7357fb8e0f", "message": "Merge commit", "committedDate": null}, {"oid": "cdf92690865502c3a8522d786e820b27a1b6b092", "committedDate": "2020-04-27 15:56:06 +0200", "message": "[OC-857] Users - PUT /groups/{id}/users doesn't delete former group members"}, {"oid": "14d5339ba49ae4f9c4445234d02542f4a44170b1", "committedDate": "2020-05-04 20:20:24 +0200", "message": "[OC-738] Add a group perimeter object in the user service"}, {"oid": "0f6a913f6cd780cc5eca5a74a67f077e1f62ffee", "committedDate": "2020-06-04 10:07:42 +0200", "message": "[OC-910] Updating headers in source and files"}, {"oid": "ab833b45589961bd0e2a325b25194f7fe7701667", "committedDate": "2020-08-20 18:44:04 +0200", "message": "[OC-1022] End point to delete entity"}, {"oid": "7095c22fdea89e61f1fdeb7a08f5ea973b18682a", "committedDate": "2020-08-22 08:56:39 +0200", "message": "[OC-1023] Endpoint to delete group"}, {"oid": "261d0527e6a539b7d7bc9fede70acb53ee591d8e", "committedDate": "2020-08-24 11:23:31 +0200", "message": "[OC-1024] Endpoint to delete perimeter"}, {"oid": "33c48c24d5ed9dc4ec6bd800fcefec98a8d69591", "committedDate": "2020-11-02 16:26:27 +0100", "message": "[OC-1144] Adds parents to entity and forbides cycle in transitive ref\""}, {"oid": "fdacb04fb8ab81d60840b325c1707f62bda2b396", "committedDate": "2020-11-04 18:44:53 +0100", "message": "[OC-1144] applyes suggested modifications"}, {"oid": "237aa0ab6a03ced0c620e9f7c836ccab778852ec", "committedDate": "2020-11-05 12:04:50 +0100", "message": "[OC-1144] Correct minor sonar warnings"}, {"oid": "e60c80d7587bc225d82278c9f5f9de25062b0a49", "committedDate": "2021-03-22 18:21:55 +0100", "message": "[OC-1581] Deleting an entity that is listed as parent entity in some children entities should cause it to be removed from said children"}, {"oid": "721b99ee1cc3c2c26993272096a9defd2bcc6d9b", "committedDate": "2021-04-14 11:34:25 +0200", "message": "[OC-1650] Initial package rename"}]}, {"oid": "7f7ffb73954e4be5254fcbc78142f5ba77bf0ac6", "url": "https://github.com/opfab/operatorfabric-core/commit/7f7ffb73954e4be5254fcbc78142f5ba77bf0ac6", "message": "[OC-737] update from code review", "committedDate": "2020-04-21T14:06:35Z", "type": "commit"}]}