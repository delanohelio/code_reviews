{"pr_number": 928, "pr_title": "Issue #889 - Initial implementation of ServerRegistryResourceProvider", "pr_createdAt": "2020-04-14T21:07:54Z", "pr_url": "https://github.com/IBM/FHIR/pull/928", "merge_commit": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "timeline": [{"oid": "b935e16770f0c3b2c86633642fa0418307d409bf", "url": "https://github.com/IBM/FHIR/commit/b935e16770f0c3b2c86633642fa0418307d409bf", "message": "Issue #889 - Initial implementation of ServerRegistryResourceProvider\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-14T21:21:57Z", "type": "commit"}, {"oid": "b935e16770f0c3b2c86633642fa0418307d409bf", "url": "https://github.com/IBM/FHIR/commit/b935e16770f0c3b2c86633642fa0418307d409bf", "message": "Issue #889 - Initial implementation of ServerRegistryResourceProvider\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-14T21:21:57Z", "type": "forcePushed"}, {"oid": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "url": "https://github.com/IBM/FHIR/commit/ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "message": "Issue #889 - changed logging from fine to info\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-14T22:33:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjkzNQ==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408956935", "body": "please add the corresponding docs to the user's guide", "bodyText": "please add the corresponding docs to the user's guide", "bodyHTML": "<p dir=\"auto\">please add the corresponding docs to the user's guide</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:01:25Z", "path": "fhir-config/src/main/java/com/ibm/fhir/config/FHIRConfiguration.java", "diffHunk": "@@ -33,6 +33,7 @@\n     public static final String PROPERTY_ALLOW_CLIENT_HANDLING_PREF = \"fhirServer/core/allowClientHandlingPref\";\n     public static final String PROPERTY_CHECK_REFERENCE_TYPES = \"fhirServer/core/checkReferenceTypes\";\n     public static final String PROPERTY_CONDITIONAL_DELETE_MAX_NUMBER = \"fhirServer/core/conditionalDeleteMaxNumber\";\n+    public static final String PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED = \"fhirServer/core/serverRegistryResourceProviderEnabled\";", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODYyOA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408968628", "bodyText": "Added documentation to the user's guide.", "author": "JohnTimm", "createdAt": "2020-04-15T16:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NjkzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDA5Nw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408960097", "body": "javadoc?", "bodyText": "javadoc?", "bodyHTML": "<p dir=\"auto\">javadoc?</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:06:12Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java", "diffHunk": "@@ -108,7 +108,13 @@ public static boolean isDefinitionalResource(Resource resource) {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n-    private static boolean isDefinitionalResourceType(Class<?> resourceType) {\n+    public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTgxOA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408991818", "bodyText": "Added Javadoc to both methods", "author": "JohnTimm", "createdAt": "2020-04-15T16:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\nindex 0326c7e6a4..126f35ad33 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/util/FHIRRegistryUtil.java\n", "chunk": "@@ -108,12 +108,28 @@ public final class FHIRRegistryUtil {\n         return isDefinitionalResourceType(resource.getClass());\n     }\n \n+    /**\n+     * Throw an {@link IllegalArgumentException} if the resource type is not a definitional resource type per:\n+     * <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n+     *\n+     * @param resourceType\n+     *     the resourceType\n+     */\n     public static void requireDefinitionalResourceType(Class<? extends Resource> resourceType) {\n         if (!isDefinitionalResourceType(resourceType)) {\n             throw new IllegalArgumentException(resourceType.getSimpleName() + \" is not a definitional resource type\");\n         }\n     }\n \n+    /**\n+     * Indicates whether the resource type is a definitional resource type per:\n+     * <a href=\"http://hl7.org/fhir/definition.html\">http://hl7.org/fhir/definition.html</a>\n+     *\n+     * @param resourceType\n+     *     the resource type\n+     * @return\n+     *     true if the resource type is a definitional resource, false otherwise\n+     */\n     public static boolean isDefinitionalResourceType(Class<? extends Resource> resourceType) {\n         return DEFINITIONAL_RESOURCE_TYPES.contains(resourceType);\n     }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTI0Mg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408961242", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:07:53Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -143,6 +157,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n      */", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDQ5Mw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408970493", "bodyText": "An IllegalArgumentException will not be thrown if the resource isn't definitional for this method. The method will simply return null.", "author": "JohnTimm", "createdAt": "2020-04-15T16:21:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MTI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -154,6 +169,8 @@ public final class FHIRRegistry {\n      *     the resource type\n      * @return\n      *     the resources for the given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n      */\n     public <T extends Resource> Collection<T> getResources(Class<T> resourceType) {\n         Objects.requireNonNull(resourceType);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUxMw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962513", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:09:46Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -115,6 +128,7 @@ public String getLatestVersion(String url, Class<? extends Resource> resourceTyp\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NDc0MA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408974740", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:28:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -124,6 +137,8 @@ public final class FHIRRegistry {\n      *     the resource for the given canonical url and resource type if exists, null otherwise\n      * @throws ClassCastException\n      *     if the resource exists in the registry but its type does not match given resource type\n+     * @throws IllegalArgumentException\n+     *     if the resource type is not a definitional resource type\n      */\n     public <T extends Resource> T getResource(String url, Class<T> resourceType) {\n         Objects.requireNonNull(url);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjY2Mw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962663", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:10:01Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -87,7 +100,7 @@ public boolean hasResource(String url, Class<? extends Resource> resourceType) {\n      *     the latest version of a resource for the given url and resource type if exists, null otherwise\n      */\n     public String getLatestVersion(String url, Class<? extends Resource> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTQxNQ==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975415", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjY2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjcyNA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408962724", "body": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyText": "Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException", "bodyHTML": "<p dir=\"auto\">Add documentation that says you can only call this for definitional resource types and that otherwise it will throw an IllegalArgumentException</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:10:09Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -54,7 +67,7 @@ public static FHIRRegistry getInstance() {\n      *     true if a resource for the given canonical url and resource type exists in the registry, false otherwise\n      */\n     public boolean hasResource(String url, Class<? extends Resource> resourceType) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTkxOA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975918", "bodyText": "An IllegalArgumentException will not be thrown if the resource isn't definitional for this method. The method will simple return false.", "author": "JohnTimm", "createdAt": "2020-04-15T16:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjcyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM0Mg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408970342", "body": "maybe overload the constructor to let the user pass in the cache size?", "bodyText": "maybe overload the constructor to let the user pass in the cache size?", "bodyHTML": "<p dir=\"auto\">maybe overload the constructor to let the user pass in the cache size?</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:21:35Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjI3OA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408976278", "bodyText": "This is used internally and is not intended to be configured / controlled by the user.", "author": "JohnTimm", "createdAt": "2020-04-15T16:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDM0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk5NA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408973994", "body": "maybe a comment here to explain that getInstance() loads all the static providers", "bodyText": "maybe a comment here to explain that getInstance() loads all the static providers", "bodyHTML": "<p dir=\"auto\">maybe a comment here to explain that getInstance() loads all the static providers</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:27:14Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java", "diffHunk": "@@ -127,6 +131,14 @@ public void contextInitialized(ServletContextEvent event) {\n             log.fine(\"Initializing FHIRRegistry...\");\n             FHIRRegistry.getInstance();\n \n+            Boolean serverRegistryResourceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (serverRegistryResourceProviderEnabled) {\n+                log.info(\"Registering ServerRegistryResourceProvider...\");\n+                ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n+                FHIRRegistry.getInstance().register(provider);", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODgxNg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408988816", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzk5NA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "93f7ef50f6b5276d3a04a39fb1c351b33302ada5", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 7afd94b1e2..b44bf944f5 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -139,6 +209,20 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "28a6ad48105d0acb7747dc80c1ee1a2834ce29d8", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex b44bf944f5..c656a82cf3 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -209,20 +188,6 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n-            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n-            if (graphTermServiceProviderEnabled) {\n-                log.info(\"Adding GraphTermServiceProvider...\");\n-                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n-                if (propertyGroup == null) {\n-                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n-                } else {\n-                    Map<String, Object> map = new HashMap<>();\n-                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n-                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n-                }\n-            }\n-\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "7ca7f7ed1a9707fca4a7d31a75b27d2ad3eeca9c", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex c656a82cf3..5a59a7b8fe 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -188,6 +198,20 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "809f55cbe99ea4d40ed38fe1a5da3cd24286d42b", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 5a59a7b8fe..d7a568d25a 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -198,20 +186,6 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n-            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n-            if (graphTermServiceProviderEnabled) {\n-                log.info(\"Adding GraphTermServiceProvider...\");\n-                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n-                if (propertyGroup == null) {\n-                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n-                } else {\n-                    Map<String, Object> map = new HashMap<>();\n-                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n-                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n-                }\n-            }\n-\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "22b10795eab90d2a759e71f981f70e2b2595057c", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex d7a568d25a..cca6a759e9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -186,6 +195,20 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n             }\n \n+            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n+            if (graphTermServiceProviderEnabled) {\n+                log.info(\"Adding GraphTermServiceProvider...\");\n+                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n+                if (propertyGroup == null) {\n+                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n+                } else {\n+                    Map<String, Object> map = new HashMap<>();\n+                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "f79a867e3e12230e4b218145d0e1a7cdcc152de1", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex cca6a759e9..2163a7ba33 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -204,7 +205,8 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 } else {\n                     Map<String, Object> map = new HashMap<>();\n                     propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map));\n+                    int timeLimit = fhirConfig.getIntProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT, GraphTermServiceProvider.DEFAULT_TIME_LIMIT);\n+                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map), timeLimit);\n                     FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n                 }\n             }\n", "next_change": {"commit": "bc7c3c32f9811843c72a84216bd099f064e5096f", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 2163a7ba33..5f3966f2f9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -211,6 +220,61 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 }\n             }\n \n+            PropertyGroup termPropertyGroup = fhirConfig.getPropertyGroup(\"fhirServer/term\");\n+            if (termPropertyGroup != null) {\n+                Object[] remoteTermServiceProvidersArray = termPropertyGroup.getArrayProperty(\"remoteTermServiceProviders\");\n+                if (remoteTermServiceProvidersArray != null) {\n+                    for (Object remoteTermServiceProviderObject : remoteTermServiceProvidersArray) {\n+                        PropertyGroup remoteTermServiceProviderPropertyGroup = (PropertyGroup) remoteTermServiceProviderObject;\n+                        try {\n+                            Configuration.Builder builder = Configuration.builder();\n+\n+                            builder.base(remoteTermServiceProviderPropertyGroup.getStringProperty(\"base\"));\n+\n+                            PropertyGroup trustStorePropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"trustStore\");\n+                            if (trustStorePropertyGroup != null) {\n+                                builder.trustStore(TrustStore.builder()\n+                                    .location(trustStorePropertyGroup.getStringProperty(\"location\"))\n+                                    .password(trustStorePropertyGroup.getStringProperty(\"password\"))\n+                                    .type(trustStorePropertyGroup.getStringProperty(\"type\", TrustStore.DEFAULT_TYPE))\n+                                    .build());\n+                            }\n+\n+                            builder.hostnameVerificationEnabled(remoteTermServiceProviderPropertyGroup.getBooleanProperty(\"hostnameVerificationEnabled\", Configuration.DEFAULT_HOSTNAME_VERIFICATION_ENABLED));\n+\n+                            PropertyGroup basicAuthPropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"basicAuth\");\n+                            if (basicAuthPropertyGroup != null) {\n+                                builder.basicAuth(BasicAuth.builder()\n+                                    .username(basicAuthPropertyGroup.getStringProperty(\"username\"))\n+                                    .password(basicAuthPropertyGroup.getStringProperty(\"password\"))\n+                                    .build());\n+                            }\n+\n+                            builder.httpTimeout(remoteTermServiceProviderPropertyGroup.getIntProperty(\"httpTimeout\", Configuration.DEFAULT_HTTP_TIMEOUT));\n+\n+                            Object[] supportsArray = remoteTermServiceProviderPropertyGroup.getArrayProperty(\"supports\");\n+                            if (supportsArray != null) {\n+                                for (Object supportsObject : supportsArray) {\n+                                    PropertyGroup supportsPropertyGroup = (PropertyGroup) supportsObject;\n+                                    builder.supports(Supports.builder()\n+                                        .system(supportsPropertyGroup.getStringProperty(\"system\"))\n+                                        .version(supportsPropertyGroup.getStringProperty(\"version\"))\n+                                        .build());\n+                                }\n+                            }\n+\n+                            Configuration configuration = builder.build();\n+\n+                            RemoteTermServiceProvider remoteTermServiceProvider = new RemoteTermServiceProvider(configuration);\n+                            FHIRTermService.getInstance().addProvider(remoteTermServiceProvider);\n+                            remoteTermServiceProviders.add(remoteTermServiceProvider);\n+                        } catch (Exception e) {\n+                            log.log(Level.WARNING, \"Unable to create RemoteTermServiceProvider from configuration property group: \" + remoteTermServiceProviderPropertyGroup, e);\n+                        }\n+                    }\n+                }\n+            }\n+\n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n         } catch(Throwable t) {\n", "next_change": {"commit": "aa3901cdc664baaa6d5d29f270506d267d4463c0", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 5f3966f2f9..f995fc2847 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -200,80 +199,10 @@ public class FHIRServletContextListener implements ServletContextListener {\n             Boolean serverRegistryResourceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_REGISTRY_RESOURCE_PROVIDER_ENABLED, Boolean.FALSE);\n             if (serverRegistryResourceProviderEnabled) {\n                 log.info(\"Registering ServerRegistryResourceProvider...\");\n-                ServerRegistryResourceProvider provider = new ServerRegistryResourceProvider(persistenceHelper);\n-                FHIRRegistry.getInstance().addProvider(provider);\n-                FHIRPersistenceInterceptorMgr.getInstance().addInterceptor(provider);\n+                FHIRRegistry.getInstance().addProvider(new ServerRegistryResourceProvider(persistenceHelper));\n             }\n \n-            Boolean graphTermServiceProviderEnabled = fhirConfig.getBooleanProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_ENABLED, Boolean.FALSE);\n-            if (graphTermServiceProviderEnabled) {\n-                log.info(\"Adding GraphTermServiceProvider...\");\n-                PropertyGroup propertyGroup = fhirConfig.getPropertyGroup(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_CONFIGURATION);\n-                if (propertyGroup == null) {\n-                    log.log(Level.WARNING, \"GraphTermServiceProvider configuration not found\");\n-                } else {\n-                    Map<String, Object> map = new HashMap<>();\n-                    propertyGroup.getProperties().stream().forEach(entry -> map.put(entry.getName(), entry.getValue()));\n-                    int timeLimit = fhirConfig.getIntProperty(PROPERTY_GRAPH_TERM_SERVICE_PROVIDER_TIME_LIMIT, GraphTermServiceProvider.DEFAULT_TIME_LIMIT);\n-                    graphTermServiceProvider = new GraphTermServiceProvider(new MapConfiguration(map), timeLimit);\n-                    FHIRTermService.getInstance().addProvider(graphTermServiceProvider);\n-                }\n-            }\n-\n-            PropertyGroup termPropertyGroup = fhirConfig.getPropertyGroup(\"fhirServer/term\");\n-            if (termPropertyGroup != null) {\n-                Object[] remoteTermServiceProvidersArray = termPropertyGroup.getArrayProperty(\"remoteTermServiceProviders\");\n-                if (remoteTermServiceProvidersArray != null) {\n-                    for (Object remoteTermServiceProviderObject : remoteTermServiceProvidersArray) {\n-                        PropertyGroup remoteTermServiceProviderPropertyGroup = (PropertyGroup) remoteTermServiceProviderObject;\n-                        try {\n-                            Configuration.Builder builder = Configuration.builder();\n-\n-                            builder.base(remoteTermServiceProviderPropertyGroup.getStringProperty(\"base\"));\n-\n-                            PropertyGroup trustStorePropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"trustStore\");\n-                            if (trustStorePropertyGroup != null) {\n-                                builder.trustStore(TrustStore.builder()\n-                                    .location(trustStorePropertyGroup.getStringProperty(\"location\"))\n-                                    .password(trustStorePropertyGroup.getStringProperty(\"password\"))\n-                                    .type(trustStorePropertyGroup.getStringProperty(\"type\", TrustStore.DEFAULT_TYPE))\n-                                    .build());\n-                            }\n-\n-                            builder.hostnameVerificationEnabled(remoteTermServiceProviderPropertyGroup.getBooleanProperty(\"hostnameVerificationEnabled\", Configuration.DEFAULT_HOSTNAME_VERIFICATION_ENABLED));\n-\n-                            PropertyGroup basicAuthPropertyGroup = remoteTermServiceProviderPropertyGroup.getPropertyGroup(\"basicAuth\");\n-                            if (basicAuthPropertyGroup != null) {\n-                                builder.basicAuth(BasicAuth.builder()\n-                                    .username(basicAuthPropertyGroup.getStringProperty(\"username\"))\n-                                    .password(basicAuthPropertyGroup.getStringProperty(\"password\"))\n-                                    .build());\n-                            }\n-\n-                            builder.httpTimeout(remoteTermServiceProviderPropertyGroup.getIntProperty(\"httpTimeout\", Configuration.DEFAULT_HTTP_TIMEOUT));\n-\n-                            Object[] supportsArray = remoteTermServiceProviderPropertyGroup.getArrayProperty(\"supports\");\n-                            if (supportsArray != null) {\n-                                for (Object supportsObject : supportsArray) {\n-                                    PropertyGroup supportsPropertyGroup = (PropertyGroup) supportsObject;\n-                                    builder.supports(Supports.builder()\n-                                        .system(supportsPropertyGroup.getStringProperty(\"system\"))\n-                                        .version(supportsPropertyGroup.getStringProperty(\"version\"))\n-                                        .build());\n-                                }\n-                            }\n-\n-                            Configuration configuration = builder.build();\n-\n-                            RemoteTermServiceProvider remoteTermServiceProvider = new RemoteTermServiceProvider(configuration);\n-                            FHIRTermService.getInstance().addProvider(remoteTermServiceProvider);\n-                            remoteTermServiceProviders.add(remoteTermServiceProvider);\n-                        } catch (Exception e) {\n-                            log.log(Level.WARNING, \"Unable to create RemoteTermServiceProvider from configuration property group: \" + remoteTermServiceProviderPropertyGroup, e);\n-                        }\n-                    }\n-                }\n-            }\n+            configureTermServiceCapabilities(fhirConfig);\n \n             // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n", "next_change": {"commit": "8e589c46210614fafbd29e1defb8152751d7b5dc", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex f995fc2847..9dc06b39d8 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -202,6 +204,12 @@ public class FHIRServletContextListener implements ServletContextListener {\n                 FHIRRegistry.getInstance().addProvider(new ServerRegistryResourceProvider(persistenceHelper));\n             }\n \n+            Boolean serverResolveFunctionEnabled = fhirConfig.getBooleanProperty(PROPERTY_SERVER_RESOLVE_FUNCTION_ENABLED, Boolean.FALSE);\n+            if (serverResolveFunctionEnabled) {\n+                log.info(\"Registering ServerResolveFunction...\");\n+                FHIRPathFunctionRegistry.getInstance().register(new ServerResolveFunction(persistenceHelper));\n+            }\n+\n             configureTermServiceCapabilities(fhirConfig);\n \n             // Finally, set our \"initComplete\" flag to true.\n", "next_change": {"commit": "338590ddfea42ba0958b899a30ea4cd3f478978a", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 9dc06b39d8..d9b43f085e 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -212,8 +219,11 @@ public class FHIRServletContextListener implements ServletContextListener {\n \n             configureTermServiceCapabilities(fhirConfig);\n \n-            // Finally, set our \"initComplete\" flag to true.\n+            // Set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n+\n+            // Now init is complete, tell all registered callbacks\n+            EventManagerImpl.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": {"commit": "3d12455051019e10dc6b24827b8a23a04d4b5d77", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex d9b43f085e..80d7382acd 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -223,7 +223,7 @@ public class FHIRServletContextListener implements ServletContextListener {\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n \n             // Now init is complete, tell all registered callbacks\n-            EventManagerImpl.serverReady(serviceManagerId);\n+            EventManager.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": {"commit": "bcba89404d7752d545897bcd507bd0ed80b7a389", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 80d7382acd..69104abcc6 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -219,11 +221,8 @@ public class FHIRServletContextListener implements ServletContextListener {\n \n             configureTermServiceCapabilities(fhirConfig);\n \n-            // Set our \"initComplete\" flag to true.\n+            // Finally, set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n-\n-            // Now init is complete, tell all registered callbacks\n-            EventManager.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": {"commit": "1e8e6f4c1a2f8b8b3a57401f5aa26a21f84877f7", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\nindex 69104abcc6..3282e77006 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/listener/FHIRServletContextListener.java\n", "chunk": "@@ -221,8 +227,11 @@ public class FHIRServletContextListener implements ServletContextListener {\n \n             configureTermServiceCapabilities(fhirConfig);\n \n-            // Finally, set our \"initComplete\" flag to true.\n+            // Set our \"initComplete\" flag to true.\n             event.getServletContext().setAttribute(FHIR_SERVER_INIT_COMPLETE, Boolean.TRUE);\n+\n+            // Now init is complete, tell all registered callbacks\n+            EventManager.serverReady(serviceManagerId);\n         } catch(Throwable t) {\n             String msg = \"Encountered an exception while initializing the servlet context.\";\n             log.log(Level.SEVERE, msg, t);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "15dbedca4fc5f06a49056334b10579d5d126d2eb", "message": "Merge commit", "committedDate": null}, {"oid": "967c57aa9cf105fb183cffbd6817af65227355c6", "committedDate": "2020-04-16 18:47:16 -0400", "message": "Cleanup NPE when the server starts with no fhir-server-config"}, {"oid": "567dc9b564a2f49586445d5a5dabaeb101290e99", "committedDate": "2020-04-22 00:00:59 -0400", "message": "Move Liberty OAuth tables to the FHIR_OAUTH schema and gen by default"}, {"oid": "0908735c3bb710956c9f5f2158bf8e00805fce59", "committedDate": "2020-04-24 18:27:04 -0400", "message": "parent fd44bdd39e004256cf043b71f219fb613b981491 author ccorley <ccorley@us.ibm.com> 1585150915 -0500 committer ccorley <ccorley@us.ibm.com> 1587571679 -0500"}, {"oid": "267e0ec98d8877fe33ac16106e45a5922d24e389", "committedDate": "2020-04-30 07:16:02 -0500", "message": "Updated var names"}, {"oid": "38a6455c56e7cea72ac581f821cefbbc07c854ec", "committedDate": "2020-05-01 10:36:30 -0400", "message": "make useTLS true if the config prop is missing and fix docs"}, {"oid": "af28128989ec0a06127536c1798d7a6ab8a84451", "committedDate": "2020-05-01 11:08:06 -0400", "message": "use Boolean.TRUE to match current style"}, {"oid": "8a9527902f95e9d4b0569021381a0ab042f0324b", "committedDate": "2020-05-08 20:44:23 -0400", "message": "Sequence Lock Contention on Apache Derby #1038"}, {"oid": "87858a66d8c31d9b3e63af3bdc56e3b073087f4d", "committedDate": "2020-05-19 15:47:14 -0400", "message": "Improve Bulk and OAuth Support #1110"}, {"oid": "42d7af361135d264ad9be219d36844759405904b", "committedDate": "2020-05-21 09:07:59 -0400", "message": "issue 1110"}, {"oid": "6a7e5222b2b7ef9e05ba02e43695e86ac1f09586", "committedDate": "2020-05-21 14:04:20 -0400", "message": "issue #1110 - fixed message for java batch bootsrapping"}, {"oid": "ab5edee34105c60799c6b77de9179e79aad3361d", "committedDate": "2020-06-09 01:32:43 -0400", "message": "issue #1136 - reorg fhir-operation projects"}, {"oid": "071291da2a9ddd8d704c5b4ed3ae89380756a4cf", "committedDate": "2020-06-26 15:08:00 -0400", "message": "issue-1144 refactored to remove setSchema which exposes a transaction handling bug in Liberty"}, {"oid": "4460020daaf15e89809e3b2642d461c23498dfc3", "committedDate": "2020-06-30 15:27:16 -0400", "message": "issue-1144 additional review cleanup"}, {"oid": "c20868fe71f7f2e61b5dd98079b35c6be07af4dc", "committedDate": "2020-09-01 15:47:56 -0500", "message": "Issue #1421 - fix validation config, add documentation of new property"}, {"oid": "b9f8c5cc1c446cf18ad337327fa9e6e0ab74629b", "committedDate": "2020-09-30 11:10:51 -0500", "message": "issue #1445 - Initialize LanguageRegistry at startup"}, {"oid": "5b611c79856fd1fbd27cff7d703b95a2c747b925", "committedDate": "2020-10-18 11:00:17 -0400", "message": "issue #1366 reworked schema migration logic to avoid Liberty/Derby transaction defect"}, {"oid": "01a95d24049168144cbb0445deaa0277617b2e70", "committedDate": "2020-10-19 15:26:17 -0400", "message": "issue #1366 merge conflict resolution with latest master"}, {"oid": "a5b40e535517a45cc540b0ed2d13743a1243cda9", "committedDate": "2020-11-02 15:46:01 -0500", "message": "issue #916 static datasource option and make it the default"}, {"oid": "d343e20a0af25d2dcf00d70b247bc87a602350e2", "committedDate": "2020-11-03 14:29:37 -0500", "message": "issue #916 make proxy datasource the default config and fix jndi naming for bootstrap derby databases"}, {"oid": "9e91293c46a16dd46e78c189bc52dcb71c47dff1", "committedDate": "2020-11-06 14:12:55 -0500", "message": "issue #916 derby bootstrap must default using proxy datasource config"}, {"oid": "c757abe505ca0683b56f3e1ff0c2703efc945e9f", "committedDate": "2020-11-30 15:35:54 -0500", "message": "Add disable operation configuration #1753"}, {"oid": "93f7ef50f6b5276d3a04a39fb1c351b33302ada5", "committedDate": "2021-02-26 13:55:02 -0500", "message": "Issue #1980 - Introduce fhir-term-graph module"}, {"oid": "28a6ad48105d0acb7747dc80c1ee1a2834ce29d8", "committedDate": "2021-02-26 17:08:44 -0600", "message": "issue #1408 - move advanced bootstrapping into CI (#1992)"}, {"oid": "7ca7f7ed1a9707fca4a7d31a75b27d2ad3eeca9c", "committedDate": "2021-03-02 15:07:06 -0500", "message": "Merge branch 'main' into johntimm-main"}, {"oid": "bb3aa9fd298fccb197cd7861befff7207f1f93d2", "committedDate": "2021-03-02 15:20:08 -0500", "message": "Issue #1980 - removed unused import"}, {"oid": "809f55cbe99ea4d40ed38fe1a5da3cd24286d42b", "committedDate": "2021-03-03 00:07:42 -0500", "message": "issue 1683 and issue 2011 fixed migration for Postgres and added last_updated to xxx_logical_resources"}, {"oid": "22b10795eab90d2a759e71f981f70e2b2595057c", "committedDate": "2021-03-12 11:15:43 -0500", "message": "Merge pull request #2080 from IBM/main"}, {"oid": "f79a867e3e12230e4b218145d0e1a7cdcc152de1", "committedDate": "2021-03-15 14:51:51 -0400", "message": "Issue #1980 - added support for time limit"}, {"oid": "b7b48408b2ca1692a2f173a3318675fda505f212", "committedDate": "2021-03-19 09:29:11 -0400", "message": "Issue #1980 - performance improvements"}, {"oid": "6b5e844b39abe0d17c0a0cd86d99a67989341d06", "committedDate": "2021-04-03 22:23:15 -0400", "message": "issue #923 - docker image updates"}, {"oid": "bc7c3c32f9811843c72a84216bd099f064e5096f", "committedDate": "2021-04-09 18:16:58 -0400", "message": "Issue #2198 - introduce fhir-term-remote module"}, {"oid": "7fc368245380f77dd20f2415b99b7e09928e7aad", "committedDate": "2021-04-13 16:01:35 -0400", "message": "Issue #2198 - added caching and better exception handling"}, {"oid": "557470aee0e286572ba9610b842aca85198dcb41", "committedDate": "2021-04-14 16:52:30 -0400", "message": "Issue #2198 - removed LRUCache class in favor of CacheSupport"}, {"oid": "9780651da77a02b292f653c981d0bf802931cc3f", "committedDate": "2021-04-14 17:47:19 -0400", "message": "Issue #2198 - added FHIRTermConfig to support cache enable/disable"}, {"oid": "33bacd29b12339febb8aba2af5b81d0f8a985bd7", "committedDate": "2021-04-14 19:14:25 -0400", "message": "Issue #2198 - added CacheManager, changed enabled -> disabled"}, {"oid": "e635bdc373005dfd39a5cbaf8bb33760a8be9090", "committedDate": "2021-04-15 17:13:58 -0400", "message": "Issue #2198 - tenant-aware caching"}, {"oid": "f987af6e0e43857bb3082c30a2f9d7dfcacf0f27", "committedDate": "2021-04-19 17:23:15 -0400", "message": "Issue #2198 - refactoring per PR review"}, {"oid": "d8f74df551d3013f48e2f2d9e7d44ac7080ae1c7", "committedDate": "2021-04-19 17:47:27 -0400", "message": "Issue #2198 - more refactoring"}, {"oid": "aa3901cdc664baaa6d5d29f270506d267d4463c0", "committedDate": "2021-04-20 09:08:46 -0400", "message": "Issue #2198 - updates per PR feedback"}, {"oid": "6381cfdf364bfb1fb653883065fa6894287592c6", "committedDate": "2021-04-20 18:05:04 -0400", "message": "Issue #2198 - miscellaneous updates (#2258)"}, {"oid": "d4a7538816320c473178631abfadc6520f632703", "committedDate": "2021-04-22 17:10:37 -0400", "message": "Issue #2269, #2271, #2198 - miscellaneous updates (#2270)"}, {"oid": "486e23b7914605898831d3eb248dd1840e268b11", "committedDate": "2021-04-23 09:59:48 -0400", "message": "null check for missing graphTermServiceProviders config (#2274)"}, {"oid": "8e589c46210614fafbd29e1defb8152751d7b5dc", "committedDate": "2021-05-19 12:51:51 -0400", "message": "Issue #2296 - implement server resolve function (#2375)"}, {"oid": "567eff3e73eaa77e162d48e9f6d9007c6a88da80", "committedDate": "2021-05-26 17:31:10 -0400", "message": "Issue #2431 - add support for headers in RemoteTermServiceProvider (#2435)"}, {"oid": "44c3dce9d46ab0f07d71fa62be04996d2b51c381", "committedDate": "2021-09-13 14:58:04 -0400", "message": "Update to the latest janusgraph and gremlin (#2755)"}, {"oid": "19afc25939d69bdce44702c9328704cdf890963a", "committedDate": "2021-10-07 09:06:36 +0100", "message": "issue-2837 deadlock issues with common values in Derby"}, {"oid": "b6591db5d16bd973192c27b2e511890d52875a93", "committedDate": "2021-10-11 08:49:03 -0400", "message": "Update with Model Config"}, {"oid": "338590ddfea42ba0958b899a30ea4cd3f478978a", "committedDate": "2021-10-12 16:19:13 +0100", "message": "issue-1869 fixes per review comments and a new lifecycle event for correct shutdown processing"}, {"oid": "3d12455051019e10dc6b24827b8a23a04d4b5d77", "committedDate": "2021-10-12 16:26:23 +0100", "message": "issue-1869 removed unused EventManager interface and renamed impl"}, {"oid": "bcba89404d7752d545897bcd507bd0ed80b7a389", "committedDate": "2021-10-13 09:49:57 +0100", "message": "issue-2837 merged main and resolved conflict in FHIRServletContextListener"}, {"oid": "1e8e6f4c1a2f8b8b3a57401f5aa26a21f84877f7", "committedDate": "2021-10-14 12:46:03 +0100", "message": "issue 1869 merged with main"}, {"oid": "543e9f5d30129cb672d4f7f0ac0022be97dd7cda", "committedDate": "2021-10-18 17:22:34 -0400", "message": "issue #2777 - bulkdata authz enforcement in fhir-smart"}, {"oid": "4e62a9409e9a70750a5a3c12de7d377233b4b327", "committedDate": "2021-10-19 13:56:45 -0400", "message": "Introduce fhir-server-spi"}, {"oid": "b424d4328639dbd046bddc13c4f4c14aadfb35d9", "committedDate": "2021-10-19 16:02:32 -0400", "message": "Per QA - updated error message"}, {"oid": "66c52fa3588544c4200af85f7778bf5fb7f33e58", "committedDate": "2021-10-22 15:16:15 -0400", "message": "Merge pull request #2785 from IBM/issue-2777"}, {"oid": "2dee31b3b61bb1ac348ed5ab6226f019ad50ca56", "committedDate": "2021-11-08 10:47:49 -0500", "message": "performance improvement for ModelSupport.getElementInfoMap (#2934)"}, {"oid": "b4afb74672b94950e18082826eae23bd5a1f9797", "committedDate": "2021-11-11 14:02:03 -0500", "message": "Per Review"}, {"oid": "634e61f02756e8731c12be1196d876def7236c82", "committedDate": "2022-03-05 15:54:03 -0500", "message": "issue #3385 - avoid reliance on statics for SearchUtil"}, {"oid": "427197ac6c2160f809b1e4e506948e7b4531a176", "committedDate": "2022-03-07 13:16:01 -0500", "message": "issue #3385 - renamed Util to Helper"}, {"oid": "68819abc2f1c859263598931f2cddb61f8987eb0", "committedDate": "2022-05-05 14:40:38 +0100", "message": "issue #3437 distributed schema using shard_key"}, {"oid": "c446a15e0d22b4109347028df86ce80710e54789", "committedDate": "2022-06-20 13:54:23 +0100", "message": "issue #3437 add instanceIdentifier to remote index messages and other review fixes"}, {"oid": "5d4e4e9be0b643cc0051e88ff22660874574262d", "committedDate": "2022-07-01 11:11:12 +0100", "message": "issue #3741 compare citus performance"}, {"oid": "e4f30db890b96be3175c03632905cdbc83f1fdd7", "committedDate": "2022-08-05 15:35:52 -0400", "message": "issue #3812 - java package and groupId rename"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTgwNA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408975804", "body": "Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead", "bodyText": "Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead", "bodyHTML": "<p dir=\"auto\">Maybe explain that this shouldn't be called by consumers and that they should use the ServiceLoader to make their static RegistryResourceProviders available instead</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:29:57Z", "path": "fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java", "diffHunk": "@@ -36,13 +39,23 @@\n     private final List<FHIRRegistryResourceProvider> providers;\n \n     private FHIRRegistry() {\n-        providers = loadProviders();\n+        providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n+    /**\n+     * Register a provider\n+     *\n+     * @param provider\n+     *     the provider to register\n+     */\n+    public void register(FHIRRegistryResourceProvider provider) {", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODY5MA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408988690", "bodyText": "Added Javadoc", "author": "JohnTimm", "createdAt": "2020-04-15T16:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\nindex 75e62e7965..1b2c9d2c34 100644\n--- a/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n+++ b/fhir-registry/src/main/java/com/ibm/fhir/registry/FHIRRegistry.java\n", "chunk": "@@ -42,17 +42,30 @@ public final class FHIRRegistry {\n         providers = new CopyOnWriteArrayList<>(loadProviders());\n     }\n \n+    /**\n+     * Get the singleton instance of this class\n+     *\n+     * <p>This first time that this method is called, all registry resource providers made available through the\n+     * service loader are added to the registry\n+     *\n+     * @return\n+     *     the singleton instance of this class\n+     */\n     public static FHIRRegistry getInstance() {\n         return INSTANCE;\n     }\n \n     /**\n-     * Register a provider\n+     * Add a registry resource provider to the registry\n      *\n+     * @implNote\n+     *     This method should not be called by consumers that make their registry resource providers available through\n+     *     the service loader\n      * @param provider\n-     *     the provider to register\n+     *     the registry resource provider to be added\n      */\n     public void register(FHIRRegistryResourceProvider provider) {\n+        Objects.requireNonNull(provider);\n         providers.add(provider);\n     }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408978859", "body": "Was debating whether INFO level here is appropriate...we try to be very sparse with those.", "bodyText": "Was debating whether INFO level here is appropriate...we try to be very sparse with those.", "bodyHTML": "<p dir=\"auto\">Was debating whether INFO level here is appropriate...we try to be very sparse with those.</p>", "author": "lmsurpre", "createdAt": "2020-04-15T16:34:57Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * (C) Copyright IBM Corp. 2020\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.ibm.fhir.server.registry;\n+\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.getUrl;\n+import static com.ibm.fhir.registry.util.FHIRRegistryUtil.isDefinitionalResource;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+import com.ibm.fhir.core.util.LRUCache;\n+import com.ibm.fhir.model.resource.Resource;\n+import com.ibm.fhir.model.resource.SearchParameter;\n+import com.ibm.fhir.model.resource.StructureDefinition;\n+import com.ibm.fhir.persistence.FHIRPersistence;\n+import com.ibm.fhir.persistence.MultiResourceResult;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContext;\n+import com.ibm.fhir.persistence.context.FHIRPersistenceContextFactory;\n+import com.ibm.fhir.persistence.helper.FHIRTransactionHelper;\n+import com.ibm.fhir.persistence.helper.PersistenceHelper;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceEvent;\n+import com.ibm.fhir.persistence.interceptor.FHIRPersistenceInterceptor;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource;\n+import com.ibm.fhir.registry.resource.FHIRRegistryResource.Version;\n+import com.ibm.fhir.registry.spi.FHIRRegistryResourceProvider;\n+import com.ibm.fhir.search.context.FHIRSearchContext;\n+import com.ibm.fhir.search.util.SearchUtil;\n+\n+public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvider, FHIRPersistenceInterceptor {\n+    public static final Logger log = Logger.getLogger(ServerRegistryResourceProvider.class.getName());\n+\n+    private final PersistenceHelper persistenceHelper;\n+    private final Map<String, List<FHIRRegistryResource>> registryResourceMap = LRUCache.createLRUCache(1024);\n+\n+    public ServerRegistryResourceProvider(PersistenceHelper persistenceHelper) {\n+        try {\n+            this.persistenceHelper = Objects.requireNonNull(persistenceHelper);\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n+    @Override\n+    public FHIRRegistryResource getRegistryResource(Class<? extends Resource> resourceType, String url, String version) {\n+        List<FHIRRegistryResource> registryResources = registryResourceMap.computeIfAbsent(url, k -> computeRegistryResources(resourceType, url));\n+        if (!registryResources.isEmpty()) {\n+            if (version != null) {\n+                Version v = Version.from(version);\n+                for (FHIRRegistryResource resource : registryResources) {\n+                    if (resource.getVersion().equals(v)) {\n+                        return resource;\n+                    }\n+                }\n+                log.warning(\"Unable to find resource: \" + url + \" with version: \" + version);\n+            } else {\n+                return registryResources.get(registryResources.size() - 1);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType) {\n+        try {\n+            return getRegistryResources(resourceType, Collections.emptyMap());\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getRegistryResources() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getProfileResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        queryParameters.put(\"kind\", Collections.singletonList(\"resource\"));\n+        queryParameters.put(\"derivation\", Collections.singletonList(\"constraint\"));\n+        return getRegistryResources(StructureDefinition.class, queryParameters);\n+    }\n+\n+    @Override\n+    public Collection<FHIRRegistryResource> getSearchParameterResources(String type) {\n+        Map<String, List<String>> queryParameters = new HashMap<>();\n+        queryParameters.put(\"type\", Collections.singletonList(type));\n+        return getRegistryResources(SearchParameter.class, queryParameters);\n+    }\n+\n+    @Override\n+    public void afterCreate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterUpdate(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    @Override\n+    public void afterDelete(FHIRPersistenceEvent event) {\n+        updateRegistryResourceMap(event);\n+    }\n+\n+    private List<FHIRRegistryResource> computeRegistryResources(Class<? extends Resource> resourceType, String url) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, Collections.singletonMap(\"url\", Collections.singletonList(url)));\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .sorted()\n+                        .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+        return Collections.emptyList();\n+    }\n+\n+    private Collection<FHIRRegistryResource> getRegistryResources(Class<? extends Resource> resourceType, Map<String, List<String>> queryParameters) {\n+        FHIRTransactionHelper transactionHelper = null;\n+        try {\n+            FHIRPersistence persistence = persistenceHelper.getFHIRPersistenceImplementation();\n+            transactionHelper = new FHIRTransactionHelper(persistence.getTransaction());\n+\n+            transactionHelper.begin();\n+\n+            FHIRSearchContext searchContext = SearchUtil.parseQueryParameters(resourceType, queryParameters);\n+            searchContext.setPageSize(1000);\n+\n+            FHIRPersistenceContext context = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+            MultiResourceResult<Resource> result = persistence.search(context, resourceType);\n+\n+            if (result.isSuccess()) {\n+                List<FHIRRegistryResource> registryResources = new ArrayList<>(searchContext.getTotalCount());\n+                registryResources.addAll(result.getResource().stream()\n+                        .map(ServerRegistryResource::from)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList()));\n+\n+                int pageNumber = 1;\n+                int lastPageNumber = searchContext.getLastPageNumber();\n+                while (pageNumber < lastPageNumber) {\n+                    searchContext.setPageNumber(++pageNumber);\n+                    result = persistence.search(context, resourceType);\n+                    registryResources.addAll(result.getResource().stream()\n+                            .map(ServerRegistryResource::from)\n+                            .filter(Objects::nonNull)\n+                            .collect(Collectors.toList()));\n+                }\n+\n+                transactionHelper.commit();\n+                transactionHelper = null;\n+\n+                return Collections.unmodifiableList(registryResources);\n+            }\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"An error occurred during a search interaction\", e);\n+        } finally {\n+            if (transactionHelper != null) {\n+                transactionHelper.rollback();\n+            }\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n+        if (event == null || event.getFhirResource() == null || !isDefinitionalResource(event.getFhirResource())) {\n+            return;\n+        }\n+        Resource resource = event.getFhirResource();\n+        String url = getUrl(resource);\n+        if (url != null) {\n+            List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n+            if (previous != null && !previous.isEmpty()) {\n+                log.info(\"Removed registry resource(s) with url: \" + url);", "originalCommit": "ef0c6da2031624d19ef1446c7a0ea9af18a2d35a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4NjQ0NA==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408986444", "bodyText": "As discussed on slack, please also make it clear we're just removing them from the cache...not from the registry or the db or something", "author": "lmsurpre", "createdAt": "2020-04-15T16:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MTcwNw==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r408991707", "bodyText": "Changed to fine", "author": "JohnTimm", "createdAt": "2020-04-15T16:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3ODg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9796bd65cc265950463b7ec06fae8f973627c92", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 3b1fe9881e..59d41a5ab8 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.info(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url: \" + url);\n             }\n         }\n     }\n", "next_change": {"commit": "862315bd01fbd4e8533307a528b6b9ee75a1aa74", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 59d41a5ab8..b2c37942a9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n         }\n     }\n", "next_change": null}]}}]}}, {"oid": "a9796bd65cc265950463b7ec06fae8f973627c92", "url": "https://github.com/IBM/FHIR/commit/a9796bd65cc265950463b7ec06fae8f973627c92", "message": "Issue #889 - changes per PR feedback\n\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>", "committedDate": "2020-04-15T16:59:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDExMg==", "url": "https://github.com/IBM/FHIR/pull/928#discussion_r409010112", "body": "```suggestion\r\n                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.fine(\"Removed registry resource(s) with url: \" + url);\n          \n          \n            \n                            log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                log<span class=\"pl-k\">.</span>fine(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Removed registry resource(s) with url<span class=\"x x-first x-last\">: </span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> url);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                log<span class=\"pl-k\">.</span>fine(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Removed registry resource(s) with url<span class=\"x x-first x-last\"> '</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> url<span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">' from the ServerRegistryResourceProvider cache</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lmsurpre", "createdAt": "2020-04-15T17:25:05Z", "path": "fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java", "diffHunk": "@@ -208,7 +208,7 @@ private void updateRegistryResourceMap(FHIRPersistenceEvent event) {\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.info(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url: \" + url);", "originalCommit": "a9796bd65cc265950463b7ec06fae8f973627c92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "862315bd01fbd4e8533307a528b6b9ee75a1aa74", "changed_code": [{"header": "diff --git a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\nindex 59d41a5ab8..b2c37942a9 100644\n--- a/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n+++ b/fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\n", "chunk": "@@ -208,7 +208,7 @@ public class ServerRegistryResourceProvider implements FHIRRegistryResourceProvi\n         if (url != null) {\n             List<FHIRRegistryResource> previous = registryResourceMap.remove(url);\n             if (previous != null && !previous.isEmpty()) {\n-                log.fine(\"Removed registry resource(s) with url: \" + url);\n+                log.fine(\"Removed registry resource(s) with url '\" + url + \"' from the ServerRegistryResourceProvider cache\");\n             }\n         }\n     }\n", "next_change": null}]}}, {"oid": "862315bd01fbd4e8533307a528b6b9ee75a1aa74", "url": "https://github.com/IBM/FHIR/commit/862315bd01fbd4e8533307a528b6b9ee75a1aa74", "message": "Update fhir-server/src/main/java/com/ibm/fhir/server/registry/ServerRegistryResourceProvider.java\r\n\r\nSigned-off-by: John T.E. Timm <johntimm@us.ibm.com>\n\nCo-Authored-By: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-04-15T17:28:33Z", "type": "commit"}]}