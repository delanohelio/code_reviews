{"pr_number": 996, "pr_title": "Improve Tenant-Key Behavior #990", "pr_author": "prb112", "pr_createdAt": "2020-04-28T15:50:20Z", "pr_url": "https://github.com/IBM/FHIR/pull/996", "timeline": [{"oid": "e8ae1039888ff9578cd64c7297ac3740f27040d0", "url": "https://github.com/IBM/FHIR/commit/e8ae1039888ff9578cd64c7297ac3740f27040d0", "message": "Improve Tenant-Key Behavior #990\n\n- Introduced the TenantKeyFileUtil\n\t- Write a generated key to a file\n\t- Read a key from a file used during processing\n- Update the fhir-persistence-schema README.md\n- Update Db2AddTablePartition to cleanup code\n- Update Main.java to check for Multitenant Feature instead of an OR\n\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-04-28T15:49:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0OTg5Mw==", "url": "https://github.com/IBM/FHIR/pull/996#discussion_r417449893", "body": "if we ever add to the MULTITENANT_FEATURE_ENABLED list, we'll need to update this line...but I think its fine for now", "bodyText": "if we ever add to the MULTITENANT_FEATURE_ENABLED list, we'll need to update this line...but I think its fine for now", "bodyHTML": "<p dir=\"auto\">if we ever add to the MULTITENANT_FEATURE_ENABLED list, we'll need to update this line...but I think its fine for now</p>", "author": "lmsurpre", "createdAt": "2020-04-29T16:30:16Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -858,42 +886,103 @@ protected void addTenantKey() {\n             }\n         }\n \n-        logger.info(\"New tenant key: \" + addKeyForTenant + \" [key=\" + tenantKey + \"]\");\n+        if (tenantKeyFileName == null) {\n+            // Generated\n+            logger.info(\"New tenant key: \" + addKeyForTenant + \" [key=\" + tenantKey + \"]\");\n+        } else {\n+            // Loaded from File\n+            logger.info(\n+                    \"New tenant key from file: \" + addKeyForTenant + \" [tenantKeyFileName=\" + tenantKeyFileName + \"]\");\n+            if (!tenantKeyFileUtil.keyFileExists(tenantKeyFileName)) {\n+                tenantKeyFileUtil.writeTenantFile(tenantKeyFileName, tenantKey);\n+            }\n+        }\n \n     }\n \n+    /**\n+     * checks if tenant name and tenant key exists.\n+     * \n+     * @param adapter    the db2 adapter as this is a db2 feature only now\n+     * @param tenantName the tenant's name\n+     * @param tenantKey  tenant key\n+     */\n+    protected void checkIfTenantNameAndTenantKeyExists(Db2Adapter adapter, String tenantName, String tenantKey) {\n+        try (ITransaction tx = TransactionFactory.openTransaction(connectionPool)) {\n+            try {\n+                final String sql =\n+                        \"SELECT t.tenant_status FROM fhir_admin.tenants t WHERE t.tenant_name = ? \"\n+                                + \"AND EXISTS (SELECT 1 FROM fhir_admin.tenant_keys tk WHERE tk.mt_id = t.mt_id \"\n+                                + \"AND tk.tenant_hash = sysibm.hash(tk.tenant_salt || ?, 2));\";\n+                try (PreparedStatement stmt = connectionPool.getConnection().prepareStatement(sql)) {\n+                    stmt.setString(1, tenantName);\n+                    stmt.setString(2, tenantKey);\n+                    if (stmt.execute()) {\n+                        try (ResultSet resultSet = stmt.getResultSet();) {\n+                            if (resultSet.next()) {\n+                                throw new IllegalArgumentException(\"tenantName and tenantKey already exists\");\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalArgumentException(\"Problem checking the results\");\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalArgumentException(\n+                            \"Exception when querying backend to verify tenant key and tenant name\", e);\n+                }\n+            } catch (DataAccessException x) {\n+                // Something went wrong, so mark the transaction as failed\n+                tx.setRollbackOnly();\n+                throw x;\n+            }\n+        }\n+    }\n+\n     /**\n      * Allocate this tenant, creating new partitions if required.\n      */\n     protected void allocateTenant() {\n-        if (dbType == DbType.DERBY || dbType == DbType.POSTGRESQL) {\n+        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType)) {\n             return;\n         }\n+\n         // The key we'll use for this tenant. This key should be used in subsequent\n         // activities related to this tenant, such as setting the tenant context.\n-        final String tenantKey = getRandomKey();\n+        if (tenantKeyFileUtil.keyFileExists(tenantKeyFileName)) {\n+            // Only if the Tenant Key file is provided as a parameter is it not null. \n+            // in  this case we want special behavior.\n+            tenantKey = this.tenantKeyFileUtil.readTenantFile(tenantKeyFileName);\n+        } else {\n+            tenantKey = getRandomKey();\n+        }\n \n         // The salt is used when we hash the tenantKey. We're just using SHA-256 for\n         // the hash here, not multiple rounds of a password hashing algorithm. It's\n         // sufficient in our case because we are using a 32-byte random value as the\n         // key, giving 256 bits of entropy.\n         final String tenantSalt = getRandomKey();\n \n+        Db2Adapter adapter = new Db2Adapter(connectionPool);", "originalCommit": "e8ae1039888ff9578cd64c7297ac3740f27040d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MDU1NA==", "url": "https://github.com/IBM/FHIR/pull/996#discussion_r417460554", "bodyText": "Yes, that's right, we have a smattering of those throughout.", "author": "prb112", "createdAt": "2020-04-29T16:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0OTg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDg2MQ==", "url": "https://github.com/IBM/FHIR/pull/996#discussion_r417450861", "body": "maybe move these below the if-else block so its closer to the try-with-resource?\r\n```suggestion\r\n```", "bodyText": "maybe move these below the if-else block so its closer to the try-with-resource?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Open a new transaction and associate it with our connection pool. Remember\n          \n          \n            \n                    // that we don't support distributed transactions, so all connections within\n          \n          \n            \n                    // this transaction must come from the same pool", "bodyHTML": "<p dir=\"auto\">maybe move these below the if-else block so its closer to the try-with-resource?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Open a new transaction and associate it with our connection pool. Remember</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> that we don't support distributed transactions, so all connections within</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> this transaction must come from the same pool</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lmsurpre", "createdAt": "2020-04-29T16:31:39Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -858,42 +886,103 @@ protected void addTenantKey() {\n             }\n         }\n \n-        logger.info(\"New tenant key: \" + addKeyForTenant + \" [key=\" + tenantKey + \"]\");\n+        if (tenantKeyFileName == null) {\n+            // Generated\n+            logger.info(\"New tenant key: \" + addKeyForTenant + \" [key=\" + tenantKey + \"]\");\n+        } else {\n+            // Loaded from File\n+            logger.info(\n+                    \"New tenant key from file: \" + addKeyForTenant + \" [tenantKeyFileName=\" + tenantKeyFileName + \"]\");\n+            if (!tenantKeyFileUtil.keyFileExists(tenantKeyFileName)) {\n+                tenantKeyFileUtil.writeTenantFile(tenantKeyFileName, tenantKey);\n+            }\n+        }\n \n     }\n \n+    /**\n+     * checks if tenant name and tenant key exists.\n+     * \n+     * @param adapter    the db2 adapter as this is a db2 feature only now\n+     * @param tenantName the tenant's name\n+     * @param tenantKey  tenant key\n+     */\n+    protected void checkIfTenantNameAndTenantKeyExists(Db2Adapter adapter, String tenantName, String tenantKey) {\n+        try (ITransaction tx = TransactionFactory.openTransaction(connectionPool)) {\n+            try {\n+                final String sql =\n+                        \"SELECT t.tenant_status FROM fhir_admin.tenants t WHERE t.tenant_name = ? \"\n+                                + \"AND EXISTS (SELECT 1 FROM fhir_admin.tenant_keys tk WHERE tk.mt_id = t.mt_id \"\n+                                + \"AND tk.tenant_hash = sysibm.hash(tk.tenant_salt || ?, 2));\";\n+                try (PreparedStatement stmt = connectionPool.getConnection().prepareStatement(sql)) {\n+                    stmt.setString(1, tenantName);\n+                    stmt.setString(2, tenantKey);\n+                    if (stmt.execute()) {\n+                        try (ResultSet resultSet = stmt.getResultSet();) {\n+                            if (resultSet.next()) {\n+                                throw new IllegalArgumentException(\"tenantName and tenantKey already exists\");\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalArgumentException(\"Problem checking the results\");\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalArgumentException(\n+                            \"Exception when querying backend to verify tenant key and tenant name\", e);\n+                }\n+            } catch (DataAccessException x) {\n+                // Something went wrong, so mark the transaction as failed\n+                tx.setRollbackOnly();\n+                throw x;\n+            }\n+        }\n+    }\n+\n     /**\n      * Allocate this tenant, creating new partitions if required.\n      */\n     protected void allocateTenant() {\n-        if (dbType == DbType.DERBY || dbType == DbType.POSTGRESQL) {\n+        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType)) {\n             return;\n         }\n+\n         // The key we'll use for this tenant. This key should be used in subsequent\n         // activities related to this tenant, such as setting the tenant context.\n-        final String tenantKey = getRandomKey();\n+        if (tenantKeyFileUtil.keyFileExists(tenantKeyFileName)) {\n+            // Only if the Tenant Key file is provided as a parameter is it not null. \n+            // in  this case we want special behavior.\n+            tenantKey = this.tenantKeyFileUtil.readTenantFile(tenantKeyFileName);\n+        } else {\n+            tenantKey = getRandomKey();\n+        }\n \n         // The salt is used when we hash the tenantKey. We're just using SHA-256 for\n         // the hash here, not multiple rounds of a password hashing algorithm. It's\n         // sufficient in our case because we are using a 32-byte random value as the\n         // key, giving 256 bits of entropy.\n         final String tenantSalt = getRandomKey();\n \n+        Db2Adapter adapter = new Db2Adapter(connectionPool);\n+        checkIfTenantNameAndTenantKeyExists(adapter, tenantName, tenantKey);\n+\n         // Open a new transaction and associate it with our connection pool. Remember\n         // that we don't support distributed transactions, so all connections within\n         // this transaction must come from the same pool", "originalCommit": "e8ae1039888ff9578cd64c7297ac3740f27040d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjE3MA==", "url": "https://github.com/IBM/FHIR/pull/996#discussion_r417462170", "bodyText": "resolving conversation so I can edit in another suggestion", "author": "prb112", "createdAt": "2020-04-29T16:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MDg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MjkyMg==", "url": "https://github.com/IBM/FHIR/pull/996#discussion_r417462922", "body": "```suggestion\r\n\r\n        // Open a new transaction and associate it with our connection pool. Remember\r\n        // that we don't support distributed transactions, so all connections within\r\n        // this transaction must come from the same pool\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                    // Open a new transaction and associate it with our connection pool. Remember\n          \n          \n            \n                    // that we don't support distributed transactions, so all connections within\n          \n          \n            \n                    // this transaction must come from the same pool", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"973\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"973\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"974\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Open a new transaction and associate it with our connection pool. Remember</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"975\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> that we don't support distributed transactions, so all connections within</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"976\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span> this transaction must come from the same pool</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "prb112", "createdAt": "2020-04-29T16:50:13Z", "path": "fhir-persistence-schema/src/main/java/com/ibm/fhir/schema/app/Main.java", "diffHunk": "@@ -858,42 +886,103 @@ protected void addTenantKey() {\n             }\n         }\n \n-        logger.info(\"New tenant key: \" + addKeyForTenant + \" [key=\" + tenantKey + \"]\");\n+        if (tenantKeyFileName == null) {\n+            // Generated\n+            logger.info(\"New tenant key: \" + addKeyForTenant + \" [key=\" + tenantKey + \"]\");\n+        } else {\n+            // Loaded from File\n+            logger.info(\n+                    \"New tenant key from file: \" + addKeyForTenant + \" [tenantKeyFileName=\" + tenantKeyFileName + \"]\");\n+            if (!tenantKeyFileUtil.keyFileExists(tenantKeyFileName)) {\n+                tenantKeyFileUtil.writeTenantFile(tenantKeyFileName, tenantKey);\n+            }\n+        }\n \n     }\n \n+    /**\n+     * checks if tenant name and tenant key exists.\n+     * \n+     * @param adapter    the db2 adapter as this is a db2 feature only now\n+     * @param tenantName the tenant's name\n+     * @param tenantKey  tenant key\n+     */\n+    protected void checkIfTenantNameAndTenantKeyExists(Db2Adapter adapter, String tenantName, String tenantKey) {\n+        try (ITransaction tx = TransactionFactory.openTransaction(connectionPool)) {\n+            try {\n+                final String sql =\n+                        \"SELECT t.tenant_status FROM fhir_admin.tenants t WHERE t.tenant_name = ? \"\n+                                + \"AND EXISTS (SELECT 1 FROM fhir_admin.tenant_keys tk WHERE tk.mt_id = t.mt_id \"\n+                                + \"AND tk.tenant_hash = sysibm.hash(tk.tenant_salt || ?, 2));\";\n+                try (PreparedStatement stmt = connectionPool.getConnection().prepareStatement(sql)) {\n+                    stmt.setString(1, tenantName);\n+                    stmt.setString(2, tenantKey);\n+                    if (stmt.execute()) {\n+                        try (ResultSet resultSet = stmt.getResultSet();) {\n+                            if (resultSet.next()) {\n+                                throw new IllegalArgumentException(\"tenantName and tenantKey already exists\");\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalArgumentException(\"Problem checking the results\");\n+                    }\n+                } catch (SQLException e) {\n+                    throw new IllegalArgumentException(\n+                            \"Exception when querying backend to verify tenant key and tenant name\", e);\n+                }\n+            } catch (DataAccessException x) {\n+                // Something went wrong, so mark the transaction as failed\n+                tx.setRollbackOnly();\n+                throw x;\n+            }\n+        }\n+    }\n+\n     /**\n      * Allocate this tenant, creating new partitions if required.\n      */\n     protected void allocateTenant() {\n-        if (dbType == DbType.DERBY || dbType == DbType.POSTGRESQL) {\n+        if (!MULTITENANT_FEATURE_ENABLED.contains(dbType)) {\n             return;\n         }\n+\n         // The key we'll use for this tenant. This key should be used in subsequent\n         // activities related to this tenant, such as setting the tenant context.\n-        final String tenantKey = getRandomKey();\n+        if (tenantKeyFileUtil.keyFileExists(tenantKeyFileName)) {\n+            // Only if the Tenant Key file is provided as a parameter is it not null. \n+            // in  this case we want special behavior.\n+            tenantKey = this.tenantKeyFileUtil.readTenantFile(tenantKeyFileName);\n+        } else {\n+            tenantKey = getRandomKey();\n+        }\n \n         // The salt is used when we hash the tenantKey. We're just using SHA-256 for\n         // the hash here, not multiple rounds of a password hashing algorithm. It's\n         // sufficient in our case because we are using a 32-byte random value as the\n         // key, giving 256 bits of entropy.\n         final String tenantSalt = getRandomKey();\n \n+        Db2Adapter adapter = new Db2Adapter(connectionPool);\n+        checkIfTenantNameAndTenantKeyExists(adapter, tenantName, tenantKey);\n+\n         // Open a new transaction and associate it with our connection pool. Remember\n         // that we don't support distributed transactions, so all connections within\n         // this transaction must come from the same pool\n-        Db2Adapter adapter = new Db2Adapter(connectionPool);\n-        logger.info(\"Allocating new tenant: \" + tenantName + \" [key=\" + tenantKey + \"]\");\n+        if (tenantKeyFileName == null) {\n+            logger.info(\"Allocating new tenant: \" + tenantName + \" [key=\" + tenantKey + \"]\");\n+        } else {\n+            logger.info(\"Allocating new tenant: \" + tenantName + \" [tenantKeyFileName=\" + tenantKeyFileName + \"]\");\n+        }\n+", "originalCommit": "e8ae1039888ff9578cd64c7297ac3740f27040d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b116f0f006b9ef3c5c571f357aac90b0db21e19d", "url": "https://github.com/IBM/FHIR/commit/b116f0f006b9ef3c5c571f357aac90b0db21e19d", "message": "Apply suggestions from code review\r\n\r\nSigned-off-by: Paul Bastide <pbastide@us.ibm.com>\n\nCo-Authored-By: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-04-29T16:51:05Z", "type": "commit"}]}