{"pr_number": 1481, "pr_title": "Issue #1404: implemented tests for ClusterApiService", "pr_author": "YouKofan", "pr_createdAt": "2020-10-08T14:12:38Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1481", "timeline": [{"oid": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "url": "https://github.com/epam/cloud-pipeline/commit/44f1669d54f99fd04970a8be0eabc30b328cabe1", "message": "Issue #1404: implemented tests for ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-12T02:02:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NzEwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504657109", "body": "Could you please add access modifier?", "bodyText": "Could you please add access modifier?", "bodyHTML": "<p dir=\"auto\">Could you please add access modifier?</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:01:19Z", "path": "api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "diffHunk": "@@ -144,6 +146,12 @@\n     @MockBean\n     protected CloudRegionManager mockCloudRegionManager;\n \n+    @MockBean\n+    protected NodeDiskManager mockNodeDiskManager;\n+\n+    @MockBean\n+    UsageMonitoringManager mockUsageMonitoringManager;", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\nindex 4585689af..befdb89c7 100644\n--- a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n", "chunk": "@@ -150,7 +151,7 @@ public class AclTestConfiguration {\n     protected NodeDiskManager mockNodeDiskManager;\n \n     @MockBean\n-    UsageMonitoringManager mockUsageMonitoringManager;\n+    protected UsageMonitoringManager mockUsageMonitoringManager;\n \n     @MockBean\n     protected EntityEventServiceManager entityEventServiceManager;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\nindex befdb89c7..9a8ad2391 100644\n--- a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n", "chunk": "@@ -147,12 +145,6 @@ public class AclTestConfiguration {\n     @MockBean\n     protected CloudRegionManager mockCloudRegionManager;\n \n-    @MockBean\n-    protected NodeDiskManager mockNodeDiskManager;\n-\n-    @MockBean\n-    protected UsageMonitoringManager mockUsageMonitoringManager;\n-\n     @MockBean\n     protected EntityEventServiceManager entityEventServiceManager;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\nindex 9a8ad2391..425b0840f 100644\n--- a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n", "chunk": "@@ -145,6 +147,12 @@ public class AclTestConfiguration {\n     @MockBean\n     protected CloudRegionManager mockCloudRegionManager;\n \n+    @MockBean\n+    protected NodeDiskManager mockNodeDiskManager;\n+\n+    @MockBean\n+    UsageMonitoringManager mockUsageMonitoringManager;\n+\n     @MockBean\n     protected EntityEventServiceManager entityEventServiceManager;\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\nindex 425b0840f..befdb89c7 100644\n--- a/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n", "chunk": "@@ -151,7 +151,7 @@ public class AclTestConfiguration {\n     protected NodeDiskManager mockNodeDiskManager;\n \n     @MockBean\n-    UsageMonitoringManager mockUsageMonitoringManager;\n+    protected UsageMonitoringManager mockUsageMonitoringManager;\n \n     @MockBean\n     protected EntityEventServiceManager entityEventServiceManager;\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1NzUyOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504657528", "body": "Cleanup please", "bodyText": "Cleanup please", "bodyHTML": "<p dir=\"auto\">Cleanup please</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:01:54Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -322,9 +438,9 @@ protected DataStorageManager mockDataStorageManager() {\n     }\n \n     @Bean\n-    protected FolderCrudManager mockCrudManager() {\n+    protected FolderCrudManager mockFolderCrudManager() {\n         return Mockito.mock(FolderCrudManager.class);\n-    }\n+    } /////", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex bf3f8f90d..7a768a694 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -440,7 +284,7 @@ public class AclTestBeans {\n     @Bean\n     protected FolderCrudManager mockFolderCrudManager() {\n         return Mockito.mock(FolderCrudManager.class);\n-    } /////\n+    }\n \n     @Bean\n     public GrantPermissionManager grantPermissionManager() {\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex 7a768a694..161335e58 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -282,9 +414,9 @@ public class AclTestBeans {\n     }\n \n     @Bean\n-    protected FolderCrudManager mockFolderCrudManager() {\n+    protected FolderCrudManager folderCrudManager() {\n         return Mockito.mock(FolderCrudManager.class);\n-    }\n+    } /////\n \n     @Bean\n     public GrantPermissionManager grantPermissionManager() {\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex 161335e58..bf3f8f90d 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -414,7 +438,7 @@ public class AclTestBeans {\n     }\n \n     @Bean\n-    protected FolderCrudManager folderCrudManager() {\n+    protected FolderCrudManager mockFolderCrudManager() {\n         return Mockito.mock(FolderCrudManager.class);\n     } /////\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex bf3f8f90d..cd8c08366 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -440,7 +444,7 @@ public class AclTestBeans {\n     @Bean\n     protected FolderCrudManager mockFolderCrudManager() {\n         return Mockito.mock(FolderCrudManager.class);\n-    } /////\n+    }\n \n     @Bean\n     public GrantPermissionManager grantPermissionManager() {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY1Nzg0Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504657846", "body": "Why we need such import?", "bodyText": "Why we need such import?", "bodyHTML": "<p dir=\"auto\">Why we need such import?</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:02:20Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -39,7 +41,11 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 76e5975c4..3463f89c9 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -41,11 +39,7 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@Import({ContextualPreferenceHandler.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n-        \"com.epam.pipeline.security.run\",\n-        \"com.epam.pipeline.manager.security\",\n-        \"com.epam.pipeline.manager.user\"})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 3463f89c9..76e5975c4 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,7 +41,11 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n+        \"com.epam.pipeline.security.run\",\n+        \"com.epam.pipeline.manager.security\",\n+        \"com.epam.pipeline.manager.user\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 76e5975c4..001c030b7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -41,11 +39,10 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@Import({ContextualPreferenceHandler.class})\n @ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n         \"com.epam.pipeline.security.run\",\n         \"com.epam.pipeline.manager.security\",\n-        \"com.epam.pipeline.manager.user\"})\n+        })\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 001c030b7..3463f89c9 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,10 +39,7 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n-        \"com.epam.pipeline.security.run\",\n-        \"com.epam.pipeline.manager.security\",\n-        })\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2NDQ2MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504664461", "body": "Why we need `UserManager` real bean?", "bodyText": "Why we need UserManager real bean?", "bodyHTML": "<p dir=\"auto\">Why we need <code>UserManager</code> real bean?</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:11:42Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -39,7 +41,11 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n+        \"com.epam.pipeline.security.run\",\n+        \"com.epam.pipeline.manager.security\",\n+        \"com.epam.pipeline.manager.user\"})", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 76e5975c4..3463f89c9 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -41,11 +39,7 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@Import({ContextualPreferenceHandler.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n-        \"com.epam.pipeline.security.run\",\n-        \"com.epam.pipeline.manager.security\",\n-        \"com.epam.pipeline.manager.user\"})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 3463f89c9..76e5975c4 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,7 +41,11 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n+        \"com.epam.pipeline.security.run\",\n+        \"com.epam.pipeline.manager.security\",\n+        \"com.epam.pipeline.manager.user\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 76e5975c4..001c030b7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -41,11 +39,10 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@Import({ContextualPreferenceHandler.class})\n @ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n         \"com.epam.pipeline.security.run\",\n         \"com.epam.pipeline.manager.security\",\n-        \"com.epam.pipeline.manager.user\"})\n+        })\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 001c030b7..3463f89c9 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,10 +39,7 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n-        \"com.epam.pipeline.security.run\",\n-        \"com.epam.pipeline.manager.security\",\n-        })\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODA0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504668047", "body": "Let's remove empty lines between fields.", "bodyText": "Let's remove empty lines between fields.", "bodyHTML": "<p dir=\"auto\">Let's remove empty lines between fields.</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:16:41Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NDA0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504684042", "bodyText": "Also, cold you please place fields autowired fields declaration?", "author": "ekazachkova", "createdAt": "2020-10-14T13:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2ODA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,184 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-\n-        twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2OTU4OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504669588", "body": "Let's create a new build method in creators package. This  method may accept `id`, `name`, `owner` arguments.", "bodyText": "Let's create a new build method in creators package. This  method may accept id, name, owner arguments.", "bodyHTML": "<p dir=\"auto\">Let's create a new build method in creators package. This  method may accept <code>id</code>, <code>name</code>, <code>owner</code> arguments.</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:18:57Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n+\n+        pipelineRun.setId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER);\n+\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,184 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-\n-        twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NTIxOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504675219", "body": "Let's not confuse packages: `PipelineRun` is not in cluster package. We need to create a new package/class for `PipelineRun` object creating methods.", "bodyText": "Let's not confuse packages: PipelineRun is not in cluster package. We need to create a new package/class for PipelineRun object creating methods.", "bodyHTML": "<p dir=\"auto\">Let's not confuse packages: <code>PipelineRun</code> is not in cluster package. We need to create a new package/class for <code>PipelineRun</code> object creating methods.</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:26:37Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -86,4 +99,20 @@ public static AllowedInstanceAndPriceTypes getDefaultAllowedInstanceAndPriceType\n     public static NodeDisk getDefaultNodeDisk() {\n         return new NodeDisk(ID, TEST_STRING, LDT);\n     }\n+\n+    public static PipelineRun getPipelineRun() {", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NTc3Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504675776", "bodyText": "The same for creators below", "author": "ekazachkova", "createdAt": "2020-10-14T13:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 0989a10a6..48b9586b7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -100,19 +103,11 @@ public final class NodeCreatorUtils {\n         return new NodeDisk(ID, TEST_STRING, LDT);\n     }\n \n-    public static PipelineRun getPipelineRun() {\n-        return new PipelineRun();\n-    }\n-\n-    public static ContextualPreference getContextualPreference() {\n-        return new ContextualPreference(\"name\", \"1\");\n-    }\n-\n-    public static ContextualPreferenceExternalResource getContextualPreferenceExternalResource() {\n-        return new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n+    public static List<NodeDisk> getNodeDiskList() {\n+        return Collections.singletonList(getDefaultNodeDisk());\n     }\n \n-    public static MonitoringStats getMonitoringStats() {\n-        return new MonitoringStats();\n+    public static List<InstanceType> getInstanceTypeList() {\n+        return Collections.singletonList(getDefaultInstanceType());\n     }\n }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 48b9586b7..b4bab9d13 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -102,12 +132,4 @@ public final class NodeCreatorUtils {\n     public static NodeDisk getDefaultNodeDisk() {\n         return new NodeDisk(ID, TEST_STRING, LDT);\n     }\n-\n-    public static List<NodeDisk> getNodeDiskList() {\n-        return Collections.singletonList(getDefaultNodeDisk());\n-    }\n-\n-    public static List<InstanceType> getInstanceTypeList() {\n-        return Collections.singletonList(getDefaultInstanceType());\n-    }\n }\n", "next_change": {"commit": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex b4bab9d13..33906bc4d 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -132,4 +150,12 @@ public final class NodeCreatorUtils {\n     public static NodeDisk getDefaultNodeDisk() {\n         return new NodeDisk(ID, TEST_STRING, LDT);\n     }\n+\n+    public static List<NodeDisk> getNodeDiskList() {\n+        return Collections.singletonList(getDefaultNodeDisk());\n+    }\n+\n+    public static List<InstanceType> getInstanceTypeList() {\n+        return Collections.singletonList(getDefaultInstanceType());\n+    }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3Njg4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504676882", "body": " Let's  inline test class field initiliazations and get rid of `setUp` method.", "bodyText": "Let's  inline test class field initiliazations and get rid of setUp method.", "bodyHTML": "<p dir=\"auto\">Let's  inline test class field initiliazations and get rid of <code>setUp</code> method.</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:28:58Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,184 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-\n-        twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NzA3Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504677073", "body": "Do not forget final please", "bodyText": "Do not forget final please", "bodyHTML": "<p dir=\"auto\">Do not forget final please</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:29:16Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n+\n+        pipelineRun.setId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER);\n+\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n+\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(OWNER_USER);\n+        nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n+\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n+\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+\n+        List<NodeInstance> nodes = clusterApiService.getNodes();", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,184 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-\n-        twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3ODY5Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504678693", "body": "Could we use `contains` method here?", "bodyText": "Could we use contains method here?", "bodyHTML": "<p dir=\"auto\">Could we use <code>contains</code> method here?</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:31:27Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;\n+\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n+\n+    @Before\n+    public void setUp() {\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n+\n+        pipelineRun.setId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER);\n+\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n+\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(OWNER_USER);\n+        nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n+\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n+\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1);", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,184 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-\n-        twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3OTMwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r504679302", "body": "Looks like this field was not initialized", "bodyText": "Looks like this field was not initialized", "bodyHTML": "<p dir=\"auto\">Looks like this field was not initialized</p>", "author": "ekazachkova", "createdAt": "2020-10-14T13:32:15Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+\n+    private InputStream inputStream;", "originalCommit": "44f1669d54f99fd04970a8be0eabc30b328cabe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,184 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-\n-        twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n-\n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n-\n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NzEzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506247134", "body": "Could you please add final to fields here and in other places?", "bodyText": "Could you please add final to fields here and in other places?", "bodyHTML": "<p dir=\"auto\">Could you please add final to fields here and in other places?</p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:01:18Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -51,6 +53,24 @@ public static NodeInstance getDefaultNodeInstance() {\n         return new NodeInstance();\n     }\n \n+    public static NodeInstance getNodeInstanceWithPermission() {\n+        NodeInstance nodeInstance = new NodeInstance();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 2a204dc34..48b9586b7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -53,20 +50,11 @@ public final class NodeCreatorUtils {\n         return new NodeInstance();\n     }\n \n-    public static NodeInstance getNodeInstanceWithPermission() {\n-        NodeInstance nodeInstance = new NodeInstance();\n-        nodeInstance.setId(ID);\n-        nodeInstance.setOwner(\"OWNER\");\n-        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRunWithPermission());\n-        nodeInstance.setName(TEST_STRING);\n-        return nodeInstance;\n-    }\n-\n-    public static NodeInstance getNodeInstanceWithoutPermission() {\n-        NodeInstance nodeInstance = new NodeInstance();\n-        nodeInstance.setId(ID_2);\n-        nodeInstance.setOwner(TEST_STRING);\n-        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRunWithoutPermission());\n+    public static NodeInstance getNodeInstance(Long id, String owner) {\n+        final NodeInstance nodeInstance = new NodeInstance();\n+        nodeInstance.setId(id);\n+        nodeInstance.setOwner(owner);\n+        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRun(id, owner));\n         nodeInstance.setName(TEST_STRING);\n         return nodeInstance;\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 48b9586b7..b4bab9d13 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -47,43 +69,51 @@ public final class NodeCreatorUtils {\n     }\n \n     public static NodeInstance getDefaultNodeInstance() {\n-        return new NodeInstance();\n-    }\n-\n-    public static NodeInstance getNodeInstance(Long id, String owner) {\n-        final NodeInstance nodeInstance = new NodeInstance();\n-        nodeInstance.setId(id);\n-        nodeInstance.setOwner(owner);\n-        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRun(id, owner));\n+        final List<NodeInstanceAddress> nodeInstanceAddresses = Collections.singletonList(new NodeInstanceAddress());\n+        final Map<String, String> testMap = Collections.singletonMap(TEST_STRING, TEST_STRING);\n+        NodeInstance nodeInstance = new NodeInstance();\n+        nodeInstance.setClusterName(TEST_STRING);\n         nodeInstance.setName(TEST_STRING);\n+        nodeInstance.setCreationTimestamp(TEST_STRING);\n+        nodeInstance.setRegion(TEST_STRING);\n+        nodeInstance.setRunId(TEST_STRING);\n+        nodeInstance.setAddresses(nodeInstanceAddresses);\n+        nodeInstance.setAllocatable(testMap);\n+        nodeInstance.setCapacity(testMap);\n+        nodeInstance.setLabels(testMap);\n         return nodeInstance;\n     }\n \n     public static InstanceType getDefaultInstanceType() {\n-        return InstanceType.builder().name(TEST_STRING).build();\n+        return InstanceType.builder()\n+                .name(TEST_STRING)\n+                .gpu(TEST_INT)\n+                .instanceFamily(TEST_STRING)\n+                .memory(TEST_INT)\n+                .memoryUnit(TEST_STRING)\n+                .operatingSystem(TEST_STRING)\n+                .regionId(ID)\n+                .sku(TEST_STRING)\n+                .termType(TEST_STRING)\n+                .vCPU(TEST_INT)\n+                .build();\n     }\n \n     public static Node getDefaultNode() {\n         final ObjectMeta objectMeta = new ObjectMeta();\n+        objectMeta.setUid(UUID);\n         return new Node(\n                 TEST_STRING, TEST_STRING, objectMeta, new NodeSpec(), new NodeStatus());\n     }\n \n-    public static Node getEmptyNode() {\n-        return new Node();\n-    }\n-\n     public static MasterNode getDefaultMasterNode() {\n         return MasterNode.fromNode(getDefaultNode(), TEST_STRING);\n     }\n \n-    public static MasterNode getMasterNodeWithEmptyNode() {\n-        return MasterNode.fromNode(getEmptyNode(), TEST_STRING);\n-    }\n-\n     public static FilterNodesVO getDefaultFilterNodesVO() {\n         final FilterNodesVO filterNodesVO = new FilterNodesVO();\n         filterNodesVO.setAddress(TEST_STRING);\n+        filterNodesVO.setRunId(TEST_STRING);\n         return filterNodesVO;\n     }\n \n", "next_change": {"commit": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex b4bab9d13..33906bc4d 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -106,10 +116,18 @@ public final class NodeCreatorUtils {\n                 TEST_STRING, TEST_STRING, objectMeta, new NodeSpec(), new NodeStatus());\n     }\n \n+    public static Node getEmptyNode() {\n+        return new Node();\n+    }\n+\n     public static MasterNode getDefaultMasterNode() {\n         return MasterNode.fromNode(getDefaultNode(), TEST_STRING);\n     }\n \n+    public static MasterNode getMasterNodeWithEmptyNode() {\n+        return MasterNode.fromNode(getEmptyNode(), TEST_STRING);\n+    }\n+\n     public static FilterNodesVO getDefaultFilterNodesVO() {\n         final FilterNodesVO filterNodesVO = new FilterNodesVO();\n         filterNodesVO.setAddress(TEST_STRING);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTkyNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506261927", "body": "The `private` methods shell be after all `public` methods", "bodyText": "The private methods shell be after all public methods", "bodyHTML": "<p dir=\"auto\">The <code>private</code> methods shell be after all <code>public</code> methods</p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:20:35Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,128 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NDU0NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506274545", "body": "Could we use here\r\n```\r\nassertThat(resultStatsList).hasSize(1).contains(monitoringStats);\r\n```\r\nAnd in other such places too.", "bodyText": "Could we use here\nassertThat(resultStatsList).hasSize(1).contains(monitoringStats);\n\nAnd in other such places too.", "bodyHTML": "<p dir=\"auto\">Could we use here</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(resultStatsList).hasSize(1).contains(monitoringStats);\"><pre><code>assertThat(resultStatsList).hasSize(1).contains(monitoringStats);\n</code></pre></div>\n<p dir=\"auto\">And in other such places too.</p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:34:48Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        final List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -297,173 +243,155 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     public void shouldTerminateNodeForAdmin() {\n         doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n \n-        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(resultNode).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n \n-        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n \n-        assertThat(resultNode).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n+    @Test\n+    @WithMockUser\n     public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n \n-        clusterApiService.terminateNode(nodeInstance.getName());\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnStatsForNodeForAdmin() {\n-        final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n         final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n \n-        final List<MonitoringStats> resultStatsList =\n+        final List<MonitoringStats> returnedStatsList =\n                 clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n \n-        assertThat(resultStatsList.size()).isEqualTo(1);\n-        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnStatsWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-\n-        final List<MonitoringStats> resultStatsList =\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final List<MonitoringStats> returnedStatsList =\n                 clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n \n-        assertThat(resultStatsList.size()).isEqualTo(1);\n-        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n+    @Test\n+    @WithMockUser\n     public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n         doReturn(statsList).when(mockUsageMonitoringManager)\n                 .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n \n-        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager)\n-                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n \n-        final InputStream resultInputStream =\n-                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n \n-        assertThat(resultInputStream).isEqualTo(inputStream);\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(inputStream).when(mockUsageMonitoringManager)\n-                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n \n-        final InputStream resultInputStream =\n-                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n \n-        assertThat(resultInputStream).isEqualTo(inputStream);\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n+    @Test\n+    @WithMockUser\n     public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager)\n-                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n \n-        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n-                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnInstanceTypes() {\n         doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n \n-        final List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnToolInstanceTypes() {\n         doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n \n-        final List<InstanceType> resultInstanceTypesList = clusterApiService\n-                .getAllowedToolInstanceTypes(1L, true);\n-\n-        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnAllowedInstanceAndPriceTypes() {\n         final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n                 NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n         doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n                 .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n \n-        final AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n+                .isEqualTo(allowedInstanceAndPriceTypes);\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnMasterNodes() {\n         final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n         doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n \n-        final List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n-\n-        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NTY5Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506285696", "body": "It seems that we can just use `basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"}`", "bodyText": "It seems that we can just use basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"}", "bodyHTML": "<p dir=\"auto\">It seems that we can just use <code>basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"}</code></p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:48:52Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java", "diffHunk": "@@ -39,7 +39,10 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 001c030b7..3463f89c9 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,10 +39,7 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n-        \"com.epam.pipeline.security.run\",\n-        \"com.epam.pipeline.manager.security\",\n-        })\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 3463f89c9..76e5975c4 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,7 +41,11 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n+@Import({ContextualPreferenceHandler.class})\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n+        \"com.epam.pipeline.security.run\",\n+        \"com.epam.pipeline.manager.security\",\n+        \"com.epam.pipeline.manager.user\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 76e5975c4..001c030b7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -41,11 +39,10 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@Import({ContextualPreferenceHandler.class})\n @ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n         \"com.epam.pipeline.security.run\",\n         \"com.epam.pipeline.manager.security\",\n-        \"com.epam.pipeline.manager.user\"})\n+        })\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\nindex 001c030b7..3463f89c9 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestConfiguration.java\n", "chunk": "@@ -39,10 +39,7 @@ import java.lang.annotation.Target;\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @ContextConfiguration(classes = {AclTestBeans.class, AclSecurityConfiguration.class})\n-@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\",\n-        \"com.epam.pipeline.security.run\",\n-        \"com.epam.pipeline.manager.security\",\n-        })\n+@ComponentScan(basePackages = {\"com.epam.pipeline.security.acl\", \"com.epam.pipeline.manager.security\"})\n @EnableAspectJAutoProxy(proxyTargetClass = true)\n @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n @TestPropertySource(value = {\"classpath:test-application.properties\"})\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4ODE4Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506288186", "body": "Could you please rename this class to `ClusterCreatorUtils`? This class should consist of creators for entities from `cluster` package.", "bodyText": "Could you please rename this class to ClusterCreatorUtils? This class should consist of creators for entities from cluster package.", "bodyHTML": "<p dir=\"auto\">Could you please rename this class to <code>ClusterCreatorUtils</code>? This class should consist of creators for entities from <code>cluster</code> package.</p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:51:53Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -23,6 +23,7 @@\n import com.epam.pipeline.entity.cluster.MasterNode;\n import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 2a204dc34..b4bab9d13 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -16,6 +16,7 @@\n \n package com.epam.pipeline.test.creator.cluster;\n \n+import com.epam.pipeline.controller.Result;\n import com.epam.pipeline.controller.vo.FilterNodesVO;\n import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n", "next_change": null}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 2a204dc34..b4bab9d13 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -23,7 +24,9 @@ import com.epam.pipeline.entity.cluster.InstanceType;\n import com.epam.pipeline.entity.cluster.MasterNode;\n import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n-import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import com.epam.pipeline.entity.cluster.NodeInstanceAddress;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import io.fabric8.kubernetes.api.model.Node;\n import io.fabric8.kubernetes.api.model.NodeSpec;\n import io.fabric8.kubernetes.api.model.NodeStatus;\n", "next_change": {"commit": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex b4bab9d13..33906bc4d 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -26,6 +26,7 @@ import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n import com.epam.pipeline.entity.cluster.NodeInstanceAddress;\n import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n import com.fasterxml.jackson.core.type.TypeReference;\n import io.fabric8.kubernetes.api.model.Node;\n import io.fabric8.kubernetes.api.model.NodeSpec;\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4ODkyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506288923", "body": "Could you move this method to `ClusterCreatorUtils`?", "bodyText": "Could you move this method to ClusterCreatorUtils?", "bodyHTML": "<p dir=\"auto\">Could you move this method to <code>ClusterCreatorUtils</code>?</p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:52:43Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java", "diffHunk": "@@ -55,4 +56,8 @@ public static ContextualPreferenceVO getContextualPreferenceVO() {\n                 TEST_STRING, TEST_STRING, PREFERENCE_TYPE, getCPExternalResource()\n         );\n     }\n+\n+    public static MonitoringStats getMonitoringStats() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\nindex 1a5771a79..106d37f95 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n", "chunk": "@@ -56,8 +62,4 @@ public final class ContextualPreferenceCreatorUtils {\n                 TEST_STRING, TEST_STRING, PREFERENCE_TYPE, getCPExternalResource()\n         );\n     }\n-\n-    public static MonitoringStats getMonitoringStats() {\n-        return new MonitoringStats();\n-    }\n }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\nindex 106d37f95..58045e714 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n", "chunk": "@@ -59,7 +59,10 @@ public final class ContextualPreferenceCreatorUtils {\n \n     public static ContextualPreferenceVO getContextualPreferenceVO() {\n         return new ContextualPreferenceVO(\n-                TEST_STRING, TEST_STRING, PREFERENCE_TYPE, getCPExternalResource()\n-        );\n+                TEST_STRING, TEST_STRING, PREFERENCE_TYPE, getCPExternalResource());\n+    }\n+\n+    public static List<ContextualPreference> getContextualPreferenceList() {\n+        return Collections.singletonList(getContextualPreference());\n     }\n }\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\nindex 58045e714..d03d11819 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n", "chunk": "@@ -65,4 +66,8 @@ public final class ContextualPreferenceCreatorUtils {\n     public static List<ContextualPreference> getContextualPreferenceList() {\n         return Collections.singletonList(getContextualPreference());\n     }\n+\n+    public static MonitoringStats getMonitoringStats() {\n+        return new MonitoringStats();\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\nindex d03d11819..58045e714 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/contextual/ContextualPreferenceCreatorUtils.java\n", "chunk": "@@ -66,8 +65,4 @@ public final class ContextualPreferenceCreatorUtils {\n     public static List<ContextualPreference> getContextualPreferenceList() {\n         return Collections.singletonList(getContextualPreference());\n     }\n-\n-    public static MonitoringStats getMonitoringStats() {\n-        return new MonitoringStats();\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5MTc4MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506291780", "body": "It is absolutely not clear what is meant `permission`", "bodyText": "It is absolutely not clear what is meant permission", "bodyHTML": "<p dir=\"auto\">It is absolutely not clear what is meant <code>permission</code></p>", "author": "ekazachkova", "createdAt": "2020-10-16T10:56:12Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nindex 4d0cface3..3ff864612 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n", "chunk": "@@ -18,23 +18,14 @@ package com.epam.pipeline.test.creator.pipeline;\n \n import com.epam.pipeline.entity.pipeline.PipelineRun;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n \n-public final class PipelineCreatorUtils {\n+public class PipelineCreatorUtils {\n \n-    public static PipelineRun getPipelineRunWithPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID);\n-        pipelineRun.setOwner(\"SIMPLE_USER\");\n-        return pipelineRun;\n-    }\n-\n-    public static PipelineRun getPipelineRunWithoutPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID_2);\n-        pipelineRun.setOwner(TEST_STRING);\n+    public static PipelineRun getPipelineRun(Long id, String owner) {\n+        final PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(id);\n+        pipelineRun.setOwner(owner);\n         pipelineRun.setName(TEST_STRING);\n         return pipelineRun;\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\ndeleted file mode 100644\nindex 3ff864612..000000000\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.epam.pipeline.test.creator.pipeline;\n-\n-import com.epam.pipeline.entity.pipeline.PipelineRun;\n-\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-\n-public class PipelineCreatorUtils {\n-\n-    public static PipelineRun getPipelineRun(Long id, String owner) {\n-        final PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(id);\n-        pipelineRun.setOwner(owner);\n-        pipelineRun.setName(TEST_STRING);\n-        return pipelineRun;\n-    }\n-}\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nnew file mode 100644\nindex 000000000..a75fddf65\n--- /dev/null\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n", "chunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.*;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(ID);\n+        pipelineRun.setOwner(\"SIMPLE_USER\");\n+        return pipelineRun;\n+    }\n+\n+    public static PipelineRun getPipelineRunWithoutPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(ID_2);\n+        pipelineRun.setOwner(TEST_STRING);\n+        pipelineRun.setName(TEST_STRING);\n+        return pipelineRun;\n+    }\n+}\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\nsimilarity index 62%\nrename from api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nrename to api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\nindex a75fddf65..e3b310b1f 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\n", "chunk": "@@ -14,26 +14,24 @@\n  * limitations under the License.\n  */\n \n-package com.epam.pipeline.test.creator.pipeline;\n+package com.epam.pipeline.test.creator.cluster;\n \n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.*;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n \n-public final class PipelineCreatorUtils {\n+public final class ClusterCreatorUtils {\n \n-    public static PipelineRun getPipelineRunWithPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID);\n-        pipelineRun.setOwner(\"SIMPLE_USER\");\n+    public static PipelineRun getPipelineRun(Long id, String owner) {\n+        final PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(id);\n+        pipelineRun.setOwner(owner);\n+        pipelineRun.setName(TEST_STRING);\n         return pipelineRun;\n     }\n \n-    public static PipelineRun getPipelineRunWithoutPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID_2);\n-        pipelineRun.setOwner(TEST_STRING);\n-        pipelineRun.setName(TEST_STRING);\n-        return pipelineRun;\n+    public static MonitoringStats getMonitoringStats() {\n+        return new MonitoringStats();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5NzE2OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506297168", "body": "Let's avoid some test case specific naming in such classes. For example, for current situation we need only one method  for this class - `getPipelineRun` that will return `PipelineRun` object and accepts all required argument: id, name, owner... You may take the `ObjectCreatorUtils` class as a basis.", "bodyText": "Let's avoid some test case specific naming in such classes. For example, for current situation we need only one method  for this class - getPipelineRun that will return PipelineRun object and accepts all required argument: id, name, owner... You may take the ObjectCreatorUtils class as a basis.", "bodyHTML": "<p dir=\"auto\">Let's avoid some test case specific naming in such classes. For example, for current situation we need only one method  for this class - <code>getPipelineRun</code> that will return <code>PipelineRun</code> object and accepts all required argument: id, name, owner... You may take the <code>ObjectCreatorUtils</code> class as a basis.</p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:03:13Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PipelineCreatorUtils {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nindex 4d0cface3..3ff864612 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n", "chunk": "@@ -18,23 +18,14 @@ package com.epam.pipeline.test.creator.pipeline;\n \n import com.epam.pipeline.entity.pipeline.PipelineRun;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n \n-public final class PipelineCreatorUtils {\n+public class PipelineCreatorUtils {\n \n-    public static PipelineRun getPipelineRunWithPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID);\n-        pipelineRun.setOwner(\"SIMPLE_USER\");\n-        return pipelineRun;\n-    }\n-\n-    public static PipelineRun getPipelineRunWithoutPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID_2);\n-        pipelineRun.setOwner(TEST_STRING);\n+    public static PipelineRun getPipelineRun(Long id, String owner) {\n+        final PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(id);\n+        pipelineRun.setOwner(owner);\n         pipelineRun.setName(TEST_STRING);\n         return pipelineRun;\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\ndeleted file mode 100644\nindex 3ff864612..000000000\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.epam.pipeline.test.creator.pipeline;\n-\n-import com.epam.pipeline.entity.pipeline.PipelineRun;\n-\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-\n-public class PipelineCreatorUtils {\n-\n-    public static PipelineRun getPipelineRun(Long id, String owner) {\n-        final PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(id);\n-        pipelineRun.setOwner(owner);\n-        pipelineRun.setName(TEST_STRING);\n-        return pipelineRun;\n-    }\n-}\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nnew file mode 100644\nindex 000000000..a75fddf65\n--- /dev/null\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n", "chunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.*;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(ID);\n+        pipelineRun.setOwner(\"SIMPLE_USER\");\n+        return pipelineRun;\n+    }\n+\n+    public static PipelineRun getPipelineRunWithoutPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(ID_2);\n+        pipelineRun.setOwner(TEST_STRING);\n+        pipelineRun.setName(TEST_STRING);\n+        return pipelineRun;\n+    }\n+}\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\nsimilarity index 62%\nrename from api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nrename to api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\nindex a75fddf65..e3b310b1f 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\n", "chunk": "@@ -14,26 +14,24 @@\n  * limitations under the License.\n  */\n \n-package com.epam.pipeline.test.creator.pipeline;\n+package com.epam.pipeline.test.creator.cluster;\n \n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.*;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n \n-public final class PipelineCreatorUtils {\n+public final class ClusterCreatorUtils {\n \n-    public static PipelineRun getPipelineRunWithPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID);\n-        pipelineRun.setOwner(\"SIMPLE_USER\");\n+    public static PipelineRun getPipelineRun(Long id, String owner) {\n+        final PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(id);\n+        pipelineRun.setOwner(owner);\n+        pipelineRun.setName(TEST_STRING);\n         return pipelineRun;\n     }\n \n-    public static PipelineRun getPipelineRunWithoutPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID_2);\n-        pipelineRun.setOwner(TEST_STRING);\n-        pipelineRun.setName(TEST_STRING);\n-        return pipelineRun;\n+    public static MonitoringStats getMonitoringStats() {\n+        return new MonitoringStats();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5Nzk2NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506297964", "body": "see `PipelineCreatorUtils` comment", "bodyText": "see PipelineCreatorUtils comment", "bodyHTML": "<p dir=\"auto\">see <code>PipelineCreatorUtils</code> comment</p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:04:09Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java", "diffHunk": "@@ -51,6 +53,24 @@ public static NodeInstance getDefaultNodeInstance() {\n         return new NodeInstance();\n     }\n \n+    public static NodeInstance getNodeInstanceWithPermission() {\n+        NodeInstance nodeInstance = new NodeInstance();\n+        nodeInstance.setId(ID);\n+        nodeInstance.setOwner(\"OWNER\");\n+        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRunWithPermission());\n+        nodeInstance.setName(TEST_STRING);\n+        return nodeInstance;\n+    }\n+\n+    public static NodeInstance getNodeInstanceWithoutPermission() {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 2a204dc34..48b9586b7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -53,20 +50,11 @@ public final class NodeCreatorUtils {\n         return new NodeInstance();\n     }\n \n-    public static NodeInstance getNodeInstanceWithPermission() {\n-        NodeInstance nodeInstance = new NodeInstance();\n-        nodeInstance.setId(ID);\n-        nodeInstance.setOwner(\"OWNER\");\n-        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRunWithPermission());\n-        nodeInstance.setName(TEST_STRING);\n-        return nodeInstance;\n-    }\n-\n-    public static NodeInstance getNodeInstanceWithoutPermission() {\n-        NodeInstance nodeInstance = new NodeInstance();\n-        nodeInstance.setId(ID_2);\n-        nodeInstance.setOwner(TEST_STRING);\n-        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRunWithoutPermission());\n+    public static NodeInstance getNodeInstance(Long id, String owner) {\n+        final NodeInstance nodeInstance = new NodeInstance();\n+        nodeInstance.setId(id);\n+        nodeInstance.setOwner(owner);\n+        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRun(id, owner));\n         nodeInstance.setName(TEST_STRING);\n         return nodeInstance;\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex 48b9586b7..b4bab9d13 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -47,43 +69,51 @@ public final class NodeCreatorUtils {\n     }\n \n     public static NodeInstance getDefaultNodeInstance() {\n-        return new NodeInstance();\n-    }\n-\n-    public static NodeInstance getNodeInstance(Long id, String owner) {\n-        final NodeInstance nodeInstance = new NodeInstance();\n-        nodeInstance.setId(id);\n-        nodeInstance.setOwner(owner);\n-        nodeInstance.setPipelineRun(PipelineCreatorUtils.getPipelineRun(id, owner));\n+        final List<NodeInstanceAddress> nodeInstanceAddresses = Collections.singletonList(new NodeInstanceAddress());\n+        final Map<String, String> testMap = Collections.singletonMap(TEST_STRING, TEST_STRING);\n+        NodeInstance nodeInstance = new NodeInstance();\n+        nodeInstance.setClusterName(TEST_STRING);\n         nodeInstance.setName(TEST_STRING);\n+        nodeInstance.setCreationTimestamp(TEST_STRING);\n+        nodeInstance.setRegion(TEST_STRING);\n+        nodeInstance.setRunId(TEST_STRING);\n+        nodeInstance.setAddresses(nodeInstanceAddresses);\n+        nodeInstance.setAllocatable(testMap);\n+        nodeInstance.setCapacity(testMap);\n+        nodeInstance.setLabels(testMap);\n         return nodeInstance;\n     }\n \n     public static InstanceType getDefaultInstanceType() {\n-        return InstanceType.builder().name(TEST_STRING).build();\n+        return InstanceType.builder()\n+                .name(TEST_STRING)\n+                .gpu(TEST_INT)\n+                .instanceFamily(TEST_STRING)\n+                .memory(TEST_INT)\n+                .memoryUnit(TEST_STRING)\n+                .operatingSystem(TEST_STRING)\n+                .regionId(ID)\n+                .sku(TEST_STRING)\n+                .termType(TEST_STRING)\n+                .vCPU(TEST_INT)\n+                .build();\n     }\n \n     public static Node getDefaultNode() {\n         final ObjectMeta objectMeta = new ObjectMeta();\n+        objectMeta.setUid(UUID);\n         return new Node(\n                 TEST_STRING, TEST_STRING, objectMeta, new NodeSpec(), new NodeStatus());\n     }\n \n-    public static Node getEmptyNode() {\n-        return new Node();\n-    }\n-\n     public static MasterNode getDefaultMasterNode() {\n         return MasterNode.fromNode(getDefaultNode(), TEST_STRING);\n     }\n \n-    public static MasterNode getMasterNodeWithEmptyNode() {\n-        return MasterNode.fromNode(getEmptyNode(), TEST_STRING);\n-    }\n-\n     public static FilterNodesVO getDefaultFilterNodesVO() {\n         final FilterNodesVO filterNodesVO = new FilterNodesVO();\n         filterNodesVO.setAddress(TEST_STRING);\n+        filterNodesVO.setRunId(TEST_STRING);\n         return filterNodesVO;\n     }\n \n", "next_change": {"commit": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\nindex b4bab9d13..33906bc4d 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/NodeCreatorUtils.java\n", "chunk": "@@ -106,10 +116,18 @@ public final class NodeCreatorUtils {\n                 TEST_STRING, TEST_STRING, objectMeta, new NodeSpec(), new NodeStatus());\n     }\n \n+    public static Node getEmptyNode() {\n+        return new Node();\n+    }\n+\n     public static MasterNode getDefaultMasterNode() {\n         return MasterNode.fromNode(getDefaultNode(), TEST_STRING);\n     }\n \n+    public static MasterNode getMasterNodeWithEmptyNode() {\n+        return MasterNode.fromNode(getEmptyNode(), TEST_STRING);\n+    }\n+\n     public static FilterNodesVO getDefaultFilterNodesVO() {\n         final FilterNodesVO filterNodesVO = new FilterNodesVO();\n         filterNodesVO.setAddress(TEST_STRING);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI5ODgzNg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506298836", "body": "Do not forget to make variables `final`", "bodyText": "Do not forget to make variables final", "bodyHTML": "<p dir=\"auto\">Do not forget to make variables <code>final</code></p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:05:12Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nindex 4d0cface3..3ff864612 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n", "chunk": "@@ -18,23 +18,14 @@ package com.epam.pipeline.test.creator.pipeline;\n \n import com.epam.pipeline.entity.pipeline.PipelineRun;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n \n-public final class PipelineCreatorUtils {\n+public class PipelineCreatorUtils {\n \n-    public static PipelineRun getPipelineRunWithPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID);\n-        pipelineRun.setOwner(\"SIMPLE_USER\");\n-        return pipelineRun;\n-    }\n-\n-    public static PipelineRun getPipelineRunWithoutPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID_2);\n-        pipelineRun.setOwner(TEST_STRING);\n+    public static PipelineRun getPipelineRun(Long id, String owner) {\n+        final PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(id);\n+        pipelineRun.setOwner(owner);\n         pipelineRun.setName(TEST_STRING);\n         return pipelineRun;\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\ndeleted file mode 100644\nindex 3ff864612..000000000\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ /dev/null\n", "chunk": "@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.epam.pipeline.test.creator.pipeline;\n-\n-import com.epam.pipeline.entity.pipeline.PipelineRun;\n-\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-\n-public class PipelineCreatorUtils {\n-\n-    public static PipelineRun getPipelineRun(Long id, String owner) {\n-        final PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(id);\n-        pipelineRun.setOwner(owner);\n-        pipelineRun.setName(TEST_STRING);\n-        return pipelineRun;\n-    }\n-}\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nnew file mode 100644\nindex 000000000..a75fddf65\n--- /dev/null\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n", "chunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.pipeline;\n+\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.*;\n+\n+public final class PipelineCreatorUtils {\n+\n+    public static PipelineRun getPipelineRunWithPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(ID);\n+        pipelineRun.setOwner(\"SIMPLE_USER\");\n+        return pipelineRun;\n+    }\n+\n+    public static PipelineRun getPipelineRunWithoutPermission() {\n+        PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(ID_2);\n+        pipelineRun.setOwner(TEST_STRING);\n+        pipelineRun.setName(TEST_STRING);\n+        return pipelineRun;\n+    }\n+}\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\nsimilarity index 62%\nrename from api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\nrename to api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\nindex a75fddf65..e3b310b1f 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/pipeline/PipelineCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/cluster/ClusterCreatorUtils.java\n", "chunk": "@@ -14,26 +14,24 @@\n  * limitations under the License.\n  */\n \n-package com.epam.pipeline.test.creator.pipeline;\n+package com.epam.pipeline.test.creator.cluster;\n \n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.*;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n \n-public final class PipelineCreatorUtils {\n+public final class ClusterCreatorUtils {\n \n-    public static PipelineRun getPipelineRunWithPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID);\n-        pipelineRun.setOwner(\"SIMPLE_USER\");\n+    public static PipelineRun getPipelineRun(Long id, String owner) {\n+        final PipelineRun pipelineRun = new PipelineRun();\n+        pipelineRun.setId(id);\n+        pipelineRun.setOwner(owner);\n+        pipelineRun.setName(TEST_STRING);\n         return pipelineRun;\n     }\n \n-    public static PipelineRun getPipelineRunWithoutPermission() {\n-        PipelineRun pipelineRun = new PipelineRun();\n-        pipelineRun.setId(ID_2);\n-        pipelineRun.setOwner(TEST_STRING);\n-        pipelineRun.setName(TEST_STRING);\n-        return pipelineRun;\n+    public static MonitoringStats getMonitoringStats() {\n+        return new MonitoringStats();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMTM5Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506301397", "body": "It seems this initialization is redundant.", "bodyText": "It seems this initialization is redundant.", "bodyHTML": "<p dir=\"auto\">It seems this initialization is redundant.</p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:08:09Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -297,173 +243,155 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     public void shouldTerminateNodeForAdmin() {\n         doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n \n-        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(resultNode).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n \n-        final NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n \n-        assertThat(resultNode).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n+    @Test\n+    @WithMockUser\n     public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n \n-        clusterApiService.terminateNode(nodeInstance.getName());\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnStatsForNodeForAdmin() {\n-        final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n         final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n \n-        final List<MonitoringStats> resultStatsList =\n+        final List<MonitoringStats> returnedStatsList =\n                 clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n \n-        assertThat(resultStatsList.size()).isEqualTo(1);\n-        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnStatsWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-\n-        final List<MonitoringStats> resultStatsList =\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final List<MonitoringStats> returnedStatsList =\n                 clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n \n-        assertThat(resultStatsList.size()).isEqualTo(1);\n-        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n+    @Test\n+    @WithMockUser\n     public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n         doReturn(statsList).when(mockUsageMonitoringManager)\n                 .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n \n-        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager)\n-                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n \n-        final InputStream resultInputStream =\n-                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n \n-        assertThat(resultInputStream).isEqualTo(inputStream);\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(inputStream).when(mockUsageMonitoringManager)\n-                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n \n-        final InputStream resultInputStream =\n-                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n \n-        assertThat(resultInputStream).isEqualTo(inputStream);\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n+    @Test\n+    @WithMockUser\n     public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager)\n-                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n-                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n \n-        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n-                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnInstanceTypes() {\n         doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n \n-        final List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnToolInstanceTypes() {\n         doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n \n-        final List<InstanceType> resultInstanceTypesList = clusterApiService\n-                .getAllowedToolInstanceTypes(1L, true);\n-\n-        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnAllowedInstanceAndPriceTypes() {\n         final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n                 NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n         doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n                 .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n \n-        final AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n+                .isEqualTo(allowedInstanceAndPriceTypes);\n     }\n \n     @Test\n+    @WithMockUser\n     public void shouldReturnMasterNodes() {\n         final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n         doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n \n-        final List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n-\n-        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjIyMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506302221", "body": "Format code please", "bodyText": "Format code please", "bodyHTML": "<p dir=\"auto\">Format code please</p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:09:09Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,128 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -227,33 +176,32 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     public void shouldReturnNodeInstanceForAdmin() {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n \n-       final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(node).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n+        mockUser();\n \n-        final NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n \n-        assertThat(node).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldDenyAccessToNode() {\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n-        clusterApiService.getNode(nodeInstance.getName());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxNDY3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506314678", "body": "It seems for such simple and short cases we can merge these two lines: \r\n```\r\nassertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\r\n```", "bodyText": "It seems for such simple and short cases we can merge these two lines:\nassertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);", "bodyHTML": "<p dir=\"auto\">It seems for such simple and short cases we can merge these two lines:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\"><pre><code>assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n</code></pre></div>", "author": "ekazachkova", "createdAt": "2020-10-16T11:25:00Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzNDQ0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506334447", "bodyText": "Could you check it for other methods too?", "author": "ekazachkova", "createdAt": "2020-10-16T11:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxNDY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,128 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxNzg0NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506317844", "body": "Maybe we shell consider creating a common for `*ApiServiceTest` classes method to build a single user permissions?", "bodyText": "Maybe we shell consider creating a common for *ApiServiceTest classes method to build a single user permissions?", "bodyHTML": "<p dir=\"auto\">Maybe we shell consider creating a common for <code>*ApiServiceTest</code> classes method to build a single user permissions?</p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:28:59Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,128 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMTI4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506321282", "body": "Looks like this initialization is redundant", "bodyText": "Looks like this initialization is redundant", "bodyHTML": "<p dir=\"auto\">Looks like this initialization is redundant</p>", "author": "ekazachkova", "createdAt": "2020-10-16T11:33:33Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzMjE4MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506332181", "bodyText": "Could you check it for other methods too?", "author": "ekazachkova", "createdAt": "2020-10-16T11:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMyMTI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,128 +93,82 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n-\n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes.size()).isEqualTo(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        final List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n \n-        assertThat(nodes).isEmpty();\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n     }\n \n     @Test\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NjQyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r506346423", "body": "Maybe we shell add `@AclMask` tests? (for merging entity permissions with parent permissions)\r\n\r\nP.S.: see `AclAspect`", "bodyText": "Maybe we shell add @AclMask tests? (for merging entity permissions with parent permissions)\nP.S.: see AclAspect", "bodyHTML": "<p dir=\"auto\">Maybe we shell add <code>@AclMask</code> tests? (for merging entity permissions with parent permissions)</p>\n<p dir=\"auto\">P.S.: see <code>AclAspect</code></p>", "author": "ekazachkova", "createdAt": "2020-10-16T12:05:21Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,508 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {", "originalCommit": "b7eb321af6111982b798187dffbf70bd809998d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -24,35 +24,34 @@ import com.epam.pipeline.entity.cluster.MasterNode;\n import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n-import com.epam.pipeline.entity.contextual.ContextualPreference;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n import com.epam.pipeline.manager.cluster.NodeDiskManager;\n import com.epam.pipeline.manager.cluster.NodesManager;\n import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n-import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n-import com.epam.pipeline.manager.preference.SystemPreferences;\n import com.epam.pipeline.manager.security.AuthManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n-import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n import org.springframework.security.test.context.support.WithMockUser;\n \n import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,62 +16,34 @@\n \n package com.epam.pipeline.acl.cluster;\n \n-import com.epam.pipeline.controller.vo.FilterNodesVO;\n-import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n-import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n-import com.epam.pipeline.entity.cluster.InstanceType;\n-import com.epam.pipeline.entity.cluster.MasterNode;\n-import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n-import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n-import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.entity.preference.PreferenceType;\n import com.epam.pipeline.manager.cluster.NodesManager;\n-import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n-import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.CheckPermissionHelper;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n-import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n-import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n-import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.authentication.TestingAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n import org.springframework.security.test.context.support.WithMockUser;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.time.Duration;\n-import java.time.LocalDateTime;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n-    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n-\n-    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n-    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n-    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n-\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,31 +16,43 @@\n \n package com.epam.pipeline.acl.cluster;\n \n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.contextual.ContextualPreference;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.entity.preference.PreferenceType;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n import com.epam.pipeline.manager.preference.SystemPreferences;\n-import com.epam.pipeline.manager.security.CheckPermissionHelper;\n+import com.epam.pipeline.manager.security.AuthManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.test.context.support.WithMockUser;\n \n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -50,12 +52,28 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.*;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -53,23 +49,23 @@ import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n-    private final ContextualPreference contextualPreference =\n-            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n     private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -65,6 +67,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -46,32 +46,31 @@ import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n \n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n     private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -51,55 +63,78 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager pipelineRunManager;\n+    private PipelineRunManager mockPipelineRunManager;\n \n     @Autowired\n-    private CheckPermissionHelper permissionHelper;\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n \n     @Autowired\n-    private ContextualPreferenceManager preferenceManager;\n+    private AuthManager mockAuthManager;\n \n-    private NodeInstance nodeInstance;\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n \n-    private NodeInstance nodeInstanceWithoutPermission;\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n \n-    private List<NodeInstance> singleNodeInstance;\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> twoNodeInstances;\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n \n-    private PipelineRun pipelineRun;\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n \n-    private PipelineRun pipelineRunWithoutPermission;\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n \n-    private ContextualPreference contextualPreference;\n+    private InputStream inputStream;\n \n-    private final ContextualPreferenceExternalResource resource =\n-            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n \n     @Before\n     public void setUp() {\n-        contextualPreference = new ContextualPreference(\n-                \"name\", \"0\", PreferenceType.STRING, null, resource);\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n \n-        pipelineRun = new PipelineRun();\n         pipelineRun.setId(1L);\n-        pipelineRun.setPipelineId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRun.setOwner(SIMPLE_USER);\n \n-        pipelineRunWithoutPermission = new PipelineRun();\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n         pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setPipelineId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n \n-        nodeInstance = new NodeInstance();\n         nodeInstance.setId(1L);\n-        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setOwner(OWNER_USER);\n         nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n \n-        nodeInstanceWithoutPermission = new NodeInstance();\n         nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n         nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n \n         singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,79 +98,27 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n \n-        twoNodeInstances = new ArrayList<>();\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n         twoNodeInstances.add(nodeInstance);\n         twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,61 +91,33 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        createAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n+        createAclEntity(nodeInstance, AclPermission.READ);\n+        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..e904acc38 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -113,8 +113,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        createAclEntity(nodeInstance, AclPermission.READ);\n-        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -110,9 +113,10 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -118,8 +117,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -114,8 +114,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n         doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n", "next_change": null}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -121,7 +125,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -127,8 +126,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex fa90c8599..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -60,19 +59,18 @@ import static org.mockito.Mockito.doReturn;\n public class ClusterApiServiceTest extends AbstractAclTest {\n \n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n-    private final ContextualPreference contextualPreference =\n-            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,62 +16,34 @@\n \n package com.epam.pipeline.acl.cluster;\n \n-import com.epam.pipeline.controller.vo.FilterNodesVO;\n-import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n-import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n-import com.epam.pipeline.entity.cluster.InstanceType;\n-import com.epam.pipeline.entity.cluster.MasterNode;\n-import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n-import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n-import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.entity.preference.PreferenceType;\n import com.epam.pipeline.manager.cluster.NodesManager;\n-import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n-import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.CheckPermissionHelper;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n-import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n-import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n-import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.authentication.TestingAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n import org.springframework.security.test.context.support.WithMockUser;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.time.Duration;\n-import java.time.LocalDateTime;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n-    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n-\n-    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n-    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n-    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n-\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,31 +16,43 @@\n \n package com.epam.pipeline.acl.cluster;\n \n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.contextual.ContextualPreference;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.entity.preference.PreferenceType;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n import com.epam.pipeline.manager.preference.SystemPreferences;\n-import com.epam.pipeline.manager.security.CheckPermissionHelper;\n+import com.epam.pipeline.manager.security.AuthManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.test.context.support.WithMockUser;\n \n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -50,12 +52,28 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.*;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -53,23 +49,23 @@ import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n-    private final ContextualPreference contextualPreference =\n-            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n     private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -65,6 +67,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -46,32 +46,31 @@ import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n \n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n     private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -51,55 +63,78 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager pipelineRunManager;\n+    private PipelineRunManager mockPipelineRunManager;\n \n     @Autowired\n-    private CheckPermissionHelper permissionHelper;\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n \n     @Autowired\n-    private ContextualPreferenceManager preferenceManager;\n+    private AuthManager mockAuthManager;\n \n-    private NodeInstance nodeInstance;\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n \n-    private NodeInstance nodeInstanceWithoutPermission;\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n \n-    private List<NodeInstance> singleNodeInstance;\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> twoNodeInstances;\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n \n-    private PipelineRun pipelineRun;\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n \n-    private PipelineRun pipelineRunWithoutPermission;\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n \n-    private ContextualPreference contextualPreference;\n+    private InputStream inputStream;\n \n-    private final ContextualPreferenceExternalResource resource =\n-            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n \n     @Before\n     public void setUp() {\n-        contextualPreference = new ContextualPreference(\n-                \"name\", \"0\", PreferenceType.STRING, null, resource);\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n \n-        pipelineRun = new PipelineRun();\n         pipelineRun.setId(1L);\n-        pipelineRun.setPipelineId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRun.setOwner(SIMPLE_USER);\n \n-        pipelineRunWithoutPermission = new PipelineRun();\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n         pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setPipelineId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n \n-        nodeInstance = new NodeInstance();\n         nodeInstance.setId(1L);\n-        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setOwner(OWNER_USER);\n         nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n \n-        nodeInstanceWithoutPermission = new NodeInstance();\n         nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n         nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n \n         singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,79 +98,27 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n \n-        twoNodeInstances = new ArrayList<>();\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n         twoNodeInstances.add(nodeInstance);\n         twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,61 +91,33 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        createAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n+        createAclEntity(nodeInstance, AclPermission.READ);\n+        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..e904acc38 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -113,8 +113,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        createAclEntity(nodeInstance, AclPermission.READ);\n-        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -110,9 +113,10 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -118,8 +117,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -114,8 +114,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n         doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n", "next_change": null}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -121,7 +125,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -127,8 +126,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExNjI3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509116272", "body": "Could you please check if all of the changes in this class are relevant to the pull request? It seems that mocks like `PipelineDao` have nothing to do with acl tests.", "bodyText": "Could you please check if all of the changes in this class are relevant to the pull request? It seems that mocks like PipelineDao have nothing to do with acl tests.", "bodyHTML": "<p dir=\"auto\">Could you please check if all of the changes in this class are relevant to the pull request? It seems that mocks like <code>PipelineDao</code> have nothing to do with acl tests.</p>", "author": "tcibinan", "createdAt": "2020-10-21T09:09:11Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java", "diffHunk": "@@ -17,47 +17,79 @@\n package com.epam.pipeline.test.acl;", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex cd22c3003..7a768a694 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -17,22 +17,8 @@\n package com.epam.pipeline.test.acl;\n \n import com.epam.pipeline.common.MessageHelper;\n-import com.epam.pipeline.dao.contextual.ContextualPreferenceDao;\n import com.epam.pipeline.dao.datastorage.DataStorageDao;\n-import com.epam.pipeline.dao.datastorage.rules.DataStorageRuleDao;\n-import com.epam.pipeline.dao.notification.MonitoringNotificationDao;\n import com.epam.pipeline.dao.pipeline.FolderDao;\n-import com.epam.pipeline.dao.pipeline.PipelineDao;\n-import com.epam.pipeline.dao.pipeline.PipelineRunDao;\n-import com.epam.pipeline.dao.pipeline.RestartRunDao;\n-import com.epam.pipeline.dao.pipeline.RunLogDao;\n-import com.epam.pipeline.dao.pipeline.RunStatusDao;\n-import com.epam.pipeline.dao.pipeline.StopServerlessRunDao;\n-import com.epam.pipeline.dao.user.GroupStatusDao;\n-import com.epam.pipeline.dao.user.RoleDao;\n-import com.epam.pipeline.dao.user.UserDao;\n-import com.epam.pipeline.entity.log.LogPagination;\n-import com.epam.pipeline.entity.pipeline.Pipeline;\n import com.epam.pipeline.manager.EntityManager;\n import com.epam.pipeline.manager.HierarchicalEntityManager;\n import com.epam.pipeline.manager.billing.BillingManager;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex 7a768a694..161335e58 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -17,8 +17,22 @@\n package com.epam.pipeline.test.acl;\n \n import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.dao.contextual.ContextualPreferenceDao;\n import com.epam.pipeline.dao.datastorage.DataStorageDao;\n+import com.epam.pipeline.dao.datastorage.rules.DataStorageRuleDao;\n+import com.epam.pipeline.dao.notification.MonitoringNotificationDao;\n import com.epam.pipeline.dao.pipeline.FolderDao;\n+import com.epam.pipeline.dao.pipeline.PipelineDao;\n+import com.epam.pipeline.dao.pipeline.PipelineRunDao;\n+import com.epam.pipeline.dao.pipeline.RestartRunDao;\n+import com.epam.pipeline.dao.pipeline.RunLogDao;\n+import com.epam.pipeline.dao.pipeline.RunStatusDao;\n+import com.epam.pipeline.dao.pipeline.StopServerlessRunDao;\n+import com.epam.pipeline.dao.user.GroupStatusDao;\n+import com.epam.pipeline.dao.user.RoleDao;\n+import com.epam.pipeline.dao.user.UserDao;\n+import com.epam.pipeline.entity.log.LogPagination;\n+import com.epam.pipeline.entity.pipeline.Pipeline;\n import com.epam.pipeline.manager.EntityManager;\n import com.epam.pipeline.manager.HierarchicalEntityManager;\n import com.epam.pipeline.manager.billing.BillingManager;\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\nindex 161335e58..b5b545138 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AclTestBeans.java\n", "chunk": "@@ -17,22 +17,8 @@\n package com.epam.pipeline.test.acl;\n \n import com.epam.pipeline.common.MessageHelper;\n-import com.epam.pipeline.dao.contextual.ContextualPreferenceDao;\n import com.epam.pipeline.dao.datastorage.DataStorageDao;\n-import com.epam.pipeline.dao.datastorage.rules.DataStorageRuleDao;\n-import com.epam.pipeline.dao.notification.MonitoringNotificationDao;\n import com.epam.pipeline.dao.pipeline.FolderDao;\n-import com.epam.pipeline.dao.pipeline.PipelineDao;\n-import com.epam.pipeline.dao.pipeline.PipelineRunDao;\n-import com.epam.pipeline.dao.pipeline.RestartRunDao;\n-import com.epam.pipeline.dao.pipeline.RunLogDao;\n-import com.epam.pipeline.dao.pipeline.RunStatusDao;\n-import com.epam.pipeline.dao.pipeline.StopServerlessRunDao;\n-import com.epam.pipeline.dao.user.GroupStatusDao;\n-import com.epam.pipeline.dao.user.RoleDao;\n-import com.epam.pipeline.dao.user.UserDao;\n-import com.epam.pipeline.entity.log.LogPagination;\n-import com.epam.pipeline.entity.pipeline.Pipeline;\n import com.epam.pipeline.manager.EntityManager;\n import com.epam.pipeline.manager.HierarchicalEntityManager;\n import com.epam.pipeline.manager.billing.BillingManager;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExODkyNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509118927", "body": "I'm afraid that this change can be harmful if some api method has `NodeInstance` class in request body. For example as part of `PipelineRun` class. Let's revert the change until we have implemented tests for all the controllers.", "bodyText": "I'm afraid that this change can be harmful if some api method has NodeInstance class in request body. For example as part of PipelineRun class. Let's revert the change until we have implemented tests for all the controllers.", "bodyHTML": "<p dir=\"auto\">I'm afraid that this change can be harmful if some api method has <code>NodeInstance</code> class in request body. For example as part of <code>PipelineRun</code> class. Let's revert the change until we have implemented tests for all the controllers.</p>", "author": "tcibinan", "createdAt": "2020-10-21T09:13:20Z", "path": "api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java", "diffHunk": "@@ -45,7 +45,6 @@\n public class NodeInstance extends AbstractSecuredEntity {\n \n     private UUID uid;\n-    private String name;", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java b/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\nindex 49045111d..0ae304625 100644\n--- a/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\n+++ b/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\n", "chunk": "@@ -45,6 +45,7 @@ import static com.epam.pipeline.manager.cluster.KubernetesConstants.RUN_ID_LABEL\n public class NodeInstance extends AbstractSecuredEntity {\n \n     private UUID uid;\n+    private String name;\n     private String creationTimestamp;\n     private List<NodeInstanceAddress> addresses;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java b/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\nindex 0ae304625..49045111d 100644\n--- a/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\n+++ b/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\n", "chunk": "@@ -45,7 +45,6 @@ import static com.epam.pipeline.manager.cluster.KubernetesConstants.RUN_ID_LABEL\n public class NodeInstance extends AbstractSecuredEntity {\n \n     private UUID uid;\n-    private String name;\n     private String creationTimestamp;\n     private List<NodeInstanceAddress> addresses;\n \n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java b/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\nindex 49045111d..0ae304625 100644\n--- a/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\n+++ b/api/src/main/java/com/epam/pipeline/entity/cluster/NodeInstance.java\n", "chunk": "@@ -45,6 +45,7 @@ import static com.epam.pipeline.manager.cluster.KubernetesConstants.RUN_ID_LABEL\n public class NodeInstance extends AbstractSecuredEntity {\n \n     private UUID uid;\n+    private String name;\n     private String creationTimestamp;\n     private List<NodeInstanceAddress> addresses;\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTU5Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509119597", "body": "Could you please replace the field usages with `CommonCreatorConstants.TEST_STRING`.", "bodyText": "Could you please replace the field usages with CommonCreatorConstants.TEST_STRING.", "bodyHTML": "<p dir=\"auto\">Could you please replace the field usages with <code>CommonCreatorConstants.TEST_STRING</code>.</p>", "author": "tcibinan", "createdAt": "2020-10-21T09:14:16Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3ODM1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509178357", "bodyText": "I already have four static imports in this class, and, if i'm not mistaken, PMD avoid amount of static imports more than four.", "author": "YouKofan", "createdAt": "2020-10-21T10:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -46,10 +47,10 @@ import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,62 +16,34 @@\n \n package com.epam.pipeline.acl.cluster;\n \n-import com.epam.pipeline.controller.vo.FilterNodesVO;\n-import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n-import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n-import com.epam.pipeline.entity.cluster.InstanceType;\n-import com.epam.pipeline.entity.cluster.MasterNode;\n-import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n-import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n-import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.entity.preference.PreferenceType;\n import com.epam.pipeline.manager.cluster.NodesManager;\n-import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n-import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.CheckPermissionHelper;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n-import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n-import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n-import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.authentication.TestingAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n import org.springframework.security.test.context.support.WithMockUser;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.time.Duration;\n-import java.time.LocalDateTime;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n-    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n-\n-    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n-    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n-    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n-\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,31 +16,43 @@\n \n package com.epam.pipeline.acl.cluster;\n \n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.contextual.ContextualPreference;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.entity.preference.PreferenceType;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n import com.epam.pipeline.manager.preference.SystemPreferences;\n-import com.epam.pipeline.manager.security.CheckPermissionHelper;\n+import com.epam.pipeline.manager.security.AuthManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.test.context.support.WithMockUser;\n \n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -50,12 +52,28 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.*;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -53,23 +49,23 @@ import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n-    private final ContextualPreference contextualPreference =\n-            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n     private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -65,6 +67,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -46,32 +46,31 @@ import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n \n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n     private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -51,55 +63,78 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager pipelineRunManager;\n+    private PipelineRunManager mockPipelineRunManager;\n \n     @Autowired\n-    private CheckPermissionHelper permissionHelper;\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n \n     @Autowired\n-    private ContextualPreferenceManager preferenceManager;\n+    private AuthManager mockAuthManager;\n \n-    private NodeInstance nodeInstance;\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n \n-    private NodeInstance nodeInstanceWithoutPermission;\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n \n-    private List<NodeInstance> singleNodeInstance;\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> twoNodeInstances;\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n \n-    private PipelineRun pipelineRun;\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n \n-    private PipelineRun pipelineRunWithoutPermission;\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n \n-    private ContextualPreference contextualPreference;\n+    private InputStream inputStream;\n \n-    private final ContextualPreferenceExternalResource resource =\n-            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n \n     @Before\n     public void setUp() {\n-        contextualPreference = new ContextualPreference(\n-                \"name\", \"0\", PreferenceType.STRING, null, resource);\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n \n-        pipelineRun = new PipelineRun();\n         pipelineRun.setId(1L);\n-        pipelineRun.setPipelineId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRun.setOwner(SIMPLE_USER);\n \n-        pipelineRunWithoutPermission = new PipelineRun();\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n         pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setPipelineId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n \n-        nodeInstance = new NodeInstance();\n         nodeInstance.setId(1L);\n-        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setOwner(OWNER_USER);\n         nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n \n-        nodeInstanceWithoutPermission = new NodeInstance();\n         nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n         nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n \n         singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,79 +98,27 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n \n-        twoNodeInstances = new ArrayList<>();\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n         twoNodeInstances.add(nodeInstance);\n         twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,61 +91,33 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        createAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n+        createAclEntity(nodeInstance, AclPermission.READ);\n+        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..e904acc38 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -113,8 +113,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        createAclEntity(nodeInstance, AclPermission.READ);\n-        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -110,9 +113,10 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -118,8 +117,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -114,8 +114,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n         doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n", "next_change": null}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -121,7 +125,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -127,8 +126,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -57,21 +58,19 @@ import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,62 +16,34 @@\n \n package com.epam.pipeline.acl.cluster;\n \n-import com.epam.pipeline.controller.vo.FilterNodesVO;\n-import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n-import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n-import com.epam.pipeline.entity.cluster.InstanceType;\n-import com.epam.pipeline.entity.cluster.MasterNode;\n-import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n-import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n-import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.entity.preference.PreferenceType;\n import com.epam.pipeline.manager.cluster.NodesManager;\n-import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n-import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.CheckPermissionHelper;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n-import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n-import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n-import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.authentication.TestingAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n import org.springframework.security.test.context.support.WithMockUser;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.time.Duration;\n-import java.time.LocalDateTime;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n-    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n-\n-    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n-    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n-    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n-\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,31 +16,43 @@\n \n package com.epam.pipeline.acl.cluster;\n \n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.contextual.ContextualPreference;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.entity.preference.PreferenceType;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n import com.epam.pipeline.manager.preference.SystemPreferences;\n-import com.epam.pipeline.manager.security.CheckPermissionHelper;\n+import com.epam.pipeline.manager.security.AuthManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.test.context.support.WithMockUser;\n \n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -50,12 +52,28 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.*;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -53,23 +49,23 @@ import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n-    private final ContextualPreference contextualPreference =\n-            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n     private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -65,6 +67,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -46,32 +46,31 @@ import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n \n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n     private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -51,55 +63,78 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager pipelineRunManager;\n+    private PipelineRunManager mockPipelineRunManager;\n \n     @Autowired\n-    private CheckPermissionHelper permissionHelper;\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n \n     @Autowired\n-    private ContextualPreferenceManager preferenceManager;\n+    private AuthManager mockAuthManager;\n \n-    private NodeInstance nodeInstance;\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n \n-    private NodeInstance nodeInstanceWithoutPermission;\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n \n-    private List<NodeInstance> singleNodeInstance;\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> twoNodeInstances;\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n \n-    private PipelineRun pipelineRun;\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n \n-    private PipelineRun pipelineRunWithoutPermission;\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n \n-    private ContextualPreference contextualPreference;\n+    private InputStream inputStream;\n \n-    private final ContextualPreferenceExternalResource resource =\n-            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n \n     @Before\n     public void setUp() {\n-        contextualPreference = new ContextualPreference(\n-                \"name\", \"0\", PreferenceType.STRING, null, resource);\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n \n-        pipelineRun = new PipelineRun();\n         pipelineRun.setId(1L);\n-        pipelineRun.setPipelineId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRun.setOwner(SIMPLE_USER);\n \n-        pipelineRunWithoutPermission = new PipelineRun();\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n         pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setPipelineId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n \n-        nodeInstance = new NodeInstance();\n         nodeInstance.setId(1L);\n-        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setOwner(OWNER_USER);\n         nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n \n-        nodeInstanceWithoutPermission = new NodeInstance();\n         nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n         nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n \n         singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,79 +98,27 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n \n-        twoNodeInstances = new ArrayList<>();\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n         twoNodeInstances.add(nodeInstance);\n         twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,61 +91,33 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        createAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n+        createAclEntity(nodeInstance, AclPermission.READ);\n+        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..e904acc38 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -113,8 +113,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        createAclEntity(nodeInstance, AclPermission.READ);\n-        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -110,9 +113,10 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -118,8 +117,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -114,8 +114,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n         doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n", "next_change": null}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -121,7 +125,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -127,8 +126,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyMTYyNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509121624", "body": "I suppose we can call the second one just `anotherNodeInstance`.", "bodyText": "I suppose we can call the second one just anotherNodeInstance.", "bodyHTML": "<p dir=\"auto\">I suppose we can call the second one just <code>anotherNodeInstance</code>.</p>", "author": "tcibinan", "createdAt": "2020-10-21T09:17:17Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -57,21 +58,19 @@ import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,62 +16,34 @@\n \n package com.epam.pipeline.acl.cluster;\n \n-import com.epam.pipeline.controller.vo.FilterNodesVO;\n-import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n-import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n-import com.epam.pipeline.entity.cluster.InstanceType;\n-import com.epam.pipeline.entity.cluster.MasterNode;\n-import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n-import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n-import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.entity.preference.PreferenceType;\n import com.epam.pipeline.manager.cluster.NodesManager;\n-import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n-import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.security.CheckPermissionHelper;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n-import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n-import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n-import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.authentication.TestingAuthenticationToken;\n-import org.springframework.security.core.Authentication;\n import org.springframework.security.test.context.support.WithMockUser;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.time.Duration;\n-import java.time.LocalDateTime;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n-import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n-    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n-\n-    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n-    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n-    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n-\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -16,31 +16,43 @@\n \n package com.epam.pipeline.acl.cluster;\n \n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n import com.epam.pipeline.entity.contextual.ContextualPreference;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n-import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.entity.preference.PreferenceType;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n import com.epam.pipeline.manager.preference.SystemPreferences;\n-import com.epam.pipeline.manager.security.CheckPermissionHelper;\n+import com.epam.pipeline.manager.security.AuthManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n import org.springframework.security.test.context.support.WithMockUser;\n \n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.when;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -50,12 +52,28 @@ import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.*;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n     @Autowired\n     private ClusterApiService clusterApiService;\n \n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -53,23 +49,23 @@ import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.doReturn;\n \n public class ClusterApiServiceTest extends AbstractAclTest {\n \n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstanceWithPermission();\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstanceWithoutPermission();\n-    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRunWithPermission();\n-    private final ContextualPreference contextualPreference =\n-            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-    private final MonitoringStats monitoringStats = ContextualPreferenceCreatorUtils.getMonitoringStats();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n     private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -65,6 +67,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n     private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n     private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n     private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -46,32 +46,31 @@ import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n import java.time.Duration;\n import java.time.LocalDateTime;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.doReturn;\n \n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n public class ClusterApiServiceTest extends AbstractAclTest {\n \n-    private final String TEST_STRING = \"TEST\";\n     private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n     private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n     private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n     private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n     private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n     private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n     private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n     private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n \n-    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n-    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n-    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n \n     @Autowired\n     private ClusterApiService clusterApiService;\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -51,55 +63,78 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager pipelineRunManager;\n+    private PipelineRunManager mockPipelineRunManager;\n \n     @Autowired\n-    private CheckPermissionHelper permissionHelper;\n+    private ContextualPreferenceManager mockContextualPreferenceManager;\n \n     @Autowired\n-    private ContextualPreferenceManager preferenceManager;\n+    private AuthManager mockAuthManager;\n \n-    private NodeInstance nodeInstance;\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n \n-    private NodeInstance nodeInstanceWithoutPermission;\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n \n-    private List<NodeInstance> singleNodeInstance;\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> twoNodeInstances;\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n+\n+    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n+\n+    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n+\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n \n-    private PipelineRun pipelineRun;\n+    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n \n-    private PipelineRun pipelineRunWithoutPermission;\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n \n-    private ContextualPreference contextualPreference;\n+    private InputStream inputStream;\n \n-    private final ContextualPreferenceExternalResource resource =\n-            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n+    private List<NodeDisk> nodeDisks;\n+\n+    private List<InstanceType> instanceTypes;\n+\n+    private List<MonitoringStats> statsList;\n+\n+    private List<NodeInstance> singleNodeInstance;\n+\n+    private List<NodeInstance> twoNodeInstances;\n \n     @Before\n     public void setUp() {\n-        contextualPreference = new ContextualPreference(\n-                \"name\", \"0\", PreferenceType.STRING, null, resource);\n+        statsList = Collections.singletonList(monitoringStats);\n+\n+        instanceTypes = Collections.singletonList(instanceType);\n+\n+        nodeDisks = Collections.singletonList(nodeDisk);\n \n-        pipelineRun = new PipelineRun();\n         pipelineRun.setId(1L);\n-        pipelineRun.setPipelineId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRun.setOwner(SIMPLE_USER);\n \n-        pipelineRunWithoutPermission = new PipelineRun();\n+        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n         pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setPipelineId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n+        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n \n-        nodeInstance = new NodeInstance();\n         nodeInstance.setId(1L);\n-        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setOwner(OWNER_USER);\n         nodeInstance.setPipelineRun(pipelineRun);\n+        nodeInstance.setName(TEST_NAME);\n \n-        nodeInstanceWithoutPermission = new NodeInstance();\n         nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n         nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n+        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n \n         singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n", "next_change": {"commit": "b713464980ca18071bff2affee16237e96622694", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..e904947d1 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -80,79 +98,27 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n-\n-    private final NodeInstance nodeInstance = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getDefaultNodeInstance();\n-\n-    private final PipelineRun pipelineRun = NodeCreatorUtils.getPipelineRun();\n-\n-    private final ContextualPreference contextualPreference = NodeCreatorUtils.getContextualPreference();\n-\n-    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n-\n-    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n-\n-    private final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n-\n-    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n-\n-    private InputStream inputStream;\n-\n-    private List<NodeDisk> nodeDisks;\n-\n-    private List<InstanceType> instanceTypes;\n-\n-    private List<MonitoringStats> statsList;\n-\n-    private List<NodeInstance> singleNodeInstance;\n-\n-    private List<NodeInstance> twoNodeInstances;\n-\n-    @Before\n-    public void setUp() {\n-        statsList = Collections.singletonList(monitoringStats);\n-\n-        instanceTypes = Collections.singletonList(instanceType);\n-\n-        nodeDisks = Collections.singletonList(nodeDisk);\n-\n-        pipelineRun.setId(1L);\n-        pipelineRun.setOwner(SIMPLE_USER);\n-\n-        final PipelineRun pipelineRunWithoutPermission = NodeCreatorUtils.getPipelineRun();\n-        pipelineRunWithoutPermission.setId(2L);\n-        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_2);\n-        pipelineRunWithoutPermission.setName(TEST_NAME_2);\n-\n-        nodeInstance.setId(1L);\n-        nodeInstance.setOwner(OWNER_USER);\n-        nodeInstance.setPipelineRun(pipelineRun);\n-        nodeInstance.setName(TEST_NAME);\n-\n-        nodeInstanceWithoutPermission.setId(2L);\n-        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_2);\n-        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n-        nodeInstanceWithoutPermission.setName(TEST_NAME_2);\n-\n-        singleNodeInstance = new ArrayList<>();\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n         singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n \n-        twoNodeInstances = new ArrayList<>();\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n         twoNodeInstances.add(nodeInstance);\n         twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        List<NodeInstance> nodes = clusterApiService.getNodes();\n+        final List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(nodes).hasSize(1);\n-        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+        assertThat(nodes).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904947d1..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -98,61 +91,33 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Autowired\n     private InstanceOfferManager mockInstanceOfferManager;\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n-    }\n-\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldReturnListWithNodeInstancesForAdmin() {\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        createAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        initAclEntity(nodeInstance,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n-\n-        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-\n+        createAclEntity(nodeInstance, AclPermission.READ);\n+        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n-        final List<NodeInstance> nodes = clusterApiService.getNodes();\n-\n-        assertThat(nodes).hasSize(1).contains(nodeInstance);\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n \n     @Test\n", "next_change": {"commit": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..e904acc38 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -113,8 +113,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        createAclEntity(nodeInstance, AclPermission.READ);\n-        createAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n", "next_change": {"commit": "f64b25fe398480c21040fb9e3421f798a9116097", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -110,9 +113,10 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n         doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -118,8 +117,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n         initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n-        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n     }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -114,8 +114,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n         doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n         initAclEntity(nodeInstance, AclPermission.READ);\n         initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n         doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n", "next_change": null}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e904acc38..dadcdc2e9 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -121,7 +125,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n+    @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -127,8 +126,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNjQ2NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509136464", "body": "Method `initSingleNodeInstanceList()` returns list which doesn't contain `nodeInstanceWithoutPermission` so this test is not testing what it should. Probably we can even get rid of methods like `initSingleNodeInstanceList` and always initialiaze lists like the following\r\n```java\r\nCollections.singletonList(node);\r\n// or\r\nArrays.asList(node1, node2);\r\n```", "bodyText": "Method initSingleNodeInstanceList() returns list which doesn't contain nodeInstanceWithoutPermission so this test is not testing what it should. Probably we can even get rid of methods like initSingleNodeInstanceList and always initialiaze lists like the following\nCollections.singletonList(node);\n// or\nArrays.asList(node1, node2);", "bodyHTML": "<p dir=\"auto\">Method <code>initSingleNodeInstanceList()</code> returns list which doesn't contain <code>nodeInstanceWithoutPermission</code> so this test is not testing what it should. Probably we can even get rid of methods like <code>initSingleNodeInstanceList</code> and always initialiaze lists like the following</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Collections.singletonList(node);\n// or\nArrays.asList(node1, node2);\"><pre><span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singletonList(node);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or</span>\n<span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>asList(node1, node2);</pre></div>", "author": "tcibinan", "createdAt": "2020-10-21T09:39:10Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -127,8 +126,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission);\n-        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n \n         assertThat(clusterApiService.getNodes()).isEmpty();\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MTgwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509141809", "body": "Let's specify explicitly why the access is denied like `shouldDenyAccessToNodeWhenPermissionIsNotGranted`.", "bodyText": "Let's specify explicitly why the access is denied like shouldDenyAccessToNodeWhenPermissionIsNotGranted.", "bodyHTML": "<p dir=\"auto\">Let's specify explicitly why the access is denied like <code>shouldDenyAccessToNodeWhenPermissionIsNotGranted</code>.</p>", "author": "tcibinan", "createdAt": "2020-10-21T09:47:13Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNode() {", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -197,10 +196,10 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n \n     @Test\n     @WithMockUser\n-    public void shouldDenyAccessToNode() {\n+    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0Nzk5MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r509147991", "body": "I wonder if we can extract all this duplicated mocking calls into some methods like the following:\r\n```java\r\nmockUser();\r\nmockStats();\r\nmockNodeInstance();\r\nmockPipelineRun();\r\n```", "bodyText": "I wonder if we can extract all this duplicated mocking calls into some methods like the following:\nmockUser();\nmockStats();\nmockNodeInstance();\nmockPipelineRun();", "bodyHTML": "<p dir=\"auto\">I wonder if we can extract all this duplicated mocking calls into some methods like the following:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mockUser();\nmockStats();\nmockNodeInstance();\nmockPipelineRun();\"><pre>mockUser();\nmockStats();\nmockNodeInstance();\nmockPipelineRun();</pre></div>", "author": "tcibinan", "createdAt": "2020-10-21T09:56:46Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final String TEST_STRING = \"TEST\";\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance nodeInstanceWithoutPermission = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = ClusterCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InstanceType instanceType = NodeCreatorUtils.getDefaultInstanceType();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = Collections.singletonList(nodeDisk);\n+    private final List<InstanceType> instanceTypes = Collections.singletonList(instanceType);\n+    private final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(nodeInstanceWithoutPermission, AclPermission.NO_READ);\n+        doReturn(initTwoNodeInstancesList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(initSingleNodeInstanceList()).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        final List<MonitoringStats> returnedStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));", "originalCommit": "4a5f096dcc4809e99c88158e87803b53a477beba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex dadcdc2e9..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -293,13 +288,13 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     @Test\n     @WithMockUser\n     public void shouldReturnStatsWhenPermissionIsGranted() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n         initAclEntity(nodeInstance, AclPermission.READ);\n         doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n                 nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n \n         final List<MonitoringStats> returnedStatsList =\n                 clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5ODQzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r510698434", "body": "Could you please use generic type to return `List<T>` rather then `List<Object>`. It probably is a good idea because it increases the possibility that this method will be reused.", "bodyText": "Could you please use generic type to return List<T> rather then List<Object>. It probably is a good idea because it increases the possibility that this method will be reused.", "bodyHTML": "<p dir=\"auto\">Could you please use generic type to return <code>List&lt;T&gt;</code> rather then <code>List&lt;Object&gt;</code>. It probably is a good idea because it increases the possibility that this method will be reused.</p>", "author": "tcibinan", "createdAt": "2020-10-23T07:48:52Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java", "diffHunk": "@@ -131,4 +132,10 @@ public Sid toSid() {\n             return new GrantedAuthoritySid(authorityName);\n         }\n     }\n+\n+    protected List<Object> mutableListOf(Object... objects) {", "originalCommit": "b783a146609e9b69f05d82d5e8487ce0bb6857d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\nindex cdc4133bc..b1b85a743 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n", "chunk": "@@ -133,8 +133,9 @@ public abstract class AbstractAclTest {\n         }\n     }\n \n-    protected List<Object> mutableListOf(Object... objects) {\n-        List<Object> list = new ArrayList<>();\n+    @SafeVarargs\n+    protected final <T> List<T>  mutableListOf(T... objects) {\n+        final List<T> list = new ArrayList<>();\n         Collections.addAll(list, objects);\n         return list;\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\nindex b1b85a743..62fb85071 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n", "chunk": "@@ -132,11 +122,4 @@ public abstract class AbstractAclTest {\n             return new GrantedAuthoritySid(authorityName);\n         }\n     }\n-\n-    @SafeVarargs\n-    protected final <T> List<T>  mutableListOf(T... objects) {\n-        final List<T> list = new ArrayList<>();\n-        Collections.addAll(list, objects);\n-        return list;\n-    }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\nindex 62fb85071..cdc4133bc 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n", "chunk": "@@ -122,4 +132,10 @@ public abstract class AbstractAclTest {\n             return new GrantedAuthoritySid(authorityName);\n         }\n     }\n+\n+    protected List<Object> mutableListOf(Object... objects) {\n+        List<Object> list = new ArrayList<>();\n+        Collections.addAll(list, objects);\n+        return list;\n+    }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\nindex cdc4133bc..b1b85a743 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n", "chunk": "@@ -133,8 +133,9 @@ public abstract class AbstractAclTest {\n         }\n     }\n \n-    protected List<Object> mutableListOf(Object... objects) {\n-        List<Object> list = new ArrayList<>();\n+    @SafeVarargs\n+    protected final <T> List<T>  mutableListOf(T... objects) {\n+        final List<T> list = new ArrayList<>();\n         Collections.addAll(list, objects);\n         return list;\n     }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcxMzA1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r510713057", "body": "Probably this mocking call makes thing even more complicated then before. For example in this case `nodeInstance` used for acl is not the same instance that will be used in `initMocksBehavior`. Also this `true\\false` flag is not intuitive. Just imagine that there will be another boolean parameter.\r\n\r\nI still think that it will be better to use separate calls for mocks which will just remove a need to write the whole\r\n`doReturn().when().call()` chain. For example in this case we can use something like the following. It does not contain less lines then the original version. But it is not the point, isn't it? The following code is declarative as plain mockito calls but it is also much simpler. And in case f.e. pipeline run mocking mechanism will have to change in the future then we will just have to change a single method `mockRun`.\r\n```java\r\nmockUser(SIMPLE_USER); // Mock any user related calls that are used in the tests.\r\nmockNode(nodeInstance); // Mock all node instance calls that are used in the tests.\r\nmockRun(pipelineRun); // Mock all pipeline run calls that are used in the tests.\r\n```\r\n\r\n```java\r\npublic void mockNode(final NodeInstance nodeInstance) {\r\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\r\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\r\n}\r\n```\r\n\r\nWhat do you think?", "bodyText": "Probably this mocking call makes thing even more complicated then before. For example in this case nodeInstance used for acl is not the same instance that will be used in initMocksBehavior. Also this true\\false flag is not intuitive. Just imagine that there will be another boolean parameter.\nI still think that it will be better to use separate calls for mocks which will just remove a need to write the whole\ndoReturn().when().call() chain. For example in this case we can use something like the following. It does not contain less lines then the original version. But it is not the point, isn't it? The following code is declarative as plain mockito calls but it is also much simpler. And in case f.e. pipeline run mocking mechanism will have to change in the future then we will just have to change a single method mockRun.\nmockUser(SIMPLE_USER); // Mock any user related calls that are used in the tests.\nmockNode(nodeInstance); // Mock all node instance calls that are used in the tests.\nmockRun(pipelineRun); // Mock all pipeline run calls that are used in the tests.\npublic void mockNode(final NodeInstance nodeInstance) {\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n}\nWhat do you think?", "bodyHTML": "<p dir=\"auto\">Probably this mocking call makes thing even more complicated then before. For example in this case <code>nodeInstance</code> used for acl is not the same instance that will be used in <code>initMocksBehavior</code>. Also this <code>true\\false</code> flag is not intuitive. Just imagine that there will be another boolean parameter.</p>\n<p dir=\"auto\">I still think that it will be better to use separate calls for mocks which will just remove a need to write the whole<br>\n<code>doReturn().when().call()</code> chain. For example in this case we can use something like the following. It does not contain less lines then the original version. But it is not the point, isn't it? The following code is declarative as plain mockito calls but it is also much simpler. And in case f.e. pipeline run mocking mechanism will have to change in the future then we will just have to change a single method <code>mockRun</code>.</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mockUser(SIMPLE_USER); // Mock any user related calls that are used in the tests.\nmockNode(nodeInstance); // Mock all node instance calls that are used in the tests.\nmockRun(pipelineRun); // Mock all pipeline run calls that are used in the tests.\"><pre>mockUser(<span class=\"pl-c1\">SIMPLE_USER</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> Mock any user related calls that are used in the tests.</span>\nmockNode(nodeInstance); <span class=\"pl-c\"><span class=\"pl-c\">//</span> Mock all node instance calls that are used in the tests.</span>\nmockRun(pipelineRun); <span class=\"pl-c\"><span class=\"pl-c\">//</span> Mock all pipeline run calls that are used in the tests.</span></pre></div>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public void mockNode(final NodeInstance nodeInstance) {\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n    doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> mockNode(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">NodeInstance</span> nodeInstance) {\n    doReturn(nodeInstance)<span class=\"pl-k\">.</span>when(mockNodesManager)<span class=\"pl-k\">.</span>getNode(nodeInstance<span class=\"pl-k\">.</span>getName(), filterPodsRequest);\n    doReturn(nodeInstance)<span class=\"pl-k\">.</span>when(mockNodesManager)<span class=\"pl-k\">.</span>getNode(nodeInstance<span class=\"pl-k\">.</span>getName());\n}</pre></div>\n<p dir=\"auto\">What do you think?</p>", "author": "tcibinan", "createdAt": "2020-10-23T08:15:28Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+@SuppressWarnings(\"PMD.TooManyStaticImports\")\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initMocksBehavior(true);", "originalCommit": "5c317b5ac7100eac63135f3e14d1251234969cbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex beeef5b7f..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -218,7 +217,9 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n         final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n         initAclEntity(nodeInstance, AclPermission.READ);\n-        initMocksBehavior(true);\n+        mockRun(pipelineRun);\n+        mockNode(nodeInstance);\n+        mockUser();\n \n         final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n \n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyNjg2OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1481#discussion_r511826869", "body": "It does look like we can just replace it with the new method `mockNode`. Some similar cases with `terminateNode` calls in different tests too. You can just add `terminateNode` to `mockNode` and everything seems to be just fine.", "bodyText": "It does look like we can just replace it with the new method mockNode. Some similar cases with terminateNode calls in different tests too. You can just add terminateNode to mockNode and everything seems to be just fine.", "bodyHTML": "<p dir=\"auto\">It does look like we can just replace it with the new method <code>mockNode</code>. Some similar cases with <code>terminateNode</code> calls in different tests too. You can just add <code>terminateNode</code> to <code>mockNode</code> and everything seems to be just fine.</p>", "author": "tcibinan", "createdAt": "2020-10-26T09:36:52Z", "path": "api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java", "diffHunk": "@@ -0,0 +1,444 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n+import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n+import com.epam.pipeline.entity.cluster.InstanceType;\n+import com.epam.pipeline.entity.cluster.MasterNode;\n+import com.epam.pipeline.entity.cluster.NodeDisk;\n+import com.epam.pipeline.entity.cluster.NodeInstance;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cluster.InstanceOfferManager;\n+import com.epam.pipeline.manager.cluster.NodeDiskManager;\n+import com.epam.pipeline.manager.cluster.NodesManager;\n+import com.epam.pipeline.manager.cluster.performancemonitoring.UsageMonitoringManager;\n+import com.epam.pipeline.manager.pipeline.PipelineRunManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.cluster.ClusterCreatorUtils;\n+import com.epam.pipeline.test.creator.cluster.NodeCreatorUtils;\n+import com.epam.pipeline.test.creator.pipeline.PipelineCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.TestingAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ClusterApiServiceTest extends AbstractAclTest {\n+\n+    private final FilterPodsRequest filterPodsRequest = NodeCreatorUtils.getDefaultFilterPodsRequest();\n+    private final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, SIMPLE_USER);\n+    private final NodeInstance anotherNodeInstance = NodeCreatorUtils.getNodeInstance(2L, TEST_STRING);\n+    private final PipelineRun pipelineRun = PipelineCreatorUtils.getPipelineRun(1L, SIMPLE_USER);\n+    private final FilterNodesVO filterNodesVO = NodeCreatorUtils.getDefaultFilterNodesVO();\n+    private final NodeDisk nodeDisk = NodeCreatorUtils.getDefaultNodeDisk();\n+    private final MonitoringStats monitoringStats = ClusterCreatorUtils.getMonitoringStats();\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+    private final Authentication authentication = new TestingAuthenticationToken(new Object(), new Object());\n+\n+    private final List<NodeDisk> nodeDisks = NodeCreatorUtils.getNodeDiskList();\n+    private final List<InstanceType> instanceTypes = NodeCreatorUtils.getInstanceTypeList();\n+    private final List<MonitoringStats> statsList = ClusterCreatorUtils.getMonitoringStatsList();\n+\n+    @Autowired\n+    private ClusterApiService clusterApiService;\n+\n+    @Autowired\n+    private NodesManager mockNodesManager;\n+\n+    @Autowired\n+    private PipelineRunManager mockPipelineRunManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Autowired\n+    private UsageMonitoringManager mockUsageMonitoringManager;\n+\n+    @Autowired\n+    private NodeDiskManager mockNodeDiskManager;\n+\n+    @Autowired\n+    private InstanceOfferManager mockInstanceOfferManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n+\n+        assertThat(clusterApiService.getNodes()).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockUser();\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(authentication).when(mockAuthManager).getAuthentication();\n+        mockUser();\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherNodeInstance);\n+        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        mockRun(pipelineRun);\n+        mockNode(nodeInstance);\n+        mockUser();\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockNode(nodeInstance);\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n+        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        final List<MonitoringStats> returnedStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final List<MonitoringStats> returnedStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class,\n+                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+        mockUser();\n+\n+        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(returnedInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        mockNode(nodeInstance);\n+        mockRun(pipelineRun);\n+\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n+                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n+                .isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance, AclPermission.READ);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        mockUser();\n+        mockRun(pipelineRun);\n+\n+        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());", "originalCommit": "01febba00d8ffb21d4f4ae621c898d2bad0cec19", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex eff4f2e0d..92fd30b1a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -422,9 +419,8 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n         initAclEntity(nodeInstance);\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         mockRun(pipelineRun);\n+        mockNode(nodeInstance);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n", "next_change": {"commit": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 92fd30b1a..a80223581 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -79,363 +51,127 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n     private NodesManager mockNodesManager;\n \n     @Autowired\n-    private PipelineRunManager mockPipelineRunManager;\n-\n-    @Autowired\n-    private AuthManager mockAuthManager;\n+    private PipelineRunManager pipelineRunManager;\n \n     @Autowired\n-    private UsageMonitoringManager mockUsageMonitoringManager;\n+    private CheckPermissionHelper permissionHelper;\n \n     @Autowired\n-    private NodeDiskManager mockNodeDiskManager;\n-\n-    @Autowired\n-    private InstanceOfferManager mockInstanceOfferManager;\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance, anotherNodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).hasSize(1).contains(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).getNodes();\n-\n-        assertThat(clusterApiService.getNodes()).isEmpty();\n-    }\n+    private ContextualPreferenceManager preferenceManager;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private NodeInstance nodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private NodeInstance nodeInstanceWithoutPermission;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockUser();\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private List<NodeInstance> singleNodeInstance;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private List<NodeInstance> twoNodeInstances;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n-        doReturn(authentication).when(mockAuthManager).getAuthentication();\n-        mockUser();\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        initAclEntity(anotherNodeInstance, AclPermission.NO_READ);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n-\n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).hasSize(1).contains(nodeInstance);\n-    }\n+    private PipelineRun pipelineRun;\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(anotherNodeInstance);\n-        doReturn(mutableListOf(nodeInstance)).when(mockNodesManager).filterNodes(filterNodesVO);\n+    private PipelineRun pipelineRunWithoutPermission;\n \n-        assertThat(clusterApiService.filterNodes(filterNodesVO)).isEmpty();\n-    }\n+    private ContextualPreference contextualPreference;\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeInstanceForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+    private final ContextualPreferenceExternalResource resource =\n+            new ContextualPreferenceExternalResource(ContextualPreferenceLevel.USER, \"1\");\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n+    @Before\n+    public void setUp() {\n+        contextualPreference = new ContextualPreference(\n+                \"name\", \"0\", PreferenceType.STRING, null, resource);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n+        pipelineRun = new PipelineRun();\n+        pipelineRun.setId(1L);\n+        pipelineRun.setPipelineId(1L);\n+        pipelineRun.setOwner(SIMPLE_USER_ROLE);\n \n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        mockRun(pipelineRun);\n+        pipelineRunWithoutPermission = new PipelineRun();\n+        pipelineRunWithoutPermission.setId(2L);\n+        pipelineRunWithoutPermission.setPipelineId(2L);\n+        pipelineRunWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n \n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getNode(nodeInstance.getName()));\n-    }\n+        nodeInstance = new NodeInstance();\n+        nodeInstance.setId(1L);\n+        nodeInstance.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstance.setPipelineRun(pipelineRun);\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeThroughRequestForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        nodeInstanceWithoutPermission = new NodeInstance();\n+        nodeInstanceWithoutPermission.setId(2L);\n+        nodeInstanceWithoutPermission.setOwner(SIMPLE_USER_ROLE);\n+        nodeInstanceWithoutPermission.setPipelineRun(pipelineRunWithoutPermission);\n \n-        assertThat(clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest)).isEqualTo(nodeInstance);\n-    }\n+        singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeThroughRequestWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest));\n+        twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldTerminateNodeForAdmin() {\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-\n-        assertThat(clusterApiService.terminateNode(nodeInstance.getName())).isEqualTo(nodeInstance);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldTerminateNodeWhenPermissionIsGranted() {\n-        final NodeInstance nodeInstance = NodeCreatorUtils.getNodeInstance(1L, TEST_STRING);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final NodeInstance returnedNodeInstance = clusterApiService.terminateNode(nodeInstance.getName());\n-\n-        assertThat(returnedNodeInstance).isEqualTo(nodeInstance);\n-        assertThat(returnedNodeInstance.getMask()).isEqualTo(AclPermission.READ.getMask());\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.terminateNode(nodeInstance.getName()));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnStatsForNodeForAdmin() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnStatsWhenPermissionIsGranted() {\n-        final List<MonitoringStats> statsList = Collections.singletonList(monitoringStats);\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(statsList).when(mockUsageMonitoringManager).getStatsForNode(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final List<MonitoringStats> returnedStatsList =\n-                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-\n-        assertThat(returnedStatsList).hasSize(1).contains(monitoringStats);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+    public void shouldReturnListWithNodeInstancesForAdmin() {\n         initAclEntity(nodeInstance);\n-        doReturn(statsList).when(mockUsageMonitoringManager)\n-                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThrows(AccessDeniedException.class,\n-                () -> clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX));\n-    }\n-\n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnUsageStatisticsFileForAdmin() {\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-        mockUser();\n-\n-        final InputStream returnedInputStream = clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-\n-        assertThat(returnedInputStream).isEqualTo(inputStream);\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(inputStream).when(mockUsageMonitoringManager).getStatsForNodeAsInputStream(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n-        mockNode(nodeInstance);\n-        mockRun(pipelineRun);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.getUsageStatisticsFile(\n-                nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO));\n-    }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldReturnInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstancesWhenPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnToolInstanceTypes() {\n-        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-        assertThat(clusterApiService.getAllowedToolInstanceTypes(1L, true)).isEqualTo(instanceTypes);\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnAllowedInstanceAndPriceTypes() {\n-        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n-                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n-        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n-                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n-\n-        assertThat(clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true))\n-                .isEqualTo(allowedInstanceAndPriceTypes);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n     @Test\n-    @WithMockUser\n-    public void shouldReturnMasterNodes() {\n-        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n-        final List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n-        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnListWithNodeInstanceWhichPermissionIsGranted() {\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n \n-        assertThat(clusterApiService.getMasterNodes()).isEqualTo(masterNodes);\n-    }\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        when(permissionHelper.isAllowed(\"READ\", pipelineRun)).thenReturn(true);\n+        doReturn(twoNodeInstances).when(mockNodesManager).getNodes();\n \n-    @Test\n-    @WithMockUser(roles = ADMIN_ROLE)\n-    public void shouldReturnNodeDisksForAdmin() {\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-    @Test\n-    @WithMockUser\n-    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n-        initAclEntity(nodeInstance, AclPermission.READ);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockNode(nodeInstance);\n-        mockUser();\n-        mockRun(pipelineRun);\n-\n-        assertThat(clusterApiService.loadNodeDisks(nodeDisk.getNodeId())).hasSize(1).contains(nodeDisk);\n-    }\n \n     @Test\n-    @WithMockUser\n-    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstance);\n-        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n-        mockRun(pipelineRun);\n-        mockNode(nodeInstance);\n-\n-        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n-    }\n-\n-    private void mockNode(final NodeInstance nodeInstance) {\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n-        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n-        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n-    }\n+    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(preferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n-    private void mockRun(final PipelineRun pipelineRun) {\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n-    }\n+        List<NodeInstance> nodes = clusterApiService.getNodes();\n \n-    private void mockUser() {\n-        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        assertThat(nodes).isEmpty();\n     }\n }\n", "next_change": {"commit": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a80223581..e3a4484e6 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -159,19 +191,356 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n     }\n \n-\n     @Test\n-    @WithMockUser(username = SIMPLE_USER_ROLE)\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldReturnEmptyNodeInstanceListWhenPermissionIsNotGranted() {\n-        initAclEntity(nodeInstanceWithoutPermission,\n-                Collections.singletonList(new UserPermission(SIMPLE_USER_ROLE, AclPermission.NO_READ.getMask())));\n-        doReturn(contextualPreference).when(preferenceManager).search(\n-                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n-        doReturn(pipelineRun).when(pipelineRunManager).loadRunParent(pipelineRun);\n+        initAclEntity(nodeInstanceWithoutPermission);\n         doReturn(singleNodeInstance).when(mockNodesManager).getNodes();\n \n         List<NodeInstance> nodes = clusterApiService.getNodes();\n \n         assertThat(nodes).isEmpty();\n     }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnFilteredListWithNodeInstancesForAdmin() {\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredNodeInstanceListWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes.size()).isEqualTo(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnFilteredListWithNodeInstanceWhichPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        initAclEntity(nodeInstanceWithoutPermission,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.NO_READ.getMask())));\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(twoNodeInstances).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).hasSize(1);\n+        assertThat(nodes.get(0)).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnEmptyFilteredNodeInstanceListWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstanceWithoutPermission);\n+        doReturn(contextualPreference).when(mockContextualPreferenceManager).search(\n+                Collections.singletonList(SystemPreferences.RUN_VISIBILITY_POLICY.getKey()));\n+        doReturn(singleNodeInstance).when(mockNodesManager).filterNodes(filterNodesVO);\n+\n+        List<NodeInstance> nodes = clusterApiService.filterNodes(filterNodesVO);\n+\n+        assertThat(nodes).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeInstanceForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeInstanceWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName());\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNode() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeThroughRequestForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeThroughRequestWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance node = clusterApiService.getNode(nodeInstance.getName(), filterPodsRequest);\n+\n+        assertThat(node).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeThroughRequest() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldTerminateNodeForAdmin() {\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldTerminateNodeWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.EXECUTE.getMask())));\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        NodeInstance resultNode = clusterApiService.terminateNode(nodeInstance.getName());\n+\n+        assertThat(resultNode).isEqualTo(nodeInstance);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeTerminationWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeInstance).when(mockNodesManager).terminateNode(nodeInstance.getName());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.terminateNode(nodeInstance.getName());\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnStatsForNodeForAdmin() {\n+        final MonitoringStats monitoringStats = NodeCreatorUtils.getMonitoringStats();\n+        statsList = Collections.singletonList(monitoringStats);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnStatsWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<MonitoringStats> resultStatsList =\n+                clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+\n+        assertThat(resultStatsList.size()).isEqualTo(1);\n+        assertThat(resultStatsList.get(0)).isEqualTo(monitoringStats);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToStatsWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(statsList).when(mockUsageMonitoringManager)\n+                .getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getStatsForNode(nodeInstance.getName(), LocalDateTime.MIN, LocalDateTime.MAX);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnUsageStatisticsFileForAdmin() {\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnUsageStatisticsFileWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        InputStream resultInputStream =\n+                clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+\n+        assertThat(resultInputStream).isEqualTo(inputStream);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToUsageStatisticsFileWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(inputStream).when(mockUsageMonitoringManager)\n+                .getStatsForNodeAsInputStream(nodeInstance.getName(),\n+                        LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.getUsageStatisticsFile(nodeInstance.getName(),\n+                LocalDateTime.MIN, LocalDateTime.MAX, Duration.ZERO);\n+    }\n+\n+    @Test\n+    public void shouldReturnInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService.getAllowedInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnToolInstanceTypes() {\n+        doReturn(instanceTypes).when(mockInstanceOfferManager).getAllowedToolInstanceTypes(1L, true);\n+\n+        List<InstanceType> resultInstanceTypesList = clusterApiService\n+                .getAllowedToolInstanceTypes(1L, true);\n+\n+        assertThat(resultInstanceTypesList).isEqualTo(instanceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnAllowedInstanceAndPriceTypes() {\n+        final AllowedInstanceAndPriceTypes allowedInstanceAndPriceTypes =\n+                NodeCreatorUtils.getDefaultAllowedInstanceAndPriceTypes();\n+        doReturn(allowedInstanceAndPriceTypes).when(mockInstanceOfferManager)\n+                .getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        AllowedInstanceAndPriceTypes result = clusterApiService.getAllowedInstanceAndPriceTypes(1L, 2L, true);\n+\n+        assertThat(result).isEqualTo(allowedInstanceAndPriceTypes);\n+    }\n+\n+    @Test\n+    public void shouldReturnMasterNodes() {\n+        final MasterNode masterNode = NodeCreatorUtils.getMasterNodeWithEmptyNode();\n+        List<MasterNode> masterNodes = Collections.singletonList(masterNode);\n+        doReturn(masterNodes).when(mockNodesManager).getMasterNodes();\n+\n+        List<MasterNode> resultMasterNodesList = clusterApiService.getMasterNodes();\n+\n+        assertThat(resultMasterNodesList).isEqualTo(masterNodes);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldReturnNodeDisksForAdmin() {\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldReturnNodeDisksWhenPermissionIsGranted() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        initAclEntity(nodeInstance,\n+                Collections.singletonList(new UserPermission(SIMPLE_USER, AclPermission.READ.getMask())));\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        List<NodeDisk> resultNodeDiskList = clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+\n+        assertThat(resultNodeDiskList.size()).isEqualTo(1);\n+        assertThat(resultNodeDiskList.get(0)).isEqualTo(nodeDisk);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDenyAccessToNodeDisksWhenPermissionIsNotGranted() {\n+        initAclEntity(nodeInstance);\n+        doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+\n+        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+    }\n }\n", "next_change": {"commit": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex e3a4484e6..f55c4ca0a 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -541,6 +414,19 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n \n-        clusterApiService.loadNodeDisks(nodeDisk.getNodeId());\n+        assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n+    }\n+\n+    private List<NodeInstance> initSingleNodeInstanceList() {\n+        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n+        singleNodeInstance.add(nodeInstance);\n+        return singleNodeInstance;\n+    }\n+\n+    private List<NodeInstance> initTwoNodeInstancesList() {\n+        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n+        twoNodeInstances.add(nodeInstance);\n+        twoNodeInstances.add(nodeInstanceWithoutPermission);\n+        return twoNodeInstances;\n     }\n }\n", "next_change": {"commit": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex f55c4ca0a..a8b7cdf73 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -417,16 +420,12 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private List<NodeInstance> initSingleNodeInstanceList() {\n-        final List<NodeInstance> singleNodeInstance = new ArrayList<>();\n-        singleNodeInstance.add(nodeInstance);\n-        return singleNodeInstance;\n-    }\n-\n-    private List<NodeInstance> initTwoNodeInstancesList() {\n-        final List<NodeInstance> twoNodeInstances = new ArrayList<>();\n-        twoNodeInstances.add(nodeInstance);\n-        twoNodeInstances.add(nodeInstanceWithoutPermission);\n-        return twoNodeInstances;\n+    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n+        if (isAuthorizeNeeded) {\n+            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+        }\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n+        doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n }\n", "next_change": {"commit": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex a8b7cdf73..9c0def9ea 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -415,17 +424,21 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(nodeDisks).when(mockNodeDiskManager).loadByNodeId(nodeDisk.getNodeId());\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeDisk.getNodeId());\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+        mockRun(pipelineRun);\n \n         assertThrows(AccessDeniedException.class, () -> clusterApiService.loadNodeDisks(nodeDisk.getNodeId()));\n     }\n \n-    private void initMocksBehavior(boolean isAuthorizeNeeded) {\n-        if (isAuthorizeNeeded) {\n-            doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n-        }\n-        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    private void mockNode(final NodeInstance nodeInstance) {\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName(), filterPodsRequest);\n         doReturn(nodeInstance).when(mockNodesManager).getNode(nodeInstance.getName());\n     }\n+\n+    private void mockRun(final PipelineRun pipelineRun) {\n+        doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n+    }\n+\n+    protected void mockUser() {\n+        doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n+    }\n }\n", "next_change": {"commit": "931c37811a89c4bfab582dde776e553cc335edac", "changed_code": [{"header": "diff --git a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\nindex 9c0def9ea..eff4f2e0d 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/cluster/ClusterApiServiceTest.java\n", "chunk": "@@ -438,7 +438,7 @@ public class ClusterApiServiceTest extends AbstractAclTest {\n         doReturn(pipelineRun).when(mockPipelineRunManager).loadPipelineRun(eq(pipelineRun.getId()));\n     }\n \n-    protected void mockUser() {\n+    private void mockUser() {\n         doReturn(SIMPLE_USER).when(mockAuthManager).getAuthorizedUser();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"oid": "bf67280253bcc69263b1123ccefaaa2c35d96a55", "url": "https://github.com/epam/cloud-pipeline/commit/bf67280253bcc69263b1123ccefaaa2c35d96a55", "message": "Issue #1404: Minor refactoring done and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-26T10:37:35Z", "type": "forcePushed"}, {"oid": "82c057ac723a7a40750f14e3f33dab1e67adf2fd", "url": "https://github.com/epam/cloud-pipeline/commit/82c057ac723a7a40750f14e3f33dab1e67adf2fd", "message": "Issue #1404: tests for the first method in the ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:29:23Z", "type": "commit"}, {"oid": "24a40feb30c2b790ad1c83374c4dde2c79d73f06", "url": "https://github.com/epam/cloud-pipeline/commit/24a40feb30c2b790ad1c83374c4dde2c79d73f06", "message": "Issue #1404: implemented tests for ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:32:47Z", "type": "commit"}, {"oid": "b713464980ca18071bff2affee16237e96622694", "url": "https://github.com/epam/cloud-pipeline/commit/b713464980ca18071bff2affee16237e96622694", "message": "Issue #1404: Fixes and improvements for tests for ClusterApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:33:41Z", "type": "commit"}, {"oid": "6c4390756ebdefd9f7767d6a188efe76ea32ce8d", "url": "https://github.com/epam/cloud-pipeline/commit/6c4390756ebdefd9f7767d6a188efe76ea32ce8d", "message": "Issue #1404: Minor style improvements\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:13Z", "type": "commit"}, {"oid": "d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "url": "https://github.com/epam/cloud-pipeline/commit/d5032d1116022dc0b66feaf08fe117b0aeaba5ff", "message": "Issue #1404: Improvement tests for ClusterApiService and Creator utils refactoring\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:30Z", "type": "commit"}, {"oid": "4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "url": "https://github.com/epam/cloud-pipeline/commit/4de67cae0d0b0f38fbea62d7ffedcdd4a4e993c7", "message": "Issue #1404: Refactoring initAclEntity method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:30Z", "type": "commit"}, {"oid": "f64b25fe398480c21040fb9e3421f798a9116097", "url": "https://github.com/epam/cloud-pipeline/commit/f64b25fe398480c21040fb9e3421f798a9116097", "message": "Issue #1404: Added valid masks check and fixes @WithMockUser arguments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:30Z", "type": "commit"}, {"oid": "d992cff3e9c7e3d8f9f820dddf711c6143d73153", "url": "https://github.com/epam/cloud-pipeline/commit/d992cff3e9c7e3d8f9f820dddf711c6143d73153", "message": "Issue #1404: Tests improvements, redundant beans deleted, etc\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:36Z", "type": "commit"}, {"oid": "7122f50a1bc793226f27aedfc96c4960675f1370", "url": "https://github.com/epam/cloud-pipeline/commit/7122f50a1bc793226f27aedfc96c4960675f1370", "message": "Issue #1404: Refactoring in creatorUtils classes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:39Z", "type": "commit"}, {"oid": "c3237f3d382b414f66cb99688468c0695047be92", "url": "https://github.com/epam/cloud-pipeline/commit/c3237f3d382b414f66cb99688468c0695047be92", "message": "Issue #1404: Added license to the PipelineCreatorUtils and other minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:39Z", "type": "commit"}, {"oid": "56eb51d9abb9460ccbae1ef5702f62a8982733c8", "url": "https://github.com/epam/cloud-pipeline/commit/56eb51d9abb9460ccbae1ef5702f62a8982733c8", "message": "Issue #1404: Improvements in the tests and in the mutableListOf method, changes in the PMD rules\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:34:59Z", "type": "commit"}, {"oid": "931c37811a89c4bfab582dde776e553cc335edac", "url": "https://github.com/epam/cloud-pipeline/commit/931c37811a89c4bfab582dde776e553cc335edac", "message": "Issue #1404: Minor test fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:35:08Z", "type": "commit"}, {"oid": "7e15b144352a5a05c200d537980c996e3901c89a", "url": "https://github.com/epam/cloud-pipeline/commit/7e15b144352a5a05c200d537980c996e3901c89a", "message": "Issue #1404: Minor refactoring done and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:35:08Z", "type": "commit"}, {"oid": "407592030a6c68e0b23dc152e1bdd18487f38e08", "url": "https://github.com/epam/cloud-pipeline/commit/407592030a6c68e0b23dc152e1bdd18487f38e08", "message": "Issue #1404: Style (valid indentations) fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:35:09Z", "type": "commit"}, {"oid": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "url": "https://github.com/epam/cloud-pipeline/commit/7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "message": "Issue #1404: Merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:51:58Z", "type": "commit"}, {"oid": "7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "url": "https://github.com/epam/cloud-pipeline/commit/7396f37ba76eafa6d6c7c2c986c479c73d06f0f8", "message": "Issue #1404: Merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-27T13:51:58Z", "type": "forcePushed"}]}