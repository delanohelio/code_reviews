{"pr_number": 1470, "pr_title": "Issue #1405: Implemented tests for ContextualPreferenceController", "pr_author": "cryteq", "pr_createdAt": "2020-10-06T14:56:54Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1470", "timeline": [{"oid": "59fda5ce1f8a90f950b6158c4e55729d6dc79058", "url": "https://github.com/epam/cloud-pipeline/commit/59fda5ce1f8a90f950b6158c4e55729d6dc79058", "message": "Issue #1405: Changed ContextualPreferenceControllerTest to use ContextualPreferenceCreatorUtils", "committedDate": "2020-10-09T10:09:24Z", "type": "forcePushed"}, {"oid": "78e861cfeaa237b9549f48914b133dc89a23946e", "url": "https://github.com/epam/cloud-pipeline/commit/78e861cfeaa237b9549f48914b133dc89a23946e", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions", "committedDate": "2020-10-12T08:53:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NjUxOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1470#discussion_r504486519", "body": "It seems cleaner to inline test class field initiliazations and get rid of `setUp` method.", "bodyText": "It seems cleaner to inline test class field initiliazations and get rid of setUp method.", "bodyHTML": "<p dir=\"auto\">It seems cleaner to inline test class field initiliazations and get rid of <code>setUp</code> method.</p>", "author": "tcibinan", "createdAt": "2020-10-14T08:14:26Z", "path": "api/src/test/java/com/epam/pipeline/controller/contextual/ContextualPreferenceControllerTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.contextual;\n+\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceSearchRequest;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceApiService;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = ContextualPreferenceController.class)\n+public class ContextualPreferenceControllerTest extends AbstractControllerTest {\n+\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String CONTEXTUAL_URL = SERVLET_PATH + \"/contextual/preference\";\n+    private static final String LOAD_URL = CONTEXTUAL_URL + \"/load\";\n+    private static final String LOAD_ALL_URL = LOAD_URL + \"/all\";\n+    private static final ContextualPreferenceLevel PREFERENCE_LEVEL = ContextualPreferenceLevel.ROLE;\n+    private ContextualPreference contextualPreference;\n+    private ResponseResult<ContextualPreference> expectedResult;\n+    private ContextualPreferenceExternalResource contextualPreferenceExternalResource;\n+\n+    @Autowired\n+    private ContextualPreferenceApiService mockContextualPreferenceApiService;\n+\n+    @Before\n+    public void setUp() {\n+        contextualPreference = ContextualPreferenceCreatorUtils.getContextualPreference();\n+        expectedResult = ControllerTestUtils.buildExpectedResult(contextualPreference);\n+\n+        contextualPreferenceExternalResource\n+                = ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    }", "originalCommit": "78e861cfeaa237b9549f48914b133dc89a23946e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NzUwMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1470#discussion_r504497501", "body": "Probably we can move this verbose type reference instantiation to some other place like `ContextualPreferenceCreatorUtils`. It can be pretty handy to use it later on like the following\r\n\r\n```java\r\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \r\n        ContextualPreferenceCreatorUtils.contextualPreferencesListType);\r\n// or\r\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \r\n        ContextualPreferenceCreatorUtils.listOfContextualPreferencesType);\r\n```", "bodyText": "Probably we can move this verbose type reference instantiation to some other place like ContextualPreferenceCreatorUtils. It can be pretty handy to use it later on like the following\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        ContextualPreferenceCreatorUtils.contextualPreferencesListType);\n// or\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        ContextualPreferenceCreatorUtils.listOfContextualPreferencesType);", "bodyHTML": "<p dir=\"auto\">Probably we can move this verbose type reference instantiation to some other place like <code>ContextualPreferenceCreatorUtils</code>. It can be pretty handy to use it later on like the following</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        ContextualPreferenceCreatorUtils.contextualPreferencesListType);\n// or\nControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        ContextualPreferenceCreatorUtils.listOfContextualPreferencesType);\"><pre><span class=\"pl-smi\">ControllerTestUtils</span><span class=\"pl-k\">.</span>assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        <span class=\"pl-smi\">ContextualPreferenceCreatorUtils</span><span class=\"pl-k\">.</span>contextualPreferencesListType);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> or</span>\n<span class=\"pl-smi\">ControllerTestUtils</span><span class=\"pl-k\">.</span>assertResponse(mvcResult, getObjectMapper(), expectedResult, \n        <span class=\"pl-smi\">ContextualPreferenceCreatorUtils</span><span class=\"pl-k\">.</span>listOfContextualPreferencesType);</pre></div>", "author": "tcibinan", "createdAt": "2020-10-14T08:31:30Z", "path": "api/src/test/java/com/epam/pipeline/controller/contextual/ContextualPreferenceControllerTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.contextual;\n+\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceSearchRequest;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceApiService;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = ContextualPreferenceController.class)\n+public class ContextualPreferenceControllerTest extends AbstractControllerTest {\n+\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String CONTEXTUAL_URL = SERVLET_PATH + \"/contextual/preference\";\n+    private static final String LOAD_URL = CONTEXTUAL_URL + \"/load\";\n+    private static final String LOAD_ALL_URL = LOAD_URL + \"/all\";\n+    private static final ContextualPreferenceLevel PREFERENCE_LEVEL = ContextualPreferenceLevel.ROLE;\n+    private ContextualPreference contextualPreference;\n+    private ResponseResult<ContextualPreference> expectedResult;\n+    private ContextualPreferenceExternalResource contextualPreferenceExternalResource;\n+\n+    @Autowired\n+    private ContextualPreferenceApiService mockContextualPreferenceApiService;\n+\n+    @Before\n+    public void setUp() {\n+        contextualPreference = ContextualPreferenceCreatorUtils.getContextualPreference();\n+        expectedResult = ControllerTestUtils.buildExpectedResult(contextualPreference);\n+\n+        contextualPreferenceExternalResource\n+                = ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        mvc().perform(get(LOAD_ALL_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\n+\n+        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n+\n+        final MvcResult mvcResult = mvc().perform(get(LOAD_ALL_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n+\n+        final ResponseResult<List<ContextualPreference>> expectedResult =\n+                ControllerTestUtils.buildExpectedResult(contextualPreferences);\n+\n+        ControllerTestUtils.assertResponse(mvcResult, getObjectMapper(), expectedResult,\n+                new TypeReference<Result<List<ContextualPreference>>>() { });", "originalCommit": "78e861cfeaa237b9549f48914b133dc89a23946e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee0b78ebb8f512b8bb19f94d8ca904b0780d6bad", "url": "https://github.com/epam/cloud-pipeline/commit/ee0b78ebb8f512b8bb19f94d8ca904b0780d6bad", "message": "Issue #1405: Implemented tests for ContextualPreferenceController", "committedDate": "2020-10-16T14:04:40Z", "type": "commit"}, {"oid": "0d4e8f6c9ec96ced966a56e9579de000fd6d0cbb", "url": "https://github.com/epam/cloud-pipeline/commit/0d4e8f6c9ec96ced966a56e9579de000fd6d0cbb", "message": "Issue #1405: Changed ContextualPreferenceControllerTest to use ContextualPreferenceCreatorUtils", "committedDate": "2020-10-16T14:04:41Z", "type": "commit"}, {"oid": "6b01f01c54772e30f934213b4aad8d20c9141ee1", "url": "https://github.com/epam/cloud-pipeline/commit/6b01f01c54772e30f934213b4aad8d20c9141ee1", "message": "Issue #1405: Removed redundant ArgumentCaptor assertions", "committedDate": "2020-10-16T14:04:41Z", "type": "commit"}, {"oid": "1d6ce7abe951a560ea97b59f6140875de8a009d8", "url": "https://github.com/epam/cloud-pipeline/commit/1d6ce7abe951a560ea97b59f6140875de8a009d8", "message": "Issue #1405: setUp method removed", "committedDate": "2020-10-16T14:04:41Z", "type": "commit"}, {"oid": "1c6a61bf27a4113baa11f34e1d0fa4ec1881c569", "url": "https://github.com/epam/cloud-pipeline/commit/1c6a61bf27a4113baa11f34e1d0fa4ec1881c569", "message": "Issue #1405: TypeReference creation moved to CreatorUtils", "committedDate": "2020-10-16T14:04:41Z", "type": "commit"}, {"oid": "8da1fc81fb34ca3b98ea1dbf9908387538313563", "url": "https://github.com/epam/cloud-pipeline/commit/8da1fc81fb34ca3b98ea1dbf9908387538313563", "message": "Issue #1405: ContextualPreferenceControllerTest refactoring", "committedDate": "2020-10-16T14:16:43Z", "type": "commit"}, {"oid": "8da1fc81fb34ca3b98ea1dbf9908387538313563", "url": "https://github.com/epam/cloud-pipeline/commit/8da1fc81fb34ca3b98ea1dbf9908387538313563", "message": "Issue #1405: ContextualPreferenceControllerTest refactoring", "committedDate": "2020-10-16T14:16:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxMzAwNg==", "url": "https://github.com/epam/cloud-pipeline/pull/1470#discussion_r507513006", "body": "I wonder if it is a good idea to group test code lines logically. For instance we could split lines to three parts:\r\n- setup (building resources, configuring mocks)\r\n- test (performing test target operation)\r\n- assert (verifying calls, asserting output)\r\n\r\nIn this test case it seems to increase readability if the code is organised like this:\r\n```java\r\n    @Test\r\n    @WithMockUser\r\n    public void shouldLoadAll() throws Exception {\r\n        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\r\n        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\r\n\r\n        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\r\n\r\n        Mockito.verify(mockContextualPreferenceApiService).loadAll();\r\n        assertResponse(mvcResult, contextualPreferences,\r\n                ContextualPreferenceCreatorUtils.CONTEXTUAL_PREFERENCE_LIST_TYPE);\r\n    }\r\n```\r\n", "bodyText": "I wonder if it is a good idea to group test code lines logically. For instance we could split lines to three parts:\n\nsetup (building resources, configuring mocks)\ntest (performing test target operation)\nassert (verifying calls, asserting output)\n\nIn this test case it seems to increase readability if the code is organised like this:\n    @Test\n    @WithMockUser\n    public void shouldLoadAll() throws Exception {\n        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\n        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n\n        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n\n        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n        assertResponse(mvcResult, contextualPreferences,\n                ContextualPreferenceCreatorUtils.CONTEXTUAL_PREFERENCE_LIST_TYPE);\n    }", "bodyHTML": "<p dir=\"auto\">I wonder if it is a good idea to group test code lines logically. For instance we could split lines to three parts:</p>\n<ul dir=\"auto\">\n<li>setup (building resources, configuring mocks)</li>\n<li>test (performing test target operation)</li>\n<li>assert (verifying calls, asserting output)</li>\n</ul>\n<p dir=\"auto\">In this test case it seems to increase readability if the code is organised like this:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @Test\n    @WithMockUser\n    public void shouldLoadAll() throws Exception {\n        final List&lt;ContextualPreference&gt; contextualPreferences = Collections.singletonList(contextualPreference);\n        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n\n        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n\n        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n        assertResponse(mvcResult, contextualPreferences,\n                ContextualPreferenceCreatorUtils.CONTEXTUAL_PREFERENCE_LIST_TYPE);\n    }\"><pre>    <span class=\"pl-k\">@Test</span>\n    <span class=\"pl-k\">@WithMockUser</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> shouldLoadAll() throws <span class=\"pl-smi\">Exception</span> {\n        <span class=\"pl-k\">final</span> <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">ContextualPreference</span>&gt;</span> contextualPreferences <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Collections</span><span class=\"pl-k\">.</span>singletonList(contextualPreference);\n        <span class=\"pl-smi\">Mockito</span><span class=\"pl-k\">.</span>doReturn(contextualPreferences)<span class=\"pl-k\">.</span>when(mockContextualPreferenceApiService)<span class=\"pl-k\">.</span>loadAll();\n\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">MvcResult</span> mvcResult <span class=\"pl-k\">=</span> performRequest(get(<span class=\"pl-c1\">LOAD_ALL_URL</span>));\n\n        <span class=\"pl-smi\">Mockito</span><span class=\"pl-k\">.</span>verify(mockContextualPreferenceApiService)<span class=\"pl-k\">.</span>loadAll();\n        assertResponse(mvcResult, contextualPreferences,\n                <span class=\"pl-smi\">ContextualPreferenceCreatorUtils</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>CONTEXTUAL_PREFERENCE_LIST_TYPE</span>);\n    }</pre></div>", "author": "tcibinan", "createdAt": "2020-10-19T06:56:20Z", "path": "api/src/test/java/com/epam/pipeline/controller/contextual/ContextualPreferenceControllerTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceLevel;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceSearchRequest;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceApiService;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+@WebMvcTest(controllers = ContextualPreferenceController.class)\n+public class ContextualPreferenceControllerTest extends AbstractControllerTest {\n+\n+    private static final String TEST_STRING = \"TEST\";\n+    private static final String CONTEXTUAL_URL = SERVLET_PATH + \"/contextual/preference\";\n+    private static final String LOAD_URL = CONTEXTUAL_URL + \"/load\";\n+    private static final String LOAD_ALL_URL = LOAD_URL + \"/all\";\n+    private static final ContextualPreferenceLevel PREFERENCE_LEVEL = ContextualPreferenceLevel.ROLE;\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final ContextualPreferenceExternalResource contextualPreferenceExternalResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    @Autowired\n+    private ContextualPreferenceApiService mockContextualPreferenceApiService;\n+\n+    @Test\n+    public void shouldFailLoadAllForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAll() throws Exception {\n+        final List<ContextualPreference> contextualPreferences = Collections.singletonList(contextualPreference);\n+\n+        Mockito.doReturn(contextualPreferences).when(mockContextualPreferenceApiService).loadAll();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n+\n+        Mockito.verify(mockContextualPreferenceApiService).loadAll();\n+\n+        assertResponse(mvcResult, contextualPreferences,\n+                ContextualPreferenceCreatorUtils.CONTEXTUAL_PREFERENCE_LIST_TYPE);\n+    }", "originalCommit": "8da1fc81fb34ca3b98ea1dbf9908387538313563", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9dd85189d687e32f44aa0c58d486b3443cd3e063", "url": "https://github.com/epam/cloud-pipeline/commit/9dd85189d687e32f44aa0c58d486b3443cd3e063", "message": "Issue #1405: Method call checks added, removed extra line breaks", "committedDate": "2020-10-19T11:16:06Z", "type": "commit"}]}