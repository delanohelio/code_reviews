{"pr_number": 8210, "pr_title": "Allow `git` material to honor a refSpec as the branch name", "pr_author": "marques-work", "pr_createdAt": "2020-06-03T02:08:24Z", "pr_url": "https://github.com/gocd/gocd/pull/8210", "merge_commit": "f3d2bf91206ed220428fdaad2287a726ccce8387", "timeline": [{"oid": "e469c5e79207d181edb5945556e51ffe57771f9d", "url": "https://github.com/gocd/gocd/commit/e469c5e79207d181edb5945556e51ffe57771f9d", "message": "wip", "committedDate": "2020-06-03T19:11:27Z", "type": "forcePushed"}, {"oid": "7b3589199cfab68b94331d6e6df5b6523a65d1d5", "url": "https://github.com/gocd/gocd/commit/7b3589199cfab68b94331d6e6df5b6523a65d1d5", "message": "wip", "committedDate": "2020-06-09T19:23:49Z", "type": "forcePushed"}, {"oid": "fa980050d35c252700226f05dc775e7035592220", "url": "https://github.com/gocd/gocd/commit/fa980050d35c252700226f05dc775e7035592220", "message": "wip", "committedDate": "2020-06-09T19:24:49Z", "type": "forcePushed"}, {"oid": "f379b8e4ee576ea880e3c8be807416badaa9cf02", "url": "https://github.com/gocd/gocd/commit/f379b8e4ee576ea880e3c8be807416badaa9cf02", "message": "wip2", "committedDate": "2020-06-11T01:30:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTQ4Nw==", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r438495487", "body": "This is the heart of this change (adding convenience methods); the rest is IntelliJ IDEA regrouping `private` and `protected` methods together at the bottom.", "bodyText": "This is the heart of this change (adding convenience methods); the rest is IntelliJ IDEA regrouping private and protected methods together at the bottom.", "bodyHTML": "<p dir=\"auto\">This is the heart of this change (adding convenience methods); the rest is IntelliJ IDEA regrouping <code>private</code> and <code>protected</code> methods together at the bottom.</p>", "author": "marques-work", "createdAt": "2020-06-11T01:37:15Z", "path": "commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java", "diffHunk": "@@ -319,6 +256,19 @@ public CommandLine withArgs(List<String> args) {\n         return this;\n     }\n \n+    public CommandLine when(boolean condition, Consumer<CommandLine> thenDo) {\n+        return this.tap((cmd) -> {\n+            if (condition) {\n+                thenDo.accept(cmd);\n+            }\n+        });\n+    }\n+\n+    public CommandLine tap(Consumer<CommandLine> thenDo) {\n+        thenDo.accept(this);\n+        return this;\n+    }\n+", "originalCommit": "f379b8e4ee576ea880e3c8be807416badaa9cf02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2NTg3Mw==", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r453065873", "bodyText": "@marques-work thanks for adding comments around the actual changes. Another option to consider is having a separate commit only for things like regrouping/refactoring.", "author": "maheshp", "createdAt": "2020-07-10T20:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cbca50d98d98b15a6581214cafc0e42674c1fa74", "changed_code": [{"header": "diff --git a/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java b/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java\nindex 841a06f900..18e040e8d0 100644\n--- a/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java\n+++ b/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java\n", "chunk": "@@ -256,19 +319,6 @@ public class CommandLine {\n         return this;\n     }\n \n-    public CommandLine when(boolean condition, Consumer<CommandLine> thenDo) {\n-        return this.tap((cmd) -> {\n-            if (condition) {\n-                thenDo.accept(cmd);\n-            }\n-        });\n-    }\n-\n-    public CommandLine tap(Consumer<CommandLine> thenDo) {\n-        thenDo.accept(this);\n-        return this;\n-    }\n-\n     public CommandLine argPassword(String password) {\n         arguments.add(new PasswordArgument(password));\n         return this;\n", "next_change": {"commit": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e", "changed_code": [{"header": "diff --git a/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java b/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java\nindex 18e040e8d0..841a06f900 100644\n--- a/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java\n+++ b/commandline/src/main/java/com/thoughtworks/go/util/command/CommandLine.java\n", "chunk": "@@ -319,6 +256,19 @@ public class CommandLine {\n         return this;\n     }\n \n+    public CommandLine when(boolean condition, Consumer<CommandLine> thenDo) {\n+        return this.tap((cmd) -> {\n+            if (condition) {\n+                thenDo.accept(cmd);\n+            }\n+        });\n+    }\n+\n+    public CommandLine tap(Consumer<CommandLine> thenDo) {\n+        thenDo.accept(this);\n+        return this;\n+    }\n+\n     public CommandLine argPassword(String password) {\n         arguments.add(new PasswordArgument(password));\n         return this;\n", "next_change": null}]}}]}, "revised_code_in_main": null, "commits_in_main": [{"oid": "f3d2bf91206ed220428fdaad2287a726ccce8387", "message": "Merge commit", "committedDate": null}, {"oid": "fdbdbd4477cd8ae9b90b5dae883199f01fe00dce", "committedDate": "2020-12-31 16:27:23 -0800", "message": "Update copyright year"}, {"oid": "9aa6bb85f678a6cf3a97af39ebe681c990fe123a", "committedDate": "2021-08-28 21:40:32 +0800", "message": "Migrate deprecations of code only intended for test usage to `@TestOnly`"}, {"oid": "5638a49a35e5a96836f8870deae69a8e9c8f1093", "committedDate": "2022-01-01 00:40:52 +0800", "message": "Update copyright year"}, {"oid": "ba4d98fdd7779e901c1adbdd7269545fcc5e5abe", "committedDate": "2022-05-22 14:45:48 +0800", "message": "Migrate to use of Charset type everywhere we can"}, {"oid": "daf4fa365ddc4e756fcb2b1c7789d9bc5e847531", "committedDate": "2022-05-22 14:45:48 +0800", "message": "Simplify old object serialization test helper"}, {"oid": "5c7c6c226dc2caa1fe729f5142536634912e795a", "committedDate": "2022-07-30 15:50:36 +0800", "message": "ThoughtWorks -> Thoughtworks"}, {"oid": "0f58107c851cf2df6ce7c6902eebde796dc1f742", "committedDate": "2023-01-02 00:01:58 +0800", "message": "Update copyright year"}, {"oid": "4e4a096da9a703b50ed6045570752c45fd3e9e00", "committedDate": "2023-01-10 16:19:18 +0800", "message": "Simplify command line exception handling"}, {"oid": "215e262fd27a8e2644115283b09cf7f2ef4d6db7", "committedDate": "2023-01-10 16:40:01 +0800", "message": "Restore original license header to code borrowed from Maven projects"}, {"oid": "a3d9e2e4abb4ec179361983882f654287d404ca8", "committedDate": "2023-01-23 12:01:45 +0100", "message": "Crop overly long log lines"}, {"oid": "4d8927491bc6676f3b2af6b43e2ebcf00880e9e5", "committedDate": "2023-01-24 18:29:43 +0800", "message": "Rationalise @TestOnly usage, replacing deprecations"}, {"oid": "344e328550577b6706bf2f664324eb6baf77d453", "committedDate": "2023-01-29 18:01:33 +0800", "message": "Merge pull request #11231 from adnovum/feature/crop-long-lines"}]}, {"oid": "1772ef1fcc5ea380496e95b826081fa0ebcfd23d", "url": "https://github.com/gocd/gocd/commit/1772ef1fcc5ea380496e95b826081fa0ebcfd23d", "message": "wip2", "committedDate": "2020-06-11T01:38:25Z", "type": "forcePushed"}, {"oid": "15947872ae7ecd0e2db1ff30b861776551dc3cc8", "url": "https://github.com/gocd/gocd/commit/15947872ae7ecd0e2db1ff30b861776551dc3cc8", "message": "wip2", "committedDate": "2020-06-11T09:43:20Z", "type": "forcePushed"}, {"oid": "55fcb11c514f73dba198e8a8be9227ab1430d07e", "url": "https://github.com/gocd/gocd/commit/55fcb11c514f73dba198e8a8be9227ab1430d07e", "message": "Git materials can checkout arbitrary refs\n\n  - GoCD's `git` layer knows how to handle refspecs provided in the branch field.\n  - Refspecs are assumed to be a non-wildcard; wildcards have not been tested\n    and aren't meaningful to the intent of use (i.e., updating a local agent\n    workspace).\n  - The main motivation behind this is to allow GoCD to support pull request\n    refs as a pipeline material for the branch support work.\n\nImplementation notes\n--------------------\n\n`RefSpecHelper` handles detection and parsing of a given branch or refspec. Mainly,\nthis utility class extracts source and destination components of the refspec and\nbuilds sensible values for local branch names and remote branch names. Also notably,\nit infers a full destination ref from a shorthand refspec. The logic for this is\nstraightforward:\n\n1. When given a shorthand refspec in the form: `refs/namespace/foo:bar`\n    - the refspec destination is expanded under the `origin` remote as\n      `refs/namespace/foo:refs/remotes/origin/bar`.\n\n2. When given a full refspec in the form: `refs/namespace/foo:refs/anything/bar`\n    - the refspec is interpreted as-is.\n\n`GitCommand#clone()` and `GitCommand#cloneWithNoCheckout()` have been adapted to\naccommodate refspecs; when a refspec is detected, the clone behaviors configure\nthe `git-fetch` configurations with the refspec instead of the implicit/default\n`+refs/heads/*:refs/remotes/origin/*` so that future `git fetch` operations update\nthe correct refs. This ensures that flyweights and agent sandboxes receive new\ncommits. The local branch is also explicitly created before switching the local\nrepo `HEAD` pointer.\n\n`GitMaterial` is also refspec aware and knows how to report the local branch name\nfrom the given refspec. Additionally, `GitMaterial#isRepositoryChanged()` performs\nadditional validation on the fetch configuration before reusing (or re-cloning) a\nflyweight or agent sandbox for a given material.\n\n`GitCommand` and `GitMaterial` delegate to `RefSpecHelper` for the detection and\ninterpretation of refspecs.\n\nThere were also some convenience methods added to `SCMCommand` and `CommandLine`\nin addition to miscellaneous code formatting, cleanup, and reorganization.", "committedDate": "2020-06-12T02:24:54Z", "type": "forcePushed"}, {"oid": "cc15f6098806685d3dae7c97d0a4e4364b59009d", "url": "https://github.com/gocd/gocd/commit/cc15f6098806685d3dae7c97d0a4e4364b59009d", "message": "wip", "committedDate": "2020-07-01T22:13:11Z", "type": "forcePushed"}, {"oid": "e1d97eaa46f8f3006c922c7b257cc4c85323291e", "url": "https://github.com/gocd/gocd/commit/e1d97eaa46f8f3006c922c7b257cc4c85323291e", "message": "wip", "committedDate": "2020-07-01T23:12:29Z", "type": "forcePushed"}, {"oid": "22db5320e1cd398cc87a47438bb8525e572a6dc2", "url": "https://github.com/gocd/gocd/commit/22db5320e1cd398cc87a47438bb8525e572a6dc2", "message": "wip", "committedDate": "2020-07-01T23:18:46Z", "type": "forcePushed"}, {"oid": "33f1376933b88a8f148ccbdbeea3199cb2984367", "url": "https://github.com/gocd/gocd/commit/33f1376933b88a8f148ccbdbeea3199cb2984367", "message": "Git materials can checkout arbitrary refs\n\n  - GoCD's `git` layer knows how to handle refspecs provided in the branch field.\n  - Refspecs _**must NOT**_ contain wildcards; they are not meaningful to how GoCD\n    will use materials (i.e., updating a local agent workspace).\n  - The main motivation behind this is to allow GoCD to support pull request\n    refs as a pipeline material for the branch support work.\n\nImplementation notes\n--------------------\n\n`RefSpecHelper` handles detection and parsing of a given branch or refspec. Mainly,\nthis utility class extracts source and destination components of the refspec and\nbuilds sensible values for local branch names and remote branch names. Also notably,\nit infers a full destination ref from a shorthand refspec. The logic for this is\nstraightforward:\n\n1. When given a shorthand refspec in the form: `refs/namespace/foo:bar`\n    - the refspec destination is expanded under the `origin` remote as\n      `refs/namespace/foo:refs/remotes/origin/bar`.\n\n2. When given a full refspec in the form: `refs/namespace/foo:refs/anything/bar`\n    - the refspec is interpreted as-is.\n\n`GitCommand#clone()` and `GitCommand#cloneWithNoCheckout()` have been adapted to\naccommodate refspecs; when a refspec is detected, the clone behaviors configure\nthe `git-fetch` configurations with the refspec instead of the implicit/default\n`+refs/heads/*:refs/remotes/origin/*` so that future `git fetch` operations update\nthe correct refs. This ensures that flyweights and agent sandboxes receive new\ncommits. The local branch is also explicitly created before switching the local\nrepo `HEAD` pointer.\n\n`GitMaterial` is also refspec aware and knows how to report the local branch name\nfrom the given refspec. Additionally, `GitMaterial#isRepositoryChanged()` performs\nadditional validation on the fetch configuration before reusing (or re-cloning) a\nflyweight or agent sandbox for a given material.\n\n`GitCommand` and `GitMaterial` delegate to `RefSpecHelper` for the detection and\ninterpretation of refspecs.\n\nThere were also some convenience methods added to `SCMCommand` and `CommandLine`\nin addition to miscellaneous code formatting, cleanup, and reorganization.", "committedDate": "2020-07-02T22:19:47Z", "type": "forcePushed"}, {"oid": "e325885e47e8fefc197be987889e3e8fc5460ded", "url": "https://github.com/gocd/gocd/commit/e325885e47e8fefc197be987889e3e8fc5460ded", "message": "Git materials can checkout arbitrary refs\n\n  - GoCD's `git` layer knows how to handle refspecs provided in the branch field.\n  - Refspecs _**must NOT**_ contain wildcards; they are not meaningful to how GoCD\n    will use materials (i.e., updating a local agent workspace).\n  - The main motivation behind this is to allow GoCD to support pull request\n    refs as a pipeline material for the branch support work.\n\nImplementation notes\n--------------------\n\n`RefSpecHelper` handles detection and parsing of a given branch or refspec. Mainly,\nthis utility class extracts source and destination components of the refspec and\nbuilds sensible values for local branch names and remote branch names. Also notably,\nit infers a full destination ref from a shorthand refspec. The logic for this is\nstraightforward:\n\n1. When given a shorthand refspec in the form: `refs/namespace/foo:bar`\n    - the refspec destination is expanded under the `origin` remote as\n      `refs/namespace/foo:refs/remotes/origin/bar`.\n\n2. When given a full refspec in the form: `refs/namespace/foo:refs/anything/bar`\n    - the refspec is interpreted as-is.\n\n`GitCommand#clone()` and `GitCommand#cloneWithNoCheckout()` have been adapted to\naccommodate refspecs; when a refspec is detected, the clone behaviors configure\nthe `git-fetch` configurations with the refspec instead of the implicit/default\n`+refs/heads/*:refs/remotes/origin/*` so that future `git fetch` operations update\nthe correct refs. This ensures that flyweights and agent sandboxes receive new\ncommits. The local branch is also explicitly created before switching the local\nrepo `HEAD` pointer.\n\n`GitMaterial` is also refspec aware and knows how to report the local branch name\nfrom the given refspec. Additionally, `GitMaterial#isRepositoryChanged()` performs\nadditional validation on the fetch configuration before reusing (or re-cloning) a\nflyweight or agent sandbox for a given material.\n\n`GitCommand` and `GitMaterial` delegate to `RefSpecHelper` for the detection and\ninterpretation of refspecs.\n\nThere were also some convenience methods added to `SCMCommand` and `CommandLine`\nin addition to miscellaneous code formatting, cleanup, and reorganization.", "committedDate": "2020-07-03T00:18:02Z", "type": "forcePushed"}, {"oid": "cbca50d98d98b15a6581214cafc0e42674c1fa74", "url": "https://github.com/gocd/gocd/commit/cbca50d98d98b15a6581214cafc0e42674c1fa74", "message": "Regenerate GitMaterial and GitMaterialConfig equals(), hashCode(), toString()", "committedDate": "2020-07-03T11:29:02Z", "type": "commit"}, {"oid": "5e4c66a1db6f3945bc55fb850e5c6ff10cbaf6d8", "url": "https://github.com/gocd/gocd/commit/5e4c66a1db6f3945bc55fb850e5c6ff10cbaf6d8", "message": "Rearrange `GitCommand` and `SCMCommand` methods by visibility to make the public API clearer", "committedDate": "2020-07-03T11:29:02Z", "type": "commit"}, {"oid": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e", "url": "https://github.com/gocd/gocd/commit/1661b8d88c33d9f55233d4c8c9befe022b2e4e0e", "message": "Git materials can checkout arbitrary refs\n\n  - GoCD's `git` layer knows how to handle refspecs provided in the branch field.\n  - Refspecs _**must NOT**_ contain wildcards; they are not meaningful to how GoCD\n    will use materials (i.e., updating a local agent workspace).\n  - The main motivation behind this is to allow GoCD to support pull request\n    refs as a pipeline material for the branch support work.\n\nImplementation notes\n--------------------\n\n`RefSpecHelper` handles detection and parsing of a given branch or refspec. Mainly,\nthis utility class extracts source and destination components of the refspec and\nbuilds sensible values for local branch names and remote branch names. Also notably,\nit infers a full destination ref from a shorthand refspec. The logic for this is\nstraightforward:\n\n1. When given a shorthand refspec in the form: `refs/namespace/foo:bar`\n    - the refspec destination is expanded under the `origin` remote as\n      `refs/namespace/foo:refs/remotes/origin/bar`.\n\n2. When given a full refspec in the form: `refs/namespace/foo:refs/anything/bar`\n    - the refspec is interpreted as-is.\n\n`GitCommand#clone()` and `GitCommand#cloneWithNoCheckout()` have been adapted to\naccommodate refspecs; when a refspec is detected, the clone behaviors configure\nthe `git-fetch` configurations with the refspec instead of the implicit/default\n`+refs/heads/*:refs/remotes/origin/*` so that future `git fetch` operations update\nthe correct refs. This ensures that flyweights and agent sandboxes receive new\ncommits. The local branch is also explicitly created before switching the local\nrepo `HEAD` pointer.\n\n`GitMaterial` is also refspec aware and knows how to report the local branch name\nfrom the given refspec. Additionally, `GitMaterial#isRepositoryChanged()` performs\nadditional validation on the fetch configuration before reusing (or re-cloning) a\nflyweight or agent sandbox for a given material.\n\n`GitCommand` and `GitMaterial` delegate to `RefSpecHelper` for the detection and\ninterpretation of refspecs.\n\nThere were also some convenience methods added to `SCMCommand` and `CommandLine`\nin addition to miscellaneous code formatting, cleanup, and reorganization.", "committedDate": "2020-07-03T11:29:02Z", "type": "commit"}, {"oid": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e", "url": "https://github.com/gocd/gocd/commit/1661b8d88c33d9f55233d4c8c9befe022b2e4e0e", "message": "Git materials can checkout arbitrary refs\n\n  - GoCD's `git` layer knows how to handle refspecs provided in the branch field.\n  - Refspecs _**must NOT**_ contain wildcards; they are not meaningful to how GoCD\n    will use materials (i.e., updating a local agent workspace).\n  - The main motivation behind this is to allow GoCD to support pull request\n    refs as a pipeline material for the branch support work.\n\nImplementation notes\n--------------------\n\n`RefSpecHelper` handles detection and parsing of a given branch or refspec. Mainly,\nthis utility class extracts source and destination components of the refspec and\nbuilds sensible values for local branch names and remote branch names. Also notably,\nit infers a full destination ref from a shorthand refspec. The logic for this is\nstraightforward:\n\n1. When given a shorthand refspec in the form: `refs/namespace/foo:bar`\n    - the refspec destination is expanded under the `origin` remote as\n      `refs/namespace/foo:refs/remotes/origin/bar`.\n\n2. When given a full refspec in the form: `refs/namespace/foo:refs/anything/bar`\n    - the refspec is interpreted as-is.\n\n`GitCommand#clone()` and `GitCommand#cloneWithNoCheckout()` have been adapted to\naccommodate refspecs; when a refspec is detected, the clone behaviors configure\nthe `git-fetch` configurations with the refspec instead of the implicit/default\n`+refs/heads/*:refs/remotes/origin/*` so that future `git fetch` operations update\nthe correct refs. This ensures that flyweights and agent sandboxes receive new\ncommits. The local branch is also explicitly created before switching the local\nrepo `HEAD` pointer.\n\n`GitMaterial` is also refspec aware and knows how to report the local branch name\nfrom the given refspec. Additionally, `GitMaterial#isRepositoryChanged()` performs\nadditional validation on the fetch configuration before reusing (or re-cloning) a\nflyweight or agent sandbox for a given material.\n\n`GitCommand` and `GitMaterial` delegate to `RefSpecHelper` for the detection and\ninterpretation of refspecs.\n\nThere were also some convenience methods added to `SCMCommand` and `CommandLine`\nin addition to miscellaneous code formatting, cleanup, and reorganization.", "committedDate": "2020-07-03T11:29:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDE3Ng==", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r450160176", "body": "@marques-work - is this `System.out.printf` intentional?", "bodyText": "@marques-work - is this System.out.printf intentional?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/marques-work/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/marques-work\">@marques-work</a> - is this <code>System.out.printf</code> intentional?</p>", "author": "GaneshSPatil", "createdAt": "2020-07-06T11:33:52Z", "path": "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "diffHunk": "@@ -443,13 +314,136 @@ public GitMaterial withShallowClone(boolean value) {\n         return gitMaterial;\n     }\n \n-    public String branchWithDefault() {\n-        return isBlank(branch) ? GitMaterialConfig.DEFAULT_BRANCH : branch;\n+    public String effectiveLocalBranch() {\n+        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendCriteria(Map<String, Object> parameters) {\n+        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n+        parameters.put(\"branch\", refSpecOrBranch);\n+    }\n+\n+    @Override\n+    protected void appendAttributes(Map<String, Object> parameters) {\n+        parameters.put(\"url\", url);\n+        parameters.put(\"branch\", refSpecOrBranch);\n+        parameters.put(\"shallowClone\", shallowClone);\n+    }\n+\n+    @Override\n+    protected String getLocation() {\n+        return url.forDisplay();\n     }\n \n     @Override\n     protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n         super.setGoMaterialVariables(environmentVariableContext);\n-        setVariableWithName(environmentVariableContext, branchWithDefault(), GO_MATERIAL_BRANCH);\n+        setVariableWithName(environmentVariableContext, effectiveLocalBranch(), GO_MATERIAL_BRANCH);\n+    }\n+\n+    private GitCommand getGit(File workingdir, SubprocessExecutionContext executionContext) {\n+        InMemoryStreamConsumer output = inMemoryConsumer();\n+        try {\n+            return git(output, workingdir, DEFAULT_SHALLOW_CLONE_DEPTH, executionContext);\n+        } catch (Exception e) {\n+            throw bomb(e.getMessage() + \" \" + output.getStdError(), e);\n+        }\n+    }\n+\n+    private GitCommand git(ConsoleOutputStreamConsumer outputStreamConsumer, final File workingFolder, int preferredCloneDepth, SubprocessExecutionContext executionContext) throws Exception {\n+        if (isSubmoduleFolder()) {\n+            return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n+        }\n+        System.out.printf(\"**** [%s] WorkingDir for %s: %s\\n\", executionContext.isServer() ? \"server\" : \"agent\", urlForCommandLine(), workingFolder.getPath());", "originalCommit": "1661b8d88c33d9f55233d4c8c9befe022b2e4e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwNjQyMg==", "url": "https://github.com/gocd/gocd/pull/8210#discussion_r450606422", "bodyText": "@GaneshSPatil oops! no, it is not.", "author": "marques-work", "createdAt": "2020-07-07T04:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE2MDE3Ng=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "9e5297fcda5504baae150d0696d797e759fba53b", "changed_code": [{"header": "diff --git a/domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java b/domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java\nindex d2cc552c37..a6c8762a71 100644\n--- a/domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java\n+++ b/domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java\n", "chunk": "@@ -355,7 +355,7 @@ public class GitMaterial extends ScmMaterial implements PasswordAwareMaterial {\n         if (isSubmoduleFolder()) {\n             return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n         }\n-        System.out.printf(\"**** [%s] WorkingDir for %s: %s\\n\", executionContext.isServer() ? \"server\" : \"agent\", urlForCommandLine(), workingFolder.getPath());\n+\n         GitCommand gitCommand = new GitCommand(getFingerprint(), workingFolder, refSpecOrBranch, false, secrets());\n         if (!isGitRepository(workingFolder) || isRepositoryChanged(gitCommand, workingFolder)) {\n             LOG.debug(\"Invalid git working copy or repository changed. Delete folder: {}\", workingFolder);\n", "next_change": null}]}, "commits_in_main": [{"oid": "f3d2bf91206ed220428fdaad2287a726ccce8387", "message": "Merge commit", "committedDate": null}, {"oid": "9e5297fcda5504baae150d0696d797e759fba53b", "committedDate": "2020-07-06 21:39:52 -0700", "message": "My bad, remove sysout."}, {"oid": "45230c2a32e6cdb12cc7585506bb8ebf8b0816b6", "committedDate": "2020-10-15 09:56:19 +0530", "message": "Update the message when git version installed is below min supported by GoCD"}, {"oid": "691b479f1310034992da141760e9c5d1f5b60e8a", "committedDate": "2020-12-10 11:27:35 +0530", "message": "SCMMaterial changes #000"}, {"oid": "fdbdbd4477cd8ae9b90b5dae883199f01fe00dce", "committedDate": "2020-12-31 16:27:23 -0800", "message": "Update copyright year"}, {"oid": "5638a49a35e5a96836f8870deae69a8e9c8f1093", "committedDate": "2022-01-01 00:40:52 +0800", "message": "Update copyright year"}, {"oid": "5c7c6c226dc2caa1fe729f5142536634912e795a", "committedDate": "2022-07-30 15:50:36 +0800", "message": "ThoughtWorks -> Thoughtworks"}, {"oid": "58929840fb809faf6cf178480b2e08a54d88af66", "committedDate": "2022-12-19 11:29:09 +0800", "message": "Apply a number of code cleanup refactorings"}, {"oid": "0f58107c851cf2df6ce7c6902eebde796dc1f742", "committedDate": "2023-01-02 00:01:58 +0800", "message": "Update copyright year"}]}]}