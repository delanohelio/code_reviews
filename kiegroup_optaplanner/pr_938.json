{"pr_number": 938, "pr_title": "PLANNER-1821 & PLANNER-1873: Add Constraint Provider for Coach Shuttle Gathering", "pr_author": "Christopher-Chianelli", "pr_createdAt": "2020-09-18T14:54:34Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/938", "timeline": [{"oid": "57479c9b3729ee08c521bf5a37f22148ace25aa6", "url": "https://github.com/kiegroup/optaplanner/commit/57479c9b3729ee08c521bf5a37f22148ace25aa6", "message": "shuttle capacity", "committedDate": "2020-09-17T17:59:02Z", "type": "commit"}, {"oid": "a91e49252bf3078561edf198cda47bad1339223f", "url": "https://github.com/kiegroup/optaplanner/commit/a91e49252bf3078561edf198cda47bad1339223f", "message": "Making progress on coach capacity", "committedDate": "2020-09-17T17:59:06Z", "type": "commit"}, {"oid": "dc9fe458bb940645abd85da935eeb008b4b8f13b", "url": "https://github.com/kiegroup/optaplanner/commit/dc9fe458bb940645abd85da935eeb008b4b8f13b", "message": "Making more progress", "committedDate": "2020-09-17T17:59:06Z", "type": "commit"}, {"oid": "443c4bc07caf376a4f345873ec54f33cdb24a74e", "url": "https://github.com/kiegroup/optaplanner/commit/443c4bc07caf376a4f345873ec54f33cdb24a74e", "message": "Removing debugging printlns", "committedDate": "2020-09-17T17:59:06Z", "type": "commit"}, {"oid": "879ee3e211c1b31a652909d7aa0e64f82d31fe44", "url": "https://github.com/kiegroup/optaplanner/commit/879ee3e211c1b31a652909d7aa0e64f82d31fe44", "message": "Fix toString", "committedDate": "2020-09-17T17:59:06Z", "type": "commit"}, {"oid": "c5ea1fc3d3c14a604fb30d2463e8603d54df3485", "url": "https://github.com/kiegroup/optaplanner/commit/c5ea1fc3d3c14a604fb30d2463e8603d54df3485", "message": "Adapt to the latest API", "committedDate": "2020-09-17T17:59:06Z", "type": "commit"}, {"oid": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "url": "https://github.com/kiegroup/optaplanner/commit/8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "message": "PLANNER-1873: Add ConstraintProvider for CoachShuttleGathering", "committedDate": "2020-09-18T14:48:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NjA3Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491856076", "body": "Something to try if it works: You might be able to move this @CustomShadowVariable of Coach and Shuttle to Bus. Even though the sources differ, just use the union of sources.", "bodyText": "Something to try if it works: You might be able to move this @CustomShadowVariable of Coach and Shuttle to Bus. Even though the sources differ, just use the union of sources.", "bodyHTML": "<p dir=\"auto\">Something to try if it works: You might be able to move this @CustomShadowVariable of Coach and Shuttle to Bus. Even though the sources differ, just use the union of sources.</p>", "author": "ge0ffrey", "createdAt": "2020-09-21T08:03:50Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/Shuttle.java", "diffHunk": "@@ -51,6 +54,14 @@ public void setDestination(StopOrHub destination) {\n         this.destination = destination;\n     }\n \n+    @Override\n+    @CustomShadowVariable(variableListenerClass = ShuttlePassengerCountTotalUpdatingVariableListener.class,\n+            sources = { @PlanningVariableReference(entityClass = BusStop.class, variableName = \"bus\"),\n+                    @PlanningVariableReference(entityClass = Shuttle.class, variableName = \"destination\") })", "originalCommit": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5NjE2MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492296161", "bodyText": "Can't do - leads to double counting it seems (despite code being exactly the same); was able to put it in an abstract class and have two variable listeners extend it (the abstract method is literally an instanceof check)", "author": "Christopher-Chianelli", "createdAt": "2020-09-21T19:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NjA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1Njg0MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491856841", "body": "Please follow the naming of the other VariableListeners for consistency across examples, such as ArrivalTimeUpdatingVariableListener. These 2 methods would be \"update...\" and be below the before/after calls.", "bodyText": "Please follow the naming of the other VariableListeners for consistency across examples, such as ArrivalTimeUpdatingVariableListener. These 2 methods would be \"update...\" and be below the before/after calls.", "bodyHTML": "<p dir=\"auto\">Please follow the naming of the other VariableListeners for consistency across examples, such as ArrivalTimeUpdatingVariableListener. These 2 methods would be \"update...\" and be below the before/after calls.</p>", "author": "ge0ffrey", "createdAt": "2020-09-21T08:05:28Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public class CoachPassengerCountTotalUpdatingVariableListener implements VariableListener<BusStop> {\n+\n+    private static void adjustBus(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, Bus bus, int difference) {\n+        if (difference == 0) {\n+            return;\n+        }\n+        scoreDirector.beforeVariableChanged(bus, \"passengerQuantityTotal\");\n+        bus.setPassengerQuantityTotal(bus.getPassengerQuantityTotal() + difference);\n+        scoreDirector.afterVariableChanged(bus, \"passengerQuantityTotal\");\n+        if (bus.getPassengerQuantityTotal() < 0) {\n+            throw new IllegalStateException(\"Passenger quantity in \" + bus + \" got under zero here.\");\n+        }\n+    }\n+\n+    private static void adjust(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {", "originalCommit": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NzUyNw==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r491857527", "body": "method naming: increase/decrease what?\r\nAlso, I wouldn't extract them into separate methods, just call true/false directly from before/after.", "bodyText": "method naming: increase/decrease what?\nAlso, I wouldn't extract them into separate methods, just call true/false directly from before/after.", "bodyHTML": "<p dir=\"auto\">method naming: increase/decrease what?<br>\nAlso, I wouldn't extract them into separate methods, just call true/false directly from before/after.</p>", "author": "ge0ffrey", "createdAt": "2020-09-21T08:06:52Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/CoachPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public class CoachPassengerCountTotalUpdatingVariableListener implements VariableListener<BusStop> {\n+\n+    private static void adjustBus(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, Bus bus, int difference) {\n+        if (difference == 0) {\n+            return;\n+        }\n+        scoreDirector.beforeVariableChanged(bus, \"passengerQuantityTotal\");\n+        bus.setPassengerQuantityTotal(bus.getPassengerQuantityTotal() + difference);\n+        scoreDirector.afterVariableChanged(bus, \"passengerQuantityTotal\");\n+        if (bus.getPassengerQuantityTotal() < 0) {\n+            throw new IllegalStateException(\"Passenger quantity in \" + bus + \" got under zero here.\");\n+        }\n+    }\n+\n+    private static void adjust(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!(bus instanceof Coach)) {\n+            return;\n+        }\n+        adjustBus(scoreDirector, bus, increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity());\n+    }\n+\n+    private static void increase(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop) {\n+        adjust(scoreDirector, busStop, true);\n+    }\n+\n+    private static void decrease(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop) {\n+        adjust(scoreDirector, busStop, false);\n+    }", "originalCommit": "8fc4d458b7f3738a48b1a550b5b6a745f112b05a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1dc8d2910875dacab8d133b073967cd4f2c59b79", "url": "https://github.com/kiegroup/optaplanner/commit/1dc8d2910875dacab8d133b073967cd4f2c59b79", "message": "Refactor the bus passenger count listener, update names", "committedDate": "2020-09-21T19:35:55Z", "type": "forcePushed"}, {"oid": "59581a56c5ebd32c61f4ff430cbbc3ae34ad5362", "url": "https://github.com/kiegroup/optaplanner/commit/59581a56c5ebd32c61f4ff430cbbc3ae34ad5362", "message": "Refactor the bus passenger count listener, update names", "committedDate": "2020-09-21T19:37:25Z", "type": "forcePushed"}, {"oid": "310795edbdbb79f6519be13c8bb71cb055710134", "url": "https://github.com/kiegroup/optaplanner/commit/310795edbdbb79f6519be13c8bb71cb055710134", "message": "Refactor the bus passenger count listener, update names", "committedDate": "2020-09-21T19:38:52Z", "type": "commit"}, {"oid": "310795edbdbb79f6519be13c8bb71cb055710134", "url": "https://github.com/kiegroup/optaplanner/commit/310795edbdbb79f6519be13c8bb71cb055710134", "message": "Refactor the bus passenger count listener, update names", "committedDate": "2020-09-21T19:38:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303049", "body": "We can probably improve this:\r\n\r\n    int quantity = busStop.getPassengerQuantity();\r\n    if (quantity == 0) {\r\n        return;\r\n    }\r\n    int difference = increase ? quantity : -quantity;\r\n\r\nIf this code is called often, this will bring a small perf improvement.", "bodyText": "We can probably improve this:\nint quantity = busStop.getPassengerQuantity();\nif (quantity == 0) {\n    return;\n}\nint difference = increase ? quantity : -quantity;\n\nIf this code is called often, this will bring a small perf improvement.", "bodyHTML": "<p dir=\"auto\">We can probably improve this:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int quantity = busStop.getPassengerQuantity();\nif (quantity == 0) {\n    return;\n}\nint difference = increase ? quantity : -quantity;\"><pre><code>int quantity = busStop.getPassengerQuantity();\nif (quantity == 0) {\n    return;\n}\nint difference = increase ? quantity : -quantity;\n</code></pre></div>\n<p dir=\"auto\">If this code is called often, this will bring a small perf improvement.</p>", "author": "triceo", "createdAt": "2020-09-21T19:42:01Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/domain/solver/BusPassengerCountTotalUpdatingVariableListener.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.coachshuttlegathering.domain.solver;\n+\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.listener.VariableListener;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.CoachShuttleGatheringSolution;\n+\n+public abstract class BusPassengerCountTotalUpdatingVariableListener implements VariableListener<Object> {\n+\n+    @Override\n+    public void beforeEntityAdded(ScoreDirector scoreDirector, Object busStop) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityAdded(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    @Override\n+    public void afterVariableChanged(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, true);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        // Do nothing\n+    }\n+\n+    @Override\n+    public void afterEntityRemoved(ScoreDirector scoreDirector, Object entity) {\n+        if (entity instanceof BusStop) {\n+            updateBusPassengerCount(scoreDirector, (BusStop) entity, false);\n+        }\n+    }\n+\n+    private void updateBusPassengerCount(ScoreDirector<CoachShuttleGatheringSolution> scoreDirector, BusStop busStop,\n+            boolean increase) {\n+        Bus bus = busStop.getBus();\n+        if (!isCorrectBusInstance(bus)) {\n+            return;\n+        }\n+        int difference = increase ? busStop.getPassengerQuantity() : -busStop.getPassengerQuantity();\n+        if (difference == 0) {\n+            return;\n+        }", "originalCommit": "310795edbdbb79f6519be13c8bb71cb055710134", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNzM1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492307353", "bodyText": "As a side note, can a bus stop have 0 passengers? I don't think it can (and if it does, it an error; passengerQuantity is NOT a shadow variable or a planning variable)", "author": "Christopher-Chianelli", "createdAt": "2020-09-21T19:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMDcyNg==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492310726", "bodyText": "Good point. Maybe we should remove that check altogether.", "author": "triceo", "createdAt": "2020-09-21T19:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzUzMw==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303533", "body": "Let's `import static ...ConstraintCollectors...`\r\nAFAIK the other constraint providers do it too.", "bodyText": "Let's import static ...ConstraintCollectors...\nAFAIK the other constraint providers do it too.", "bodyHTML": "<p dir=\"auto\">Let's <code>import static ...ConstraintCollectors...</code><br>\nAFAIK the other constraint providers do it too.</p>", "author": "triceo", "createdAt": "2020-09-21T19:43:03Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())", "originalCommit": "310795edbdbb79f6519be13c8bb71cb055710134", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzk1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492303953", "body": "Not sure what the convention here is, but maybe `import static ... HardSoftLongScore...` as well?", "bodyText": "Not sure what the convention here is, but maybe import static ... HardSoftLongScore... as well?", "bodyHTML": "<p dir=\"auto\">Not sure what the convention here is, but maybe <code>import static ... HardSoftLongScore...</code> as well?</p>", "author": "triceo", "createdAt": "2020-09-21T19:43:54Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,", "originalCommit": "310795edbdbb79f6519be13c8bb71cb055710134", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMDg3OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492310879", "bodyText": "No, all constraint providers in optaplanner-examples use ScoreType.field, not a static import of field from ScoreType.", "author": "Christopher-Chianelli", "createdAt": "2020-09-21T19:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwMzk1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNDc5OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492304799", "body": "```suggestion\r\n    /* \r\n       Correct the double counting\r\n       Explanation: groupBy is like accumulate, but it doesn't trigger on empty streams.\r\n       We need something like\r\n        .accumulate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\r\n       To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\r\n       one to remove double counting).\r\n     */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Correct the double counting\n          \n          \n            \n                // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n          \n          \n            \n                // We need something like\n          \n          \n            \n                // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n          \n          \n            \n                // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n          \n          \n            \n                // one to remove double counting)\n          \n          \n            \n                /* \n          \n          \n            \n                   Correct the double counting\n          \n          \n            \n                   Explanation: groupBy is like accumulate, but it doesn't trigger on empty streams.\n          \n          \n            \n                   We need something like\n          \n          \n            \n                    .accumulate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n          \n          \n            \n                   To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n          \n          \n            \n                   one to remove double counting).\n          \n          \n            \n                 */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Correct the double counting</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> We need something like</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> .accumlate(Function&lt;ConstraintStream, UniConstraintStream&lt;T&gt;&gt;, T defaultValue): ConstraintStream+1</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> one to remove double counting)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-smi\">Correct</span> the <span class=\"pl-k\">double</span> counting</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-smi\">Explanation</span><span class=\"pl-k\">:</span> groupBy is like accumulate, but it doesn<span class=\"pl-s\"><span class=\"pl-pds\">'</span>t trigger on empty streams.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-smi\">We</span> need something like</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .accumulate(<span class=\"pl-k\">Function&lt;<span class=\"pl-smi\">ConstraintStream</span>, <span class=\"pl-k\">UniConstraintStream&lt;<span class=\"pl-smi\">T</span>&gt;</span>&gt;</span>, <span class=\"pl-smi\">T</span> defaultValue)<span class=\"pl-k\">:</span> <span class=\"pl-smi\">ConstraintStream</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       <span class=\"pl-smi\">To</span> change it from <span class=\"pl-c1\">3</span> separate constraints (one <span class=\"pl-k\">for</span> the normal <span class=\"pl-k\">case</span>, one in the <span class=\"pl-k\">case</span> of empty stream,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">       one to remove <span class=\"pl-k\">double</span> counting)<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*/</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "triceo", "createdAt": "2020-09-21T19:45:21Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,\n+                        (coach, stopCount) -> (stopCount - coach.getStopLimit()) * 1000000L);\n+    }\n+\n+    Constraint shuttleCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((bus) -> bus.getPassengerQuantityTotal() > bus.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (bus) -> (bus.getPassengerQuantityTotal() - bus.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint coachCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal - coach.getCapacity()) * 1000L);\n+    }\n+\n+    // Correct the double counting\n+    // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n+    // We need something like\n+    // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n+    // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n+    // one to remove double counting)", "originalCommit": "310795edbdbb79f6519be13c8bb71cb055710134", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNTQzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/938#discussion_r492305439", "body": "Another static import on `Joiners`?", "bodyText": "Another static import on Joiners?", "bodyHTML": "<p dir=\"auto\">Another static import on <code>Joiners</code>?</p>", "author": "triceo", "createdAt": "2020-09-21T19:46:41Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/coachshuttlegathering/solver/CoachShuttleGatheringConstraintProvider.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.optaplanner.examples.coachshuttlegathering.solver;\n+\n+import java.util.function.Function;\n+\n+import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.api.score.stream.Joiners;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Bus;\n+import org.optaplanner.examples.coachshuttlegathering.domain.BusStop;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Coach;\n+import org.optaplanner.examples.coachshuttlegathering.domain.Shuttle;\n+import org.optaplanner.examples.coachshuttlegathering.domain.StopOrHub;\n+\n+public class CoachShuttleGatheringConstraintProvider implements ConstraintProvider {\n+    final static String CONSTRAINT_PACKAGE = \"org.optaplanner.examples.coachshuttlegathering.solver\";\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n+        return new Constraint[] {\n+                coachStopLimit(constraintFactory),\n+                shuttleCapacity(constraintFactory),\n+                coachCapacity(constraintFactory),\n+                coachCapacityShuttleButNoShuttle(constraintFactory),\n+                coachCapacityCorrection(constraintFactory),\n+                transportTime(constraintFactory),\n+                shuttleDestinationIsCoachOrHub(constraintFactory),\n+                shuttleSetupCost(constraintFactory),\n+                distanceFromPrevious(constraintFactory),\n+                distanceBusStopToBusDestination(constraintFactory),\n+                distanceCoachDirectlyToDestination(constraintFactory)\n+        };\n+    }\n+\n+    Constraint coachStopLimit(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(BusStop.class, Joiners.equal(coach -> coach, BusStop::getBus))\n+                .groupBy((coach, busStop) -> coach, ConstraintCollectors.countBi())\n+                .filter((coach, stopCount) -> stopCount > coach.getStopLimit())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachStopLimit\", HardSoftLongScore.ONE_HARD,\n+                        (coach, stopCount) -> (stopCount - coach.getStopLimit()) * 1000000L);\n+    }\n+\n+    Constraint shuttleCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((bus) -> bus.getPassengerQuantityTotal() > bus.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (bus) -> (bus.getPassengerQuantityTotal() - bus.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint coachCapacity(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacity\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal()\n+                                + shuttlePassengerQuantityTotal - coach.getCapacity()) * 1000L);\n+    }\n+\n+    // Correct the double counting\n+    // Explanation: groupBy is like accumlate, but it doesn't trigger on empty streams.\n+    // We need something like\n+    // .accumlate(Function<ConstraintStream, UniConstraintStream<T>>, T defaultValue): ConstraintStream+1\n+    // To change it from 3 separate constraints (one for the normal case, one in the case of empty stream,\n+    // one to remove double counting)\n+    Constraint coachCapacityCorrection(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .join(Shuttle.class)\n+                .join(BusStop.class, Joiners.equal((coach, shuttle) -> shuttle.getDestination(), stop -> stop),\n+                        Joiners.equal((coach, shuttle) -> coach, BusStop::getBus))\n+                .join(BusStop.class, Joiners.equal((coach, shuttle, stop) -> shuttle, BusStop::getBus))\n+                .groupBy((coach, shuttle, stop1, stop2) -> coach,\n+                        ConstraintCollectors.sum((coach, shuttle, stop1, stop2) -> stop2.getPassengerQuantity()))\n+                .filter((coach,\n+                        shuttlePassengerQuantityTotal) -> coach.getPassengerQuantityTotal() > coach.getCapacity())\n+                .rewardLong(CONSTRAINT_PACKAGE, \"coachCapacityCorrection\", HardSoftLongScore.ONE_HARD,\n+                        (coach, shuttlePassengerQuantityTotal) -> (coach.getPassengerQuantityTotal() - coach.getCapacity())\n+                                * 1000L);\n+    }\n+\n+    Constraint coachCapacityShuttleButNoShuttle(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Coach.class)\n+                .filter(coach -> coach.getPassengerQuantityTotal() > coach.getCapacity())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"coachCapacityShuttleButNoShuttle\", HardSoftLongScore.ONE_HARD,\n+                        coach -> (coach.getPassengerQuantityTotal() - coach.getCapacity()) * 1000L);\n+    }\n+\n+    Constraint transportTime(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter((busStop) -> busStop.getTransportTimeToHub() != null && busStop.getTransportTimeRemainder() < 0)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"transportTime\", HardSoftLongScore.ONE_HARD,\n+                        (busStop) -> -busStop.getTransportTimeRemainder());\n+    }\n+\n+    Constraint shuttleDestinationIsCoachOrHub(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Shuttle.class)\n+                .filter((shuttle) -> shuttle.getDestination() != null)\n+                .join(StopOrHub.class, Joiners.equal(Shuttle::getDestination, Function.identity()))\n+                .filter((shuttle, stop) -> !stop.isVisitedByCoach())\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleDestinationIsCoachOrHub\", HardSoftLongScore.ONE_HARD,\n+                        (bus, stop) -> 1000000000L);\n+    }\n+\n+    Constraint shuttleSetupCost(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(Bus.class)\n+                .filter(bus -> bus.getNextStop() != null)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"shuttleSetupCost\", HardSoftLongScore.ONE_SOFT, Bus::getSetupCost);\n+    }\n+\n+    Constraint distanceFromPrevious(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter(bus -> bus.getPreviousBusOrStop() != null)\n+                .penalizeLong(CONSTRAINT_PACKAGE, \"distanceFromPrevious\", HardSoftLongScore.ONE_SOFT,\n+                        BusStop::getDistanceFromPreviousCost);\n+    }\n+\n+    Constraint distanceBusStopToBusDestination(ConstraintFactory constraintFactory) {\n+        return constraintFactory.from(BusStop.class)\n+                .filter(busStop -> busStop.getNextStop() == null)\n+                .join(Bus.class, Joiners.equal(BusStop::getBus, Function.identity()))", "originalCommit": "310795edbdbb79f6519be13c8bb71cb055710134", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "42499218083324ad6eeabe6d70656e0f84ae795f", "url": "https://github.com/kiegroup/optaplanner/commit/42499218083324ad6eeabe6d70656e0f84ae795f", "message": "Remove check that never happens, use static imports for Joiners and Collectors", "committedDate": "2020-09-21T20:09:38Z", "type": "commit"}, {"oid": "a2da93f7837a692ab06e8e670a2a2bddd3372e3c", "url": "https://github.com/kiegroup/optaplanner/commit/a2da93f7837a692ab06e8e670a2a2bddd3372e3c", "message": "Add constraint provider tests for coach shuttle gathering", "committedDate": "2020-09-22T14:35:18Z", "type": "commit"}]}