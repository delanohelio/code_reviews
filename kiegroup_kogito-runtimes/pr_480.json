{"pr_number": 480, "pr_title": "KOGITO-2024, KOGITO-2068, KOGITO-2110 - Add human task and rules (drl) support for Serverless Workflow", "pr_author": "tsurdilo", "pr_createdAt": "2020-04-28T04:08:53Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/480", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODgzMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416348830", "body": "```suggestion\r\n        } else if {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else if {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> <span class=\"pl-k x x-first\">if</span><span class=\"x x-last\"> </span>{</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-04-28T06:01:03Z", "path": "jbpm/jbpm-serverless-workflow/src/main/java/org/jbpm/serverless/workflow/parser/util/ServerlessWorkflowUtils.java", "diffHunk": "@@ -155,16 +156,22 @@ public static String scriptFunctionScript(String script) {\n     }\n \n     public static String conditionScript(String path, DefaultChoice.Operator operator, String value) {\n+        String workflowVar = ServerlessWorkflowFactory.DEFAULT_WORKFLOW_VAR;\n \n         if (path.startsWith(\"$.\")) {\n             path = path.substring(2);\n+        } else {", "originalCommit": "3d56ee5980a3f480e3b1c6327767252588daa1e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDc1Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416364756", "bodyText": "updated", "author": "tsurdilo", "createdAt": "2020-04-28T06:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0ODgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDMwNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416350305", "body": "My personal preference here would be to simply create a new HashMap and assign a variable, as this style endups creating an inner class.", "bodyText": "My personal preference here would be to simply create a new HashMap and assign a variable, as this style endups creating an inner class.", "bodyHTML": "<p dir=\"auto\">My personal preference here would be to simply create a new HashMap and assign a variable, as this style endups creating an inner class.</p>", "author": "cristianonicolai", "createdAt": "2020-04-28T06:04:40Z", "path": "jbpm/jbpm-serverless-workflow/src/test/java/org/jbpm/serverless/workflow/WorkflowFactoryTest.java", "diffHunk": "@@ -232,4 +232,73 @@ public void testJoinNode() {\n         assertThat(join.getType()).isEqualTo(Join.TYPE_XOR);\n         assertThat(join.getMetaData().get(\"UniqueId\")).isEqualTo(\"1\");\n     }\n+\n+    @Test\n+    public void testProcessVar() {\n+        RuleFlowProcess process = new RuleFlowProcess();\n+        testFactory.processVar(\"testVar\", JsonNode.class, process);\n+\n+        assertThat(process.getVariableScope()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables()).isNotNull();\n+        assertThat(process.getVariableScope().getVariables().size()).isEqualTo(1);\n+    }\n+\n+    @Test\n+    public void testHumanTaskNode() {\n+        TestNodeContainer nodeContainer = new TestNodeContainer();\n+        RuleFlowProcess process = new RuleFlowProcess();\n+\n+        Function function = new Function().withName(\"testfunction1\").withMetadata(\n+                new HashMap() {{", "originalCommit": "3d56ee5980a3f480e3b1c6327767252588daa1e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2NDgyMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r416364821", "bodyText": "ok. updated", "author": "tsurdilo", "createdAt": "2020-04-28T06:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDMwNQ=="}], "type": "inlineReview"}, {"oid": "f8320cc4a3a5cb3232e2a5ace6df51250d0546a6", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f8320cc4a3a5cb3232e2a5ace6df51250d0546a6", "message": "KOGITO-2024 - Add Decision (Human Task) support for Serverless Workflow", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "119b80e57db5f226ed2b7b4f2337ec02f2e72355", "url": "https://github.com/kiegroup/kogito-runtimes/commit/119b80e57db5f226ed2b7b4f2337ec02f2e72355", "message": "updates for cristianonicolai review", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "2567c49d0912477c4823b6fbffdf74a5640b99f0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2567c49d0912477c4823b6fbffdf74a5640b99f0", "message": "fixing missing function type in log", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "520fdf293567e36bee62955bb57f7836e3dfa328", "url": "https://github.com/kiegroup/kogito-runtimes/commit/520fdf293567e36bee62955bb57f7836e3dfa328", "message": "adding multi decision test", "committedDate": "2020-04-30T16:54:55Z", "type": "commit"}, {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2f62120b326f504f277f493b6a32e4ec7e7ea592", "message": "Adding KOGITO-2068 - rule support (drl) for sw", "committedDate": "2020-05-02T15:56:48Z", "type": "commit"}, {"oid": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2f62120b326f504f277f493b6a32e4ec7e7ea592", "message": "Adding KOGITO-2068 - rule support (drl) for sw", "committedDate": "2020-05-02T15:56:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODI4Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420778286", "body": "what about using \r\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\r\n                    .orElse(processVariableScope.findVariable(entry.getValue()));", "bodyText": "what about using\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\n.orElse(processVariableScope.findVariable(entry.getValue()));", "bodyHTML": "<p dir=\"auto\">what about using<br>\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))<br>\n.orElse(processVariableScope.findVariable(entry.getValue()));</p>", "author": "tiagodolphine", "createdAt": "2020-05-06T13:12:30Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -160,7 +162,10 @@ private CompilationUnit compilationUnitInput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (input) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "originalCommit": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzY1MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420963651", "bodyText": "updated", "author": "tsurdilo", "createdAt": "2020-05-06T17:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODgwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420778808", "body": "what about using\r\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\r\n.orElse(processVariableScope.findVariable(entry.getValue()));", "bodyText": "what about using\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))\n.orElse(processVariableScope.findVariable(entry.getValue()));", "bodyHTML": "<p dir=\"auto\">what about using<br>\nVariable variable = Optional.ofNullable(variableScope.findVariable(entry.getValue()))<br>\n.orElse(processVariableScope.findVariable(entry.getValue()));</p>", "author": "tiagodolphine", "createdAt": "2020-05-06T13:13:13Z", "path": "jbpm/jbpm-flow-builder/src/main/java/org/jbpm/compiler/canonical/UserTaskModelMetaData.java", "diffHunk": "@@ -251,15 +256,18 @@ private CompilationUnit compilationUnitOutput() {\n             Variable variable = variableScope.findVariable(entry.getValue());\n \n             if (variable == null) {\n-                // check if given mapping is an expression\n-                Matcher matcher = PatternConstants.PARAMETER_MATCHER.matcher(entry.getValue());\n-                if (matcher.find()) {                    \n-                    Map<String, String> dataOutputs = (Map<String, String>) humanTaskNode.getMetaData(\"DataOutputs\");\n-                    variable = new Variable();\n-                    variable.setName(entry.getKey());\n-                    variable.setType(new ObjectDataType(dataOutputs.get(entry.getKey())));\n-                } else {\n-                    throw new IllegalStateException(\"Task \" + humanTaskNode.getName() +\" (output) \" + entry.getKey() + \" reference not existing variable \" + entry.getValue());\n+                variable = processVariableScope.findVariable(entry.getValue());", "originalCommit": "2f62120b326f504f277f493b6a32e4ec7e7ea592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2MzU4Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/480#discussion_r420963583", "bodyText": "updated", "author": "tsurdilo", "createdAt": "2020-05-06T17:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3ODgwOA=="}], "type": "inlineReview"}, {"oid": "7986f02e98895e55fc13f8132f3cfd293daa2557", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7986f02e98895e55fc13f8132f3cfd293daa2557", "message": "Review updates", "committedDate": "2020-05-06T17:25:42Z", "type": "commit"}, {"oid": "0928b37b1fcf183cb71f2f586c40989f85e06a88", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0928b37b1fcf183cb71f2f586c40989f85e06a88", "message": "KOGITO-2110 - Fix issues with message start/end events for Event State", "committedDate": "2020-05-06T20:49:48Z", "type": "commit"}]}