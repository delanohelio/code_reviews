{"pr_number": 840, "pr_title": "KOGITO-2469: implement synchronous mode in decision tracing addon", "pr_author": "kostola", "pr_createdAt": "2020-10-20T13:25:27Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/840", "timeline": [{"oid": "f5a91f8391514305b62592140002a54f1830e8fe", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f5a91f8391514305b62592140002a54f1830e8fe", "message": "KOGITO-2469: Implement sync mode in decision tracing addon for Quarkus", "committedDate": "2020-10-20T09:58:07Z", "type": "commit"}, {"oid": "653a1a4b4985f0b061fb6d32ed0fcb662eee86eb", "url": "https://github.com/kiegroup/kogito-runtimes/commit/653a1a4b4985f0b061fb6d32ed0fcb662eee86eb", "message": "KOGITO-2469: Implement sync mode in decision tracing addon for Spring Boot", "committedDate": "2020-10-20T09:58:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509035702", "body": "Note 1: both are returning `SpringBootDecisionTracingCollectorAsync` instance\r\nNote 2: what about adding the property as method parameter to have a single method? In this way we can prevent wrong situations like generate both beans if we will change parameter logic. Then please add a test to verify this producer method\r\n```suggestion\r\n    @Bean\r\n    public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\r\n                                                                    final ConfigBean configBean,\r\n                                                                    final Application application,\r\n                                                                    @Value(value = \"${kogito.addon.tracing.decision.asyncEnabled:true}\") final boolean asyncEnabled) {\r\n        if (asyncEnabled) {\r\n            return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\r\n        } else {\r\n            return new SpringBootDecisionTracingCollector(eventEmitter, configBean, application);\r\n        }\r\n    }\r\n```", "bodyText": "Note 1: both are returning SpringBootDecisionTracingCollectorAsync instance\nNote 2: what about adding the property as method parameter to have a single method? In this way we can prevent wrong situations like generate both beans if we will change parameter logic. Then please add a test to verify this producer method\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean\n          \n          \n            \n                @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n          \n          \n            \n                public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n          \n          \n            \n                                                                                final ConfigBean configBean,\n          \n          \n            \n                                                                                final Application application) {\n          \n          \n            \n                    return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Bean\n          \n          \n            \n                @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n          \n          \n            \n                public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n          \n          \n            \n                                                                               final ConfigBean configBean,\n          \n          \n            \n                                                                               final Application application) {\n          \n          \n            \n                    return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n          \n          \n            \n                }\n          \n          \n            \n                @Bean\n          \n          \n            \n                public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n          \n          \n            \n                                                                                final ConfigBean configBean,\n          \n          \n            \n                                                                                final Application application,\n          \n          \n            \n                                                                                @Value(value = \"${kogito.addon.tracing.decision.asyncEnabled:true}\") final boolean asyncEnabled) {\n          \n          \n            \n                    if (asyncEnabled) {\n          \n          \n            \n                        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return new SpringBootDecisionTracingCollector(eventEmitter, configBean, application);\n          \n          \n            \n                    }\n          \n          \n            \n                }", "bodyHTML": "<p dir=\"auto\">Note 1: both are returning <code>SpringBootDecisionTracingCollectorAsync</code> instance<br>\nNote 2: what about adding the property as method parameter to have a single method? In this way we can prevent wrong situations like generate both beans if we will change parameter logic. Then please add a test to verify this producer method</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"73\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Bean</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"74\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@ConditionalOnProperty</span>(<span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kogito.addon.tracing.decision.asyncEnabled<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">havingValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">matchIfMissing</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"75\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollector</span> collectorForAsyncMode(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">SpringBootTraceEventEmitter</span> eventEmitter,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"76\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                                                    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ConfigBean</span> configBean,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"77\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                                                    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Application</span> application) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"78\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollectorAsync</span>(eventEmitter, configBean, application);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"79\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"80\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"81\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Bean</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"82\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@ConditionalOnProperty</span>(<span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kogito.addon.tracing.decision.asyncEnabled<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">havingValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>false<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"83\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollector</span> collectorForSyncMode(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">SpringBootTraceEventEmitter</span> eventEmitter,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"84\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                                                   <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ConfigBean</span> configBean,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"85\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                                                   <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Application</span> application) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"86\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollectorAsync</span>(eventEmitter, configBean, application);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"87\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"73\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Bean</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"74\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollector</span> collectorForAsyncMode(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">SpringBootTraceEventEmitter</span> eventEmitter,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"75\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                                                    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ConfigBean</span> configBean,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"76\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                                                    <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Application</span> application,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"77\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                                                    <span class=\"pl-k\">@Value</span>(<span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${kogito.addon.tracing.decision.asyncEnabled:true}<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">final</span> <span class=\"pl-k\">boolean</span> asyncEnabled) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"78\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (asyncEnabled) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"79\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollectorAsync</span>(eventEmitter, configBean, application);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"80\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"81\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SpringBootDecisionTracingCollector</span>(eventEmitter, configBean, application);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"82\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"83\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "danielezonca", "createdAt": "2020-10-21T07:04:20Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/main/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingConfiguration.java", "diffHunk": "@@ -55,6 +58,22 @@ public SpringBootDecisionTracingConfiguration(\n         this.kafkaTopicReplicationFactor = kafkaTopicReplicationFactor;\n     }\n \n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"true\", matchIfMissing = true)\n+    public SpringBootDecisionTracingCollector collectorForAsyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                    final ConfigBean configBean,\n+                                                                    final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(value = \"kogito.addon.tracing.decision.asyncEnabled\", havingValue = \"false\")\n+    public SpringBootDecisionTracingCollector collectorForSyncMode(final SpringBootTraceEventEmitter eventEmitter,\n+                                                                   final ConfigBean configBean,\n+                                                                   final Application application) {\n+        return new SpringBootDecisionTracingCollectorAsync(eventEmitter, configBean, application);\n+    }", "originalCommit": "653a1a4b4985f0b061fb6d32ed0fcb662eee86eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNTk2Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509135963", "bodyText": "Thanks for the catch and the suggestion. It's way better now.", "author": "kostola", "createdAt": "2020-10-21T09:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyMzEwOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509223109", "bodyText": "Can you please add a test for this method?", "author": "danielezonca", "createdAt": "2020-10-21T12:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3NzQ1OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r509277458", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-21T13:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzNTcwMg=="}], "type": "inlineReview"}, {"oid": "b391adfbfa8389765caf9bfa551d17b8405c5a00", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b391adfbfa8389765caf9bfa551d17b8405c5a00", "message": "KOGITO-2469: update SpringBootDecisionTracingConfiguration\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>", "committedDate": "2020-10-21T09:38:02Z", "type": "commit"}, {"oid": "1a242e141d91efe55de76e1ef37732b0094a9cbc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1a242e141d91efe55de76e1ef37732b0094a9cbc", "message": "KOGITO-2469: add SpringBootDecisionTracingConfigurationTest", "committedDate": "2020-10-21T13:24:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNjk5Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512526992", "body": "Can we avoid underscores in the name of methods?", "bodyText": "Can we avoid underscores in the name of methods?", "bodyHTML": "<p dir=\"auto\">Can we avoid underscores in the name of methods?</p>", "author": "jiripetrlik", "createdAt": "2020-10-27T09:16:38Z", "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "diffHunk": "@@ -35,76 +36,114 @@\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n import org.mockito.ArgumentCaptor;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class QuarkusDecisionTracingTest {\n \n-    static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-    static final String MODEL_NAME = \"Traffic Violation\";\n-\n-    private static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n-    private static final ObjectMapper MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    public static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    public static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+    private static final String TEST_RESOURCE = \"/\" + TEST_MODEL_NAME + \".dmn\";\n     private static final String TEST_SERVICE_URL = \"localhost:8080\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                QuarkusDecisionTracingTest.class.getResourceAsStream(MODEL_RESOURCE)\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {", "originalCommit": "1a242e141d91efe55de76e1ef37732b0094a9cbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNDQzMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512704430", "bodyText": "Removed all the underscores from test method names \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-27T13:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyNjk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODA4NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512528085", "body": "Would it be possible to add some message with description into the Exception.", "bodyText": "Would it be possible to add some message with description into the Exception.", "bodyHTML": "<p dir=\"auto\">Would it be possible to add some message with description into the Exception.</p>", "author": "jiripetrlik", "createdAt": "2020-10-27T09:18:24Z", "path": "addons/tracing/tracing-decision-quarkus-addon/src/test/java/org/kie/kogito/tracing/decision/QuarkusDecisionTracingTest.java", "diffHunk": "@@ -35,76 +36,114 @@\n import org.kie.kogito.decision.DecisionModels;\n import org.kie.kogito.dmn.DMNKogito;\n import org.kie.kogito.dmn.DmnDecisionModel;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n import org.kie.kogito.tracing.decision.event.evaluate.EvaluateEvent;\n import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n import org.mockito.ArgumentCaptor;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class QuarkusDecisionTracingTest {\n \n-    static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-    static final String MODEL_NAME = \"Traffic Violation\";\n-\n-    private static final String MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n-    private static final ObjectMapper MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    public static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    public static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n+    private static final String TEST_RESOURCE = \"/\" + TEST_MODEL_NAME + \".dmn\";\n     private static final String TEST_SERVICE_URL = \"localhost:8080\";\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                QuarkusDecisionTracingTest.class.getResourceAsStream(MODEL_RESOURCE)\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(true, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    @Test\n+    void test_SyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(false, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    private DMNRuntime buildDMNRuntime() {\n+        return DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                QuarkusDecisionTracingTest.class.getResourceAsStream(TEST_RESOURCE)\n         ));\n+    }\n+\n+    private DecisionModel buildDecisionModel(DMNRuntime runtime) {\n+        return new DmnDecisionModel(runtime, TEST_MODEL_NAMESPACE, TEST_MODEL_NAME, () -> TEST_EXECUTION_ID);\n+    }\n+\n+    private List<EvaluateEvent> testListener(boolean asyncEnabled, DMNRuntime runtime, DecisionModel model) {\n \n-        ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n-        EventBus eventBus = mock(EventBus.class);\n+        final EventBus mockedEventBus = mock(EventBus.class);\n+        final QuarkusDecisionTracingCollector mockedCollector = mock(QuarkusDecisionTracingCollector.class);\n \n-        QuarkusDecisionTracingListener listener = new QuarkusDecisionTracingListener(eventBus);\n+        QuarkusDecisionTracingListener listener = new QuarkusDecisionTracingListener(mockedEventBus, mockedCollector, asyncEnabled);\n         runtime.addListener(listener);\n \n-        final Map<String, Object> driver = new HashMap<>();\n-        driver.put(\"Age\", 25);\n-        driver.put(\"Points\", 10);\n-        final Map<String, Object> violation = new HashMap<>();\n-        violation.put(\"Type\", \"speed\");\n-        violation.put(\"Actual Speed\", 105);\n-        violation.put(\"Speed Limit\", 100);\n-        final Map<String, Object> contextVariables = new HashMap<>();\n-        contextVariables.put(\"Driver\", driver);\n-        contextVariables.put(\"Violation\", violation);\n-\n-        final DecisionModel model = new DmnDecisionModel(runtime, MODEL_NAMESPACE, MODEL_NAME, () -> TEST_EXECUTION_ID);\n-        final DMNContext context = model.newContext(contextVariables);\n+        final DMNContext context = model.newContext(TEST_CONTEXT_VARIABLES);\n         model.evaluateAll(context);\n \n         ArgumentCaptor<EvaluateEvent> eventCaptor = ArgumentCaptor.forClass(EvaluateEvent.class);\n \n-        verify(eventBus, times(14)).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), eventCaptor.capture());\n+        if (asyncEnabled) {\n+            verify(mockedEventBus, times(14)).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), eventCaptor.capture());\n+            verify(mockedCollector, never()).onEvent(any());\n+        } else {\n+            verify(mockedEventBus, never()).send(eq(\"kogito-tracing-decision_EvaluateEvent\"), any());\n+            verify(mockedCollector, times(14)).onEvent(eventCaptor.capture());\n+        }\n \n+        return eventCaptor.getAllValues();\n+    }\n+\n+    private void testCollector(List<EvaluateEvent> events, DecisionModel model) throws IOException {\n         TestSubscriber<String> subscriber = new TestSubscriber<>();\n \n         final DecisionModels mockedDecisionModels = mock(DecisionModels.class);\n-        when(mockedDecisionModels.getDecisionModel(MODEL_NAMESPACE, MODEL_NAME)).thenReturn(model);\n+        when(mockedDecisionModels.getDecisionModel(TEST_MODEL_NAMESPACE, TEST_MODEL_NAME)).thenReturn(model);\n         final Application mockedApplication = mock(Application.class);\n         when(mockedApplication.decisionModels()).thenReturn(mockedDecisionModels);\n+        final ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n+        final QuarkusTraceEventEmitter eventEmitter = new QuarkusTraceEventEmitter();\n \n-        QuarkusTraceEventEmitter eventEmitter = new QuarkusTraceEventEmitter();\n-        QuarkusDecisionTracingCollector collector = new QuarkusDecisionTracingCollector(mockedApplication, eventEmitter, configBean);\n+        QuarkusDecisionTracingCollector collector = new QuarkusDecisionTracingCollector(eventEmitter, configBean, mockedApplication);\n         eventEmitter.getEventPublisher().subscribe(subscriber);\n-        eventCaptor.getAllValues().forEach(collector::onEvent);\n+        events.forEach(collector::onEvent);\n \n         subscriber.assertValueCount(1);\n \n-        CloudEvent cloudEvent = MAPPER.readValue(subscriber.values().get(0), CloudEvent.class);\n+        CloudEvent cloudEvent = CloudEventUtils.decode(subscriber.values().get(0)).orElseThrow(IllegalStateException::new);", "originalCommit": "1a242e141d91efe55de76e1ef37732b0094a9cbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNDUxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512704517", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-27T13:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODc3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512528771", "body": "Can we add some message into the exception?", "bodyText": "Can we add some message into the exception?", "bodyHTML": "<p dir=\"auto\">Can we add some message into the exception?</p>", "author": "jiripetrlik", "createdAt": "2020-10-27T09:19:27Z", "path": "addons/tracing/tracing-decision-springboot-addon/src/test/java/org/kie/kogito/tracing/decision/SpringBootDecisionTracingTest.java", "diffHunk": "@@ -41,73 +43,113 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n public class SpringBootDecisionTracingTest {\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(JsonFormat.getCloudEventJacksonModule());\n+    private static final ObjectMapper MAPPER = new ObjectMapper()\n+            .registerModule(JsonFormat.getCloudEventJacksonModule());\n+\n+    private static final String TEST_MODEL_RESOURCE = \"/Traffic Violation.dmn\";\n+    private static final String TEST_MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+    private static final String TEST_MODEL_NAME = \"Traffic Violation\";\n+\n     private static final String TEST_EXECUTION_ID = \"7c50581e-6e5b-407b-91d6-2ffb1d47ebc0\";\n-    private static final String TEST_TOPIC = \"test-topic\";\n+    private static final Map<String, Object> TEST_CONTEXT_VARIABLES = new HashMap<String, Object>() {{\n+        put(\"Driver\", new HashMap<String, Object>() {{\n+            put(\"Age\", 25);\n+            put(\"Points\", 10);\n+        }});\n+        put(\"Violation\", new HashMap<String, Object>() {{\n+            put(\"Type\", \"speed\");\n+            put(\"Actual Speed\", 105);\n+            put(\"Speed Limit\", 100);\n+        }});\n+    }};\n+    private static final String TEST_SERVICE_URL = \"localhost:8080\";\n+    private static final String TEST_KAFKA_TOPIC = \"kogito-tracing-decision\";\n+\n+    @Test\n+    void test_AsyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(true, runtime, model);\n+        testCollector(events, model);\n+    }\n \n     @Test\n-    public void test_ListenerAndCollector_UseRealEvents_Working() throws IOException {\n-        final String serviceUrl = \"localhost:8080\";\n-        final String modelResource = \"/Traffic Violation.dmn\";\n-        final String modelNamespace = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n-        final String modelName = \"Traffic Violation\";\n-\n-        final DMNRuntime runtime = DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n-                SpringBootDecisionTracingTest.class.getResourceAsStream(modelResource)\n+    void test_SyncListenerAndCollector_UseRealEvents_Working() throws IOException {\n+        final DMNRuntime runtime = buildDMNRuntime();\n+        final DecisionModel model = buildDecisionModel(runtime);\n+        final List<EvaluateEvent> events = testListener(false, runtime, model);\n+        testCollector(events, model);\n+    }\n+\n+    private DMNRuntime buildDMNRuntime() {\n+        return DMNKogito.createGenericDMNRuntime(new java.io.InputStreamReader(\n+                SpringBootDecisionTracingTest.class.getResourceAsStream(TEST_MODEL_RESOURCE)\n         ));\n+    }\n+\n+    private DecisionModel buildDecisionModel(DMNRuntime runtime) {\n+        return new DmnDecisionModel(runtime, TEST_MODEL_NAMESPACE, TEST_MODEL_NAME, () -> TEST_EXECUTION_ID);\n+    }\n+\n+    private List<EvaluateEvent> testListener(boolean asyncEnabled, DMNRuntime runtime, DecisionModel model) {\n \n-        ConfigBean configBean = new StaticConfigBean(serviceUrl);\n-        ApplicationEventPublisher eventPublisher = mock(ApplicationEventPublisher.class);\n+        final ApplicationEventPublisher mockedEventPublisher = mock(ApplicationEventPublisher.class);\n+        final SpringBootDecisionTracingCollector mockedCollector = mock(SpringBootDecisionTracingCollector.class);\n \n-        SpringBootDecisionTracingListener listener = new SpringBootDecisionTracingListener(eventPublisher);\n+        SpringBootDecisionTracingListener listener = new SpringBootDecisionTracingListener(mockedEventPublisher, mockedCollector, asyncEnabled);\n         runtime.addListener(listener);\n \n-        final Map<String, Object> driver = new HashMap<>();\n-        driver.put(\"Age\", 25);\n-        driver.put(\"Points\", 10);\n-        final Map<String, Object> violation = new HashMap<>();\n-        violation.put(\"Type\", \"speed\");\n-        violation.put(\"Actual Speed\", 105);\n-        violation.put(\"Speed Limit\", 100);\n-        final Map<String, Object> contextVariables = new HashMap<>();\n-        contextVariables.put(\"Driver\", driver);\n-        contextVariables.put(\"Violation\", violation);\n-\n-        final DecisionModel model = new DmnDecisionModel(runtime, modelNamespace, modelName, () -> TEST_EXECUTION_ID);\n-        final DMNContext context = model.newContext(contextVariables);\n+        final DMNContext context = model.newContext(TEST_CONTEXT_VARIABLES);\n         model.evaluateAll(context);\n \n         ArgumentCaptor<EvaluateEvent> eventCaptor = ArgumentCaptor.forClass(EvaluateEvent.class);\n-        verify(eventPublisher, times(14)).publishEvent(eventCaptor.capture());\n \n+        if (asyncEnabled) {\n+            verify(mockedEventPublisher, times(14)).publishEvent(eventCaptor.capture());\n+            verify(mockedCollector, never()).onApplicationEvent(any());\n+        } else {\n+            verify(mockedEventPublisher, never()).publishEvent(any());\n+            verify(mockedCollector, times(14)).onApplicationEvent(eventCaptor.capture());\n+        }\n+\n+        return eventCaptor.getAllValues();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void testCollector(List<EvaluateEvent> events, DecisionModel model) throws IOException {\n         final DecisionModels mockedDecisionModels = mock(DecisionModels.class);\n-        when(mockedDecisionModels.getDecisionModel(modelNamespace, modelName)).thenReturn(model);\n+        when(mockedDecisionModels.getDecisionModel(TEST_MODEL_NAMESPACE, TEST_MODEL_NAME)).thenReturn(model);\n+\n         final Application mockedApplication = mock(Application.class);\n         when(mockedApplication.decisionModels()).thenReturn(mockedDecisionModels);\n \n-        KafkaTemplate<String, String> template = mock(KafkaTemplate.class);\n+        final ConfigBean configBean = new StaticConfigBean(TEST_SERVICE_URL);\n \n-        SpringBootTraceEventEmitter eventEmitter = new SpringBootTraceEventEmitter(template, TEST_TOPIC);\n-        SpringBootDecisionTracingCollector collector = new SpringBootDecisionTracingCollector(mockedApplication, eventEmitter, configBean);\n-        eventCaptor.getAllValues().forEach(collector::onApplicationEvent);\n+        final KafkaTemplate<String, String> mockedTemplate = mock(KafkaTemplate.class);\n+        final SpringBootTraceEventEmitter eventEmitter = new SpringBootTraceEventEmitter(mockedTemplate, TEST_KAFKA_TOPIC);\n \n-        ArgumentCaptor<String> topicCaptor = ArgumentCaptor.forClass(String.class);\n-        ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n-        verify(template).send(topicCaptor.capture(), payloadCaptor.capture());\n+        SpringBootDecisionTracingCollector collector = new SpringBootDecisionTracingCollector(eventEmitter, configBean, mockedApplication);\n+        events.forEach(collector::onApplicationEvent);\n \n-        assertEquals(TEST_TOPIC, topicCaptor.getValue());\n+        ArgumentCaptor<String> payloadCaptor = ArgumentCaptor.forClass(String.class);\n+        verify(mockedTemplate).send(eq(TEST_KAFKA_TOPIC), payloadCaptor.capture());\n \n-        CloudEvent cloudEvent = OBJECT_MAPPER.readValue(payloadCaptor.getValue(), CloudEvent.class);\n+        CloudEvent cloudEvent = CloudEventUtils.decode(payloadCaptor.getValue()).orElseThrow(IllegalStateException::new);", "originalCommit": "1a242e141d91efe55de76e1ef37732b0094a9cbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNDYwOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/840#discussion_r512704608", "bodyText": "Done \ud83d\udc4d", "author": "kostola", "createdAt": "2020-10-27T13:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUyODc3MQ=="}], "type": "inlineReview"}, {"oid": "435ff8ca578b1b42743419fb11331ff17d1bc4b0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/435ff8ca578b1b42743419fb11331ff17d1bc4b0", "message": "KOGITO-2469: remove underscores from test names", "committedDate": "2020-10-27T12:14:29Z", "type": "commit"}, {"oid": "f3048ecdceebe0236ce1a24d6fb6f456df3f65b1", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f3048ecdceebe0236ce1a24d6fb6f456df3f65b1", "message": "KOGITO-2469: improve error messages", "committedDate": "2020-10-27T12:14:58Z", "type": "commit"}, {"oid": "dd566516f96b65a5f8470f71fcbce91ad335fba8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/dd566516f96b65a5f8470f71fcbce91ad335fba8", "message": "Merge branch 'master' into 'KOGITO-2469'", "committedDate": "2020-10-27T13:52:25Z", "type": "commit"}, {"oid": "ac6b6fd82a3141a4014ce6334f6d3959731adb5c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/ac6b6fd82a3141a4014ce6334f6d3959731adb5c", "message": "KOGITO-2469: fix broken tests", "committedDate": "2020-10-27T16:07:45Z", "type": "commit"}]}