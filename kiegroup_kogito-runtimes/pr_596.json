{"pr_number": 596, "pr_title": "[KOGITO-2444] Generating REST endpoints for AdHocFragments", "pr_author": "ruromero", "pr_createdAt": "2020-06-30T14:48:47Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/596", "timeline": [{"oid": "e7b51a1c02119496402b1a5be376e8971d052881", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e7b51a1c02119496402b1a5be376e8971d052881", "message": "[KOGITO-2444] Generating REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-06-30T14:54:10Z", "type": "forcePushed"}, {"oid": "2e7ef5d1dea442b9d04975be3362a8453e098d93", "url": "https://github.com/kiegroup/kogito-runtimes/commit/2e7ef5d1dea442b9d04975be3362a8453e098d93", "message": "[KOGITO-2444] Generating REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-07-01T10:35:03Z", "type": "forcePushed"}, {"oid": "48b8efe7dc5971f69df856cac0206cf80f490f7f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/48b8efe7dc5971f69df856cac0206cf80f490f7f", "message": "[KOGITO-2444] Generating REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-07-01T15:35:18Z", "type": "forcePushed"}, {"oid": "a0c219481f33e89749fdd21cb5f0aa1323c0e370", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a0c219481f33e89749fdd21cb5f0aa1323c0e370", "message": "[KOGITO-2444] Generating REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-07-01T17:20:42Z", "type": "forcePushed"}, {"oid": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "url": "https://github.com/kiegroup/kogito-runtimes/commit/1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "message": "[KOGITO-2444] Generating REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-07-01T17:22:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxMTUxNg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448511516", "body": "signalId name is quite confusing IMO, what about signalNamePath or sanitizedSignalName... just some suggestions", "bodyText": "signalId name is quite confusing IMO, what about signalNamePath or sanitizedSignalName... just some suggestions", "bodyHTML": "<p dir=\"auto\">signalId name is quite confusing IMO, what about signalNamePath or sanitizedSignalName... just some suggestions</p>", "author": "tiagodolphine", "createdAt": "2020-07-01T17:25:57Z", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "diffHunk": "@@ -28,18 +28,18 @@\n     Process<$Type$> process;\n \n     @POST\n-    @Path(\"/{id}/$signalName$\")\n+    @Path(\"/{id}/$signalId$\")", "originalCommit": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxOTcyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448519729", "body": "suggestion to extract the `signalName.replaceAll(\"\\\\s\", \"_\"))` to a class/method, this logic could be used to sanitize and generate the path for endpoints when needed, not only in this place, wdyt?", "bodyText": "suggestion to extract the signalName.replaceAll(\"\\\\s\", \"_\")) to a class/method, this logic could be used to sanitize and generate the path for endpoints when needed, not only in this place, wdyt?", "bodyHTML": "<p dir=\"auto\">suggestion to extract the <code>signalName.replaceAll(\"\\\\s\", \"_\"))</code> to a class/method, this logic could be used to sanitize and generate the path for endpoints when needed, not only in this place, wdyt?</p>", "author": "tiagodolphine", "createdAt": "2020-07-01T17:41:43Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java", "diffHunk": "@@ -178,6 +179,7 @@ public String generate() {\n                                 template.findAll(StringLiteralExpr.class).forEach(vv -> {\n                                     String s = vv.getValue();\n                                     String interpolated = s.replace(\"$signalName$\", signalName);\n+                                    interpolated = interpolated.replace(\"$signalId$\", signalName.replaceAll(\"\\\\s\", \"_\"));", "originalCommit": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMjUxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448522519", "body": "the same logic used to sanitize used here... ", "bodyText": "the same logic used to sanitize used here...", "bodyHTML": "<p dir=\"auto\">the same logic used to sanitize used here...</p>", "author": "tiagodolphine", "createdAt": "2020-07-01T17:47:02Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java", "diffHunk": "@@ -311,19 +317,18 @@ private void interpolateStrings(StringLiteralExpr vv) {\n \n     private void interpolateUserTaskStrings(StringLiteralExpr vv, UserTaskModelMetaData userTask) {\n         String s = vv.getValue();\n-\n-        String interpolated =\n-                s.replace(\"$taskname$\", userTask.getName().replaceAll(\"\\\\s\", \"_\"));\n+        String interpolated = s.replace(\"$taskname$\", userTask.getName().replaceAll(\"\\\\s\", \"_\"));", "originalCommit": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMDk2Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448530966", "body": "isn't better to interpolate the method name `signal` based on the `$taskname$`? if you check https://github.com/kiegroup/kogito-runtimes/blob/e5994ce75c5343023547c85c45048ba3dfe2455b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java#L151 when the other methods for signals where generated it was used a \"counter\" but basically to avoid name conflicts probably.", "bodyText": "isn't better to interpolate the method name signal based on the $taskname$? if you check \n  \n    \n      kogito-runtimes/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java\n    \n    \n         Line 151\n      in\n      e5994ce\n    \n    \n    \n    \n\n        \n          \n           String methodName = \"signal_\" + index.getAndIncrement(); \n        \n    \n  \n\n when the other methods for signals where generated it was used a \"counter\" but basically to avoid name conflicts probably.", "bodyHTML": "<p dir=\"auto\">isn't better to interpolate the method name <code>signal</code> based on the <code>$taskname$</code>? if you check <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/kiegroup/kogito-runtimes/blob/e5994ce75c5343023547c85c45048ba3dfe2455b/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java#L151\">kogito-runtimes/kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 151\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/kiegroup/kogito-runtimes/commit/e5994ce75c5343023547c85c45048ba3dfe2455b\">e5994ce</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L151\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"151\"></td>\n          <td id=\"LC151\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-smi\">String</span> methodName <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>signal_<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> index<span class=\"pl-k\">.</span>getAndIncrement(); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n when the other methods for signals where generated it was used a \"counter\" but basically to avoid name conflicts probably.</p>", "author": "tiagodolphine", "createdAt": "2020-07-01T18:03:07Z", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -3,11 +3,32 @@\n import java.util.List;\n \n import org.drools.core.WorkItemNotFoundException;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.impl.Sig;\n \n \n public class $Type$Resource {\n \n-    \n+    @POST\n+    @Path(\"/{id}/$taskname$\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public javax.ws.rs.core.Response signal(@PathParam(\"id\") final String id) {", "originalCommit": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MjU3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449052577", "bodyText": "For tasks the nodeId is being used, not the taskName. In order to avoid conflicts between userTask signals and other signals I will reuse the existing index.", "author": "ruromero", "createdAt": "2020-07-02T14:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMzI4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448533282", "body": "minor, but why not use camelCase for `tasknodename`", "bodyText": "minor, but why not use camelCase for tasknodename", "bodyHTML": "<p dir=\"auto\">minor, but why not use camelCase for <code>tasknodename</code></p>", "author": "tiagodolphine", "createdAt": "2020-07-01T18:07:53Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java", "diffHunk": "@@ -311,19 +317,18 @@ private void interpolateStrings(StringLiteralExpr vv) {\n \n     private void interpolateUserTaskStrings(StringLiteralExpr vv, UserTaskModelMetaData userTask) {\n         String s = vv.getValue();\n-\n-        String interpolated =\n-                s.replace(\"$taskname$\", userTask.getName().replaceAll(\"\\\\s\", \"_\"));\n+        String interpolated = s.replace(\"$taskname$\", userTask.getName().replaceAll(\"\\\\s\", \"_\"));\n+        interpolated = interpolated.replace(\"$tasknodename$\", userTask.getNodeName());", "originalCommit": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxMzEyMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449013122", "bodyText": "following the same naming pattern. I'll then change it for taskName as well", "author": "ruromero", "createdAt": "2020-07-02T13:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMzI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMzc5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448533798", "body": "so If I understood correctly method is always added by the template and it is being removed here in case of ad-hoc, right? \r\nWhere the method name is generated based on the `\"signal_\" + userTask.getId()` ? on the template the method is just called `signal`, I missed this point", "bodyText": "so If I understood correctly method is always added by the template and it is being removed here in case of ad-hoc, right?\nWhere the method name is generated based on the \"signal_\" + userTask.getId() ? on the template the method is just called signal, I missed this point", "bodyHTML": "<p dir=\"auto\">so If I understood correctly method is always added by the template and it is being removed here in case of ad-hoc, right?<br>\nWhere the method name is generated based on the <code>\"signal_\" + userTask.getId()</code> ? on the template the method is just called <code>signal</code>, I missed this point</p>", "author": "tiagodolphine", "createdAt": "2020-07-01T18:08:54Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java", "diffHunk": "@@ -208,9 +210,15 @@ public String generate() {\n                 });\n \n                 template.findAll(StringLiteralExpr.class).forEach(s -> interpolateUserTaskStrings(s, userTask));\n-\n-                template.findAll(ClassOrInterfaceType.class).forEach(c -> interpolateUserTaskTypes(c, userTask.getInputMoodelClassSimpleName(), userTask.getOutputMoodelClassSimpleName()));\n+                template.findAll(ClassOrInterfaceType.class).forEach(c -> interpolateUserTaskTypes(c, userTask.getInputModelClassSimpleName(), userTask.getOutputModelClassSimpleName()));\n                 template.findAll(NameExpr.class).forEach(c -> interpolateUserTaskNameExp(c, userTask));\n+                if(!userTask.isAdHoc()) {", "originalCommit": "1f3b52cef3ff9b55979d354c1ac7721a5f97dcc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0OTM3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r448749377", "bodyText": "perhaps the method should not be added in the first place?", "author": "cristianonicolai", "createdAt": "2020-07-02T04:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMzc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NDIzNQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449054235", "bodyText": "I think it's better to add it by default and remove it if the node is not adHoc. That way you have an easier understanding of how the method would look like. This is also how it is done in other parts of the process template.", "author": "ruromero", "createdAt": "2020-07-02T14:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMzc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzNDk3NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449534975", "bodyText": "\ud83d\udc4d", "author": "tiagodolphine", "createdAt": "2020-07-03T11:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzMzc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMjY0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449202640", "body": "```suggestion\r\n                .post(\"/AdHocFragments/{path}\", taskPath)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .post(\"/AdHocFragments\" + taskPath)\n          \n          \n            \n                            .post(\"/AdHocFragments/{path}\", taskPath)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .post(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/AdHocFragments<span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x x-last\">+</span> taskPath)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .post(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/AdHocFragments<span class=\"x x-first\">/{path}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">,</span> taskPath)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-07-02T18:38:49Z", "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/AdHocFragmentsTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+\n+@QuarkusTest\n+public class AdHocFragmentsTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testUserTaskProcess() {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"var1\", \"Kermit\");\n+\n+        String pid = given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .body(params)\n+                .post(\"/AdHocFragments\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", not(emptyOrNullString()))\n+                .body(\"var1\", equalTo(\"Kermit\"))\n+                .extract().path(\"id\");\n+\n+        String link = given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .post(\"/AdHocFragments/{pid}/AdHocTask1\", pid)\n+                .then()\n+                .statusCode(200)\n+                .header(\"Link\", notNullValue())\n+                .extract().header(\"Link\");\n+\n+        String taskPath = link.substring(link.indexOf(\"<\") + 1, link.indexOf(\">\"));\n+\n+        params = new HashMap<>();\n+        params.put(\"newVar1\", \"Gonzo\");\n+        given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .body(params)\n+                .post(\"/AdHocFragments\" + taskPath)", "originalCommit": "1d6fd495b42af36d038756024a41f411b942ed56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwOTY3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449209671", "bodyText": "Updated with disabled encoding", "author": "ruromero", "createdAt": "2020-07-02T18:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMjY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMzE4OQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449203189", "body": "```suggestion\r\n        given()\r\n                .contentType(ContentType.JSON)\r\n        .when()\r\n                .body(params)\r\n                .post(\"/AdHocProcess\")\r\n        .then()\r\n                .statusCode(200)\r\n                .body(\"id\", not(emptyOrNullString()))\r\n                .body(\"var1\", equalTo(\"Hello first! Script\"))\r\n                .body(\"var2\", equalTo(\"second Script 2\"));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    given()\n          \n          \n            \n                            .contentType(ContentType.JSON)\n          \n          \n            \n                            .when()\n          \n          \n            \n                            .body(params)\n          \n          \n            \n                            .post(\"/AdHocProcess\")\n          \n          \n            \n                            .then()\n          \n          \n            \n                            .statusCode(200)\n          \n          \n            \n                            .body(\"id\", not(emptyOrNullString()))\n          \n          \n            \n                            .body(\"var1\", equalTo(\"Hello first! Script\"))\n          \n          \n            \n                            .body(\"var2\", equalTo(\"second Script 2\"));\n          \n          \n            \n                    given()\n          \n          \n            \n                            .contentType(ContentType.JSON)\n          \n          \n            \n                    .when()\n          \n          \n            \n                            .body(params)\n          \n          \n            \n                            .post(\"/AdHocProcess\")\n          \n          \n            \n                    .then()\n          \n          \n            \n                            .statusCode(200)\n          \n          \n            \n                            .body(\"id\", not(emptyOrNullString()))\n          \n          \n            \n                            .body(\"var1\", equalTo(\"Hello first! Script\"))\n          \n          \n            \n                            .body(\"var2\", equalTo(\"second Script 2\"));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        given()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .contentType(<span class=\"pl-smi\">ContentType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>JSON</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">        </span>.when()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .body(params)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .post(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/AdHocProcess<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first x-last\">        </span>.then()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"60\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .statusCode(<span class=\"pl-c1\">200</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .body(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, not(emptyOrNullString()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"62\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .body(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var1<span class=\"pl-pds\">\"</span></span>, equalTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello first! Script<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"63\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .body(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var2<span class=\"pl-pds\">\"</span></span>, equalTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>second Script 2<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"54\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        given()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"55\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .contentType(<span class=\"pl-smi\">ContentType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>JSON</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"56\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .when()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"57\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .body(params)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"58\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .post(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/AdHocProcess<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"59\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        .then()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"60\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .statusCode(<span class=\"pl-c1\">200</span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"61\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .body(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, not(emptyOrNullString()))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"62\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .body(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var1<span class=\"pl-pds\">\"</span></span>, equalTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello first! Script<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"63\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .body(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var2<span class=\"pl-pds\">\"</span></span>, equalTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>second Script 2<span class=\"pl-pds\">\"</span></span>));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-07-02T18:39:52Z", "path": "integration-tests/integration-tests-quarkus/src/test/java/org/kie/kogito/integrationtests/quarkus/FlexibleProcessTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.quarkus;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+\n+@QuarkusTest\n+public class FlexibleProcessTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testInstantiateProcess() {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"var1\", \"first\");\n+        params.put(\"var2\", \"second\");\n+\n+        given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .body(params)\n+                .post(\"/AdHocProcess\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", not(emptyOrNullString()))\n+                .body(\"var1\", equalTo(\"Hello first! Script\"))\n+                .body(\"var2\", equalTo(\"second Script 2\"));", "originalCommit": "1d6fd495b42af36d038756024a41f411b942ed56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMzU5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449203593", "body": "```suggestion\r\n                .post(\"/AdHocFragments/{path}\", taskPath)\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .post(\"/AdHocFragments\" + taskPath)\n          \n          \n            \n                            .post(\"/AdHocFragments/{path}\", taskPath)", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .post(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/AdHocFragments<span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x x-last\">+</span> taskPath)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .post(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/AdHocFragments<span class=\"x x-first\">/{path}</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">,</span> taskPath)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-07-02T18:40:44Z", "path": "integration-tests/integration-tests-springboot/src/it/integration-tests-springboot-it/src/test/java/org/kie/kogito/integrationtests/springboot/AdHocFragmentsTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.integrationtests.springboot;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoSpringbootApplication.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n+public class AdHocFragmentsTest {\n+\n+    static {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+    }\n+\n+    @Test\n+    public void testUserTaskProcess() {\n+        Map<String, String> params = new HashMap<>();\n+        params.put(\"var1\", \"Kermit\");\n+\n+        String pid = given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .body(params)\n+                .post(\"/AdHocFragments\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", not(emptyOrNullString()))\n+                .body(\"var1\", equalTo(\"Kermit\"))\n+                .extract().path(\"id\");\n+\n+        String link = given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .post(\"/AdHocFragments/{pid}/AdHocTask1\", pid)\n+                .then()\n+                .statusCode(200)\n+                .header(\"Link\", notNullValue())\n+                .extract().header(\"Link\");\n+\n+        String taskPath = link.substring(link.indexOf(\"<\") + 1, link.indexOf(\">\"));\n+\n+        params = new HashMap<>();\n+        params.put(\"newVar1\", \"Gonzo\");\n+        given()\n+                .contentType(ContentType.JSON)\n+                .when()\n+                .body(params)\n+                .post(\"/AdHocFragments\" + taskPath)", "originalCommit": "1d6fd495b42af36d038756024a41f411b942ed56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwOTczOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449209739", "bodyText": "Same", "author": "ruromero", "createdAt": "2020-07-02T18:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMzU5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1MTYxOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449251619", "body": "I still didn't get where is the place the method name was set with `\"signal_\" + index.getAndIncrement()`, because to filter here, to be removed from the template, you should have set this before, right? I didn't found where it is being set. \r\nBy the way is there a specific test to check if the method was removed from the generated code?", "bodyText": "I still didn't get where is the place the method name was set with \"signal_\" + index.getAndIncrement(), because to filter here, to be removed from the template, you should have set this before, right? I didn't found where it is being set.\nBy the way is there a specific test to check if the method was removed from the generated code?", "bodyHTML": "<p dir=\"auto\">I still didn't get where is the place the method name was set with <code>\"signal_\" + index.getAndIncrement()</code>, because to filter here, to be removed from the template, you should have set this before, right? I didn't found where it is being set.<br>\nBy the way is there a specific test to check if the method was removed from the generated code?</p>", "author": "tiagodolphine", "createdAt": "2020-07-02T20:30:51Z", "path": "kogito-codegen/src/main/java/org/kie/kogito/codegen/process/AbstractResourceGenerator.java", "diffHunk": "@@ -208,9 +209,12 @@ public String generate() {\n                 });\n \n                 template.findAll(StringLiteralExpr.class).forEach(s -> interpolateUserTaskStrings(s, userTask));\n-\n-                template.findAll(ClassOrInterfaceType.class).forEach(c -> interpolateUserTaskTypes(c, userTask.getInputMoodelClassSimpleName(), userTask.getOutputMoodelClassSimpleName()));\n+                template.findAll(ClassOrInterfaceType.class).forEach(c -> interpolateUserTaskTypes(c, userTask.getInputModelClassSimpleName(), userTask.getOutputModelClassSimpleName()));\n                 template.findAll(NameExpr.class).forEach(c -> interpolateUserTaskNameExp(c, userTask));\n+                template.findAll(MethodDeclaration.class)\n+                        .stream()\n+                        .filter(md -> md.getNameAsString().equals(\"signal_\" + index.getAndIncrement()))", "originalCommit": "551d4da02dd5d1712580e3a7ff897fc09218c6f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2NTkyOQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449265929", "bodyText": "This filter was wrong and that's why it failed during the tests. The name of the task methods are now generated using the taskPath\nI am updating the integration tests for this too.", "author": "ruromero", "createdAt": "2020-07-02T21:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1MTYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MzMyMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449573320", "body": "So in the end this Map can be put back inside the if statement, right? As `dynamicParams` is not used outside of the if.", "bodyText": "So in the end this Map can be put back inside the if statement, right? As dynamicParams is not used outside of the if.", "bodyHTML": "<p dir=\"auto\">So in the end this Map can be put back inside the if statement, right? As <code>dynamicParams</code> is not used outside of the if.</p>", "author": "MarianMacik", "createdAt": "2020-07-03T13:04:32Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/impl/WorkflowProcessInstanceImpl.java", "diffHunk": "@@ -636,17 +638,19 @@ public void signalEvent(String type, Object event) {\n                     for (Node node : getWorkflowProcess().getNodes()) {\n                         if (type.equals(node.getName()) && node.getIncomingConnections().isEmpty()) {\n                             NodeInstance nodeInstance = getNodeInstance(node);\n+                            Map<String, Object> dynamicParams = new HashMap<>(getVariables());\n                             if (event != null) {\n-                                Map<String, Object> dynamicParams = new HashMap<>();", "originalCommit": "02f2efe887e0529909feb27ea357ebc3971dc6b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNTMzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449605338", "bodyText": "yep, thanks", "author": "ruromero", "createdAt": "2020-07-03T14:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MzMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3Mzk5MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449573990", "body": "Maybe an additional formatting here would help when reading.", "bodyText": "Maybe an additional formatting here would help when reading.", "bodyHTML": "<p dir=\"auto\">Maybe an additional formatting here would help when reading.</p>", "author": "MarianMacik", "createdAt": "2020-07-03T13:06:03Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/CompositeNodeInstance.java", "diffHunk": "@@ -272,22 +272,33 @@ public void signalEvent(String type, Object event) {\n \t\tList<NodeInstance> currentView = new ArrayList<>(this.nodeInstances);\n \t\tsuper.signalEvent(type, event);\n \t\tfor (Node node: getCompositeNode().internalGetNodes()) {\n-\t\t\tif (node instanceof EventNodeInterface) {\n-\t\t\t\tif (((EventNodeInterface) node).acceptsEvent(type, event)) {\n-\t\t\t\t\tif (node instanceof EventNode && ((EventNode) node).getFrom() == null || node instanceof EventSubProcessNode) {\n-\t\t\t\t\t\tEventNodeInstanceInterface eventNodeInstance = (EventNodeInstanceInterface) getNodeInstance(node);\n-\t\t\t\t\t\teventNodeInstance.signalEvent(type, event);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tList<NodeInstance> nodeInstances = getNodeInstances(node.getId(), currentView);\n-\t\t\t\t\t\tif (nodeInstances != null && !nodeInstances.isEmpty()) {\n-\t\t\t\t\t\t\tfor (NodeInstance nodeInstance : nodeInstances) {\n-\t\t\t\t\t\t\t\t((EventNodeInstanceInterface) nodeInstance)\n-\t\t\t\t\t\t\t\t\t\t.signalEvent(type, event);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\tif (node instanceof EventNodeInterface && ((EventNodeInterface) node).acceptsEvent(type, event)) {", "originalCommit": "02f2efe887e0529909feb27ea357ebc3971dc6b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1NDgxNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449654817", "bodyText": "Formatting is still a little bit of.", "author": "MarianMacik", "createdAt": "2020-07-03T16:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3Mzk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3NDU2Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449574563", "body": "Same here.", "bodyText": "Same here.", "bodyHTML": "<p dir=\"auto\">Same here.</p>", "author": "MarianMacik", "createdAt": "2020-07-03T13:07:21Z", "path": "jbpm/jbpm-flow/src/main/java/org/jbpm/workflow/instance/node/CompositeNodeInstance.java", "diffHunk": "@@ -272,22 +272,33 @@ public void signalEvent(String type, Object event) {\n \t\tList<NodeInstance> currentView = new ArrayList<>(this.nodeInstances);\n \t\tsuper.signalEvent(type, event);\n \t\tfor (Node node: getCompositeNode().internalGetNodes()) {\n-\t\t\tif (node instanceof EventNodeInterface) {\n-\t\t\t\tif (((EventNodeInterface) node).acceptsEvent(type, event)) {\n-\t\t\t\t\tif (node instanceof EventNode && ((EventNode) node).getFrom() == null || node instanceof EventSubProcessNode) {\n-\t\t\t\t\t\tEventNodeInstanceInterface eventNodeInstance = (EventNodeInstanceInterface) getNodeInstance(node);\n-\t\t\t\t\t\teventNodeInstance.signalEvent(type, event);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tList<NodeInstance> nodeInstances = getNodeInstances(node.getId(), currentView);\n-\t\t\t\t\t\tif (nodeInstances != null && !nodeInstances.isEmpty()) {\n-\t\t\t\t\t\t\tfor (NodeInstance nodeInstance : nodeInstances) {\n-\t\t\t\t\t\t\t\t((EventNodeInstanceInterface) nodeInstance)\n-\t\t\t\t\t\t\t\t\t\t.signalEvent(type, event);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\tif (node instanceof EventNodeInterface && ((EventNodeInterface) node).acceptsEvent(type, event)) {\n+                if (node instanceof EventNode && ((EventNode) node).getFrom() == null || node instanceof EventSubProcessNode) {\n+                    EventNodeInstanceInterface eventNodeInstance = (EventNodeInstanceInterface) getNodeInstance(node);\n+                    eventNodeInstance.signalEvent(type, event);\n+                } else {\n+                    List<NodeInstance> nodeInstances = getNodeInstances(node.getId(), currentView);\n+                    if (nodeInstances != null && !nodeInstances.isEmpty()) {\n+                        for (NodeInstance nodeInstance : nodeInstances) {\n+                            ((EventNodeInstanceInterface) nodeInstance)\n+                                    .signalEvent(type, event);\n+                        }\n+                    }\n+                }\n \t\t\t}\n+            if (type.equals(node.getName()) && node.getIncomingConnections().isEmpty()) {\n+                NodeInstance nodeInstance = getNodeInstance(node);\n+                Map<String, Object> dynamicParams = new HashMap<>(getProcessInstance().getVariables());", "originalCommit": "02f2efe887e0529909feb27ea357ebc3971dc6b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3ODI2MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449578261", "body": "Is there any reason to introduce a new parameter? By looking at the AbstractResourceGenerator, signalPath and signalName are replaced with the same signalName value. So having here the same parameter might be less misleading.", "bodyText": "Is there any reason to introduce a new parameter? By looking at the AbstractResourceGenerator, signalPath and signalName are replaced with the same signalName value. So having here the same parameter might be less misleading.", "bodyHTML": "<p dir=\"auto\">Is there any reason to introduce a new parameter? By looking at the AbstractResourceGenerator, signalPath and signalName are replaced with the same signalName value. So having here the same parameter might be less misleading.</p>", "author": "MarianMacik", "createdAt": "2020-07-03T13:15:47Z", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "diffHunk": "@@ -28,18 +28,18 @@\n     Process<$Type$> process;\n \n     @POST\n-    @Path(\"/{id}/$signalName$\")\n+    @Path(\"/{id}/$signalPath$\")", "originalCommit": "02f2efe887e0529909feb27ea357ebc3971dc6b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDc4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449604782", "bodyText": "SignalPath is the sanitized name e.g. Service_Task whereas signalName is the name of the event that will match the node name e.g. Service Task", "author": "ruromero", "createdAt": "2020-07-03T14:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3ODI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1NTUxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449655511", "bodyText": "I see, thanks!", "author": "MarianMacik", "createdAt": "2020-07-03T16:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3ODI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5MTcwMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449591702", "body": "Just a question from the performance point of view. Now I think in Business Central on 7.x, when we trigger a fragment we just send a signal and don't check if it has been triggered I think. We just return as soon as the signal has been sent successfully. This additional check may be not needed/wanted by some users maybe.\r\n\r\nI am not saying it's bad, maybe we should just think also about the quicker option.", "bodyText": "Just a question from the performance point of view. Now I think in Business Central on 7.x, when we trigger a fragment we just send a signal and don't check if it has been triggered I think. We just return as soon as the signal has been sent successfully. This additional check may be not needed/wanted by some users maybe.\nI am not saying it's bad, maybe we should just think also about the quicker option.", "bodyHTML": "<p dir=\"auto\">Just a question from the performance point of view. Now I think in Business Central on 7.x, when we trigger a fragment we just send a signal and don't check if it has been triggered I think. We just return as soon as the signal has been sent successfully. This additional check may be not needed/wanted by some users maybe.</p>\n<p dir=\"auto\">I am not saying it's bad, maybe we should just think also about the quicker option.</p>", "author": "MarianMacik", "createdAt": "2020-07-03T13:46:05Z", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -3,13 +3,36 @@\n import java.util.List;\n \n import org.drools.core.WorkItemNotFoundException;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.impl.Sig;\n \n \n public class $Type$Resource {\n \n-    \n+    @POST\n+    @Path(\"/{id}/$taskName$\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public javax.ws.rs.core.Response signal(@PathParam(\"id\") final String id) {\n+        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n+            if (pi == null) {\n+                return null;\n+            }\n+            pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n+            java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n+            if(task.isPresent()) {\n+                return javax.ws.rs.core.Response.ok(pi.variables())\n+                        .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n+                        .build();\n+            }", "originalCommit": "02f2efe887e0529909feb27ea357ebc3971dc6b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwODk5Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449608993", "bodyText": "The type of userTasks that can receive a signal are the ones that are adHocFragments meaning that are not activated by the previous node or automatically.\nI consider these kind of tasks are most likely to be triggered by web applications that might like to use the created task so actually it will save the external service/webapp from requesting all the tasks and filter out the one that was just created.\nAn example can be an \"Add review\" button that creates the task for a buyer to add a review but the application transparently renders the form with the link returned in the previous request.", "author": "ruromero", "createdAt": "2020-07-03T14:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5MTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1NjE5OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449656198", "bodyText": "OK, I see now. I didn't notice that you actually use the found task.", "author": "MarianMacik", "createdAt": "2020-07-03T16:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5MTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5MzE3OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449593178", "body": "Here the additional check is missing. Is it OK?", "bodyText": "Here the additional check is missing. Is it OK?", "bodyHTML": "<p dir=\"auto\">Here the additional check is missing. Is it OK?</p>", "author": "MarianMacik", "createdAt": "2020-07-03T13:49:37Z", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceUserTaskTemplate.java", "diffHunk": "@@ -13,7 +16,22 @@\n \n public class $Type$Resource {\n \n-    @PostMapping(value = \"/{id}/$taskname$/{workItemId}\", produces = MediaType.APPLICATION_JSON_VALUE,\n+    @PostMapping(value = \"/{id}/$taskName$\", produces = MediaType.APPLICATION_JSON_VALUE,\n+            consumes = MediaType.APPLICATION_JSON_VALUE)\n+    public org.springframework.http.ResponseEntity<$Type$> signal(@PathVariable(\"id\") final String id) {\n+        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n+            if (pi == null) {\n+                return null;\n+            }\n+            pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n+            return org.springframework.http.ResponseEntity.ok()\n+                    .header(\"Link\", \"</\" + id + \"/$taskName$/\" + task.get().getId() + \">; rel='instance'\")\n+                    .body(pi.variables());\n+        });", "originalCommit": "02f2efe887e0529909feb27ea357ebc3971dc6b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1NjM3Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449656372", "bodyText": "Check added to be in sync with RestResourceUserTaskTemplate.java.", "author": "MarianMacik", "createdAt": "2020-07-03T16:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5MzE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3MjQ0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449672440", "body": "I think the call to `pi.variables()` should be wrapped in `getModel` To filter out inputs, internals etc \r\n\r\nSame as done here https://github.com/kiegroup/kogito-runtimes/pull/596/files#diff-6350da7d2030cb169a6592ea0de9c8bdR98", "bodyText": "I think the call to pi.variables() should be wrapped in getModel To filter out inputs, internals etc\nSame as done here https://github.com/kiegroup/kogito-runtimes/pull/596/files#diff-6350da7d2030cb169a6592ea0de9c8bdR98", "bodyHTML": "<p dir=\"auto\">I think the call to <code>pi.variables()</code> should be wrapped in <code>getModel</code> To filter out inputs, internals etc</p>\n<p dir=\"auto\">Same as done here <a href=\"https://github.com/kiegroup/kogito-runtimes/pull/596/files#diff-6350da7d2030cb169a6592ea0de9c8bdR98\">https://github.com/kiegroup/kogito-runtimes/pull/596/files#diff-6350da7d2030cb169a6592ea0de9c8bdR98</a></p>", "author": "mswiderski", "createdAt": "2020-07-03T17:59:10Z", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceUserTaskTemplate.java", "diffHunk": "@@ -3,13 +3,36 @@\n import java.util.List;\n \n import org.drools.core.WorkItemNotFoundException;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.impl.Sig;\n \n \n public class $Type$Resource {\n \n-    \n+    @POST\n+    @Path(\"/{id}/$taskName$\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public javax.ws.rs.core.Response signal(@PathParam(\"id\") final String id) {\n+        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n+            if (pi == null) {\n+                return null;\n+            }\n+            pi.send(Sig.of(\"$taskNodeName$\", java.util.Collections.emptyMap()));\n+            java.util.Optional<WorkItem> task = pi.workItems().stream().filter(wi -> wi.getName().equals(\"$taskName$\")).findFirst();\n+            if(task.isPresent()) {\n+                return javax.ws.rs.core.Response.ok(pi.variables())", "originalCommit": "b57e4ea68f625741442ec5f39aedc7d607a1c9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3MjU0Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449672542", "body": "Same here about wrapping in `getModel`", "bodyText": "Same here about wrapping in getModel", "bodyHTML": "<p dir=\"auto\">Same here about wrapping in <code>getModel</code></p>", "author": "mswiderski", "createdAt": "2020-07-03T17:59:41Z", "path": "kogito-codegen/src/main/resources/class-templates/RestResourceSignalTemplate.java", "diffHunk": "@@ -28,18 +28,18 @@\n     Process<$Type$> process;\n \n     @POST\n-    @Path(\"/{id}/$signalName$\")\n+    @Path(\"/{id}/$signalPath$\")\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public $Type$ signal(@PathParam(\"id\") final String id, final $signalType$ data) {\n-\n-        ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n-        if(pi == null){\n-            return null;\n-        }\n-\n-        pi.send(Sig.of(\"$signalName$\", data));\n-\n-        return pi.variables();\n+        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n+            if (pi == null) {\n+                return null;\n+            }\n+            pi.send(Sig.of(\"$signalName$\", data));\n+            return pi.variables();", "originalCommit": "b57e4ea68f625741442ec5f39aedc7d607a1c9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY3MjkxMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/596#discussion_r449672910", "body": "And one more wrap with `getModel`", "bodyText": "And one more wrap with getModel", "bodyHTML": "<p dir=\"auto\">And one more wrap with <code>getModel</code></p>", "author": "mswiderski", "createdAt": "2020-07-03T18:01:45Z", "path": "kogito-codegen/src/main/resources/class-templates/spring/SpringRestResourceSignalTemplate.java", "diffHunk": "@@ -30,16 +30,15 @@\n \n     Process<$Type$> process;\n \n-    @PostMapping(value = \"/{id}/$signalName$\", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)\n+    @PostMapping(value = \"/{id}/$signalPath$\", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)\n     public $Type$ signal(@PathVariable(\"id\") final String id, final @RequestBody $signalType$ data) {\n-\n-        ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n-        if (pi == null) {\n-            return null;\n-        }\n-\n-        pi.send(Sig.of(\"$signalName$\", data));\n-\n-        return pi.variables();\n+        return org.kie.kogito.services.uow.UnitOfWorkExecutor.executeInUnitOfWork(application.unitOfWorkManager(), () -> {\n+            ProcessInstance<$Type$> pi = process.instances().findById(id).orElse(null);\n+            if (pi == null) {\n+                return null;\n+            }\n+            pi.send(Sig.of(\"$signalName$\", data));\n+            return pi.variables();", "originalCommit": "b57e4ea68f625741442ec5f39aedc7d607a1c9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c9753d297e38e3b78c44b5246d7c318b94444ba", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5c9753d297e38e3b78c44b5246d7c318b94444ba", "message": "[KOGITO-2444] Generate REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-07-06T13:10:53Z", "type": "commit"}, {"oid": "5c9753d297e38e3b78c44b5246d7c318b94444ba", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5c9753d297e38e3b78c44b5246d7c318b94444ba", "message": "[KOGITO-2444] Generate REST endpoints for AdHocFragments\n\nSigned-off-by: ruromero <rromerom@redhat.com>", "committedDate": "2020-07-06T13:10:53Z", "type": "forcePushed"}]}