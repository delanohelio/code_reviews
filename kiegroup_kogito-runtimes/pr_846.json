{"pr_number": 846, "pr_title": "KOGITO-3254: SVG Processing to apply executed path color changes", "pr_author": "nmirasch", "pr_createdAt": "2020-10-22T23:05:21Z", "pr_url": "https://github.com/kiegroup/kogito-runtimes/pull/846", "timeline": [{"oid": "308796690d07bb6f451aa371d3d36d61f4e01e84", "url": "https://github.com/kiegroup/kogito-runtimes/commit/308796690d07bb6f451aa371d3d36d61f4e01e84", "message": "KOGITO-3254: SVG Processing to apply executed path color changes", "committedDate": "2020-10-23T14:23:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMDQwMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r511930403", "body": "I would argue for ProcessSvgService naming, imo it improves readability - similarly to the HttpResponse class imported above. Though I can see legacy naming conventions dictated by SVGImageProcessort and similar ... ", "bodyText": "I would argue for ProcessSvgService naming, imo it improves readability - similarly to the HttpResponse class imported above. Though I can see legacy naming conventions dictated by SVGImageProcessort and similar ...", "bodyHTML": "<p dir=\"auto\">I would argue for ProcessSvgService naming, imo it improves readability - similarly to the HttpResponse class imported above. Though I can see legacy naming conventions dictated by SVGImageProcessort and similar ...</p>", "author": "jstastny-cz", "createdAt": "2020-10-26T12:43:04Z", "path": "addons/svg-process-addon/src/main/java/org/kie/kogito/svg/service/ProcessSVGService.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProcessSVGService {", "originalCommit": "308796690d07bb6f451aa371d3d36d61f4e01e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxMjk5Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r512012996", "bodyText": "@jstastny-cz I renamed in many places SVG to Svg in classes and function, at least is homogeneous throw the current addon.", "author": "nmirasch", "createdAt": "2020-10-26T14:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMDQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMjc2Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r511932767", "body": "the field is named `svgResourcesPath`, but in method we're using different naming convention in `getProcessSVGFromVertxFileSystem`, it would be good to unify.", "bodyText": "the field is named svgResourcesPath, but in method we're using different naming convention in getProcessSVGFromVertxFileSystem, it would be good to unify.", "bodyHTML": "<p dir=\"auto\">the field is named <code>svgResourcesPath</code>, but in method we're using different naming convention in <code>getProcessSVGFromVertxFileSystem</code>, it would be good to unify.</p>", "author": "jstastny-cz", "createdAt": "2020-10-26T12:47:22Z", "path": "addons/svg-process-addon/src/main/java/org/kie/kogito/svg/service/ProcessSVGService.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProcessSVGService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessSVGService.class);\n+\n+    private Vertx vertx;\n+\n+    private Instance<WebClient> providedWebClient;\n+\n+    private WebClient client;\n+    private String dataIndexHttpURL;\n+    private String svgResourcesPath;\n+    private String completedColor;\n+    private String completedBorderColor;\n+    private String activeBorderColor;\n+\n+    @Inject\n+    public ProcessSVGService(\n+            @ConfigProperty(name = \"kogito.dataindex.http.url\", defaultValue = \"http://localhost:8180\") String dataIndexHttpURL,\n+            @ConfigProperty(name = \"kogito.svg.resources.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,\n+            @ConfigProperty(name = \"kogito.svg.color.completed\", defaultValue = \"#C0C0C0\") String completedColor,\n+            @ConfigProperty(name = \"kogito.svg.color.completed.border\", defaultValue = \"#030303\") String completedBorderColor,\n+            @ConfigProperty(name = \"kogito.svg.color.active.border\", defaultValue = \"#FF0000\") String activeBorderColor,\n+            Vertx vertx,\n+            Instance<WebClient> providedWebClient) {\n+        this.dataIndexHttpURL = dataIndexHttpURL;\n+        this.svgResourcesPath = svgResourcesPath;\n+        this.completedColor = completedColor;\n+        this.completedBorderColor = completedBorderColor;\n+        this.activeBorderColor = activeBorderColor;\n+        this.vertx = vertx;\n+        this.providedWebClient = providedWebClient;\n+    }\n+\n+    @PostConstruct\n+    public void initialize() {\n+        if (providedWebClient.isResolvable()) {\n+            this.client = providedWebClient.get();\n+        } else {\n+            WebClientOptions webClientOptions = getDataIndexWebClientOptions(this.dataIndexHttpURL);\n+            setClient(WebClient.create(Vertx.vertx(), webClientOptions));\n+            LOGGER.debug(\"Creating new instance of web client\");\n+        }\n+    }\n+\n+    public WebClient getClient() {\n+        return client;\n+    }\n+\n+    public void setClient(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    public String getProcessSVGFromVertxFileSystem(String processId) {", "originalCommit": "308796690d07bb6f451aa371d3d36d61f4e01e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMzMyMw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r511933323", "bodyText": "And below for the method getSvgFileUni", "author": "jstastny-cz", "createdAt": "2020-10-26T12:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMjc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNDMxMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r512014312", "bodyText": "Agree, I just modify the references to getSvg, getSvgFrom.. Let me know if this fits please :)", "author": "nmirasch", "createdAt": "2020-10-26T14:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMjc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMzg3MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r511933871", "body": "the method naming - it would be good to start with a verb - does `transformSvgToShowExecutedPath` work fine?", "bodyText": "the method naming - it would be good to start with a verb - does transformSvgToShowExecutedPath work fine?", "bodyHTML": "<p dir=\"auto\">the method naming - it would be good to start with a verb - does <code>transformSvgToShowExecutedPath</code> work fine?</p>", "author": "jstastny-cz", "createdAt": "2020-10-26T12:49:18Z", "path": "addons/svg-process-addon/src/main/java/org/kie/kogito/svg/service/ProcessSVGService.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProcessSVGService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessSVGService.class);\n+\n+    private Vertx vertx;\n+\n+    private Instance<WebClient> providedWebClient;\n+\n+    private WebClient client;\n+    private String dataIndexHttpURL;\n+    private String svgResourcesPath;\n+    private String completedColor;\n+    private String completedBorderColor;\n+    private String activeBorderColor;\n+\n+    @Inject\n+    public ProcessSVGService(\n+            @ConfigProperty(name = \"kogito.dataindex.http.url\", defaultValue = \"http://localhost:8180\") String dataIndexHttpURL,\n+            @ConfigProperty(name = \"kogito.svg.resources.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,\n+            @ConfigProperty(name = \"kogito.svg.color.completed\", defaultValue = \"#C0C0C0\") String completedColor,\n+            @ConfigProperty(name = \"kogito.svg.color.completed.border\", defaultValue = \"#030303\") String completedBorderColor,\n+            @ConfigProperty(name = \"kogito.svg.color.active.border\", defaultValue = \"#FF0000\") String activeBorderColor,\n+            Vertx vertx,\n+            Instance<WebClient> providedWebClient) {\n+        this.dataIndexHttpURL = dataIndexHttpURL;\n+        this.svgResourcesPath = svgResourcesPath;\n+        this.completedColor = completedColor;\n+        this.completedBorderColor = completedBorderColor;\n+        this.activeBorderColor = activeBorderColor;\n+        this.vertx = vertx;\n+        this.providedWebClient = providedWebClient;\n+    }\n+\n+    @PostConstruct\n+    public void initialize() {\n+        if (providedWebClient.isResolvable()) {\n+            this.client = providedWebClient.get();\n+        } else {\n+            WebClientOptions webClientOptions = getDataIndexWebClientOptions(this.dataIndexHttpURL);\n+            setClient(WebClient.create(Vertx.vertx(), webClientOptions));\n+            LOGGER.debug(\"Creating new instance of web client\");\n+        }\n+    }\n+\n+    public WebClient getClient() {\n+        return client;\n+    }\n+\n+    public void setClient(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    public String getProcessSVGFromVertxFileSystem(String processId) {\n+        return vertx.fileSystem()\n+                .readFileBlocking(svgResourcesPath + processId + \".svg\")\n+                .toString(UTF_8);\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgFileUni(String processId) {\n+        return getClient().get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgFileContent(resp, processId));\n+    }\n+\n+    protected String getSvgFileContent(HttpResponse<Buffer> resp, String processId) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return getProcessSVGFromVertxFileSystem(processId);\n+    }\n+\n+    public String svgTransformToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes) {", "originalCommit": "308796690d07bb6f451aa371d3d36d61f4e01e84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzNDM0Ng==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r511934346", "body": "can we use constant for the http status code?", "bodyText": "can we use constant for the http status code?", "bodyHTML": "<p dir=\"auto\">can we use constant for the http status code?</p>", "author": "jstastny-cz", "createdAt": "2020-10-26T12:50:04Z", "path": "addons/svg-process-addon/src/main/java/org/kie/kogito/svg/service/ProcessSVGService.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProcessSVGService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProcessSVGService.class);\n+\n+    private Vertx vertx;\n+\n+    private Instance<WebClient> providedWebClient;\n+\n+    private WebClient client;\n+    private String dataIndexHttpURL;\n+    private String svgResourcesPath;\n+    private String completedColor;\n+    private String completedBorderColor;\n+    private String activeBorderColor;\n+\n+    @Inject\n+    public ProcessSVGService(\n+            @ConfigProperty(name = \"kogito.dataindex.http.url\", defaultValue = \"http://localhost:8180\") String dataIndexHttpURL,\n+            @ConfigProperty(name = \"kogito.svg.resources.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,\n+            @ConfigProperty(name = \"kogito.svg.color.completed\", defaultValue = \"#C0C0C0\") String completedColor,\n+            @ConfigProperty(name = \"kogito.svg.color.completed.border\", defaultValue = \"#030303\") String completedBorderColor,\n+            @ConfigProperty(name = \"kogito.svg.color.active.border\", defaultValue = \"#FF0000\") String activeBorderColor,\n+            Vertx vertx,\n+            Instance<WebClient> providedWebClient) {\n+        this.dataIndexHttpURL = dataIndexHttpURL;\n+        this.svgResourcesPath = svgResourcesPath;\n+        this.completedColor = completedColor;\n+        this.completedBorderColor = completedBorderColor;\n+        this.activeBorderColor = activeBorderColor;\n+        this.vertx = vertx;\n+        this.providedWebClient = providedWebClient;\n+    }\n+\n+    @PostConstruct\n+    public void initialize() {\n+        if (providedWebClient.isResolvable()) {\n+            this.client = providedWebClient.get();\n+        } else {\n+            WebClientOptions webClientOptions = getDataIndexWebClientOptions(this.dataIndexHttpURL);\n+            setClient(WebClient.create(Vertx.vertx(), webClientOptions));\n+            LOGGER.debug(\"Creating new instance of web client\");\n+        }\n+    }\n+\n+    public WebClient getClient() {\n+        return client;\n+    }\n+\n+    public void setClient(WebClient client) {\n+        this.client = client;\n+    }\n+\n+    public String getProcessSVGFromVertxFileSystem(String processId) {\n+        return vertx.fileSystem()\n+                .readFileBlocking(svgResourcesPath + processId + \".svg\")\n+                .toString(UTF_8);\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgFileUni(String processId) {\n+        return getClient().get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgFileContent(resp, processId));\n+    }\n+\n+    protected String getSvgFileContent(HttpResponse<Buffer> resp, String processId) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return getProcessSVGFromVertxFileSystem(processId);\n+    }\n+\n+    public String svgTransformToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes) {\n+        if (svg != null) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n+                SVGProcessor processor = new SVGImageProcessor(svgStream).getProcessor();\n+                completedNodes.stream().forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));\n+                activeNodes.stream().forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));\n+                return processor.getSVG();\n+            } else {\n+                return svg;\n+            }\n+        } else {\n+            return \"SVG Not processed\";\n+        }\n+    }\n+\n+    public void fillNodesArrays(HttpResponse<Buffer> response, List<String> completedNodes, List<String> activeNodes) {\n+        if (response.statusCode() == 200) {", "originalCommit": "308796690d07bb6f451aa371d3d36d61f4e01e84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxNTY4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r512015682", "bodyText": "done", "author": "nmirasch", "createdAt": "2020-10-26T14:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzNDM0Ng=="}], "type": "inlineReview"}, {"oid": "301c4ec73f27bd1360d81c63e832f84cd78e53d9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/301c4ec73f27bd1360d81c63e832f84cd78e53d9", "message": "Renaming from SVG to Svg and unify references to Svg", "committedDate": "2020-10-26T14:37:03Z", "type": "forcePushed"}, {"oid": "65a68e132672abc2b82c6c7008ad4c8117cd059f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/65a68e132672abc2b82c6c7008ad4c8117cd059f", "message": "Removed unused files from addon", "committedDate": "2020-10-27T09:38:18Z", "type": "forcePushed"}, {"oid": "b854a00a7daae012b2369d3dc7dd2242d67c1ee9", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b854a00a7daae012b2369d3dc7dd2242d67c1ee9", "message": "In progress ..", "committedDate": "2020-10-30T07:25:15Z", "type": "forcePushed"}, {"oid": "4f5e07c83f176956b0738febaf9ae00fd764541f", "url": "https://github.com/kiegroup/kogito-runtimes/commit/4f5e07c83f176956b0738febaf9ae00fd764541f", "message": "Renamed addon and module reorganization isolating quarkus specific part", "committedDate": "2020-10-30T18:51:42Z", "type": "forcePushed"}, {"oid": "c56167608985fe614e4ff8df13453fba87dcb847", "url": "https://github.com/kiegroup/kogito-runtimes/commit/c56167608985fe614e4ff8df13453fba87dcb847", "message": "Renamed addon and module reorganization isolating quarkus specific part", "committedDate": "2020-10-31T00:12:23Z", "type": "forcePushed"}, {"oid": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "message": "Renamed addon and module reorganization", "committedDate": "2020-10-31T09:56:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NDQxMQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515744411", "body": "Just make sure resources are closed\r\n```suggestion\r\n                try(InputStream svgStream = new ByteArrayInputStream(svg.getBytes())){\r\n```", "bodyText": "Just make sure resources are closed\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n          \n          \n            \n                            try(InputStream svgStream = new ByteArrayInputStream(svg.getBytes())){", "bodyHTML": "<p dir=\"auto\">Just make sure resources are closed</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-smi\">InputStream</span> svgStream <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ByteArrayInputStream</span>(svg<span class=\"pl-k\">.</span>getBytes())<span class=\"x x-first x-last\">;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k x x-first\">try</span><span class=\"x x-last\">(</span><span class=\"pl-smi\">InputStream</span> svgStream <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ByteArrayInputStream</span>(svg<span class=\"pl-k\">.</span>getBytes())<span class=\"x x-first x-last\">){</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-02T05:18:13Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String transformSvgToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NDUzOA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515744538", "body": "```suggestion\r\n                completedNodes.forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            completedNodes.stream().forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));\n          \n          \n            \n                            completedNodes.forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                completedNodes<span class=\"pl-k\">.</span><span class=\"x x-first\">stream()</span><span class=\"pl-k x x-last\">.</span>forEach(nodeId <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> processor<span class=\"pl-k\">.</span>defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                completedNodes<span class=\"pl-k\">.</span>forEach(nodeId <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> processor<span class=\"pl-k\">.</span>defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-02T05:18:47Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String transformSvgToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n+                SVGProcessor processor = new SVGImageProcessor(svgStream).getProcessor();\n+                completedNodes.stream().forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NDU3Mw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515744573", "body": "```suggestion\r\n                activeNodes.forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            activeNodes.stream().forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));\n          \n          \n            \n                            activeNodes.forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                activeNodes<span class=\"pl-k\">.</span><span class=\"x x-first\">stream()</span><span class=\"pl-k x x-last\">.</span>forEach(nodeId <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> processor<span class=\"pl-k\">.</span>defaultActiveTransformation(nodeId, activeBorderColor));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                activeNodes<span class=\"pl-k\">.</span>forEach(nodeId <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> processor<span class=\"pl-k\">.</span>defaultActiveTransformation(nodeId, activeBorderColor));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-02T05:18:56Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String transformSvgToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n+                SVGProcessor processor = new SVGImageProcessor(svgStream).getProcessor();\n+                completedNodes.stream().forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));\n+                activeNodes.stream().forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NDc0MA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515744740", "body": "```suggestion\r\n                nodesArray\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            nodesArray.stream()\n          \n          \n            \n                            nodesArray", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                nodesArray<span class=\"pl-k x x-first\">.</span><span class=\"x x-last\">stream()</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                nodesArray</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-02T05:19:34Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String transformSvgToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n+                SVGProcessor processor = new SVGImageProcessor(svgStream).getProcessor();\n+                completedNodes.stream().forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));\n+                activeNodes.stream().forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));\n+                return processor.getSVG();\n+            } else {\n+                return svg;\n+            }\n+        } else {\n+            return  \"\";\n+        }\n+    }\n+\n+    public void fillNodeArrays(HttpResponse<Buffer> response, List<String> completedNodes, List<String> activeNodes) {\n+        if (response.statusCode() == RESPONSE_STATUS_CODE_OK) {\n+            JsonArray pInstancesArray = response.bodyAsJsonObject().getJsonObject(\"data\")\n+                    .getJsonArray(\"ProcessInstances\");\n+            if (pInstancesArray != null && !pInstancesArray.isEmpty()) {\n+                JsonArray nodesArray = pInstancesArray.getJsonObject(0).getJsonArray(\"nodes\");\n+                nodesArray.stream()", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTczMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515745730", "body": "shouldnt we simply get from the filesystem instead?", "bodyText": "shouldnt we simply get from the filesystem instead?", "bodyHTML": "<p dir=\"auto\">shouldnt we simply get from the filesystem instead?</p>", "author": "cristianonicolai", "createdAt": "2020-11-02T05:24:12Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NTg3NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515745874", "body": "Maybe we should log some error or even fail deployment as the image wont have the execution information?", "bodyText": "Maybe we should log some error or even fail deployment as the image wont have the execution information?", "bodyHTML": "<p dir=\"auto\">Maybe we should log some error or even fail deployment as the image wont have the execution information?</p>", "author": "cristianonicolai", "createdAt": "2020-11-02T05:24:50Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String transformSvgToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n+                SVGProcessor processor = new SVGImageProcessor(svgStream).getProcessor();\n+                completedNodes.stream().forEach(nodeId -> processor.defaultCompletedTransformation(nodeId, completedColor, completedBorderColor));\n+                activeNodes.stream().forEach(nodeId -> processor.defaultActiveTransformation(nodeId, activeBorderColor));\n+                return processor.getSVG();\n+            } else {\n+                return svg;\n+            }\n+        } else {\n+            return  \"\";\n+        }\n+    }\n+\n+    public void fillNodeArrays(HttpResponse<Buffer> response, List<String> completedNodes, List<String> activeNodes) {\n+        if (response.statusCode() == RESPONSE_STATUS_CODE_OK) {\n+            JsonArray pInstancesArray = response.bodyAsJsonObject().getJsonObject(\"data\")\n+                    .getJsonArray(\"ProcessInstances\");\n+            if (pInstancesArray != null && !pInstancesArray.isEmpty()) {\n+                JsonArray nodesArray = pInstancesArray.getJsonObject(0).getJsonArray(\"nodes\");\n+                nodesArray.stream()\n+                        .forEach(node -> {\n+                            if (isNull(((JsonObject) node).getInstant(\"exit\"))) {\n+                                activeNodes.add(((JsonObject) node).getString(\"definitionId\"));\n+                            } else {\n+                                completedNodes.add(((JsonObject) node).getString(\"definitionId\"));\n+                            }\n+                        });\n+            }\n+        }\n+    }\n+\n+    public WebClientOptions getWebClientToURLOptions(String targetHttpURL) {\n+        try {\n+            URL dataIndexURL = new URL(targetHttpURL);\n+            return new WebClientOptions()\n+                    .setDefaultHost(dataIndexURL.getHost())\n+                    .setDefaultPort(dataIndexURL.getPort())\n+                    .addEnabledSecureTransportProtocol(dataIndexURL.getProtocol());\n+        } catch (MalformedURLException malformedURLException) {\n+        }", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0NzY4OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515747688", "body": "@nmirasch in the runtimes, we've been using JAX-RS to build REST services based on Quarkus, do you think would be ok to migrate to that instead of using VertX?\r\n\r\n```suggestion\r\n    @Route(path = \"/svg/processes/:processId/instances/:processInstanceId\", methods = HttpMethod.GET, produces = \"application/svg+xml\")\r\n```", "bodyText": "@nmirasch in the runtimes, we've been using JAX-RS to build REST services based on Quarkus, do you think would be ok to migrate to that instead of using VertX?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Route(path = \"/svg/process/:processId/instances/:processInstanceId\", methods = HttpMethod.GET, produces = \"application/svg+xml\")\n          \n          \n            \n                @Route(path = \"/svg/processes/:processId/instances/:processInstanceId\", methods = HttpMethod.GET, produces = \"application/svg+xml\")", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nmirasch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nmirasch\">@nmirasch</a> in the runtimes, we've been using JAX-RS to build REST services based on Quarkus, do you think would be ok to migrate to that instead of using VertX?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Route</span>(<span class=\"pl-c1\">path</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/svg/<span class=\"x x-first x-last\">process</span>/:processId/instances/:processInstanceId<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">methods</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">HttpMethod</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>GET</span>, <span class=\"pl-c1\">produces</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>application/svg+xml<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">@Route</span>(<span class=\"pl-c1\">path</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/svg/<span class=\"x x-first x-last\">processes</span>/:processId/instances/:processInstanceId<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">methods</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">HttpMethod</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>GET</span>, <span class=\"pl-c1\">produces</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>application/svg+xml<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-02T05:32:50Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/main/java/org/kie/kogito/svg/rest/ProcessSvgResource.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.rest;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.vertx.web.Route;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.StaticHandler;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import org.kie.kogito.svg.service.QuarkusProcessSvgService;\n+\n+@ApplicationScoped\n+public class ProcessSvgResource {\n+\n+    @Inject\n+    QuarkusProcessSvgService service;\n+\n+    public void setupRouter(@Observes Router router) {\n+        StaticHandler diagramHandler = StaticHandler.create();\n+        diagramHandler.setAllowRootFileSystemAccess(true);\n+        diagramHandler.setWebRoot(service.getSvgResourcesPath());\n+        router.route(\"/diagram/*\").handler(diagramHandler);\n+    }\n+\n+    @Route(path = \"/svg/process/:processId/instances/:processInstanceId\", methods = HttpMethod.GET, produces = \"application/svg+xml\")", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0ODQ4Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r515748482", "body": "Maybe call it _annotateExecutedPath_ ? As it is inside _ProcessSvgService_ already.", "bodyText": "Maybe call it annotateExecutedPath ? As it is inside ProcessSvgService already.", "bodyHTML": "<p dir=\"auto\">Maybe call it <em>annotateExecutedPath</em> ? As it is inside <em>ProcessSvgService</em> already.</p>", "author": "cristianonicolai", "createdAt": "2020-11-02T05:36:13Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+\n+    public String getSvgResourcesPath() {\n+        return svgResourcesPath;\n+    }\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String transformSvgToShowExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {", "originalCommit": "cbd3e58caacc7819d244e2d3c4ac6185f5db33e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "message": "Moved to JAX-RS to build rest, and search file directly on file system", "committedDate": "2020-11-02T09:59:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MDE4NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516470184", "body": "commented code", "bodyText": "commented code", "bodyHTML": "<p dir=\"auto\">commented code</p>", "author": "jstastny-cz", "createdAt": "2020-11-03T07:40:28Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/test/java/org/kie/kogito/svg/service/QuarkusProcessSvgServiceTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import javax.enterprise.inject.Instance;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.svg.ProcessSvgService;\n+import org.kie.kogito.svg.ProcessSvgServiceTest;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+@ExtendWith(MockitoExtension.class)\n+public class QuarkusProcessSvgServiceTest extends ProcessSvgServiceTest {\n+\n+    private QuarkusProcessSvgService tested;\n+    //private Vertx vertxMock;", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzNzI1Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516937257", "bodyText": "removed", "author": "nmirasch", "createdAt": "2020-11-03T20:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MDE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjY5MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516476691", "body": "one more method with SVG", "bodyText": "one more method with SVG", "bodyHTML": "<p dir=\"auto\">one more method with SVG</p>", "author": "jstastny-cz", "createdAt": "2020-11-03T07:56:05Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/test/java/org/kie/kogito/svg/rest/ProcessSvgResourceTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.rest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.kie.kogito.svg.service.QuarkusProcessSvgService;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class ProcessSvgResourceTest {\n+\n+    private final static String PROCESS_INSTANCE_ID = \"piId\";\n+    private final static String PROCESS_ID = \"travels\";\n+\n+    private ProcessSvgResource processSvgResourceTest;\n+    private QuarkusProcessSvgService processSvgServiceMock;\n+    private HttpResponse responseMock;\n+    private String svgFileContent;\n+\n+    @BeforeAll\n+    public void setup() {\n+        processSvgResourceTest = new ProcessSvgResource();\n+        processSvgServiceMock = mock(QuarkusProcessSvgService.class);\n+        responseMock = mock(HttpResponse.class);\n+        svgFileContent = \"svg\";\n+        processSvgResourceTest.setProcessSvgService(processSvgServiceMock);\n+\n+        lenient().when(processSvgServiceMock.getSvgUni(eq(PROCESS_ID), any()))\n+                .thenReturn(Uni.createFrom().item(getTravelsSVGFile()));\n+        lenient().when(processSvgServiceMock.getNodesQueryUni(PROCESS_ID, PROCESS_INSTANCE_ID))\n+                .thenReturn(Uni.createFrom().item(responseMock));\n+    }\n+\n+    @Test\n+    void getSVGExecutionPathByProcessInstanceTest() {\n+        processSvgResourceTest.getExecutionPathByProcessInstanceId(PROCESS_ID, PROCESS_INSTANCE_ID);\n+        verify(processSvgServiceMock).getNodesQueryUni(PROCESS_ID, PROCESS_INSTANCE_ID);\n+    }\n+\n+    public String getTravelsSVGFile() {", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3OTI0Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516479247", "body": "couldn't we check http code instead of body?", "bodyText": "couldn't we check http code instead of body?", "bodyHTML": "<p dir=\"auto\">couldn't we check http code instead of body?</p>", "author": "jstastny-cz", "createdAt": "2020-11-03T08:01:26Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+    protected Vertx vertx;\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public String getSvgFromVertxFileSystem(String processId) {\n+     return vertx.fileSystem()\n+             .readFileBlocking(svgResourcesPath + \"/\"+ processId + \".svg\")\n+             .toString(UTF_8);\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4MDc5NQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516480795", "body": "here maybe again try-with-resources for the stream", "bodyText": "here maybe again try-with-resources for the stream", "bodyHTML": "<p dir=\"auto\">here maybe again try-with-resources for the stream</p>", "author": "jstastny-cz", "createdAt": "2020-11-03T08:04:51Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+    protected Vertx vertx;\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public String getSvgFromVertxFileSystem(String processId) {\n+     return vertx.fileSystem()\n+             .readFileBlocking(svgResourcesPath + \"/\"+ processId + \".svg\")\n+             .toString(UTF_8);\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String annotateExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                try {\n+                    InputStream svgStream = new ByteArrayInputStream(svg.getBytes());", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4ODczMg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516488732", "body": "formatting", "bodyText": "formatting", "bodyHTML": "<p dir=\"auto\">formatting</p>", "author": "jstastny-cz", "createdAt": "2020-11-03T08:21:39Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+    protected Vertx vertx;\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4MzczMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516483730", "body": "```suggestion\r\n                try (InputStream svgStream = new ByteArrayInputStream(svg.getBytes())) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            try {\n          \n          \n            \n                                InputStream svgStream = new ByteArrayInputStream(svg.getBytes());\n          \n          \n            \n                            try (InputStream svgStream = new ByteArrayInputStream(svg.getBytes())) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">try</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    <span class=\"pl-smi\">InputStream</span> svgStream <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ByteArrayInputStream</span>(svg<span class=\"pl-k\">.</span>getBytes());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">InputStream</span> svgStream <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ByteArrayInputStream</span>(svg<span class=\"pl-k\">.</span>getBytes())) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-03T08:11:15Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+    protected Vertx vertx;\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public String getSvgFromVertxFileSystem(String processId) {\n+     return vertx.fileSystem()\n+             .readFileBlocking(svgResourcesPath + \"/\"+ processId + \".svg\")\n+             .toString(UTF_8);\n+    }\n+\n+    public Uni<String> getSvgUni(String processId, RoutingContext context) {\n+        return getAddonWebClient(context).get(\"/diagram/\" + processId + \".svg\")\n+                .send()\n+                .map(resp -> getSvgContent(resp));\n+    }\n+\n+    protected String getSvgContent(HttpResponse<Buffer> resp) {\n+        if (resp != null &&\n+                resp.bodyAsString() != null &&\n+                !resp.bodyAsString().contains(\"<title>404 - Resource Not Found</title>\")) {\n+            return resp.bodyAsString();\n+        }\n+        return \"\";\n+    }\n+\n+    public String annotateExecutedPath(String svg, List<String> completedNodes, List<String> activeNodes)  {\n+        if (svg != null && !svg.isEmpty()) {\n+            if (!(completedNodes.isEmpty() && activeNodes.isEmpty())) {\n+                try {\n+                    InputStream svgStream = new ByteArrayInputStream(svg.getBytes());", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4Njk3Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516486977", "body": "```suggestion\r\n            @ConfigProperty(name = \"kogito.svg.folder.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,\r\n```\r\nshouldnt this one be null or empty by default? as it would be used to point to an external folder?", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @ConfigProperty(name = \"kogito.svg-diagram.folder.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,\n          \n          \n            \n                        @ConfigProperty(name = \"kogito.svg.folder.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,\n          \n      \n    \n    \n  \n\nshouldnt this one be null or empty by default? as it would be used to point to an external folder?", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">@ConfigProperty</span>(<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kogito.svg<span class=\"x x-first x-last\">-diagram</span>.folder.path<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">defaultValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>META-INF/processSVG/<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">String</span> svgResourcesPath,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">@ConfigProperty</span>(<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>kogito.svg.folder.path<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">defaultValue</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>META-INF/processSVG/<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-smi\">String</span> svgResourcesPath,</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">shouldnt this one be null or empty by default? as it would be used to point to an external folder?</p>", "author": "cristianonicolai", "createdAt": "2020-11-03T08:18:12Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/main/java/org/kie/kogito/svg/service/QuarkusProcessSvgService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.svg.ProcessSvgService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class QuarkusProcessSvgService extends ProcessSvgService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusProcessSvgService.class);\n+\n+    private Instance<WebClient> providedWebClient;\n+\n+    @Inject\n+    public QuarkusProcessSvgService(\n+            @ConfigProperty(name = \"kogito.dataindex.http.url\", defaultValue = \"http://localhost:8180\") String dataIndexHttpURL,\n+            @ConfigProperty(name = \"kogito.svg-diagram.folder.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMjAyNw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516502027", "body": "can we use the inferface here instead?", "bodyText": "can we use the inferface here instead?", "bodyHTML": "<p dir=\"auto\">can we use the inferface here instead?</p>", "author": "cristianonicolai", "createdAt": "2020-11-03T08:46:54Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/main/java/org/kie/kogito/svg/rest/ProcessSvgResource.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.rest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import org.kie.kogito.svg.service.QuarkusProcessSvgService;\n+\n+@ApplicationScoped\n+@Path(\"/svg/\")\n+public class ProcessSvgResource {\n+\n+    @Inject\n+    QuarkusProcessSvgService service;", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMjQ4MQ==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516502481", "body": "@nmirasch could you add another method to simply retrieve the SVG for a process, without annotation.\r\n`@Path(\"processes/{processId})`", "bodyText": "@nmirasch could you add another method to simply retrieve the SVG for a process, without annotation.\n@Path(\"processes/{processId})", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nmirasch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nmirasch\">@nmirasch</a> could you add another method to simply retrieve the SVG for a process, without annotation.<br>\n<code>@Path(\"processes/{processId})</code></p>", "author": "cristianonicolai", "createdAt": "2020-11-03T08:47:46Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/main/java/org/kie/kogito/svg/rest/ProcessSvgResource.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.rest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import org.kie.kogito.svg.service.QuarkusProcessSvgService;\n+\n+@ApplicationScoped\n+@Path(\"/svg/\")\n+public class ProcessSvgResource {", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMzI2OA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516533268", "body": "@nmirasch seems like you're doing multiple calls to the same service, passing different parameters, I think it would be better if you could simply have one method `getProcessInstanceSVG` which gives you the annotated one, so everything else is considered internals of the service, wdyt?", "bodyText": "@nmirasch seems like you're doing multiple calls to the same service, passing different parameters, I think it would be better if you could simply have one method getProcessInstanceSVG which gives you the annotated one, so everything else is considered internals of the service, wdyt?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nmirasch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nmirasch\">@nmirasch</a> seems like you're doing multiple calls to the same service, passing different parameters, I think it would be better if you could simply have one method <code>getProcessInstanceSVG</code> which gives you the annotated one, so everything else is considered internals of the service, wdyt?</p>", "author": "cristianonicolai", "createdAt": "2020-11-03T09:40:04Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/main/java/org/kie/kogito/svg/rest/ProcessSvgResource.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.rest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import org.kie.kogito.svg.service.QuarkusProcessSvgService;\n+\n+@ApplicationScoped\n+@Path(\"/svg/\")\n+public class ProcessSvgResource {\n+\n+    @Inject\n+    QuarkusProcessSvgService service;\n+\n+    @Path(\"processes/{processId}/instances/{processInstanceId}\")\n+    @GET\n+    @Produces(MediaType.APPLICATION_SVG_XML)\n+    public Uni<String> getExecutionPathByProcessInstanceId(\n+            @PathParam(\"processId\") String processId,\n+            @PathParam(\"processInstanceId\") String processInstanceId) {\n+        Uni<HttpResponse<Buffer>> queryNodesUni = service.getNodesQueryUni(processId, processInstanceId);\n+        String svg = service.getSvgFromVertxFileSystem(processId);\n+        return queryNodesUni.onItem().transform(queryResults -> {\n+            List<String> completedNodes = new ArrayList<>();\n+            List<String> activeNodes = new ArrayList<>();\n+            service.fillNodeArrays(queryResults, completedNodes, activeNodes);\n+            return service.annotateExecutedPath(svg, completedNodes, activeNodes);", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMzcwMA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r516533700", "body": "maybe call it?\r\n```suggestion\r\n    public String getProcessSVG(String processId) {\r\n```", "bodyText": "maybe call it?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String getSvgFromVertxFileSystem(String processId) {\n          \n          \n            \n                public String getProcessSVG(String processId) {", "bodyHTML": "<p dir=\"auto\">maybe call it?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">getSvgFromVertxFileSystem</span>(<span class=\"pl-smi\">String</span> processId) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">getProcessSVG</span>(<span class=\"pl-smi\">String</span> processId) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cristianonicolai", "createdAt": "2020-11-03T09:40:47Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/ProcessSvgService.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.core.buffer.Buffer;\n+import io.vertx.mutiny.ext.web.client.HttpResponse;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.isNull;\n+\n+import org.jbpm.process.svg.SVGImageProcessor;\n+import org.jbpm.process.svg.processor.SVGProcessor;\n+\n+\n+public abstract class ProcessSvgService {\n+    public static final int RESPONSE_STATUS_CODE_OK = 200;\n+    protected WebClient dataIndexWebClient;\n+    protected WebClient addonWebClient;\n+\n+    protected String dataIndexHttpURL;\n+    protected String svgResourcesPath;\n+    protected String completedColor;\n+    protected String completedBorderColor;\n+    protected String activeBorderColor;\n+    protected Vertx vertx;\n+\n+    public WebClient getDataIndexWebClient() {\n+        return dataIndexWebClient;\n+    }\n+\n+    public void setDataIndexWebClient(WebClient dataIndexWebClient) {\n+        this.dataIndexWebClient = dataIndexWebClient;\n+    }\n+\n+    public WebClient getAddonWebClient(RoutingContext context) {\n+        if(addonWebClient == null ){\n+            setAddonWebClient(WebClient.create(Vertx.vertx(),  getWebClientToURLOptions(context.request().absoluteURI())));\n+        }\n+        return addonWebClient;\n+    }\n+\n+    public void setAddonWebClient(WebClient addonWebClient) {\n+        this.addonWebClient = addonWebClient;\n+    }\n+\n+    public Uni<HttpResponse<Buffer>> getNodesQueryUni(String processId, String processInstanceId) {\n+        String query = \"{ ProcessInstances ( where: { and : {  id: {  equal : \\\"\" + processInstanceId + \"\\\" }, processId : { equal : \\\"\" + processId + \"\\\"} } }) { nodes { definitionId exit } } }\";\n+        return getDataIndexWebClient().post(\"/graphql\")\n+                .sendJson(JsonObject.mapFrom(Collections.singletonMap(\"query\", query)));\n+    }\n+\n+    public String getSvgFromVertxFileSystem(String processId) {", "originalCommit": "8fb2cde58f7dff7b25daeba0a4d3bcc9300303c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b08c6549535039eb7f9211232dfdcc8a33e2739e", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b08c6549535039eb7f9211232dfdcc8a33e2739e", "message": "remove dep with v7 code, and added search file on classpath", "committedDate": "2020-11-03T17:59:25Z", "type": "forcePushed"}, {"oid": "e19ac1f00b142e3d2b73eae1e161affdf57310d4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e19ac1f00b142e3d2b73eae1e161affdf57310d4", "message": "remove dep with v7 code, and added search file on classpath", "committedDate": "2020-11-03T20:44:21Z", "type": "forcePushed"}, {"oid": "f5877c70a72229cc0721a4aa56011472727580ed", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f5877c70a72229cc0721a4aa56011472727580ed", "message": "remove dep with v7 code, and added search file on classpath", "committedDate": "2020-11-03T23:25:21Z", "type": "forcePushed"}, {"oid": "13496739fc6789f127888cf9473df6d8ca81f4a3", "url": "https://github.com/kiegroup/kogito-runtimes/commit/13496739fc6789f127888cf9473df6d8ca81f4a3", "message": "remove dep with v7 code, and added search file on classpath", "committedDate": "2020-11-04T07:40:55Z", "type": "forcePushed"}, {"oid": "39d1305631397e960c6d2bc48a91e70ed1d38b98", "url": "https://github.com/kiegroup/kogito-runtimes/commit/39d1305631397e960c6d2bc48a91e70ed1d38b98", "message": "remove dep with v7 code, and added search file on classpath", "committedDate": "2020-11-04T23:23:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc1NjM5Nw==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r517756397", "body": "this can be removed, as it targets old designer?", "bodyText": "this can be removed, as it targets old designer?", "bodyHTML": "<p dir=\"auto\">this can be removed, as it targets old designer?</p>", "author": "cristianonicolai", "createdAt": "2020-11-05T02:33:10Z", "path": "addons/process-svg/process-svg-common/src/main/java/org/kie/kogito/svg/processor/JBPMDesignerSVGProcessor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.processor;\n+\n+import org.apache.batik.anim.dom.SVGOMTSpanElement;\n+import org.kie.kogito.svg.model.NodeSummary;\n+import org.kie.kogito.svg.model.SetBackgroundColorTransformation;\n+import org.kie.kogito.svg.model.SetBorderColorTransformation;\n+import org.kie.kogito.svg.model.SetSubProcessLinkTransformation;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+public class JBPMDesignerSVGProcessor extends AbstractSVGProcessor {", "originalCommit": "39d1305631397e960c6d2bc48a91e70ed1d38b98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc1ODE0NA==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r517758144", "body": "@nmirasch still think that this folder should not be set, it either points to an external folder of we use the classpath to find the svg?", "bodyText": "@nmirasch still think that this folder should not be set, it either points to an external folder of we use the classpath to find the svg?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nmirasch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nmirasch\">@nmirasch</a> still think that this folder should not be set, it either points to an external folder of we use the classpath to find the svg?</p>", "author": "cristianonicolai", "createdAt": "2020-11-05T02:36:44Z", "path": "addons/process-svg/process-svg-quarkus-addon/src/main/java/org/kie/kogito/svg/service/QuarkusProcessSvgService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg.service;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.ext.web.client.WebClient;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.svg.ProcessSvgService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class QuarkusProcessSvgService extends ProcessSvgService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(QuarkusProcessSvgService.class);\n+\n+    private Instance<WebClient> providedWebClient;\n+\n+    @Inject\n+    public QuarkusProcessSvgService(\n+            @ConfigProperty(name = \"kogito.dataindex.http.url\", defaultValue = \"http://localhost:8180\") String dataIndexHttpURL,\n+            @ConfigProperty(name = \"kogito.svg.folder.path\", defaultValue = \"META-INF/processSVG/\") String svgResourcesPath,", "originalCommit": "39d1305631397e960c6d2bc48a91e70ed1d38b98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "646bf27f058fe2bf13ef72d85f9df120d1178611", "url": "https://github.com/kiegroup/kogito-runtimes/commit/646bf27f058fe2bf13ef72d85f9df120d1178611", "message": "added integration test", "committedDate": "2020-11-05T17:54:38Z", "type": "forcePushed"}, {"oid": "f0cb39fb3f76c98a6a04640b88da432ebfb4ce91", "url": "https://github.com/kiegroup/kogito-runtimes/commit/f0cb39fb3f76c98a6a04640b88da432ebfb4ce91", "message": "KOGITO-3254: SVG Processing to apply executed path color changes", "committedDate": "2020-11-05T19:54:07Z", "type": "forcePushed"}, {"oid": "b20bf71b6a254babb9b3b2703d58e51e260c489c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b20bf71b6a254babb9b3b2703d58e51e260c489c", "message": "KOGITO-3254 More Sonar fixes", "committedDate": "2020-11-06T10:27:28Z", "type": "forcePushed"}, {"oid": "560e1bfdbfbba1e341ee211643a368506ac4be47", "url": "https://github.com/kiegroup/kogito-runtimes/commit/560e1bfdbfbba1e341ee211643a368506ac4be47", "message": "sonarcloud fix", "committedDate": "2020-11-06T16:06:54Z", "type": "forcePushed"}, {"oid": "889b55d98dbfebafb1dc1f8a3463ceff22e9b9dc", "url": "https://github.com/kiegroup/kogito-runtimes/commit/889b55d98dbfebafb1dc1f8a3463ceff22e9b9dc", "message": "sonarcloud fix", "committedDate": "2020-11-06T19:46:23Z", "type": "forcePushed"}, {"oid": "a834d7546ef6a5709e1ac12621e36d837a825ac2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/a834d7546ef6a5709e1ac12621e36d837a825ac2", "message": "KOGITO-3254: Sonar fixes", "committedDate": "2020-11-06T22:48:32Z", "type": "forcePushed"}, {"oid": "bdf99c6390d0788f11737fdb503d808eebbc5c37", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bdf99c6390d0788f11737fdb503d808eebbc5c37", "message": "KOGITO-3254: Add coverage", "committedDate": "2020-11-09T08:27:53Z", "type": "forcePushed"}, {"oid": "e9778b178d68d22c2100a87d3b4892f00cf31910", "url": "https://github.com/kiegroup/kogito-runtimes/commit/e9778b178d68d22c2100a87d3b4892f00cf31910", "message": "KOGITO-3254: Add coverage", "committedDate": "2020-11-10T19:22:21Z", "type": "forcePushed"}, {"oid": "97f01b3a323ea6027ab3887260704d1068be4083", "url": "https://github.com/kiegroup/kogito-runtimes/commit/97f01b3a323ea6027ab3887260704d1068be4083", "message": "KOGITO-3254: Add coverage", "committedDate": "2020-11-10T21:52:43Z", "type": "forcePushed"}, {"oid": "cab8cccdeec05ebc28134a22d4e61d8f24a29761", "url": "https://github.com/kiegroup/kogito-runtimes/commit/cab8cccdeec05ebc28134a22d4e61d8f24a29761", "message": "KOGITO-3254: Fix expected-approval resource and updated addon to 2.0.0-SNAPSHOT", "committedDate": "2020-11-11T08:02:33Z", "type": "forcePushed"}, {"oid": "bc550a15e0746ef54ef6cb21684278f8f6e7f935", "url": "https://github.com/kiegroup/kogito-runtimes/commit/bc550a15e0746ef54ef6cb21684278f8f6e7f935", "message": "KOGITO-3254: Fix expected-approval resource and updated addon to 2.0.0-SNAPSHOT", "committedDate": "2020-11-11T09:35:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3ODQ2Mg==", "url": "https://github.com/kiegroup/kogito-runtimes/pull/846#discussion_r521878462", "body": "@nmirasch I was checking the sonar report and I think if you define processService and the other collections as variables and then do the expected exception assertation, it would work. The problem now is that is calling multiple things that could ", "bodyText": "@nmirasch I was checking the sonar report and I think if you define processService and the other collections as variables and then do the expected exception assertation, it would work. The problem now is that is calling multiple things that could", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nmirasch/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nmirasch\">@nmirasch</a> I was checking the sonar report and I think if you define processService and the other collections as variables and then do the expected exception assertation, it would work. The problem now is that is calling multiple things that could</p>", "author": "cristianonicolai", "createdAt": "2020-11-12T07:03:36Z", "path": "addons/process-svg/process-svg-common/src/test/java/org/kie/kogito/svg/ProcessSvgServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.svg;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public abstract class ProcessSvgServiceTest {\n+\n+    private final static String PROCESS_ID = \"travels\";\n+\n+    public static String readFileContent(String file) throws URISyntaxException, IOException {\n+        Path path = Paths.get(Thread.currentThread().getContextClassLoader().getResource(file).toURI());\n+        return new String(Files.readAllBytes(path));\n+    }\n+\n+    @Test\n+    public void getProcessSvgWithoutSvgResourcePathTest() throws Exception {\n+        String fileContent = getTravelsSVGFile();\n+        Optional<String> svgContent = getTestedProcessSvgService().getProcessSvg(PROCESS_ID);\n+        assertThat(svgContent).isPresent().hasValue(fileContent);\n+    }\n+\n+    @Test\n+    public void getProcessSvgFromFileSystemSuccessTest() throws Exception {\n+        String fileContent = getTravelsSVGFile();\n+        getTestedProcessSvgService().setSvgResourcesPath(Optional.of(\"./src/test/resources/META-INF/processSVG/\"));\n+        Optional<String> svgContent = getTestedProcessSvgService().getProcessSvg(PROCESS_ID);\n+        assertThat(svgContent).isPresent().hasValue(fileContent);\n+    }\n+\n+    @Test\n+    public void getProcessSvgFromFileSystemFailTest() throws Exception {\n+        getTestedProcessSvgService().setSvgResourcesPath(Optional.of(\"./src/test/resources/META-INF/processSVG/\"));\n+        assertThat(getTestedProcessSvgService().getProcessSvg(\"UnexistingProcessId\")).isEmpty();\n+    }\n+\n+    @Test\n+    public void annotateExecutedPathTest() throws Exception {\n+        assertThat(getTestedProcessSvgService().annotateExecutedPath(\n+                getTravelsSVGFile(),\n+                Arrays.asList(\"_1A708F87-11C0-42A0-A464-0B7E259C426F\"),\n+                Collections.emptyList())).hasValue(readFileContent(\"travels-expected.svg\"));\n+        assertThat(getTestedProcessSvgService().annotateExecutedPath(\n+                null,\n+                Arrays.asList(\"_1A708F87-11C0-42A0-A464-0B7E259C426F\"),\n+                Collections.emptyList())).isEmpty();\n+        assertThat(getTestedProcessSvgService().annotateExecutedPath(\n+                getTravelsSVGFile(),\n+                Collections.emptyList(),\n+                Collections.emptyList())).hasValue(getTravelsSVGFile());\n+    }\n+\n+    @Test\n+    public void readFileFromClassPathTest() throws Exception {\n+        assertThat(getTestedProcessSvgService().readFileContentFromClassPath(\"undefined\")).isEmpty();\n+        assertThat(getTravelsSVGFile()).isEqualTo(getTestedProcessSvgService().readFileContentFromClassPath(\"travels.svg\").get());\n+    }\n+\n+    @Test\n+    public void testWrongSVGContentThrowsException() {\n+        try {\n+            getTestedProcessSvgService().annotateExecutedPath(", "originalCommit": "bc550a15e0746ef54ef6cb21684278f8f6e7f935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8eec1c1327a80bf215dfb772191297e4544c24f0", "url": "https://github.com/kiegroup/kogito-runtimes/commit/8eec1c1327a80bf215dfb772191297e4544c24f0", "message": "KOGITO-3254: sonar cloud code smell fixes", "committedDate": "2020-11-12T17:25:04Z", "type": "forcePushed"}, {"oid": "5b778e3484ef6ce1df8d8c4517a74a1fb9170430", "url": "https://github.com/kiegroup/kogito-runtimes/commit/5b778e3484ef6ce1df8d8c4517a74a1fb9170430", "message": "KOGITO-3254: sonarcloud code smell fixes", "committedDate": "2020-11-12T19:33:23Z", "type": "forcePushed"}, {"oid": "97739875d89c777306a32f3098258cbe18eb0c13", "url": "https://github.com/kiegroup/kogito-runtimes/commit/97739875d89c777306a32f3098258cbe18eb0c13", "message": "KOGITO-3254 Register SVG files for native build", "committedDate": "2020-11-13T07:22:41Z", "type": "forcePushed"}, {"oid": "3cb05950943e63062a4e96947962cfac50a86c4d", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3cb05950943e63062a4e96947962cfac50a86c4d", "message": "KOGITO-3254: sonarcloud  fixes", "committedDate": "2020-11-18T16:17:17Z", "type": "forcePushed"}, {"oid": "0944ff183c530ead452de22e51f9a3f9295afaa2", "url": "https://github.com/kiegroup/kogito-runtimes/commit/0944ff183c530ead452de22e51f9a3f9295afaa2", "message": "KOGITO-3254: SVG Processing to apply executed path color changes", "committedDate": "2020-11-20T07:31:14Z", "type": "commit"}, {"oid": "d31663a71590cbcabd47ec8a54168baca87c32f4", "url": "https://github.com/kiegroup/kogito-runtimes/commit/d31663a71590cbcabd47ec8a54168baca87c32f4", "message": "KOGITO-3254: Add coverage", "committedDate": "2020-11-20T07:31:14Z", "type": "commit"}, {"oid": "7881086ad98cd3d044cea21f21dbdee0b1fb7110", "url": "https://github.com/kiegroup/kogito-runtimes/commit/7881086ad98cd3d044cea21f21dbdee0b1fb7110", "message": "KOGITO-3254: Fix expected-approval resource and updated addon to 2.0.0-SNAPSHOT", "committedDate": "2020-11-20T07:31:14Z", "type": "commit"}, {"oid": "3d4d814b98a4bb5497bc3cf9e1ee78b0b7bd973c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/3d4d814b98a4bb5497bc3cf9e1ee78b0b7bd973c", "message": "KOGITO-3254: sonarcloud code smell fixes", "committedDate": "2020-11-20T07:31:14Z", "type": "commit"}, {"oid": "04d044b9ab6f02438195b81f0fc2075a76674880", "url": "https://github.com/kiegroup/kogito-runtimes/commit/04d044b9ab6f02438195b81f0fc2075a76674880", "message": "KOGITO-3254 Register SVG files for native build", "committedDate": "2020-11-20T07:31:14Z", "type": "commit"}, {"oid": "b03a477d2a21ab40787f3b7987cf0d688ea4541c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b03a477d2a21ab40787f3b7987cf0d688ea4541c", "message": "KOGITO-3254: sonarcloud  fixes", "committedDate": "2020-11-20T07:31:14Z", "type": "commit"}, {"oid": "b03a477d2a21ab40787f3b7987cf0d688ea4541c", "url": "https://github.com/kiegroup/kogito-runtimes/commit/b03a477d2a21ab40787f3b7987cf0d688ea4541c", "message": "KOGITO-3254: sonarcloud  fixes", "committedDate": "2020-11-20T07:31:14Z", "type": "forcePushed"}]}