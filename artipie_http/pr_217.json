{"pr_number": 217, "pr_title": "#196 classification methods added", "pr_author": "genryxy", "pr_createdAt": "2020-08-12T09:24:31Z", "pr_url": "https://github.com/artipie/http/pull/217", "timeline": [{"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "url": "https://github.com/artipie/http/commit/ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "message": "#196 classification methods added", "committedDate": "2020-08-12T09:12:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4MTI3MQ==", "url": "https://github.com/artipie/http/pull/217#discussion_r469281271", "body": "@genryxy in this project we do not use popular getter/setter naming convention. We are naming methods as verbs if the do some action and as nouns if they return some value. So here it would be more along the lines to name methods `error`, `clientError`, `serverError`.", "bodyText": "@genryxy in this project we do not use popular getter/setter naming convention. We are naming methods as verbs if the do some action and as nouns if they return some value. So here it would be more along the lines to name methods error, clientError, serverError.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/genryxy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/genryxy\">@genryxy</a> in this project we do not use popular getter/setter naming convention. We are naming methods as verbs if the do some action and as nouns if they return some value. So here it would be more along the lines to name methods <code>error</code>, <code>clientError</code>, <code>serverError</code>.</p>", "author": "olegmoz", "createdAt": "2020-08-12T14:00:05Z", "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "diffHunk": "@@ -152,6 +152,33 @@ public String code() {\n         return this.string;\n     }\n \n+    /**\n+     * Checks whether the RsStatus is a client error.\n+     * @return True if the RsStatus is a client error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isClientError() {\n+        return this.string.charAt(0) == '4';\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a server error.\n+     * @return True if the RsStatus is a server error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isServerError() {\n+        return this.string.charAt(0) == '5';\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is an error.\n+     * @return True if the RsStatus is an error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isError() {\n+        return this.isClientError() || this.isServerError();\n+    }", "originalCommit": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "changed_code": [{"header": "diff --git a/src/main/java/com/artipie/http/rs/RsStatus.java b/src/main/java/com/artipie/http/rs/RsStatus.java\nindex d426ef5..819e685 100644\n--- a/src/main/java/com/artipie/http/rs/RsStatus.java\n+++ b/src/main/java/com/artipie/http/rs/RsStatus.java\n", "chunk": "@@ -175,8 +202,18 @@ public enum RsStatus {\n      * @return True if the RsStatus is an error, otherwise - false.\n      * @since 0.16\n      */\n-    public boolean isError() {\n-        return this.isClientError() || this.isServerError();\n+    public boolean error() {\n+        return this.clientError() || this.serverError();\n+    }\n+\n+    /**\n+     * Checks whether the first character matches the symbol.\n+     * @param symbol Symbol to check\n+     * @return True if the first character matches the symbol, otherwise - false.\n+     * @since 0.16\n+     */\n+    private boolean firstSymbol(final char symbol) {\n+        return this.string.charAt(0) == symbol;\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4MjAwMw==", "url": "https://github.com/artipie/http/pull/217#discussion_r469282003", "body": "@genryxy I'd suggest to extract common code for checking first symbol into private method", "bodyText": "@genryxy I'd suggest to extract common code for checking first symbol into private method", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/genryxy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/genryxy\">@genryxy</a> I'd suggest to extract common code for checking first symbol into private method</p>", "author": "olegmoz", "createdAt": "2020-08-12T14:01:03Z", "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "diffHunk": "@@ -152,6 +152,33 @@ public String code() {\n         return this.string;\n     }\n \n+    /**\n+     * Checks whether the RsStatus is a client error.\n+     * @return True if the RsStatus is a client error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isClientError() {\n+        return this.string.charAt(0) == '4';\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a server error.\n+     * @return True if the RsStatus is a server error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isServerError() {\n+        return this.string.charAt(0) == '5';\n+    }", "originalCommit": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "changed_code": [{"header": "diff --git a/src/main/java/com/artipie/http/rs/RsStatus.java b/src/main/java/com/artipie/http/rs/RsStatus.java\nindex d426ef5..819e685 100644\n--- a/src/main/java/com/artipie/http/rs/RsStatus.java\n+++ b/src/main/java/com/artipie/http/rs/RsStatus.java\n", "chunk": "@@ -152,22 +152,49 @@ public enum RsStatus {\n         return this.string;\n     }\n \n+    /**\n+     * Checks whether the RsStatus is an informational group (1xx).\n+     * @return True if the RsStatus is 1xx, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean information() {\n+        return this.firstSymbol('1');\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a successful group (2xx).\n+     * @return True if the RsStatus is 2xx, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean success() {\n+        return this.firstSymbol('2');\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a redirection.\n+     * @return True if the RsStatus is 3xx, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean redirection() {\n+        return this.firstSymbol('3');\n+    }\n+\n     /**\n      * Checks whether the RsStatus is a client error.\n-     * @return True if the RsStatus is a client error, otherwise - false.\n+     * @return True if the RsStatus is 4xx, otherwise - false.\n      * @since 0.16\n      */\n-    public boolean isClientError() {\n-        return this.string.charAt(0) == '4';\n+    public boolean clientError() {\n+        return this.firstSymbol('4');\n     }\n \n     /**\n      * Checks whether the RsStatus is a server error.\n-     * @return True if the RsStatus is a server error, otherwise - false.\n+     * @return True if the RsStatus is 5xx, otherwise - false.\n      * @since 0.16\n      */\n-    public boolean isServerError() {\n-        return this.string.charAt(0) == '5';\n+    public boolean serverError() {\n+        return this.firstSymbol('5');\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4Mzk2OQ==", "url": "https://github.com/artipie/http/pull/217#discussion_r469283969", "body": "@genryxy please add all classes of status codes from [RFC](https://tools.ietf.org/html/rfc7231), it's 6.x points in the document", "bodyText": "@genryxy please add all classes of status codes from RFC, it's 6.x points in the document", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/genryxy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/genryxy\">@genryxy</a> please add all classes of status codes from <a href=\"https://tools.ietf.org/html/rfc7231\" rel=\"nofollow\">RFC</a>, it's 6.x points in the document</p>", "author": "olegmoz", "createdAt": "2020-08-12T14:03:47Z", "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "diffHunk": "@@ -152,6 +152,33 @@ public String code() {\n         return this.string;\n     }\n ", "originalCommit": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "changed_code": [{"header": "diff --git a/src/main/java/com/artipie/http/rs/RsStatus.java b/src/main/java/com/artipie/http/rs/RsStatus.java\nindex d426ef5..819e685 100644\n--- a/src/main/java/com/artipie/http/rs/RsStatus.java\n+++ b/src/main/java/com/artipie/http/rs/RsStatus.java\n", "chunk": "@@ -152,22 +152,49 @@ public enum RsStatus {\n         return this.string;\n     }\n \n+    /**\n+     * Checks whether the RsStatus is an informational group (1xx).\n+     * @return True if the RsStatus is 1xx, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean information() {\n+        return this.firstSymbol('1');\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a successful group (2xx).\n+     * @return True if the RsStatus is 2xx, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean success() {\n+        return this.firstSymbol('2');\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a redirection.\n+     * @return True if the RsStatus is 3xx, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean redirection() {\n+        return this.firstSymbol('3');\n+    }\n+\n     /**\n      * Checks whether the RsStatus is a client error.\n-     * @return True if the RsStatus is a client error, otherwise - false.\n+     * @return True if the RsStatus is 4xx, otherwise - false.\n      * @since 0.16\n      */\n-    public boolean isClientError() {\n-        return this.string.charAt(0) == '4';\n+    public boolean clientError() {\n+        return this.firstSymbol('4');\n     }\n \n     /**\n      * Checks whether the RsStatus is a server error.\n-     * @return True if the RsStatus is a server error, otherwise - false.\n+     * @return True if the RsStatus is 5xx, otherwise - false.\n      * @since 0.16\n      */\n-    public boolean isServerError() {\n-        return this.string.charAt(0) == '5';\n+    public boolean serverError() {\n+        return this.firstSymbol('5');\n     }\n \n     /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NTQ4Mg==", "url": "https://github.com/artipie/http/pull/217#discussion_r469285482", "body": "@genryxy we are using hamcrest matchers for all tests in the project. Also if test has more then assertion, that it needs an assertion message", "bodyText": "@genryxy we are using hamcrest matchers for all tests in the project. Also if test has more then assertion, that it needs an assertion message", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/genryxy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/genryxy\">@genryxy</a> we are using hamcrest matchers for all tests in the project. Also if test has more then assertion, that it needs an assertion message</p>", "author": "olegmoz", "createdAt": "2020-08-12T14:05:59Z", "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {\n+        final RsStatus status = RsStatus.BAD_REQUEST;\n+        Assertions.assertTrue(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertFalse(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsServerError() {\n+        final RsStatus status = RsStatus.INTERNAL_ERROR;\n+        Assertions.assertFalse(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertTrue(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsNotError() {\n+        final RsStatus success = RsStatus.OK;\n+        final RsStatus rscontinue = RsStatus.CONTINUE;\n+        final RsStatus found = RsStatus.FOUND;\n+        Assertions.assertFalse(success.isError());\n+        Assertions.assertFalse(rscontinue.isError());\n+        Assertions.assertFalse(found.isError());\n+    }", "originalCommit": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/http/rs/RsStatusTest.java b/src/test/java/com/artipie/http/rs/RsStatusTest.java\nindex 1ed49cd..a1aa610 100644\n--- a/src/test/java/com/artipie/http/rs/RsStatusTest.java\n+++ b/src/test/java/com/artipie/http/rs/RsStatusTest.java\n", "chunk": "@@ -33,29 +36,65 @@ import org.junit.jupiter.api.Test;\n  */\n final class RsStatusTest {\n     @Test\n-    void createsClientError() {\n+    void information() {\n+        final RsStatus status = RsStatus.CONTINUE;\n+        MatcherAssert.assertThat(\n+            status.information(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void success() {\n+        final RsStatus status = RsStatus.ACCEPTED;\n+        MatcherAssert.assertThat(\n+            status.success(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void redirection() {\n+        final RsStatus status = RsStatus.FOUND;\n+        MatcherAssert.assertThat(\n+            status.redirection(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void clientError() {\n         final RsStatus status = RsStatus.BAD_REQUEST;\n-        Assertions.assertTrue(status.isClientError());\n-        Assertions.assertTrue(status.isError());\n-        Assertions.assertFalse(status.isServerError());\n+        MatcherAssert.assertThat(\n+            status.clientError(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n     @Test\n-    void createsServerError() {\n+    void serverError() {\n         final RsStatus status = RsStatus.INTERNAL_ERROR;\n-        Assertions.assertFalse(status.isClientError());\n-        Assertions.assertTrue(status.isError());\n-        Assertions.assertTrue(status.isServerError());\n+        MatcherAssert.assertThat(\n+            status.serverError(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n-    @Test\n-    void createsNotError() {\n-        final RsStatus success = RsStatus.OK;\n-        final RsStatus rscontinue = RsStatus.CONTINUE;\n-        final RsStatus found = RsStatus.FOUND;\n-        Assertions.assertFalse(success.isError());\n-        Assertions.assertFalse(rscontinue.isError());\n-        Assertions.assertFalse(found.isError());\n+    @ParameterizedTest\n+    @EnumSource(value = RsStatus.class, names = {\"FORBIDDEN\", \"INTERNAL_ERROR\"})\n+    void error(final RsStatus status) {\n+        MatcherAssert.assertThat(\n+            status.error(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(value = RsStatus.class, names = {\"CONTINUE\", \"OK\", \"FOUND\"})\n+    void notError(final RsStatus status) {\n+        MatcherAssert.assertThat(\n+            status.error(),\n+            new IsEqual<>(false)\n+        );\n+    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4Njc4Mg==", "url": "https://github.com/artipie/http/pull/217#discussion_r469286782", "body": "@genryxy it would be better to use `@ParameterizedTest` here, to run same test for several status codes", "bodyText": "@genryxy it would be better to use @ParameterizedTest here, to run same test for several status codes", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/genryxy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/genryxy\">@genryxy</a> it would be better to use <code>@ParameterizedTest</code> here, to run same test for several status codes</p>", "author": "olegmoz", "createdAt": "2020-08-12T14:07:58Z", "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {\n+        final RsStatus status = RsStatus.BAD_REQUEST;\n+        Assertions.assertTrue(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertFalse(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsServerError() {\n+        final RsStatus status = RsStatus.INTERNAL_ERROR;\n+        Assertions.assertFalse(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertTrue(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsNotError() {\n+        final RsStatus success = RsStatus.OK;\n+        final RsStatus rscontinue = RsStatus.CONTINUE;\n+        final RsStatus found = RsStatus.FOUND;", "originalCommit": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/http/rs/RsStatusTest.java b/src/test/java/com/artipie/http/rs/RsStatusTest.java\nindex 1ed49cd..a1aa610 100644\n--- a/src/test/java/com/artipie/http/rs/RsStatusTest.java\n+++ b/src/test/java/com/artipie/http/rs/RsStatusTest.java\n", "chunk": "@@ -33,29 +36,65 @@ import org.junit.jupiter.api.Test;\n  */\n final class RsStatusTest {\n     @Test\n-    void createsClientError() {\n+    void information() {\n+        final RsStatus status = RsStatus.CONTINUE;\n+        MatcherAssert.assertThat(\n+            status.information(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void success() {\n+        final RsStatus status = RsStatus.ACCEPTED;\n+        MatcherAssert.assertThat(\n+            status.success(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void redirection() {\n+        final RsStatus status = RsStatus.FOUND;\n+        MatcherAssert.assertThat(\n+            status.redirection(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void clientError() {\n         final RsStatus status = RsStatus.BAD_REQUEST;\n-        Assertions.assertTrue(status.isClientError());\n-        Assertions.assertTrue(status.isError());\n-        Assertions.assertFalse(status.isServerError());\n+        MatcherAssert.assertThat(\n+            status.clientError(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n     @Test\n-    void createsServerError() {\n+    void serverError() {\n         final RsStatus status = RsStatus.INTERNAL_ERROR;\n-        Assertions.assertFalse(status.isClientError());\n-        Assertions.assertTrue(status.isError());\n-        Assertions.assertTrue(status.isServerError());\n+        MatcherAssert.assertThat(\n+            status.serverError(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n-    @Test\n-    void createsNotError() {\n-        final RsStatus success = RsStatus.OK;\n-        final RsStatus rscontinue = RsStatus.CONTINUE;\n-        final RsStatus found = RsStatus.FOUND;\n-        Assertions.assertFalse(success.isError());\n-        Assertions.assertFalse(rscontinue.isError());\n-        Assertions.assertFalse(found.isError());\n+    @ParameterizedTest\n+    @EnumSource(value = RsStatus.class, names = {\"FORBIDDEN\", \"INTERNAL_ERROR\"})\n+    void error(final RsStatus status) {\n+        MatcherAssert.assertThat(\n+            status.error(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(value = RsStatus.class, names = {\"CONTINUE\", \"OK\", \"FOUND\"})\n+    void notError(final RsStatus status) {\n+        MatcherAssert.assertThat(\n+            status.error(),\n+            new IsEqual<>(false)\n+        );\n+    }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MTE4Nw==", "url": "https://github.com/artipie/http/pull/217#discussion_r469291187", "body": "@genryxy test method names do not make much sense as `RsStatus` does not create anything. I'd rather name them `shouldBe[ClientError/ServerError/Error]` or `test[ClientError/ServerError/Error]`. WDYT?", "bodyText": "@genryxy test method names do not make much sense as RsStatus does not create anything. I'd rather name them shouldBe[ClientError/ServerError/Error] or test[ClientError/ServerError/Error]. WDYT?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/genryxy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/genryxy\">@genryxy</a> test method names do not make much sense as <code>RsStatus</code> does not create anything. I'd rather name them <code>shouldBe[ClientError/ServerError/Error]</code> or <code>test[ClientError/ServerError/Error]</code>. WDYT?</p>", "author": "olegmoz", "createdAt": "2020-08-12T14:14:12Z", "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {", "originalCommit": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMDMyMQ==", "url": "https://github.com/artipie/http/pull/217#discussion_r469310321", "bodyText": "@olegmoz thanks, I think you're right", "author": "genryxy", "createdAt": "2020-08-12T14:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "changed_code": [{"header": "diff --git a/src/test/java/com/artipie/http/rs/RsStatusTest.java b/src/test/java/com/artipie/http/rs/RsStatusTest.java\nindex 1ed49cd..a1aa610 100644\n--- a/src/test/java/com/artipie/http/rs/RsStatusTest.java\n+++ b/src/test/java/com/artipie/http/rs/RsStatusTest.java\n", "chunk": "@@ -33,29 +36,65 @@ import org.junit.jupiter.api.Test;\n  */\n final class RsStatusTest {\n     @Test\n-    void createsClientError() {\n+    void information() {\n+        final RsStatus status = RsStatus.CONTINUE;\n+        MatcherAssert.assertThat(\n+            status.information(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void success() {\n+        final RsStatus status = RsStatus.ACCEPTED;\n+        MatcherAssert.assertThat(\n+            status.success(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void redirection() {\n+        final RsStatus status = RsStatus.FOUND;\n+        MatcherAssert.assertThat(\n+            status.redirection(),\n+            new IsEqual<>(true)\n+        );\n+    }\n+\n+    @Test\n+    void clientError() {\n         final RsStatus status = RsStatus.BAD_REQUEST;\n-        Assertions.assertTrue(status.isClientError());\n-        Assertions.assertTrue(status.isError());\n-        Assertions.assertFalse(status.isServerError());\n+        MatcherAssert.assertThat(\n+            status.clientError(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n     @Test\n-    void createsServerError() {\n+    void serverError() {\n         final RsStatus status = RsStatus.INTERNAL_ERROR;\n-        Assertions.assertFalse(status.isClientError());\n-        Assertions.assertTrue(status.isError());\n-        Assertions.assertTrue(status.isServerError());\n+        MatcherAssert.assertThat(\n+            status.serverError(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n-    @Test\n-    void createsNotError() {\n-        final RsStatus success = RsStatus.OK;\n-        final RsStatus rscontinue = RsStatus.CONTINUE;\n-        final RsStatus found = RsStatus.FOUND;\n-        Assertions.assertFalse(success.isError());\n-        Assertions.assertFalse(rscontinue.isError());\n-        Assertions.assertFalse(found.isError());\n+    @ParameterizedTest\n+    @EnumSource(value = RsStatus.class, names = {\"FORBIDDEN\", \"INTERNAL_ERROR\"})\n+    void error(final RsStatus status) {\n+        MatcherAssert.assertThat(\n+            status.error(),\n+            new IsEqual<>(true)\n+        );\n     }\n \n+    @ParameterizedTest\n+    @EnumSource(value = RsStatus.class, names = {\"CONTINUE\", \"OK\", \"FOUND\"})\n+    void notError(final RsStatus status) {\n+        MatcherAssert.assertThat(\n+            status.error(),\n+            new IsEqual<>(false)\n+        );\n+    }\n }\n", "next_change": null}]}}, {"oid": "04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "url": "https://github.com/artipie/http/commit/04417bcaf4b7aabe44343c70c3128b4de0cb66cf", "message": "#196 other status added, tests are fixed", "committedDate": "2020-08-12T16:39:29Z", "type": "commit"}]}