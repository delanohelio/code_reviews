{"pr_number": 2274, "pr_title": "Start of a Chunk Manager", "pr_author": "dualspiral", "pr_createdAt": "2020-12-06T19:09:40Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2274", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMzkzMA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537103930", "body": "`getLifetime()`?", "bodyText": "getLifetime()?", "bodyHTML": "<p dir=\"auto\"><code>getLifetime()</code>?</p>", "author": "Zidane", "createdAt": "2020-12-06T19:12:17Z", "path": "src/main/java/org/spongepowered/api/world/server/TicketType.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.util.annotation.CatalogedBy;\n+\n+/**\n+ * Represents a type of {@link Ticket chunk loading ticket} that can be obtained\n+ * to ensure chunks remain loaded in a {@link ServerWorld}.\n+ *\n+ * @param <T> The type of value that is associated with a {@link Ticket} of this\n+ *      type.\n+ */\n+@CatalogedBy(TicketTypes.class)\n+public interface TicketType<T> extends CatalogType {\n+\n+    /**\n+     * Gets the lifetime of any {@link Ticket tickets} of this type.\n+     *\n+     * @return The number of {@link Ticks} any {@link Ticket tickets} of this\n+     *         type will be valid for.\n+     */\n+    Ticks getTicketLifetime();", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketType.java b/src/main/java/org/spongepowered/api/world/server/TicketType.java\nindex f248ed998..6f70bcedc 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketType.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketType.java\n", "chunk": "@@ -44,6 +44,6 @@\n      * @return The number of {@link Ticks} any {@link Ticket tickets} of this\n      *         type will be valid for.\n      */\n-    Ticks getTicketLifetime();\n+    Ticks getLifetime();\n \n }\n", "next_change": {"commit": "5334c877488797e0c2cb718b17554a31644fc9be", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketType.java b/src/main/java/org/spongepowered/api/world/server/TicketType.java\nindex 6f70bcedc..7740ddce4 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketType.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketType.java\n", "chunk": "@@ -44,6 +43,6 @@\n      * @return The number of {@link Ticks} any {@link Ticket tickets} of this\n      *         type will be valid for.\n      */\n-    Ticks getLifetime();\n+    Ticks lifetime();\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDAwMg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104002", "body": "`ServerWorld getWorld()`?", "bodyText": "ServerWorld getWorld()?", "bodyHTML": "<p dir=\"auto\"><code>ServerWorld getWorld()</code>?</p>", "author": "Zidane", "createdAt": "2020-12-06T19:12:41Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -28,6 +28,7 @@\n import org.spongepowered.api.world.chunk.Chunk;\n import org.spongepowered.math.vector.Vector3i;\n \n+import java.util.Collection;\n import java.util.Optional;\n \n /**\n", "next_change": {"commit": "307063a0f712fb9e6fcc5021cb9cef74871478d5", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex f38711587..2e378d25e 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -25,6 +25,7 @@\n package org.spongepowered.api.world.server;\n \n import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.util.annotation.DoNotStore;\n import org.spongepowered.api.world.chunk.Chunk;\n import org.spongepowered.math.vector.Vector3i;\n \n", "next_change": {"commit": "4c6ba2b38f444676273d6958e823a5b532747dbf", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex 2e378d25e..fd891b370 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -24,6 +24,7 @@\n  */\n package org.spongepowered.api.world.server;\n \n+import org.spongepowered.api.registry.DefaultedRegistryReference;\n import org.spongepowered.api.util.Ticks;\n import org.spongepowered.api.util.annotation.DoNotStore;\n import org.spongepowered.api.world.chunk.Chunk;\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex f38711587..2e378d25e 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -34,6 +35,7 @@\n /**\n  * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n  */\n+@DoNotStore\n public interface ChunkManager {\n \n     /**\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -35,6 +36,13 @@\n  */\n public interface ChunkManager {\n \n+    /**\n+     * Gets the {@link ServerWorld} this manager operates upon.\n+     *\n+     * @return The {@link ServerWorld}\n+     */\n+    ServerWorld getWorld();\n+\n     /**\n      * Checks if the provided {@link Ticket} is valid for the world this manager\n      * represents.\n", "next_change": {"commit": "307063a0f712fb9e6fcc5021cb9cef74871478d5", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex f38711587..2e378d25e 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -41,7 +43,7 @@\n      *\n      * @return The {@link ServerWorld}\n      */\n-    ServerWorld getWorld();\n+    ServerWorld world();\n \n     /**\n      * Checks if the provided {@link Ticket} is valid for the world this manager\n", "next_change": {"commit": "4c6ba2b38f444676273d6958e823a5b532747dbf", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex 2e378d25e..fd891b370 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -52,7 +53,20 @@\n      * @param ticket The ticket to check.\n      * @return true if so\n      */\n-    boolean isValid(Ticket<?> ticket);\n+    boolean valid(Ticket<?> ticket);\n+\n+    /**\n+     * Returns whether the provided {@link Ticket} has been processed, that is,\n+     * it has been recognised by the engine and the {@link Chunk chunks} that\n+     * this ticket affects have at least been scheduled for loading.\n+     *\n+     * <p><strong>Note:</strong> a processed ticket is no guarantee that a chunk\n+     * has been loaded, instead it indicates that the ticket has been recognised\n+     * by the manager <em>at some point</em>.</p>\n+     *\n+     * @return {@code true} if the ticket has been processed.\n+     */\n+    boolean processed(Ticket<?> ticket);\n \n     /**\n      * Gets the {@link Ticks} remaining on the supplied ticket.\n", "next_change": {"commit": "476b9f8b93ba722b8e60ae36899ad95702b7b5d3", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex fd891b370..d5378c59b 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -55,19 +55,6 @@\n      */\n     boolean valid(Ticket<?> ticket);\n \n-    /**\n-     * Returns whether the provided {@link Ticket} has been processed, that is,\n-     * it has been recognised by the engine and the {@link Chunk chunks} that\n-     * this ticket affects have at least been scheduled for loading.\n-     *\n-     * <p><strong>Note:</strong> a processed ticket is no guarantee that a chunk\n-     * has been loaded, instead it indicates that the ticket has been recognised\n-     * by the manager <em>at some point</em>.</p>\n-     *\n-     * @return {@code true} if the ticket has been processed.\n-     */\n-    boolean processed(Ticket<?> ticket);\n-\n     /**\n      * Gets the {@link Ticks} remaining on the supplied ticket.\n      *\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDA3OQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104079", "body": "`getDefaultLifetime()`", "bodyText": "getDefaultLifetime()", "bodyHTML": "<p dir=\"auto\"><code>getDefaultLifetime()</code></p>", "author": "Zidane", "createdAt": "2020-12-06T19:13:10Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n+     * this ticket manager.\n+     */\n+    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNzQ2Mg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537107462", "bodyText": "Actually just removed this, it's on the TicketType instead.", "author": "dualspiral", "createdAt": "2020-12-06T19:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -44,12 +52,6 @@\n      */\n     boolean isValid(Ticket<?> ticket);\n \n-    /**\n-     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n-     * this ticket manager.\n-     */\n-    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);\n-\n     /**\n      * Gets the {@link Ticks} remaining on the supplied ticket.\n      *\n", "next_change": {"commit": "307063a0f712fb9e6fcc5021cb9cef74871478d5", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex f38711587..2e378d25e 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -57,7 +59,7 @@\n      *\n      * @return The {@link Ticks}\n      */\n-    Ticks getTimeLeft(Ticket<?> ticket);\n+    Ticks timeLeft(Ticket<?> ticket);\n \n     /**\n      * Request a {@link Ticket} for the given {@link TicketType}.\n", "next_change": {"commit": "4c6ba2b38f444676273d6958e823a5b532747dbf", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex 2e378d25e..fd891b370 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -61,6 +75,38 @@\n      */\n     Ticks timeLeft(Ticket<?> ticket);\n \n+    /**\n+     * Request a {@link Ticket} for a given {@link TicketType} that supports a\n+     * chunk position.\n+     *\n+     * @param type The type of ticket to request.\n+     * @param chunkOrigin The chunk co-ordinates of the central {@link Chunk}\n+     *                    affected by this {@link Ticket}\n+     * @param radius The radius of the area, in chunks, that this {@link Ticket}\n+     *               affects.\n+     * @return The ticket, if granted.\n+     */\n+    default Optional<Ticket<Vector3i>> requestTicket(final DefaultedRegistryReference<TicketType<Vector3i>> type,\n+                                                     final Vector3i chunkOrigin, final int radius) {\n+        return this.requestTicket(type.get(), chunkOrigin, radius);\n+    }\n+\n+    /**\n+     * Request a {@link Ticket} for a given {@link TicketType} that supports a\n+     * chunk position.\n+     *\n+     * @param type The type of ticket to request.\n+     * @param chunkOrigin The chunk co-ordinates of the central {@link Chunk}\n+     *                    affected by this {@link Ticket}\n+     * @param radius The radius of the area, in chunks, that this {@link Ticket}\n+     *               affects.\n+     * @return The ticket, if granted.\n+     */\n+    default Optional<Ticket<Vector3i>> requestTicket(final TicketType<Vector3i> type, final Vector3i chunkOrigin,\n+                                                     final int radius) {\n+        return this.requestTicket(type, chunkOrigin, chunkOrigin, radius);\n+    }\n+\n     /**\n      * Request a {@link Ticket} for the given {@link TicketType}.\n      *\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDE0Ng==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104146", "body": "that force chunk(s) ...", "bodyText": "that force chunk(s) ...", "bodyHTML": "<p dir=\"auto\">that force chunk(s) ...</p>", "author": "Zidane", "createdAt": "2020-12-06T19:13:43Z", "path": "src/main/java/org/spongepowered/api/world/server/TicketTypes.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * Types of {@link Ticket tickets} that can be requested via the\n+ * {@link ChunkManager}.\n+ */\n+public class TicketTypes {\n+\n+    /**\n+     * Represents {@link Ticket tickets} that forces a chunk to stay loaded.", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex a74ac54e3..39eb5d556 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n", "chunk": "@@ -33,11 +37,29 @@\n  * Types of {@link Ticket tickets} that can be requested via the\n  * {@link ChunkManager}.\n  */\n-public class TicketTypes {\n+public final class TicketTypes {\n \n     /**\n-     * Represents {@link Ticket tickets} that forces a chunk to stay loaded.\n+     * Represents {@link Ticket tickets} that ensures the target\n+     * {@link Chunk chunks} are loaded, but are not guaranteed to be loaded at\n+     * any time in the future, that is, the lifetime of such a ticket is\n+     * effectively {@link Ticks#zero() zero ticks}.\n      */\n     public static final Supplier<TicketType<Vector3i>> FORCED = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"forced\");\n \n+    /**\n+     * Represents {@link Ticket tickets} that are intended to ensure that the\n+     * target {@link Chunk chunks} around a {@link Portal} are loaded, ready to\n+     * accept {@link Entity entities} that travel through it.\n+     */\n+    public static final Supplier<TicketType<Vector3i>> PORTAL = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"portal\");\n+\n+    /**\n+     * Represents {@link Ticket tickets} that are intended to ensure that the\n+     * target {@link Chunk chunks} around an {@link Entity} are loaded after\n+     * teleportation.\n+     */\n+    public static final Supplier<TicketType<Entity>> POST_TELEPORT = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"post_teleport\");\n+\n+\n }\n", "next_change": {"commit": "fe2cf697e2f1044af27d78c457b5077c49d04845", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex 39eb5d556..b3381c254 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n", "chunk": "@@ -39,27 +44,41 @@\n  */\n public final class TicketTypes {\n \n+    // @formatter:off\n+\n+    // SORTFIELDS:ON\n+\n     /**\n      * Represents {@link Ticket tickets} that ensures the target\n      * {@link Chunk chunks} are loaded, but are not guaranteed to be loaded at\n      * any time in the future, that is, the lifetime of such a ticket is\n      * effectively {@link Ticks#zero() zero ticks}.\n      */\n-    public static final Supplier<TicketType<Vector3i>> FORCED = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"forced\");\n+    public static final DefaultedRegistryReference<TicketType<Vector3i>> FORCED = TicketTypes.key(ResourceKey.sponge(\"forced\"));\n \n     /**\n      * Represents {@link Ticket tickets} that are intended to ensure that the\n      * target {@link Chunk chunks} around a {@link Portal} are loaded, ready to\n      * accept {@link Entity entities} that travel through it.\n      */\n-    public static final Supplier<TicketType<Vector3i>> PORTAL = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"portal\");\n+    public static final DefaultedRegistryReference<TicketType<Vector3i>> PORTAL = TicketTypes.key(ResourceKey.sponge(\"portal\"));\n \n     /**\n      * Represents {@link Ticket tickets} that are intended to ensure that the\n      * target {@link Chunk chunks} around an {@link Entity} are loaded after\n      * teleportation.\n      */\n-    public static final Supplier<TicketType<Entity>> POST_TELEPORT = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"post_teleport\");\n+    public static final DefaultedRegistryReference<TicketType<Entity>> POST_TELEPORT = TicketTypes.key(ResourceKey.sponge(\"post_teleport\"));\n+\n+    // SORTFIELDS:OFF\n+\n+    // @formatter:on\n+\n+    private TicketTypes() {\n+    }\n \n+    private static <T> DefaultedRegistryReference<TicketType<T>> key(final ResourceKey location) {\n+        return RegistryKey.of(RegistryTypes.TICKET_TYPE, location).asDefaultedReference(() -> Sponge.getGame().registries());\n+    }\n \n }\n", "next_change": {"commit": "5334c877488797e0c2cb718b17554a31644fc9be", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex b3381c254..37d746669 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n", "chunk": "@@ -78,7 +78,7 @@ private TicketTypes() {\n     }\n \n     private static <T> DefaultedRegistryReference<TicketType<T>> key(final ResourceKey location) {\n-        return RegistryKey.of(RegistryTypes.TICKET_TYPE, location).asDefaultedReference(() -> Sponge.getGame().registries());\n+        return RegistryKey.of(RegistryTypes.TICKET_TYPE, location).asDefaultedReference(() -> Sponge.game().registries());\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDQ3Nw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104477", "body": "Radius?", "bodyText": "Radius?", "bodyHTML": "<p dir=\"auto\">Radius?</p>", "author": "Zidane", "createdAt": "2020-12-06T19:15:47Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n+     * this ticket manager.\n+     */\n+    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);\n+\n+    /**\n+     * Gets the {@link Ticks} remaining on the supplied ticket.\n+     *\n+     * @return The {@link Ticks}\n+     */\n+    Ticks getTimeLeft(Ticket<?> ticket);\n+\n+    /**\n+     * Request a {@link Ticket} for the given {@link TicketType}.\n+     *\n+     * @param type The type of ticket to request.\n+     * @param value The value to register the ticket with.\n+     * @param <T> The type of the supplied {@code value}.\n+     * @return The ticket, if granted.\n+     */\n+    <T> Optional<Ticket<T>> requestTicket(TicketType<T> type, Vector3i chunkPosition, T value);", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNTAxOQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537105019", "bodyText": "Additional, the chunkPosition really is the chunkOrigin that the radius operates off of.", "author": "Zidane", "createdAt": "2020-12-06T19:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -61,17 +63,21 @@\n      * Request a {@link Ticket} for the given {@link TicketType}.\n      *\n      * @param type The type of ticket to request.\n+     * @param chunkOrigin The chunk co-ordinates of the central {@link Chunk}\n+     *                    affected by this {@link Ticket}\n      * @param value The value to register the ticket with.\n+     * @param radius The radius of the area, in chunks, that this {@link Ticket}\n+     *               affects.\n      * @param <T> The type of the supplied {@code value}.\n      * @return The ticket, if granted.\n      */\n-    <T> Optional<Ticket<T>> requestTicket(TicketType<T> type, Vector3i chunkPosition, T value);\n+    <T> Optional<Ticket<T>> requestTicket(TicketType<T> type, Vector3i chunkOrigin, T value, int radius);\n \n     /**\n      * Attempts to renew this ticket, resetting the lifetime to the default.\n      *\n      * <p>If this ticket is no longer valid, it cannot be renewed. Instead,\n-     * you should {@link #requestTicket(TicketType, Vector3i, Object)} a new one.</p>\n+     * you should {@link #requestTicket(TicketType, Vector3i, Object, int)} a new one.</p>\n      *\n      * @param ticket The ticket to attempt to renew\n      * @return {@code true} if successful\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDYxNQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104615", "body": "`<T> Collection<Ticket<T>> getTickets(TicketType<T> type)` ?", "bodyText": "<T> Collection<Ticket<T>> getTickets(TicketType<T> type) ?", "bodyHTML": "<p dir=\"auto\"><code>&lt;T&gt; Collection&lt;Ticket&lt;T&gt;&gt; getTickets(TicketType&lt;T&gt; type)</code> ?</p>", "author": "Zidane", "createdAt": "2020-12-06T19:16:33Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n+     * this ticket manager.\n+     */\n+    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);\n+\n+    /**\n+     * Gets the {@link Ticks} remaining on the supplied ticket.\n+     *\n+     * @return The {@link Ticks}\n+     */\n+    Ticks getTimeLeft(Ticket<?> ticket);\n+\n+    /**\n+     * Request a {@link Ticket} for the given {@link TicketType}.\n+     *\n+     * @param type The type of ticket to request.\n+     * @param value The value to register the ticket with.\n+     * @param <T> The type of the supplied {@code value}.\n+     * @return The ticket, if granted.\n+     */\n+    <T> Optional<Ticket<T>> requestTicket(TicketType<T> type, Vector3i chunkPosition, T value);\n+\n+    /**\n+     * Attempts to renew this ticket, resetting the lifetime to the default.\n+     *\n+     * <p>If this ticket is no longer valid, it cannot be renewed. Instead,\n+     * you should {@link #requestTicket(TicketType, Vector3i, Object)} a new one.</p>\n+     *\n+     * @param ticket The ticket to attempt to renew\n+     * @return {@code true} if successful\n+     */\n+    boolean renewTicket(Ticket<?> ticket);\n+\n+    /**\n+     * Releases the provided {@link Ticket}, allowing the chunk position\n+     * represented by the given ticket to be unloaded (if it is not being kept\n+     * loaded by other means).\n+     *\n+     * @param ticket The ticket to release.\n+     */\n+    boolean releaseTicket(Ticket<?> ticket);\n+\n+}", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -87,4 +93,14 @@\n      */\n     boolean releaseTicket(Ticket<?> ticket);\n \n+    /**\n+     * Gets all currently active {@link Ticket tickets} that are of the\n+     * provided {@link TicketType}.\n+     *\n+     * @param type The {@link TicketType} to retrieve tickets for\n+     * @param <T> The type of value the {@link Ticket} holds\n+     * @return A {@link Collection} of {@link Ticket tickets}\n+     */\n+    <T> Collection<Ticket<T>> getTickets(TicketType<T> type);\n+\n }\n", "next_change": {"commit": "307063a0f712fb9e6fcc5021cb9cef74871478d5", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex f38711587..2e378d25e 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -101,6 +103,6 @@\n      * @param <T> The type of value the {@link Ticket} holds\n      * @return A {@link Collection} of {@link Ticket tickets}\n      */\n-    <T> Collection<Ticket<T>> getTickets(TicketType<T> type);\n+    <T> Collection<Ticket<T>> findTickets(TicketType<T> type);\n \n }\n", "next_change": {"commit": "4c6ba2b38f444676273d6958e823a5b532747dbf", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex 2e378d25e..fd891b370 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -105,4 +168,16 @@\n      */\n     <T> Collection<Ticket<T>> findTickets(TicketType<T> type);\n \n+    /**\n+     * Gets all currently active {@link Ticket tickets} that are of the\n+     * provided {@link TicketType}.\n+     *\n+     * @param type The {@link TicketType} to retrieve tickets for\n+     * @param <T> The type of value the {@link Ticket} holds\n+     * @return A {@link Collection} of {@link Ticket tickets}\n+     */\n+    default <T> Collection<Ticket<T>> findTickets(final DefaultedRegistryReference<TicketType<T>> type) {\n+        return this.findTickets(type.get());\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDcxMA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104710", "body": "the chunk manager", "bodyText": "the chunk manager", "bodyHTML": "<p dir=\"auto\">the chunk manager</p>", "author": "Zidane", "createdAt": "2020-12-06T19:16:59Z", "path": "src/main/java/org/spongepowered/api/world/server/ServerWorld.java", "diffHunk": "@@ -203,4 +203,12 @@ default Chunk getChunkAtBlock(int bx, int by, int bz) {\n      * @return The raid at that location, if present\n      */\n     Optional<Raid> getRaidAt(Vector3i blockPosition);\n+\n+    /**\n+     * Gets the {@link ChunkManager} for this world.\n+     *\n+     * @return The ticket manager.", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ServerWorld.java b/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\nindex be414b786..2c1f6c803 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\n", "chunk": "@@ -207,7 +298,7 @@ default Chunk getChunkAtBlock(int bx, int by, int bz) {\n     /**\n      * Gets the {@link ChunkManager} for this world.\n      *\n-     * @return The ticket manager.\n+     * @return The chunk manager.\n      */\n     ChunkManager getChunkManager();\n \n", "next_change": {"commit": "5334c877488797e0c2cb718b17554a31644fc9be", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ServerWorld.java b/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\nindex 2c1f6c803..3f1778cc6 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\n", "chunk": "@@ -293,13 +287,13 @@ default boolean restoreSnapshot(final Vector3i position, final BlockSnapshot sna\n      * @param blockPosition The location of the Raid.\n      * @return The raid at that location, if present\n      */\n-    Optional<Raid> getRaidAt(Vector3i blockPosition);\n+    Optional<Raid> raidAt(Vector3i blockPosition);\n \n     /**\n      * Gets the {@link ChunkManager} for this world.\n      *\n      * @return The chunk manager.\n      */\n-    ChunkManager getChunkManager();\n+    ChunkManager chunkManager();\n \n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDc3Mg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104772", "body": "`TicketType<T> getType()`", "bodyText": "TicketType<T> getType()", "bodyHTML": "<p dir=\"auto\"><code>TicketType&lt;T&gt; getType()</code></p>", "author": "Zidane", "createdAt": "2020-12-06T19:17:20Z", "path": "src/main/java/org/spongepowered/api/world/server/Ticket.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+/**\n+ * Represents a chunk loading ticket.\n+ *\n+ * @param <T> The type of value this ticket holds.\n+ */\n+public interface Ticket<T> {", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDg3Mw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104873", "body": "`final`", "bodyText": "final", "bodyHTML": "<p dir=\"auto\"><code>final</code></p>", "author": "Zidane", "createdAt": "2020-12-06T19:17:47Z", "path": "src/main/java/org/spongepowered/api/world/server/TicketTypes.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * Types of {@link Ticket tickets} that can be requested via the\n+ * {@link ChunkManager}.\n+ */\n+public class TicketTypes {", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex a74ac54e3..39eb5d556 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n", "chunk": "@@ -33,11 +37,29 @@\n  * Types of {@link Ticket tickets} that can be requested via the\n  * {@link ChunkManager}.\n  */\n-public class TicketTypes {\n+public final class TicketTypes {\n \n     /**\n-     * Represents {@link Ticket tickets} that forces a chunk to stay loaded.\n+     * Represents {@link Ticket tickets} that ensures the target\n+     * {@link Chunk chunks} are loaded, but are not guaranteed to be loaded at\n+     * any time in the future, that is, the lifetime of such a ticket is\n+     * effectively {@link Ticks#zero() zero ticks}.\n      */\n     public static final Supplier<TicketType<Vector3i>> FORCED = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"forced\");\n \n+    /**\n+     * Represents {@link Ticket tickets} that are intended to ensure that the\n+     * target {@link Chunk chunks} around a {@link Portal} are loaded, ready to\n+     * accept {@link Entity entities} that travel through it.\n+     */\n+    public static final Supplier<TicketType<Vector3i>> PORTAL = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"portal\");\n+\n+    /**\n+     * Represents {@link Ticket tickets} that are intended to ensure that the\n+     * target {@link Chunk chunks} around an {@link Entity} are loaded after\n+     * teleportation.\n+     */\n+    public static final Supplier<TicketType<Entity>> POST_TELEPORT = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"post_teleport\");\n+\n+\n }\n", "next_change": {"commit": "fe2cf697e2f1044af27d78c457b5077c49d04845", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex 39eb5d556..b3381c254 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n", "chunk": "@@ -39,27 +44,41 @@\n  */\n public final class TicketTypes {\n \n+    // @formatter:off\n+\n+    // SORTFIELDS:ON\n+\n     /**\n      * Represents {@link Ticket tickets} that ensures the target\n      * {@link Chunk chunks} are loaded, but are not guaranteed to be loaded at\n      * any time in the future, that is, the lifetime of such a ticket is\n      * effectively {@link Ticks#zero() zero ticks}.\n      */\n-    public static final Supplier<TicketType<Vector3i>> FORCED = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"forced\");\n+    public static final DefaultedRegistryReference<TicketType<Vector3i>> FORCED = TicketTypes.key(ResourceKey.sponge(\"forced\"));\n \n     /**\n      * Represents {@link Ticket tickets} that are intended to ensure that the\n      * target {@link Chunk chunks} around a {@link Portal} are loaded, ready to\n      * accept {@link Entity entities} that travel through it.\n      */\n-    public static final Supplier<TicketType<Vector3i>> PORTAL = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"portal\");\n+    public static final DefaultedRegistryReference<TicketType<Vector3i>> PORTAL = TicketTypes.key(ResourceKey.sponge(\"portal\"));\n \n     /**\n      * Represents {@link Ticket tickets} that are intended to ensure that the\n      * target {@link Chunk chunks} around an {@link Entity} are loaded after\n      * teleportation.\n      */\n-    public static final Supplier<TicketType<Entity>> POST_TELEPORT = Sponge.getRegistry().getCatalogRegistry().provideSupplier(TicketType.class, \"post_teleport\");\n+    public static final DefaultedRegistryReference<TicketType<Entity>> POST_TELEPORT = TicketTypes.key(ResourceKey.sponge(\"post_teleport\"));\n+\n+    // SORTFIELDS:OFF\n+\n+    // @formatter:on\n+\n+    private TicketTypes() {\n+    }\n \n+    private static <T> DefaultedRegistryReference<TicketType<T>> key(final ResourceKey location) {\n+        return RegistryKey.of(RegistryTypes.TICKET_TYPE, location).asDefaultedReference(() -> Sponge.getGame().registries());\n+    }\n \n }\n", "next_change": {"commit": "5334c877488797e0c2cb718b17554a31644fc9be", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex b3381c254..37d746669 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n", "chunk": "@@ -78,7 +78,7 @@ private TicketTypes() {\n     }\n \n     private static <T> DefaultedRegistryReference<TicketType<T>> key(final ResourceKey location) {\n-        return RegistryKey.of(RegistryTypes.TICKET_TYPE, location).asDefaultedReference(() -> Sponge.getGame().registries());\n+        return RegistryKey.of(RegistryTypes.TICKET_TYPE, location).asDefaultedReference(() -> Sponge.game().registries());\n     }\n \n }\n", "next_change": null}]}}]}}]}}, {"oid": "f46ba18da19b225e691c4496a5c969da8d182236", "url": "https://github.com/SpongePowered/SpongeAPI/commit/f46ba18da19b225e691c4496a5c969da8d182236", "message": "First stab at a Ticket manager\n\nIntroduce TicketTypes, move TicketManager to ChunkManager\n\nUpdate for API comments, round 1\n\nAdd way to get tickets, and more ticket types", "committedDate": "2021-01-03T15:17:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyNDYyNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r551024627", "body": "ticket_types -> ticket_type", "bodyText": "ticket_types -> ticket_type", "bodyHTML": "<p dir=\"auto\">ticket_types -&gt; ticket_type</p>", "author": "Lignium", "createdAt": "2021-01-03T16:12:20Z", "path": "src/main/java/org/spongepowered/api/registry/RegistryTypes.java", "diffHunk": "@@ -367,6 +368,8 @@\n \n     public static final RegistryType<TeleportHelperFilter> TELEPORT_HELPER_FILTER = RegistryTypes.spongeKey(\"teleport_helper_filter\");\n \n+    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_types\");", "originalCommit": "cca2c2ad44848ac01c2709040f7ac75f51c417c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe2cf697e2f1044af27d78c457b5077c49d04845", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/registry/RegistryTypes.java b/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\nindex d117515bd..751976490 100644\n--- a/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\n+++ b/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\n", "chunk": "@@ -368,7 +368,7 @@\n \n     public static final RegistryType<TeleportHelperFilter> TELEPORT_HELPER_FILTER = RegistryTypes.spongeKey(\"teleport_helper_filter\");\n \n-    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_types\");\n+    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_type\");\n \n     public static final RegistryType<TransactionType> TRANSACTION_TYPE = RegistryTypes.spongeKey(\"transaction_type\");\n \n", "next_change": {"commit": "5334c877488797e0c2cb718b17554a31644fc9be", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/registry/RegistryTypes.java b/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\nindex 751976490..eebb84e9f 100644\n--- a/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\n+++ b/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\n", "chunk": "@@ -150,247 +156,263 @@\n \n     // @formatter:off\n \n-    public static final RegistryType<ArtType> ART_TYPE = RegistryTypes.minecraftKey(\"motive\");\n+    public static final DefaultedRegistryType<ArtType> ART_TYPE = RegistryTypes.minecraftKeyInGame(\"motive\");\n \n-    public static final RegistryType<AttributeType> ATTRIBUTE_TYPE = RegistryTypes.minecraftKey(\"attribute\");\n+    public static final DefaultedRegistryType<AttributeType> ATTRIBUTE_TYPE = RegistryTypes.minecraftKeyInGame(\"attribute\");\n \n     public static final RegistryType<Biome> BIOME = RegistryTypes.minecraftKey(\"worldgen/biome\");\n \n-    public static final RegistryType<BlockType> BLOCK_TYPE = RegistryTypes.minecraftKey(\"block\");\n+    public static final DefaultedRegistryType<BlockType> BLOCK_TYPE = RegistryTypes.minecraftKeyInGame(\"block\");\n+\n+    public static final DefaultedRegistryType<BlockEntityType> BLOCK_ENTITY_TYPE = RegistryTypes.minecraftKeyInGame(\"block_entity_type\");\n \n-    public static final RegistryType<BlockEntityType> BLOCK_ENTITY_TYPE = RegistryTypes.minecraftKey(\"block_entity_type\");\n+    public static final DefaultedRegistryType<ChunkState> CHUNK_STATE = RegistryTypes.minecraftKeyInGame(\"chunk_status\");\n \n-    public static final RegistryType<ChunkState> CHUNK_STATE = RegistryTypes.minecraftKey(\"chunk_status\");\n+    public static final DefaultedRegistryType<ContainerType> CONTAINER_TYPE = RegistryTypes.minecraftKeyInGame(\"menu\");\n \n-    public static final RegistryType<ContainerType> CONTAINER_TYPE = RegistryTypes.minecraftKey(\"menu\");\n+    public static final DefaultedRegistryType<WorldType> WORLD_TYPE = RegistryTypes.minecraftKeyInServer(\"dimension_type\");\n \n-    public static final RegistryType<WorldType> WORLD_TYPE = RegistryTypes.minecraftKey(\"dimension_type\");\n+    public static final DefaultedRegistryType<PotionEffectType> POTION_EFFECT_TYPE = RegistryTypes.minecraftKeyInGame(\"mob_effect\");\n \n-    public static final RegistryType<PotionEffectType> POTION_EFFECT_TYPE = RegistryTypes.minecraftKey(\"mob_effect\");\n+    public static final DefaultedRegistryType<EnchantmentType> ENCHANTMENT_TYPE = RegistryTypes.minecraftKeyInGame(\"enchantment\");\n \n-    public static final RegistryType<EnchantmentType> ENCHANTMENT_TYPE = RegistryTypes.minecraftKey(\"enchantment\");\n+    public static final DefaultedRegistryType<EntityType<?>> ENTITY_TYPE = RegistryTypes.minecraftKeyInGame(\"entity_type\");\n \n-    public static final RegistryType<EntityType<?>> ENTITY_TYPE = RegistryTypes.minecraftKey(\"entity_type\");\n+    public static final DefaultedRegistryType<FluidType> FLUID_TYPE = RegistryTypes.minecraftKeyInGame(\"fluid\");\n \n-    public static final RegistryType<FluidType> FLUID_TYPE = RegistryTypes.minecraftKey(\"fluid\");\n+    public static final DefaultedRegistryType<ItemType> ITEM_TYPE = RegistryTypes.minecraftKeyInGame(\"item\");\n \n-    public static final RegistryType<ItemType> ITEM_TYPE = RegistryTypes.minecraftKey(\"item\");\n+    public static final DefaultedRegistryType<ParticleType> PARTICLE_TYPE = RegistryTypes.minecraftKeyInGame(\"particle_type\");\n \n-    public static final RegistryType<ParticleType> PARTICLE_TYPE = RegistryTypes.minecraftKey(\"particle_type\");\n+    public static final DefaultedRegistryType<RecipeType<?>> RECIPE_TYPE = RegistryTypes.minecraftKeyInGame(\"recipe_type\");\n \n-    public static final RegistryType<RecipeType<?>> RECIPE_TYPE = RegistryTypes.minecraftKey(\"recipe_type\");\n+    public static final DefaultedRegistryType<SoundType> SOUND_TYPE = RegistryTypes.minecraftKeyInGame(\"sound_event\");\n \n-    public static final RegistryType<SoundType> SOUND_TYPE = RegistryTypes.minecraftKey(\"sound_event\");\n+    public static final DefaultedRegistryType<Statistic> STATISTIC = RegistryTypes.minecraftKeyInGame(\"custom_stat\");\n \n-    public static final RegistryType<Statistic> STATISTIC = RegistryTypes.minecraftKey(\"custom_stat\");\n+    public static final DefaultedRegistryType<StatisticCategory> STATISTIC_CATEGORY = RegistryTypes.minecraftKeyInGame(\"statistic_category\");\n \n-    public static final RegistryType<StatisticCategory> STATISTIC_CATEGORY = RegistryTypes.minecraftKey(\"statistic_category\");\n+    public static final DefaultedRegistryType<Structure> STRUCTURE = RegistryTypes.minecraftKeyInGame(\"worldgen/structure_feature\");\n \n-    public static final RegistryType<Structure> STRUCTURE = RegistryTypes.minecraftKey(\"worldgen/structure_feature\");\n+    public static final DefaultedRegistryType<VillagerType> VILLAGER_TYPE = RegistryTypes.minecraftKeyInGame(\"villager_type\");\n \n-    public static final RegistryType<VillagerType> VILLAGER_TYPE = RegistryTypes.minecraftKey(\"villager_type\");\n+    public static final DefaultedRegistryType<ProfessionType> PROFESSION_TYPE = RegistryTypes.minecraftKeyInGame(\"villager_profession\");\n \n-    public static final RegistryType<ProfessionType> PROFESSION_TYPE = RegistryTypes.minecraftKey(\"villager_profession\");\n+    public static final DefaultedRegistryType<PotionType> POTION_TYPE = RegistryTypes.minecraftKeyInGame(\"potion\");\n \n     // ----\n \n-    public static final RegistryType<AccountDeletionResultType> ACCOUNT_DELETION_RESULT_TYPE = RegistryTypes.spongeKey(\"account_deletion_result_type\");\n+    public static final DefaultedRegistryType<AccountDeletionResultType> ACCOUNT_DELETION_RESULT_TYPE = RegistryTypes.spongeKeyInGame(\"account_deletion_result_type\");\n+\n+    public static final DefaultedRegistryType<AdvancementType> ADVANCEMENT_TYPE = RegistryTypes.spongeKeyInGame(\"advancement_type\");\n \n-    public static final RegistryType<AdvancementType> ADVANCEMENT_TYPE = RegistryTypes.spongeKey(\"advancement_type\");\n+    public static final DefaultedRegistryType<ArmorMaterial> ARMOR_MATERIAL = RegistryTypes.spongeKeyInGame(\"armor_material\");\n \n-    public static final RegistryType<ArmorMaterial> ARMOR_MATERIAL = RegistryTypes.spongeKey(\"armor_material\");\n+    public static final DefaultedRegistryType<AttachmentSurface> ATTACHMENT_SURFACE = RegistryTypes.spongeKeyInGame(\"attachment_surface\");\n \n-    public static final RegistryType<AttachmentSurface> ATTACHMENT_SURFACE = RegistryTypes.spongeKey(\"attachment_surface\");\n+    public static final DefaultedRegistryType<AttributeOperation> ATTRIBUTE_OPERATION = RegistryTypes.spongeKeyInGame(\"attribute_operation\");\n \n-    public static final RegistryType<AttributeOperation> ATTRIBUTE_OPERATION = RegistryTypes.spongeKey(\"attribute_operation\");\n+    public static final DefaultedRegistryType<BanType> BAN_TYPE = RegistryTypes.spongeKeyInGame(\"ban_type\");\n \n-    public static final RegistryType<BanType> BAN_TYPE = RegistryTypes.spongeKey(\"ban_type\");\n+    public static final DefaultedRegistryType<BannerPatternShape> BANNER_PATTERN_SHAPE = RegistryTypes.spongeKeyInGame(\"banner_pattern_shape\");\n \n-    public static final RegistryType<BannerPatternShape> BANNER_PATTERN_SHAPE = RegistryTypes.spongeKey(\"banner_pattern_shape\");\n+    public static final DefaultedRegistryType<BoatType> BOAT_TYPE = RegistryTypes.spongeKeyInGame(\"boat_type\");\n \n-    public static final RegistryType<BoatType> BOAT_TYPE = RegistryTypes.spongeKey(\"boat_type\");\n+    public static final DefaultedRegistryType<BodyPart> BODY_PART = RegistryTypes.spongeKeyInGame(\"body_part\");\n \n-    public static final RegistryType<BodyPart> BODY_PART = RegistryTypes.spongeKey(\"body_part\");\n+    public static final DefaultedRegistryType<BooleanStateProperty> BOOLEAN_STATE_PROPERTY = RegistryTypes.spongeKeyInGame(\"boolean_state_property\");\n \n-    public static final RegistryType<BooleanStateProperty> BOOLEAN_STATE_PROPERTY = RegistryTypes.spongeKey(\"boolean_state_property\");\n+    public static final DefaultedRegistryType<CatType> CAT_TYPE = RegistryTypes.spongeKeyInGame(\"cat_type\");\n \n-    public static final RegistryType<CatType> CAT_TYPE = RegistryTypes.spongeKey(\"cat_type\");\n+    public static final DefaultedRegistryType<ValueParameter<?>> REGISTRY_KEYED_VALUE_PARAMETER = RegistryTypes.spongeKeyInGame(\"value_parameter\");\n \n-    public static final RegistryType<ValueParameter<?>> REGISTRY_KEYED_VALUE_PARAMETER = RegistryTypes.spongeKey(\"value_parameter\");\n+    public static final DefaultedRegistryType<ChatVisibility> CHAT_VISIBILITY = RegistryTypes.spongeKeyInGame(\"chat_visibility\");\n \n-    public static final RegistryType<ChatVisibility> CHAT_VISIBILITY = RegistryTypes.spongeKey(\"chat_visibility\");\n+    public static final DefaultedRegistryType<ChestAttachmentType> CHEST_ATTACHMENT_TYPE = RegistryTypes.spongeKeyInGame(\"chest_attachment_type\");\n \n-    public static final RegistryType<ChestAttachmentType> CHEST_ATTACHMENT_TYPE = RegistryTypes.spongeKey(\"chest_attachment_type\");\n+    public static final DefaultedRegistryType<ChunkRegenerateFlag> CHUNK_REGENERATE_FLAG = RegistryTypes.spongeKeyInGame(\"chunk_regenerate_flag\");\n \n-    public static final RegistryType<ChunkRegenerateFlag> CHUNK_REGENERATE_FLAG = RegistryTypes.spongeKey(\"chunk_regenerate_flag\");\n+    public static final DefaultedRegistryType<ClickType<?>> CLICK_TYPE = RegistryTypes.spongeKeyInGame(\"click_type\");\n \n-    public static final RegistryType<ClickType<?>> CLICK_TYPE = RegistryTypes.spongeKey(\"click_type\");\n+    public static final DefaultedRegistryType<ClientCompletionKey<?>> CLIENT_COMPLETION_KEY = RegistryTypes.spongeKeyInGame(\"client_completion_key\");\n \n-    public static final RegistryType<ClientCompletionKey<?>> CLIENT_COMPLETION_KEY = RegistryTypes.spongeKey(\"client_completion_key\");\n+    public static final DefaultedRegistryType<ClientCompletionType> CLIENT_COMPLETION_TYPE = RegistryTypes.spongeKeyInGame(\"client_completion_type\");\n \n-    public static final RegistryType<ClientCompletionType> CLIENT_COMPLETION_TYPE = RegistryTypes.spongeKey(\"client_completion_type\");\n+    public static final DefaultedRegistryType<CollisionRule> COLLISION_RULE = RegistryTypes.spongeKeyInGame(\"collision_rule\");\n \n-    public static final RegistryType<CollisionRule> COLLISION_RULE = RegistryTypes.spongeKey(\"collision_rule\");\n+    public static final DefaultedRegistryType<CommandRegistrarType<?>> COMMAND_REGISTRAR_TYPE = RegistryTypes.spongeKeyInGame(\"command_registrar_type\");\n \n-    public static final RegistryType<CommandRegistrar<?>> COMMAND_REGISTRAR = RegistryTypes.spongeKey(\"command_registrar\");\n+    public static final DefaultedRegistryType<ComparatorMode> COMPARATOR_MODE = RegistryTypes.spongeKeyInGame(\"comparator_mode\");\n \n-    public static final RegistryType<ComparatorMode> COMPARATOR_MODE = RegistryTypes.spongeKey(\"comparator_mode\");\n+    public static final DefaultedRegistryType<Criterion> CRITERION = RegistryTypes.spongeKeyInGame(\"criterion\");\n \n-    public static final RegistryType<Criterion> CRITERION = RegistryTypes.spongeKey(\"criterion\");\n+    public static final DefaultedRegistryType<Currency> CURRENCY = RegistryTypes.spongeKeyInGame(\"currency\");\n \n-    public static final RegistryType<Currency> CURRENCY = RegistryTypes.spongeKey(\"currency\");\n+    public static final DefaultedRegistryType<DamageModifierType> DAMAGE_MODIFIER_TYPE = RegistryTypes.spongeKeyInGame(\"damage_modifier_type\");\n \n-    public static final RegistryType<DamageModifierType> DAMAGE_MODIFIER_TYPE = RegistryTypes.spongeKey(\"damage_modifier_type\");\n+    public static final DefaultedRegistryType<DamageType> DAMAGE_TYPE = RegistryTypes.spongeKeyInGame(\"damage_type\");\n \n-    public static final RegistryType<DamageSource> DAMAGE_SOURCE = RegistryTypes.spongeKey(\"damage_source\");\n+    public static final DefaultedRegistryType<DataFormat> DATA_FORMAT = RegistryTypes.spongeKeyInGame(\"data_format\");\n \n-    public static final RegistryType<DamageType> DAMAGE_TYPE = RegistryTypes.spongeKey(\"damage_type\");\n+    public static final DefaultedRegistryType<Difficulty> DIFFICULTY = RegistryTypes.spongeKeyInGame(\"difficulty\");\n \n-    public static final RegistryType<DataFormat> DATA_FORMAT = RegistryTypes.spongeKey(\"data_format\");\n+    public static final DefaultedRegistryType<DismountType> DISMOUNT_TYPE = RegistryTypes.minecraftKeyInGame(\"dismount_type\");\n \n-    public static final RegistryType<Difficulty> DIFFICULTY = RegistryTypes.spongeKey(\"difficulty\");\n+    public static final DefaultedRegistryType<DisplaySlot> DISPLAY_SLOT = RegistryTypes.spongeKeyInGame(\"display_slot\");\n \n-    public static final RegistryType<DismountType> DISMOUNT_TYPE = RegistryTypes.minecraftKey(\"dismount_type\");\n+    public static final DefaultedRegistryType<DoorHinge> DOOR_HINGE = RegistryTypes.spongeKeyInGame(\"door_hinge\");\n \n-    public static final RegistryType<DisplaySlot> DISPLAY_SLOT = RegistryTypes.spongeKey(\"display_slot\");\n+    public static final DefaultedRegistryType<DragonPhaseType> DRAGON_PHASE_TYPE = RegistryTypes.spongeKeyInGame(\"dragon_phase_type\");\n \n-    public static final RegistryType<DoorHinge> DOOR_HINGE = RegistryTypes.spongeKey(\"door_hinge\");\n+    public static final DefaultedRegistryType<DyeColor> DYE_COLOR = RegistryTypes.spongeKeyInGame(\"dye_color\");\n \n-    public static final RegistryType<DragonPhaseType> DRAGON_PHASE_TYPE = RegistryTypes.spongeKey(\"dragon_phase_type\");\n+    public static final DefaultedRegistryType<EnumStateProperty<?>> ENUM_STATE_PROPERTY = RegistryTypes.spongeKeyInGame(\"enum_state_property\");\n \n-    public static final RegistryType<DyeColor> DYE_COLOR = RegistryTypes.spongeKey(\"dye_color\");\n+    public static final DefaultedRegistryType<EquipmentGroup> EQUIPMENT_GROUP = RegistryTypes.spongeKeyInGame(\"equipment_group\");\n \n-    public static final RegistryType<EnumStateProperty<?>> ENUM_STATE_PROPERTY = RegistryTypes.spongeKey(\"enum_state_property\");\n+    public static final DefaultedRegistryType<EquipmentType> EQUIPMENT_TYPE = RegistryTypes.spongeKeyInGame(\"equipment_type\");\n \n-    public static final RegistryType<EquipmentGroup> EQUIPMENT_GROUP = RegistryTypes.spongeKey(\"equipment_group\");\n+    public static final DefaultedRegistryType<FireworkShape> FIREWORK_SHAPE = RegistryTypes.spongeKeyInGame(\"firework_shape\");\n \n-    public static final RegistryType<EquipmentType> EQUIPMENT_TYPE = RegistryTypes.spongeKey(\"equipment_type\");\n+    public static final DefaultedRegistryType<FoxType> FOX_TYPE = RegistryTypes.spongeKeyInGame(\"fox_type\");\n \n-    public static final RegistryType<EventContextKey<?>> EVENT_CONTEXT_KEY = RegistryTypes.spongeKey(\"event_context_key\");\n+    public static final DefaultedRegistryType<GameMode> GAME_MODE = RegistryTypes.spongeKeyInGame(\"game_mode\");\n \n-    public static final RegistryType<FireworkShape> FIREWORK_SHAPE = RegistryTypes.spongeKey(\"firework_shape\");\n+    public static final DefaultedRegistryType<GameRule<?>> GAME_RULE = RegistryTypes.spongeKeyInGame(\"game_rule\");\n \n-    public static final RegistryType<FoxType> FOX_TYPE = RegistryTypes.spongeKey(\"fox_type\");\n+    public static final DefaultedRegistryType<GoalExecutorType> GOAL_EXECUTOR_TYPE = RegistryTypes.spongeKeyInGame(\"goal_executor_type\");\n \n-    public static final RegistryType<GameMode> GAME_MODE = RegistryTypes.spongeKey(\"game_mode\");\n+    public static final DefaultedRegistryType<GoalType> GOAL_TYPE = RegistryTypes.spongeKeyInGame(\"goal_type\");\n \n-    public static final RegistryType<GameRule<?>> GAME_RULE = RegistryTypes.spongeKey(\"game_rule\");\n+    public static final DefaultedRegistryType<HandPreference> HAND_PREFERENCE = RegistryTypes.spongeKeyInGame(\"hand_preference\");\n \n-    public static final RegistryType<GoalExecutorType> GOAL_EXECUTOR_TYPE = RegistryTypes.spongeKey(\"goal_executor_type\");\n+    public static final DefaultedRegistryType<HandType> HAND_TYPE = RegistryTypes.spongeKeyInGame(\"hand_type\");\n \n-    public static final RegistryType<GoalType> GOAL_TYPE = RegistryTypes.spongeKey(\"goal_type\");\n+    public static final DefaultedRegistryType<HeightType> HEIGHT_TYPE = RegistryTypes.spongeKeyInGame(\"height_type\");\n \n-    public static final RegistryType<HandPreference> HAND_PREFERENCE = RegistryTypes.spongeKey(\"hand_preference\");\n+    public static final DefaultedRegistryType<HorseColor> HORSE_COLOR = RegistryTypes.spongeKeyInGame(\"horse_color\");\n \n-    public static final RegistryType<HandType> HAND_TYPE = RegistryTypes.spongeKey(\"hand_type\");\n+    public static final DefaultedRegistryType<HorseStyle> HORSE_STYLE = RegistryTypes.spongeKeyInGame(\"horse_style\");\n \n-    public static final RegistryType<HeightType> HEIGHT_TYPE = RegistryTypes.spongeKey(\"height_type\");\n+    public static final DefaultedRegistryType<InstrumentType> INSTRUMENT_TYPE = RegistryTypes.spongeKeyInGame(\"instrument_type\");\n \n-    public static final RegistryType<HorseColor> HORSE_COLOR = RegistryTypes.spongeKey(\"horse_color\");\n+    public static final DefaultedRegistryType<IntegerStateProperty> INTEGER_STATE_PROPERTY = RegistryTypes.spongeKeyInGame(\"integer_state_property\");\n \n-    public static final RegistryType<HorseStyle> HORSE_STYLE = RegistryTypes.spongeKey(\"horse_style\");\n+    public static final DefaultedRegistryType<ItemTier> ITEM_TIER = RegistryTypes.spongeKeyInGame(\"item_tier\");\n \n-    public static final RegistryType<InstrumentType> INSTRUMENT_TYPE = RegistryTypes.spongeKey(\"instrument_type\");\n+    public static final DefaultedRegistryType<LightType> LIGHT_TYPE = RegistryTypes.spongeKeyInGame(\"light_type\");\n \n-    public static final RegistryType<IntegerStateProperty> INTEGER_STATE_PROPERTY = RegistryTypes.spongeKey(\"integer_state_property\");\n+    public static final DefaultedRegistryType<LlamaType> LLAMA_TYPE = RegistryTypes.spongeKeyInGame(\"llama_type\");\n \n-    public static final RegistryType<ItemTier> ITEM_TIER = RegistryTypes.spongeKey(\"item_tier\");\n+    public static final DefaultedRegistryType<MatterType> MATTER_TYPE = RegistryTypes.spongeKeyInGame(\"matter_type\");\n \n-    public static final RegistryType<LightType> LIGHT_TYPE = RegistryTypes.spongeKey(\"light_type\");\n+    public static final DefaultedRegistryType<Mirror> MIRROR = RegistryTypes.spongeKeyInGame(\"mirror\");\n \n-    public static final RegistryType<LlamaType> LLAMA_TYPE = RegistryTypes.spongeKey(\"llama_type\");\n+    public static final DefaultedRegistryType<MooshroomType> MOOSHROOM_TYPE = RegistryTypes.spongeKeyInGame(\"mooshroom_type\");\n \n-    public static final RegistryType<MatterType> MATTER_TYPE = RegistryTypes.spongeKey(\"matter_type\");\n+    public static final DefaultedRegistryType<MovementType> MOVEMENT_TYPE = RegistryTypes.spongeKeyInGame(\"movement_type\");\n \n-    public static final RegistryType<Mirror> MIRROR = RegistryTypes.spongeKey(\"mirror\");\n+    public static final DefaultedRegistryType<MusicDisc> MUSIC_DISC = RegistryTypes.spongeKeyInGame(\"music_disc\");\n \n-    public static final RegistryType<MooshroomType> MOOSHROOM_TYPE = RegistryTypes.spongeKey(\"mooshroom_type\");\n+    public static final DefaultedRegistryType<NotePitch> NOTE_PITCH = RegistryTypes.spongeKeyInGame(\"note_pitch\");\n \n-    public static final RegistryType<MovementType> MOVEMENT_TYPE = RegistryTypes.spongeKey(\"movement_type\");\n+    public static final DefaultedRegistryType<ObjectiveDisplayMode> OBJECTIVE_DISPLAY_MODE = RegistryTypes.spongeKeyInGame(\"objective_display_mode\");\n \n-    public static final RegistryType<MusicDisc> MUSIC_DISC = RegistryTypes.spongeKey(\"music_disc\");\n+    public static final DefaultedRegistryType<Operator> OPERATOR = RegistryTypes.spongeKeyInGame(\"operator\");\n \n-    public static final RegistryType<NotePitch> NOTE_PITCH = RegistryTypes.spongeKey(\"note_pitch\");\n+    public static final DefaultedRegistryType<Operation> OPERATION = RegistryTypes.spongeKeyInGame(\"operation\");\n \n-    public static final RegistryType<ObjectiveDisplayMode> OBJECTIVE_DISPLAY_MODE = RegistryTypes.spongeKey(\"objective_display_mode\");\n+    public static final DefaultedRegistryType<Orientation> ORIENTATION = RegistryTypes.spongeKeyInGame(\"orientation\");\n \n-    public static final RegistryType<Operation> OPERATION = RegistryTypes.spongeKey(\"operation\");\n+    public static final DefaultedRegistryType<PaletteType<?, ?>> PALETTE_TYPE = RegistryTypes.spongeKeyInGame(\"palette_type\");\n \n-    public static final RegistryType<Orientation> ORIENTATION = RegistryTypes.spongeKey(\"orientation\");\n+    public static final DefaultedRegistryType<PandaGene> PANDA_GENE = RegistryTypes.spongeKeyInGame(\"panda_gene\");\n \n-    public static final RegistryType<PaletteType<?, ?>> PALETTE_TYPE = RegistryTypes.spongeKey(\"palette_type\");\n+    public static final DefaultedRegistryType<ParrotType> PARROT_TYPE = RegistryTypes.spongeKeyInGame(\"parrot_type\");\n \n-    public static final RegistryType<PandaGene> PANDA_GENE = RegistryTypes.spongeKey(\"panda_gene\");\n+    public static final DefaultedRegistryType<ParticleOption<?>> PARTICLE_OPTION = RegistryTypes.spongeKeyInGame(\"particle_option\");\n \n-    public static final RegistryType<ParrotType> PARROT_TYPE = RegistryTypes.spongeKey(\"parrot_type\");\n+    public static final DefaultedRegistryType<PhantomPhase> PHANTOM_PHASE = RegistryTypes.spongeKeyInGame(\"phantom_phase\");\n \n-    public static final RegistryType<ParticleOption<?>> PARTICLE_OPTION = RegistryTypes.spongeKey(\"particle_option\");\n+    public static final DefaultedRegistryType<PickupRule> PICKUP_RULE = RegistryTypes.spongeKeyInGame(\"pickup_rule\");\n \n-    public static final RegistryType<PhantomPhase> PHANTOM_PHASE = RegistryTypes.spongeKey(\"phantom_phase\");\n+    public static final DefaultedRegistryType<PistonType> PISTON_TYPE = RegistryTypes.spongeKeyInGame(\"piston_type\");\n \n-    public static final RegistryType<PickupRule> PICKUP_RULE = RegistryTypes.spongeKey(\"pickup_rule\");\n+    public static final DefaultedRegistryType<PlaceholderParser> PLACEHOLDER_PARSER = RegistryTypes.spongeKeyInGame(\"placeholder_parser\");\n \n-    public static final RegistryType<PistonType> PISTON_TYPE = RegistryTypes.spongeKey(\"piston_type\");\n+    public static final DefaultedRegistryType<PortalType> PORTAL_TYPE = RegistryTypes.spongeKeyInGame(\"portal_type\");\n \n-    public static final RegistryType<PlaceholderParser> PLACEHOLDER_PARSER = RegistryTypes.spongeKey(\"placeholder_parser\");\n+    public static final DefaultedRegistryType<PortionType> PORTION_TYPE = RegistryTypes.spongeKeyInGame(\"portion_type\");\n \n-    public static final RegistryType<PortalType> PORTAL_TYPE = RegistryTypes.spongeKey(\"portal_type\");\n+    public static final DefaultedRegistryType<QueryType> QUERY_TYPE = RegistryTypes.spongeKeyInGame(\"query_type\");\n \n-    public static final RegistryType<PortionType> PORTION_TYPE = RegistryTypes.spongeKey(\"portion_type\");\n+    public static final DefaultedRegistryType<RabbitType> RABBIT_TYPE = RegistryTypes.spongeKeyInGame(\"rabbit_type\");\n \n-    public static final RegistryType<PotionType> POTION_TYPE = RegistryTypes.spongeKey(\"potion_type\");\n+    public static final DefaultedRegistryType<RaidStatus> RAID_STATUS = RegistryTypes.spongeKeyInGame(\"raid_status\");\n \n-    public static final RegistryType<RabbitType> RABBIT_TYPE = RegistryTypes.spongeKey(\"rabbit_type\");\n+    public static final DefaultedRegistryType<RailDirection> RAIL_DIRECTION = RegistryTypes.spongeKeyInGame(\"rail_direction\");\n \n-    public static final RegistryType<RaidStatus> RAID_STATUS = RegistryTypes.spongeKey(\"raid_status\");\n+    public static final DefaultedRegistryType<ResolveOperation> RESOLVE_OPERATION = RegistryTypes.spongeKeyInGame(\"resolve_operation\");\n \n-    public static final RegistryType<RailDirection> RAIL_DIRECTION = RegistryTypes.spongeKey(\"rail_direction\");\n+    public static final DefaultedRegistryType<Rotation> ROTATION = RegistryTypes.spongeKeyInGame(\"rotation\");\n \n-    public static final RegistryType<Rotation> ROTATION = RegistryTypes.spongeKey(\"rotation\");\n+    public static final DefaultedRegistryType<SelectorSortAlgorithm> SELECTOR_SORT_ALGORITHM = RegistryTypes.spongeKeyInGame(\"selector_sort_algorithm\");\n \n-    public static final RegistryType<SelectorSortAlgorithm> SELECTOR_SORT_ALGORITHM = RegistryTypes.spongeKey(\"selector_sort_algorithm\");\n+    public static final DefaultedRegistryType<SelectorType> SELECTOR_TYPE = RegistryTypes.spongeKeyInGame(\"selector_type\");\n \n-    public static final RegistryType<SelectorType> SELECTOR_TYPE = RegistryTypes.spongeKey(\"selector_type\");\n+    public static final DefaultedRegistryType<SkinPart> SKIN_PART = RegistryTypes.spongeKeyInGame(\"skin_part\");\n \n-    public static final RegistryType<SkinPart> SKIN_PART = RegistryTypes.spongeKey(\"skin_part\");\n+    public static final DefaultedRegistryType<SlabPortion> SLAB_PORTION = RegistryTypes.spongeKeyInGame(\"slab_portion\");\n \n-    public static final RegistryType<SlabPortion> SLAB_PORTION = RegistryTypes.spongeKey(\"slab_portion\");\n+    public static final DefaultedRegistryType<SpawnType> SPAWN_TYPE = RegistryTypes.spongeKeyInGame(\"spawn_type\");\n \n-    public static final RegistryType<SpawnType> SPAWN_TYPE = RegistryTypes.spongeKey(\"spawn_type\");\n+    public static final DefaultedRegistryType<SpellType> SPELL_TYPE = RegistryTypes.spongeKeyInGame(\"spell_type\");\n \n-    public static final RegistryType<SpellType> SPELL_TYPE = RegistryTypes.spongeKey(\"spell_type\");\n+    public static final DefaultedRegistryType<StairShape> STAIR_SHAPE = RegistryTypes.spongeKeyInGame(\"stair_shape\");\n \n-    public static final RegistryType<StairShape> STAIR_SHAPE = RegistryTypes.spongeKey(\"stair_shape\");\n+    public static final DefaultedRegistryType<StructureMode> STRUCTURE_MODE = RegistryTypes.spongeKeyInGame(\"structure_mode\");\n \n-    public static final RegistryType<StructureMode> STRUCTURE_MODE = RegistryTypes.spongeKey(\"structure_mode\");\n+    public static final DefaultedRegistryType<TaskPriority> TASK_PRIORITY = RegistryTypes.spongeKeyInGame(\"task_priority\");\n \n-    public static final RegistryType<TaskPriority> TASK_PRIORITY = RegistryTypes.spongeKey(\"task_priority\");\n+    public static final DefaultedRegistryType<TeleportHelperFilter> TELEPORT_HELPER_FILTER = RegistryTypes.spongeKeyInGame(\"teleport_helper_filter\");\n \n-    public static final RegistryType<TeleportHelperFilter> TELEPORT_HELPER_FILTER = RegistryTypes.spongeKey(\"teleport_helper_filter\");\n+    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKeyInGame(\"ticket_type\");\n \n-    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_type\");\n+    public static final DefaultedRegistryType<TransactionType> TRANSACTION_TYPE = RegistryTypes.spongeKeyInGame(\"transaction_type\");\n \n-    public static final RegistryType<TransactionType> TRANSACTION_TYPE = RegistryTypes.spongeKey(\"transaction_type\");\n+    public static final DefaultedRegistryType<Trigger<?>> TRIGGER = RegistryTypes.spongeKeyInGame(\"trigger\");\n \n-    public static final RegistryType<Trigger<?>> TRIGGER = RegistryTypes.spongeKey(\"trigger\");\n+    public static final DefaultedRegistryType<TropicalFishShape> TROPICAL_FISH_SHAPE = RegistryTypes.spongeKeyInGame(\"tropical_fish_shape\");\n \n-    public static final RegistryType<TropicalFishShape> TROPICAL_FISH_SHAPE = RegistryTypes.spongeKey(\"tropical_fish_shape\");\n+    public static final DefaultedRegistryType<Visibility> VISIBILITY = RegistryTypes.spongeKeyInGame(\"visibility\");\n \n-    public static final RegistryType<QueryType> QUERY_TYPE = RegistryTypes.spongeKey(\"query_type\");\n+    public static final DefaultedRegistryType<WeatherType> WEATHER_TYPE = RegistryTypes.spongeKeyInGame(\"weather_type\");\n \n-    public static final RegistryType<Visibility> VISIBILITY = RegistryTypes.spongeKey(\"visibility\");\n+    public static final DefaultedRegistryType<WireAttachmentType> WIRE_ATTACHMENT_TYPE = RegistryTypes.spongeKeyInGame(\"wire_attachment_type\");\n \n-    public static final RegistryType<Weather> WEATHER = RegistryTypes.spongeKey(\"weather\");\n+    public static final DefaultedRegistryType<MapColorType> MAP_COLOR_TYPE = RegistryTypes.spongeKeyInGame(\"map_color_type\");\n+\n+    public static final DefaultedRegistryType<MapDecorationOrientation> MAP_DECORATION_ORIENTATION = RegistryTypes.spongeKeyInGame(\"map_decoration_orientation\");\n+\n+    public static final DefaultedRegistryType<MapDecorationType> MAP_DECORATION_TYPE = RegistryTypes.spongeKeyInGame(\"map_decoration_type\");\n+\n+    public static final DefaultedRegistryType<MapShade> MAP_SHADE = RegistryTypes.spongeKeyInGame(\"map_shade\");\n \n-    public static final RegistryType<WireAttachmentType> WIRE_ATTACHMENT_TYPE = RegistryTypes.spongeKey(\"wire_attachment_type\");\n-    \n     // @formatter:on\n \n     private static <V> RegistryType<V> minecraftKey(final String key) {\n-        return RegistryType.of(RegistryRoots.MINECRAFT, ResourceKey.minecraft(key));\n+        return RegistryType.of(RegistryRoots.MINECRAFT, ResourceKey.minecraft(Objects.requireNonNull(key, \"key\")));\n+    }\n+\n+    private static <V> DefaultedRegistryType<V> minecraftKeyInGame(final String key) {\n+        return RegistryType.of(RegistryRoots.MINECRAFT, ResourceKey.minecraft(Objects.requireNonNull(key, \"key\"))).asDefaultedType(() -> Sponge.game().registries());\n+    }\n+\n+    private static <V> DefaultedRegistryType<V> minecraftKeyInServer(final String key) {\n+        return RegistryType.of(RegistryRoots.MINECRAFT, ResourceKey.minecraft(Objects.requireNonNull(key, \"key\"))).asDefaultedType(() -> Sponge.server().registries());\n     }\n \n-    private static <V> RegistryType<V> spongeKey(final String key) {\n-        return RegistryType.of(RegistryRoots.SPONGE, ResourceKey.sponge(key));\n+    private static <V> DefaultedRegistryType<V> spongeKeyInGame(final String key) {\n+        return RegistryType.of(RegistryRoots.SPONGE, ResourceKey.sponge(Objects.requireNonNull(key, \"key\"))).asDefaultedType(() -> Sponge.game().registries());\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}, {"oid": "fe2cf697e2f1044af27d78c457b5077c49d04845", "url": "https://github.com/SpongePowered/SpongeAPI/commit/fe2cf697e2f1044af27d78c457b5077c49d04845", "message": "Update for 1.16.4", "committedDate": "2021-01-03T18:08:40Z", "type": "forcePushed"}, {"oid": "5334c877488797e0c2cb718b17554a31644fc9be", "url": "https://github.com/SpongePowered/SpongeAPI/commit/5334c877488797e0c2cb718b17554a31644fc9be", "message": "First stab at a Ticket Manager", "committedDate": "2021-04-16T18:32:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTM1NTQyMQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r615355421", "body": "What's the behavior of a ticket that isn't valid?", "bodyText": "What's the behavior of a ticket that isn't valid?", "bodyHTML": "<p dir=\"auto\">What's the behavior of a ticket that isn't valid?</p>", "author": "gabizou", "createdAt": "2021-04-18T07:20:42Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.util.annotation.DoNotStore;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+@DoNotStore\n+public interface ChunkManager {\n+\n+    /**\n+     * Gets the {@link ServerWorld} this manager operates upon.\n+     *\n+     * @return The {@link ServerWorld}\n+     */\n+    ServerWorld world();\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the {@link Ticks} remaining on the supplied ticket.", "originalCommit": "2aec9e03eba1db35dc95baf7412b4102788c3640", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTQzNDIwOQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r615434209", "bodyText": "Doesn't do anything. The distance manager has exponged all knowledge of it so the chunks it refers to may unload.", "author": "dualspiral", "createdAt": "2021-04-18T18:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTM1NTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c6ba2b38f444676273d6958e823a5b532747dbf", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex 2e378d25e..fd891b370 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -52,7 +53,20 @@\n      * @param ticket The ticket to check.\n      * @return true if so\n      */\n-    boolean isValid(Ticket<?> ticket);\n+    boolean valid(Ticket<?> ticket);\n+\n+    /**\n+     * Returns whether the provided {@link Ticket} has been processed, that is,\n+     * it has been recognised by the engine and the {@link Chunk chunks} that\n+     * this ticket affects have at least been scheduled for loading.\n+     *\n+     * <p><strong>Note:</strong> a processed ticket is no guarantee that a chunk\n+     * has been loaded, instead it indicates that the ticket has been recognised\n+     * by the manager <em>at some point</em>.</p>\n+     *\n+     * @return {@code true} if the ticket has been processed.\n+     */\n+    boolean processed(Ticket<?> ticket);\n \n     /**\n      * Gets the {@link Ticks} remaining on the supplied ticket.\n", "next_change": {"commit": "476b9f8b93ba722b8e60ae36899ad95702b7b5d3", "changed_code": [{"header": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex fd891b370..d5378c59b 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n", "chunk": "@@ -55,19 +55,6 @@\n      */\n     boolean valid(Ticket<?> ticket);\n \n-    /**\n-     * Returns whether the provided {@link Ticket} has been processed, that is,\n-     * it has been recognised by the engine and the {@link Chunk chunks} that\n-     * this ticket affects have at least been scheduled for loading.\n-     *\n-     * <p><strong>Note:</strong> a processed ticket is no guarantee that a chunk\n-     * has been loaded, instead it indicates that the ticket has been recognised\n-     * by the manager <em>at some point</em>.</p>\n-     *\n-     * @return {@code true} if the ticket has been processed.\n-     */\n-    boolean processed(Ticket<?> ticket);\n-\n     /**\n      * Gets the {@link Ticks} remaining on the supplied ticket.\n      *\n", "next_change": null}]}}]}}, {"oid": "307063a0f712fb9e6fcc5021cb9cef74871478d5", "url": "https://github.com/SpongePowered/SpongeAPI/commit/307063a0f712fb9e6fcc5021cb9cef74871478d5", "message": "Minor adjustments to docs", "committedDate": "2021-05-02T12:37:46Z", "type": "forcePushed"}, {"oid": "14fdb811837cd2278995c7afa397edbe85731fb5", "url": "https://github.com/SpongePowered/SpongeAPI/commit/14fdb811837cd2278995c7afa397edbe85731fb5", "message": "Minor adjustments to docs", "committedDate": "2021-05-14T19:50:57Z", "type": "forcePushed"}, {"oid": "4c6ba2b38f444676273d6958e823a5b532747dbf", "url": "https://github.com/SpongePowered/SpongeAPI/commit/4c6ba2b38f444676273d6958e823a5b532747dbf", "message": "Add overloads, FORCED -> STANDARD", "committedDate": "2021-05-23T21:31:18Z", "type": "forcePushed"}, {"oid": "acc198aeaa0492853440bf4cdd931305105262e7", "url": "https://github.com/SpongePowered/SpongeAPI/commit/acc198aeaa0492853440bf4cdd931305105262e7", "message": "Add overloads, FORCED -> STANDARD", "committedDate": "2021-06-05T11:26:43Z", "type": "forcePushed"}, {"oid": "476b9f8b93ba722b8e60ae36899ad95702b7b5d3", "url": "https://github.com/SpongePowered/SpongeAPI/commit/476b9f8b93ba722b8e60ae36899ad95702b7b5d3", "message": "Remove processed method", "committedDate": "2021-06-15T18:54:34Z", "type": "forcePushed"}, {"oid": "0a8236296434c23ba0056c0fe0779b9b77f7904c", "url": "https://github.com/SpongePowered/SpongeAPI/commit/0a8236296434c23ba0056c0fe0779b9b77f7904c", "message": "First stab at a Ticket Manager", "committedDate": "2021-06-29T17:29:59Z", "type": "forcePushed"}, {"oid": "150593f9d0a1bea1152817d85cb5ce446150c13e", "url": "https://github.com/SpongePowered/SpongeAPI/commit/150593f9d0a1bea1152817d85cb5ce446150c13e", "message": "First stab at a Ticket Manager", "committedDate": "2021-06-30T20:27:17Z", "type": "commit"}, {"oid": "150593f9d0a1bea1152817d85cb5ce446150c13e", "url": "https://github.com/SpongePowered/SpongeAPI/commit/150593f9d0a1bea1152817d85cb5ce446150c13e", "message": "First stab at a Ticket Manager", "committedDate": "2021-06-30T20:27:17Z", "type": "forcePushed"}]}