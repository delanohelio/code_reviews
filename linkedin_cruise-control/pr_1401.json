{"pr_number": 1401, "pr_title": "Honor webserver.api.urlprefix config", "pr_author": "Lincong", "pr_createdAt": "2020-11-24T05:03:06Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1401", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMTUxMA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530001510", "body": "Can we avoid wildcard imports?", "bodyText": "Can we avoid wildcard imports?", "bodyHTML": "<p dir=\"auto\">Can we avoid wildcard imports?</p>", "author": "efeg", "createdAt": "2020-11-24T23:27:05Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "diffHunk": "@@ -30,6 +30,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.*;", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMTc4NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530001785", "body": "If this PR honors configurable request URI, can we drop this hardcoded value?\r\n\r\nhttps://github.com/linkedin/cruise-control/blob/5ed774eb5c64f6e57a6a001c1306c520170416c5/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java#L38-L39", "bodyText": "If this PR honors configurable request URI, can we drop this hardcoded value?\n\n  \n    \n      cruise-control/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java\n    \n    \n        Lines 38 to 39\n      in\n      5ed774e\n    \n    \n    \n    \n\n        \n          \n           // FIXME: Read this from a configuration \n        \n\n        \n          \n           public static final String REQUEST_URI = \"/KAFKACRUISECONTROL/\";", "bodyHTML": "<p dir=\"auto\">If this PR honors configurable request URI, can we drop this hardcoded value?</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/linkedin/cruise-control/blob/5ed774eb5c64f6e57a6a001c1306c520170416c5/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java#L38-L39\">cruise-control/cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 38 to 39\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/linkedin/cruise-control/commit/5ed774eb5c64f6e57a6a001c1306c520170416c5\">5ed774e</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L38\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"38\"></td>\n          <td id=\"LC38\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> FIXME: Read this from a configuration</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L39\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"39\"></td>\n          <td id=\"LC39\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">REQUEST_URI</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/KAFKACRUISECONTROL/<span class=\"pl-pds\">\"</span></span>; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "efeg", "createdAt": "2020-11-24T23:27:24Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));\n     if (endPoint == null) {\n       String method = request.getMethod();\n       String errorMessage = String.format(\"Unrecognized endpoint in request '%s'%nSupported %s endpoints: %s\",", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA4MTA1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530081058", "bodyText": "Yes. I agree that we can drop this value and (indirectly) use the default web server API URL prefix value DEFAULT_WEBSERVER_API_URLPREFIX", "author": "Lincong", "createdAt": "2020-11-25T03:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMTc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwOTM1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530009358", "body": "According to the Java Servlet specification, the config `WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG` must end with `/*` suffix.\r\n1. The following comment seems incomplete: \r\n\r\nhttps://github.com/linkedin/cruise-control/blob/5ed774eb5c64f6e57a6a001c1306c520170416c5/config/cruisecontrol.properties#L325-L327\r\n\r\nCan we update it to say:\r\n```\r\n# REST API default prefix (dont forget the ending /*)\r\n```\r\n\r\n2. We don't have any sanity check to enforce this suffix upon configuration time. Can we add a sanity check for `WEBSERVER_API_URLPREFIX_CONFIG` under `KafkaCruiseControlConfig`?", "bodyText": "According to the Java Servlet specification, the config WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG must end with /* suffix.\n\nThe following comment seems incomplete:\n\n\n  \n    \n      cruise-control/config/cruisecontrol.properties\n    \n    \n        Lines 325 to 327\n      in\n      5ed774e\n    \n    \n    \n    \n\n        \n          \n           # REST API default prefix \n        \n\n        \n          \n           # (dont forget the ending *) \n        \n\n        \n          \n           webserver.api.urlprefix=/kafkacruisecontrol/* \n        \n    \n  \n\n\nCan we update it to say:\n# REST API default prefix (dont forget the ending /*)\n\n\nWe don't have any sanity check to enforce this suffix upon configuration time. Can we add a sanity check for WEBSERVER_API_URLPREFIX_CONFIG under KafkaCruiseControlConfig?", "bodyHTML": "<p dir=\"auto\">According to the Java Servlet specification, the config <code>WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG</code> must end with <code>/*</code> suffix.</p>\n<ol dir=\"auto\">\n<li>The following comment seems incomplete:</li>\n</ol>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/linkedin/cruise-control/blob/5ed774eb5c64f6e57a6a001c1306c520170416c5/config/cruisecontrol.properties#L325-L327\">cruise-control/config/cruisecontrol.properties</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 325 to 327\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/linkedin/cruise-control/commit/5ed774eb5c64f6e57a6a001c1306c520170416c5\">5ed774e</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L325\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"325\"></td>\n          <td id=\"LC325\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> REST API default prefix</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L326\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"326\"></td>\n          <td id=\"LC326\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> (dont forget the ending *)</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L327\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"327\"></td>\n          <td id=\"LC327\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c1\">webserver.api.urlprefix</span>=<span class=\"pl-s\">/kafkacruisecontrol/*</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">Can we update it to say:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# REST API default prefix (dont forget the ending /*)\n\"><pre><code># REST API default prefix (dont forget the ending /*)\n</code></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>We don't have any sanity check to enforce this suffix upon configuration time. Can we add a sanity check for <code>WEBSERVER_API_URLPREFIX_CONFIG</code> under <code>KafkaCruiseControlConfig</code>?</li>\n</ol>", "author": "efeg", "createdAt": "2020-11-24T23:35:22Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));\n     if (endPoint == null) {\n       String method = request.getMethod();\n       String errorMessage = String.format(\"Unrecognized endpoint in request '%s'%nSupported %s endpoints: %s\",", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxMjM4Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530012386", "body": "`apiUrlPrefix` must end with `/*` -- i.e. failure of this condition must result in a configuration time failure.\r\nHence, this if check is redundant.", "bodyText": "apiUrlPrefix must end with /* -- i.e. failure of this condition must result in a configuration time failure.\nHence, this if check is redundant.", "bodyHTML": "<p dir=\"auto\"><code>apiUrlPrefix</code> must end with <code>/*</code> -- i.e. failure of this condition must result in a configuration time failure.<br>\nHence, this if check is redundant.</p>", "author": "efeg", "createdAt": "2020-11-24T23:38:35Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +177,11 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    if (apiUrlPrefix.endsWith(\"/*\")) {", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI3NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530016275", "body": "Do we have to do this pruning and upper case conversion for `apiUrlPrefix` for every single request that hits a CC endpoint?\r\n\r\n`apiUrlPrefix` is already known at configuration time -- i.e. it won't change throughout the lifetime of this CC instance. So can't we initialize this static util class with the well-formatted `REQUEST_URI` (which is constructed by pruning and upper case conversion of `WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG` once) and use that here as before?", "bodyText": "Do we have to do this pruning and upper case conversion for apiUrlPrefix for every single request that hits a CC endpoint?\napiUrlPrefix is already known at configuration time -- i.e. it won't change throughout the lifetime of this CC instance. So can't we initialize this static util class with the well-formatted REQUEST_URI (which is constructed by pruning and upper case conversion of WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG once) and use that here as before?", "bodyHTML": "<p dir=\"auto\">Do we have to do this pruning and upper case conversion for <code>apiUrlPrefix</code> for every single request that hits a CC endpoint?</p>\n<p dir=\"auto\"><code>apiUrlPrefix</code> is already known at configuration time -- i.e. it won't change throughout the lifetime of this CC instance. So can't we initialize this static util class with the well-formatted <code>REQUEST_URI</code> (which is constructed by pruning and upper case conversion of <code>WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG</code> once) and use that here as before?</p>", "author": "efeg", "createdAt": "2020-11-24T23:44:49Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +177,11 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    if (apiUrlPrefix.endsWith(\"/*\")) {\n+      // Ignore the last character '*'\n+      apiUrlPrefix = apiUrlPrefix.substring(0, apiUrlPrefix.length() - 1);\n+    }\n+    String path = request.getRequestURI().toUpperCase().replace(apiUrlPrefix.toUpperCase(), \"\");", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5NjMxNw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530096317", "bodyText": "It's not a good practice to use a static class to \"cache\" any value. A static method should be 100% stateless. So I strongly prefer to just stick with the current implementation with the blow change:\n    if (!apiUrlPrefix.endsWith(\"/*\")) {\n      throw new IllegalArgumentException(\"API URL prefix should end with \\\"/*\\\". Got: \" + apiUrlPrefix));\n    }\n\nIn this approach, we need to do this pruning and upper case conversion for every single request. It's not a big deal. If we really want to save this \"overhead\". We will need to think of some way that does not use the static method/class. However, that might over-complicate the whole thing. So, I prefer to stick with this approach.", "author": "Lincong", "createdAt": "2020-11-25T04:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYxMzQ1MA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530613450", "bodyText": "Discussed offline and we decided to stick with the current implementation for now. In the future, we can consider using Dagger 2", "author": "Lincong", "createdAt": "2020-11-25T19:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjk1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530016958", "body": "Passing `config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)` to endpoint seems redundant (please see my comment on `ParameterUtils#endPoint `)", "bodyText": "Passing config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG) to endpoint seems redundant (please see my comment on ParameterUtils#endPoint )", "bodyHTML": "<p dir=\"auto\">Passing <code>config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)</code> to endpoint seems redundant (please see my comment on <code>ParameterUtils#endPoint </code>)</p>", "author": "efeg", "createdAt": "2020-11-24T23:46:44Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -193,7 +193,7 @@ static String urlEncode(String s) throws UnsupportedEncodingException {\n    */\n   static CruiseControlEndPoint getValidEndpoint(HttpServletRequest request, HttpServletResponse response, KafkaCruiseControlConfig config)\n       throws IOException {\n-    CruiseControlEndPoint endPoint = endPoint(request);\n+    CruiseControlEndPoint endPoint = endPoint(request, config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG));", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5NjQwNA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530096404", "bodyText": "Replied to the previous comment", "author": "Lincong", "createdAt": "2020-11-25T04:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxNjk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxODUzNg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530018536", "body": "`REQUEST_URI` is a malformed `_apiUrlPrefix` -- i.e. it does not end with `*` -- hence, it shall not be used interchangeably here.\r\n\r\nWith the proposed change in `ParameterUtils` (please see earlier comment), we can drop these changes.", "bodyText": "REQUEST_URI is a malformed _apiUrlPrefix -- i.e. it does not end with * -- hence, it shall not be used interchangeably here.\nWith the proposed change in ParameterUtils (please see earlier comment), we can drop these changes.", "bodyHTML": "<p dir=\"auto\"><code>REQUEST_URI</code> is a malformed <code>_apiUrlPrefix</code> -- i.e. it does not end with <code>*</code> -- hence, it shall not be used interchangeably here.</p>\n<p dir=\"auto\">With the proposed change in <code>ParameterUtils</code> (please see earlier comment), we can drop these changes.</p>", "author": "efeg", "createdAt": "2020-11-24T23:51:29Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManager.java", "diffHunk": "@@ -136,6 +138,7 @@ protected boolean removeEldestEntry(Map.Entry<UUID, UserTaskInfo> eldest) {\n     }\n     _sessionExpiryMs = sessionExpiryMs;\n     _maxActiveUserTasks = maxActiveUserTasks;\n+    _apiUrlPrefix = KafkaCruiseControlServletUtils.REQUEST_URI;", "originalCommit": "22bba336d1fed726f402e881ae976de1b5dbcacc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA5Njc4Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530096782", "bodyText": "I changed it to:\n_apiUrlPrefix = config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG);", "author": "Lincong", "createdAt": "2020-11-25T04:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxODUzNg=="}], "type": "inlineReview"}, {"oid": "26edfc01890b825a2dfef1fa38aa32f4697d1b41", "url": "https://github.com/linkedin/cruise-control/commit/26edfc01890b825a2dfef1fa38aa32f4697d1b41", "message": "Fix some issues", "committedDate": "2020-11-25T04:17:29Z", "type": "forcePushed"}, {"oid": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "url": "https://github.com/linkedin/cruise-control/commit/14ade8d35919d7b5a86c03aff54c4ce4533332a2", "message": "Fix some issues", "committedDate": "2020-11-26T00:09:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwODMwMg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530708302", "body": "Nit: We are using the `expectedUrlPrefixEnd` to check both `webserverApiUrlPrefix` and `webserverUiUrlPrefix`. Should we name it to something that applies to both? -- e.g. `expectedSuffix`", "bodyText": "Nit: We are using the expectedUrlPrefixEnd to check both webserverApiUrlPrefix and webserverUiUrlPrefix. Should we name it to something that applies to both? -- e.g. expectedSuffix", "bodyHTML": "<p dir=\"auto\">Nit: We are using the <code>expectedUrlPrefixEnd</code> to check both <code>webserverApiUrlPrefix</code> and <code>webserverUiUrlPrefix</code>. Should we name it to something that applies to both? -- e.g. <code>expectedSuffix</code></p>", "author": "efeg", "createdAt": "2020-11-26T00:34:28Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/KafkaCruiseControlConfig.java", "diffHunk": "@@ -464,6 +464,25 @@ void sanityCheckSecurity() { // visible for testing\n     }\n   }\n \n+  /**\n+   * Sanity check to ensure that webserver URL prefix is set up correctly. This means the following:\n+   *  <code>webserver.api.urlprefix</code> and <code>webserver.ui.urlprefix</code> must end with \"/*\"\n+   */\n+  void sanityCheckWebServerUrlPrefix() { // visible for testing\n+    String expectedUrlPrefixEnd = \"/*\";", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NTk2Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530755963", "bodyText": "Good idea", "author": "Lincong", "createdAt": "2020-11-26T03:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwODMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwOTEzMA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530709130", "body": "Looks like we use this function only in tests. Should we move it to a relevant test utility class?", "bodyText": "Looks like we use this function only in tests. Should we move it to a relevant test utility class?", "bodyHTML": "<p dir=\"auto\">Looks like we use this function only in tests. Should we move it to a relevant test utility class?</p>", "author": "efeg", "createdAt": "2020-11-26T00:37:23Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletUtils.java", "diffHunk": "@@ -283,4 +281,10 @@ static void ensureHeaderNotPresent(HttpServletRequest request, String headerName\n   public static String httpServletRequestToString(HttpServletRequest request) {\n     return String.format(\"%s %s\", request.getMethod(), request.getRequestURI());\n   }\n+\n+  public static String getDefaultWebServerApiUrlPrefix() {\n+    // Strip off the '*' from the end of the default web server API URL prefix\n+    return WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX\n+        .substring(0, WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX.length() - 1);\n+  }", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1NjQ2MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530756461", "bodyText": "After adding back the SessionManager class, it will use this method. So, I will leave it here for now and move it to some util test class when we remove SessionManager", "author": "Lincong", "createdAt": "2020-11-26T03:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwOTEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMTc5NA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530711794", "body": "Can we avoid wildcard import?", "bodyText": "Can we avoid wildcard import?", "bodyHTML": "<p dir=\"auto\">Can we avoid wildcard import?</p>", "author": "efeg", "createdAt": "2020-11-26T00:48:19Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjE0Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530712142", "body": "Let's not use the deprecated API any more. We can instead use `Assert.assertThrows` to check for expected exceptions.", "bodyText": "Let's not use the deprecated API any more. We can instead use Assert.assertThrows to check for expected exceptions.", "bodyHTML": "<p dir=\"auto\">Let's not use the deprecated API any more. We can instead use <code>Assert.assertThrows</code> to check for expected exceptions.</p>", "author": "efeg", "createdAt": "2020-11-26T00:49:48Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjYxNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530712615", "body": "Can we move all occurrences of the hardcoded `\"getString\"` to a static final variable?", "bodyText": "Can we move all occurrences of the hardcoded \"getString\" to a static final variable?", "bodyHTML": "<p dir=\"auto\">Can we move all occurrences of the hardcoded <code>\"getString\"</code> to a static final variable?</p>", "author": "efeg", "createdAt": "2020-11-26T00:51:36Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTMyMA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530759320", "bodyText": "Fixed", "author": "Lincong", "createdAt": "2020-11-26T03:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530713557", "body": "Since we already have `testWebserverUrlPrefixConfigsCorrectSetup` can we drop this test?", "bodyText": "Since we already have testWebserverUrlPrefixConfigsCorrectSetup can we drop this test?", "bodyHTML": "<p dir=\"auto\">Since we already have <code>testWebserverUrlPrefixConfigsCorrectSetup</code> can we drop this test?</p>", "author": "efeg", "createdAt": "2020-11-26T00:54:23Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/WebserverUrlPrefixConfigTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+import org.apache.kafka.common.config.ConfigException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.easymock.EasyMock.*;\n+\n+\n+public class WebserverUrlPrefixConfigTest {\n+\n+  @Rule\n+  public ExpectedException _expectedException = ExpectedException.none();\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigsCorrectSetup() {\n+    KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n+        .addMockedMethod(\"getString\")\n+        .createNiceMock();\n+\n+    expect(config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG)).andReturn(\"a/b/c/d/*\");\n+    expect(config.getString(WebServerConfig.WEBSERVER_UI_URLPREFIX_CONFIG)).andReturn(\"a/b/c/*\");\n+    replay(config);\n+    config.sanityCheckWebServerUrlPrefix();\n+    verify(config);\n+  }\n+\n+  @Test\n+  public void testWebserverUrlPrefixConfigCorrectSetupOnDefault() {", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MzMyNw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530763327", "bodyText": "I think the value of this test is to ensure that if those default values ever change to something that is not valid, this test will catch it and the testWebserverUrlPrefixConfigsCorrectSetup serves a different purpose", "author": "Lincong", "createdAt": "2020-11-26T04:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2OTY3NA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r532769674", "bodyText": "Don't we have sanity checks in KafkaCruiseControlConfig.java to ensure validity of config values in production regardless of whether they are the default ones or overridden by users?", "author": "efeg", "createdAt": "2020-11-30T17:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5NjkyMA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r532896920", "bodyText": "Yes, the sanity checks will catch invalid web server URL prefix. However, invalid URL prefix can only be caught during runtime whereas this test fails the build process if the default webserver URL is invalid.", "author": "Lincong", "createdAt": "2020-11-30T20:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxODkxNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533618915", "bodyText": "The existing unit tests already verify (as they should) the behavior of the tested unit with all possible good and bad inputs. The default value is just one such input, whose behavior is known -- because we already tested what such an input would generate. We know that if a future programmer changes the default value, CC will fail to start and provide a meaningful message to help resolve the configuration issue, because it is tested.\nI am against adding individual tests specifically for the default values as it eventually leads to bloating, making a build take longer at CircleCI with no additional testing coverage.", "author": "efeg", "createdAt": "2020-12-01T18:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1OTEzNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533859135", "bodyText": "Makes sense. I'll remove it", "author": "Lincong", "createdAt": "2020-12-02T02:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzY0NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530713645", "body": "Can we avoid using wildcard import?", "bodyText": "Can we avoid using wildcard import?", "bodyHTML": "<p dir=\"auto\">Can we avoid using wildcard import?</p>", "author": "efeg", "createdAt": "2020-11-26T00:54:40Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -34,8 +35,7 @@\n import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.REBALANCE;\n import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.REMOVE_BROKER;\n import static com.linkedin.kafka.cruisecontrol.servlet.CruiseControlEndPoint.USER_TASKS;\n-import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.GET_METHOD;\n-import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.POST_METHOD;\n+import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.*;", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMzg3Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530713872", "body": "Can we avoid wildcard import?", "bodyText": "Can we avoid wildcard import?", "bodyHTML": "<p dir=\"auto\">Can we avoid wildcard import?</p>", "author": "efeg", "createdAt": "2020-11-26T00:55:20Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -14,6 +16,8 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static com.linkedin.kafka.cruisecontrol.servlet.KafkaCruiseControlServletUtils.*;", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDg1Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530714857", "body": "Is `apiUrlPrefix` expected to be the same as `apiUrlPrefixParam` w/o an `*` at the end? If so, can we drop `apiUrlPrefix` from the parameters of this function and infer its value from `apiUrlPrefixParam`?", "bodyText": "Is apiUrlPrefix expected to be the same as apiUrlPrefixParam w/o an * at the end? If so, can we drop apiUrlPrefix from the parameters of this function and infer its value from apiUrlPrefixParam?", "bodyHTML": "<p dir=\"auto\">Is <code>apiUrlPrefix</code> expected to be the same as <code>apiUrlPrefixParam</code> w/o an <code>*</code> at the end? If so, can we drop <code>apiUrlPrefix</code> from the parameters of this function and infer its value from <code>apiUrlPrefixParam</code>?</p>", "author": "efeg", "createdAt": "2020-11-26T00:59:08Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +140,40 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/\", \"/a/*\");\n+    verifyGetEndpoint(\"/kafkacruisecontrol/\", WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefix API URL prefix used to concatenate with \"/endpoint_name\" to mock the URL in a request\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefix, String apiUrlPrefixParam) {", "originalCommit": "14ade8d35919d7b5a86c03aff54c4ce4533332a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDkxMw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r530760913", "bodyText": "Yes, good idea", "author": "Lincong", "createdAt": "2020-11-26T04:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDQwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533620403", "body": "Looks like this change modifies and breaks the indentation formatting. Can we avoid such changes?\r\nImporting the project style file on IntelliJ may help: https://github.com/linkedin/cruise-control/blob/master/docs/code-style.xml", "bodyText": "Looks like this change modifies and breaks the indentation formatting. Can we avoid such changes?\nImporting the project style file on IntelliJ may help: https://github.com/linkedin/cruise-control/blob/master/docs/code-style.xml", "bodyHTML": "<p dir=\"auto\">Looks like this change modifies and breaks the indentation formatting. Can we avoid such changes?<br>\nImporting the project style file on IntelliJ may help: <a href=\"https://github.com/linkedin/cruise-control/blob/master/docs/code-style.xml\">https://github.com/linkedin/cruise-control/blob/master/docs/code-style.xml</a></p>", "author": "efeg", "createdAt": "2020-12-01T18:12:10Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManager.java", "diffHunk": "@@ -51,8 +52,8 @@\n   private final Time _time;\n   private final ScheduledExecutorService _sessionCleaner =\n       Executors.newSingleThreadScheduledExecutor(new KafkaCruiseControlThreadFactory(\"SessionCleaner\",\n-                                                                                     true,", "originalCommit": "540f22f46f69bde7bc97b77472aa484c68df4055", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2Mjg5MA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533862890", "bodyText": "Will do. Thanks", "author": "Lincong", "createdAt": "2020-12-02T02:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMDg0MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533620841", "body": "Bad indentation -- please see the earlier comment.", "bodyText": "Bad indentation -- please see the earlier comment.", "bodyHTML": "<p dir=\"auto\">Bad indentation -- please see the earlier comment.</p>", "author": "efeg", "createdAt": "2020-12-01T18:12:57Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/SessionManagerTest.java", "diffHunk": "@@ -36,8 +36,8 @@ public void testCreateAndCloseSession() {\n     SessionManager sessionManager = new SessionManager(1, 1000, context.time(), new MetricRegistry(), null);\n \n     sessionManager.getAndCreateSessionIfNotExist(context.request(0),\n-                                                 () -> new OperationFuture(\"testCreateSession\"),", "originalCommit": "540f22f46f69bde7bc97b77472aa484c68df4055", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ae006f1d8ee2583a7dc0fa116dba5036fcdb411", "url": "https://github.com/linkedin/cruise-control/commit/8ae006f1d8ee2583a7dc0fa116dba5036fcdb411", "message": "Removed redundant unit test", "committedDate": "2020-12-02T02:55:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2OTg0MA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533869840", "body": "Was this added intentionally?", "bodyText": "Was this added intentionally?", "bodyHTML": "<p dir=\"auto\">Was this added intentionally?</p>", "author": "efeg", "createdAt": "2020-12-02T03:20:34Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServlet.java", "diffHunk": "@@ -74,6 +74,10 @@ public void destroy() {\n     }\n   }\n \n+  public String apiUrlPrefix() {\n+    return _config.getString(WebServerConfig.WEBSERVER_API_URLPREFIX_CONFIG);\n+  }\n+", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMzg5NA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533903894", "bodyText": "I was added for testing purposes. I'll remove it.", "author": "Lincong", "createdAt": "2020-12-02T05:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg2OTg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mjc5NQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533872795", "body": "I am not sure if extending an abstract class like this by `SecurityAndSslConfigTest` and `WebserverUrlPrefixConfigTest` is the best approach. \r\n* `SecurityAndSslConfigTest` does not use `GET_CLASS_METHOD_NAME` anywhere, and \r\n* `WebserverUrlPrefixConfigTest` does not use `GET_BOOLEAN_METHOD_NAME` and `HASH_CODE_METHOD_NAME` anywhere.\r\n\r\nInheritance should imply that everything in the abstract class applies to the classes that extend from it. If the goal here is to share common constants across classes, can we move these constants to a utility class within `config` package?", "bodyText": "I am not sure if extending an abstract class like this by SecurityAndSslConfigTest and WebserverUrlPrefixConfigTest is the best approach.\n\nSecurityAndSslConfigTest does not use GET_CLASS_METHOD_NAME anywhere, and\nWebserverUrlPrefixConfigTest does not use GET_BOOLEAN_METHOD_NAME and HASH_CODE_METHOD_NAME anywhere.\n\nInheritance should imply that everything in the abstract class applies to the classes that extend from it. If the goal here is to share common constants across classes, can we move these constants to a utility class within config package?", "bodyHTML": "<p dir=\"auto\">I am not sure if extending an abstract class like this by <code>SecurityAndSslConfigTest</code> and <code>WebserverUrlPrefixConfigTest</code> is the best approach.</p>\n<ul dir=\"auto\">\n<li><code>SecurityAndSslConfigTest</code> does not use <code>GET_CLASS_METHOD_NAME</code> anywhere, and</li>\n<li><code>WebserverUrlPrefixConfigTest</code> does not use <code>GET_BOOLEAN_METHOD_NAME</code> and <code>HASH_CODE_METHOD_NAME</code> anywhere.</li>\n</ul>\n<p dir=\"auto\">Inheritance should imply that everything in the abstract class applies to the classes that extend from it. If the goal here is to share common constants across classes, can we move these constants to a utility class within <code>config</code> package?</p>", "author": "efeg", "createdAt": "2020-12-02T03:29:22Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/AbstractConfigTest.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.config;\n+\n+abstract class AbstractConfigTest {", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwNjAwMg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533906002", "bodyText": "Sure", "author": "Lincong", "createdAt": "2020-12-02T05:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mjc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3MzE0Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533873142", "body": "There are some missing cases below -- see:\r\n\r\n```\r\n        .addMockedMethod(\"getBoolean\")\r\n        .addMockedMethod(\"getClass\")\r\n        .addMockedMethod(\"hashCode\")\r\n```", "bodyText": "There are some missing cases below -- see:\n        .addMockedMethod(\"getBoolean\")\n        .addMockedMethod(\"getClass\")\n        .addMockedMethod(\"hashCode\")", "bodyHTML": "<p dir=\"auto\">There are some missing cases below -- see:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        .addMockedMethod(&quot;getBoolean&quot;)\n        .addMockedMethod(&quot;getClass&quot;)\n        .addMockedMethod(&quot;hashCode&quot;)\n\"><pre><code>        .addMockedMethod(\"getBoolean\")\n        .addMockedMethod(\"getClass\")\n        .addMockedMethod(\"hashCode\")\n</code></pre></div>", "author": "efeg", "createdAt": "2020-12-02T03:30:27Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/SecurityAndSslConfigTest.java", "diffHunk": "@@ -16,17 +16,17 @@\n import static org.easymock.EasyMock.replay;\n import static org.easymock.EasyMock.verify;\n \n-public class SecurityAndSslConfigTest {\n+public class SecurityAndSslConfigTest extends AbstractConfigTest {\n \n   @Rule\n   public ExpectedException _expectedException = ExpectedException.none();\n \n   @Test\n   public void testSslConfigsSetUpThrowsExceptionOnNullKeystoreLocation() {\n     KafkaCruiseControlConfig config = partialMockBuilder(KafkaCruiseControlConfig.class)\n-        .addMockedMethod(\"getBoolean\")\n-        .addMockedMethod(\"getString\")\n-        .addMockedMethod(\"hashCode\")\n+        .addMockedMethod(GET_BOOLEAN_METHOD_NAME)", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDcwMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533874701", "body": "Nit: It is common practice / convention to make utility classes `final`.", "bodyText": "Nit: It is common practice / convention to make utility classes final.", "bodyHTML": "<p dir=\"auto\">Nit: It is common practice / convention to make utility classes <code>final</code>.</p>", "author": "efeg", "createdAt": "2020-12-02T03:36:19Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletTestUtils.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+package com.linkedin.kafka.cruisecontrol.servlet;\n+\n+import com.linkedin.kafka.cruisecontrol.config.constants.WebServerConfig;\n+\n+\n+public class KafkaCruiseControlServletTestUtils {", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMzIwMg==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533903202", "bodyText": "Thanks for letting me know", "author": "Lincong", "createdAt": "2020-12-02T05:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDg2MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533874861", "body": "Nit: `times(1)` -> `once()`", "bodyText": "Nit: times(1) -> once()", "bodyHTML": "<p dir=\"auto\">Nit: <code>times(1)</code> -&gt; <code>once()</code></p>", "author": "efeg", "createdAt": "2020-12-02T03:36:55Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefixParam) {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String apiUrlPrefix = apiUrlPrefixParam.substring(0, apiUrlPrefixParam.length() - 1);\n+    for (CruiseControlEndPoint getEndPoint : CruiseControlEndPoint.getEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + getEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(GET_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(getEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);\n+    }\n+\n+    for (CruiseControlEndPoint postEndPoint : CruiseControlEndPoint.postEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + postEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(POST_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NTcxMQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533875711", "body": "I'd recommend dropping the test for the default -- i.e.\r\n```\r\nverifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\r\n```\r\n\r\nand moving the content of the private function `verifyGetEndpoint` inside this test function as it is not used anywhere else and contains all the logic of this test.", "bodyText": "I'd recommend dropping the test for the default -- i.e.\nverifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n\nand moving the content of the private function verifyGetEndpoint inside this test function as it is not used anywhere else and contains all the logic of this test.", "bodyHTML": "<p dir=\"auto\">I'd recommend dropping the test for the default -- i.e.</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\"><pre><code>verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n</code></pre></div>\n<p dir=\"auto\">and moving the content of the private function <code>verifyGetEndpoint</code> inside this test function as it is not used anywhere else and contains all the logic of this test.</p>", "author": "efeg", "createdAt": "2020-12-02T03:40:02Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMjg4OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533902889", "bodyText": "I have changed the implementation and the verifyGetEndpoint method is not used any more in test", "author": "Lincong", "createdAt": "2020-12-02T05:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjU5Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533876597", "body": "Does `reset` call also `verify` the mock? -- i.e. if not do we need `EasyMock.verify()`? (similar use above)", "bodyText": "Does reset call also verify the mock? -- i.e. if not do we need EasyMock.verify()? (similar use above)", "bodyHTML": "<p dir=\"auto\">Does <code>reset</code> call also <code>verify</code> the mock? -- i.e. if not do we need <code>EasyMock.verify()</code>? (similar use above)</p>", "author": "efeg", "createdAt": "2020-12-02T03:43:15Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtilsTest.java", "diffHunk": "@@ -136,4 +141,39 @@ public void testParseExecutionProgressCheckIntervalMsWithValue() {\n     EasyMock.verify(mockRequest);\n     Assert.assertEquals(Long.valueOf(EXECUTION_PROGRESS_CHECK_INTERVAL_STRING), executionProgressCheckIntervalMs);\n   }\n+\n+  @Test\n+  public void testGetEndpoint() {\n+    verifyGetEndpoint(\"/a/*\");\n+    verifyGetEndpoint(WebServerConfig.DEFAULT_WEBSERVER_API_URLPREFIX);\n+  }\n+\n+  /**\n+   * Verifies that {@link ParameterUtils#endPoint} can parse out all endpoints\n+   *\n+   * @param apiUrlPrefixParam API URL prefix parameter passed to the {@link ParameterUtils#endPoint}\n+   */\n+  private void verifyGetEndpoint(String apiUrlPrefixParam) {\n+    HttpServletRequest mockRequest = EasyMock.mock(HttpServletRequest.class);\n+    String apiUrlPrefix = apiUrlPrefixParam.substring(0, apiUrlPrefixParam.length() - 1);\n+    for (CruiseControlEndPoint getEndPoint : CruiseControlEndPoint.getEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + getEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(GET_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(getEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);\n+    }\n+\n+    for (CruiseControlEndPoint postEndPoint : CruiseControlEndPoint.postEndpoints()) {\n+      String mockRequestUri = apiUrlPrefix + postEndPoint;\n+      EasyMock.expect(mockRequest.getMethod()).andReturn(POST_METHOD).times(1);\n+      EasyMock.expect(mockRequest.getRequestURI()).andReturn(mockRequestUri).times(1);\n+      EasyMock.replay(mockRequest);\n+      CruiseControlEndPoint endPoint = ParameterUtils.endPoint(mockRequest, apiUrlPrefixParam);\n+      Assert.assertEquals(postEndPoint, endPoint);\n+      EasyMock.reset(mockRequest);", "originalCommit": "48038e7c7620b259769a99eb5ad0b09c343edd94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkwMjk4MA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r533902980", "bodyText": "I will call verify before reset", "author": "Lincong", "createdAt": "2020-12-02T05:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjA0OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534646049", "body": "If the URL does not have any extra path information, `request.getPathInfo()` can return `null`. In this case, I believe this method should return `null`.", "bodyText": "If the URL does not have any extra path information, request.getPathInfo() can return null. In this case, I believe this method should return null.", "bodyHTML": "<p dir=\"auto\">If the URL does not have any extra path information, <code>request.getPathInfo()</code> can return <code>null</code>. In this case, I believe this method should return <code>null</code>.</p>", "author": "efeg", "createdAt": "2020-12-03T03:45:49Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -177,7 +176,7 @@ public static CruiseControlEndPoint endPoint(HttpServletRequest request) {\n         throw new UserRequestException(\"Unsupported request method: \" + request.getMethod() + \".\");\n     }\n \n-    String path = request.getRequestURI().toUpperCase().replace(REQUEST_URI, \"\");\n+    String path = request.getPathInfo().substring(1); // Skip the first character '/'", "originalCommit": "5ede61bc8158263994bc7864f10e39dc4919b6be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2OTcwMA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534669700", "bodyText": "Good point!", "author": "Lincong", "createdAt": "2020-12-03T05:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NjMwOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534646309", "body": "Can we drop the unused `apiUrlPrefix`?", "bodyText": "Can we drop the unused apiUrlPrefix?", "bodyHTML": "<p dir=\"auto\">Can we drop the unused <code>apiUrlPrefix</code>?</p>", "author": "efeg", "createdAt": "2020-12-03T03:46:36Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/servlet/parameters/ParameterUtils.java", "diffHunk": "@@ -881,7 +880,7 @@ static int partitionBoundary(HttpServletRequest request, boolean isUpperBound) {\n     return Integer.parseInt(boundaries[isUpperBound ? 1 : 0]);\n   }\n \n-  static Set<Integer> brokerIds(HttpServletRequest request, boolean isOptional) throws UnsupportedEncodingException {\n+  static Set<Integer> brokerIds(HttpServletRequest request, String apiUrlPrefix, boolean isOptional) throws UnsupportedEncodingException {", "originalCommit": "5ede61bc8158263994bc7864f10e39dc4919b6be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ5OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534647499", "body": "Nit: Why do we break the line -- i.e. are there any code changes here?", "bodyText": "Nit: Why do we break the line -- i.e. are there any code changes here?", "bodyHTML": "<p dir=\"auto\">Nit: Why do we break the line -- i.e. are there any code changes here?</p>", "author": "efeg", "createdAt": "2020-12-03T03:50:17Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -234,7 +234,8 @@ private static UserTasksParameters mockUserTasksParameters(HttpServletRequest an\n     EasyMock.expect(parameters.userTaskIds()).andReturn(ParameterUtils.userTaskIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.clientIds()).andReturn(ParameterUtils.clientIds(answerQueryRequest)).anyTimes();\n     EasyMock.expect(parameters.endPoints()).andReturn(ParameterUtils.endPoints(answerQueryRequest)).anyTimes();\n-    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils.endPoint(answerQueryRequest)).anyTimes();\n+    EasyMock.expect(parameters.endPoint()).andReturn(ParameterUtils\n+        .endPoint(answerQueryRequest)).anyTimes();", "originalCommit": "5ede61bc8158263994bc7864f10e39dc4919b6be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3MTI5Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534671296", "bodyText": "Right. No need to break the line here and no code change here", "author": "Lincong", "createdAt": "2020-12-03T05:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NDk0Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535584947", "bodyText": "Nit: This line still has the line break even after this issue is marked as resolved.", "author": "efeg", "createdAt": "2020-12-03T20:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY0NzQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA0Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534651043", "body": "(Not introduced in this patch) Looks like this class has no `EasyMock.verify(XXX)` calls; hence, it is hard to verify if the expected calls are made as many as required. Should we add verify before appropriate EasyMock.reset() calls? -- e.g. for the first one in `testUserTaskParameters`\r\n\r\n```\r\n    EasyMock.verify(answerQueryRequest1, parameters1, _mockUUIDGenerator, _mockHttpSession, _mockHttpServletResponse);\r\n```", "bodyText": "(Not introduced in this patch) Looks like this class has no EasyMock.verify(XXX) calls; hence, it is hard to verify if the expected calls are made as many as required. Should we add verify before appropriate EasyMock.reset() calls? -- e.g. for the first one in testUserTaskParameters\n    EasyMock.verify(answerQueryRequest1, parameters1, _mockUUIDGenerator, _mockHttpSession, _mockHttpServletResponse);", "bodyHTML": "<p dir=\"auto\">(Not introduced in this patch) Looks like this class has no <code>EasyMock.verify(XXX)</code> calls; hence, it is hard to verify if the expected calls are made as many as required. Should we add verify before appropriate EasyMock.reset() calls? -- e.g. for the first one in <code>testUserTaskParameters</code></p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    EasyMock.verify(answerQueryRequest1, parameters1, _mockUUIDGenerator, _mockHttpSession, _mockHttpServletResponse);\n\"><pre><code>    EasyMock.verify(answerQueryRequest1, parameters1, _mockUUIDGenerator, _mockHttpSession, _mockHttpServletResponse);\n</code></pre></div>", "author": "efeg", "createdAt": "2020-12-03T04:01:31Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/KafkaCruiseControlServletEndpointTest.java", "diffHunk": "@@ -260,8 +261,10 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession()).andReturn(session).anyTimes();\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(method).anyTimes();\n-    EasyMock.expect(request.getRequestURI()).andReturn(KafkaCruiseControlServletUtils.REQUEST_URI + resource).anyTimes();\n+    EasyMock.expect(request.getRequestURI())\n+        .andReturn(KafkaCruiseControlServletTestUtils.getDefaultWebServerApiUrlPrefix() + resource).anyTimes();\n     EasyMock.expect(request.getParameterMap()).andReturn(params).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(\"/\" + resource).anyTimes();", "originalCommit": "5ede61bc8158263994bc7864f10e39dc4919b6be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyOTc4Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535429787", "bodyText": "I tried to add verify to KafkaCruiseControlServletEndpointTest.java and UserTaskManagerTest.java and I realized that the test cases need to be changed to pass the verify method and it requires some relatively non-trivial change or even re-write some of the unit tests.\nSo, I suggest not doing it in this PR since it's irrelevant and creating an issue for this task.", "author": "Lincong", "createdAt": "2020-12-03T17:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5OTg0OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535599849", "bodyText": "Issue created: #1408", "author": "Lincong", "createdAt": "2020-12-03T20:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MTA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjMzOA==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r534652338", "body": "(Not introduced in this PR) Can we add `verify` for mocks? (please see earlier similar comment)", "bodyText": "(Not introduced in this PR) Can we add verify for mocks? (please see earlier similar comment)", "bodyHTML": "<p dir=\"auto\">(Not introduced in this PR) Can we add <code>verify</code> for mocks? (please see earlier similar comment)</p>", "author": "efeg", "createdAt": "2020-12-03T04:05:46Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/servlet/UserTaskManagerTest.java", "diffHunk": "@@ -296,6 +296,7 @@ private HttpServletRequest prepareRequest(HttpSession session, String userTaskId\n     EasyMock.expect(request.getSession(false)).andReturn(session).anyTimes();\n     EasyMock.expect(request.getMethod()).andReturn(GET_METHOD).anyTimes();\n     EasyMock.expect(request.getRequestURI()).andReturn(resource).anyTimes();\n+    EasyMock.expect(request.getPathInfo()).andReturn(resource).anyTimes();", "originalCommit": "5ede61bc8158263994bc7864f10e39dc4919b6be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyOTk3Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535429977", "bodyText": "Same comment as above", "author": "Lincong", "createdAt": "2020-12-03T17:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4NjMzMw==", "url": "https://github.com/linkedin/cruise-control/pull/1401#discussion_r535586333", "bodyText": "Sure, we can address them in a separate PR -- can we create an issue about them?", "author": "efeg", "createdAt": "2020-12-03T20:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MjMzOA=="}], "type": "inlineReview"}, {"oid": "8a939ff9936ced5cc256193ea5286c3adb307cab", "url": "https://github.com/linkedin/cruise-control/commit/8a939ff9936ced5cc256193ea5286c3adb307cab", "message": "wip", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "1a7b573d1c88b22d0b2c0e3d694b176fc7125b68", "url": "https://github.com/linkedin/cruise-control/commit/1a7b573d1c88b22d0b2c0e3d694b176fc7125b68", "message": "Make the endpoint parsing method parse endpoint using a given API URL prefix string", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "311d635339dd9961dbf9adbf85f5293e74e32ba5", "url": "https://github.com/linkedin/cruise-control/commit/311d635339dd9961dbf9adbf85f5293e74e32ba5", "message": "Fix some issues", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "97e76dc8641e43276240e80cb50d333fc2cd8755", "url": "https://github.com/linkedin/cruise-control/commit/97e76dc8641e43276240e80cb50d333fc2cd8755", "message": "Fix PR issues", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "71034c98512391248b2eec29a2b3a5f42d18b692", "url": "https://github.com/linkedin/cruise-control/commit/71034c98512391248b2eec29a2b3a5f42d18b692", "message": "Add a getter on the CC servlet to expose API URL prefix", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "5d47729774eb5540c6524768fb682ba131513b29", "url": "https://github.com/linkedin/cruise-control/commit/5d47729774eb5540c6524768fb682ba131513b29", "message": "Removed redundant unit test", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "e814f6c1fc9d8d9ffcfe7a7b098ade6710d7707b", "url": "https://github.com/linkedin/cruise-control/commit/e814f6c1fc9d8d9ffcfe7a7b098ade6710d7707b", "message": "Remove session manager and its test", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "056797f32248f364011e6f988391b81da391ffee", "url": "https://github.com/linkedin/cruise-control/commit/056797f32248f364011e6f988391b81da391ffee", "message": "Change the endpoint method so that it gets resource information from the request object", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "2f37e15727064de1b5f4ed1925d7743c11a5b200", "url": "https://github.com/linkedin/cruise-control/commit/2f37e15727064de1b5f4ed1925d7743c11a5b200", "message": "Fix issues", "committedDate": "2020-12-03T04:57:45Z", "type": "commit"}, {"oid": "ee819293751b6263b7e7f394ac830fd2bbea7762", "url": "https://github.com/linkedin/cruise-control/commit/ee819293751b6263b7e7f394ac830fd2bbea7762", "message": "Fixed PR issues", "committedDate": "2020-12-03T17:19:41Z", "type": "commit"}, {"oid": "ee819293751b6263b7e7f394ac830fd2bbea7762", "url": "https://github.com/linkedin/cruise-control/commit/ee819293751b6263b7e7f394ac830fd2bbea7762", "message": "Fixed PR issues", "committedDate": "2020-12-03T17:19:41Z", "type": "forcePushed"}, {"oid": "864844ae83f500e4c2d2edd18b61650f4116447c", "url": "https://github.com/linkedin/cruise-control/commit/864844ae83f500e4c2d2edd18b61650f4116447c", "message": "Remove unnecessary line wrap", "committedDate": "2020-12-03T20:48:39Z", "type": "commit"}]}