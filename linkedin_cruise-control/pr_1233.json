{"pr_number": 1233, "pr_title": "Upgrade to kafka 2.5.0", "pr_author": "amuraru", "pr_createdAt": "2020-06-09T09:17:22Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1233", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1OTk3Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1233#discussion_r439959976", "body": "Here, not TP but tp1, because of the topic parameter is `TOPIC0+\"1\"`", "bodyText": "Here, not TP but tp1, because of the topic parameter is TOPIC0+\"1\"", "bodyHTML": "<p dir=\"auto\">Here, not TP but tp1, because of the topic parameter is <code>TOPIC0+\"1\"</code></p>", "author": "akatona84", "createdAt": "2020-06-15T06:43:16Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/aggregator/KafkaPartitionMetricSampleAggregatorTest.java", "diffHunk": "@@ -129,24 +129,24 @@ public void testAggregateWithUpdatedCluster() throws NotEnoughValidWindowsExcept\n                                                          TOPIC0,\n                                                          false,\n                                                          Collections.singletonList(new MetadataResponse.PartitionMetadata(\n-                                                             Errors.NONE, PARTITION, NODE_0,\n+                                                             Errors.NONE, TP, Optional.of(NODE_0.id()),\n                                                              Optional.of(RecordBatch.NO_PARTITION_LEADER_EPOCH),\n-                                                             Arrays.asList(nodes()), Arrays.asList(nodes()),\n+                                                             nodeIds(), nodeIds(),\n                                                              Collections.emptyList()))));\n     topicMetadata.add(new MetadataResponse.TopicMetadata(Errors.NONE,\n                                                          TOPIC0 + \"1\",\n                                                          false,\n                                                          Collections.singletonList(new MetadataResponse.PartitionMetadata(\n-                                                             Errors.NONE, 0, NODE_0,\n+                                                             Errors.NONE, TP, Optional.of(NODE_0.id()),", "originalCommit": "76d0fe8279bbdfacbd1b690454566b425508e23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MTI5Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1233#discussion_r440681293", "bodyText": "thanks", "author": "amuraru", "createdAt": "2020-06-16T08:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1OTk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2MTY5Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1233#discussion_r439961697", "body": "how about \r\n```suggestion\r\n    return Arrays.stream(NODES).map(Node::id).collect(Collectors.toList());\r\n```\r\nimho array cloning is unnecessary also more concise", "bodyText": "how about\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Arrays.asList(NODES.clone()).stream().map(n -> n.id()).collect(Collectors.toList());\n          \n          \n            \n                return Arrays.stream(NODES).map(Node::id).collect(Collectors.toList());\n          \n      \n    \n    \n  \n\nimho array cloning is unnecessary also more concise", "bodyHTML": "<p dir=\"auto\">how about</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">asList</span>(<span class=\"pl-c1\">NODES</span><span class=\"pl-k x x-first\">.</span><span class=\"x\">clone())</span><span class=\"pl-k x\">.</span><span class=\"x\">stream()</span><span class=\"pl-k x x-last\">.</span>map(<span class=\"x x-first\">n </span><span class=\"pl-k x\">-</span><span class=\"pl-k x\">&gt;</span><span class=\"x\"> n</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">id()</span>)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">stream</span>(<span class=\"pl-c1\">NODES</span><span class=\"x x-first\">)</span><span class=\"pl-k x x-last\">.</span>map(<span class=\"pl-smi x x-first\">Node</span><span class=\"pl-k x\">::</span><span class=\"x x-last\">id</span>)<span class=\"pl-k\">.</span>collect(<span class=\"pl-smi\">Collectors</span><span class=\"pl-k\">.</span>toList());</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">imho array cloning is unnecessary also more concise</p>", "author": "akatona84", "createdAt": "2020-06-15T06:47:50Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/monitor/MonitorUnitTestUtils.java", "diffHunk": "@@ -44,6 +46,13 @@ private MonitorUnitTestUtils() {\n     return NODES.clone();\n   }\n \n+  /**\n+   * @return The clone of the nodes in the {@link #getCluster(Collection)} and {@link #getMetadata(Collection)}.\n+   */\n+  public static List<Integer> nodeIds() {\n+    return Arrays.asList(NODES.clone()).stream().map(n -> n.id()).collect(Collectors.toList());", "originalCommit": "76d0fe8279bbdfacbd1b690454566b425508e23e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NTM3Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1233#discussion_r439965373", "body": "-1 could be MetadataResponse.NO_LEADER_ID", "bodyText": "-1 could be MetadataResponse.NO_LEADER_ID", "bodyHTML": "<p dir=\"auto\">-1 could be MetadataResponse.NO_LEADER_ID</p>", "author": "akatona84", "createdAt": "2020-06-15T06:56:56Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControlUtils.java", "diffHunk": "@@ -430,13 +430,13 @@ public static MetadataResponse prepareMetadataResponse(List<Node> brokers,\n     for (MetadataResponse.PartitionMetadata partitionMetadata : topicMetadata.partitionMetadata()) {\n       metadataResponseTopic.partitions().add(\n           new MetadataResponseData.MetadataResponsePartition()\n-              .setErrorCode(partitionMetadata.error().code())\n+              .setErrorCode(partitionMetadata.error.code())\n               .setPartitionIndex(partitionMetadata.partition())\n-              .setLeaderId(partitionMetadata.leader() == null ? -1 : partitionMetadata.leader().id())\n-              .setLeaderEpoch(partitionMetadata.leaderEpoch().orElse(RecordBatch.NO_PARTITION_LEADER_EPOCH))\n-              .setReplicaNodes(partitionMetadata.replicas().stream().map(Node::id).collect(Collectors.toList()))\n-              .setIsrNodes(partitionMetadata.isr().stream().map(Node::id).collect(Collectors.toList()))\n-              .setOfflineReplicas(partitionMetadata.offlineReplicas().stream().map(Node::id).collect(Collectors.toList())));\n+              .setLeaderId(partitionMetadata.leaderId.orElse(-1))", "originalCommit": "76d0fe8279bbdfacbd1b690454566b425508e23e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MTM3Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1233#discussion_r440681377", "bodyText": "thanks - updated", "author": "amuraru", "createdAt": "2020-06-16T08:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk2NTM3Mw=="}], "type": "inlineReview"}, {"oid": "2982cb144f4467a3ff474a3b8bf35ff603da5d47", "url": "https://github.com/linkedin/cruise-control/commit/2982cb144f4467a3ff474a3b8bf35ff603da5d47", "message": "Upgrade to kafka 2.5.0", "committedDate": "2020-06-16T08:28:44Z", "type": "commit"}, {"oid": "e49a127d66a13a463a8ddeeca495493575ea7085", "url": "https://github.com/linkedin/cruise-control/commit/e49a127d66a13a463a8ddeeca495493575ea7085", "message": "addressed review comments", "committedDate": "2020-06-16T08:34:53Z", "type": "commit"}, {"oid": "e49a127d66a13a463a8ddeeca495493575ea7085", "url": "https://github.com/linkedin/cruise-control/commit/e49a127d66a13a463a8ddeeca495493575ea7085", "message": "addressed review comments", "committedDate": "2020-06-16T08:34:53Z", "type": "forcePushed"}]}