{"pr_number": 1108, "pr_title": "Evolve BrokerCapacityConfigResolver interface to be aware whether capacity estimation is allowed or not in broker capacity resolution.", "pr_author": "kidkun", "pr_createdAt": "2020-02-18T19:44:16Z", "pr_url": "https://github.com/linkedin/cruise-control/pull/1108", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwODQ1OA==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382308458", "body": "If `allowBrokerCapacityEstimation` is `false`, then wouldn't node shuffling be redundant?", "bodyText": "If allowBrokerCapacityEstimation is false, then wouldn't node shuffling be redundant?", "bodyHTML": "<p dir=\"auto\">If <code>allowBrokerCapacityEstimation</code> is <code>false</code>, then wouldn't node shuffling be redundant?</p>", "author": "efeg", "createdAt": "2020-02-20T23:04:46Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/LoadMonitor.java", "diffHunk": "@@ -517,7 +523,8 @@ public ClusterModel clusterModel(long from,\n         clusterModel.createRack(rack);\n         BrokerCapacityInfo brokerCapacity;\n         try {\n-          brokerCapacity = _brokerCapacityConfigResolver.capacityForBroker(rack, node.host(), node.id(), BROKER_CAPACITY_FETCH_TIMEOUT_MS);\n+          brokerCapacity = _brokerCapacityConfigResolver.capacityForBroker(rack, node.host(), node.id(), BROKER_CAPACITY_FETCH_TIMEOUT_MS,", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNTk1Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382325956", "body": "Nit: Long line. I will update the `checkstyle` to make our check more strict -- e.g. from `160` to a more reasonable value.", "bodyText": "Nit: Long line. I will update the checkstyle to make our check more strict -- e.g. from 160 to a more reasonable value.", "bodyHTML": "<p dir=\"auto\">Nit: Long line. I will update the <code>checkstyle</code> to make our check more strict -- e.g. from <code>160</code> to a more reasonable value.</p>", "author": "efeg", "createdAt": "2020-02-20T23:54:53Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControl.java", "diffHunk": "@@ -255,14 +255,15 @@ public BrokerStats cachedBrokerLoadStats(boolean allowCapacityEstimation) {\n   /**\n    * Get the cluster model cutting off at the current timestamp.\n    * @param requirements the model completeness requirements.\n+   * @param allowBrokerCapacityEstimation Whether allow broker capacity resolver to estimate broker capacity.\n    * @param operationProgress the progress of the job to report.\n    * @return The cluster workload model.\n    * @throws NotEnoughValidWindowsException If there is not enough sample to generate cluster model.\n    * @throws TimeoutException If broker capacity resolver is unable to resolve broker capacity.\n    */\n-  public ClusterModel clusterModel(ModelCompletenessRequirements requirements, OperationProgress operationProgress)\n+  public ClusterModel clusterModel(ModelCompletenessRequirements requirements, Boolean allowBrokerCapacityEstimation, OperationProgress operationProgress)", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyODUyNw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382328527", "body": "Why do we prefer a `Boolean` for `allowBrokerCapacityEstimation` rather than a `boolean` -- i.e. is `null` parameter value allowed here?", "bodyText": "Why do we prefer a Boolean for allowBrokerCapacityEstimation rather than a boolean -- i.e. is null parameter value allowed here?", "bodyHTML": "<p dir=\"auto\">Why do we prefer a <code>Boolean</code> for <code>allowBrokerCapacityEstimation</code> rather than a <code>boolean</code> -- i.e. is <code>null</code> parameter value allowed here?</p>", "author": "efeg", "createdAt": "2020-02-21T00:03:21Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControl.java", "diffHunk": "@@ -255,14 +255,15 @@ public BrokerStats cachedBrokerLoadStats(boolean allowCapacityEstimation) {\n   /**\n    * Get the cluster model cutting off at the current timestamp.\n    * @param requirements the model completeness requirements.\n+   * @param allowBrokerCapacityEstimation Whether allow broker capacity resolver to estimate broker capacity.\n    * @param operationProgress the progress of the job to report.\n    * @return The cluster workload model.\n    * @throws NotEnoughValidWindowsException If there is not enough sample to generate cluster model.\n    * @throws TimeoutException If broker capacity resolver is unable to resolve broker capacity.\n    */\n-  public ClusterModel clusterModel(ModelCompletenessRequirements requirements, OperationProgress operationProgress)\n+  public ClusterModel clusterModel(ModelCompletenessRequirements requirements, Boolean allowBrokerCapacityEstimation, OperationProgress operationProgress)", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyOTU3Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382329573", "body": "Can we ensure that the JavaDoc indicates the expected return value if `allowCapacityEstimation` is `false` and the resolver fails to resolve the capacity?\r\n\r\n* If in this case the call throws an exception, I am not sure if `TimeoutException` would be the right one. Should it instead return an exception that extends from `KafkaCruiseControlException` -- e.g. `CapacityResolutionException`?\r\n* Alternatively, (and maybe more preferably) the call can return a special `BrokerCapacityInfo` that indicates unresolvable broker capacity. The calling logic then identify this response, and use it in case it is acceptable to do so -- e.g. for dead broker capacity.", "bodyText": "Can we ensure that the JavaDoc indicates the expected return value if allowCapacityEstimation is false and the resolver fails to resolve the capacity?\n\nIf in this case the call throws an exception, I am not sure if TimeoutException would be the right one. Should it instead return an exception that extends from KafkaCruiseControlException -- e.g. CapacityResolutionException?\nAlternatively, (and maybe more preferably) the call can return a special BrokerCapacityInfo that indicates unresolvable broker capacity. The calling logic then identify this response, and use it in case it is acceptable to do so -- e.g. for dead broker capacity.", "bodyHTML": "<p dir=\"auto\">Can we ensure that the JavaDoc indicates the expected return value if <code>allowCapacityEstimation</code> is <code>false</code> and the resolver fails to resolve the capacity?</p>\n<ul dir=\"auto\">\n<li>If in this case the call throws an exception, I am not sure if <code>TimeoutException</code> would be the right one. Should it instead return an exception that extends from <code>KafkaCruiseControlException</code> -- e.g. <code>CapacityResolutionException</code>?</li>\n<li>Alternatively, (and maybe more preferably) the call can return a special <code>BrokerCapacityInfo</code> that indicates unresolvable broker capacity. The calling logic then identify this response, and use it in case it is acceptable to do so -- e.g. for dead broker capacity.</li>\n</ul>", "author": "efeg", "createdAt": "2020-02-21T00:07:00Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigResolver.java", "diffHunk": "@@ -30,8 +30,11 @@\n    * @param host The host of the broker\n    * @param brokerId The id of the broker\n    * @param timeoutMs The timeout in millisecond.\n+   * @param allowCapacityEstimation Whether allow resolver to estimate broker capacity if resolver is unable to get", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1OTU5Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382759592", "bodyText": "Discuss offline, we will create a new BrokerCapacityResolvingException type to represent capacity resolving failure.", "author": "kidkun", "createdAt": "2020-02-21T19:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyOTU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMDQ1Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382330452", "body": "The `JavaDoc` seems to describe the internals of `BrokerCapacityInfo` -- can we move the relevant information to the `JavaDoc` of `BrokerCapacityInfo` and refer to it from this JavaDoc via a link?", "bodyText": "The JavaDoc seems to describe the internals of BrokerCapacityInfo -- can we move the relevant information to the JavaDoc of BrokerCapacityInfo and refer to it from this JavaDoc via a link?", "bodyHTML": "<p dir=\"auto\">The <code>JavaDoc</code> seems to describe the internals of <code>BrokerCapacityInfo</code> -- can we move the relevant information to the <code>JavaDoc</code> of <code>BrokerCapacityInfo</code> and refer to it from this JavaDoc via a link?</p>", "author": "efeg", "createdAt": "2020-02-21T00:10:24Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigResolver.java", "diffHunk": "@@ -30,8 +30,11 @@\n    * @param host The host of the broker\n    * @param brokerId The id of the broker\n    * @param timeoutMs The timeout in millisecond.\n+   * @param allowCapacityEstimation Whether allow resolver to estimate broker capacity if resolver is unable to get\n+   *                                capacity information of the broker.", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMjEzNA==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382332134", "body": "[Applies globally] Can we use consistent (1) name and (2) JavaDoc description for this parameter across the code base -- i.e. \r\n**name**: `allowBrokerCapacityEstimation` -> `allowCapacityEstimation`?\r\n**doc**: `Allow capacity estimation in cluster model if the underlying live broker capacity is unavailable.`", "bodyText": "[Applies globally] Can we use consistent (1) name and (2) JavaDoc description for this parameter across the code base -- i.e.\nname: allowBrokerCapacityEstimation -> allowCapacityEstimation?\ndoc: Allow capacity estimation in cluster model if the underlying live broker capacity is unavailable.", "bodyHTML": "<p dir=\"auto\">[Applies globally] Can we use consistent (1) name and (2) JavaDoc description for this parameter across the code base -- i.e.<br>\n<strong>name</strong>: <code>allowBrokerCapacityEstimation</code> -&gt; <code>allowCapacityEstimation</code>?<br>\n<strong>doc</strong>: <code>Allow capacity estimation in cluster model if the underlying live broker capacity is unavailable.</code></p>", "author": "efeg", "createdAt": "2020-02-21T00:16:08Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControl.java", "diffHunk": "@@ -255,14 +255,15 @@ public BrokerStats cachedBrokerLoadStats(boolean allowCapacityEstimation) {\n   /**\n    * Get the cluster model cutting off at the current timestamp.\n    * @param requirements the model completeness requirements.\n+   * @param allowBrokerCapacityEstimation Whether allow broker capacity resolver to estimate broker capacity.", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzNTY0Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382335643", "body": "Can we avoid passing a local variable to a method of this class?", "bodyText": "Can we avoid passing a local variable to a method of this class?", "bodyHTML": "<p dir=\"auto\">Can we avoid passing a local variable to a method of this class?</p>", "author": "efeg", "createdAt": "2020-02-21T00:29:01Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolver.java", "diffHunk": "@@ -151,28 +152,35 @@\n   private static final String NUM_CORES_CONFIG = \"num.cores\";\n   public static final double DEFAULT_CPU_CAPACITY_WITH_CORES = 100.0;\n   private static Map<Integer, BrokerCapacityInfo> _capacitiesForBrokers;\n+  private String _configFile;\n \n   @Override\n   public void configure(Map<String, ?> configs) {\n-    String configFile = KafkaCruiseControlUtils.getRequiredConfig(configs, CAPACITY_CONFIG_FILE);\n+    _configFile = KafkaCruiseControlUtils.getRequiredConfig(configs, CAPACITY_CONFIG_FILE);\n     try {\n-      loadCapacities(configFile);\n+      loadCapacities(_configFile);", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzNjI0Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382336243", "body": "`Either allow capacity estimation` -> in this case, shouldn't the users also ensure that the broker has a default capacity as defined via broker id `-1`?", "bodyText": "Either allow capacity estimation -> in this case, shouldn't the users also ensure that the broker has a default capacity as defined via broker id -1?", "bodyHTML": "<p dir=\"auto\"><code>Either allow capacity estimation</code> -&gt; in this case, shouldn't the users also ensure that the broker has a default capacity as defined via broker id <code>-1</code>?</p>", "author": "efeg", "createdAt": "2020-02-21T00:31:13Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolver.java", "diffHunk": "@@ -151,28 +152,35 @@\n   private static final String NUM_CORES_CONFIG = \"num.cores\";\n   public static final double DEFAULT_CPU_CAPACITY_WITH_CORES = 100.0;\n   private static Map<Integer, BrokerCapacityInfo> _capacitiesForBrokers;\n+  private String _configFile;\n \n   @Override\n   public void configure(Map<String, ?> configs) {\n-    String configFile = KafkaCruiseControlUtils.getRequiredConfig(configs, CAPACITY_CONFIG_FILE);\n+    _configFile = KafkaCruiseControlUtils.getRequiredConfig(configs, CAPACITY_CONFIG_FILE);\n     try {\n-      loadCapacities(configFile);\n+      loadCapacities(_configFile);\n     } catch (FileNotFoundException e) {\n       throw new IllegalArgumentException(e);\n     }\n   }\n \n   @Override\n-  public BrokerCapacityInfo capacityForBroker(String rack, String host, int brokerId, long timeoutMs) {\n+  public BrokerCapacityInfo capacityForBroker(String rack, String host, int brokerId, long timeoutMs, boolean allowCapacityEstimation)\n+      throws TimeoutException {\n     if (brokerId >= 0) {\n       BrokerCapacityInfo capacity = _capacitiesForBrokers.get(brokerId);\n       if (capacity != null) {\n         return capacity;\n       } else {\n-        String info = String.format(\"Missing broker id(%d) in capacity config file.\", brokerId);\n-        return new BrokerCapacityInfo(_capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).capacity(), info,\n-                                      _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).diskCapacityByLogDir(),\n-                                      _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).numCpuCores());\n+        if (allowCapacityEstimation) {\n+          String info = String.format(\"Missing broker id(%d) in capacity config file.\", brokerId);\n+          return new BrokerCapacityInfo(_capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).capacity(), info,\n+                                        _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).diskCapacityByLogDir(),\n+                                        _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).numCpuCores());\n+        } else {\n+          throw new TimeoutException(String.format(\"Unable to resolve capacity of broker %d. Either allow capacity estimation \"", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NTIzOA==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382355238", "body": "Shouldn't this logic be handled in this layer?  -- i.e. why don't we pass `allowBrokerCapacityEstimation` rather than `aliveBrokers.contains(replica.id()) && allowBrokerCapacityEstimation`?\r\n(please see the previous comment on potentially returning a special broker capacity response for unresolveable broker capacity).", "bodyText": "Shouldn't this logic be handled in this layer?  -- i.e. why don't we pass allowBrokerCapacityEstimation rather than aliveBrokers.contains(replica.id()) && allowBrokerCapacityEstimation?\n(please see the previous comment on potentially returning a special broker capacity response for unresolveable broker capacity).", "bodyHTML": "<p dir=\"auto\">Shouldn't this logic be handled in this layer?  -- i.e. why don't we pass <code>allowBrokerCapacityEstimation</code> rather than <code>aliveBrokers.contains(replica.id()) &amp;&amp; allowBrokerCapacityEstimation</code>?<br>\n(please see the previous comment on potentially returning a special broker capacity response for unresolveable broker capacity).</p>", "author": "efeg", "createdAt": "2020-02-21T01:41:17Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/MonitorUtils.java", "diffHunk": "@@ -463,7 +465,9 @@ static void populatePartitionLoad(Cluster cluster,\n         String rack = getRackHandleNull(replica);\n         BrokerCapacityInfo brokerCapacity;\n         try {\n-          brokerCapacity = brokerCapacityConfigResolver.capacityForBroker(rack, replica.host(), replica.id(), BROKER_CAPACITY_FETCH_TIMEOUT_MS);\n+          // Do not allow capacity estimation for dead brokers.\n+          brokerCapacity = brokerCapacityConfigResolver.capacityForBroker(rack, replica.host(), replica.id(), BROKER_CAPACITY_FETCH_TIMEOUT_MS,\n+                                                                          aliveBrokers.contains(replica.id()) && allowBrokerCapacityEstimation);", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NjE3Nw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382356177", "body": "Not sure if `TimeoutException` is correct/sufficient exception here in case the capacity cannot be resolved due to not allowing CPU capacity estimation. ", "bodyText": "Not sure if TimeoutException is correct/sufficient exception here in case the capacity cannot be resolved due to not allowing CPU capacity estimation.", "bodyHTML": "<p dir=\"auto\">Not sure if <code>TimeoutException</code> is correct/sufficient exception here in case the capacity cannot be resolved due to not allowing CPU capacity estimation.</p>", "author": "efeg", "createdAt": "2020-02-21T01:45:19Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/CruiseControlMetricsProcessor.java", "diffHunk": "@@ -82,9 +82,9 @@ private void updateCachedNumCoresByBroker(Cluster cluster) {\n         }\n         try {\n           BrokerCapacityInfo capacity =\n-              _brokerCapacityConfigResolver.capacityForBroker(getRackHandleNull(node), node.host(), bid, BROKER_CAPACITY_FETCH_TIMEOUT_MS);\n-          // No mapping shall be recorded if capacity is estimated, but estimation is not allowed.\n-          return (!_allowCpuCapacityEstimation && capacity.isEstimated()) ? null : capacity.numCpuCores();\n+              _brokerCapacityConfigResolver.capacityForBroker(getRackHandleNull(node), node.host(), bid, BROKER_CAPACITY_FETCH_TIMEOUT_MS,\n+                                                              _allowCpuCapacityEstimation);\n+          return capacity.numCpuCores();", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NzM4OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382357389", "body": "Can we add the relevant test cases to ensure correct functionality when allow capacity estimation is `false` and the capacity cannot be resolved for (1) dead brokers and (2) alive brokers?", "bodyText": "Can we add the relevant test cases to ensure correct functionality when allow capacity estimation is false and the capacity cannot be resolved for (1) dead brokers and (2) alive brokers?", "bodyHTML": "<p dir=\"auto\">Can we add the relevant test cases to ensure correct functionality when allow capacity estimation is <code>false</code> and the capacity cannot be resolved for (1) dead brokers and (2) alive brokers?</p>", "author": "efeg", "createdAt": "2020-02-21T01:49:26Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolverTest.java", "diffHunk": "@@ -35,52 +35,52 @@ private static BrokerCapacityConfigResolver getBrokerCapacityConfigResolver(Stri\n   public void testParseConfigFile() throws TimeoutException {\n     BrokerCapacityConfigResolver configResolver = getBrokerCapacityConfigResolver(\"testCapacityConfig.json\", this.getClass());\n \n-    assertEquals(200000.0, configResolver.capacityForBroker(\"\", \"\", 0, BROKER_CAPACITY_FETCH_TIMEOUT_MS)\n+    assertEquals(200000.0, configResolver.capacityForBroker(\"\", \"\", 0, BROKER_CAPACITY_FETCH_TIMEOUT_MS, false)", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1Nzg1Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382357856", "body": "Can we verify (via test cases) that the anomaly detectors behave as expected if capacity estimation is disabled (i.e. the default behavior) and capacity resolver cannot resolve capacity of (1) dead brokers, (2) alive brokers, and (3) a mix of dead/alive brokers.", "bodyText": "Can we verify (via test cases) that the anomaly detectors behave as expected if capacity estimation is disabled (i.e. the default behavior) and capacity resolver cannot resolve capacity of (1) dead brokers, (2) alive brokers, and (3) a mix of dead/alive brokers.", "bodyHTML": "<p dir=\"auto\">Can we verify (via test cases) that the anomaly detectors behave as expected if capacity estimation is disabled (i.e. the default behavior) and capacity resolver cannot resolve capacity of (1) dead brokers, (2) alive brokers, and (3) a mix of dead/alive brokers.</p>", "author": "efeg", "createdAt": "2020-02-21T01:51:19Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/detector/AnomalyDetectorTest.java", "diffHunk": "@@ -293,7 +293,7 @@ private void testFixAnomaly(AnomalyType anomalyType)\n       EasyMock.expect(mockAnomalyNotifier.onGoalViolation(EasyMock.isA(GoalViolations.class))).andReturn(AnomalyNotificationResult.fix());\n     } else if (anomalyType == KafkaAnomalyType.DISK_FAILURE) {\n       ClusterModel singleBrokerWithBadDisk = singleBrokerWithBadDisk();\n-      EasyMock.expect(mockKafkaCruiseControl.clusterModel(EasyMock.anyObject(), EasyMock.anyObject())).andReturn(singleBrokerWithBadDisk);\n+      EasyMock.expect(mockKafkaCruiseControl.clusterModel(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject())).andReturn(singleBrokerWithBadDisk);", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwNTkyOQ==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382805929", "bodyText": "I feel these scenario is specific to LoadMonitor, I prefer to add check in LoadMonitorTest, this test should focus on how detector react to different anomalies.", "author": "kidkun", "createdAt": "2020-02-21T21:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1Nzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODI1MQ==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382358251", "body": "Should we add test cases for allow capacity is `false` for load monitor?", "bodyText": "Should we add test cases for allow capacity is false for load monitor?", "bodyHTML": "<p dir=\"auto\">Should we add test cases for allow capacity is <code>false</code> for load monitor?</p>", "author": "efeg", "createdAt": "2020-02-21T01:52:54Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/monitor/LoadMonitorTest.java", "diffHunk": "@@ -250,6 +250,7 @@ public void testBasicClusterModel() throws NotEnoughValidWindowsException, Timeo\n \n     ClusterModel clusterModel = loadMonitor.clusterModel(-1, Long.MAX_VALUE,\n                                                          new ModelCompletenessRequirements(2, 1.0, false),\n+                                                         true,", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1OTE0Mg==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r382359142", "body": "Getting a `TimeoutException` here seems a little non-intuitive -- should we adopt one of the approaches in the previous discussion?", "bodyText": "Getting a TimeoutException here seems a little non-intuitive -- should we adopt one of the approaches in the previous discussion?", "bodyHTML": "<p dir=\"auto\">Getting a <code>TimeoutException</code> here seems a little non-intuitive -- should we adopt one of the approaches in the previous discussion?</p>", "author": "efeg", "createdAt": "2020-02-21T01:56:31Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/monitor/sampling/CruiseControlMetricsProcessorTest.java", "diffHunk": "@@ -129,8 +130,8 @@ public void testWithCpuCapacityEstimation() throws TimeoutException {\n     // All estimated.\n     BrokerCapacityConfigResolver brokerCapacityConfigResolverAllEstimated = EasyMock.mock(BrokerCapacityConfigResolver.class);\n     EasyMock.expect(brokerCapacityConfigResolverAllEstimated.capacityForBroker(EasyMock.anyString(), EasyMock.anyString(),\n-                                                                               EasyMock.anyInt(), EasyMock.anyLong()))\n-            .andReturn(new BrokerCapacityInfo(EMPTY_BROKER_CAPACITY, \"All estimated\", Collections.emptyMap(), MOCK_NUM_CPU_CORES)).anyTimes();\n+                                                                               EasyMock.anyInt(), EasyMock.anyLong(), EasyMock.eq(false)))\n+            .andThrow(new TimeoutException(\"Unable to resolve capacity.\")).anyTimes();", "originalCommit": "c84af32fcc96d1c4d026e8e4dd5aac54bb8ace6f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b3fe9b180220c58c210f3735e1fe73161c6cfc6", "url": "https://github.com/linkedin/cruise-control/commit/3b3fe9b180220c58c210f3735e1fe73161c6cfc6", "message": "Improve broker capacity estimation.", "committedDate": "2020-02-21T23:36:09Z", "type": "commit"}, {"oid": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "url": "https://github.com/linkedin/cruise-control/commit/edea6da765dc7e1c227086175da9ff1cf1dbd14f", "message": "Address the feedback.", "committedDate": "2020-02-21T23:36:09Z", "type": "commit"}, {"oid": "751e4f26076b5a8edd8f0ca9a538230d1f01feb5", "url": "https://github.com/linkedin/cruise-control/commit/751e4f26076b5a8edd8f0ca9a538230d1f01feb5", "message": "Fix build failure.", "committedDate": "2020-02-21T23:36:09Z", "type": "commit"}, {"oid": "751e4f26076b5a8edd8f0ca9a538230d1f01feb5", "url": "https://github.com/linkedin/cruise-control/commit/751e4f26076b5a8edd8f0ca9a538230d1f01feb5", "message": "Fix build failure.", "committedDate": "2020-02-21T23:36:09Z", "type": "forcePushed"}, {"oid": "34ce3f6af2f599682715c2e89a0b21c6b5ce0e88", "url": "https://github.com/linkedin/cruise-control/commit/34ce3f6af2f599682715c2e89a0b21c6b5ce0e88", "message": "Fix build failue.", "committedDate": "2020-02-21T23:41:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3OTcxMw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383579713", "body": "(Applies globally to the similar usages in JavaDoc) `TimeoutException` is underdefined.", "bodyText": "(Applies globally to the similar usages in JavaDoc) TimeoutException is underdefined.", "bodyHTML": "<p dir=\"auto\">(Applies globally to the similar usages in JavaDoc) <code>TimeoutException</code> is underdefined.</p>", "author": "efeg", "createdAt": "2020-02-24T23:41:42Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/KafkaCruiseControl.java", "diffHunk": "@@ -256,15 +257,18 @@ public BrokerStats cachedBrokerLoadStats(boolean allowCapacityEstimation) {\n   /**\n    * Get the cluster model cutting off at the current timestamp.\n    * @param requirements the model completeness requirements.\n-   * @param allowBrokerCapacityEstimation Whether allow broker capacity resolver to estimate broker capacity.\n+   * @param allowCapacityEstimation whether allow capacity estimation in cluster model if the underlying live broker capacity is unavailable.\n    * @param operationProgress the progress of the job to report.\n    * @return The cluster workload model.\n    * @throws NotEnoughValidWindowsException If there is not enough sample to generate cluster model.\n    * @throws TimeoutException If broker capacity resolver is unable to resolve broker capacity.\n+   * @throws BrokerCapacityResolvingException If broker capacity resolver fails to resolve broker capacity.", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MTk2NA==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383591964", "body": "Nit: `%d.Either` -> `%d. Either`", "bodyText": "Nit: %d.Either -> %d. Either", "bodyHTML": "<p dir=\"auto\">Nit: <code>%d.Either</code> -&gt; <code>%d. Either</code></p>", "author": "efeg", "createdAt": "2020-02-25T00:21:00Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolver.java", "diffHunk": "@@ -178,8 +179,9 @@ public BrokerCapacityInfo capacityForBroker(String rack, String host, int broker\n                                         _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).diskCapacityByLogDir(),\n                                         _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).numCpuCores());\n         } else {\n-          throw new TimeoutException(String.format(\"Unable to resolve capacity of broker %d. Either allow capacity estimation \"\n-                                                   + \"or add broker's capacity information in file %s.\", brokerId, _configFile));\n+          throw new BrokerCapacityResolvingException(String.format(\"Unable to resolve capacity of broker %d.Either (1) adding the \"", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjE4OQ==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383592189", "body": "Missing closing parenthesis. ", "bodyText": "Missing closing parenthesis.", "bodyHTML": "<p dir=\"auto\">Missing closing parenthesis.</p>", "author": "efeg", "createdAt": "2020-02-25T00:21:39Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolver.java", "diffHunk": "@@ -178,8 +179,9 @@ public BrokerCapacityInfo capacityForBroker(String rack, String host, int broker\n                                         _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).diskCapacityByLogDir(),\n                                         _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).numCpuCores());\n         } else {\n-          throw new TimeoutException(String.format(\"Unable to resolve capacity of broker %d. Either allow capacity estimation \"\n-                                                   + \"or add broker's capacity information in file %s.\", brokerId, _configFile));\n+          throw new BrokerCapacityResolvingException(String.format(\"Unable to resolve capacity of broker %d.Either (1) adding the \"\n+              + \"default broker capacity (via adding capacity for broker %d and allowing capacity estimation or (2) add missing \"", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MjY5Ng==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383592696", "body": "Inconsistent use of `add` and `adding` \r\nshould we reformat it as -> `Either add (1) XXX, or (2) YYY.`", "bodyText": "Inconsistent use of add and adding\nshould we reformat it as -> Either add (1) XXX, or (2) YYY.", "bodyHTML": "<p dir=\"auto\">Inconsistent use of <code>add</code> and <code>adding</code><br>\nshould we reformat it as -&gt; <code>Either add (1) XXX, or (2) YYY.</code></p>", "author": "efeg", "createdAt": "2020-02-25T00:23:24Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolver.java", "diffHunk": "@@ -178,8 +179,9 @@ public BrokerCapacityInfo capacityForBroker(String rack, String host, int broker\n                                         _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).diskCapacityByLogDir(),\n                                         _capacitiesForBrokers.get(DEFAULT_CAPACITY_BROKER_ID).numCpuCores());\n         } else {\n-          throw new TimeoutException(String.format(\"Unable to resolve capacity of broker %d. Either allow capacity estimation \"\n-                                                   + \"or add broker's capacity information in file %s.\", brokerId, _configFile));\n+          throw new BrokerCapacityResolvingException(String.format(\"Unable to resolve capacity of broker %d.Either (1) adding the \"", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5Mjg1MA==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383592850", "body": "Nit: -> `An instance`", "bodyText": "Nit: -> An instance", "bodyHTML": "<p dir=\"auto\">Nit: -&gt; <code>An instance</code></p>", "author": "efeg", "createdAt": "2020-02-25T00:23:52Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigResolver.java", "diffHunk": "@@ -32,9 +25,10 @@\n    * @param timeoutMs The timeout in millisecond.\n    * @param allowCapacityEstimation Whether allow resolver to estimate broker capacity if resolver is unable to get\n    *                                capacity information of the broker.\n-   * @return The capacity of each resource for the broker\n+   * @return A instance of {@link BrokerCapacityInfo}.", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MzAwMw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383593003", "body": "Nit: `encapsulate` -> `encapsulating`", "bodyText": "Nit: encapsulate -> encapsulating", "bodyHTML": "<p dir=\"auto\">Nit: <code>encapsulate</code> -&gt; <code>encapsulating</code></p>", "author": "efeg", "createdAt": "2020-02-25T00:24:24Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityInfo.java", "diffHunk": "@@ -10,6 +10,17 @@\n import java.util.stream.Collectors;\n \n \n+/**\n+ * A class encapsulate the capacity information of a broker, which includes all the resources defined in {@link Resource}.", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5MzM5Mw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383593393", "body": "Nit: `BrokerCapacityResolvingException` -> `CapacityResolutionException` or `BrokerCapacityResolutionException`", "bodyText": "Nit: BrokerCapacityResolvingException -> CapacityResolutionException or BrokerCapacityResolutionException", "bodyHTML": "<p dir=\"auto\">Nit: <code>BrokerCapacityResolvingException</code> -&gt; <code>CapacityResolutionException</code> or <code>BrokerCapacityResolutionException</code></p>", "author": "efeg", "createdAt": "2020-02-25T00:25:48Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/exception/BrokerCapacityResolvingException.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright 2020 LinkedIn Corp. Licensed under the BSD 2-Clause License (the \"License\"). See License in the project root for license information.\n+ */\n+\n+package com.linkedin.kafka.cruisecontrol.exception;\n+\n+/**\n+ * The exception indicating something went wrong during the broker capacity resolving.\n+ */\n+public class BrokerCapacityResolvingException extends KafkaCruiseControlException {", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NDAwMA==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383594000", "body": "Do we even need to create a new `ArrayList` in case `allowCapacityEstimation` is false?", "bodyText": "Do we even need to create a new ArrayList in case allowCapacityEstimation is false?", "bodyHTML": "<p dir=\"auto\">Do we even need to create a new <code>ArrayList</code> in case <code>allowCapacityEstimation</code> is false?</p>", "author": "efeg", "createdAt": "2020-02-25T00:27:42Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/monitor/LoadMonitor.java", "diffHunk": "@@ -506,32 +510,34 @@ public ClusterModel clusterModel(long from,\n     final Timer.Context ctx = _clusterModelCreationTimer.time();\n     try {\n       // Create the racks and brokers.\n-      // Shuffle nodes before getting their capacity from the capacity resolver.\n-      // This enables a capacity resolver to estimate the capacity of the nodes, for which the capacity retrieval has\n-      // failed.\n+      // If broker capacity is allowed to estimate broker capacity, shuffle nodes before getting their capacity from the\n+      // capacity resolver. This is good for the capacity resolver to estimate the capacity of the nodes, for which the\n+      // capacity retrieval has failed.\n       // The use case for this estimation is that if the capacity of one of the nodes is not available (e.g. due to some\n       // 3rd party service issue), the capacity resolver may want to use the capacity of a peer node as the capacity for\n       // that node.\n       // To this end, Cruise Control handles the case that the first node is problematic so the capacity resolver does\n       // not have the chance to get the capacity for the other nodes.\n       // Shuffling the node order helps, as the problematic node is unlikely to always be the first node in the list.\n       List<Node> shuffledNodes = new ArrayList<>(cluster.nodes());", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NjEwNw==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383596107", "body": "Sorry if my previous comment was not clear -- let me rephrase my question:\r\n\r\n* Why are we passing a parameter to `loadCapacities` function? This is a local private function and we already have the value assigned to `_configFile`. Is it possible to modify `loadCapacities` to have no parameter and use `_configFile` in its implementation?", "bodyText": "Sorry if my previous comment was not clear -- let me rephrase my question:\n\nWhy are we passing a parameter to loadCapacities function? This is a local private function and we already have the value assigned to _configFile. Is it possible to modify loadCapacities to have no parameter and use _configFile in its implementation?", "bodyHTML": "<p dir=\"auto\">Sorry if my previous comment was not clear -- let me rephrase my question:</p>\n<ul dir=\"auto\">\n<li>Why are we passing a parameter to <code>loadCapacities</code> function? This is a local private function and we already have the value assigned to <code>_configFile</code>. Is it possible to modify <code>loadCapacities</code> to have no parameter and use <code>_configFile</code> in its implementation?</li>\n</ul>", "author": "efeg", "createdAt": "2020-02-25T00:34:54Z", "path": "cruise-control/src/main/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolver.java", "diffHunk": "@@ -156,17 +156,18 @@\n \n   @Override\n   public void configure(Map<String, ?> configs) {\n-    _configFile = KafkaCruiseControlUtils.getRequiredConfig(configs, CAPACITY_CONFIG_FILE);\n+    String configFile = KafkaCruiseControlUtils.getRequiredConfig(configs, CAPACITY_CONFIG_FILE);\n+    _configFile = configFile;\n     try {\n-      loadCapacities(_configFile);\n+      loadCapacities(configFile);", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NzIyNQ==", "url": "https://github.com/linkedin/cruise-control/pull/1108#discussion_r383597225", "body": "Nit: `an BrokerCapacityResolvingException` -> `a BrokerCapacityResolvingException`", "bodyText": "Nit: an BrokerCapacityResolvingException -> a BrokerCapacityResolvingException", "bodyHTML": "<p dir=\"auto\">Nit: <code>an BrokerCapacityResolvingException</code> -&gt; <code>a BrokerCapacityResolvingException</code></p>", "author": "efeg", "createdAt": "2020-02-25T00:38:53Z", "path": "cruise-control/src/test/java/com/linkedin/kafka/cruisecontrol/config/BrokerCapacityConfigFileResolverTest.java", "diffHunk": "@@ -48,10 +49,13 @@ public void testParseConfigFile() throws TimeoutException {\n \n     assertTrue(configResolver.capacityForBroker(\"\", \"\", 2, BROKER_CAPACITY_FETCH_TIMEOUT_MS, true).isEstimated());\n     assertTrue(configResolver.capacityForBroker(\"\", \"\", 2, BROKER_CAPACITY_FETCH_TIMEOUT_MS, true).estimationInfo().length() > 0);\n+\n+    // If resolver is unable to get broker capacity and not allowed to estimate, an BrokerCapacityResolvingException will be thrown.", "originalCommit": "edea6da765dc7e1c227086175da9ff1cf1dbd14f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "561185e8db4da8d44b1958202495249c5ed11c96", "url": "https://github.com/linkedin/cruise-control/commit/561185e8db4da8d44b1958202495249c5ed11c96", "message": "Address the feedback.", "committedDate": "2020-02-26T01:04:45Z", "type": "commit"}]}