{"pr_number": 1355, "pr_title": "new function createFastBridgeFederationData and new class FastBridgeF\u2026", "pr_author": "pamgonzalez", "pr_createdAt": "2020-11-04T15:56:18Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1355", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMjEyNA==", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r518032124", "body": "Add new line please", "bodyText": "Add new line please", "bodyHTML": "<p dir=\"auto\">Add new line please</p>", "author": "guidohernan93", "createdAt": "2020-11-05T13:00:18Z", "path": "rskj-core/src/main/java/co/rsk/peg/fastbridge/FastBridgeFederationInformation.java", "diffHunk": "@@ -18,4 +18,4 @@ public Sha256Hash getDerivationHash() {\n     public byte[] getFederationScriptHash() {\n         return federationScriptHash.clone();\n     }\n-}\n+}", "originalCommit": "7a38860a09c70e5eaea7d486ee115db6d781a8ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2OTgzMg==", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r518069832", "body": "Why `getBytes()`?", "bodyText": "Why getBytes()?", "bodyHTML": "<p dir=\"auto\">Why <code>getBytes()</code>?</p>", "author": "guidohernan93", "createdAt": "2020-11-05T13:58:09Z", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4983,6 +4984,59 @@ public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOExc\n                 ConsensusRule.RSKIP134);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertArrayEquals(resultDerivationHash.getBytes(), fastBridgeFederationData.getDerivationArgumentsHash().getBytes());", "originalCommit": "7a38860a09c70e5eaea7d486ee115db6d781a8ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MjIzMQ==", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r518072231", "bodyText": "it is an error. Thanks", "author": "pamgonzalez", "createdAt": "2020-11-05T14:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2OTgzMg=="}], "type": "inlineReview"}, {"oid": "0e4d90752091a9975aaa9084f452c2079917be04", "url": "https://github.com/rsksmart/rskj/commit/0e4d90752091a9975aaa9084f452c2079917be04", "message": "new function createFastBridgeFederationData and new class FastBridgeFederationData to return this information.\n\nIncludes new class to FastBridgeFederationData, and a function to create this new class with fast bridge derivation argument hash (calculated here) and the redeem script obteined using bitcoinj-thin.", "committedDate": "2020-11-05T14:03:25Z", "type": "forcePushed"}, {"oid": "55f8c2f2b490a0481d0716beeb36dcd716702954", "url": "https://github.com/rsksmart/rskj/commit/55f8c2f2b490a0481d0716beeb36dcd716702954", "message": "new function createFastBridgeFederationData and new class FastBridgeFederationData to return this information.\n\nIncludes new class to FastBridgeFederationData, and a function to create this new class with fast bridge derivation argument hash (calculated here) and the redeem script obteined using bitcoinj-thin.", "committedDate": "2020-11-05T17:58:51Z", "type": "forcePushed"}, {"oid": "73be92907e83774f3bfbee28fe4ca7cbb77b4c7a", "url": "https://github.com/rsksmart/rskj/commit/73be92907e83774f3bfbee28fe4ca7cbb77b4c7a", "message": "new function createFastBridgeFederationData and new class FastBridgeFederationData to return this information.\n\nIncludes new class to FastBridgeFederationData, and a function to create this new class with fast bridge derivation argument hash (calculated here) and the redeem script obteined using bitcoinj-thin.", "committedDate": "2020-11-05T19:30:53Z", "type": "forcePushed"}, {"oid": "96bcc703ab1035ae329936371a2af97666585f36", "url": "https://github.com/rsksmart/rskj/commit/96bcc703ab1035ae329936371a2af97666585f36", "message": "new function createFastBridgeFederationData and new class FastBridgeFederationData to return this information.\n\nIncludes new class to FastBridgeFederationData, and a function to create this new class with fast bridge derivation argument hash (calculated here) and the redeem script obteined using bitcoinj-thin.", "committedDate": "2020-11-10T14:46:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5Nzc2MQ==", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r520797761", "body": "```suggestion\r\n```\r\nIf the test doesn't triggers an exception it will fail, no need for the assert.fail", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.fail();\n          \n      \n    \n    \n  \n\nIf the test doesn't triggers an exception it will fail, no need for the assert.fail", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-smi x\">Assert</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">fail();</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">If the test doesn't triggers an exception it will fail, no need for the assert.fail</p>", "author": "josedahlquist", "createdAt": "2020-11-10T18:54:40Z", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -5446,6 +5446,79 @@ public void getFastBridgeWallet_OK() {\n         assertEquals(obtainedWallet.getBalance(), Coin.COIN);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertEquals(resultDerivationHash, fastBridgeFederationData.getDerivationArgumentsHash());\n+        Assert.assertEquals(ScriptBuilder.createP2SHOutputScript(resultRedeemScript), fastBridgeFederationData.getFastBridgeScriptHash());\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void createFastBridgeFederationData_Error() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(null).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        Assert.fail();", "originalCommit": "96bcc703ab1035ae329936371a2af97666585f36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5ODEyNA==", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r520798124", "body": "Why using generic Exception? Doesn't it triggers custom exceptions?", "bodyText": "Why using generic Exception? Doesn't it triggers custom exceptions?", "bodyHTML": "<p dir=\"auto\">Why using generic Exception? Doesn't it triggers custom exceptions?</p>", "author": "josedahlquist", "createdAt": "2020-11-10T18:55:03Z", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -5446,6 +5446,79 @@ public void getFastBridgeWallet_OK() {\n         assertEquals(obtainedWallet.getBalance(), Coin.COIN);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertEquals(resultDerivationHash, fastBridgeFederationData.getDerivationArgumentsHash());\n+        Assert.assertEquals(ScriptBuilder.createP2SHOutputScript(resultRedeemScript), fastBridgeFederationData.getFastBridgeScriptHash());\n+    }\n+\n+    @Test(expected = Exception.class)", "originalCommit": "96bcc703ab1035ae329936371a2af97666585f36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b5b30d447fb1a7f3a0925840c535ffd41cf2a2b4", "url": "https://github.com/rsksmart/rskj/commit/b5b30d447fb1a7f3a0925840c535ffd41cf2a2b4", "message": "new function createFastBridgeFederationData and new class FastBridgeFederationData to return this information.\n\nIncludes new class to FastBridgeFederationData, and a function to create this new class with fast bridge derivation argument hash (calculated here) and the redeem script obteined using bitcoinj-thin.", "committedDate": "2020-11-11T14:07:49Z", "type": "commit"}, {"oid": "b5b30d447fb1a7f3a0925840c535ffd41cf2a2b4", "url": "https://github.com/rsksmart/rskj/commit/b5b30d447fb1a7f3a0925840c535ffd41cf2a2b4", "message": "new function createFastBridgeFederationData and new class FastBridgeFederationData to return this information.\n\nIncludes new class to FastBridgeFederationData, and a function to create this new class with fast bridge derivation argument hash (calculated here) and the redeem script obteined using bitcoinj-thin.", "committedDate": "2020-11-11T14:07:49Z", "type": "forcePushed"}]}